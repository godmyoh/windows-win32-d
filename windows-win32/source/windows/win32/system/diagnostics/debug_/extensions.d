module windows.win32.system.diagnostics.debug_.extensions;

import windows.win32.guid : GUID;
import windows.win32.data.xml.msxml : IXMLDOMElement;
import windows.win32.foundation : BOOL, BOOLEAN, BSTR, CHAR, FARPROC, HANDLE, HRESULT, PSTR, PWSTR, VARIANT_BOOL;
import windows.win32.system.com : IStream, IUnknown;
import windows.win32.system.diagnostics.debug_ : CONTEXT, EXCEPTION_RECORD64, IMAGE_NT_HEADERS64;
import windows.win32.system.kernel : LIST_ENTRY32, LIST_ENTRY64;
import windows.win32.system.memory : MEMORY_BASIC_INFORMATION64;
import windows.win32.system.variant : VARENUM, VARIANT;

version (Windows):
extern (Windows):

HRESULT DebugConnect(const(char)*, const(GUID)*, void**);
HRESULT DebugConnectWide(const(wchar)*, const(GUID)*, void**);
HRESULT DebugCreate(const(GUID)*, void**);
HRESULT DebugCreateEx(const(GUID)*, uint, void**);
HRESULT CreateDataModelManager(IDebugHost, IDataModelManager*);
enum ERROR_DBG_CANCELLED = 0xc00004c7;
enum ERROR_DBG_TIMEOUT = 0xc00005b4;
enum DEBUG_GET_TEXT_COMPLETIONS_NO_DOT_COMMANDS = 0x00000001;
enum DEBUG_GET_TEXT_COMPLETIONS_NO_EXTENSION_COMMANDS = 0x00000002;
enum DEBUG_GET_TEXT_COMPLETIONS_NO_SYMBOLS = 0x00000004;
enum DEBUG_GET_TEXT_COMPLETIONS_IS_DOT_COMMAND = 0x00000001;
enum DEBUG_GET_TEXT_COMPLETIONS_IS_EXTENSION_COMMAND = 0x00000002;
enum DEBUG_GET_TEXT_COMPLETIONS_IS_SYMBOL = 0x00000004;
enum DEBUG_REQUEST_SOURCE_PATH_HAS_SOURCE_SERVER = 0x00000000;
enum DEBUG_REQUEST_TARGET_EXCEPTION_CONTEXT = 0x00000001;
enum DEBUG_REQUEST_TARGET_EXCEPTION_THREAD = 0x00000002;
enum DEBUG_REQUEST_TARGET_EXCEPTION_RECORD = 0x00000003;
enum DEBUG_REQUEST_GET_ADDITIONAL_CREATE_OPTIONS = 0x00000004;
enum DEBUG_REQUEST_SET_ADDITIONAL_CREATE_OPTIONS = 0x00000005;
enum DEBUG_REQUEST_GET_WIN32_MAJOR_MINOR_VERSIONS = 0x00000006;
enum DEBUG_REQUEST_READ_USER_MINIDUMP_STREAM = 0x00000007;
enum DEBUG_REQUEST_TARGET_CAN_DETACH = 0x00000008;
enum DEBUG_REQUEST_SET_LOCAL_IMPLICIT_COMMAND_LINE = 0x00000009;
enum DEBUG_REQUEST_GET_CAPTURED_EVENT_CODE_OFFSET = 0x0000000a;
enum DEBUG_REQUEST_READ_CAPTURED_EVENT_CODE_STREAM = 0x0000000b;
enum DEBUG_REQUEST_EXT_TYPED_DATA_ANSI = 0x0000000c;
enum DEBUG_REQUEST_GET_EXTENSION_SEARCH_PATH_WIDE = 0x0000000d;
enum DEBUG_REQUEST_GET_TEXT_COMPLETIONS_WIDE = 0x0000000e;
enum DEBUG_REQUEST_GET_CACHED_SYMBOL_INFO = 0x0000000f;
enum DEBUG_REQUEST_ADD_CACHED_SYMBOL_INFO = 0x00000010;
enum DEBUG_REQUEST_REMOVE_CACHED_SYMBOL_INFO = 0x00000011;
enum DEBUG_REQUEST_GET_TEXT_COMPLETIONS_ANSI = 0x00000012;
enum DEBUG_REQUEST_CURRENT_OUTPUT_CALLBACKS_ARE_DML_AWARE = 0x00000013;
enum DEBUG_REQUEST_GET_OFFSET_UNWIND_INFORMATION = 0x00000014;
enum DEBUG_REQUEST_GET_DUMP_HEADER = 0x00000015;
enum DEBUG_REQUEST_SET_DUMP_HEADER = 0x00000016;
enum DEBUG_REQUEST_MIDORI = 0x00000017;
enum DEBUG_REQUEST_PROCESS_DESCRIPTORS = 0x00000018;
enum DEBUG_REQUEST_MISC_INFORMATION = 0x00000019;
enum DEBUG_REQUEST_OPEN_PROCESS_TOKEN = 0x0000001a;
enum DEBUG_REQUEST_OPEN_THREAD_TOKEN = 0x0000001b;
enum DEBUG_REQUEST_DUPLICATE_TOKEN = 0x0000001c;
enum DEBUG_REQUEST_QUERY_INFO_TOKEN = 0x0000001d;
enum DEBUG_REQUEST_CLOSE_TOKEN = 0x0000001e;
enum DEBUG_REQUEST_WOW_PROCESS = 0x0000001f;
enum DEBUG_REQUEST_WOW_MODULE = 0x00000020;
enum DEBUG_LIVE_USER_NON_INVASIVE = 0x00000021;
enum DEBUG_REQUEST_RESUME_THREAD = 0x00000022;
enum DEBUG_REQUEST_INLINE_QUERY = 0x00000023;
enum DEBUG_REQUEST_TL_INSTRUMENTATION_AWARE = 0x00000024;
enum DEBUG_REQUEST_GET_INSTRUMENTATION_VERSION = 0x00000025;
enum DEBUG_REQUEST_GET_MODULE_ARCHITECTURE = 0x00000026;
enum DEBUG_REQUEST_GET_IMAGE_ARCHITECTURE = 0x00000027;
enum DEBUG_SRCFILE_SYMBOL_TOKEN = 0x00000000;
enum DEBUG_SRCFILE_SYMBOL_TOKEN_SOURCE_COMMAND_WIDE = 0x00000001;
enum DEBUG_SRCFILE_SYMBOL_CHECKSUMINFO = 0x00000002;
enum DEBUG_SYMINFO_BREAKPOINT_SOURCE_LINE = 0x00000000;
enum DEBUG_SYMINFO_IMAGEHLP_MODULEW64 = 0x00000001;
enum DEBUG_SYMINFO_GET_SYMBOL_NAME_BY_OFFSET_AND_TAG_WIDE = 0x00000002;
enum DEBUG_SYMINFO_GET_MODULE_SYMBOL_NAMES_AND_OFFSETS = 0x00000003;
enum DEBUG_SYSOBJINFO_THREAD_BASIC_INFORMATION = 0x00000000;
enum DEBUG_SYSOBJINFO_THREAD_NAME_WIDE = 0x00000001;
enum DEBUG_SYSOBJINFO_CURRENT_PROCESS_COOKIE = 0x00000002;
enum DEBUG_TBINFO_EXIT_STATUS = 0x00000001;
enum DEBUG_TBINFO_PRIORITY_CLASS = 0x00000002;
enum DEBUG_TBINFO_PRIORITY = 0x00000004;
enum DEBUG_TBINFO_TIMES = 0x00000008;
enum DEBUG_TBINFO_START_OFFSET = 0x00000010;
enum DEBUG_TBINFO_AFFINITY = 0x00000020;
enum DEBUG_TBINFO_ALL = 0x0000003f;
enum DEBUG_BREAKPOINT_CODE = 0x00000000;
enum DEBUG_BREAKPOINT_DATA = 0x00000001;
enum DEBUG_BREAKPOINT_TIME = 0x00000002;
enum DEBUG_BREAKPOINT_INLINE = 0x00000003;
enum DEBUG_BREAKPOINT_GO_ONLY = 0x00000001;
enum DEBUG_BREAKPOINT_DEFERRED = 0x00000002;
enum DEBUG_BREAKPOINT_ENABLED = 0x00000004;
enum DEBUG_BREAKPOINT_ADDER_ONLY = 0x00000008;
enum DEBUG_BREAKPOINT_ONE_SHOT = 0x00000010;
enum DEBUG_BREAK_READ = 0x00000001;
enum DEBUG_BREAK_WRITE = 0x00000002;
enum DEBUG_BREAK_EXECUTE = 0x00000004;
enum DEBUG_BREAK_IO = 0x00000008;
enum DEBUG_ATTACH_KERNEL_CONNECTION = 0x00000000;
enum DEBUG_ATTACH_LOCAL_KERNEL = 0x00000001;
enum DEBUG_ATTACH_EXDI_DRIVER = 0x00000002;
enum DEBUG_ATTACH_INSTALL_DRIVER = 0x00000004;
enum DEBUG_GET_PROC_DEFAULT = 0x00000000;
enum DEBUG_GET_PROC_FULL_MATCH = 0x00000001;
enum DEBUG_GET_PROC_ONLY_MATCH = 0x00000002;
enum DEBUG_GET_PROC_SERVICE_NAME = 0x00000004;
enum DEBUG_PROC_DESC_DEFAULT = 0x00000000;
enum DEBUG_PROC_DESC_NO_PATHS = 0x00000001;
enum DEBUG_PROC_DESC_NO_SERVICES = 0x00000002;
enum DEBUG_PROC_DESC_NO_MTS_PACKAGES = 0x00000004;
enum DEBUG_PROC_DESC_NO_COMMAND_LINE = 0x00000008;
enum DEBUG_PROC_DESC_NO_SESSION_ID = 0x00000010;
enum DEBUG_PROC_DESC_NO_USER_NAME = 0x00000020;
enum DEBUG_PROC_DESC_WITH_PACKAGEFAMILY = 0x00000040;
enum DEBUG_PROC_DESC_WITH_ARCHITECTURE = 0x00000080;
enum DEBUG_ATTACH_DEFAULT = 0x00000000;
enum DEBUG_ATTACH_NONINVASIVE = 0x00000001;
enum DEBUG_ATTACH_EXISTING = 0x00000002;
enum DEBUG_ATTACH_NONINVASIVE_NO_SUSPEND = 0x00000004;
enum DEBUG_ATTACH_INVASIVE_NO_INITIAL_BREAK = 0x00000008;
enum DEBUG_ATTACH_INVASIVE_RESUME_PROCESS = 0x00000010;
enum DEBUG_ATTACH_NONINVASIVE_ALLOW_PARTIAL = 0x00000020;
enum DEBUG_ECREATE_PROCESS_DEFAULT = 0x00000000;
enum DEBUG_ECREATE_PROCESS_INHERIT_HANDLES = 0x00000001;
enum DEBUG_ECREATE_PROCESS_USE_VERIFIER_FLAGS = 0x00000002;
enum DEBUG_ECREATE_PROCESS_USE_IMPLICIT_COMMAND_LINE = 0x00000004;
enum DEBUG_PROCESS_DETACH_ON_EXIT = 0x00000001;
enum DEBUG_PROCESS_ONLY_THIS_PROCESS = 0x00000002;
enum DEBUG_CONNECT_SESSION_DEFAULT = 0x00000000;
enum DEBUG_CONNECT_SESSION_NO_VERSION = 0x00000001;
enum DEBUG_CONNECT_SESSION_NO_ANNOUNCE = 0x00000002;
enum DEBUG_SERVERS_DEBUGGER = 0x00000001;
enum DEBUG_SERVERS_PROCESS = 0x00000002;
enum DEBUG_SERVERS_ALL = 0x00000003;
enum DEBUG_END_PASSIVE = 0x00000000;
enum DEBUG_END_ACTIVE_TERMINATE = 0x00000001;
enum DEBUG_END_ACTIVE_DETACH = 0x00000002;
enum DEBUG_END_REENTRANT = 0x00000003;
enum DEBUG_END_DISCONNECT = 0x00000004;
enum DEBUG_OUTPUT_NORMAL = 0x00000001;
enum DEBUG_OUTPUT_ERROR = 0x00000002;
enum DEBUG_OUTPUT_WARNING = 0x00000004;
enum DEBUG_OUTPUT_VERBOSE = 0x00000008;
enum DEBUG_OUTPUT_PROMPT = 0x00000010;
enum DEBUG_OUTPUT_PROMPT_REGISTERS = 0x00000020;
enum DEBUG_OUTPUT_EXTENSION_WARNING = 0x00000040;
enum DEBUG_OUTPUT_DEBUGGEE = 0x00000080;
enum DEBUG_OUTPUT_DEBUGGEE_PROMPT = 0x00000100;
enum DEBUG_OUTPUT_SYMBOLS = 0x00000200;
enum DEBUG_OUTPUT_STATUS = 0x00000400;
enum DEBUG_OUTPUT_XML = 0x00000800;
enum DEBUG_IOUTPUT_KD_PROTOCOL = 0x80000000;
enum DEBUG_IOUTPUT_REMOTING = 0x40000000;
enum DEBUG_IOUTPUT_BREAKPOINT = 0x20000000;
enum DEBUG_IOUTPUT_EVENT = 0x10000000;
enum DEBUG_IOUTPUT_ADDR_TRANSLATE = 0x08000000;
enum DEBUG_OUTPUT_IDENTITY_DEFAULT = 0x00000000;
enum DEBUG_CLIENT_UNKNOWN = 0x00000000;
enum DEBUG_CLIENT_VSINT = 0x00000001;
enum DEBUG_CLIENT_NTSD = 0x00000002;
enum DEBUG_CLIENT_NTKD = 0x00000003;
enum DEBUG_CLIENT_CDB = 0x00000004;
enum DEBUG_CLIENT_KD = 0x00000005;
enum DEBUG_CLIENT_WINDBG = 0x00000006;
enum DEBUG_CLIENT_WINIDE = 0x00000007;
enum DEBUG_FORMAT_DEFAULT = 0x00000000;
enum DEBUG_FORMAT_CAB_SECONDARY_ALL_IMAGES = 0x10000000;
enum DEBUG_FORMAT_WRITE_CAB = 0x20000000;
enum DEBUG_FORMAT_CAB_SECONDARY_FILES = 0x40000000;
enum DEBUG_FORMAT_NO_OVERWRITE = 0x80000000;
enum DEBUG_FORMAT_USER_SMALL_FULL_MEMORY = 0x00000001;
enum DEBUG_FORMAT_USER_SMALL_HANDLE_DATA = 0x00000002;
enum DEBUG_FORMAT_USER_SMALL_UNLOADED_MODULES = 0x00000004;
enum DEBUG_FORMAT_USER_SMALL_INDIRECT_MEMORY = 0x00000008;
enum DEBUG_FORMAT_USER_SMALL_DATA_SEGMENTS = 0x00000010;
enum DEBUG_FORMAT_USER_SMALL_FILTER_MEMORY = 0x00000020;
enum DEBUG_FORMAT_USER_SMALL_FILTER_PATHS = 0x00000040;
enum DEBUG_FORMAT_USER_SMALL_PROCESS_THREAD_DATA = 0x00000080;
enum DEBUG_FORMAT_USER_SMALL_PRIVATE_READ_WRITE_MEMORY = 0x00000100;
enum DEBUG_FORMAT_USER_SMALL_NO_OPTIONAL_DATA = 0x00000200;
enum DEBUG_FORMAT_USER_SMALL_FULL_MEMORY_INFO = 0x00000400;
enum DEBUG_FORMAT_USER_SMALL_THREAD_INFO = 0x00000800;
enum DEBUG_FORMAT_USER_SMALL_CODE_SEGMENTS = 0x00001000;
enum DEBUG_FORMAT_USER_SMALL_NO_AUXILIARY_STATE = 0x00002000;
enum DEBUG_FORMAT_USER_SMALL_FULL_AUXILIARY_STATE = 0x00004000;
enum DEBUG_FORMAT_USER_SMALL_MODULE_HEADERS = 0x00008000;
enum DEBUG_FORMAT_USER_SMALL_FILTER_TRIAGE = 0x00010000;
enum DEBUG_FORMAT_USER_SMALL_ADD_AVX_XSTATE_CONTEXT = 0x00020000;
enum DEBUG_FORMAT_USER_SMALL_IPT_TRACE = 0x00040000;
enum DEBUG_FORMAT_USER_SMALL_IGNORE_INACCESSIBLE_MEM = 0x08000000;
enum DEBUG_FORMAT_USER_SMALL_SCAN_PARTIAL_PAGES = 0x10000000;
enum DEBUG_DUMP_FILE_BASE = 0xffffffff;
enum DEBUG_DUMP_FILE_PAGE_FILE_DUMP = 0x00000000;
enum DEBUG_DUMP_FILE_LOAD_FAILED_INDEX = 0xffffffff;
enum DEBUG_DUMP_FILE_ORIGINAL_CAB_INDEX = 0xfffffffe;
enum DEBUG_STATUS_NO_CHANGE = 0x00000000;
enum DEBUG_STATUS_GO = 0x00000001;
enum DEBUG_STATUS_GO_HANDLED = 0x00000002;
enum DEBUG_STATUS_GO_NOT_HANDLED = 0x00000003;
enum DEBUG_STATUS_STEP_OVER = 0x00000004;
enum DEBUG_STATUS_STEP_INTO = 0x00000005;
enum DEBUG_STATUS_BREAK = 0x00000006;
enum DEBUG_STATUS_NO_DEBUGGEE = 0x00000007;
enum DEBUG_STATUS_STEP_BRANCH = 0x00000008;
enum DEBUG_STATUS_IGNORE_EVENT = 0x00000009;
enum DEBUG_STATUS_RESTART_REQUESTED = 0x0000000a;
enum DEBUG_STATUS_REVERSE_GO = 0x0000000b;
enum DEBUG_STATUS_REVERSE_STEP_BRANCH = 0x0000000c;
enum DEBUG_STATUS_REVERSE_STEP_OVER = 0x0000000d;
enum DEBUG_STATUS_REVERSE_STEP_INTO = 0x0000000e;
enum DEBUG_STATUS_OUT_OF_SYNC = 0x0000000f;
enum DEBUG_STATUS_WAIT_INPUT = 0x00000010;
enum DEBUG_STATUS_TIMEOUT = 0x00000011;
enum DEBUG_STATUS_MASK = 0x0000001f;
enum DEBUG_STATUS_INSIDE_WAIT = 0x0000000100000000;
enum DEBUG_STATUS_WAIT_TIMEOUT = 0x0000000200000000;
enum DEBUG_OUTCTL_THIS_CLIENT = 0x00000000;
enum DEBUG_OUTCTL_ALL_CLIENTS = 0x00000001;
enum DEBUG_OUTCTL_ALL_OTHER_CLIENTS = 0x00000002;
enum DEBUG_OUTCTL_IGNORE = 0x00000003;
enum DEBUG_OUTCTL_LOG_ONLY = 0x00000004;
enum DEBUG_OUTCTL_SEND_MASK = 0x00000007;
enum DEBUG_OUTCTL_NOT_LOGGED = 0x00000008;
enum DEBUG_OUTCTL_OVERRIDE_MASK = 0x00000010;
enum DEBUG_OUTCTL_DML = 0x00000020;
enum DEBUG_OUTCTL_AMBIENT_DML = 0xfffffffe;
enum DEBUG_OUTCTL_AMBIENT_TEXT = 0xffffffff;
enum DEBUG_OUTCTL_AMBIENT = 0xffffffff;
enum DEBUG_INTERRUPT_ACTIVE = 0x00000000;
enum DEBUG_INTERRUPT_PASSIVE = 0x00000001;
enum DEBUG_INTERRUPT_EXIT = 0x00000002;
enum DEBUG_CURRENT_DEFAULT = 0x0000000f;
enum DEBUG_CURRENT_SYMBOL = 0x00000001;
enum DEBUG_CURRENT_DISASM = 0x00000002;
enum DEBUG_CURRENT_REGISTERS = 0x00000004;
enum DEBUG_CURRENT_SOURCE_LINE = 0x00000008;
enum DEBUG_DISASM_EFFECTIVE_ADDRESS = 0x00000001;
enum DEBUG_DISASM_MATCHING_SYMBOLS = 0x00000002;
enum DEBUG_DISASM_SOURCE_LINE_NUMBER = 0x00000004;
enum DEBUG_DISASM_SOURCE_FILE_NAME = 0x00000008;
enum DEBUG_LEVEL_SOURCE = 0x00000000;
enum DEBUG_LEVEL_ASSEMBLY = 0x00000001;
enum DEBUG_ENGOPT_IGNORE_DBGHELP_VERSION = 0x00000001;
enum DEBUG_ENGOPT_IGNORE_EXTENSION_VERSIONS = 0x00000002;
enum DEBUG_ENGOPT_ALLOW_NETWORK_PATHS = 0x00000004;
enum DEBUG_ENGOPT_DISALLOW_NETWORK_PATHS = 0x00000008;
enum DEBUG_ENGOPT_IGNORE_LOADER_EXCEPTIONS = 0x00000010;
enum DEBUG_ENGOPT_INITIAL_BREAK = 0x00000020;
enum DEBUG_ENGOPT_INITIAL_MODULE_BREAK = 0x00000040;
enum DEBUG_ENGOPT_FINAL_BREAK = 0x00000080;
enum DEBUG_ENGOPT_NO_EXECUTE_REPEAT = 0x00000100;
enum DEBUG_ENGOPT_FAIL_INCOMPLETE_INFORMATION = 0x00000200;
enum DEBUG_ENGOPT_ALLOW_READ_ONLY_BREAKPOINTS = 0x00000400;
enum DEBUG_ENGOPT_SYNCHRONIZE_BREAKPOINTS = 0x00000800;
enum DEBUG_ENGOPT_DISALLOW_SHELL_COMMANDS = 0x00001000;
enum DEBUG_ENGOPT_KD_QUIET_MODE = 0x00002000;
enum DEBUG_ENGOPT_DISABLE_MANAGED_SUPPORT = 0x00004000;
enum DEBUG_ENGOPT_DISABLE_MODULE_SYMBOL_LOAD = 0x00008000;
enum DEBUG_ENGOPT_DISABLE_EXECUTION_COMMANDS = 0x00010000;
enum DEBUG_ENGOPT_DISALLOW_IMAGE_FILE_MAPPING = 0x00020000;
enum DEBUG_ENGOPT_PREFER_DML = 0x00040000;
enum DEBUG_ENGOPT_DISABLESQM = 0x00080000;
enum DEBUG_ENGOPT_DISABLE_STEPLINES_OPTIONS = 0x00200000;
enum DEBUG_ENGOPT_DEBUGGING_SENSITIVE_DATA = 0x00400000;
enum DEBUG_ENGOPT_PREFER_TRACE_FILES = 0x00800000;
enum DEBUG_ENGOPT_RESOLVE_SHADOWED_VARIABLES = 0x01000000;
enum DEBUG_ENGOPT_ALL = 0x01efffff;
enum DEBUG_ANY_ID = 0xffffffff;
enum DBG_FRAME_DEFAULT = 0x00000000;
enum DBG_FRAME_IGNORE_INLINE = 0xffffffff;
enum STACK_FRAME_TYPE_INIT = 0x00000000;
enum STACK_FRAME_TYPE_STACK = 0x00000001;
enum STACK_FRAME_TYPE_INLINE = 0x00000002;
enum STACK_FRAME_TYPE_RA = 0x00000080;
enum STACK_FRAME_TYPE_IGNORE = 0x000000ff;
enum DEBUG_STACK_ARGUMENTS = 0x00000001;
enum DEBUG_STACK_FUNCTION_INFO = 0x00000002;
enum DEBUG_STACK_SOURCE_LINE = 0x00000004;
enum DEBUG_STACK_FRAME_ADDRESSES = 0x00000008;
enum DEBUG_STACK_COLUMN_NAMES = 0x00000010;
enum DEBUG_STACK_NONVOLATILE_REGISTERS = 0x00000020;
enum DEBUG_STACK_FRAME_NUMBERS = 0x00000040;
enum DEBUG_STACK_PARAMETERS = 0x00000080;
enum DEBUG_STACK_FRAME_ADDRESSES_RA_ONLY = 0x00000100;
enum DEBUG_STACK_FRAME_MEMORY_USAGE = 0x00000200;
enum DEBUG_STACK_PARAMETERS_NEWLINE = 0x00000400;
enum DEBUG_STACK_DML = 0x00000800;
enum DEBUG_STACK_FRAME_OFFSETS = 0x00001000;
enum DEBUG_STACK_PROVIDER = 0x00002000;
enum DEBUG_STACK_FRAME_ARCH = 0x00004000;
enum DEBUG_CLASS_UNINITIALIZED = 0x00000000;
enum DEBUG_CLASS_KERNEL = 0x00000001;
enum DEBUG_CLASS_USER_WINDOWS = 0x00000002;
enum DEBUG_CLASS_IMAGE_FILE = 0x00000003;
enum DEBUG_DUMP_SMALL = 0x00000400;
enum DEBUG_DUMP_DEFAULT = 0x00000401;
enum DEBUG_DUMP_FULL = 0x00000402;
enum DEBUG_DUMP_IMAGE_FILE = 0x00000403;
enum DEBUG_DUMP_TRACE_LOG = 0x00000404;
enum DEBUG_DUMP_WINDOWS_CE = 0x00000405;
enum DEBUG_DUMP_ACTIVE = 0x00000406;
enum DEBUG_KERNEL_CONNECTION = 0x00000000;
enum DEBUG_KERNEL_LOCAL = 0x00000001;
enum DEBUG_KERNEL_EXDI_DRIVER = 0x00000002;
enum DEBUG_KERNEL_IDNA = 0x00000003;
enum DEBUG_KERNEL_INSTALL_DRIVER = 0x00000004;
enum DEBUG_KERNEL_REPT = 0x00000005;
enum DEBUG_KERNEL_SMALL_DUMP = 0x00000400;
enum DEBUG_KERNEL_DUMP = 0x00000401;
enum DEBUG_KERNEL_ACTIVE_DUMP = 0x00000406;
enum DEBUG_KERNEL_FULL_DUMP = 0x00000402;
enum DEBUG_KERNEL_TRACE_LOG = 0x00000404;
enum DEBUG_USER_WINDOWS_PROCESS = 0x00000000;
enum DEBUG_USER_WINDOWS_PROCESS_SERVER = 0x00000001;
enum DEBUG_USER_WINDOWS_IDNA = 0x00000002;
enum DEBUG_USER_WINDOWS_REPT = 0x00000003;
enum DEBUG_USER_WINDOWS_SMALL_DUMP = 0x00000400;
enum DEBUG_USER_WINDOWS_DUMP = 0x00000401;
enum DEBUG_USER_WINDOWS_DUMP_WINDOWS_CE = 0x00000405;
enum DEBUG_EXTENSION_AT_ENGINE = 0x00000000;
enum DEBUG_EXECUTE_DEFAULT = 0x00000000;
enum DEBUG_EXECUTE_ECHO = 0x00000001;
enum DEBUG_EXECUTE_NOT_LOGGED = 0x00000002;
enum DEBUG_EXECUTE_NO_REPEAT = 0x00000004;
enum DEBUG_EXECUTE_USER_TYPED = 0x00000008;
enum DEBUG_EXECUTE_USER_CLICKED = 0x00000010;
enum DEBUG_EXECUTE_EXTENSION = 0x00000020;
enum DEBUG_EXECUTE_INTERNAL = 0x00000040;
enum DEBUG_EXECUTE_SCRIPT = 0x00000080;
enum DEBUG_EXECUTE_TOOLBAR = 0x00000100;
enum DEBUG_EXECUTE_MENU = 0x00000200;
enum DEBUG_EXECUTE_HOTKEY = 0x00000400;
enum DEBUG_EXECUTE_EVENT = 0x00000800;
enum DEBUG_FILTER_CREATE_THREAD = 0x00000000;
enum DEBUG_FILTER_EXIT_THREAD = 0x00000001;
enum DEBUG_FILTER_CREATE_PROCESS = 0x00000002;
enum DEBUG_FILTER_EXIT_PROCESS = 0x00000003;
enum DEBUG_FILTER_LOAD_MODULE = 0x00000004;
enum DEBUG_FILTER_UNLOAD_MODULE = 0x00000005;
enum DEBUG_FILTER_SYSTEM_ERROR = 0x00000006;
enum DEBUG_FILTER_INITIAL_BREAKPOINT = 0x00000007;
enum DEBUG_FILTER_INITIAL_MODULE_LOAD = 0x00000008;
enum DEBUG_FILTER_DEBUGGEE_OUTPUT = 0x00000009;
enum DEBUG_FILTER_BREAK = 0x00000000;
enum DEBUG_FILTER_SECOND_CHANCE_BREAK = 0x00000001;
enum DEBUG_FILTER_OUTPUT = 0x00000002;
enum DEBUG_FILTER_IGNORE = 0x00000003;
enum DEBUG_FILTER_REMOVE = 0x00000004;
enum DEBUG_FILTER_GO_HANDLED = 0x00000000;
enum DEBUG_FILTER_GO_NOT_HANDLED = 0x00000001;
enum DEBUG_WAIT_DEFAULT = 0x00000000;
enum DEBUG_VALUE_INVALID = 0x00000000;
enum DEBUG_VALUE_INT8 = 0x00000001;
enum DEBUG_VALUE_INT16 = 0x00000002;
enum DEBUG_VALUE_INT32 = 0x00000003;
enum DEBUG_VALUE_INT64 = 0x00000004;
enum DEBUG_VALUE_FLOAT32 = 0x00000005;
enum DEBUG_VALUE_FLOAT64 = 0x00000006;
enum DEBUG_VALUE_FLOAT80 = 0x00000007;
enum DEBUG_VALUE_FLOAT82 = 0x00000008;
enum DEBUG_VALUE_FLOAT128 = 0x00000009;
enum DEBUG_VALUE_VECTOR64 = 0x0000000a;
enum DEBUG_VALUE_VECTOR128 = 0x0000000b;
enum DEBUG_VALUE_TYPES = 0x0000000c;
enum DEBUG_OUT_TEXT_REPL_DEFAULT = 0x00000000;
enum DEBUG_ASMOPT_DEFAULT = 0x00000000;
enum DEBUG_ASMOPT_VERBOSE = 0x00000001;
enum DEBUG_ASMOPT_NO_CODE_BYTES = 0x00000002;
enum DEBUG_ASMOPT_IGNORE_OUTPUT_WIDTH = 0x00000004;
enum DEBUG_ASMOPT_SOURCE_LINE_NUMBER = 0x00000008;
enum DEBUG_EXPR_MASM = 0x00000000;
enum DEBUG_EXPR_CPLUSPLUS = 0x00000001;
enum DEBUG_EINDEX_NAME = 0x00000000;
enum DEBUG_EINDEX_FROM_START = 0x00000000;
enum DEBUG_EINDEX_FROM_END = 0x00000001;
enum DEBUG_EINDEX_FROM_CURRENT = 0x00000002;
enum DEBUG_LOG_DEFAULT = 0x00000000;
enum DEBUG_LOG_APPEND = 0x00000001;
enum DEBUG_LOG_UNICODE = 0x00000002;
enum DEBUG_LOG_DML = 0x00000004;
enum DEBUG_SYSVERSTR_SERVICE_PACK = 0x00000000;
enum DEBUG_SYSVERSTR_BUILD = 0x00000001;
enum DEBUG_MANAGED_DISABLED = 0x00000000;
enum DEBUG_MANAGED_ALLOWED = 0x00000001;
enum DEBUG_MANAGED_DLL_LOADED = 0x00000002;
enum DEBUG_MANSTR_NONE = 0x00000000;
enum DEBUG_MANSTR_LOADED_SUPPORT_DLL = 0x00000001;
enum DEBUG_MANSTR_LOAD_STATUS = 0x00000002;
enum DEBUG_MANRESET_DEFAULT = 0x00000000;
enum DEBUG_MANRESET_LOAD_DLL = 0x00000001;
enum DEBUG_EXEC_FLAGS_NONBLOCK = 0x00000001;
enum DEBUG_DATA_SPACE_VIRTUAL = 0x00000000;
enum DEBUG_DATA_SPACE_PHYSICAL = 0x00000001;
enum DEBUG_DATA_SPACE_CONTROL = 0x00000002;
enum DEBUG_DATA_SPACE_IO = 0x00000003;
enum DEBUG_DATA_SPACE_MSR = 0x00000004;
enum DEBUG_DATA_SPACE_BUS_DATA = 0x00000005;
enum DEBUG_DATA_SPACE_DEBUGGER_DATA = 0x00000006;
enum DEBUG_DATA_SPACE_COUNT = 0x00000007;
enum DEBUG_DATA_KernBase = 0x00000018;
enum DEBUG_DATA_BreakpointWithStatusAddr = 0x00000020;
enum DEBUG_DATA_SavedContextAddr = 0x00000028;
enum DEBUG_DATA_KiCallUserModeAddr = 0x00000038;
enum DEBUG_DATA_KeUserCallbackDispatcherAddr = 0x00000040;
enum DEBUG_DATA_PsLoadedModuleListAddr = 0x00000048;
enum DEBUG_DATA_PsActiveProcessHeadAddr = 0x00000050;
enum DEBUG_DATA_PspCidTableAddr = 0x00000058;
enum DEBUG_DATA_ExpSystemResourcesListAddr = 0x00000060;
enum DEBUG_DATA_ExpPagedPoolDescriptorAddr = 0x00000068;
enum DEBUG_DATA_ExpNumberOfPagedPoolsAddr = 0x00000070;
enum DEBUG_DATA_KeTimeIncrementAddr = 0x00000078;
enum DEBUG_DATA_KeBugCheckCallbackListHeadAddr = 0x00000080;
enum DEBUG_DATA_KiBugcheckDataAddr = 0x00000088;
enum DEBUG_DATA_IopErrorLogListHeadAddr = 0x00000090;
enum DEBUG_DATA_ObpRootDirectoryObjectAddr = 0x00000098;
enum DEBUG_DATA_ObpTypeObjectTypeAddr = 0x000000a0;
enum DEBUG_DATA_MmSystemCacheStartAddr = 0x000000a8;
enum DEBUG_DATA_MmSystemCacheEndAddr = 0x000000b0;
enum DEBUG_DATA_MmSystemCacheWsAddr = 0x000000b8;
enum DEBUG_DATA_MmPfnDatabaseAddr = 0x000000c0;
enum DEBUG_DATA_MmSystemPtesStartAddr = 0x000000c8;
enum DEBUG_DATA_MmSystemPtesEndAddr = 0x000000d0;
enum DEBUG_DATA_MmSubsectionBaseAddr = 0x000000d8;
enum DEBUG_DATA_MmNumberOfPagingFilesAddr = 0x000000e0;
enum DEBUG_DATA_MmLowestPhysicalPageAddr = 0x000000e8;
enum DEBUG_DATA_MmHighestPhysicalPageAddr = 0x000000f0;
enum DEBUG_DATA_MmNumberOfPhysicalPagesAddr = 0x000000f8;
enum DEBUG_DATA_MmMaximumNonPagedPoolInBytesAddr = 0x00000100;
enum DEBUG_DATA_MmNonPagedSystemStartAddr = 0x00000108;
enum DEBUG_DATA_MmNonPagedPoolStartAddr = 0x00000110;
enum DEBUG_DATA_MmNonPagedPoolEndAddr = 0x00000118;
enum DEBUG_DATA_MmPagedPoolStartAddr = 0x00000120;
enum DEBUG_DATA_MmPagedPoolEndAddr = 0x00000128;
enum DEBUG_DATA_MmPagedPoolInformationAddr = 0x00000130;
enum DEBUG_DATA_MmPageSize = 0x00000138;
enum DEBUG_DATA_MmSizeOfPagedPoolInBytesAddr = 0x00000140;
enum DEBUG_DATA_MmTotalCommitLimitAddr = 0x00000148;
enum DEBUG_DATA_MmTotalCommittedPagesAddr = 0x00000150;
enum DEBUG_DATA_MmSharedCommitAddr = 0x00000158;
enum DEBUG_DATA_MmDriverCommitAddr = 0x00000160;
enum DEBUG_DATA_MmProcessCommitAddr = 0x00000168;
enum DEBUG_DATA_MmPagedPoolCommitAddr = 0x00000170;
enum DEBUG_DATA_MmExtendedCommitAddr = 0x00000178;
enum DEBUG_DATA_MmZeroedPageListHeadAddr = 0x00000180;
enum DEBUG_DATA_MmFreePageListHeadAddr = 0x00000188;
enum DEBUG_DATA_MmStandbyPageListHeadAddr = 0x00000190;
enum DEBUG_DATA_MmModifiedPageListHeadAddr = 0x00000198;
enum DEBUG_DATA_MmModifiedNoWritePageListHeadAddr = 0x000001a0;
enum DEBUG_DATA_MmAvailablePagesAddr = 0x000001a8;
enum DEBUG_DATA_MmResidentAvailablePagesAddr = 0x000001b0;
enum DEBUG_DATA_PoolTrackTableAddr = 0x000001b8;
enum DEBUG_DATA_NonPagedPoolDescriptorAddr = 0x000001c0;
enum DEBUG_DATA_MmHighestUserAddressAddr = 0x000001c8;
enum DEBUG_DATA_MmSystemRangeStartAddr = 0x000001d0;
enum DEBUG_DATA_MmUserProbeAddressAddr = 0x000001d8;
enum DEBUG_DATA_KdPrintCircularBufferAddr = 0x000001e0;
enum DEBUG_DATA_KdPrintCircularBufferEndAddr = 0x000001e8;
enum DEBUG_DATA_KdPrintWritePointerAddr = 0x000001f0;
enum DEBUG_DATA_KdPrintRolloverCountAddr = 0x000001f8;
enum DEBUG_DATA_MmLoadedUserImageListAddr = 0x00000200;
enum DEBUG_DATA_NtBuildLabAddr = 0x00000208;
enum DEBUG_DATA_KiNormalSystemCall = 0x00000210;
enum DEBUG_DATA_KiProcessorBlockAddr = 0x00000218;
enum DEBUG_DATA_MmUnloadedDriversAddr = 0x00000220;
enum DEBUG_DATA_MmLastUnloadedDriverAddr = 0x00000228;
enum DEBUG_DATA_MmTriageActionTakenAddr = 0x00000230;
enum DEBUG_DATA_MmSpecialPoolTagAddr = 0x00000238;
enum DEBUG_DATA_KernelVerifierAddr = 0x00000240;
enum DEBUG_DATA_MmVerifierDataAddr = 0x00000248;
enum DEBUG_DATA_MmAllocatedNonPagedPoolAddr = 0x00000250;
enum DEBUG_DATA_MmPeakCommitmentAddr = 0x00000258;
enum DEBUG_DATA_MmTotalCommitLimitMaximumAddr = 0x00000260;
enum DEBUG_DATA_CmNtCSDVersionAddr = 0x00000268;
enum DEBUG_DATA_MmPhysicalMemoryBlockAddr = 0x00000270;
enum DEBUG_DATA_MmSessionBase = 0x00000278;
enum DEBUG_DATA_MmSessionSize = 0x00000280;
enum DEBUG_DATA_MmSystemParentTablePage = 0x00000288;
enum DEBUG_DATA_MmVirtualTranslationBase = 0x00000290;
enum DEBUG_DATA_OffsetKThreadNextProcessor = 0x00000298;
enum DEBUG_DATA_OffsetKThreadTeb = 0x0000029a;
enum DEBUG_DATA_OffsetKThreadKernelStack = 0x0000029c;
enum DEBUG_DATA_OffsetKThreadInitialStack = 0x0000029e;
enum DEBUG_DATA_OffsetKThreadApcProcess = 0x000002a0;
enum DEBUG_DATA_OffsetKThreadState = 0x000002a2;
enum DEBUG_DATA_OffsetKThreadBStore = 0x000002a4;
enum DEBUG_DATA_OffsetKThreadBStoreLimit = 0x000002a6;
enum DEBUG_DATA_SizeEProcess = 0x000002a8;
enum DEBUG_DATA_OffsetEprocessPeb = 0x000002aa;
enum DEBUG_DATA_OffsetEprocessParentCID = 0x000002ac;
enum DEBUG_DATA_OffsetEprocessDirectoryTableBase = 0x000002ae;
enum DEBUG_DATA_SizePrcb = 0x000002b0;
enum DEBUG_DATA_OffsetPrcbDpcRoutine = 0x000002b2;
enum DEBUG_DATA_OffsetPrcbCurrentThread = 0x000002b4;
enum DEBUG_DATA_OffsetPrcbMhz = 0x000002b6;
enum DEBUG_DATA_OffsetPrcbCpuType = 0x000002b8;
enum DEBUG_DATA_OffsetPrcbVendorString = 0x000002ba;
enum DEBUG_DATA_OffsetPrcbProcessorState = 0x000002bc;
enum DEBUG_DATA_OffsetPrcbNumber = 0x000002be;
enum DEBUG_DATA_SizeEThread = 0x000002c0;
enum DEBUG_DATA_KdPrintCircularBufferPtrAddr = 0x000002c8;
enum DEBUG_DATA_KdPrintBufferSizeAddr = 0x000002d0;
enum DEBUG_DATA_MmBadPagesDetected = 0x00000320;
enum DEBUG_DATA_EtwpDebuggerData = 0x00000330;
enum DEBUG_DATA_PteBase = 0x00000360;
enum DEBUG_DATA_PaeEnabled = 0x000186a0;
enum DEBUG_DATA_SharedUserData = 0x000186a8;
enum DEBUG_DATA_ProductType = 0x000186b0;
enum DEBUG_DATA_SuiteMask = 0x000186b8;
enum DEBUG_DATA_DumpWriterStatus = 0x000186c0;
enum DEBUG_DATA_DumpFormatVersion = 0x000186c8;
enum DEBUG_DATA_DumpWriterVersion = 0x000186d0;
enum DEBUG_DATA_DumpPowerState = 0x000186d8;
enum DEBUG_DATA_DumpMmStorage = 0x000186e0;
enum DEBUG_DATA_DumpAttributes = 0x000186e8;
enum DEBUG_DATA_PagingLevels = 0x000186f0;
enum DEBUG_DATA_KPCR_OFFSET = 0x00000000;
enum DEBUG_DATA_KPRCB_OFFSET = 0x00000001;
enum DEBUG_DATA_KTHREAD_OFFSET = 0x00000002;
enum DEBUG_DATA_BASE_TRANSLATION_VIRTUAL_OFFSET = 0x00000003;
enum DEBUG_DATA_PROCESSOR_IDENTIFICATION = 0x00000004;
enum DEBUG_DATA_PROCESSOR_SPEED = 0x00000005;
enum DEBUG_HANDLE_DATA_TYPE_BASIC = 0x00000000;
enum DEBUG_HANDLE_DATA_TYPE_TYPE_NAME = 0x00000001;
enum DEBUG_HANDLE_DATA_TYPE_OBJECT_NAME = 0x00000002;
enum DEBUG_HANDLE_DATA_TYPE_HANDLE_COUNT = 0x00000003;
enum DEBUG_HANDLE_DATA_TYPE_TYPE_NAME_WIDE = 0x00000004;
enum DEBUG_HANDLE_DATA_TYPE_OBJECT_NAME_WIDE = 0x00000005;
enum DEBUG_HANDLE_DATA_TYPE_MINI_THREAD_1 = 0x00000006;
enum DEBUG_HANDLE_DATA_TYPE_MINI_MUTANT_1 = 0x00000007;
enum DEBUG_HANDLE_DATA_TYPE_MINI_MUTANT_2 = 0x00000008;
enum DEBUG_HANDLE_DATA_TYPE_PER_HANDLE_OPERATIONS = 0x00000009;
enum DEBUG_HANDLE_DATA_TYPE_ALL_HANDLE_OPERATIONS = 0x0000000a;
enum DEBUG_HANDLE_DATA_TYPE_MINI_PROCESS_1 = 0x0000000b;
enum DEBUG_HANDLE_DATA_TYPE_MINI_PROCESS_2 = 0x0000000c;
enum DEBUG_HANDLE_DATA_TYPE_MINI_EVENT_1 = 0x0000000d;
enum DEBUG_HANDLE_DATA_TYPE_MINI_SECTION_1 = 0x0000000e;
enum DEBUG_HANDLE_DATA_TYPE_MINI_SEMAPHORE_1 = 0x0000000f;
enum DEBUG_OFFSINFO_VIRTUAL_SOURCE = 0x00000001;
enum DEBUG_VSOURCE_INVALID = 0x00000000;
enum DEBUG_VSOURCE_DEBUGGEE = 0x00000001;
enum DEBUG_VSOURCE_MAPPED_IMAGE = 0x00000002;
enum DEBUG_VSOURCE_DUMP_WITHOUT_MEMINFO = 0x00000003;
enum DEBUG_VSEARCH_DEFAULT = 0x00000000;
enum DEBUG_VSEARCH_WRITABLE_ONLY = 0x00000001;
enum DEBUG_PHYSICAL_DEFAULT = 0x00000000;
enum DEBUG_PHYSICAL_CACHED = 0x00000001;
enum DEBUG_PHYSICAL_UNCACHED = 0x00000002;
enum DEBUG_PHYSICAL_WRITE_COMBINED = 0x00000003;
enum DEBUG_EVENT_BREAKPOINT = 0x00000001;
enum DEBUG_EVENT_EXCEPTION = 0x00000002;
enum DEBUG_EVENT_CREATE_THREAD = 0x00000004;
enum DEBUG_EVENT_EXIT_THREAD = 0x00000008;
enum DEBUG_EVENT_CREATE_PROCESS = 0x00000010;
enum DEBUG_EVENT_EXIT_PROCESS = 0x00000020;
enum DEBUG_EVENT_LOAD_MODULE = 0x00000040;
enum DEBUG_EVENT_UNLOAD_MODULE = 0x00000080;
enum DEBUG_EVENT_SYSTEM_ERROR = 0x00000100;
enum DEBUG_EVENT_SESSION_STATUS = 0x00000200;
enum DEBUG_EVENT_CHANGE_DEBUGGEE_STATE = 0x00000400;
enum DEBUG_EVENT_CHANGE_ENGINE_STATE = 0x00000800;
enum DEBUG_EVENT_CHANGE_SYMBOL_STATE = 0x00001000;
enum DEBUG_EVENT_SERVICE_EXCEPTION = 0x00002000;
enum DEBUG_SESSION_ACTIVE = 0x00000000;
enum DEBUG_SESSION_END_SESSION_ACTIVE_TERMINATE = 0x00000001;
enum DEBUG_SESSION_END_SESSION_ACTIVE_DETACH = 0x00000002;
enum DEBUG_SESSION_END_SESSION_PASSIVE = 0x00000003;
enum DEBUG_SESSION_END = 0x00000004;
enum DEBUG_SESSION_REBOOT = 0x00000005;
enum DEBUG_SESSION_HIBERNATE = 0x00000006;
enum DEBUG_SESSION_FAILURE = 0x00000007;
enum DEBUG_CDS_ALL = 0xffffffff;
enum DEBUG_CDS_REGISTERS = 0x00000001;
enum DEBUG_CDS_DATA = 0x00000002;
enum DEBUG_CDS_REFRESH = 0x00000004;
enum DEBUG_CDS_REFRESH_EVALUATE = 0x00000001;
enum DEBUG_CDS_REFRESH_EXECUTE = 0x00000002;
enum DEBUG_CDS_REFRESH_EXECUTECOMMANDFILE = 0x00000003;
enum DEBUG_CDS_REFRESH_ADDBREAKPOINT = 0x00000004;
enum DEBUG_CDS_REFRESH_REMOVEBREAKPOINT = 0x00000005;
enum DEBUG_CDS_REFRESH_WRITEVIRTUAL = 0x00000006;
enum DEBUG_CDS_REFRESH_WRITEVIRTUALUNCACHED = 0x00000007;
enum DEBUG_CDS_REFRESH_WRITEPHYSICAL = 0x00000008;
enum DEBUG_CDS_REFRESH_WRITEPHYSICAL2 = 0x00000009;
enum DEBUG_CDS_REFRESH_SETVALUE = 0x0000000a;
enum DEBUG_CDS_REFRESH_SETVALUE2 = 0x0000000b;
enum DEBUG_CDS_REFRESH_SETSCOPE = 0x0000000c;
enum DEBUG_CDS_REFRESH_SETSCOPEFRAMEBYINDEX = 0x0000000d;
enum DEBUG_CDS_REFRESH_SETSCOPEFROMJITDEBUGINFO = 0x0000000e;
enum DEBUG_CDS_REFRESH_SETSCOPEFROMSTOREDEVENT = 0x0000000f;
enum DEBUG_CDS_REFRESH_INLINESTEP = 0x00000010;
enum DEBUG_CDS_REFRESH_INLINESTEP_PSEUDO = 0x00000011;
enum DEBUG_CES_ALL = 0xffffffff;
enum DEBUG_CES_CURRENT_THREAD = 0x00000001;
enum DEBUG_CES_EFFECTIVE_PROCESSOR = 0x00000002;
enum DEBUG_CES_BREAKPOINTS = 0x00000004;
enum DEBUG_CES_CODE_LEVEL = 0x00000008;
enum DEBUG_CES_EXECUTION_STATUS = 0x00000010;
enum DEBUG_CES_ENGINE_OPTIONS = 0x00000020;
enum DEBUG_CES_LOG_FILE = 0x00000040;
enum DEBUG_CES_RADIX = 0x00000080;
enum DEBUG_CES_EVENT_FILTERS = 0x00000100;
enum DEBUG_CES_PROCESS_OPTIONS = 0x00000200;
enum DEBUG_CES_EXTENSIONS = 0x00000400;
enum DEBUG_CES_SYSTEMS = 0x00000800;
enum DEBUG_CES_ASSEMBLY_OPTIONS = 0x00001000;
enum DEBUG_CES_EXPRESSION_SYNTAX = 0x00002000;
enum DEBUG_CES_TEXT_REPLACEMENTS = 0x00004000;
enum DEBUG_CSS_ALL = 0xffffffff;
enum DEBUG_CSS_LOADS = 0x00000001;
enum DEBUG_CSS_UNLOADS = 0x00000002;
enum DEBUG_CSS_SCOPE = 0x00000004;
enum DEBUG_CSS_PATHS = 0x00000008;
enum DEBUG_CSS_SYMBOL_OPTIONS = 0x00000010;
enum DEBUG_CSS_TYPE_OPTIONS = 0x00000020;
enum DEBUG_CSS_COLLAPSE_CHILDREN = 0x00000040;
enum DEBUG_OUTCBI_EXPLICIT_FLUSH = 0x00000001;
enum DEBUG_OUTCBI_TEXT = 0x00000002;
enum DEBUG_OUTCBI_DML = 0x00000004;
enum DEBUG_OUTCBI_ANY_FORMAT = 0x00000006;
enum DEBUG_OUTCB_TEXT = 0x00000000;
enum DEBUG_OUTCB_DML = 0x00000001;
enum DEBUG_OUTCB_EXPLICIT_FLUSH = 0x00000002;
enum DEBUG_OUTCBF_COMBINED_EXPLICIT_FLUSH = 0x00000001;
enum DEBUG_OUTCBF_DML_HAS_TAGS = 0x00000002;
enum DEBUG_OUTCBF_DML_HAS_SPECIAL_CHARACTERS = 0x00000004;
enum DEBUG_REGISTERS_DEFAULT = 0x00000000;
enum DEBUG_REGISTERS_INT32 = 0x00000001;
enum DEBUG_REGISTERS_INT64 = 0x00000002;
enum DEBUG_REGISTERS_FLOAT = 0x00000004;
enum DEBUG_REGISTERS_ALL = 0x00000007;
enum DEBUG_REGISTER_SUB_REGISTER = 0x00000001;
enum DEBUG_REGSRC_DEBUGGEE = 0x00000000;
enum DEBUG_REGSRC_EXPLICIT = 0x00000001;
enum DEBUG_REGSRC_FRAME = 0x00000002;
enum DEBUG_OUTPUT_SYMBOLS_DEFAULT = 0x00000000;
enum DEBUG_OUTPUT_SYMBOLS_NO_NAMES = 0x00000001;
enum DEBUG_OUTPUT_SYMBOLS_NO_OFFSETS = 0x00000002;
enum DEBUG_OUTPUT_SYMBOLS_NO_VALUES = 0x00000004;
enum DEBUG_OUTPUT_SYMBOLS_NO_TYPES = 0x00000010;
enum DEBUG_OUTPUT_NAME_END = "**NAME**";
enum DEBUG_OUTPUT_OFFSET_END = "**OFF**";
enum DEBUG_OUTPUT_VALUE_END = "**VALUE**";
enum DEBUG_OUTPUT_TYPE_END = "**TYPE**";
enum DEBUG_OUTPUT_NAME_END_WIDE = "**NAME**";
enum DEBUG_OUTPUT_OFFSET_END_WIDE = "**OFF**";
enum DEBUG_OUTPUT_VALUE_END_WIDE = "**VALUE**";
enum DEBUG_OUTPUT_TYPE_END_WIDE = "**TYPE**";
enum DEBUG_OUTPUT_NAME_END_T = "**NAME**";
enum DEBUG_OUTPUT_OFFSET_END_T = "**OFF**";
enum DEBUG_OUTPUT_VALUE_END_T = "**VALUE**";
enum DEBUG_OUTPUT_TYPE_END_T = "**TYPE**";
enum DEBUG_SYMBOL_EXPANSION_LEVEL_MASK = 0x0000000f;
enum DEBUG_SYMBOL_EXPANDED = 0x00000010;
enum DEBUG_SYMBOL_READ_ONLY = 0x00000020;
enum DEBUG_SYMBOL_IS_ARRAY = 0x00000040;
enum DEBUG_SYMBOL_IS_FLOAT = 0x00000080;
enum DEBUG_SYMBOL_IS_ARGUMENT = 0x00000100;
enum DEBUG_SYMBOL_IS_LOCAL = 0x00000200;
enum DEBUG_SYMENT_IS_CODE = 0x00000001;
enum DEBUG_SYMENT_IS_DATA = 0x00000002;
enum DEBUG_SYMENT_IS_PARAMETER = 0x00000004;
enum DEBUG_SYMENT_IS_LOCAL = 0x00000008;
enum DEBUG_SYMENT_IS_MANAGED = 0x00000010;
enum DEBUG_SYMENT_IS_SYNTHETIC = 0x00000020;
enum DEBUG_MODULE_LOADED = 0x00000000;
enum DEBUG_MODULE_UNLOADED = 0x00000001;
enum DEBUG_MODULE_USER_MODE = 0x00000002;
enum DEBUG_MODULE_EXE_MODULE = 0x00000004;
enum DEBUG_MODULE_EXPLICIT = 0x00000008;
enum DEBUG_MODULE_SECONDARY = 0x00000010;
enum DEBUG_MODULE_SYNTHETIC = 0x00000020;
enum DEBUG_MODULE_SYM_BAD_CHECKSUM = 0x00010000;
enum DEBUG_SYMTYPE_NONE = 0x00000000;
enum DEBUG_SYMTYPE_COFF = 0x00000001;
enum DEBUG_SYMTYPE_CODEVIEW = 0x00000002;
enum DEBUG_SYMTYPE_PDB = 0x00000003;
enum DEBUG_SYMTYPE_EXPORT = 0x00000004;
enum DEBUG_SYMTYPE_DEFERRED = 0x00000005;
enum DEBUG_SYMTYPE_SYM = 0x00000006;
enum DEBUG_SYMTYPE_DIA = 0x00000007;
enum DEBUG_SCOPE_GROUP_ARGUMENTS = 0x00000001;
enum DEBUG_SCOPE_GROUP_LOCALS = 0x00000002;
enum DEBUG_SCOPE_GROUP_ALL = 0x00000003;
enum DEBUG_SCOPE_GROUP_BY_DATAMODEL = 0x00000004;
enum DEBUG_OUTTYPE_DEFAULT = 0x00000000;
enum DEBUG_OUTTYPE_NO_INDENT = 0x00000001;
enum DEBUG_OUTTYPE_NO_OFFSET = 0x00000002;
enum DEBUG_OUTTYPE_VERBOSE = 0x00000004;
enum DEBUG_OUTTYPE_COMPACT_OUTPUT = 0x00000008;
enum DEBUG_OUTTYPE_ADDRESS_OF_FIELD = 0x00010000;
enum DEBUG_OUTTYPE_ADDRESS_AT_END = 0x00020000;
enum DEBUG_OUTTYPE_BLOCK_RECURSE = 0x00200000;
enum DEBUG_FIND_SOURCE_DEFAULT = 0x00000000;
enum DEBUG_FIND_SOURCE_FULL_PATH = 0x00000001;
enum DEBUG_FIND_SOURCE_BEST_MATCH = 0x00000002;
enum DEBUG_FIND_SOURCE_NO_SRCSRV = 0x00000004;
enum DEBUG_FIND_SOURCE_TOKEN_LOOKUP = 0x00000008;
enum DEBUG_FIND_SOURCE_WITH_CHECKSUM = 0x00000010;
enum DEBUG_FIND_SOURCE_WITH_CHECKSUM_STRICT = 0x00000020;
enum MODULE_ORDERS_MASK = 0xf0000000;
enum MODULE_ORDERS_LOADTIME = 0x10000000;
enum MODULE_ORDERS_MODULENAME = 0x20000000;
enum DEBUG_MODNAME_IMAGE = 0x00000000;
enum DEBUG_MODNAME_MODULE = 0x00000001;
enum DEBUG_MODNAME_LOADED_IMAGE = 0x00000002;
enum DEBUG_MODNAME_SYMBOL_FILE = 0x00000003;
enum DEBUG_MODNAME_MAPPED_IMAGE = 0x00000004;
enum DEBUG_TYPEOPTS_UNICODE_DISPLAY = 0x00000001;
enum DEBUG_TYPEOPTS_LONGSTATUS_DISPLAY = 0x00000002;
enum DEBUG_TYPEOPTS_FORCERADIX_OUTPUT = 0x00000004;
enum DEBUG_TYPEOPTS_MATCH_MAXSIZE = 0x00000008;
enum DEBUG_GETMOD_DEFAULT = 0x00000000;
enum DEBUG_GETMOD_NO_LOADED_MODULES = 0x00000001;
enum DEBUG_GETMOD_NO_UNLOADED_MODULES = 0x00000002;
enum DEBUG_ADDSYNTHMOD_DEFAULT = 0x00000000;
enum DEBUG_ADDSYNTHMOD_ZEROBASE = 0x00000001;
enum DEBUG_ADDSYNTHSYM_DEFAULT = 0x00000000;
enum DEBUG_OUTSYM_DEFAULT = 0x00000000;
enum DEBUG_OUTSYM_FORCE_OFFSET = 0x00000001;
enum DEBUG_OUTSYM_SOURCE_LINE = 0x00000002;
enum DEBUG_OUTSYM_ALLOW_DISPLACEMENT = 0x00000004;
enum DEBUG_GETFNENT_DEFAULT = 0x00000000;
enum DEBUG_GETFNENT_RAW_ENTRY_ONLY = 0x00000001;
enum DEBUG_SOURCE_IS_STATEMENT = 0x00000001;
enum DEBUG_GSEL_DEFAULT = 0x00000000;
enum DEBUG_GSEL_NO_SYMBOL_LOADS = 0x00000001;
enum DEBUG_GSEL_ALLOW_LOWER = 0x00000002;
enum DEBUG_GSEL_ALLOW_HIGHER = 0x00000004;
enum DEBUG_GSEL_NEAREST_ONLY = 0x00000008;
enum DEBUG_GSEL_INLINE_CALLSITE = 0x00000010;
enum DEBUG_FRAME_DEFAULT = 0x00000000;
enum DEBUG_FRAME_IGNORE_INLINE = 0x00000001;
enum DEBUG_COMMAND_EXCEPTION_ID = 0xdbe00dbe;
enum DEBUG_CMDEX_INVALID = 0x00000000;
enum DEBUG_CMDEX_ADD_EVENT_STRING = 0x00000001;
enum DEBUG_CMDEX_RESET_EVENT_STRINGS = 0x00000002;
enum DEBUG_EXTINIT_HAS_COMMAND_HELP = 0x00000001;
enum DEBUG_NOTIFY_SESSION_ACTIVE = 0x00000000;
enum DEBUG_NOTIFY_SESSION_INACTIVE = 0x00000001;
enum DEBUG_NOTIFY_SESSION_ACCESSIBLE = 0x00000002;
enum DEBUG_NOTIFY_SESSION_INACCESSIBLE = 0x00000003;
enum DEBUG_KNOWN_STRUCT_GET_NAMES = 0x00000001;
enum DEBUG_KNOWN_STRUCT_GET_SINGLE_LINE_OUTPUT = 0x00000002;
enum DEBUG_KNOWN_STRUCT_SUPPRESS_TYPE_NAME = 0x00000003;
enum DEBUG_EXT_QVALUE_DEFAULT = 0x00000000;
enum DEBUG_EXT_PVALUE_DEFAULT = 0x00000000;
enum DEBUG_EXT_PVTYPE_IS_VALUE = 0x00000000;
enum DEBUG_EXT_PVTYPE_IS_POINTER = 0x00000001;
enum _EXTSAPI_VER_ = 0x0000000a;
enum DUMP_HANDLE_FLAG_PRINT_OBJECT = 0x00000002;
enum DUMP_HANDLE_FLAG_PRINT_FREE_ENTRY = 0x00000004;
enum DUMP_HANDLE_FLAG_KERNEL_TABLE = 0x00000010;
enum DUMP_HANDLE_FLAG_CID_TABLE = 0x00000020;
enum KDEXTS_LOCK_CALLBACKROUTINE_DEFINED = 0x00000002;
enum FAILURE_ANALYSIS_NO_DB_LOOKUP = 0x00000001;
enum FAILURE_ANALYSIS_VERBOSE = 0x00000002;
enum FAILURE_ANALYSIS_ASSUME_HANG = 0x00000004;
enum FAILURE_ANALYSIS_IGNORE_BREAKIN = 0x00000008;
enum FAILURE_ANALYSIS_SET_FAILURE_CONTEXT = 0x00000010;
enum FAILURE_ANALYSIS_EXCEPTION_AS_HANG = 0x00000020;
enum FAILURE_ANALYSIS_AUTOBUG_PROCESSING = 0x00000040;
enum FAILURE_ANALYSIS_XML_OUTPUT = 0x00000080;
enum FAILURE_ANALYSIS_CALLSTACK_XML = 0x00000100;
enum FAILURE_ANALYSIS_REGISTRY_DATA = 0x00000200;
enum FAILURE_ANALYSIS_WMI_QUERY_DATA = 0x00000400;
enum FAILURE_ANALYSIS_USER_ATTRIBUTES = 0x00000800;
enum FAILURE_ANALYSIS_MODULE_INFO_XML = 0x00001000;
enum FAILURE_ANALYSIS_NO_IMAGE_CORRUPTION = 0x00002000;
enum FAILURE_ANALYSIS_AUTOSET_SYMPATH = 0x00004000;
enum FAILURE_ANALYSIS_USER_ATTRIBUTES_ALL = 0x00008000;
enum FAILURE_ANALYSIS_USER_ATTRIBUTES_FRAMES = 0x00010000;
enum FAILURE_ANALYSIS_MULTI_TARGET = 0x00020000;
enum FAILURE_ANALYSIS_SHOW_SOURCE = 0x00040000;
enum FAILURE_ANALYSIS_SHOW_WCT_STACKS = 0x00080000;
enum FAILURE_ANALYSIS_CREATE_INSTANCE = 0x00100000;
enum FAILURE_ANALYSIS_LIVE_DEBUG_HOLD_CHECK = 0x00200000;
enum FAILURE_ANALYSIS_XML_FILE_OUTPUT = 0x00400000;
enum FAILURE_ANALYSIS_XSD_VERIFY = 0x00800000;
enum FAILURE_ANALYSIS_CALLSTACK_XML_FULL_SOURCE_INFO = 0x01000000;
enum FAILURE_ANALYSIS_HEAP_CORRUPTION_BLAME_FUNCTION = 0x02000000;
enum FAILURE_ANALYSIS_PERMIT_HEAP_ACCESS_VIOLATIONS = 0x04000000;
enum FAILURE_ANALYSIS_XSLT_FILE_INPUT = 0x10000000;
enum FAILURE_ANALYSIS_XSLT_FILE_OUTPUT = 0x20000000;
enum CLSID_DebugFailureAnalysisBasic = GUID(0xb74eed7f, 0x1c7d, 0x4c1b, [0x95, 0x9f, 0xb9, 0x6d, 0xd9, 0x17, 0x5a, 0xa4]);
enum CLSID_DebugFailureAnalysisTarget = GUID(0xba9bfb05, 0xef75, 0x4bbd, [0xa7, 0x45, 0xa6, 0xb5, 0x52, 0x94, 0x58, 0xb8]);
enum CLSID_DebugFailureAnalysisUser = GUID(0xe60b0c93, 0xcf49, 0x4a32, [0x81, 0x47, 0x3, 0x62, 0x20, 0x2d, 0xc5, 0x6b]);
enum CLSID_DebugFailureAnalysisKernel = GUID(0xee433078, 0x64af, 0x4c33, [0xab, 0x2f, 0xec, 0xad, 0x7f, 0x2a, 0x0, 0x2d]);
enum CLSID_DebugFailureAnalysisWinCE = GUID(0x67d5e86f, 0xf5e2, 0x462a, [0x92, 0x33, 0x1b, 0xd6, 0x16, 0xfc, 0xc7, 0xe8]);
enum CLSID_DebugFailureAnalysisXBox360 = GUID(0x901625bb, 0x95f1, 0x4318, [0xac, 0x80, 0x9d, 0x73, 0x3c, 0xee, 0x8c, 0x8b]);
enum CROSS_PLATFORM_MAXIMUM_PROCESSORS = 0x00000800;
enum MAX_STACK_IN_BYTES = 0x00001000;
enum TRIAGE_FOLLOWUP_FAIL = 0x00000000;
enum TRIAGE_FOLLOWUP_IGNORE = 0x00000001;
enum TRIAGE_FOLLOWUP_DEFAULT = 0x00000002;
enum TRIAGE_FOLLOWUP_SUCCESS = 0x00000003;
enum EXT_ANALYZER_FLAG_MOD = 0x00000001;
enum EXT_ANALYZER_FLAG_ID = 0x00000002;
enum EXTDLL_DATA_QUERY_BUILD_BINDIR = 0x00000001;
enum EXTDLL_DATA_QUERY_BUILD_SYMDIR = 0x00000002;
enum EXTDLL_DATA_QUERY_BUILD_WOW64SYMDIR = 0x00000003;
enum EXTDLL_DATA_QUERY_BUILD_WOW64BINDIR = 0x00000004;
enum EXTDLL_DATA_QUERY_BUILD_BINDIR_SYMSRV = 0x0000000b;
enum EXTDLL_DATA_QUERY_BUILD_SYMDIR_SYMSRV = 0x0000000c;
enum EXTDLL_DATA_QUERY_BUILD_WOW64SYMDIR_SYMSRV = 0x0000000d;
enum EXTDLL_DATA_QUERY_BUILD_WOW64BINDIR_SYMSRV = 0x0000000e;
enum EXT_API_VERSION_NUMBER = 0x00000005;
enum EXT_API_VERSION_NUMBER32 = 0x00000005;
enum EXT_API_VERSION_NUMBER64 = 0x00000006;
enum IG_KD_CONTEXT = 0x00000001;
enum IG_READ_CONTROL_SPACE = 0x00000002;
enum IG_WRITE_CONTROL_SPACE = 0x00000003;
enum IG_READ_IO_SPACE = 0x00000004;
enum IG_WRITE_IO_SPACE = 0x00000005;
enum IG_READ_PHYSICAL = 0x00000006;
enum IG_WRITE_PHYSICAL = 0x00000007;
enum IG_READ_IO_SPACE_EX = 0x00000008;
enum IG_WRITE_IO_SPACE_EX = 0x00000009;
enum IG_KSTACK_HELP = 0x0000000a;
enum IG_SET_THREAD = 0x0000000b;
enum IG_READ_MSR = 0x0000000c;
enum IG_WRITE_MSR = 0x0000000d;
enum IG_GET_DEBUGGER_DATA = 0x0000000e;
enum IG_GET_KERNEL_VERSION = 0x0000000f;
enum IG_RELOAD_SYMBOLS = 0x00000010;
enum IG_GET_SET_SYMPATH = 0x00000011;
enum IG_GET_EXCEPTION_RECORD = 0x00000012;
enum IG_IS_PTR64 = 0x00000013;
enum IG_GET_BUS_DATA = 0x00000014;
enum IG_SET_BUS_DATA = 0x00000015;
enum IG_DUMP_SYMBOL_INFO = 0x00000016;
enum IG_LOWMEM_CHECK = 0x00000017;
enum IG_SEARCH_MEMORY = 0x00000018;
enum IG_GET_CURRENT_THREAD = 0x00000019;
enum IG_GET_CURRENT_PROCESS = 0x0000001a;
enum IG_GET_TYPE_SIZE = 0x0000001b;
enum IG_GET_CURRENT_PROCESS_HANDLE = 0x0000001c;
enum IG_GET_INPUT_LINE = 0x0000001d;
enum IG_GET_EXPRESSION_EX = 0x0000001e;
enum IG_TRANSLATE_VIRTUAL_TO_PHYSICAL = 0x0000001f;
enum IG_GET_CACHE_SIZE = 0x00000020;
enum IG_READ_PHYSICAL_WITH_FLAGS = 0x00000021;
enum IG_WRITE_PHYSICAL_WITH_FLAGS = 0x00000022;
enum IG_POINTER_SEARCH_PHYSICAL = 0x00000023;
enum IG_OBSOLETE_PLACEHOLDER_36 = 0x00000024;
enum IG_GET_THREAD_OS_INFO = 0x00000025;
enum IG_GET_CLR_DATA_INTERFACE = 0x00000026;
enum IG_MATCH_PATTERN_A = 0x00000027;
enum IG_FIND_FILE = 0x00000028;
enum IG_TYPED_DATA_OBSOLETE = 0x00000029;
enum IG_QUERY_TARGET_INTERFACE = 0x0000002a;
enum IG_TYPED_DATA = 0x0000002b;
enum IG_DISASSEMBLE_BUFFER = 0x0000002c;
enum IG_GET_ANY_MODULE_IN_RANGE = 0x0000002d;
enum IG_VIRTUAL_TO_PHYSICAL = 0x0000002e;
enum IG_PHYSICAL_TO_VIRTUAL = 0x0000002f;
enum IG_GET_CONTEXT_EX = 0x00000030;
enum IG_GET_TEB_ADDRESS = 0x00000080;
enum IG_GET_PEB_ADDRESS = 0x00000081;
enum PHYS_FLAG_DEFAULT = 0x00000000;
enum PHYS_FLAG_CACHED = 0x00000001;
enum PHYS_FLAG_UNCACHED = 0x00000002;
enum PHYS_FLAG_WRITE_COMBINED = 0x00000003;
enum PTR_SEARCH_PHYS_ALL_HITS = 0x00000001;
enum PTR_SEARCH_PHYS_PTE = 0x00000002;
enum PTR_SEARCH_PHYS_RANGE_CHECK_ONLY = 0x00000004;
enum PTR_SEARCH_PHYS_SIZE_SHIFT = 0x00000003;
enum PTR_SEARCH_NO_SYMBOL_CHECK = 0x80000000;
enum EXT_FIND_FILE_ALLOW_GIVEN_PATH = 0x00000001;
enum DEBUG_TYPED_DATA_IS_IN_MEMORY = 0x00000001;
enum DEBUG_TYPED_DATA_PHYSICAL_DEFAULT = 0x00000002;
enum DEBUG_TYPED_DATA_PHYSICAL_CACHED = 0x00000004;
enum DEBUG_TYPED_DATA_PHYSICAL_UNCACHED = 0x00000006;
enum DEBUG_TYPED_DATA_PHYSICAL_WRITE_COMBINED = 0x00000008;
enum DEBUG_TYPED_DATA_PHYSICAL_MEMORY = 0x0000000e;
enum EXT_TDF_PHYSICAL_DEFAULT = 0x00000002;
enum EXT_TDF_PHYSICAL_CACHED = 0x00000004;
enum EXT_TDF_PHYSICAL_UNCACHED = 0x00000006;
enum EXT_TDF_PHYSICAL_WRITE_COMBINED = 0x00000008;
enum EXT_TDF_PHYSICAL_MEMORY = 0x0000000e;
enum WDBGEXTS_ADDRESS_DEFAULT = 0x00000000;
enum WDBGEXTS_ADDRESS_SEG16 = 0x00000001;
enum WDBGEXTS_ADDRESS_SEG32 = 0x00000002;
enum WDBGEXTS_ADDRESS_RESERVED0 = 0x80000000;
enum DBGKD_VERS_FLAG_MP = 0x00000001;
enum DBGKD_VERS_FLAG_DATA = 0x00000002;
enum DBGKD_VERS_FLAG_PTR64 = 0x00000004;
enum DBGKD_VERS_FLAG_NOMM = 0x00000008;
enum DBGKD_VERS_FLAG_HSS = 0x00000010;
enum DBGKD_VERS_FLAG_PARTITIONS = 0x00000020;
enum DBGKD_VERS_FLAG_HAL_IN_NTOS = 0x00000040;
enum KD_SECONDARY_VERSION_DEFAULT = 0x00000000;
enum KD_SECONDARY_VERSION_AMD64_OBSOLETE_CONTEXT_1 = 0x00000000;
enum KD_SECONDARY_VERSION_AMD64_OBSOLETE_CONTEXT_2 = 0x00000001;
enum KD_SECONDARY_VERSION_AMD64_CONTEXT = 0x00000002;
enum CURRENT_KD_SECONDARY_VERSION = 0x00000002;
enum DBG_DUMP_NO_INDENT = 0x00000001;
enum DBG_DUMP_NO_OFFSET = 0x00000002;
enum DBG_DUMP_VERBOSE = 0x00000004;
enum DBG_DUMP_CALL_FOR_EACH = 0x00000008;
enum DBG_DUMP_LIST = 0x00000020;
enum DBG_DUMP_NO_PRINT = 0x00000040;
enum DBG_DUMP_GET_SIZE_ONLY = 0x00000080;
enum DBG_DUMP_COMPACT_OUT = 0x00002000;
enum DBG_DUMP_ARRAY = 0x00008000;
enum DBG_DUMP_ADDRESS_OF_FIELD = 0x00010000;
enum DBG_DUMP_ADDRESS_AT_END = 0x00020000;
enum DBG_DUMP_COPY_TYPE_DATA = 0x00040000;
enum DBG_DUMP_READ_PHYSICAL = 0x00080000;
enum DBG_DUMP_FUNCTION_FORMAT = 0x00100000;
enum DBG_DUMP_BLOCK_RECURSE = 0x00200000;
enum DBG_DUMP_MATCH_SIZE = 0x00400000;
enum DBG_RETURN_TYPE = 0x00000000;
enum DBG_RETURN_SUBTYPES = 0x00000000;
enum DBG_RETURN_TYPE_VALUES = 0x00000000;
enum DBG_DUMP_FIELD_CALL_BEFORE_PRINT = 0x00000001;
enum DBG_DUMP_FIELD_NO_CALLBACK_REQ = 0x00000002;
enum DBG_DUMP_FIELD_RECUR_ON_THIS = 0x00000004;
enum DBG_DUMP_FIELD_FULL_NAME = 0x00000008;
enum DBG_DUMP_FIELD_ARRAY = 0x00000010;
enum DBG_DUMP_FIELD_COPY_FIELD_DATA = 0x00000020;
enum DBG_DUMP_FIELD_RETURN_ADDRESS = 0x00001000;
enum DBG_DUMP_FIELD_SIZE_IN_BITS = 0x00002000;
enum DBG_DUMP_FIELD_NO_PRINT = 0x00004000;
enum DBG_DUMP_FIELD_DEFAULT_STRING = 0x00010000;
enum DBG_DUMP_FIELD_WCHAR_STRING = 0x00020000;
enum DBG_DUMP_FIELD_MULTI_STRING = 0x00040000;
enum DBG_DUMP_FIELD_GUID_STRING = 0x00080000;
enum DBG_DUMP_FIELD_UTF32_STRING = 0x00100000;
enum MEMORY_READ_ERROR = 0x00000001;
enum SYMBOL_TYPE_INDEX_NOT_FOUND = 0x00000002;
enum SYMBOL_TYPE_INFO_NOT_FOUND = 0x00000003;
enum FIELDS_DID_NOT_MATCH = 0x00000004;
enum NULL_SYM_DUMP_PARAM = 0x00000005;
enum NULL_FIELD_NAME = 0x00000006;
enum INCORRECT_VERSION_INFO = 0x00000007;
enum EXIT_ON_CONTROLC = 0x00000008;
enum CANNOT_ALLOCATE_MEMORY = 0x00000009;
enum INSUFFICIENT_SPACE_TO_COPY = 0x0000000a;
enum ADDRESS_TYPE_INDEX_NOT_FOUND = 0x0000000b;
enum UNAVAILABLE_ERROR = 0x0000000c;
enum DBGKD_SIMULATION_NONE = 0x00000000;
enum DBGKD_SIMULATION_EXDI = 0x00000001;
struct DEBUG_OFFSET_REGION
{
    ulong Base;
    ulong Size;
}
enum IID_IDebugAdvanced = GUID(0xf2df5f53, 0x71f, 0x47bd, [0x9d, 0xe6, 0x57, 0x34, 0xc3, 0xfe, 0xd6, 0x89]);
interface IDebugAdvanced : IUnknown
{
    HRESULT GetThreadContext(void*, uint);
    HRESULT SetThreadContext(void*, uint);
}
struct DEBUG_READ_USER_MINIDUMP_STREAM
{
    uint StreamType;
    uint Flags;
    ulong Offset;
    void* Buffer;
    uint BufferSize;
    uint BufferUsed;
}
struct DEBUG_GET_TEXT_COMPLETIONS_IN
{
    uint Flags;
    uint MatchCountLimit;
    ulong[3] Reserved;
}
struct DEBUG_GET_TEXT_COMPLETIONS_OUT
{
    uint Flags;
    uint ReplaceIndex;
    uint MatchCount;
    uint Reserved1;
    ulong[2] Reserved2;
}
struct DEBUG_CACHED_SYMBOL_INFO
{
    ulong ModBase;
    ulong Arg1;
    ulong Arg2;
    uint Id;
    uint Arg3;
}
struct PROCESS_NAME_ENTRY
{
    uint ProcessId;
    uint NameOffset;
    uint NameSize;
    uint NextEntry;
}
struct DEBUG_THREAD_BASIC_INFORMATION
{
    uint Valid;
    uint ExitStatus;
    uint PriorityClass;
    uint Priority;
    ulong CreateTime;
    ulong ExitTime;
    ulong KernelTime;
    ulong UserTime;
    ulong StartOffset;
    ulong Affinity;
}
enum IID_IDebugAdvanced2 = GUID(0x716d14c9, 0x119b, 0x4ba5, [0xaf, 0x1f, 0x8, 0x90, 0xe6, 0x72, 0x41, 0x6a]);
interface IDebugAdvanced2 : IUnknown
{
    HRESULT GetThreadContext(void*, uint);
    HRESULT SetThreadContext(void*, uint);
    HRESULT Request(uint, void*, uint, void*, uint, uint*);
    HRESULT GetSourceFileInformation(uint, PSTR, ulong, uint, void*, uint, uint*);
    HRESULT FindSourceFileAndToken(uint, ulong, const(char)*, uint, void*, uint, uint*, PSTR, uint, uint*);
    HRESULT GetSymbolInformation(uint, ulong, uint, void*, uint, uint*, PSTR, uint, uint*);
    HRESULT GetSystemObjectInformation(uint, ulong, uint, void*, uint, uint*);
}
enum IID_IDebugAdvanced3 = GUID(0xcba4abb4, 0x84c4, 0x444d, [0x87, 0xca, 0xa0, 0x4e, 0x13, 0x28, 0x67, 0x39]);
interface IDebugAdvanced3 : IUnknown
{
    HRESULT GetThreadContext(void*, uint);
    HRESULT SetThreadContext(void*, uint);
    HRESULT Request(uint, void*, uint, void*, uint, uint*);
    HRESULT GetSourceFileInformation(uint, PSTR, ulong, uint, void*, uint, uint*);
    HRESULT FindSourceFileAndToken(uint, ulong, const(char)*, uint, void*, uint, uint*, PSTR, uint, uint*);
    HRESULT GetSymbolInformation(uint, ulong, uint, void*, uint, uint*, PSTR, uint, uint*);
    HRESULT GetSystemObjectInformation(uint, ulong, uint, void*, uint, uint*);
    HRESULT GetSourceFileInformationWide(uint, PWSTR, ulong, uint, void*, uint, uint*);
    HRESULT FindSourceFileAndTokenWide(uint, ulong, const(wchar)*, uint, void*, uint, uint*, PWSTR, uint, uint*);
    HRESULT GetSymbolInformationWide(uint, ulong, uint, void*, uint, uint*, PWSTR, uint, uint*);
}
struct SYMBOL_INFO_EX
{
    uint SizeOfStruct;
    uint TypeOfInfo;
    ulong Offset;
    uint Line;
    uint Displacement;
    uint[4] Reserved;
}
enum IID_IDebugAdvanced4 = GUID(0xd1069067, 0x2a65, 0x4bf0, [0xae, 0x97, 0x76, 0x18, 0x4b, 0x67, 0x85, 0x6b]);
interface IDebugAdvanced4 : IUnknown
{
    HRESULT GetThreadContext(void*, uint);
    HRESULT SetThreadContext(void*, uint);
    HRESULT Request(uint, void*, uint, void*, uint, uint*);
    HRESULT GetSourceFileInformation(uint, PSTR, ulong, uint, void*, uint, uint*);
    HRESULT FindSourceFileAndToken(uint, ulong, const(char)*, uint, void*, uint, uint*, PSTR, uint, uint*);
    HRESULT GetSymbolInformation(uint, ulong, uint, void*, uint, uint*, PSTR, uint, uint*);
    HRESULT GetSystemObjectInformation(uint, ulong, uint, void*, uint, uint*);
    HRESULT GetSourceFileInformationWide(uint, PWSTR, ulong, uint, void*, uint, uint*);
    HRESULT FindSourceFileAndTokenWide(uint, ulong, const(wchar)*, uint, void*, uint, uint*, PWSTR, uint, uint*);
    HRESULT GetSymbolInformationWide(uint, ulong, uint, void*, uint, uint*, PWSTR, uint, uint*);
    HRESULT GetSymbolInformationWideEx(uint, ulong, uint, void*, uint, uint*, PWSTR, uint, uint*, SYMBOL_INFO_EX*);
}
struct DEBUG_BREAKPOINT_PARAMETERS
{
    ulong Offset;
    uint Id;
    uint BreakType;
    uint ProcType;
    uint Flags;
    uint DataSize;
    uint DataAccessType;
    uint PassCount;
    uint CurrentPassCount;
    uint MatchThread;
    uint CommandSize;
    uint OffsetExpressionSize;
}
enum IID_IDebugBreakpoint = GUID(0x5bd9d474, 0x5975, 0x423a, [0xb8, 0x8b, 0x65, 0xa8, 0xe7, 0x11, 0xe, 0x65]);
interface IDebugBreakpoint : IUnknown
{
    HRESULT GetId(uint*);
    HRESULT GetType(uint*, uint*);
    HRESULT GetAdder(IDebugClient*);
    HRESULT GetFlags(uint*);
    HRESULT AddFlags(uint);
    HRESULT RemoveFlags(uint);
    HRESULT SetFlags(uint);
    HRESULT GetOffset(ulong*);
    HRESULT SetOffset(ulong);
    HRESULT GetDataParameters(uint*, uint*);
    HRESULT SetDataParameters(uint, uint);
    HRESULT GetPassCount(uint*);
    HRESULT SetPassCount(uint);
    HRESULT GetCurrentPassCount(uint*);
    HRESULT GetMatchThreadId(uint*);
    HRESULT SetMatchThreadId(uint);
    HRESULT GetCommand(PSTR, uint, uint*);
    HRESULT SetCommand(const(char)*);
    HRESULT GetOffsetExpression(PSTR, uint, uint*);
    HRESULT SetOffsetExpression(const(char)*);
    HRESULT GetParameters(DEBUG_BREAKPOINT_PARAMETERS*);
}
enum IID_IDebugBreakpoint2 = GUID(0x1b278d20, 0x79f2, 0x426e, [0xa3, 0xf9, 0xc1, 0xdd, 0xf3, 0x75, 0xd4, 0x8e]);
interface IDebugBreakpoint2 : IUnknown
{
    HRESULT GetId(uint*);
    HRESULT GetType(uint*, uint*);
    HRESULT GetAdder(IDebugClient*);
    HRESULT GetFlags(uint*);
    HRESULT AddFlags(uint);
    HRESULT RemoveFlags(uint);
    HRESULT SetFlags(uint);
    HRESULT GetOffset(ulong*);
    HRESULT SetOffset(ulong);
    HRESULT GetDataParameters(uint*, uint*);
    HRESULT SetDataParameters(uint, uint);
    HRESULT GetPassCount(uint*);
    HRESULT SetPassCount(uint);
    HRESULT GetCurrentPassCount(uint*);
    HRESULT GetMatchThreadId(uint*);
    HRESULT SetMatchThreadId(uint);
    HRESULT GetCommand(PSTR, uint, uint*);
    HRESULT SetCommand(const(char)*);
    HRESULT GetOffsetExpression(PSTR, uint, uint*);
    HRESULT SetOffsetExpression(const(char)*);
    HRESULT GetParameters(DEBUG_BREAKPOINT_PARAMETERS*);
    HRESULT GetCommandWide(PWSTR, uint, uint*);
    HRESULT SetCommandWide(const(wchar)*);
    HRESULT GetOffsetExpressionWide(PWSTR, uint, uint*);
    HRESULT SetOffsetExpressionWide(const(wchar)*);
}
enum IID_IDebugBreakpoint3 = GUID(0x38f5c249, 0xb448, 0x43bb, [0x98, 0x35, 0x57, 0x9d, 0x4e, 0xc0, 0x22, 0x49]);
interface IDebugBreakpoint3 : IUnknown
{
    HRESULT GetId(uint*);
    HRESULT GetType(uint*, uint*);
    HRESULT GetAdder(IDebugClient*);
    HRESULT GetFlags(uint*);
    HRESULT AddFlags(uint);
    HRESULT RemoveFlags(uint);
    HRESULT SetFlags(uint);
    HRESULT GetOffset(ulong*);
    HRESULT SetOffset(ulong);
    HRESULT GetDataParameters(uint*, uint*);
    HRESULT SetDataParameters(uint, uint);
    HRESULT GetPassCount(uint*);
    HRESULT SetPassCount(uint);
    HRESULT GetCurrentPassCount(uint*);
    HRESULT GetMatchThreadId(uint*);
    HRESULT SetMatchThreadId(uint);
    HRESULT GetCommand(PSTR, uint, uint*);
    HRESULT SetCommand(const(char)*);
    HRESULT GetOffsetExpression(PSTR, uint, uint*);
    HRESULT SetOffsetExpression(const(char)*);
    HRESULT GetParameters(DEBUG_BREAKPOINT_PARAMETERS*);
    HRESULT GetCommandWide(PWSTR, uint, uint*);
    HRESULT SetCommandWide(const(wchar)*);
    HRESULT GetOffsetExpressionWide(PWSTR, uint, uint*);
    HRESULT SetOffsetExpressionWide(const(wchar)*);
    HRESULT GetGuid(GUID*);
}
struct DEBUG_CREATE_PROCESS_OPTIONS
{
    uint CreateFlags;
    uint EngCreateFlags;
    uint VerifierFlags;
    uint Reserved;
}
struct DEBUG_CLIENT_CONTEXT
{
    uint cbSize;
    uint eClient;
}
enum IID_IDebugClient = GUID(0x27fe5639, 0x8407, 0x4f47, [0x83, 0x64, 0xee, 0x11, 0x8f, 0xb0, 0x8a, 0xc8]);
interface IDebugClient : IUnknown
{
    HRESULT AttachKernel(uint, const(char)*);
    HRESULT GetKernelConnectionOptions(PSTR, uint, uint*);
    HRESULT SetKernelConnectionOptions(const(char)*);
    HRESULT StartProcessServer(uint, const(char)*, void*);
    HRESULT ConnectProcessServer(const(char)*, ulong*);
    HRESULT DisconnectProcessServer(ulong);
    HRESULT GetRunningProcessSystemIds(ulong, uint*, uint, uint*);
    HRESULT GetRunningProcessSystemIdByExecutableName(ulong, const(char)*, uint, uint*);
    HRESULT GetRunningProcessDescription(ulong, uint, uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT AttachProcess(ulong, uint, uint);
    HRESULT CreateProcessA(ulong, PSTR, uint);
    HRESULT CreateProcessAndAttach(ulong, PSTR, uint, uint, uint);
    HRESULT GetProcessOptions(uint*);
    HRESULT AddProcessOptions(uint);
    HRESULT RemoveProcessOptions(uint);
    HRESULT SetProcessOptions(uint);
    HRESULT OpenDumpFile(const(char)*);
    HRESULT WriteDumpFile(const(char)*, uint);
    HRESULT ConnectSession(uint, uint);
    HRESULT StartServer(const(char)*);
    HRESULT OutputServers(uint, const(char)*, uint);
    HRESULT TerminateProcesses();
    HRESULT DetachProcesses();
    HRESULT EndSession(uint);
    HRESULT GetExitCode(uint*);
    HRESULT DispatchCallbacks(uint);
    HRESULT ExitDispatch(IDebugClient);
    HRESULT CreateClient(IDebugClient*);
    HRESULT GetInputCallbacks(IDebugInputCallbacks*);
    HRESULT SetInputCallbacks(IDebugInputCallbacks);
    HRESULT GetOutputCallbacks(IDebugOutputCallbacks*);
    HRESULT SetOutputCallbacks(IDebugOutputCallbacks);
    HRESULT GetOutputMask(uint*);
    HRESULT SetOutputMask(uint);
    HRESULT GetOtherOutputMask(IDebugClient, uint*);
    HRESULT SetOtherOutputMask(IDebugClient, uint);
    HRESULT GetOutputWidth(uint*);
    HRESULT SetOutputWidth(uint);
    HRESULT GetOutputLinePrefix(PSTR, uint, uint*);
    HRESULT SetOutputLinePrefix(const(char)*);
    HRESULT GetIdentity(PSTR, uint, uint*);
    HRESULT OutputIdentity(uint, uint, const(char)*);
    HRESULT GetEventCallbacks(IDebugEventCallbacks*);
    HRESULT SetEventCallbacks(IDebugEventCallbacks);
    HRESULT FlushCallbacks();
}
enum IID_IDebugClient2 = GUID(0xedbed635, 0x372e, 0x4dab, [0xbb, 0xfe, 0xed, 0xd, 0x2f, 0x63, 0xbe, 0x81]);
interface IDebugClient2 : IUnknown
{
    HRESULT AttachKernel(uint, const(char)*);
    HRESULT GetKernelConnectionOptions(PSTR, uint, uint*);
    HRESULT SetKernelConnectionOptions(const(char)*);
    HRESULT StartProcessServer(uint, const(char)*, void*);
    HRESULT ConnectProcessServer(const(char)*, ulong*);
    HRESULT DisconnectProcessServer(ulong);
    HRESULT GetRunningProcessSystemIds(ulong, uint*, uint, uint*);
    HRESULT GetRunningProcessSystemIdByExecutableName(ulong, const(char)*, uint, uint*);
    HRESULT GetRunningProcessDescription(ulong, uint, uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT AttachProcess(ulong, uint, uint);
    HRESULT CreateProcessA(ulong, PSTR, uint);
    HRESULT CreateProcessAndAttach(ulong, PSTR, uint, uint, uint);
    HRESULT GetProcessOptions(uint*);
    HRESULT AddProcessOptions(uint);
    HRESULT RemoveProcessOptions(uint);
    HRESULT SetProcessOptions(uint);
    HRESULT OpenDumpFile(const(char)*);
    HRESULT WriteDumpFile(const(char)*, uint);
    HRESULT ConnectSession(uint, uint);
    HRESULT StartServer(const(char)*);
    HRESULT OutputServers(uint, const(char)*, uint);
    HRESULT TerminateProcesses();
    HRESULT DetachProcesses();
    HRESULT EndSession(uint);
    HRESULT GetExitCode(uint*);
    HRESULT DispatchCallbacks(uint);
    HRESULT ExitDispatch(IDebugClient);
    HRESULT CreateClient(IDebugClient*);
    HRESULT GetInputCallbacks(IDebugInputCallbacks*);
    HRESULT SetInputCallbacks(IDebugInputCallbacks);
    HRESULT GetOutputCallbacks(IDebugOutputCallbacks*);
    HRESULT SetOutputCallbacks(IDebugOutputCallbacks);
    HRESULT GetOutputMask(uint*);
    HRESULT SetOutputMask(uint);
    HRESULT GetOtherOutputMask(IDebugClient, uint*);
    HRESULT SetOtherOutputMask(IDebugClient, uint);
    HRESULT GetOutputWidth(uint*);
    HRESULT SetOutputWidth(uint);
    HRESULT GetOutputLinePrefix(PSTR, uint, uint*);
    HRESULT SetOutputLinePrefix(const(char)*);
    HRESULT GetIdentity(PSTR, uint, uint*);
    HRESULT OutputIdentity(uint, uint, const(char)*);
    HRESULT GetEventCallbacks(IDebugEventCallbacks*);
    HRESULT SetEventCallbacks(IDebugEventCallbacks);
    HRESULT FlushCallbacks();
    HRESULT WriteDumpFile2(const(char)*, uint, uint, const(char)*);
    HRESULT AddDumpInformationFile(const(char)*, uint);
    HRESULT EndProcessServer(ulong);
    HRESULT WaitForProcessServerEnd(uint);
    HRESULT IsKernelDebuggerEnabled();
    HRESULT TerminateCurrentProcess();
    HRESULT DetachCurrentProcess();
    HRESULT AbandonCurrentProcess();
}
enum IID_IDebugClient3 = GUID(0xdd492d7f, 0x71b8, 0x4ad6, [0xa8, 0xdc, 0x1c, 0x88, 0x74, 0x79, 0xff, 0x91]);
interface IDebugClient3 : IUnknown
{
    HRESULT AttachKernel(uint, const(char)*);
    HRESULT GetKernelConnectionOptions(PSTR, uint, uint*);
    HRESULT SetKernelConnectionOptions(const(char)*);
    HRESULT StartProcessServer(uint, const(char)*, void*);
    HRESULT ConnectProcessServer(const(char)*, ulong*);
    HRESULT DisconnectProcessServer(ulong);
    HRESULT GetRunningProcessSystemIds(ulong, uint*, uint, uint*);
    HRESULT GetRunningProcessSystemIdByExecutableName(ulong, const(char)*, uint, uint*);
    HRESULT GetRunningProcessDescription(ulong, uint, uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT AttachProcess(ulong, uint, uint);
    HRESULT CreateProcessA(ulong, PSTR, uint);
    HRESULT CreateProcessAndAttach(ulong, PSTR, uint, uint, uint);
    HRESULT GetProcessOptions(uint*);
    HRESULT AddProcessOptions(uint);
    HRESULT RemoveProcessOptions(uint);
    HRESULT SetProcessOptions(uint);
    HRESULT OpenDumpFile(const(char)*);
    HRESULT WriteDumpFile(const(char)*, uint);
    HRESULT ConnectSession(uint, uint);
    HRESULT StartServer(const(char)*);
    HRESULT OutputServers(uint, const(char)*, uint);
    HRESULT TerminateProcesses();
    HRESULT DetachProcesses();
    HRESULT EndSession(uint);
    HRESULT GetExitCode(uint*);
    HRESULT DispatchCallbacks(uint);
    HRESULT ExitDispatch(IDebugClient);
    HRESULT CreateClient(IDebugClient*);
    HRESULT GetInputCallbacks(IDebugInputCallbacks*);
    HRESULT SetInputCallbacks(IDebugInputCallbacks);
    HRESULT GetOutputCallbacks(IDebugOutputCallbacks*);
    HRESULT SetOutputCallbacks(IDebugOutputCallbacks);
    HRESULT GetOutputMask(uint*);
    HRESULT SetOutputMask(uint);
    HRESULT GetOtherOutputMask(IDebugClient, uint*);
    HRESULT SetOtherOutputMask(IDebugClient, uint);
    HRESULT GetOutputWidth(uint*);
    HRESULT SetOutputWidth(uint);
    HRESULT GetOutputLinePrefix(PSTR, uint, uint*);
    HRESULT SetOutputLinePrefix(const(char)*);
    HRESULT GetIdentity(PSTR, uint, uint*);
    HRESULT OutputIdentity(uint, uint, const(char)*);
    HRESULT GetEventCallbacks(IDebugEventCallbacks*);
    HRESULT SetEventCallbacks(IDebugEventCallbacks);
    HRESULT FlushCallbacks();
    HRESULT WriteDumpFile2(const(char)*, uint, uint, const(char)*);
    HRESULT AddDumpInformationFile(const(char)*, uint);
    HRESULT EndProcessServer(ulong);
    HRESULT WaitForProcessServerEnd(uint);
    HRESULT IsKernelDebuggerEnabled();
    HRESULT TerminateCurrentProcess();
    HRESULT DetachCurrentProcess();
    HRESULT AbandonCurrentProcess();
    HRESULT GetRunningProcessSystemIdByExecutableNameWide(ulong, const(wchar)*, uint, uint*);
    HRESULT GetRunningProcessDescriptionWide(ulong, uint, uint, PWSTR, uint, uint*, PWSTR, uint, uint*);
    HRESULT CreateProcessWide(ulong, PWSTR, uint);
    HRESULT CreateProcessAndAttachWide(ulong, PWSTR, uint, uint, uint);
}
enum IID_IDebugClient4 = GUID(0xca83c3de, 0x5089, 0x4cf8, [0x93, 0xc8, 0xd8, 0x92, 0x38, 0x7f, 0x2a, 0x5e]);
interface IDebugClient4 : IUnknown
{
    HRESULT AttachKernel(uint, const(char)*);
    HRESULT GetKernelConnectionOptions(PSTR, uint, uint*);
    HRESULT SetKernelConnectionOptions(const(char)*);
    HRESULT StartProcessServer(uint, const(char)*, void*);
    HRESULT ConnectProcessServer(const(char)*, ulong*);
    HRESULT DisconnectProcessServer(ulong);
    HRESULT GetRunningProcessSystemIds(ulong, uint*, uint, uint*);
    HRESULT GetRunningProcessSystemIdByExecutableName(ulong, const(char)*, uint, uint*);
    HRESULT GetRunningProcessDescription(ulong, uint, uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT AttachProcess(ulong, uint, uint);
    HRESULT CreateProcessA(ulong, PSTR, uint);
    HRESULT CreateProcessAndAttach(ulong, PSTR, uint, uint, uint);
    HRESULT GetProcessOptions(uint*);
    HRESULT AddProcessOptions(uint);
    HRESULT RemoveProcessOptions(uint);
    HRESULT SetProcessOptions(uint);
    HRESULT OpenDumpFile(const(char)*);
    HRESULT WriteDumpFile(const(char)*, uint);
    HRESULT ConnectSession(uint, uint);
    HRESULT StartServer(const(char)*);
    HRESULT OutputServers(uint, const(char)*, uint);
    HRESULT TerminateProcesses();
    HRESULT DetachProcesses();
    HRESULT EndSession(uint);
    HRESULT GetExitCode(uint*);
    HRESULT DispatchCallbacks(uint);
    HRESULT ExitDispatch(IDebugClient);
    HRESULT CreateClient(IDebugClient*);
    HRESULT GetInputCallbacks(IDebugInputCallbacks*);
    HRESULT SetInputCallbacks(IDebugInputCallbacks);
    HRESULT GetOutputCallbacks(IDebugOutputCallbacks*);
    HRESULT SetOutputCallbacks(IDebugOutputCallbacks);
    HRESULT GetOutputMask(uint*);
    HRESULT SetOutputMask(uint);
    HRESULT GetOtherOutputMask(IDebugClient, uint*);
    HRESULT SetOtherOutputMask(IDebugClient, uint);
    HRESULT GetOutputWidth(uint*);
    HRESULT SetOutputWidth(uint);
    HRESULT GetOutputLinePrefix(PSTR, uint, uint*);
    HRESULT SetOutputLinePrefix(const(char)*);
    HRESULT GetIdentity(PSTR, uint, uint*);
    HRESULT OutputIdentity(uint, uint, const(char)*);
    HRESULT GetEventCallbacks(IDebugEventCallbacks*);
    HRESULT SetEventCallbacks(IDebugEventCallbacks);
    HRESULT FlushCallbacks();
    HRESULT WriteDumpFile2(const(char)*, uint, uint, const(char)*);
    HRESULT AddDumpInformationFile(const(char)*, uint);
    HRESULT EndProcessServer(ulong);
    HRESULT WaitForProcessServerEnd(uint);
    HRESULT IsKernelDebuggerEnabled();
    HRESULT TerminateCurrentProcess();
    HRESULT DetachCurrentProcess();
    HRESULT AbandonCurrentProcess();
    HRESULT GetRunningProcessSystemIdByExecutableNameWide(ulong, const(wchar)*, uint, uint*);
    HRESULT GetRunningProcessDescriptionWide(ulong, uint, uint, PWSTR, uint, uint*, PWSTR, uint, uint*);
    HRESULT CreateProcessWide(ulong, PWSTR, uint);
    HRESULT CreateProcessAndAttachWide(ulong, PWSTR, uint, uint, uint);
    HRESULT OpenDumpFileWide(const(wchar)*, ulong);
    HRESULT WriteDumpFileWide(const(wchar)*, ulong, uint, uint, const(wchar)*);
    HRESULT AddDumpInformationFileWide(const(wchar)*, ulong, uint);
    HRESULT GetNumberDumpFiles(uint*);
    HRESULT GetDumpFile(uint, PSTR, uint, uint*, ulong*, uint*);
    HRESULT GetDumpFileWide(uint, PWSTR, uint, uint*, ulong*, uint*);
}
enum IID_IDebugClient5 = GUID(0xe3acb9d7, 0x7ec2, 0x4f0c, [0xa0, 0xda, 0xe8, 0x1e, 0xc, 0xbb, 0xe6, 0x28]);
interface IDebugClient5 : IUnknown
{
    HRESULT AttachKernel(uint, const(char)*);
    HRESULT GetKernelConnectionOptions(PSTR, uint, uint*);
    HRESULT SetKernelConnectionOptions(const(char)*);
    HRESULT StartProcessServer(uint, const(char)*, void*);
    HRESULT ConnectProcessServer(const(char)*, ulong*);
    HRESULT DisconnectProcessServer(ulong);
    HRESULT GetRunningProcessSystemIds(ulong, uint*, uint, uint*);
    HRESULT GetRunningProcessSystemIdByExecutableName(ulong, const(char)*, uint, uint*);
    HRESULT GetRunningProcessDescription(ulong, uint, uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT AttachProcess(ulong, uint, uint);
    HRESULT CreateProcessA(ulong, PSTR, uint);
    HRESULT CreateProcessAndAttach(ulong, PSTR, uint, uint, uint);
    HRESULT GetProcessOptions(uint*);
    HRESULT AddProcessOptions(uint);
    HRESULT RemoveProcessOptions(uint);
    HRESULT SetProcessOptions(uint);
    HRESULT OpenDumpFile(const(char)*);
    HRESULT WriteDumpFile(const(char)*, uint);
    HRESULT ConnectSession(uint, uint);
    HRESULT StartServer(const(char)*);
    HRESULT OutputServers(uint, const(char)*, uint);
    HRESULT TerminateProcesses();
    HRESULT DetachProcesses();
    HRESULT EndSession(uint);
    HRESULT GetExitCode(uint*);
    HRESULT DispatchCallbacks(uint);
    HRESULT ExitDispatch(IDebugClient);
    HRESULT CreateClient(IDebugClient*);
    HRESULT GetInputCallbacks(IDebugInputCallbacks*);
    HRESULT SetInputCallbacks(IDebugInputCallbacks);
    HRESULT GetOutputCallbacks(IDebugOutputCallbacks*);
    HRESULT SetOutputCallbacks(IDebugOutputCallbacks);
    HRESULT GetOutputMask(uint*);
    HRESULT SetOutputMask(uint);
    HRESULT GetOtherOutputMask(IDebugClient, uint*);
    HRESULT SetOtherOutputMask(IDebugClient, uint);
    HRESULT GetOutputWidth(uint*);
    HRESULT SetOutputWidth(uint);
    HRESULT GetOutputLinePrefix(PSTR, uint, uint*);
    HRESULT SetOutputLinePrefix(const(char)*);
    HRESULT GetIdentity(PSTR, uint, uint*);
    HRESULT OutputIdentity(uint, uint, const(char)*);
    HRESULT GetEventCallbacks(IDebugEventCallbacks*);
    HRESULT SetEventCallbacks(IDebugEventCallbacks);
    HRESULT FlushCallbacks();
    HRESULT WriteDumpFile2(const(char)*, uint, uint, const(char)*);
    HRESULT AddDumpInformationFile(const(char)*, uint);
    HRESULT EndProcessServer(ulong);
    HRESULT WaitForProcessServerEnd(uint);
    HRESULT IsKernelDebuggerEnabled();
    HRESULT TerminateCurrentProcess();
    HRESULT DetachCurrentProcess();
    HRESULT AbandonCurrentProcess();
    HRESULT GetRunningProcessSystemIdByExecutableNameWide(ulong, const(wchar)*, uint, uint*);
    HRESULT GetRunningProcessDescriptionWide(ulong, uint, uint, PWSTR, uint, uint*, PWSTR, uint, uint*);
    HRESULT CreateProcessWide(ulong, PWSTR, uint);
    HRESULT CreateProcessAndAttachWide(ulong, PWSTR, uint, uint, uint);
    HRESULT OpenDumpFileWide(const(wchar)*, ulong);
    HRESULT WriteDumpFileWide(const(wchar)*, ulong, uint, uint, const(wchar)*);
    HRESULT AddDumpInformationFileWide(const(wchar)*, ulong, uint);
    HRESULT GetNumberDumpFiles(uint*);
    HRESULT GetDumpFile(uint, PSTR, uint, uint*, ulong*, uint*);
    HRESULT GetDumpFileWide(uint, PWSTR, uint, uint*, ulong*, uint*);
    HRESULT AttachKernelWide(uint, const(wchar)*);
    HRESULT GetKernelConnectionOptionsWide(PWSTR, uint, uint*);
    HRESULT SetKernelConnectionOptionsWide(const(wchar)*);
    HRESULT StartProcessServerWide(uint, const(wchar)*, void*);
    HRESULT ConnectProcessServerWide(const(wchar)*, ulong*);
    HRESULT StartServerWide(const(wchar)*);
    HRESULT OutputServersWide(uint, const(wchar)*, uint);
    HRESULT GetOutputCallbacksWide(IDebugOutputCallbacksWide*);
    HRESULT SetOutputCallbacksWide(IDebugOutputCallbacksWide);
    HRESULT GetOutputLinePrefixWide(PWSTR, uint, uint*);
    HRESULT SetOutputLinePrefixWide(const(wchar)*);
    HRESULT GetIdentityWide(PWSTR, uint, uint*);
    HRESULT OutputIdentityWide(uint, uint, const(wchar)*);
    HRESULT GetEventCallbacksWide(IDebugEventCallbacksWide*);
    HRESULT SetEventCallbacksWide(IDebugEventCallbacksWide);
    HRESULT CreateProcess2(ulong, PSTR, void*, uint, const(char)*, const(char)*);
    HRESULT CreateProcess2Wide(ulong, PWSTR, void*, uint, const(wchar)*, const(wchar)*);
    HRESULT CreateProcessAndAttach2(ulong, PSTR, void*, uint, const(char)*, const(char)*, uint, uint);
    HRESULT CreateProcessAndAttach2Wide(ulong, PWSTR, void*, uint, const(wchar)*, const(wchar)*, uint, uint);
    HRESULT PushOutputLinePrefix(const(char)*, ulong*);
    HRESULT PushOutputLinePrefixWide(const(wchar)*, ulong*);
    HRESULT PopOutputLinePrefix(ulong);
    HRESULT GetNumberInputCallbacks(uint*);
    HRESULT GetNumberOutputCallbacks(uint*);
    HRESULT GetNumberEventCallbacks(uint, uint*);
    HRESULT GetQuitLockString(PSTR, uint, uint*);
    HRESULT SetQuitLockString(const(char)*);
    HRESULT GetQuitLockStringWide(PWSTR, uint, uint*);
    HRESULT SetQuitLockStringWide(const(wchar)*);
}
enum IID_IDebugClient6 = GUID(0xfd28b4c5, 0xc498, 0x4686, [0xa2, 0x8e, 0x62, 0xca, 0xd2, 0x15, 0x4e, 0xb3]);
interface IDebugClient6 : IUnknown
{
    HRESULT AttachKernel(uint, const(char)*);
    HRESULT GetKernelConnectionOptions(PSTR, uint, uint*);
    HRESULT SetKernelConnectionOptions(const(char)*);
    HRESULT StartProcessServer(uint, const(char)*, void*);
    HRESULT ConnectProcessServer(const(char)*, ulong*);
    HRESULT DisconnectProcessServer(ulong);
    HRESULT GetRunningProcessSystemIds(ulong, uint*, uint, uint*);
    HRESULT GetRunningProcessSystemIdByExecutableName(ulong, const(char)*, uint, uint*);
    HRESULT GetRunningProcessDescription(ulong, uint, uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT AttachProcess(ulong, uint, uint);
    HRESULT CreateProcessA(ulong, PSTR, uint);
    HRESULT CreateProcessAndAttach(ulong, PSTR, uint, uint, uint);
    HRESULT GetProcessOptions(uint*);
    HRESULT AddProcessOptions(uint);
    HRESULT RemoveProcessOptions(uint);
    HRESULT SetProcessOptions(uint);
    HRESULT OpenDumpFile(const(char)*);
    HRESULT WriteDumpFile(const(char)*, uint);
    HRESULT ConnectSession(uint, uint);
    HRESULT StartServer(const(char)*);
    HRESULT OutputServers(uint, const(char)*, uint);
    HRESULT TerminateProcesses();
    HRESULT DetachProcesses();
    HRESULT EndSession(uint);
    HRESULT GetExitCode(uint*);
    HRESULT DispatchCallbacks(uint);
    HRESULT ExitDispatch(IDebugClient);
    HRESULT CreateClient(IDebugClient*);
    HRESULT GetInputCallbacks(IDebugInputCallbacks*);
    HRESULT SetInputCallbacks(IDebugInputCallbacks);
    HRESULT GetOutputCallbacks(IDebugOutputCallbacks*);
    HRESULT SetOutputCallbacks(IDebugOutputCallbacks);
    HRESULT GetOutputMask(uint*);
    HRESULT SetOutputMask(uint);
    HRESULT GetOtherOutputMask(IDebugClient, uint*);
    HRESULT SetOtherOutputMask(IDebugClient, uint);
    HRESULT GetOutputWidth(uint*);
    HRESULT SetOutputWidth(uint);
    HRESULT GetOutputLinePrefix(PSTR, uint, uint*);
    HRESULT SetOutputLinePrefix(const(char)*);
    HRESULT GetIdentity(PSTR, uint, uint*);
    HRESULT OutputIdentity(uint, uint, const(char)*);
    HRESULT GetEventCallbacks(IDebugEventCallbacks*);
    HRESULT SetEventCallbacks(IDebugEventCallbacks);
    HRESULT FlushCallbacks();
    HRESULT WriteDumpFile2(const(char)*, uint, uint, const(char)*);
    HRESULT AddDumpInformationFile(const(char)*, uint);
    HRESULT EndProcessServer(ulong);
    HRESULT WaitForProcessServerEnd(uint);
    HRESULT IsKernelDebuggerEnabled();
    HRESULT TerminateCurrentProcess();
    HRESULT DetachCurrentProcess();
    HRESULT AbandonCurrentProcess();
    HRESULT GetRunningProcessSystemIdByExecutableNameWide(ulong, const(wchar)*, uint, uint*);
    HRESULT GetRunningProcessDescriptionWide(ulong, uint, uint, PWSTR, uint, uint*, PWSTR, uint, uint*);
    HRESULT CreateProcessWide(ulong, PWSTR, uint);
    HRESULT CreateProcessAndAttachWide(ulong, PWSTR, uint, uint, uint);
    HRESULT OpenDumpFileWide(const(wchar)*, ulong);
    HRESULT WriteDumpFileWide(const(wchar)*, ulong, uint, uint, const(wchar)*);
    HRESULT AddDumpInformationFileWide(const(wchar)*, ulong, uint);
    HRESULT GetNumberDumpFiles(uint*);
    HRESULT GetDumpFile(uint, PSTR, uint, uint*, ulong*, uint*);
    HRESULT GetDumpFileWide(uint, PWSTR, uint, uint*, ulong*, uint*);
    HRESULT AttachKernelWide(uint, const(wchar)*);
    HRESULT GetKernelConnectionOptionsWide(PWSTR, uint, uint*);
    HRESULT SetKernelConnectionOptionsWide(const(wchar)*);
    HRESULT StartProcessServerWide(uint, const(wchar)*, void*);
    HRESULT ConnectProcessServerWide(const(wchar)*, ulong*);
    HRESULT StartServerWide(const(wchar)*);
    HRESULT OutputServersWide(uint, const(wchar)*, uint);
    HRESULT GetOutputCallbacksWide(IDebugOutputCallbacksWide*);
    HRESULT SetOutputCallbacksWide(IDebugOutputCallbacksWide);
    HRESULT GetOutputLinePrefixWide(PWSTR, uint, uint*);
    HRESULT SetOutputLinePrefixWide(const(wchar)*);
    HRESULT GetIdentityWide(PWSTR, uint, uint*);
    HRESULT OutputIdentityWide(uint, uint, const(wchar)*);
    HRESULT GetEventCallbacksWide(IDebugEventCallbacksWide*);
    HRESULT SetEventCallbacksWide(IDebugEventCallbacksWide);
    HRESULT CreateProcess2(ulong, PSTR, void*, uint, const(char)*, const(char)*);
    HRESULT CreateProcess2Wide(ulong, PWSTR, void*, uint, const(wchar)*, const(wchar)*);
    HRESULT CreateProcessAndAttach2(ulong, PSTR, void*, uint, const(char)*, const(char)*, uint, uint);
    HRESULT CreateProcessAndAttach2Wide(ulong, PWSTR, void*, uint, const(wchar)*, const(wchar)*, uint, uint);
    HRESULT PushOutputLinePrefix(const(char)*, ulong*);
    HRESULT PushOutputLinePrefixWide(const(wchar)*, ulong*);
    HRESULT PopOutputLinePrefix(ulong);
    HRESULT GetNumberInputCallbacks(uint*);
    HRESULT GetNumberOutputCallbacks(uint*);
    HRESULT GetNumberEventCallbacks(uint, uint*);
    HRESULT GetQuitLockString(PSTR, uint, uint*);
    HRESULT SetQuitLockString(const(char)*);
    HRESULT GetQuitLockStringWide(PWSTR, uint, uint*);
    HRESULT SetQuitLockStringWide(const(wchar)*);
    HRESULT SetEventContextCallbacks(IDebugEventContextCallbacks);
}
enum IID_IDebugClient7 = GUID(0x13586be3, 0x542e, 0x481e, [0xb1, 0xf2, 0x84, 0x97, 0xba, 0x74, 0xf9, 0xa9]);
interface IDebugClient7 : IUnknown
{
    HRESULT AttachKernel(uint, const(char)*);
    HRESULT GetKernelConnectionOptions(PSTR, uint, uint*);
    HRESULT SetKernelConnectionOptions(const(char)*);
    HRESULT StartProcessServer(uint, const(char)*, void*);
    HRESULT ConnectProcessServer(const(char)*, ulong*);
    HRESULT DisconnectProcessServer(ulong);
    HRESULT GetRunningProcessSystemIds(ulong, uint*, uint, uint*);
    HRESULT GetRunningProcessSystemIdByExecutableName(ulong, const(char)*, uint, uint*);
    HRESULT GetRunningProcessDescription(ulong, uint, uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT AttachProcess(ulong, uint, uint);
    HRESULT CreateProcessA(ulong, PSTR, uint);
    HRESULT CreateProcessAndAttach(ulong, PSTR, uint, uint, uint);
    HRESULT GetProcessOptions(uint*);
    HRESULT AddProcessOptions(uint);
    HRESULT RemoveProcessOptions(uint);
    HRESULT SetProcessOptions(uint);
    HRESULT OpenDumpFile(const(char)*);
    HRESULT WriteDumpFile(const(char)*, uint);
    HRESULT ConnectSession(uint, uint);
    HRESULT StartServer(const(char)*);
    HRESULT OutputServers(uint, const(char)*, uint);
    HRESULT TerminateProcesses();
    HRESULT DetachProcesses();
    HRESULT EndSession(uint);
    HRESULT GetExitCode(uint*);
    HRESULT DispatchCallbacks(uint);
    HRESULT ExitDispatch(IDebugClient);
    HRESULT CreateClient(IDebugClient*);
    HRESULT GetInputCallbacks(IDebugInputCallbacks*);
    HRESULT SetInputCallbacks(IDebugInputCallbacks);
    HRESULT GetOutputCallbacks(IDebugOutputCallbacks*);
    HRESULT SetOutputCallbacks(IDebugOutputCallbacks);
    HRESULT GetOutputMask(uint*);
    HRESULT SetOutputMask(uint);
    HRESULT GetOtherOutputMask(IDebugClient, uint*);
    HRESULT SetOtherOutputMask(IDebugClient, uint);
    HRESULT GetOutputWidth(uint*);
    HRESULT SetOutputWidth(uint);
    HRESULT GetOutputLinePrefix(PSTR, uint, uint*);
    HRESULT SetOutputLinePrefix(const(char)*);
    HRESULT GetIdentity(PSTR, uint, uint*);
    HRESULT OutputIdentity(uint, uint, const(char)*);
    HRESULT GetEventCallbacks(IDebugEventCallbacks*);
    HRESULT SetEventCallbacks(IDebugEventCallbacks);
    HRESULT FlushCallbacks();
    HRESULT WriteDumpFile2(const(char)*, uint, uint, const(char)*);
    HRESULT AddDumpInformationFile(const(char)*, uint);
    HRESULT EndProcessServer(ulong);
    HRESULT WaitForProcessServerEnd(uint);
    HRESULT IsKernelDebuggerEnabled();
    HRESULT TerminateCurrentProcess();
    HRESULT DetachCurrentProcess();
    HRESULT AbandonCurrentProcess();
    HRESULT GetRunningProcessSystemIdByExecutableNameWide(ulong, const(wchar)*, uint, uint*);
    HRESULT GetRunningProcessDescriptionWide(ulong, uint, uint, PWSTR, uint, uint*, PWSTR, uint, uint*);
    HRESULT CreateProcessWide(ulong, PWSTR, uint);
    HRESULT CreateProcessAndAttachWide(ulong, PWSTR, uint, uint, uint);
    HRESULT OpenDumpFileWide(const(wchar)*, ulong);
    HRESULT WriteDumpFileWide(const(wchar)*, ulong, uint, uint, const(wchar)*);
    HRESULT AddDumpInformationFileWide(const(wchar)*, ulong, uint);
    HRESULT GetNumberDumpFiles(uint*);
    HRESULT GetDumpFile(uint, PSTR, uint, uint*, ulong*, uint*);
    HRESULT GetDumpFileWide(uint, PWSTR, uint, uint*, ulong*, uint*);
    HRESULT AttachKernelWide(uint, const(wchar)*);
    HRESULT GetKernelConnectionOptionsWide(PWSTR, uint, uint*);
    HRESULT SetKernelConnectionOptionsWide(const(wchar)*);
    HRESULT StartProcessServerWide(uint, const(wchar)*, void*);
    HRESULT ConnectProcessServerWide(const(wchar)*, ulong*);
    HRESULT StartServerWide(const(wchar)*);
    HRESULT OutputServersWide(uint, const(wchar)*, uint);
    HRESULT GetOutputCallbacksWide(IDebugOutputCallbacksWide*);
    HRESULT SetOutputCallbacksWide(IDebugOutputCallbacksWide);
    HRESULT GetOutputLinePrefixWide(PWSTR, uint, uint*);
    HRESULT SetOutputLinePrefixWide(const(wchar)*);
    HRESULT GetIdentityWide(PWSTR, uint, uint*);
    HRESULT OutputIdentityWide(uint, uint, const(wchar)*);
    HRESULT GetEventCallbacksWide(IDebugEventCallbacksWide*);
    HRESULT SetEventCallbacksWide(IDebugEventCallbacksWide);
    HRESULT CreateProcess2(ulong, PSTR, void*, uint, const(char)*, const(char)*);
    HRESULT CreateProcess2Wide(ulong, PWSTR, void*, uint, const(wchar)*, const(wchar)*);
    HRESULT CreateProcessAndAttach2(ulong, PSTR, void*, uint, const(char)*, const(char)*, uint, uint);
    HRESULT CreateProcessAndAttach2Wide(ulong, PWSTR, void*, uint, const(wchar)*, const(wchar)*, uint, uint);
    HRESULT PushOutputLinePrefix(const(char)*, ulong*);
    HRESULT PushOutputLinePrefixWide(const(wchar)*, ulong*);
    HRESULT PopOutputLinePrefix(ulong);
    HRESULT GetNumberInputCallbacks(uint*);
    HRESULT GetNumberOutputCallbacks(uint*);
    HRESULT GetNumberEventCallbacks(uint, uint*);
    HRESULT GetQuitLockString(PSTR, uint, uint*);
    HRESULT SetQuitLockString(const(char)*);
    HRESULT GetQuitLockStringWide(PWSTR, uint, uint*);
    HRESULT SetQuitLockStringWide(const(wchar)*);
    HRESULT SetEventContextCallbacks(IDebugEventContextCallbacks);
    HRESULT SetClientContext(void*, uint);
}
enum IID_IDebugClient8 = GUID(0xcec43add, 0x6375, 0x469e, [0x83, 0xd5, 0x41, 0x4e, 0x40, 0x33, 0xc1, 0x9a]);
interface IDebugClient8 : IUnknown
{
    HRESULT AttachKernel(uint, const(char)*);
    HRESULT GetKernelConnectionOptions(PSTR, uint, uint*);
    HRESULT SetKernelConnectionOptions(const(char)*);
    HRESULT StartProcessServer(uint, const(char)*, void*);
    HRESULT ConnectProcessServer(const(char)*, ulong*);
    HRESULT DisconnectProcessServer(ulong);
    HRESULT GetRunningProcessSystemIds(ulong, uint*, uint, uint*);
    HRESULT GetRunningProcessSystemIdByExecutableName(ulong, const(char)*, uint, uint*);
    HRESULT GetRunningProcessDescription(ulong, uint, uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT AttachProcess(ulong, uint, uint);
    HRESULT CreateProcessA(ulong, PSTR, uint);
    HRESULT CreateProcessAndAttach(ulong, PSTR, uint, uint, uint);
    HRESULT GetProcessOptions(uint*);
    HRESULT AddProcessOptions(uint);
    HRESULT RemoveProcessOptions(uint);
    HRESULT SetProcessOptions(uint);
    HRESULT OpenDumpFile(const(char)*);
    HRESULT WriteDumpFile(const(char)*, uint);
    HRESULT ConnectSession(uint, uint);
    HRESULT StartServer(const(char)*);
    HRESULT OutputServers(uint, const(char)*, uint);
    HRESULT TerminateProcesses();
    HRESULT DetachProcesses();
    HRESULT EndSession(uint);
    HRESULT GetExitCode(uint*);
    HRESULT DispatchCallbacks(uint);
    HRESULT ExitDispatch(IDebugClient);
    HRESULT CreateClient(IDebugClient*);
    HRESULT GetInputCallbacks(IDebugInputCallbacks*);
    HRESULT SetInputCallbacks(IDebugInputCallbacks);
    HRESULT GetOutputCallbacks(IDebugOutputCallbacks*);
    HRESULT SetOutputCallbacks(IDebugOutputCallbacks);
    HRESULT GetOutputMask(uint*);
    HRESULT SetOutputMask(uint);
    HRESULT GetOtherOutputMask(IDebugClient, uint*);
    HRESULT SetOtherOutputMask(IDebugClient, uint);
    HRESULT GetOutputWidth(uint*);
    HRESULT SetOutputWidth(uint);
    HRESULT GetOutputLinePrefix(PSTR, uint, uint*);
    HRESULT SetOutputLinePrefix(const(char)*);
    HRESULT GetIdentity(PSTR, uint, uint*);
    HRESULT OutputIdentity(uint, uint, const(char)*);
    HRESULT GetEventCallbacks(IDebugEventCallbacks*);
    HRESULT SetEventCallbacks(IDebugEventCallbacks);
    HRESULT FlushCallbacks();
    HRESULT WriteDumpFile2(const(char)*, uint, uint, const(char)*);
    HRESULT AddDumpInformationFile(const(char)*, uint);
    HRESULT EndProcessServer(ulong);
    HRESULT WaitForProcessServerEnd(uint);
    HRESULT IsKernelDebuggerEnabled();
    HRESULT TerminateCurrentProcess();
    HRESULT DetachCurrentProcess();
    HRESULT AbandonCurrentProcess();
    HRESULT GetRunningProcessSystemIdByExecutableNameWide(ulong, const(wchar)*, uint, uint*);
    HRESULT GetRunningProcessDescriptionWide(ulong, uint, uint, PWSTR, uint, uint*, PWSTR, uint, uint*);
    HRESULT CreateProcessWide(ulong, PWSTR, uint);
    HRESULT CreateProcessAndAttachWide(ulong, PWSTR, uint, uint, uint);
    HRESULT OpenDumpFileWide(const(wchar)*, ulong);
    HRESULT WriteDumpFileWide(const(wchar)*, ulong, uint, uint, const(wchar)*);
    HRESULT AddDumpInformationFileWide(const(wchar)*, ulong, uint);
    HRESULT GetNumberDumpFiles(uint*);
    HRESULT GetDumpFile(uint, PSTR, uint, uint*, ulong*, uint*);
    HRESULT GetDumpFileWide(uint, PWSTR, uint, uint*, ulong*, uint*);
    HRESULT AttachKernelWide(uint, const(wchar)*);
    HRESULT GetKernelConnectionOptionsWide(PWSTR, uint, uint*);
    HRESULT SetKernelConnectionOptionsWide(const(wchar)*);
    HRESULT StartProcessServerWide(uint, const(wchar)*, void*);
    HRESULT ConnectProcessServerWide(const(wchar)*, ulong*);
    HRESULT StartServerWide(const(wchar)*);
    HRESULT OutputServersWide(uint, const(wchar)*, uint);
    HRESULT GetOutputCallbacksWide(IDebugOutputCallbacksWide*);
    HRESULT SetOutputCallbacksWide(IDebugOutputCallbacksWide);
    HRESULT GetOutputLinePrefixWide(PWSTR, uint, uint*);
    HRESULT SetOutputLinePrefixWide(const(wchar)*);
    HRESULT GetIdentityWide(PWSTR, uint, uint*);
    HRESULT OutputIdentityWide(uint, uint, const(wchar)*);
    HRESULT GetEventCallbacksWide(IDebugEventCallbacksWide*);
    HRESULT SetEventCallbacksWide(IDebugEventCallbacksWide);
    HRESULT CreateProcess2(ulong, PSTR, void*, uint, const(char)*, const(char)*);
    HRESULT CreateProcess2Wide(ulong, PWSTR, void*, uint, const(wchar)*, const(wchar)*);
    HRESULT CreateProcessAndAttach2(ulong, PSTR, void*, uint, const(char)*, const(char)*, uint, uint);
    HRESULT CreateProcessAndAttach2Wide(ulong, PWSTR, void*, uint, const(wchar)*, const(wchar)*, uint, uint);
    HRESULT PushOutputLinePrefix(const(char)*, ulong*);
    HRESULT PushOutputLinePrefixWide(const(wchar)*, ulong*);
    HRESULT PopOutputLinePrefix(ulong);
    HRESULT GetNumberInputCallbacks(uint*);
    HRESULT GetNumberOutputCallbacks(uint*);
    HRESULT GetNumberEventCallbacks(uint, uint*);
    HRESULT GetQuitLockString(PSTR, uint, uint*);
    HRESULT SetQuitLockString(const(char)*);
    HRESULT GetQuitLockStringWide(PWSTR, uint, uint*);
    HRESULT SetQuitLockStringWide(const(wchar)*);
    HRESULT SetEventContextCallbacks(IDebugEventContextCallbacks);
    HRESULT SetClientContext(void*, uint);
    HRESULT OpenDumpFileWide2(const(wchar)*, ulong, uint);
}
enum IID_IDebugPlmClient = GUID(0xa02b66c4, 0xaea3, 0x4234, [0xa9, 0xf7, 0xfe, 0x4c, 0x38, 0x3d, 0x4e, 0x29]);
interface IDebugPlmClient : IUnknown
{
    HRESULT LaunchPlmPackageForDebugWide(ulong, uint, const(wchar)*, const(wchar)*, const(wchar)*, uint*, uint*);
}
enum IID_IDebugPlmClient2 = GUID(0x597c980d, 0xe7bd, 0x4309, [0x96, 0x2c, 0x9d, 0x9b, 0x69, 0xa7, 0x37, 0x2c]);
interface IDebugPlmClient2 : IUnknown
{
    HRESULT LaunchPlmPackageForDebugWide(ulong, uint, const(wchar)*, const(wchar)*, const(wchar)*, uint*, uint*);
    HRESULT LaunchPlmBgTaskForDebugWide(ulong, uint, const(wchar)*, const(wchar)*, uint*, uint*);
}
enum IID_IDebugPlmClient3 = GUID(0xd4a5dbd1, 0xca02, 0x4d90, [0x85, 0x6a, 0x2a, 0x92, 0xbf, 0xd0, 0xf2, 0xf]);
interface IDebugPlmClient3 : IUnknown
{
    HRESULT LaunchPlmPackageForDebugWide(ulong, uint, const(wchar)*, const(wchar)*, const(wchar)*, uint*, uint*);
    HRESULT LaunchPlmBgTaskForDebugWide(ulong, uint, const(wchar)*, const(wchar)*, uint*, uint*);
    HRESULT QueryPlmPackageWide(ulong, const(wchar)*, IDebugOutputStream);
    HRESULT QueryPlmPackageList(ulong, IDebugOutputStream);
    HRESULT EnablePlmPackageDebugWide(ulong, const(wchar)*);
    HRESULT DisablePlmPackageDebugWide(ulong, const(wchar)*);
    HRESULT SuspendPlmPackageWide(ulong, const(wchar)*);
    HRESULT ResumePlmPackageWide(ulong, const(wchar)*);
    HRESULT TerminatePlmPackageWide(ulong, const(wchar)*);
    HRESULT LaunchAndDebugPlmAppWide(ulong, const(wchar)*, const(wchar)*, const(wchar)*);
    HRESULT ActivateAndDebugPlmBgTaskWide(ulong, const(wchar)*, const(wchar)*);
}
enum IID_IDebugOutputStream = GUID(0x7782d8f2, 0x2b85, 0x4059, [0xab, 0x88, 0x28, 0xce, 0xdd, 0xca, 0x1c, 0x80]);
interface IDebugOutputStream : IUnknown
{
    HRESULT Write(const(wchar)*);
}
struct DEBUG_STACK_FRAME
{
    ulong InstructionOffset;
    ulong ReturnOffset;
    ulong FrameOffset;
    ulong StackOffset;
    ulong FuncTableEntry;
    ulong[4] Params;
    ulong[6] Reserved;
    BOOL Virtual;
    uint FrameNumber;
}
struct DEBUG_STACK_FRAME_EX
{
    ulong InstructionOffset;
    ulong ReturnOffset;
    ulong FrameOffset;
    ulong StackOffset;
    ulong FuncTableEntry;
    ulong[4] Params;
    ulong[6] Reserved;
    BOOL Virtual;
    uint FrameNumber;
    uint InlineFrameContext;
    uint Reserved1;
}
union INLINE_FRAME_CONTEXT
{
    uint ContextValue;
    struct
    {
        ubyte FrameId;
        ubyte FrameType;
        ushort FrameSignature;
    }
}
struct STACK_SRC_INFO
{
    const(wchar)* ImagePath;
    const(wchar)* ModuleName;
    const(wchar)* Function;
    uint Displacement;
    uint Row;
    uint Column;
}
struct STACK_SYM_FRAME_INFO
{
    DEBUG_STACK_FRAME_EX StackFrameEx;
    STACK_SRC_INFO SrcInfo;
}
struct DEBUG_SPECIFIC_FILTER_PARAMETERS
{
    uint ExecutionOption;
    uint ContinueOption;
    uint TextSize;
    uint CommandSize;
    uint ArgumentSize;
}
struct DEBUG_EXCEPTION_FILTER_PARAMETERS
{
    uint ExecutionOption;
    uint ContinueOption;
    uint TextSize;
    uint CommandSize;
    uint SecondCommandSize;
    uint ExceptionCode;
}
struct DEBUG_LAST_EVENT_INFO_BREAKPOINT
{
    uint Id;
}
struct DEBUG_LAST_EVENT_INFO_EXCEPTION
{
    EXCEPTION_RECORD64 ExceptionRecord;
    uint FirstChance;
}
struct DEBUG_LAST_EVENT_INFO_EXIT_THREAD
{
    uint ExitCode;
}
struct DEBUG_LAST_EVENT_INFO_EXIT_PROCESS
{
    uint ExitCode;
}
struct DEBUG_LAST_EVENT_INFO_LOAD_MODULE
{
    ulong Base;
}
struct DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE
{
    ulong Base;
}
struct DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR
{
    uint Error;
    uint Level;
}
struct DEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION
{
    uint Kind;
    uint DataSize;
    ulong Address;
}
struct DEBUG_VALUE
{
    union
    {
        ubyte I8;
        ushort I16;
        uint I32;
        struct
        {
            ulong I64;
            BOOL Nat;
        }
        float F32;
        double F64;
        ubyte[10] F80Bytes;
        ubyte[11] F82Bytes;
        ubyte[16] F128Bytes;
        ubyte[16] VI8;
        ushort[8] VI16;
        uint[4] VI32;
        ulong[2] VI64;
        float[4] VF32;
        double[2] VF64;
        struct _I64Parts32_e__Struct
        {
            uint LowPart;
            uint HighPart;
        }
        struct _F128Parts64_e__Struct
        {
            ulong LowPart;
            long HighPart;
        }
        ubyte[24] RawBytes;
    }
    uint TailOfRawBytes;
    uint Type;
}
enum IID_IDebugControl = GUID(0x5182e668, 0x105e, 0x416e, [0xad, 0x92, 0x24, 0xef, 0x80, 0x4, 0x24, 0xba]);
interface IDebugControl : IUnknown
{
    HRESULT GetInterrupt();
    HRESULT SetInterrupt(uint);
    HRESULT GetInterruptTimeout(uint*);
    HRESULT SetInterruptTimeout(uint);
    HRESULT GetLogFile(PSTR, uint, uint*, BOOL*);
    HRESULT OpenLogFile(const(char)*, BOOL);
    HRESULT CloseLogFile();
    HRESULT GetLogMask(uint*);
    HRESULT SetLogMask(uint);
    HRESULT Input(PSTR, uint, uint*);
    HRESULT ReturnInput(const(char)*);
    HRESULT Output(uint, const(char)*);
    HRESULT OutputVaList(uint, const(char)*, byte*);
    HRESULT ControlledOutput(uint, uint, const(char)*);
    HRESULT ControlledOutputVaList(uint, uint, const(char)*, byte*);
    HRESULT OutputPrompt(uint, const(char)*);
    HRESULT OutputPromptVaList(uint, const(char)*, byte*);
    HRESULT GetPromptText(PSTR, uint, uint*);
    HRESULT OutputCurrentState(uint, uint);
    HRESULT OutputVersionInformation(uint);
    HRESULT GetNotifyEventHandle(ulong*);
    HRESULT SetNotifyEventHandle(ulong);
    HRESULT Assemble(ulong, const(char)*, ulong*);
    HRESULT Disassemble(ulong, uint, PSTR, uint, uint*, ulong*);
    HRESULT GetDisassembleEffectiveOffset(ulong*);
    HRESULT OutputDisassembly(uint, ulong, uint, ulong*);
    HRESULT OutputDisassemblyLines(uint, uint, uint, ulong, uint, uint*, ulong*, ulong*, ulong*);
    HRESULT GetNearInstruction(ulong, int, ulong*);
    HRESULT GetStackTrace(ulong, ulong, ulong, DEBUG_STACK_FRAME*, uint, uint*);
    HRESULT GetReturnOffset(ulong*);
    HRESULT OutputStackTrace(uint, DEBUG_STACK_FRAME*, uint, uint);
    HRESULT GetDebuggeeType(uint*, uint*);
    HRESULT GetActualProcessorType(uint*);
    HRESULT GetExecutingProcessorType(uint*);
    HRESULT GetNumberPossibleExecutingProcessorTypes(uint*);
    HRESULT GetPossibleExecutingProcessorTypes(uint, uint, uint*);
    HRESULT GetNumberProcessors(uint*);
    HRESULT GetSystemVersion(uint*, uint*, uint*, PSTR, uint, uint*, uint*, PSTR, uint, uint*);
    HRESULT GetPageSize(uint*);
    HRESULT IsPointer64Bit();
    HRESULT ReadBugCheckData(uint*, ulong*, ulong*, ulong*, ulong*);
    HRESULT GetNumberSupportedProcessorTypes(uint*);
    HRESULT GetSupportedProcessorTypes(uint, uint, uint*);
    HRESULT GetProcessorTypeNames(uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT GetEffectiveProcessorType(uint*);
    HRESULT SetEffectiveProcessorType(uint);
    HRESULT GetExecutionStatus(uint*);
    HRESULT SetExecutionStatus(uint);
    HRESULT GetCodeLevel(uint*);
    HRESULT SetCodeLevel(uint);
    HRESULT GetEngineOptions(uint*);
    HRESULT AddEngineOptions(uint);
    HRESULT RemoveEngineOptions(uint);
    HRESULT SetEngineOptions(uint);
    HRESULT GetSystemErrorControl(uint*, uint*);
    HRESULT SetSystemErrorControl(uint, uint);
    HRESULT GetTextMacro(uint, PSTR, uint, uint*);
    HRESULT SetTextMacro(uint, const(char)*);
    HRESULT GetRadix(uint*);
    HRESULT SetRadix(uint);
    HRESULT Evaluate(const(char)*, uint, DEBUG_VALUE*, uint*);
    HRESULT CoerceValue(DEBUG_VALUE*, uint, DEBUG_VALUE*);
    HRESULT CoerceValues(uint, DEBUG_VALUE*, uint*, DEBUG_VALUE*);
    HRESULT Execute(uint, const(char)*, uint);
    HRESULT ExecuteCommandFile(uint, const(char)*, uint);
    HRESULT GetNumberBreakpoints(uint*);
    HRESULT GetBreakpointByIndex(uint, IDebugBreakpoint*);
    HRESULT GetBreakpointById(uint, IDebugBreakpoint*);
    HRESULT GetBreakpointParameters(uint, uint*, uint, DEBUG_BREAKPOINT_PARAMETERS*);
    HRESULT AddBreakpoint(uint, uint, IDebugBreakpoint*);
    HRESULT RemoveBreakpoint(IDebugBreakpoint);
    HRESULT AddExtension(const(char)*, uint, ulong*);
    HRESULT RemoveExtension(ulong);
    HRESULT GetExtensionByPath(const(char)*, ulong*);
    HRESULT CallExtension(ulong, const(char)*, const(char)*);
    HRESULT GetExtensionFunction(ulong, const(char)*, FARPROC*);
    HRESULT GetWindbgExtensionApis32(WINDBG_EXTENSION_APIS32*);
    HRESULT GetWindbgExtensionApis64(WINDBG_EXTENSION_APIS64*);
    HRESULT GetNumberEventFilters(uint*, uint*, uint*);
    HRESULT GetEventFilterText(uint, PSTR, uint, uint*);
    HRESULT GetEventFilterCommand(uint, PSTR, uint, uint*);
    HRESULT SetEventFilterCommand(uint, const(char)*);
    HRESULT GetSpecificFilterParameters(uint, uint, DEBUG_SPECIFIC_FILTER_PARAMETERS*);
    HRESULT SetSpecificFilterParameters(uint, uint, DEBUG_SPECIFIC_FILTER_PARAMETERS*);
    HRESULT GetSpecificFilterArgument(uint, PSTR, uint, uint*);
    HRESULT SetSpecificFilterArgument(uint, const(char)*);
    HRESULT GetExceptionFilterParameters(uint, uint*, uint, DEBUG_EXCEPTION_FILTER_PARAMETERS*);
    HRESULT SetExceptionFilterParameters(uint, DEBUG_EXCEPTION_FILTER_PARAMETERS*);
    HRESULT GetExceptionFilterSecondCommand(uint, PSTR, uint, uint*);
    HRESULT SetExceptionFilterSecondCommand(uint, const(char)*);
    HRESULT WaitForEvent(uint, uint);
    HRESULT GetLastEventInformation(uint*, uint*, uint*, void*, uint, uint*, PSTR, uint, uint*);
}
enum IID_IDebugControl2 = GUID(0xd4366723, 0x44df, 0x4bed, [0x8c, 0x7e, 0x4c, 0x5, 0x42, 0x4f, 0x45, 0x88]);
interface IDebugControl2 : IUnknown
{
    HRESULT GetInterrupt();
    HRESULT SetInterrupt(uint);
    HRESULT GetInterruptTimeout(uint*);
    HRESULT SetInterruptTimeout(uint);
    HRESULT GetLogFile(PSTR, uint, uint*, BOOL*);
    HRESULT OpenLogFile(const(char)*, BOOL);
    HRESULT CloseLogFile();
    HRESULT GetLogMask(uint*);
    HRESULT SetLogMask(uint);
    HRESULT Input(PSTR, uint, uint*);
    HRESULT ReturnInput(const(char)*);
    HRESULT Output(uint, const(char)*);
    HRESULT OutputVaList(uint, const(char)*, byte*);
    HRESULT ControlledOutput(uint, uint, const(char)*);
    HRESULT ControlledOutputVaList(uint, uint, const(char)*, byte*);
    HRESULT OutputPrompt(uint, const(char)*);
    HRESULT OutputPromptVaList(uint, const(char)*, byte*);
    HRESULT GetPromptText(PSTR, uint, uint*);
    HRESULT OutputCurrentState(uint, uint);
    HRESULT OutputVersionInformation(uint);
    HRESULT GetNotifyEventHandle(ulong*);
    HRESULT SetNotifyEventHandle(ulong);
    HRESULT Assemble(ulong, const(char)*, ulong*);
    HRESULT Disassemble(ulong, uint, PSTR, uint, uint*, ulong*);
    HRESULT GetDisassembleEffectiveOffset(ulong*);
    HRESULT OutputDisassembly(uint, ulong, uint, ulong*);
    HRESULT OutputDisassemblyLines(uint, uint, uint, ulong, uint, uint*, ulong*, ulong*, ulong*);
    HRESULT GetNearInstruction(ulong, int, ulong*);
    HRESULT GetStackTrace(ulong, ulong, ulong, DEBUG_STACK_FRAME*, uint, uint*);
    HRESULT GetReturnOffset(ulong*);
    HRESULT OutputStackTrace(uint, DEBUG_STACK_FRAME*, uint, uint);
    HRESULT GetDebuggeeType(uint*, uint*);
    HRESULT GetActualProcessorType(uint*);
    HRESULT GetExecutingProcessorType(uint*);
    HRESULT GetNumberPossibleExecutingProcessorTypes(uint*);
    HRESULT GetPossibleExecutingProcessorTypes(uint, uint, uint*);
    HRESULT GetNumberProcessors(uint*);
    HRESULT GetSystemVersion(uint*, uint*, uint*, PSTR, uint, uint*, uint*, PSTR, uint, uint*);
    HRESULT GetPageSize(uint*);
    HRESULT IsPointer64Bit();
    HRESULT ReadBugCheckData(uint*, ulong*, ulong*, ulong*, ulong*);
    HRESULT GetNumberSupportedProcessorTypes(uint*);
    HRESULT GetSupportedProcessorTypes(uint, uint, uint*);
    HRESULT GetProcessorTypeNames(uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT GetEffectiveProcessorType(uint*);
    HRESULT SetEffectiveProcessorType(uint);
    HRESULT GetExecutionStatus(uint*);
    HRESULT SetExecutionStatus(uint);
    HRESULT GetCodeLevel(uint*);
    HRESULT SetCodeLevel(uint);
    HRESULT GetEngineOptions(uint*);
    HRESULT AddEngineOptions(uint);
    HRESULT RemoveEngineOptions(uint);
    HRESULT SetEngineOptions(uint);
    HRESULT GetSystemErrorControl(uint*, uint*);
    HRESULT SetSystemErrorControl(uint, uint);
    HRESULT GetTextMacro(uint, PSTR, uint, uint*);
    HRESULT SetTextMacro(uint, const(char)*);
    HRESULT GetRadix(uint*);
    HRESULT SetRadix(uint);
    HRESULT Evaluate(const(char)*, uint, DEBUG_VALUE*, uint*);
    HRESULT CoerceValue(DEBUG_VALUE*, uint, DEBUG_VALUE*);
    HRESULT CoerceValues(uint, DEBUG_VALUE*, uint*, DEBUG_VALUE*);
    HRESULT Execute(uint, const(char)*, uint);
    HRESULT ExecuteCommandFile(uint, const(char)*, uint);
    HRESULT GetNumberBreakpoints(uint*);
    HRESULT GetBreakpointByIndex(uint, IDebugBreakpoint*);
    HRESULT GetBreakpointById(uint, IDebugBreakpoint*);
    HRESULT GetBreakpointParameters(uint, uint*, uint, DEBUG_BREAKPOINT_PARAMETERS*);
    HRESULT AddBreakpoint(uint, uint, IDebugBreakpoint*);
    HRESULT RemoveBreakpoint(IDebugBreakpoint);
    HRESULT AddExtension(const(char)*, uint, ulong*);
    HRESULT RemoveExtension(ulong);
    HRESULT GetExtensionByPath(const(char)*, ulong*);
    HRESULT CallExtension(ulong, const(char)*, const(char)*);
    HRESULT GetExtensionFunction(ulong, const(char)*, FARPROC*);
    HRESULT GetWindbgExtensionApis32(WINDBG_EXTENSION_APIS32*);
    HRESULT GetWindbgExtensionApis64(WINDBG_EXTENSION_APIS64*);
    HRESULT GetNumberEventFilters(uint*, uint*, uint*);
    HRESULT GetEventFilterText(uint, PSTR, uint, uint*);
    HRESULT GetEventFilterCommand(uint, PSTR, uint, uint*);
    HRESULT SetEventFilterCommand(uint, const(char)*);
    HRESULT GetSpecificFilterParameters(uint, uint, DEBUG_SPECIFIC_FILTER_PARAMETERS*);
    HRESULT SetSpecificFilterParameters(uint, uint, DEBUG_SPECIFIC_FILTER_PARAMETERS*);
    HRESULT GetSpecificFilterArgument(uint, PSTR, uint, uint*);
    HRESULT SetSpecificFilterArgument(uint, const(char)*);
    HRESULT GetExceptionFilterParameters(uint, uint*, uint, DEBUG_EXCEPTION_FILTER_PARAMETERS*);
    HRESULT SetExceptionFilterParameters(uint, DEBUG_EXCEPTION_FILTER_PARAMETERS*);
    HRESULT GetExceptionFilterSecondCommand(uint, PSTR, uint, uint*);
    HRESULT SetExceptionFilterSecondCommand(uint, const(char)*);
    HRESULT WaitForEvent(uint, uint);
    HRESULT GetLastEventInformation(uint*, uint*, uint*, void*, uint, uint*, PSTR, uint, uint*);
    HRESULT GetCurrentTimeDate(uint*);
    HRESULT GetCurrentSystemUpTime(uint*);
    HRESULT GetDumpFormatFlags(uint*);
    HRESULT GetNumberTextReplacements(uint*);
    HRESULT GetTextReplacement(const(char)*, uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT SetTextReplacement(const(char)*, const(char)*);
    HRESULT RemoveTextReplacements();
    HRESULT OutputTextReplacements(uint, uint);
}
enum IID_IDebugControl3 = GUID(0x7df74a86, 0xb03f, 0x407f, [0x90, 0xab, 0xa2, 0xd, 0xad, 0xce, 0xad, 0x8]);
interface IDebugControl3 : IUnknown
{
    HRESULT GetInterrupt();
    HRESULT SetInterrupt(uint);
    HRESULT GetInterruptTimeout(uint*);
    HRESULT SetInterruptTimeout(uint);
    HRESULT GetLogFile(PSTR, uint, uint*, BOOL*);
    HRESULT OpenLogFile(const(char)*, BOOL);
    HRESULT CloseLogFile();
    HRESULT GetLogMask(uint*);
    HRESULT SetLogMask(uint);
    HRESULT Input(PSTR, uint, uint*);
    HRESULT ReturnInput(const(char)*);
    HRESULT Output(uint, const(char)*);
    HRESULT OutputVaList(uint, const(char)*, byte*);
    HRESULT ControlledOutput(uint, uint, const(char)*);
    HRESULT ControlledOutputVaList(uint, uint, const(char)*, byte*);
    HRESULT OutputPrompt(uint, const(char)*);
    HRESULT OutputPromptVaList(uint, const(char)*, byte*);
    HRESULT GetPromptText(PSTR, uint, uint*);
    HRESULT OutputCurrentState(uint, uint);
    HRESULT OutputVersionInformation(uint);
    HRESULT GetNotifyEventHandle(ulong*);
    HRESULT SetNotifyEventHandle(ulong);
    HRESULT Assemble(ulong, const(char)*, ulong*);
    HRESULT Disassemble(ulong, uint, PSTR, uint, uint*, ulong*);
    HRESULT GetDisassembleEffectiveOffset(ulong*);
    HRESULT OutputDisassembly(uint, ulong, uint, ulong*);
    HRESULT OutputDisassemblyLines(uint, uint, uint, ulong, uint, uint*, ulong*, ulong*, ulong*);
    HRESULT GetNearInstruction(ulong, int, ulong*);
    HRESULT GetStackTrace(ulong, ulong, ulong, DEBUG_STACK_FRAME*, uint, uint*);
    HRESULT GetReturnOffset(ulong*);
    HRESULT OutputStackTrace(uint, DEBUG_STACK_FRAME*, uint, uint);
    HRESULT GetDebuggeeType(uint*, uint*);
    HRESULT GetActualProcessorType(uint*);
    HRESULT GetExecutingProcessorType(uint*);
    HRESULT GetNumberPossibleExecutingProcessorTypes(uint*);
    HRESULT GetPossibleExecutingProcessorTypes(uint, uint, uint*);
    HRESULT GetNumberProcessors(uint*);
    HRESULT GetSystemVersion(uint*, uint*, uint*, PSTR, uint, uint*, uint*, PSTR, uint, uint*);
    HRESULT GetPageSize(uint*);
    HRESULT IsPointer64Bit();
    HRESULT ReadBugCheckData(uint*, ulong*, ulong*, ulong*, ulong*);
    HRESULT GetNumberSupportedProcessorTypes(uint*);
    HRESULT GetSupportedProcessorTypes(uint, uint, uint*);
    HRESULT GetProcessorTypeNames(uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT GetEffectiveProcessorType(uint*);
    HRESULT SetEffectiveProcessorType(uint);
    HRESULT GetExecutionStatus(uint*);
    HRESULT SetExecutionStatus(uint);
    HRESULT GetCodeLevel(uint*);
    HRESULT SetCodeLevel(uint);
    HRESULT GetEngineOptions(uint*);
    HRESULT AddEngineOptions(uint);
    HRESULT RemoveEngineOptions(uint);
    HRESULT SetEngineOptions(uint);
    HRESULT GetSystemErrorControl(uint*, uint*);
    HRESULT SetSystemErrorControl(uint, uint);
    HRESULT GetTextMacro(uint, PSTR, uint, uint*);
    HRESULT SetTextMacro(uint, const(char)*);
    HRESULT GetRadix(uint*);
    HRESULT SetRadix(uint);
    HRESULT Evaluate(const(char)*, uint, DEBUG_VALUE*, uint*);
    HRESULT CoerceValue(DEBUG_VALUE*, uint, DEBUG_VALUE*);
    HRESULT CoerceValues(uint, DEBUG_VALUE*, uint*, DEBUG_VALUE*);
    HRESULT Execute(uint, const(char)*, uint);
    HRESULT ExecuteCommandFile(uint, const(char)*, uint);
    HRESULT GetNumberBreakpoints(uint*);
    HRESULT GetBreakpointByIndex(uint, IDebugBreakpoint*);
    HRESULT GetBreakpointById(uint, IDebugBreakpoint*);
    HRESULT GetBreakpointParameters(uint, uint*, uint, DEBUG_BREAKPOINT_PARAMETERS*);
    HRESULT AddBreakpoint(uint, uint, IDebugBreakpoint*);
    HRESULT RemoveBreakpoint(IDebugBreakpoint);
    HRESULT AddExtension(const(char)*, uint, ulong*);
    HRESULT RemoveExtension(ulong);
    HRESULT GetExtensionByPath(const(char)*, ulong*);
    HRESULT CallExtension(ulong, const(char)*, const(char)*);
    HRESULT GetExtensionFunction(ulong, const(char)*, FARPROC*);
    HRESULT GetWindbgExtensionApis32(WINDBG_EXTENSION_APIS32*);
    HRESULT GetWindbgExtensionApis64(WINDBG_EXTENSION_APIS64*);
    HRESULT GetNumberEventFilters(uint*, uint*, uint*);
    HRESULT GetEventFilterText(uint, PSTR, uint, uint*);
    HRESULT GetEventFilterCommand(uint, PSTR, uint, uint*);
    HRESULT SetEventFilterCommand(uint, const(char)*);
    HRESULT GetSpecificFilterParameters(uint, uint, DEBUG_SPECIFIC_FILTER_PARAMETERS*);
    HRESULT SetSpecificFilterParameters(uint, uint, DEBUG_SPECIFIC_FILTER_PARAMETERS*);
    HRESULT GetSpecificFilterArgument(uint, PSTR, uint, uint*);
    HRESULT SetSpecificFilterArgument(uint, const(char)*);
    HRESULT GetExceptionFilterParameters(uint, uint*, uint, DEBUG_EXCEPTION_FILTER_PARAMETERS*);
    HRESULT SetExceptionFilterParameters(uint, DEBUG_EXCEPTION_FILTER_PARAMETERS*);
    HRESULT GetExceptionFilterSecondCommand(uint, PSTR, uint, uint*);
    HRESULT SetExceptionFilterSecondCommand(uint, const(char)*);
    HRESULT WaitForEvent(uint, uint);
    HRESULT GetLastEventInformation(uint*, uint*, uint*, void*, uint, uint*, PSTR, uint, uint*);
    HRESULT GetCurrentTimeDate(uint*);
    HRESULT GetCurrentSystemUpTime(uint*);
    HRESULT GetDumpFormatFlags(uint*);
    HRESULT GetNumberTextReplacements(uint*);
    HRESULT GetTextReplacement(const(char)*, uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT SetTextReplacement(const(char)*, const(char)*);
    HRESULT RemoveTextReplacements();
    HRESULT OutputTextReplacements(uint, uint);
    HRESULT GetAssemblyOptions(uint*);
    HRESULT AddAssemblyOptions(uint);
    HRESULT RemoveAssemblyOptions(uint);
    HRESULT SetAssemblyOptions(uint);
    HRESULT GetExpressionSyntax(uint*);
    HRESULT SetExpressionSyntax(uint);
    HRESULT SetExpressionSyntaxByName(const(char)*);
    HRESULT GetNumberExpressionSyntaxes(uint*);
    HRESULT GetExpressionSyntaxNames(uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT GetNumberEvents(uint*);
    HRESULT GetEventIndexDescription(uint, uint, PSTR, uint, uint*);
    HRESULT GetCurrentEventIndex(uint*);
    HRESULT SetNextEventIndex(uint, uint, uint*);
}
enum IID_IDebugControl4 = GUID(0x94e60ce9, 0x9b41, 0x4b19, [0x9f, 0xc0, 0x6d, 0x9e, 0xb3, 0x52, 0x72, 0xb3]);
interface IDebugControl4 : IUnknown
{
    HRESULT GetInterrupt();
    HRESULT SetInterrupt(uint);
    HRESULT GetInterruptTimeout(uint*);
    HRESULT SetInterruptTimeout(uint);
    HRESULT GetLogFile(PSTR, uint, uint*, BOOL*);
    HRESULT OpenLogFile(const(char)*, BOOL);
    HRESULT CloseLogFile();
    HRESULT GetLogMask(uint*);
    HRESULT SetLogMask(uint);
    HRESULT Input(PSTR, uint, uint*);
    HRESULT ReturnInput(const(char)*);
    HRESULT Output(uint, const(char)*);
    HRESULT OutputVaList(uint, const(char)*, byte*);
    HRESULT ControlledOutput(uint, uint, const(char)*);
    HRESULT ControlledOutputVaList(uint, uint, const(char)*, byte*);
    HRESULT OutputPrompt(uint, const(char)*);
    HRESULT OutputPromptVaList(uint, const(char)*, byte*);
    HRESULT GetPromptText(PSTR, uint, uint*);
    HRESULT OutputCurrentState(uint, uint);
    HRESULT OutputVersionInformation(uint);
    HRESULT GetNotifyEventHandle(ulong*);
    HRESULT SetNotifyEventHandle(ulong);
    HRESULT Assemble(ulong, const(char)*, ulong*);
    HRESULT Disassemble(ulong, uint, PSTR, uint, uint*, ulong*);
    HRESULT GetDisassembleEffectiveOffset(ulong*);
    HRESULT OutputDisassembly(uint, ulong, uint, ulong*);
    HRESULT OutputDisassemblyLines(uint, uint, uint, ulong, uint, uint*, ulong*, ulong*, ulong*);
    HRESULT GetNearInstruction(ulong, int, ulong*);
    HRESULT GetStackTrace(ulong, ulong, ulong, DEBUG_STACK_FRAME*, uint, uint*);
    HRESULT GetReturnOffset(ulong*);
    HRESULT OutputStackTrace(uint, DEBUG_STACK_FRAME*, uint, uint);
    HRESULT GetDebuggeeType(uint*, uint*);
    HRESULT GetActualProcessorType(uint*);
    HRESULT GetExecutingProcessorType(uint*);
    HRESULT GetNumberPossibleExecutingProcessorTypes(uint*);
    HRESULT GetPossibleExecutingProcessorTypes(uint, uint, uint*);
    HRESULT GetNumberProcessors(uint*);
    HRESULT GetSystemVersion(uint*, uint*, uint*, PSTR, uint, uint*, uint*, PSTR, uint, uint*);
    HRESULT GetPageSize(uint*);
    HRESULT IsPointer64Bit();
    HRESULT ReadBugCheckData(uint*, ulong*, ulong*, ulong*, ulong*);
    HRESULT GetNumberSupportedProcessorTypes(uint*);
    HRESULT GetSupportedProcessorTypes(uint, uint, uint*);
    HRESULT GetProcessorTypeNames(uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT GetEffectiveProcessorType(uint*);
    HRESULT SetEffectiveProcessorType(uint);
    HRESULT GetExecutionStatus(uint*);
    HRESULT SetExecutionStatus(uint);
    HRESULT GetCodeLevel(uint*);
    HRESULT SetCodeLevel(uint);
    HRESULT GetEngineOptions(uint*);
    HRESULT AddEngineOptions(uint);
    HRESULT RemoveEngineOptions(uint);
    HRESULT SetEngineOptions(uint);
    HRESULT GetSystemErrorControl(uint*, uint*);
    HRESULT SetSystemErrorControl(uint, uint);
    HRESULT GetTextMacro(uint, PSTR, uint, uint*);
    HRESULT SetTextMacro(uint, const(char)*);
    HRESULT GetRadix(uint*);
    HRESULT SetRadix(uint);
    HRESULT Evaluate(const(char)*, uint, DEBUG_VALUE*, uint*);
    HRESULT CoerceValue(DEBUG_VALUE*, uint, DEBUG_VALUE*);
    HRESULT CoerceValues(uint, DEBUG_VALUE*, uint*, DEBUG_VALUE*);
    HRESULT Execute(uint, const(char)*, uint);
    HRESULT ExecuteCommandFile(uint, const(char)*, uint);
    HRESULT GetNumberBreakpoints(uint*);
    HRESULT GetBreakpointByIndex(uint, IDebugBreakpoint*);
    HRESULT GetBreakpointById(uint, IDebugBreakpoint*);
    HRESULT GetBreakpointParameters(uint, uint*, uint, DEBUG_BREAKPOINT_PARAMETERS*);
    HRESULT AddBreakpoint(uint, uint, IDebugBreakpoint*);
    HRESULT RemoveBreakpoint(IDebugBreakpoint);
    HRESULT AddExtension(const(char)*, uint, ulong*);
    HRESULT RemoveExtension(ulong);
    HRESULT GetExtensionByPath(const(char)*, ulong*);
    HRESULT CallExtension(ulong, const(char)*, const(char)*);
    HRESULT GetExtensionFunction(ulong, const(char)*, FARPROC*);
    HRESULT GetWindbgExtensionApis32(WINDBG_EXTENSION_APIS32*);
    HRESULT GetWindbgExtensionApis64(WINDBG_EXTENSION_APIS64*);
    HRESULT GetNumberEventFilters(uint*, uint*, uint*);
    HRESULT GetEventFilterText(uint, PSTR, uint, uint*);
    HRESULT GetEventFilterCommand(uint, PSTR, uint, uint*);
    HRESULT SetEventFilterCommand(uint, const(char)*);
    HRESULT GetSpecificFilterParameters(uint, uint, DEBUG_SPECIFIC_FILTER_PARAMETERS*);
    HRESULT SetSpecificFilterParameters(uint, uint, DEBUG_SPECIFIC_FILTER_PARAMETERS*);
    HRESULT GetSpecificFilterArgument(uint, PSTR, uint, uint*);
    HRESULT SetSpecificFilterArgument(uint, const(char)*);
    HRESULT GetExceptionFilterParameters(uint, uint*, uint, DEBUG_EXCEPTION_FILTER_PARAMETERS*);
    HRESULT SetExceptionFilterParameters(uint, DEBUG_EXCEPTION_FILTER_PARAMETERS*);
    HRESULT GetExceptionFilterSecondCommand(uint, PSTR, uint, uint*);
    HRESULT SetExceptionFilterSecondCommand(uint, const(char)*);
    HRESULT WaitForEvent(uint, uint);
    HRESULT GetLastEventInformation(uint*, uint*, uint*, void*, uint, uint*, PSTR, uint, uint*);
    HRESULT GetCurrentTimeDate(uint*);
    HRESULT GetCurrentSystemUpTime(uint*);
    HRESULT GetDumpFormatFlags(uint*);
    HRESULT GetNumberTextReplacements(uint*);
    HRESULT GetTextReplacement(const(char)*, uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT SetTextReplacement(const(char)*, const(char)*);
    HRESULT RemoveTextReplacements();
    HRESULT OutputTextReplacements(uint, uint);
    HRESULT GetAssemblyOptions(uint*);
    HRESULT AddAssemblyOptions(uint);
    HRESULT RemoveAssemblyOptions(uint);
    HRESULT SetAssemblyOptions(uint);
    HRESULT GetExpressionSyntax(uint*);
    HRESULT SetExpressionSyntax(uint);
    HRESULT SetExpressionSyntaxByName(const(char)*);
    HRESULT GetNumberExpressionSyntaxes(uint*);
    HRESULT GetExpressionSyntaxNames(uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT GetNumberEvents(uint*);
    HRESULT GetEventIndexDescription(uint, uint, PSTR, uint, uint*);
    HRESULT GetCurrentEventIndex(uint*);
    HRESULT SetNextEventIndex(uint, uint, uint*);
    HRESULT GetLogFileWide(PWSTR, uint, uint*, BOOL*);
    HRESULT OpenLogFileWide(const(wchar)*, BOOL);
    HRESULT InputWide(PWSTR, uint, uint*);
    HRESULT ReturnInputWide(const(wchar)*);
    HRESULT OutputWide(uint, const(wchar)*);
    HRESULT OutputVaListWide(uint, const(wchar)*, byte*);
    HRESULT ControlledOutputWide(uint, uint, const(wchar)*);
    HRESULT ControlledOutputVaListWide(uint, uint, const(wchar)*, byte*);
    HRESULT OutputPromptWide(uint, const(wchar)*);
    HRESULT OutputPromptVaListWide(uint, const(wchar)*, byte*);
    HRESULT GetPromptTextWide(PWSTR, uint, uint*);
    HRESULT AssembleWide(ulong, const(wchar)*, ulong*);
    HRESULT DisassembleWide(ulong, uint, PWSTR, uint, uint*, ulong*);
    HRESULT GetProcessorTypeNamesWide(uint, PWSTR, uint, uint*, PWSTR, uint, uint*);
    HRESULT GetTextMacroWide(uint, PWSTR, uint, uint*);
    HRESULT SetTextMacroWide(uint, const(wchar)*);
    HRESULT EvaluateWide(const(wchar)*, uint, DEBUG_VALUE*, uint*);
    HRESULT ExecuteWide(uint, const(wchar)*, uint);
    HRESULT ExecuteCommandFileWide(uint, const(wchar)*, uint);
    HRESULT GetBreakpointByIndex2(uint, IDebugBreakpoint2*);
    HRESULT GetBreakpointById2(uint, IDebugBreakpoint2*);
    HRESULT AddBreakpoint2(uint, uint, IDebugBreakpoint2*);
    HRESULT RemoveBreakpoint2(IDebugBreakpoint2);
    HRESULT AddExtensionWide(const(wchar)*, uint, ulong*);
    HRESULT GetExtensionByPathWide(const(wchar)*, ulong*);
    HRESULT CallExtensionWide(ulong, const(wchar)*, const(wchar)*);
    HRESULT GetExtensionFunctionWide(ulong, const(wchar)*, FARPROC*);
    HRESULT GetEventFilterTextWide(uint, PWSTR, uint, uint*);
    HRESULT GetEventFilterCommandWide(uint, PWSTR, uint, uint*);
    HRESULT SetEventFilterCommandWide(uint, const(wchar)*);
    HRESULT GetSpecificFilterArgumentWide(uint, PWSTR, uint, uint*);
    HRESULT SetSpecificFilterArgumentWide(uint, const(wchar)*);
    HRESULT GetExceptionFilterSecondCommandWide(uint, PWSTR, uint, uint*);
    HRESULT SetExceptionFilterSecondCommandWide(uint, const(wchar)*);
    HRESULT GetLastEventInformationWide(uint*, uint*, uint*, void*, uint, uint*, PWSTR, uint, uint*);
    HRESULT GetTextReplacementWide(const(wchar)*, uint, PWSTR, uint, uint*, PWSTR, uint, uint*);
    HRESULT SetTextReplacementWide(const(wchar)*, const(wchar)*);
    HRESULT SetExpressionSyntaxByNameWide(const(wchar)*);
    HRESULT GetExpressionSyntaxNamesWide(uint, PWSTR, uint, uint*, PWSTR, uint, uint*);
    HRESULT GetEventIndexDescriptionWide(uint, uint, PWSTR, uint, uint*);
    HRESULT GetLogFile2(PSTR, uint, uint*, uint*);
    HRESULT OpenLogFile2(const(char)*, uint);
    HRESULT GetLogFile2Wide(PWSTR, uint, uint*, uint*);
    HRESULT OpenLogFile2Wide(const(wchar)*, uint);
    HRESULT GetSystemVersionValues(uint*, uint*, uint*, uint*, uint*);
    HRESULT GetSystemVersionString(uint, PSTR, uint, uint*);
    HRESULT GetSystemVersionStringWide(uint, PWSTR, uint, uint*);
    HRESULT GetContextStackTrace(void*, uint, DEBUG_STACK_FRAME*, uint, void*, uint, uint, uint*);
    HRESULT OutputContextStackTrace(uint, DEBUG_STACK_FRAME*, uint, void*, uint, uint, uint);
    HRESULT GetStoredEventInformation(uint*, uint*, uint*, void*, uint, uint*, void*, uint, uint*);
    HRESULT GetManagedStatus(uint*, uint, PSTR, uint, uint*);
    HRESULT GetManagedStatusWide(uint*, uint, PWSTR, uint, uint*);
    HRESULT ResetManagedStatus(uint);
}
enum IID_IDebugControl5 = GUID(0xb2ffe162, 0x2412, 0x429f, [0x8d, 0x1d, 0x5b, 0xf6, 0xdd, 0x82, 0x46, 0x96]);
interface IDebugControl5 : IUnknown
{
    HRESULT GetInterrupt();
    HRESULT SetInterrupt(uint);
    HRESULT GetInterruptTimeout(uint*);
    HRESULT SetInterruptTimeout(uint);
    HRESULT GetLogFile(PSTR, uint, uint*, BOOL*);
    HRESULT OpenLogFile(const(char)*, BOOL);
    HRESULT CloseLogFile();
    HRESULT GetLogMask(uint*);
    HRESULT SetLogMask(uint);
    HRESULT Input(PSTR, uint, uint*);
    HRESULT ReturnInput(const(char)*);
    HRESULT Output(uint, const(char)*);
    HRESULT OutputVaList(uint, const(char)*, byte*);
    HRESULT ControlledOutput(uint, uint, const(char)*);
    HRESULT ControlledOutputVaList(uint, uint, const(char)*, byte*);
    HRESULT OutputPrompt(uint, const(char)*);
    HRESULT OutputPromptVaList(uint, const(char)*, byte*);
    HRESULT GetPromptText(PSTR, uint, uint*);
    HRESULT OutputCurrentState(uint, uint);
    HRESULT OutputVersionInformation(uint);
    HRESULT GetNotifyEventHandle(ulong*);
    HRESULT SetNotifyEventHandle(ulong);
    HRESULT Assemble(ulong, const(char)*, ulong*);
    HRESULT Disassemble(ulong, uint, PSTR, uint, uint*, ulong*);
    HRESULT GetDisassembleEffectiveOffset(ulong*);
    HRESULT OutputDisassembly(uint, ulong, uint, ulong*);
    HRESULT OutputDisassemblyLines(uint, uint, uint, ulong, uint, uint*, ulong*, ulong*, ulong*);
    HRESULT GetNearInstruction(ulong, int, ulong*);
    HRESULT GetStackTrace(ulong, ulong, ulong, DEBUG_STACK_FRAME*, uint, uint*);
    HRESULT GetReturnOffset(ulong*);
    HRESULT OutputStackTrace(uint, DEBUG_STACK_FRAME*, uint, uint);
    HRESULT GetDebuggeeType(uint*, uint*);
    HRESULT GetActualProcessorType(uint*);
    HRESULT GetExecutingProcessorType(uint*);
    HRESULT GetNumberPossibleExecutingProcessorTypes(uint*);
    HRESULT GetPossibleExecutingProcessorTypes(uint, uint, uint*);
    HRESULT GetNumberProcessors(uint*);
    HRESULT GetSystemVersion(uint*, uint*, uint*, PSTR, uint, uint*, uint*, PSTR, uint, uint*);
    HRESULT GetPageSize(uint*);
    HRESULT IsPointer64Bit();
    HRESULT ReadBugCheckData(uint*, ulong*, ulong*, ulong*, ulong*);
    HRESULT GetNumberSupportedProcessorTypes(uint*);
    HRESULT GetSupportedProcessorTypes(uint, uint, uint*);
    HRESULT GetProcessorTypeNames(uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT GetEffectiveProcessorType(uint*);
    HRESULT SetEffectiveProcessorType(uint);
    HRESULT GetExecutionStatus(uint*);
    HRESULT SetExecutionStatus(uint);
    HRESULT GetCodeLevel(uint*);
    HRESULT SetCodeLevel(uint);
    HRESULT GetEngineOptions(uint*);
    HRESULT AddEngineOptions(uint);
    HRESULT RemoveEngineOptions(uint);
    HRESULT SetEngineOptions(uint);
    HRESULT GetSystemErrorControl(uint*, uint*);
    HRESULT SetSystemErrorControl(uint, uint);
    HRESULT GetTextMacro(uint, PSTR, uint, uint*);
    HRESULT SetTextMacro(uint, const(char)*);
    HRESULT GetRadix(uint*);
    HRESULT SetRadix(uint);
    HRESULT Evaluate(const(char)*, uint, DEBUG_VALUE*, uint*);
    HRESULT CoerceValue(DEBUG_VALUE*, uint, DEBUG_VALUE*);
    HRESULT CoerceValues(uint, DEBUG_VALUE*, uint*, DEBUG_VALUE*);
    HRESULT Execute(uint, const(char)*, uint);
    HRESULT ExecuteCommandFile(uint, const(char)*, uint);
    HRESULT GetNumberBreakpoints(uint*);
    HRESULT GetBreakpointByIndex(uint, IDebugBreakpoint*);
    HRESULT GetBreakpointById(uint, IDebugBreakpoint*);
    HRESULT GetBreakpointParameters(uint, uint*, uint, DEBUG_BREAKPOINT_PARAMETERS*);
    HRESULT AddBreakpoint(uint, uint, IDebugBreakpoint*);
    HRESULT RemoveBreakpoint(IDebugBreakpoint);
    HRESULT AddExtension(const(char)*, uint, ulong*);
    HRESULT RemoveExtension(ulong);
    HRESULT GetExtensionByPath(const(char)*, ulong*);
    HRESULT CallExtension(ulong, const(char)*, const(char)*);
    HRESULT GetExtensionFunction(ulong, const(char)*, FARPROC*);
    HRESULT GetWindbgExtensionApis32(WINDBG_EXTENSION_APIS32*);
    HRESULT GetWindbgExtensionApis64(WINDBG_EXTENSION_APIS64*);
    HRESULT GetNumberEventFilters(uint*, uint*, uint*);
    HRESULT GetEventFilterText(uint, PSTR, uint, uint*);
    HRESULT GetEventFilterCommand(uint, PSTR, uint, uint*);
    HRESULT SetEventFilterCommand(uint, const(char)*);
    HRESULT GetSpecificFilterParameters(uint, uint, DEBUG_SPECIFIC_FILTER_PARAMETERS*);
    HRESULT SetSpecificFilterParameters(uint, uint, DEBUG_SPECIFIC_FILTER_PARAMETERS*);
    HRESULT GetSpecificFilterArgument(uint, PSTR, uint, uint*);
    HRESULT SetSpecificFilterArgument(uint, const(char)*);
    HRESULT GetExceptionFilterParameters(uint, uint*, uint, DEBUG_EXCEPTION_FILTER_PARAMETERS*);
    HRESULT SetExceptionFilterParameters(uint, DEBUG_EXCEPTION_FILTER_PARAMETERS*);
    HRESULT GetExceptionFilterSecondCommand(uint, PSTR, uint, uint*);
    HRESULT SetExceptionFilterSecondCommand(uint, const(char)*);
    HRESULT WaitForEvent(uint, uint);
    HRESULT GetLastEventInformation(uint*, uint*, uint*, void*, uint, uint*, PSTR, uint, uint*);
    HRESULT GetCurrentTimeDate(uint*);
    HRESULT GetCurrentSystemUpTime(uint*);
    HRESULT GetDumpFormatFlags(uint*);
    HRESULT GetNumberTextReplacements(uint*);
    HRESULT GetTextReplacement(const(char)*, uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT SetTextReplacement(const(char)*, const(char)*);
    HRESULT RemoveTextReplacements();
    HRESULT OutputTextReplacements(uint, uint);
    HRESULT GetAssemblyOptions(uint*);
    HRESULT AddAssemblyOptions(uint);
    HRESULT RemoveAssemblyOptions(uint);
    HRESULT SetAssemblyOptions(uint);
    HRESULT GetExpressionSyntax(uint*);
    HRESULT SetExpressionSyntax(uint);
    HRESULT SetExpressionSyntaxByName(const(char)*);
    HRESULT GetNumberExpressionSyntaxes(uint*);
    HRESULT GetExpressionSyntaxNames(uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT GetNumberEvents(uint*);
    HRESULT GetEventIndexDescription(uint, uint, PSTR, uint, uint*);
    HRESULT GetCurrentEventIndex(uint*);
    HRESULT SetNextEventIndex(uint, uint, uint*);
    HRESULT GetLogFileWide(PWSTR, uint, uint*, BOOL*);
    HRESULT OpenLogFileWide(const(wchar)*, BOOL);
    HRESULT InputWide(PWSTR, uint, uint*);
    HRESULT ReturnInputWide(const(wchar)*);
    HRESULT OutputWide(uint, const(wchar)*);
    HRESULT OutputVaListWide(uint, const(wchar)*, byte*);
    HRESULT ControlledOutputWide(uint, uint, const(wchar)*);
    HRESULT ControlledOutputVaListWide(uint, uint, const(wchar)*, byte*);
    HRESULT OutputPromptWide(uint, const(wchar)*);
    HRESULT OutputPromptVaListWide(uint, const(wchar)*, byte*);
    HRESULT GetPromptTextWide(PWSTR, uint, uint*);
    HRESULT AssembleWide(ulong, const(wchar)*, ulong*);
    HRESULT DisassembleWide(ulong, uint, PWSTR, uint, uint*, ulong*);
    HRESULT GetProcessorTypeNamesWide(uint, PWSTR, uint, uint*, PWSTR, uint, uint*);
    HRESULT GetTextMacroWide(uint, PWSTR, uint, uint*);
    HRESULT SetTextMacroWide(uint, const(wchar)*);
    HRESULT EvaluateWide(const(wchar)*, uint, DEBUG_VALUE*, uint*);
    HRESULT ExecuteWide(uint, const(wchar)*, uint);
    HRESULT ExecuteCommandFileWide(uint, const(wchar)*, uint);
    HRESULT GetBreakpointByIndex2(uint, IDebugBreakpoint2*);
    HRESULT GetBreakpointById2(uint, IDebugBreakpoint2*);
    HRESULT AddBreakpoint2(uint, uint, IDebugBreakpoint2*);
    HRESULT RemoveBreakpoint2(IDebugBreakpoint2);
    HRESULT AddExtensionWide(const(wchar)*, uint, ulong*);
    HRESULT GetExtensionByPathWide(const(wchar)*, ulong*);
    HRESULT CallExtensionWide(ulong, const(wchar)*, const(wchar)*);
    HRESULT GetExtensionFunctionWide(ulong, const(wchar)*, FARPROC*);
    HRESULT GetEventFilterTextWide(uint, PWSTR, uint, uint*);
    HRESULT GetEventFilterCommandWide(uint, PWSTR, uint, uint*);
    HRESULT SetEventFilterCommandWide(uint, const(wchar)*);
    HRESULT GetSpecificFilterArgumentWide(uint, PWSTR, uint, uint*);
    HRESULT SetSpecificFilterArgumentWide(uint, const(wchar)*);
    HRESULT GetExceptionFilterSecondCommandWide(uint, PWSTR, uint, uint*);
    HRESULT SetExceptionFilterSecondCommandWide(uint, const(wchar)*);
    HRESULT GetLastEventInformationWide(uint*, uint*, uint*, void*, uint, uint*, PWSTR, uint, uint*);
    HRESULT GetTextReplacementWide(const(wchar)*, uint, PWSTR, uint, uint*, PWSTR, uint, uint*);
    HRESULT SetTextReplacementWide(const(wchar)*, const(wchar)*);
    HRESULT SetExpressionSyntaxByNameWide(const(wchar)*);
    HRESULT GetExpressionSyntaxNamesWide(uint, PWSTR, uint, uint*, PWSTR, uint, uint*);
    HRESULT GetEventIndexDescriptionWide(uint, uint, PWSTR, uint, uint*);
    HRESULT GetLogFile2(PSTR, uint, uint*, uint*);
    HRESULT OpenLogFile2(const(char)*, uint);
    HRESULT GetLogFile2Wide(PWSTR, uint, uint*, uint*);
    HRESULT OpenLogFile2Wide(const(wchar)*, uint);
    HRESULT GetSystemVersionValues(uint*, uint*, uint*, uint*, uint*);
    HRESULT GetSystemVersionString(uint, PSTR, uint, uint*);
    HRESULT GetSystemVersionStringWide(uint, PWSTR, uint, uint*);
    HRESULT GetContextStackTrace(void*, uint, DEBUG_STACK_FRAME*, uint, void*, uint, uint, uint*);
    HRESULT OutputContextStackTrace(uint, DEBUG_STACK_FRAME*, uint, void*, uint, uint, uint);
    HRESULT GetStoredEventInformation(uint*, uint*, uint*, void*, uint, uint*, void*, uint, uint*);
    HRESULT GetManagedStatus(uint*, uint, PSTR, uint, uint*);
    HRESULT GetManagedStatusWide(uint*, uint, PWSTR, uint, uint*);
    HRESULT ResetManagedStatus(uint);
    HRESULT GetStackTraceEx(ulong, ulong, ulong, DEBUG_STACK_FRAME_EX*, uint, uint*);
    HRESULT OutputStackTraceEx(uint, DEBUG_STACK_FRAME_EX*, uint, uint);
    HRESULT GetContextStackTraceEx(void*, uint, DEBUG_STACK_FRAME_EX*, uint, void*, uint, uint, uint*);
    HRESULT OutputContextStackTraceEx(uint, DEBUG_STACK_FRAME_EX*, uint, void*, uint, uint, uint);
    HRESULT GetBreakpointByGuid(GUID*, IDebugBreakpoint3*);
}
enum IID_IDebugControl6 = GUID(0xbc0d583f, 0x126d, 0x43a1, [0x9c, 0xc4, 0xa8, 0x60, 0xab, 0x1d, 0x53, 0x7b]);
interface IDebugControl6 : IUnknown
{
    HRESULT GetInterrupt();
    HRESULT SetInterrupt(uint);
    HRESULT GetInterruptTimeout(uint*);
    HRESULT SetInterruptTimeout(uint);
    HRESULT GetLogFile(PSTR, uint, uint*, BOOL*);
    HRESULT OpenLogFile(const(char)*, BOOL);
    HRESULT CloseLogFile();
    HRESULT GetLogMask(uint*);
    HRESULT SetLogMask(uint);
    HRESULT Input(PSTR, uint, uint*);
    HRESULT ReturnInput(const(char)*);
    HRESULT Output(uint, const(char)*);
    HRESULT OutputVaList(uint, const(char)*, byte*);
    HRESULT ControlledOutput(uint, uint, const(char)*);
    HRESULT ControlledOutputVaList(uint, uint, const(char)*, byte*);
    HRESULT OutputPrompt(uint, const(char)*);
    HRESULT OutputPromptVaList(uint, const(char)*, byte*);
    HRESULT GetPromptText(PSTR, uint, uint*);
    HRESULT OutputCurrentState(uint, uint);
    HRESULT OutputVersionInformation(uint);
    HRESULT GetNotifyEventHandle(ulong*);
    HRESULT SetNotifyEventHandle(ulong);
    HRESULT Assemble(ulong, const(char)*, ulong*);
    HRESULT Disassemble(ulong, uint, PSTR, uint, uint*, ulong*);
    HRESULT GetDisassembleEffectiveOffset(ulong*);
    HRESULT OutputDisassembly(uint, ulong, uint, ulong*);
    HRESULT OutputDisassemblyLines(uint, uint, uint, ulong, uint, uint*, ulong*, ulong*, ulong*);
    HRESULT GetNearInstruction(ulong, int, ulong*);
    HRESULT GetStackTrace(ulong, ulong, ulong, DEBUG_STACK_FRAME*, uint, uint*);
    HRESULT GetReturnOffset(ulong*);
    HRESULT OutputStackTrace(uint, DEBUG_STACK_FRAME*, uint, uint);
    HRESULT GetDebuggeeType(uint*, uint*);
    HRESULT GetActualProcessorType(uint*);
    HRESULT GetExecutingProcessorType(uint*);
    HRESULT GetNumberPossibleExecutingProcessorTypes(uint*);
    HRESULT GetPossibleExecutingProcessorTypes(uint, uint, uint*);
    HRESULT GetNumberProcessors(uint*);
    HRESULT GetSystemVersion(uint*, uint*, uint*, PSTR, uint, uint*, uint*, PSTR, uint, uint*);
    HRESULT GetPageSize(uint*);
    HRESULT IsPointer64Bit();
    HRESULT ReadBugCheckData(uint*, ulong*, ulong*, ulong*, ulong*);
    HRESULT GetNumberSupportedProcessorTypes(uint*);
    HRESULT GetSupportedProcessorTypes(uint, uint, uint*);
    HRESULT GetProcessorTypeNames(uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT GetEffectiveProcessorType(uint*);
    HRESULT SetEffectiveProcessorType(uint);
    HRESULT GetExecutionStatus(uint*);
    HRESULT SetExecutionStatus(uint);
    HRESULT GetCodeLevel(uint*);
    HRESULT SetCodeLevel(uint);
    HRESULT GetEngineOptions(uint*);
    HRESULT AddEngineOptions(uint);
    HRESULT RemoveEngineOptions(uint);
    HRESULT SetEngineOptions(uint);
    HRESULT GetSystemErrorControl(uint*, uint*);
    HRESULT SetSystemErrorControl(uint, uint);
    HRESULT GetTextMacro(uint, PSTR, uint, uint*);
    HRESULT SetTextMacro(uint, const(char)*);
    HRESULT GetRadix(uint*);
    HRESULT SetRadix(uint);
    HRESULT Evaluate(const(char)*, uint, DEBUG_VALUE*, uint*);
    HRESULT CoerceValue(DEBUG_VALUE*, uint, DEBUG_VALUE*);
    HRESULT CoerceValues(uint, DEBUG_VALUE*, uint*, DEBUG_VALUE*);
    HRESULT Execute(uint, const(char)*, uint);
    HRESULT ExecuteCommandFile(uint, const(char)*, uint);
    HRESULT GetNumberBreakpoints(uint*);
    HRESULT GetBreakpointByIndex(uint, IDebugBreakpoint*);
    HRESULT GetBreakpointById(uint, IDebugBreakpoint*);
    HRESULT GetBreakpointParameters(uint, uint*, uint, DEBUG_BREAKPOINT_PARAMETERS*);
    HRESULT AddBreakpoint(uint, uint, IDebugBreakpoint*);
    HRESULT RemoveBreakpoint(IDebugBreakpoint);
    HRESULT AddExtension(const(char)*, uint, ulong*);
    HRESULT RemoveExtension(ulong);
    HRESULT GetExtensionByPath(const(char)*, ulong*);
    HRESULT CallExtension(ulong, const(char)*, const(char)*);
    HRESULT GetExtensionFunction(ulong, const(char)*, FARPROC*);
    HRESULT GetWindbgExtensionApis32(WINDBG_EXTENSION_APIS32*);
    HRESULT GetWindbgExtensionApis64(WINDBG_EXTENSION_APIS64*);
    HRESULT GetNumberEventFilters(uint*, uint*, uint*);
    HRESULT GetEventFilterText(uint, PSTR, uint, uint*);
    HRESULT GetEventFilterCommand(uint, PSTR, uint, uint*);
    HRESULT SetEventFilterCommand(uint, const(char)*);
    HRESULT GetSpecificFilterParameters(uint, uint, DEBUG_SPECIFIC_FILTER_PARAMETERS*);
    HRESULT SetSpecificFilterParameters(uint, uint, DEBUG_SPECIFIC_FILTER_PARAMETERS*);
    HRESULT GetSpecificFilterArgument(uint, PSTR, uint, uint*);
    HRESULT SetSpecificFilterArgument(uint, const(char)*);
    HRESULT GetExceptionFilterParameters(uint, uint*, uint, DEBUG_EXCEPTION_FILTER_PARAMETERS*);
    HRESULT SetExceptionFilterParameters(uint, DEBUG_EXCEPTION_FILTER_PARAMETERS*);
    HRESULT GetExceptionFilterSecondCommand(uint, PSTR, uint, uint*);
    HRESULT SetExceptionFilterSecondCommand(uint, const(char)*);
    HRESULT WaitForEvent(uint, uint);
    HRESULT GetLastEventInformation(uint*, uint*, uint*, void*, uint, uint*, PSTR, uint, uint*);
    HRESULT GetCurrentTimeDate(uint*);
    HRESULT GetCurrentSystemUpTime(uint*);
    HRESULT GetDumpFormatFlags(uint*);
    HRESULT GetNumberTextReplacements(uint*);
    HRESULT GetTextReplacement(const(char)*, uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT SetTextReplacement(const(char)*, const(char)*);
    HRESULT RemoveTextReplacements();
    HRESULT OutputTextReplacements(uint, uint);
    HRESULT GetAssemblyOptions(uint*);
    HRESULT AddAssemblyOptions(uint);
    HRESULT RemoveAssemblyOptions(uint);
    HRESULT SetAssemblyOptions(uint);
    HRESULT GetExpressionSyntax(uint*);
    HRESULT SetExpressionSyntax(uint);
    HRESULT SetExpressionSyntaxByName(const(char)*);
    HRESULT GetNumberExpressionSyntaxes(uint*);
    HRESULT GetExpressionSyntaxNames(uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT GetNumberEvents(uint*);
    HRESULT GetEventIndexDescription(uint, uint, PSTR, uint, uint*);
    HRESULT GetCurrentEventIndex(uint*);
    HRESULT SetNextEventIndex(uint, uint, uint*);
    HRESULT GetLogFileWide(PWSTR, uint, uint*, BOOL*);
    HRESULT OpenLogFileWide(const(wchar)*, BOOL);
    HRESULT InputWide(PWSTR, uint, uint*);
    HRESULT ReturnInputWide(const(wchar)*);
    HRESULT OutputWide(uint, const(wchar)*);
    HRESULT OutputVaListWide(uint, const(wchar)*, byte*);
    HRESULT ControlledOutputWide(uint, uint, const(wchar)*);
    HRESULT ControlledOutputVaListWide(uint, uint, const(wchar)*, byte*);
    HRESULT OutputPromptWide(uint, const(wchar)*);
    HRESULT OutputPromptVaListWide(uint, const(wchar)*, byte*);
    HRESULT GetPromptTextWide(PWSTR, uint, uint*);
    HRESULT AssembleWide(ulong, const(wchar)*, ulong*);
    HRESULT DisassembleWide(ulong, uint, PWSTR, uint, uint*, ulong*);
    HRESULT GetProcessorTypeNamesWide(uint, PWSTR, uint, uint*, PWSTR, uint, uint*);
    HRESULT GetTextMacroWide(uint, PWSTR, uint, uint*);
    HRESULT SetTextMacroWide(uint, const(wchar)*);
    HRESULT EvaluateWide(const(wchar)*, uint, DEBUG_VALUE*, uint*);
    HRESULT ExecuteWide(uint, const(wchar)*, uint);
    HRESULT ExecuteCommandFileWide(uint, const(wchar)*, uint);
    HRESULT GetBreakpointByIndex2(uint, IDebugBreakpoint2*);
    HRESULT GetBreakpointById2(uint, IDebugBreakpoint2*);
    HRESULT AddBreakpoint2(uint, uint, IDebugBreakpoint2*);
    HRESULT RemoveBreakpoint2(IDebugBreakpoint2);
    HRESULT AddExtensionWide(const(wchar)*, uint, ulong*);
    HRESULT GetExtensionByPathWide(const(wchar)*, ulong*);
    HRESULT CallExtensionWide(ulong, const(wchar)*, const(wchar)*);
    HRESULT GetExtensionFunctionWide(ulong, const(wchar)*, FARPROC*);
    HRESULT GetEventFilterTextWide(uint, PWSTR, uint, uint*);
    HRESULT GetEventFilterCommandWide(uint, PWSTR, uint, uint*);
    HRESULT SetEventFilterCommandWide(uint, const(wchar)*);
    HRESULT GetSpecificFilterArgumentWide(uint, PWSTR, uint, uint*);
    HRESULT SetSpecificFilterArgumentWide(uint, const(wchar)*);
    HRESULT GetExceptionFilterSecondCommandWide(uint, PWSTR, uint, uint*);
    HRESULT SetExceptionFilterSecondCommandWide(uint, const(wchar)*);
    HRESULT GetLastEventInformationWide(uint*, uint*, uint*, void*, uint, uint*, PWSTR, uint, uint*);
    HRESULT GetTextReplacementWide(const(wchar)*, uint, PWSTR, uint, uint*, PWSTR, uint, uint*);
    HRESULT SetTextReplacementWide(const(wchar)*, const(wchar)*);
    HRESULT SetExpressionSyntaxByNameWide(const(wchar)*);
    HRESULT GetExpressionSyntaxNamesWide(uint, PWSTR, uint, uint*, PWSTR, uint, uint*);
    HRESULT GetEventIndexDescriptionWide(uint, uint, PWSTR, uint, uint*);
    HRESULT GetLogFile2(PSTR, uint, uint*, uint*);
    HRESULT OpenLogFile2(const(char)*, uint);
    HRESULT GetLogFile2Wide(PWSTR, uint, uint*, uint*);
    HRESULT OpenLogFile2Wide(const(wchar)*, uint);
    HRESULT GetSystemVersionValues(uint*, uint*, uint*, uint*, uint*);
    HRESULT GetSystemVersionString(uint, PSTR, uint, uint*);
    HRESULT GetSystemVersionStringWide(uint, PWSTR, uint, uint*);
    HRESULT GetContextStackTrace(void*, uint, DEBUG_STACK_FRAME*, uint, void*, uint, uint, uint*);
    HRESULT OutputContextStackTrace(uint, DEBUG_STACK_FRAME*, uint, void*, uint, uint, uint);
    HRESULT GetStoredEventInformation(uint*, uint*, uint*, void*, uint, uint*, void*, uint, uint*);
    HRESULT GetManagedStatus(uint*, uint, PSTR, uint, uint*);
    HRESULT GetManagedStatusWide(uint*, uint, PWSTR, uint, uint*);
    HRESULT ResetManagedStatus(uint);
    HRESULT GetStackTraceEx(ulong, ulong, ulong, DEBUG_STACK_FRAME_EX*, uint, uint*);
    HRESULT OutputStackTraceEx(uint, DEBUG_STACK_FRAME_EX*, uint, uint);
    HRESULT GetContextStackTraceEx(void*, uint, DEBUG_STACK_FRAME_EX*, uint, void*, uint, uint, uint*);
    HRESULT OutputContextStackTraceEx(uint, DEBUG_STACK_FRAME_EX*, uint, void*, uint, uint, uint);
    HRESULT GetBreakpointByGuid(GUID*, IDebugBreakpoint3*);
    HRESULT GetExecutionStatusEx(uint*);
    HRESULT GetSynchronizationStatus(uint*, uint*);
}
enum IID_IDebugControl7 = GUID(0xb86fb3b1, 0x80d4, 0x475b, [0xae, 0xa3, 0xcf, 0x6, 0x53, 0x9c, 0xf6, 0x3a]);
interface IDebugControl7 : IUnknown
{
    HRESULT GetInterrupt();
    HRESULT SetInterrupt(uint);
    HRESULT GetInterruptTimeout(uint*);
    HRESULT SetInterruptTimeout(uint);
    HRESULT GetLogFile(PSTR, uint, uint*, BOOL*);
    HRESULT OpenLogFile(const(char)*, BOOL);
    HRESULT CloseLogFile();
    HRESULT GetLogMask(uint*);
    HRESULT SetLogMask(uint);
    HRESULT Input(PSTR, uint, uint*);
    HRESULT ReturnInput(const(char)*);
    HRESULT Output(uint, const(char)*);
    HRESULT OutputVaList(uint, const(char)*, byte*);
    HRESULT ControlledOutput(uint, uint, const(char)*);
    HRESULT ControlledOutputVaList(uint, uint, const(char)*, byte*);
    HRESULT OutputPrompt(uint, const(char)*);
    HRESULT OutputPromptVaList(uint, const(char)*, byte*);
    HRESULT GetPromptText(PSTR, uint, uint*);
    HRESULT OutputCurrentState(uint, uint);
    HRESULT OutputVersionInformation(uint);
    HRESULT GetNotifyEventHandle(ulong*);
    HRESULT SetNotifyEventHandle(ulong);
    HRESULT Assemble(ulong, const(char)*, ulong*);
    HRESULT Disassemble(ulong, uint, PSTR, uint, uint*, ulong*);
    HRESULT GetDisassembleEffectiveOffset(ulong*);
    HRESULT OutputDisassembly(uint, ulong, uint, ulong*);
    HRESULT OutputDisassemblyLines(uint, uint, uint, ulong, uint, uint*, ulong*, ulong*, ulong*);
    HRESULT GetNearInstruction(ulong, int, ulong*);
    HRESULT GetStackTrace(ulong, ulong, ulong, DEBUG_STACK_FRAME*, uint, uint*);
    HRESULT GetReturnOffset(ulong*);
    HRESULT OutputStackTrace(uint, DEBUG_STACK_FRAME*, uint, uint);
    HRESULT GetDebuggeeType(uint*, uint*);
    HRESULT GetActualProcessorType(uint*);
    HRESULT GetExecutingProcessorType(uint*);
    HRESULT GetNumberPossibleExecutingProcessorTypes(uint*);
    HRESULT GetPossibleExecutingProcessorTypes(uint, uint, uint*);
    HRESULT GetNumberProcessors(uint*);
    HRESULT GetSystemVersion(uint*, uint*, uint*, PSTR, uint, uint*, uint*, PSTR, uint, uint*);
    HRESULT GetPageSize(uint*);
    HRESULT IsPointer64Bit();
    HRESULT ReadBugCheckData(uint*, ulong*, ulong*, ulong*, ulong*);
    HRESULT GetNumberSupportedProcessorTypes(uint*);
    HRESULT GetSupportedProcessorTypes(uint, uint, uint*);
    HRESULT GetProcessorTypeNames(uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT GetEffectiveProcessorType(uint*);
    HRESULT SetEffectiveProcessorType(uint);
    HRESULT GetExecutionStatus(uint*);
    HRESULT SetExecutionStatus(uint);
    HRESULT GetCodeLevel(uint*);
    HRESULT SetCodeLevel(uint);
    HRESULT GetEngineOptions(uint*);
    HRESULT AddEngineOptions(uint);
    HRESULT RemoveEngineOptions(uint);
    HRESULT SetEngineOptions(uint);
    HRESULT GetSystemErrorControl(uint*, uint*);
    HRESULT SetSystemErrorControl(uint, uint);
    HRESULT GetTextMacro(uint, PSTR, uint, uint*);
    HRESULT SetTextMacro(uint, const(char)*);
    HRESULT GetRadix(uint*);
    HRESULT SetRadix(uint);
    HRESULT Evaluate(const(char)*, uint, DEBUG_VALUE*, uint*);
    HRESULT CoerceValue(DEBUG_VALUE*, uint, DEBUG_VALUE*);
    HRESULT CoerceValues(uint, DEBUG_VALUE*, uint*, DEBUG_VALUE*);
    HRESULT Execute(uint, const(char)*, uint);
    HRESULT ExecuteCommandFile(uint, const(char)*, uint);
    HRESULT GetNumberBreakpoints(uint*);
    HRESULT GetBreakpointByIndex(uint, IDebugBreakpoint*);
    HRESULT GetBreakpointById(uint, IDebugBreakpoint*);
    HRESULT GetBreakpointParameters(uint, uint*, uint, DEBUG_BREAKPOINT_PARAMETERS*);
    HRESULT AddBreakpoint(uint, uint, IDebugBreakpoint*);
    HRESULT RemoveBreakpoint(IDebugBreakpoint);
    HRESULT AddExtension(const(char)*, uint, ulong*);
    HRESULT RemoveExtension(ulong);
    HRESULT GetExtensionByPath(const(char)*, ulong*);
    HRESULT CallExtension(ulong, const(char)*, const(char)*);
    HRESULT GetExtensionFunction(ulong, const(char)*, FARPROC*);
    HRESULT GetWindbgExtensionApis32(WINDBG_EXTENSION_APIS32*);
    HRESULT GetWindbgExtensionApis64(WINDBG_EXTENSION_APIS64*);
    HRESULT GetNumberEventFilters(uint*, uint*, uint*);
    HRESULT GetEventFilterText(uint, PSTR, uint, uint*);
    HRESULT GetEventFilterCommand(uint, PSTR, uint, uint*);
    HRESULT SetEventFilterCommand(uint, const(char)*);
    HRESULT GetSpecificFilterParameters(uint, uint, DEBUG_SPECIFIC_FILTER_PARAMETERS*);
    HRESULT SetSpecificFilterParameters(uint, uint, DEBUG_SPECIFIC_FILTER_PARAMETERS*);
    HRESULT GetSpecificFilterArgument(uint, PSTR, uint, uint*);
    HRESULT SetSpecificFilterArgument(uint, const(char)*);
    HRESULT GetExceptionFilterParameters(uint, uint*, uint, DEBUG_EXCEPTION_FILTER_PARAMETERS*);
    HRESULT SetExceptionFilterParameters(uint, DEBUG_EXCEPTION_FILTER_PARAMETERS*);
    HRESULT GetExceptionFilterSecondCommand(uint, PSTR, uint, uint*);
    HRESULT SetExceptionFilterSecondCommand(uint, const(char)*);
    HRESULT WaitForEvent(uint, uint);
    HRESULT GetLastEventInformation(uint*, uint*, uint*, void*, uint, uint*, PSTR, uint, uint*);
    HRESULT GetCurrentTimeDate(uint*);
    HRESULT GetCurrentSystemUpTime(uint*);
    HRESULT GetDumpFormatFlags(uint*);
    HRESULT GetNumberTextReplacements(uint*);
    HRESULT GetTextReplacement(const(char)*, uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT SetTextReplacement(const(char)*, const(char)*);
    HRESULT RemoveTextReplacements();
    HRESULT OutputTextReplacements(uint, uint);
    HRESULT GetAssemblyOptions(uint*);
    HRESULT AddAssemblyOptions(uint);
    HRESULT RemoveAssemblyOptions(uint);
    HRESULT SetAssemblyOptions(uint);
    HRESULT GetExpressionSyntax(uint*);
    HRESULT SetExpressionSyntax(uint);
    HRESULT SetExpressionSyntaxByName(const(char)*);
    HRESULT GetNumberExpressionSyntaxes(uint*);
    HRESULT GetExpressionSyntaxNames(uint, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT GetNumberEvents(uint*);
    HRESULT GetEventIndexDescription(uint, uint, PSTR, uint, uint*);
    HRESULT GetCurrentEventIndex(uint*);
    HRESULT SetNextEventIndex(uint, uint, uint*);
    HRESULT GetLogFileWide(PWSTR, uint, uint*, BOOL*);
    HRESULT OpenLogFileWide(const(wchar)*, BOOL);
    HRESULT InputWide(PWSTR, uint, uint*);
    HRESULT ReturnInputWide(const(wchar)*);
    HRESULT OutputWide(uint, const(wchar)*);
    HRESULT OutputVaListWide(uint, const(wchar)*, byte*);
    HRESULT ControlledOutputWide(uint, uint, const(wchar)*);
    HRESULT ControlledOutputVaListWide(uint, uint, const(wchar)*, byte*);
    HRESULT OutputPromptWide(uint, const(wchar)*);
    HRESULT OutputPromptVaListWide(uint, const(wchar)*, byte*);
    HRESULT GetPromptTextWide(PWSTR, uint, uint*);
    HRESULT AssembleWide(ulong, const(wchar)*, ulong*);
    HRESULT DisassembleWide(ulong, uint, PWSTR, uint, uint*, ulong*);
    HRESULT GetProcessorTypeNamesWide(uint, PWSTR, uint, uint*, PWSTR, uint, uint*);
    HRESULT GetTextMacroWide(uint, PWSTR, uint, uint*);
    HRESULT SetTextMacroWide(uint, const(wchar)*);
    HRESULT EvaluateWide(const(wchar)*, uint, DEBUG_VALUE*, uint*);
    HRESULT ExecuteWide(uint, const(wchar)*, uint);
    HRESULT ExecuteCommandFileWide(uint, const(wchar)*, uint);
    HRESULT GetBreakpointByIndex2(uint, IDebugBreakpoint2*);
    HRESULT GetBreakpointById2(uint, IDebugBreakpoint2*);
    HRESULT AddBreakpoint2(uint, uint, IDebugBreakpoint2*);
    HRESULT RemoveBreakpoint2(IDebugBreakpoint2);
    HRESULT AddExtensionWide(const(wchar)*, uint, ulong*);
    HRESULT GetExtensionByPathWide(const(wchar)*, ulong*);
    HRESULT CallExtensionWide(ulong, const(wchar)*, const(wchar)*);
    HRESULT GetExtensionFunctionWide(ulong, const(wchar)*, FARPROC*);
    HRESULT GetEventFilterTextWide(uint, PWSTR, uint, uint*);
    HRESULT GetEventFilterCommandWide(uint, PWSTR, uint, uint*);
    HRESULT SetEventFilterCommandWide(uint, const(wchar)*);
    HRESULT GetSpecificFilterArgumentWide(uint, PWSTR, uint, uint*);
    HRESULT SetSpecificFilterArgumentWide(uint, const(wchar)*);
    HRESULT GetExceptionFilterSecondCommandWide(uint, PWSTR, uint, uint*);
    HRESULT SetExceptionFilterSecondCommandWide(uint, const(wchar)*);
    HRESULT GetLastEventInformationWide(uint*, uint*, uint*, void*, uint, uint*, PWSTR, uint, uint*);
    HRESULT GetTextReplacementWide(const(wchar)*, uint, PWSTR, uint, uint*, PWSTR, uint, uint*);
    HRESULT SetTextReplacementWide(const(wchar)*, const(wchar)*);
    HRESULT SetExpressionSyntaxByNameWide(const(wchar)*);
    HRESULT GetExpressionSyntaxNamesWide(uint, PWSTR, uint, uint*, PWSTR, uint, uint*);
    HRESULT GetEventIndexDescriptionWide(uint, uint, PWSTR, uint, uint*);
    HRESULT GetLogFile2(PSTR, uint, uint*, uint*);
    HRESULT OpenLogFile2(const(char)*, uint);
    HRESULT GetLogFile2Wide(PWSTR, uint, uint*, uint*);
    HRESULT OpenLogFile2Wide(const(wchar)*, uint);
    HRESULT GetSystemVersionValues(uint*, uint*, uint*, uint*, uint*);
    HRESULT GetSystemVersionString(uint, PSTR, uint, uint*);
    HRESULT GetSystemVersionStringWide(uint, PWSTR, uint, uint*);
    HRESULT GetContextStackTrace(void*, uint, DEBUG_STACK_FRAME*, uint, void*, uint, uint, uint*);
    HRESULT OutputContextStackTrace(uint, DEBUG_STACK_FRAME*, uint, void*, uint, uint, uint);
    HRESULT GetStoredEventInformation(uint*, uint*, uint*, void*, uint, uint*, void*, uint, uint*);
    HRESULT GetManagedStatus(uint*, uint, PSTR, uint, uint*);
    HRESULT GetManagedStatusWide(uint*, uint, PWSTR, uint, uint*);
    HRESULT ResetManagedStatus(uint);
    HRESULT GetStackTraceEx(ulong, ulong, ulong, DEBUG_STACK_FRAME_EX*, uint, uint*);
    HRESULT OutputStackTraceEx(uint, DEBUG_STACK_FRAME_EX*, uint, uint);
    HRESULT GetContextStackTraceEx(void*, uint, DEBUG_STACK_FRAME_EX*, uint, void*, uint, uint, uint*);
    HRESULT OutputContextStackTraceEx(uint, DEBUG_STACK_FRAME_EX*, uint, void*, uint, uint, uint);
    HRESULT GetBreakpointByGuid(GUID*, IDebugBreakpoint3*);
    HRESULT GetExecutionStatusEx(uint*);
    HRESULT GetSynchronizationStatus(uint*, uint*);
    HRESULT GetDebuggeeType2(uint, uint*, uint*);
}
struct DEBUG_PROCESSOR_IDENTIFICATION_ALPHA
{
    uint Type;
    uint Revision;
}
struct DEBUG_PROCESSOR_IDENTIFICATION_AMD64
{
    uint Family;
    uint Model;
    uint Stepping;
    CHAR[16] VendorString;
}
struct DEBUG_PROCESSOR_IDENTIFICATION_IA64
{
    uint Model;
    uint Revision;
    uint Family;
    uint ArchRev;
    CHAR[16] VendorString;
}
struct DEBUG_PROCESSOR_IDENTIFICATION_X86
{
    uint Family;
    uint Model;
    uint Stepping;
    CHAR[16] VendorString;
}
struct DEBUG_PROCESSOR_IDENTIFICATION_ARM
{
    uint Model;
    uint Revision;
    CHAR[16] VendorString;
}
struct DEBUG_PROCESSOR_IDENTIFICATION_ARM64
{
    uint Model;
    uint Revision;
    CHAR[16] VendorString;
}
union DEBUG_PROCESSOR_IDENTIFICATION_ALL
{
    DEBUG_PROCESSOR_IDENTIFICATION_ALPHA Alpha;
    DEBUG_PROCESSOR_IDENTIFICATION_AMD64 Amd64;
    DEBUG_PROCESSOR_IDENTIFICATION_IA64 Ia64;
    DEBUG_PROCESSOR_IDENTIFICATION_X86 X86;
    DEBUG_PROCESSOR_IDENTIFICATION_ARM Arm;
    DEBUG_PROCESSOR_IDENTIFICATION_ARM64 Arm64;
}
enum IID_IDebugDataSpaces = GUID(0x88f7dfab, 0x3ea7, 0x4c3a, [0xae, 0xfb, 0xc4, 0xe8, 0x10, 0x61, 0x73, 0xaa]);
interface IDebugDataSpaces : IUnknown
{
    HRESULT ReadVirtual(ulong, void*, uint, uint*);
    HRESULT WriteVirtual(ulong, void*, uint, uint*);
    HRESULT SearchVirtual(ulong, ulong, void*, uint, uint, ulong*);
    HRESULT ReadVirtualUncached(ulong, void*, uint, uint*);
    HRESULT WriteVirtualUncached(ulong, void*, uint, uint*);
    HRESULT ReadPointersVirtual(uint, ulong, ulong*);
    HRESULT WritePointersVirtual(uint, ulong, ulong*);
    HRESULT ReadPhysical(ulong, void*, uint, uint*);
    HRESULT WritePhysical(ulong, void*, uint, uint*);
    HRESULT ReadControl(uint, ulong, void*, uint, uint*);
    HRESULT WriteControl(uint, ulong, void*, uint, uint*);
    HRESULT ReadIo(uint, uint, uint, ulong, void*, uint, uint*);
    HRESULT WriteIo(uint, uint, uint, ulong, void*, uint, uint*);
    HRESULT ReadMsr(uint, ulong*);
    HRESULT WriteMsr(uint, ulong);
    HRESULT ReadBusData(uint, uint, uint, uint, void*, uint, uint*);
    HRESULT WriteBusData(uint, uint, uint, uint, void*, uint, uint*);
    HRESULT CheckLowMemory();
    HRESULT ReadDebuggerData(uint, void*, uint, uint*);
    HRESULT ReadProcessorSystemData(uint, uint, void*, uint, uint*);
}
struct DEBUG_HANDLE_DATA_BASIC
{
    uint TypeNameSize;
    uint ObjectNameSize;
    uint Attributes;
    uint GrantedAccess;
    uint HandleCount;
    uint PointerCount;
}
enum IID_IDebugDataSpaces2 = GUID(0x7a5e852f, 0x96e9, 0x468f, [0xac, 0x1b, 0xb, 0x3a, 0xdd, 0xc4, 0xa0, 0x49]);
interface IDebugDataSpaces2 : IUnknown
{
    HRESULT ReadVirtual(ulong, void*, uint, uint*);
    HRESULT WriteVirtual(ulong, void*, uint, uint*);
    HRESULT SearchVirtual(ulong, ulong, void*, uint, uint, ulong*);
    HRESULT ReadVirtualUncached(ulong, void*, uint, uint*);
    HRESULT WriteVirtualUncached(ulong, void*, uint, uint*);
    HRESULT ReadPointersVirtual(uint, ulong, ulong*);
    HRESULT WritePointersVirtual(uint, ulong, ulong*);
    HRESULT ReadPhysical(ulong, void*, uint, uint*);
    HRESULT WritePhysical(ulong, void*, uint, uint*);
    HRESULT ReadControl(uint, ulong, void*, uint, uint*);
    HRESULT WriteControl(uint, ulong, void*, uint, uint*);
    HRESULT ReadIo(uint, uint, uint, ulong, void*, uint, uint*);
    HRESULT WriteIo(uint, uint, uint, ulong, void*, uint, uint*);
    HRESULT ReadMsr(uint, ulong*);
    HRESULT WriteMsr(uint, ulong);
    HRESULT ReadBusData(uint, uint, uint, uint, void*, uint, uint*);
    HRESULT WriteBusData(uint, uint, uint, uint, void*, uint, uint*);
    HRESULT CheckLowMemory();
    HRESULT ReadDebuggerData(uint, void*, uint, uint*);
    HRESULT ReadProcessorSystemData(uint, uint, void*, uint, uint*);
    HRESULT VirtualToPhysical(ulong, ulong*);
    HRESULT GetVirtualTranslationPhysicalOffsets(ulong, ulong*, uint, uint*);
    HRESULT ReadHandleData(ulong, uint, void*, uint, uint*);
    HRESULT FillVirtual(ulong, uint, void*, uint, uint*);
    HRESULT FillPhysical(ulong, uint, void*, uint, uint*);
    HRESULT QueryVirtual(ulong, MEMORY_BASIC_INFORMATION64*);
}
enum IID_IDebugDataSpaces3 = GUID(0x23f79d6c, 0x8aaf, 0x4f7c, [0xa6, 0x7, 0x99, 0x95, 0xf5, 0x40, 0x7e, 0x63]);
interface IDebugDataSpaces3 : IUnknown
{
    HRESULT ReadVirtual(ulong, void*, uint, uint*);
    HRESULT WriteVirtual(ulong, void*, uint, uint*);
    HRESULT SearchVirtual(ulong, ulong, void*, uint, uint, ulong*);
    HRESULT ReadVirtualUncached(ulong, void*, uint, uint*);
    HRESULT WriteVirtualUncached(ulong, void*, uint, uint*);
    HRESULT ReadPointersVirtual(uint, ulong, ulong*);
    HRESULT WritePointersVirtual(uint, ulong, ulong*);
    HRESULT ReadPhysical(ulong, void*, uint, uint*);
    HRESULT WritePhysical(ulong, void*, uint, uint*);
    HRESULT ReadControl(uint, ulong, void*, uint, uint*);
    HRESULT WriteControl(uint, ulong, void*, uint, uint*);
    HRESULT ReadIo(uint, uint, uint, ulong, void*, uint, uint*);
    HRESULT WriteIo(uint, uint, uint, ulong, void*, uint, uint*);
    HRESULT ReadMsr(uint, ulong*);
    HRESULT WriteMsr(uint, ulong);
    HRESULT ReadBusData(uint, uint, uint, uint, void*, uint, uint*);
    HRESULT WriteBusData(uint, uint, uint, uint, void*, uint, uint*);
    HRESULT CheckLowMemory();
    HRESULT ReadDebuggerData(uint, void*, uint, uint*);
    HRESULT ReadProcessorSystemData(uint, uint, void*, uint, uint*);
    HRESULT VirtualToPhysical(ulong, ulong*);
    HRESULT GetVirtualTranslationPhysicalOffsets(ulong, ulong*, uint, uint*);
    HRESULT ReadHandleData(ulong, uint, void*, uint, uint*);
    HRESULT FillVirtual(ulong, uint, void*, uint, uint*);
    HRESULT FillPhysical(ulong, uint, void*, uint, uint*);
    HRESULT QueryVirtual(ulong, MEMORY_BASIC_INFORMATION64*);
    HRESULT ReadImageNtHeaders(ulong, IMAGE_NT_HEADERS64*);
    HRESULT ReadTagged(GUID*, uint, void*, uint, uint*);
    HRESULT StartEnumTagged(ulong*);
    HRESULT GetNextTagged(ulong, GUID*, uint*);
    HRESULT EndEnumTagged(ulong);
}
enum IID_IDebugDataSpaces4 = GUID(0xd98ada1f, 0x29e9, 0x4ef5, [0xa6, 0xc0, 0xe5, 0x33, 0x49, 0x88, 0x32, 0x12]);
interface IDebugDataSpaces4 : IUnknown
{
    HRESULT ReadVirtual(ulong, void*, uint, uint*);
    HRESULT WriteVirtual(ulong, void*, uint, uint*);
    HRESULT SearchVirtual(ulong, ulong, void*, uint, uint, ulong*);
    HRESULT ReadVirtualUncached(ulong, void*, uint, uint*);
    HRESULT WriteVirtualUncached(ulong, void*, uint, uint*);
    HRESULT ReadPointersVirtual(uint, ulong, ulong*);
    HRESULT WritePointersVirtual(uint, ulong, ulong*);
    HRESULT ReadPhysical(ulong, void*, uint, uint*);
    HRESULT WritePhysical(ulong, void*, uint, uint*);
    HRESULT ReadControl(uint, ulong, void*, uint, uint*);
    HRESULT WriteControl(uint, ulong, void*, uint, uint*);
    HRESULT ReadIo(uint, uint, uint, ulong, void*, uint, uint*);
    HRESULT WriteIo(uint, uint, uint, ulong, void*, uint, uint*);
    HRESULT ReadMsr(uint, ulong*);
    HRESULT WriteMsr(uint, ulong);
    HRESULT ReadBusData(uint, uint, uint, uint, void*, uint, uint*);
    HRESULT WriteBusData(uint, uint, uint, uint, void*, uint, uint*);
    HRESULT CheckLowMemory();
    HRESULT ReadDebuggerData(uint, void*, uint, uint*);
    HRESULT ReadProcessorSystemData(uint, uint, void*, uint, uint*);
    HRESULT VirtualToPhysical(ulong, ulong*);
    HRESULT GetVirtualTranslationPhysicalOffsets(ulong, ulong*, uint, uint*);
    HRESULT ReadHandleData(ulong, uint, void*, uint, uint*);
    HRESULT FillVirtual(ulong, uint, void*, uint, uint*);
    HRESULT FillPhysical(ulong, uint, void*, uint, uint*);
    HRESULT QueryVirtual(ulong, MEMORY_BASIC_INFORMATION64*);
    HRESULT ReadImageNtHeaders(ulong, IMAGE_NT_HEADERS64*);
    HRESULT ReadTagged(GUID*, uint, void*, uint, uint*);
    HRESULT StartEnumTagged(ulong*);
    HRESULT GetNextTagged(ulong, GUID*, uint*);
    HRESULT EndEnumTagged(ulong);
    HRESULT GetOffsetInformation(uint, uint, ulong, void*, uint, uint*);
    HRESULT GetNextDifferentlyValidOffsetVirtual(ulong, ulong*);
    HRESULT GetValidRegionVirtual(ulong, uint, ulong*, uint*);
    HRESULT SearchVirtual2(ulong, ulong, uint, void*, uint, uint, ulong*);
    HRESULT ReadMultiByteStringVirtual(ulong, uint, PSTR, uint, uint*);
    HRESULT ReadMultiByteStringVirtualWide(ulong, uint, uint, PWSTR, uint, uint*);
    HRESULT ReadUnicodeStringVirtual(ulong, uint, uint, PSTR, uint, uint*);
    HRESULT ReadUnicodeStringVirtualWide(ulong, uint, PWSTR, uint, uint*);
    HRESULT ReadPhysical2(ulong, uint, void*, uint, uint*);
    HRESULT WritePhysical2(ulong, uint, void*, uint, uint*);
}
enum IID_IDebugEventCallbacks = GUID(0x337be28b, 0x5036, 0x4d72, [0xb6, 0xbf, 0xc4, 0x5f, 0xbb, 0x9f, 0x2e, 0xaa]);
interface IDebugEventCallbacks : IUnknown
{
    HRESULT GetInterestMask(uint*);
    HRESULT Breakpoint(IDebugBreakpoint);
    HRESULT Exception(EXCEPTION_RECORD64*, uint);
    HRESULT CreateThread(ulong, ulong, ulong);
    HRESULT ExitThread(uint);
    HRESULT CreateProcessA(ulong, ulong, ulong, uint, const(char)*, const(char)*, uint, uint, ulong, ulong, ulong);
    HRESULT ExitProcess(uint);
    HRESULT LoadModule(ulong, ulong, uint, const(char)*, const(char)*, uint, uint);
    HRESULT UnloadModule(const(char)*, ulong);
    HRESULT SystemError(uint, uint);
    HRESULT SessionStatus(uint);
    HRESULT ChangeDebuggeeState(uint, ulong);
    HRESULT ChangeEngineState(uint, ulong);
    HRESULT ChangeSymbolState(uint, ulong);
}
enum IID_IDebugEventCallbacksWide = GUID(0x690e046, 0x9c23, 0x45ac, [0xa0, 0x4f, 0x98, 0x7a, 0xc2, 0x9a, 0xd0, 0xd3]);
interface IDebugEventCallbacksWide : IUnknown
{
    HRESULT GetInterestMask(uint*);
    HRESULT Breakpoint(IDebugBreakpoint2);
    HRESULT Exception(EXCEPTION_RECORD64*, uint);
    HRESULT CreateThread(ulong, ulong, ulong);
    HRESULT ExitThread(uint);
    HRESULT CreateProcessA(ulong, ulong, ulong, uint, const(wchar)*, const(wchar)*, uint, uint, ulong, ulong, ulong);
    HRESULT ExitProcess(uint);
    HRESULT LoadModule(ulong, ulong, uint, const(wchar)*, const(wchar)*, uint, uint);
    HRESULT UnloadModule(const(wchar)*, ulong);
    HRESULT SystemError(uint, uint);
    HRESULT SessionStatus(uint);
    HRESULT ChangeDebuggeeState(uint, ulong);
    HRESULT ChangeEngineState(uint, ulong);
    HRESULT ChangeSymbolState(uint, ulong);
}
struct DEBUG_EVENT_CONTEXT
{
    uint Size;
    uint ProcessEngineId;
    uint ThreadEngineId;
    uint FrameEngineId;
}
enum IID_IDebugEventContextCallbacks = GUID(0x61a4905b, 0x23f9, 0x4247, [0xb3, 0xc5, 0x53, 0xd0, 0x87, 0x52, 0x9a, 0xb7]);
interface IDebugEventContextCallbacks : IUnknown
{
    HRESULT GetInterestMask(uint*);
    HRESULT Breakpoint(IDebugBreakpoint2, void*, uint);
    HRESULT Exception(EXCEPTION_RECORD64*, uint, void*, uint);
    HRESULT CreateThread(ulong, ulong, ulong, void*, uint);
    HRESULT ExitThread(uint, void*, uint);
    HRESULT CreateProcessA(ulong, ulong, ulong, uint, const(wchar)*, const(wchar)*, uint, uint, ulong, ulong, ulong, void*, uint);
    HRESULT ExitProcess(uint, void*, uint);
    HRESULT LoadModule(ulong, ulong, uint, const(wchar)*, const(wchar)*, uint, uint, void*, uint);
    HRESULT UnloadModule(const(wchar)*, ulong, void*, uint);
    HRESULT SystemError(uint, uint, void*, uint);
    HRESULT SessionStatus(uint);
    HRESULT ChangeDebuggeeState(uint, ulong, void*, uint);
    HRESULT ChangeEngineState(uint, ulong, void*, uint);
    HRESULT ChangeSymbolState(uint, ulong);
}
enum IID_IDebugInputCallbacks = GUID(0x9f50e42c, 0xf136, 0x499e, [0x9a, 0x97, 0x73, 0x3, 0x6c, 0x94, 0xed, 0x2d]);
interface IDebugInputCallbacks : IUnknown
{
    HRESULT StartInput(uint);
    HRESULT EndInput();
}
enum IID_IDebugOutputCallbacks = GUID(0x4bf58045, 0xd654, 0x4c40, [0xb0, 0xaf, 0x68, 0x30, 0x90, 0xf3, 0x56, 0xdc]);
interface IDebugOutputCallbacks : IUnknown
{
    HRESULT Output(uint, const(char)*);
}
enum IID_IDebugOutputCallbacksWide = GUID(0x4c7fd663, 0xc394, 0x4e26, [0x8e, 0xf1, 0x34, 0xad, 0x5e, 0xd3, 0x76, 0x4c]);
interface IDebugOutputCallbacksWide : IUnknown
{
    HRESULT Output(uint, const(wchar)*);
}
enum IID_IDebugOutputCallbacks2 = GUID(0x67721fe9, 0x56d2, 0x4a44, [0xa3, 0x25, 0x2b, 0x65, 0x51, 0x3c, 0xe6, 0xeb]);
interface IDebugOutputCallbacks2 : IUnknown
{
    HRESULT Output(uint, const(char)*);
    HRESULT GetInterestMask(uint*);
    HRESULT Output2(uint, uint, ulong, const(wchar)*);
}
struct DEBUG_REGISTER_DESCRIPTION
{
    uint Type;
    uint Flags;
    uint SubregMaster;
    uint SubregLength;
    ulong SubregMask;
    uint SubregShift;
    uint Reserved0;
}
enum IID_IDebugRegisters = GUID(0xce289126, 0x9e84, 0x45a7, [0x93, 0x7e, 0x67, 0xbb, 0x18, 0x69, 0x14, 0x93]);
interface IDebugRegisters : IUnknown
{
    HRESULT GetNumberRegisters(uint*);
    HRESULT GetDescription(uint, PSTR, uint, uint*, DEBUG_REGISTER_DESCRIPTION*);
    HRESULT GetIndexByName(const(char)*, uint*);
    HRESULT GetValue(uint, DEBUG_VALUE*);
    HRESULT SetValue(uint, DEBUG_VALUE*);
    HRESULT GetValues(uint, uint*, uint, DEBUG_VALUE*);
    HRESULT SetValues(uint, uint*, uint, DEBUG_VALUE*);
    HRESULT OutputRegisters(uint, uint);
    HRESULT GetInstructionOffset(ulong*);
    HRESULT GetStackOffset(ulong*);
    HRESULT GetFrameOffset(ulong*);
}
enum IID_IDebugRegisters2 = GUID(0x1656afa9, 0x19c6, 0x4e3a, [0x97, 0xe7, 0x5d, 0xc9, 0x16, 0xc, 0xf9, 0xc4]);
interface IDebugRegisters2 : IUnknown
{
    HRESULT GetNumberRegisters(uint*);
    HRESULT GetDescription(uint, PSTR, uint, uint*, DEBUG_REGISTER_DESCRIPTION*);
    HRESULT GetIndexByName(const(char)*, uint*);
    HRESULT GetValue(uint, DEBUG_VALUE*);
    HRESULT SetValue(uint, DEBUG_VALUE*);
    HRESULT GetValues(uint, uint*, uint, DEBUG_VALUE*);
    HRESULT SetValues(uint, uint*, uint, DEBUG_VALUE*);
    HRESULT OutputRegisters(uint, uint);
    HRESULT GetInstructionOffset(ulong*);
    HRESULT GetStackOffset(ulong*);
    HRESULT GetFrameOffset(ulong*);
    HRESULT GetDescriptionWide(uint, PWSTR, uint, uint*, DEBUG_REGISTER_DESCRIPTION*);
    HRESULT GetIndexByNameWide(const(wchar)*, uint*);
    HRESULT GetNumberPseudoRegisters(uint*);
    HRESULT GetPseudoDescription(uint, PSTR, uint, uint*, ulong*, uint*);
    HRESULT GetPseudoDescriptionWide(uint, PWSTR, uint, uint*, ulong*, uint*);
    HRESULT GetPseudoIndexByName(const(char)*, uint*);
    HRESULT GetPseudoIndexByNameWide(const(wchar)*, uint*);
    HRESULT GetPseudoValues(uint, uint, uint*, uint, DEBUG_VALUE*);
    HRESULT SetPseudoValues(uint, uint, uint*, uint, DEBUG_VALUE*);
    HRESULT GetValues2(uint, uint, uint*, uint, DEBUG_VALUE*);
    HRESULT SetValues2(uint, uint, uint*, uint, DEBUG_VALUE*);
    HRESULT OutputRegisters2(uint, uint, uint);
    HRESULT GetInstructionOffset2(uint, ulong*);
    HRESULT GetStackOffset2(uint, ulong*);
    HRESULT GetFrameOffset2(uint, ulong*);
}
struct DEBUG_SYMBOL_PARAMETERS
{
    ulong Module;
    uint TypeId;
    uint ParentSymbol;
    uint SubElements;
    uint Flags;
    ulong Reserved;
}
enum IID_IDebugSymbolGroup = GUID(0xf2528316, 0xf1a, 0x4431, [0xae, 0xed, 0x11, 0xd0, 0x96, 0xe1, 0xe2, 0xab]);
interface IDebugSymbolGroup : IUnknown
{
    HRESULT GetNumberSymbols(uint*);
    HRESULT AddSymbol(const(char)*, uint*);
    HRESULT RemoveSymbolByName(const(char)*);
    HRESULT RemoveSymbolByIndex(uint);
    HRESULT GetSymbolName(uint, PSTR, uint, uint*);
    HRESULT GetSymbolParameters(uint, uint, DEBUG_SYMBOL_PARAMETERS*);
    HRESULT ExpandSymbol(uint, BOOL);
    HRESULT OutputSymbols(uint, uint, uint, uint);
    HRESULT WriteSymbol(uint, const(char)*);
    HRESULT OutputAsType(uint, const(char)*);
}
struct DEBUG_SYMBOL_ENTRY
{
    ulong ModuleBase;
    ulong Offset;
    ulong Id;
    ulong Arg64;
    uint Size;
    uint Flags;
    uint TypeId;
    uint NameSize;
    uint Token;
    uint Tag;
    uint Arg32;
    uint Reserved;
}
enum IID_IDebugSymbolGroup2 = GUID(0x6a7ccc5f, 0xfb5e, 0x4dcc, [0xb4, 0x1c, 0x6c, 0x20, 0x30, 0x7b, 0xcc, 0xc7]);
interface IDebugSymbolGroup2 : IUnknown
{
    HRESULT GetNumberSymbols(uint*);
    HRESULT AddSymbol(const(char)*, uint*);
    HRESULT RemoveSymbolByName(const(char)*);
    HRESULT RemoveSymbolByIndex(uint);
    HRESULT GetSymbolName(uint, PSTR, uint, uint*);
    HRESULT GetSymbolParameters(uint, uint, DEBUG_SYMBOL_PARAMETERS*);
    HRESULT ExpandSymbol(uint, BOOL);
    HRESULT OutputSymbols(uint, uint, uint, uint);
    HRESULT WriteSymbol(uint, const(char)*);
    HRESULT OutputAsType(uint, const(char)*);
    HRESULT AddSymbolWide(const(wchar)*, uint*);
    HRESULT RemoveSymbolByNameWide(const(wchar)*);
    HRESULT GetSymbolNameWide(uint, PWSTR, uint, uint*);
    HRESULT WriteSymbolWide(uint, const(wchar)*);
    HRESULT OutputAsTypeWide(uint, const(wchar)*);
    HRESULT GetSymbolTypeName(uint, PSTR, uint, uint*);
    HRESULT GetSymbolTypeNameWide(uint, PWSTR, uint, uint*);
    HRESULT GetSymbolSize(uint, uint*);
    HRESULT GetSymbolOffset(uint, ulong*);
    HRESULT GetSymbolRegister(uint, uint*);
    HRESULT GetSymbolValueText(uint, PSTR, uint, uint*);
    HRESULT GetSymbolValueTextWide(uint, PWSTR, uint, uint*);
    HRESULT GetSymbolEntryInformation(uint, DEBUG_SYMBOL_ENTRY*);
}
struct DEBUG_MODULE_PARAMETERS
{
    ulong Base;
    uint Size;
    uint TimeDateStamp;
    uint Checksum;
    uint Flags;
    uint SymbolType;
    uint ImageNameSize;
    uint ModuleNameSize;
    uint LoadedImageNameSize;
    uint SymbolFileNameSize;
    uint MappedImageNameSize;
    ulong[2] Reserved;
}
enum IID_IDebugSymbols = GUID(0x8c31e98c, 0x983a, 0x48a5, [0x90, 0x16, 0x6f, 0xe5, 0xd6, 0x67, 0xa9, 0x50]);
interface IDebugSymbols : IUnknown
{
    HRESULT GetSymbolOptions(uint*);
    HRESULT AddSymbolOptions(uint);
    HRESULT RemoveSymbolOptions(uint);
    HRESULT SetSymbolOptions(uint);
    HRESULT GetNameByOffset(ulong, PSTR, uint, uint*, ulong*);
    HRESULT GetOffsetByName(const(char)*, ulong*);
    HRESULT GetNearNameByOffset(ulong, int, PSTR, uint, uint*, ulong*);
    HRESULT GetLineByOffset(ulong, uint*, PSTR, uint, uint*, ulong*);
    HRESULT GetOffsetByLine(uint, const(char)*, ulong*);
    HRESULT GetNumberModules(uint*, uint*);
    HRESULT GetModuleByIndex(uint, ulong*);
    HRESULT GetModuleByModuleName(const(char)*, uint, uint*, ulong*);
    HRESULT GetModuleByOffset(ulong, uint, uint*, ulong*);
    HRESULT GetModuleNames(uint, ulong, PSTR, uint, uint*, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT GetModuleParameters(uint, ulong*, uint, DEBUG_MODULE_PARAMETERS*);
    HRESULT GetSymbolModule(const(char)*, ulong*);
    HRESULT GetTypeName(ulong, uint, PSTR, uint, uint*);
    HRESULT GetTypeId(ulong, const(char)*, uint*);
    HRESULT GetTypeSize(ulong, uint, uint*);
    HRESULT GetFieldOffset(ulong, uint, const(char)*, uint*);
    HRESULT GetSymbolTypeId(const(char)*, uint*, ulong*);
    HRESULT GetOffsetTypeId(ulong, uint*, ulong*);
    HRESULT ReadTypedDataVirtual(ulong, ulong, uint, void*, uint, uint*);
    HRESULT WriteTypedDataVirtual(ulong, ulong, uint, void*, uint, uint*);
    HRESULT OutputTypedDataVirtual(uint, ulong, ulong, uint, uint);
    HRESULT ReadTypedDataPhysical(ulong, ulong, uint, void*, uint, uint*);
    HRESULT WriteTypedDataPhysical(ulong, ulong, uint, void*, uint, uint*);
    HRESULT OutputTypedDataPhysical(uint, ulong, ulong, uint, uint);
    HRESULT GetScope(ulong*, DEBUG_STACK_FRAME*, void*, uint);
    HRESULT SetScope(ulong, DEBUG_STACK_FRAME*, void*, uint);
    HRESULT ResetScope();
    HRESULT GetScopeSymbolGroup(uint, IDebugSymbolGroup, IDebugSymbolGroup*);
    HRESULT CreateSymbolGroup(IDebugSymbolGroup*);
    HRESULT StartSymbolMatch(const(char)*, ulong*);
    HRESULT GetNextSymbolMatch(ulong, PSTR, uint, uint*, ulong*);
    HRESULT EndSymbolMatch(ulong);
    HRESULT Reload(const(char)*);
    HRESULT GetSymbolPath(PSTR, uint, uint*);
    HRESULT SetSymbolPath(const(char)*);
    HRESULT AppendSymbolPath(const(char)*);
    HRESULT GetImagePath(PSTR, uint, uint*);
    HRESULT SetImagePath(const(char)*);
    HRESULT AppendImagePath(const(char)*);
    HRESULT GetSourcePath(PSTR, uint, uint*);
    HRESULT GetSourcePathElement(uint, PSTR, uint, uint*);
    HRESULT SetSourcePath(const(char)*);
    HRESULT AppendSourcePath(const(char)*);
    HRESULT FindSourceFile(uint, const(char)*, uint, uint*, PSTR, uint, uint*);
    HRESULT GetSourceFileLineOffsets(const(char)*, ulong*, uint, uint*);
}
enum IID_IDebugSymbols2 = GUID(0x3a707211, 0xafdd, 0x4495, [0xad, 0x4f, 0x56, 0xfe, 0xcd, 0xf8, 0x16, 0x3f]);
interface IDebugSymbols2 : IUnknown
{
    HRESULT GetSymbolOptions(uint*);
    HRESULT AddSymbolOptions(uint);
    HRESULT RemoveSymbolOptions(uint);
    HRESULT SetSymbolOptions(uint);
    HRESULT GetNameByOffset(ulong, PSTR, uint, uint*, ulong*);
    HRESULT GetOffsetByName(const(char)*, ulong*);
    HRESULT GetNearNameByOffset(ulong, int, PSTR, uint, uint*, ulong*);
    HRESULT GetLineByOffset(ulong, uint*, PSTR, uint, uint*, ulong*);
    HRESULT GetOffsetByLine(uint, const(char)*, ulong*);
    HRESULT GetNumberModules(uint*, uint*);
    HRESULT GetModuleByIndex(uint, ulong*);
    HRESULT GetModuleByModuleName(const(char)*, uint, uint*, ulong*);
    HRESULT GetModuleByOffset(ulong, uint, uint*, ulong*);
    HRESULT GetModuleNames(uint, ulong, PSTR, uint, uint*, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT GetModuleParameters(uint, ulong*, uint, DEBUG_MODULE_PARAMETERS*);
    HRESULT GetSymbolModule(const(char)*, ulong*);
    HRESULT GetTypeName(ulong, uint, PSTR, uint, uint*);
    HRESULT GetTypeId(ulong, const(char)*, uint*);
    HRESULT GetTypeSize(ulong, uint, uint*);
    HRESULT GetFieldOffset(ulong, uint, const(char)*, uint*);
    HRESULT GetSymbolTypeId(const(char)*, uint*, ulong*);
    HRESULT GetOffsetTypeId(ulong, uint*, ulong*);
    HRESULT ReadTypedDataVirtual(ulong, ulong, uint, void*, uint, uint*);
    HRESULT WriteTypedDataVirtual(ulong, ulong, uint, void*, uint, uint*);
    HRESULT OutputTypedDataVirtual(uint, ulong, ulong, uint, uint);
    HRESULT ReadTypedDataPhysical(ulong, ulong, uint, void*, uint, uint*);
    HRESULT WriteTypedDataPhysical(ulong, ulong, uint, void*, uint, uint*);
    HRESULT OutputTypedDataPhysical(uint, ulong, ulong, uint, uint);
    HRESULT GetScope(ulong*, DEBUG_STACK_FRAME*, void*, uint);
    HRESULT SetScope(ulong, DEBUG_STACK_FRAME*, void*, uint);
    HRESULT ResetScope();
    HRESULT GetScopeSymbolGroup(uint, IDebugSymbolGroup, IDebugSymbolGroup*);
    HRESULT CreateSymbolGroup(IDebugSymbolGroup*);
    HRESULT StartSymbolMatch(const(char)*, ulong*);
    HRESULT GetNextSymbolMatch(ulong, PSTR, uint, uint*, ulong*);
    HRESULT EndSymbolMatch(ulong);
    HRESULT Reload(const(char)*);
    HRESULT GetSymbolPath(PSTR, uint, uint*);
    HRESULT SetSymbolPath(const(char)*);
    HRESULT AppendSymbolPath(const(char)*);
    HRESULT GetImagePath(PSTR, uint, uint*);
    HRESULT SetImagePath(const(char)*);
    HRESULT AppendImagePath(const(char)*);
    HRESULT GetSourcePath(PSTR, uint, uint*);
    HRESULT GetSourcePathElement(uint, PSTR, uint, uint*);
    HRESULT SetSourcePath(const(char)*);
    HRESULT AppendSourcePath(const(char)*);
    HRESULT FindSourceFile(uint, const(char)*, uint, uint*, PSTR, uint, uint*);
    HRESULT GetSourceFileLineOffsets(const(char)*, ulong*, uint, uint*);
    HRESULT GetModuleVersionInformation(uint, ulong, const(char)*, void*, uint, uint*);
    HRESULT GetModuleNameString(uint, uint, ulong, PSTR, uint, uint*);
    HRESULT GetConstantName(ulong, uint, ulong, PSTR, uint, uint*);
    HRESULT GetFieldName(ulong, uint, uint, PSTR, uint, uint*);
    HRESULT GetTypeOptions(uint*);
    HRESULT AddTypeOptions(uint);
    HRESULT RemoveTypeOptions(uint);
    HRESULT SetTypeOptions(uint);
}
struct DEBUG_MODULE_AND_ID
{
    ulong ModuleBase;
    ulong Id;
}
struct DEBUG_SYMBOL_SOURCE_ENTRY
{
    ulong ModuleBase;
    ulong Offset;
    ulong FileNameId;
    ulong EngineInternal;
    uint Size;
    uint Flags;
    uint FileNameSize;
    uint StartLine;
    uint EndLine;
    uint StartColumn;
    uint EndColumn;
    uint Reserved;
}
enum IID_IDebugSymbols3 = GUID(0xf02fbecc, 0x50ac, 0x4f36, [0x9a, 0xd9, 0xc9, 0x75, 0xe8, 0xf3, 0x2f, 0xf8]);
interface IDebugSymbols3 : IUnknown
{
    HRESULT GetSymbolOptions(uint*);
    HRESULT AddSymbolOptions(uint);
    HRESULT RemoveSymbolOptions(uint);
    HRESULT SetSymbolOptions(uint);
    HRESULT GetNameByOffset(ulong, PSTR, uint, uint*, ulong*);
    HRESULT GetOffsetByName(const(char)*, ulong*);
    HRESULT GetNearNameByOffset(ulong, int, PSTR, uint, uint*, ulong*);
    HRESULT GetLineByOffset(ulong, uint*, PSTR, uint, uint*, ulong*);
    HRESULT GetOffsetByLine(uint, const(char)*, ulong*);
    HRESULT GetNumberModules(uint*, uint*);
    HRESULT GetModuleByIndex(uint, ulong*);
    HRESULT GetModuleByModuleName(const(char)*, uint, uint*, ulong*);
    HRESULT GetModuleByOffset(ulong, uint, uint*, ulong*);
    HRESULT GetModuleNames(uint, ulong, PSTR, uint, uint*, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT GetModuleParameters(uint, ulong*, uint, DEBUG_MODULE_PARAMETERS*);
    HRESULT GetSymbolModule(const(char)*, ulong*);
    HRESULT GetTypeName(ulong, uint, PSTR, uint, uint*);
    HRESULT GetTypeId(ulong, const(char)*, uint*);
    HRESULT GetTypeSize(ulong, uint, uint*);
    HRESULT GetFieldOffset(ulong, uint, const(char)*, uint*);
    HRESULT GetSymbolTypeId(const(char)*, uint*, ulong*);
    HRESULT GetOffsetTypeId(ulong, uint*, ulong*);
    HRESULT ReadTypedDataVirtual(ulong, ulong, uint, void*, uint, uint*);
    HRESULT WriteTypedDataVirtual(ulong, ulong, uint, void*, uint, uint*);
    HRESULT OutputTypedDataVirtual(uint, ulong, ulong, uint, uint);
    HRESULT ReadTypedDataPhysical(ulong, ulong, uint, void*, uint, uint*);
    HRESULT WriteTypedDataPhysical(ulong, ulong, uint, void*, uint, uint*);
    HRESULT OutputTypedDataPhysical(uint, ulong, ulong, uint, uint);
    HRESULT GetScope(ulong*, DEBUG_STACK_FRAME*, void*, uint);
    HRESULT SetScope(ulong, DEBUG_STACK_FRAME*, void*, uint);
    HRESULT ResetScope();
    HRESULT GetScopeSymbolGroup(uint, IDebugSymbolGroup, IDebugSymbolGroup*);
    HRESULT CreateSymbolGroup(IDebugSymbolGroup*);
    HRESULT StartSymbolMatch(const(char)*, ulong*);
    HRESULT GetNextSymbolMatch(ulong, PSTR, uint, uint*, ulong*);
    HRESULT EndSymbolMatch(ulong);
    HRESULT Reload(const(char)*);
    HRESULT GetSymbolPath(PSTR, uint, uint*);
    HRESULT SetSymbolPath(const(char)*);
    HRESULT AppendSymbolPath(const(char)*);
    HRESULT GetImagePath(PSTR, uint, uint*);
    HRESULT SetImagePath(const(char)*);
    HRESULT AppendImagePath(const(char)*);
    HRESULT GetSourcePath(PSTR, uint, uint*);
    HRESULT GetSourcePathElement(uint, PSTR, uint, uint*);
    HRESULT SetSourcePath(const(char)*);
    HRESULT AppendSourcePath(const(char)*);
    HRESULT FindSourceFile(uint, const(char)*, uint, uint*, PSTR, uint, uint*);
    HRESULT GetSourceFileLineOffsets(const(char)*, ulong*, uint, uint*);
    HRESULT GetModuleVersionInformation(uint, ulong, const(char)*, void*, uint, uint*);
    HRESULT GetModuleNameString(uint, uint, ulong, PSTR, uint, uint*);
    HRESULT GetConstantName(ulong, uint, ulong, PSTR, uint, uint*);
    HRESULT GetFieldName(ulong, uint, uint, PSTR, uint, uint*);
    HRESULT GetTypeOptions(uint*);
    HRESULT AddTypeOptions(uint);
    HRESULT RemoveTypeOptions(uint);
    HRESULT SetTypeOptions(uint);
    HRESULT GetNameByOffsetWide(ulong, PWSTR, uint, uint*, ulong*);
    HRESULT GetOffsetByNameWide(const(wchar)*, ulong*);
    HRESULT GetNearNameByOffsetWide(ulong, int, PWSTR, uint, uint*, ulong*);
    HRESULT GetLineByOffsetWide(ulong, uint*, PWSTR, uint, uint*, ulong*);
    HRESULT GetOffsetByLineWide(uint, const(wchar)*, ulong*);
    HRESULT GetModuleByModuleNameWide(const(wchar)*, uint, uint*, ulong*);
    HRESULT GetSymbolModuleWide(const(wchar)*, ulong*);
    HRESULT GetTypeNameWide(ulong, uint, PWSTR, uint, uint*);
    HRESULT GetTypeIdWide(ulong, const(wchar)*, uint*);
    HRESULT GetFieldOffsetWide(ulong, uint, const(wchar)*, uint*);
    HRESULT GetSymbolTypeIdWide(const(wchar)*, uint*, ulong*);
    HRESULT GetScopeSymbolGroup2(uint, IDebugSymbolGroup2, IDebugSymbolGroup2*);
    HRESULT CreateSymbolGroup2(IDebugSymbolGroup2*);
    HRESULT StartSymbolMatchWide(const(wchar)*, ulong*);
    HRESULT GetNextSymbolMatchWide(ulong, PWSTR, uint, uint*, ulong*);
    HRESULT ReloadWide(const(wchar)*);
    HRESULT GetSymbolPathWide(PWSTR, uint, uint*);
    HRESULT SetSymbolPathWide(const(wchar)*);
    HRESULT AppendSymbolPathWide(const(wchar)*);
    HRESULT GetImagePathWide(PWSTR, uint, uint*);
    HRESULT SetImagePathWide(const(wchar)*);
    HRESULT AppendImagePathWide(const(wchar)*);
    HRESULT GetSourcePathWide(PWSTR, uint, uint*);
    HRESULT GetSourcePathElementWide(uint, PWSTR, uint, uint*);
    HRESULT SetSourcePathWide(const(wchar)*);
    HRESULT AppendSourcePathWide(const(wchar)*);
    HRESULT FindSourceFileWide(uint, const(wchar)*, uint, uint*, PWSTR, uint, uint*);
    HRESULT GetSourceFileLineOffsetsWide(const(wchar)*, ulong*, uint, uint*);
    HRESULT GetModuleVersionInformationWide(uint, ulong, const(wchar)*, void*, uint, uint*);
    HRESULT GetModuleNameStringWide(uint, uint, ulong, PWSTR, uint, uint*);
    HRESULT GetConstantNameWide(ulong, uint, ulong, PWSTR, uint, uint*);
    HRESULT GetFieldNameWide(ulong, uint, uint, PWSTR, uint, uint*);
    HRESULT IsManagedModule(uint, ulong);
    HRESULT GetModuleByModuleName2(const(char)*, uint, uint, uint*, ulong*);
    HRESULT GetModuleByModuleName2Wide(const(wchar)*, uint, uint, uint*, ulong*);
    HRESULT GetModuleByOffset2(ulong, uint, uint, uint*, ulong*);
    HRESULT AddSyntheticModule(ulong, uint, const(char)*, const(char)*, uint);
    HRESULT AddSyntheticModuleWide(ulong, uint, const(wchar)*, const(wchar)*, uint);
    HRESULT RemoveSyntheticModule(ulong);
    HRESULT GetCurrentScopeFrameIndex(uint*);
    HRESULT SetScopeFrameByIndex(uint);
    HRESULT SetScopeFromJitDebugInfo(uint, ulong);
    HRESULT SetScopeFromStoredEvent();
    HRESULT OutputSymbolByOffset(uint, uint, ulong);
    HRESULT GetFunctionEntryByOffset(ulong, uint, void*, uint, uint*);
    HRESULT GetFieldTypeAndOffset(ulong, uint, const(char)*, uint*, uint*);
    HRESULT GetFieldTypeAndOffsetWide(ulong, uint, const(wchar)*, uint*, uint*);
    HRESULT AddSyntheticSymbol(ulong, uint, const(char)*, uint, DEBUG_MODULE_AND_ID*);
    HRESULT AddSyntheticSymbolWide(ulong, uint, const(wchar)*, uint, DEBUG_MODULE_AND_ID*);
    HRESULT RemoveSyntheticSymbol(DEBUG_MODULE_AND_ID*);
    HRESULT GetSymbolEntriesByOffset(ulong, uint, DEBUG_MODULE_AND_ID*, ulong*, uint, uint*);
    HRESULT GetSymbolEntriesByName(const(char)*, uint, DEBUG_MODULE_AND_ID*, uint, uint*);
    HRESULT GetSymbolEntriesByNameWide(const(wchar)*, uint, DEBUG_MODULE_AND_ID*, uint, uint*);
    HRESULT GetSymbolEntryByToken(ulong, uint, DEBUG_MODULE_AND_ID*);
    HRESULT GetSymbolEntryInformation(DEBUG_MODULE_AND_ID*, DEBUG_SYMBOL_ENTRY*);
    HRESULT GetSymbolEntryString(DEBUG_MODULE_AND_ID*, uint, PSTR, uint, uint*);
    HRESULT GetSymbolEntryStringWide(DEBUG_MODULE_AND_ID*, uint, PWSTR, uint, uint*);
    HRESULT GetSymbolEntryOffsetRegions(DEBUG_MODULE_AND_ID*, uint, DEBUG_OFFSET_REGION*, uint, uint*);
    HRESULT GetSymbolEntryBySymbolEntry(DEBUG_MODULE_AND_ID*, uint, DEBUG_MODULE_AND_ID*);
    HRESULT GetSourceEntriesByOffset(ulong, uint, DEBUG_SYMBOL_SOURCE_ENTRY*, uint, uint*);
    HRESULT GetSourceEntriesByLine(uint, const(char)*, uint, DEBUG_SYMBOL_SOURCE_ENTRY*, uint, uint*);
    HRESULT GetSourceEntriesByLineWide(uint, const(wchar)*, uint, DEBUG_SYMBOL_SOURCE_ENTRY*, uint, uint*);
    HRESULT GetSourceEntryString(DEBUG_SYMBOL_SOURCE_ENTRY*, uint, PSTR, uint, uint*);
    HRESULT GetSourceEntryStringWide(DEBUG_SYMBOL_SOURCE_ENTRY*, uint, PWSTR, uint, uint*);
    HRESULT GetSourceEntryOffsetRegions(DEBUG_SYMBOL_SOURCE_ENTRY*, uint, DEBUG_OFFSET_REGION*, uint, uint*);
    HRESULT GetSourceEntryBySourceEntry(DEBUG_SYMBOL_SOURCE_ENTRY*, uint, DEBUG_SYMBOL_SOURCE_ENTRY*);
}
enum IID_IDebugSymbols4 = GUID(0xe391bbd8, 0x9d8c, 0x4418, [0x84, 0xb, 0xc0, 0x6, 0x59, 0x2a, 0x17, 0x52]);
interface IDebugSymbols4 : IUnknown
{
    HRESULT GetSymbolOptions(uint*);
    HRESULT AddSymbolOptions(uint);
    HRESULT RemoveSymbolOptions(uint);
    HRESULT SetSymbolOptions(uint);
    HRESULT GetNameByOffset(ulong, PSTR, uint, uint*, ulong*);
    HRESULT GetOffsetByName(const(char)*, ulong*);
    HRESULT GetNearNameByOffset(ulong, int, PSTR, uint, uint*, ulong*);
    HRESULT GetLineByOffset(ulong, uint*, PSTR, uint, uint*, ulong*);
    HRESULT GetOffsetByLine(uint, const(char)*, ulong*);
    HRESULT GetNumberModules(uint*, uint*);
    HRESULT GetModuleByIndex(uint, ulong*);
    HRESULT GetModuleByModuleName(const(char)*, uint, uint*, ulong*);
    HRESULT GetModuleByOffset(ulong, uint, uint*, ulong*);
    HRESULT GetModuleNames(uint, ulong, PSTR, uint, uint*, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT GetModuleParameters(uint, ulong*, uint, DEBUG_MODULE_PARAMETERS*);
    HRESULT GetSymbolModule(const(char)*, ulong*);
    HRESULT GetTypeName(ulong, uint, PSTR, uint, uint*);
    HRESULT GetTypeId(ulong, const(char)*, uint*);
    HRESULT GetTypeSize(ulong, uint, uint*);
    HRESULT GetFieldOffset(ulong, uint, const(char)*, uint*);
    HRESULT GetSymbolTypeId(const(char)*, uint*, ulong*);
    HRESULT GetOffsetTypeId(ulong, uint*, ulong*);
    HRESULT ReadTypedDataVirtual(ulong, ulong, uint, void*, uint, uint*);
    HRESULT WriteTypedDataVirtual(ulong, ulong, uint, void*, uint, uint*);
    HRESULT OutputTypedDataVirtual(uint, ulong, ulong, uint, uint);
    HRESULT ReadTypedDataPhysical(ulong, ulong, uint, void*, uint, uint*);
    HRESULT WriteTypedDataPhysical(ulong, ulong, uint, void*, uint, uint*);
    HRESULT OutputTypedDataPhysical(uint, ulong, ulong, uint, uint);
    HRESULT GetScope(ulong*, DEBUG_STACK_FRAME*, void*, uint);
    HRESULT SetScope(ulong, DEBUG_STACK_FRAME*, void*, uint);
    HRESULT ResetScope();
    HRESULT GetScopeSymbolGroup(uint, IDebugSymbolGroup, IDebugSymbolGroup*);
    HRESULT CreateSymbolGroup(IDebugSymbolGroup*);
    HRESULT StartSymbolMatch(const(char)*, ulong*);
    HRESULT GetNextSymbolMatch(ulong, PSTR, uint, uint*, ulong*);
    HRESULT EndSymbolMatch(ulong);
    HRESULT Reload(const(char)*);
    HRESULT GetSymbolPath(PSTR, uint, uint*);
    HRESULT SetSymbolPath(const(char)*);
    HRESULT AppendSymbolPath(const(char)*);
    HRESULT GetImagePath(PSTR, uint, uint*);
    HRESULT SetImagePath(const(char)*);
    HRESULT AppendImagePath(const(char)*);
    HRESULT GetSourcePath(PSTR, uint, uint*);
    HRESULT GetSourcePathElement(uint, PSTR, uint, uint*);
    HRESULT SetSourcePath(const(char)*);
    HRESULT AppendSourcePath(const(char)*);
    HRESULT FindSourceFile(uint, const(char)*, uint, uint*, PSTR, uint, uint*);
    HRESULT GetSourceFileLineOffsets(const(char)*, ulong*, uint, uint*);
    HRESULT GetModuleVersionInformation(uint, ulong, const(char)*, void*, uint, uint*);
    HRESULT GetModuleNameString(uint, uint, ulong, PSTR, uint, uint*);
    HRESULT GetConstantName(ulong, uint, ulong, PSTR, uint, uint*);
    HRESULT GetFieldName(ulong, uint, uint, PSTR, uint, uint*);
    HRESULT GetTypeOptions(uint*);
    HRESULT AddTypeOptions(uint);
    HRESULT RemoveTypeOptions(uint);
    HRESULT SetTypeOptions(uint);
    HRESULT GetNameByOffsetWide(ulong, PWSTR, uint, uint*, ulong*);
    HRESULT GetOffsetByNameWide(const(wchar)*, ulong*);
    HRESULT GetNearNameByOffsetWide(ulong, int, PWSTR, uint, uint*, ulong*);
    HRESULT GetLineByOffsetWide(ulong, uint*, PWSTR, uint, uint*, ulong*);
    HRESULT GetOffsetByLineWide(uint, const(wchar)*, ulong*);
    HRESULT GetModuleByModuleNameWide(const(wchar)*, uint, uint*, ulong*);
    HRESULT GetSymbolModuleWide(const(wchar)*, ulong*);
    HRESULT GetTypeNameWide(ulong, uint, PWSTR, uint, uint*);
    HRESULT GetTypeIdWide(ulong, const(wchar)*, uint*);
    HRESULT GetFieldOffsetWide(ulong, uint, const(wchar)*, uint*);
    HRESULT GetSymbolTypeIdWide(const(wchar)*, uint*, ulong*);
    HRESULT GetScopeSymbolGroup2(uint, IDebugSymbolGroup2, IDebugSymbolGroup2*);
    HRESULT CreateSymbolGroup2(IDebugSymbolGroup2*);
    HRESULT StartSymbolMatchWide(const(wchar)*, ulong*);
    HRESULT GetNextSymbolMatchWide(ulong, PWSTR, uint, uint*, ulong*);
    HRESULT ReloadWide(const(wchar)*);
    HRESULT GetSymbolPathWide(PWSTR, uint, uint*);
    HRESULT SetSymbolPathWide(const(wchar)*);
    HRESULT AppendSymbolPathWide(const(wchar)*);
    HRESULT GetImagePathWide(PWSTR, uint, uint*);
    HRESULT SetImagePathWide(const(wchar)*);
    HRESULT AppendImagePathWide(const(wchar)*);
    HRESULT GetSourcePathWide(PWSTR, uint, uint*);
    HRESULT GetSourcePathElementWide(uint, PWSTR, uint, uint*);
    HRESULT SetSourcePathWide(const(wchar)*);
    HRESULT AppendSourcePathWide(const(wchar)*);
    HRESULT FindSourceFileWide(uint, const(wchar)*, uint, uint*, PWSTR, uint, uint*);
    HRESULT GetSourceFileLineOffsetsWide(const(wchar)*, ulong*, uint, uint*);
    HRESULT GetModuleVersionInformationWide(uint, ulong, const(wchar)*, void*, uint, uint*);
    HRESULT GetModuleNameStringWide(uint, uint, ulong, PWSTR, uint, uint*);
    HRESULT GetConstantNameWide(ulong, uint, ulong, PWSTR, uint, uint*);
    HRESULT GetFieldNameWide(ulong, uint, uint, PWSTR, uint, uint*);
    HRESULT IsManagedModule(uint, ulong);
    HRESULT GetModuleByModuleName2(const(char)*, uint, uint, uint*, ulong*);
    HRESULT GetModuleByModuleName2Wide(const(wchar)*, uint, uint, uint*, ulong*);
    HRESULT GetModuleByOffset2(ulong, uint, uint, uint*, ulong*);
    HRESULT AddSyntheticModule(ulong, uint, const(char)*, const(char)*, uint);
    HRESULT AddSyntheticModuleWide(ulong, uint, const(wchar)*, const(wchar)*, uint);
    HRESULT RemoveSyntheticModule(ulong);
    HRESULT GetCurrentScopeFrameIndex(uint*);
    HRESULT SetScopeFrameByIndex(uint);
    HRESULT SetScopeFromJitDebugInfo(uint, ulong);
    HRESULT SetScopeFromStoredEvent();
    HRESULT OutputSymbolByOffset(uint, uint, ulong);
    HRESULT GetFunctionEntryByOffset(ulong, uint, void*, uint, uint*);
    HRESULT GetFieldTypeAndOffset(ulong, uint, const(char)*, uint*, uint*);
    HRESULT GetFieldTypeAndOffsetWide(ulong, uint, const(wchar)*, uint*, uint*);
    HRESULT AddSyntheticSymbol(ulong, uint, const(char)*, uint, DEBUG_MODULE_AND_ID*);
    HRESULT AddSyntheticSymbolWide(ulong, uint, const(wchar)*, uint, DEBUG_MODULE_AND_ID*);
    HRESULT RemoveSyntheticSymbol(DEBUG_MODULE_AND_ID*);
    HRESULT GetSymbolEntriesByOffset(ulong, uint, DEBUG_MODULE_AND_ID*, ulong*, uint, uint*);
    HRESULT GetSymbolEntriesByName(const(char)*, uint, DEBUG_MODULE_AND_ID*, uint, uint*);
    HRESULT GetSymbolEntriesByNameWide(const(wchar)*, uint, DEBUG_MODULE_AND_ID*, uint, uint*);
    HRESULT GetSymbolEntryByToken(ulong, uint, DEBUG_MODULE_AND_ID*);
    HRESULT GetSymbolEntryInformation(DEBUG_MODULE_AND_ID*, DEBUG_SYMBOL_ENTRY*);
    HRESULT GetSymbolEntryString(DEBUG_MODULE_AND_ID*, uint, PSTR, uint, uint*);
    HRESULT GetSymbolEntryStringWide(DEBUG_MODULE_AND_ID*, uint, PWSTR, uint, uint*);
    HRESULT GetSymbolEntryOffsetRegions(DEBUG_MODULE_AND_ID*, uint, DEBUG_OFFSET_REGION*, uint, uint*);
    HRESULT GetSymbolEntryBySymbolEntry(DEBUG_MODULE_AND_ID*, uint, DEBUG_MODULE_AND_ID*);
    HRESULT GetSourceEntriesByOffset(ulong, uint, DEBUG_SYMBOL_SOURCE_ENTRY*, uint, uint*);
    HRESULT GetSourceEntriesByLine(uint, const(char)*, uint, DEBUG_SYMBOL_SOURCE_ENTRY*, uint, uint*);
    HRESULT GetSourceEntriesByLineWide(uint, const(wchar)*, uint, DEBUG_SYMBOL_SOURCE_ENTRY*, uint, uint*);
    HRESULT GetSourceEntryString(DEBUG_SYMBOL_SOURCE_ENTRY*, uint, PSTR, uint, uint*);
    HRESULT GetSourceEntryStringWide(DEBUG_SYMBOL_SOURCE_ENTRY*, uint, PWSTR, uint, uint*);
    HRESULT GetSourceEntryOffsetRegions(DEBUG_SYMBOL_SOURCE_ENTRY*, uint, DEBUG_OFFSET_REGION*, uint, uint*);
    HRESULT GetSourceEntryBySourceEntry(DEBUG_SYMBOL_SOURCE_ENTRY*, uint, DEBUG_SYMBOL_SOURCE_ENTRY*);
    HRESULT GetScopeEx(ulong*, DEBUG_STACK_FRAME_EX*, void*, uint);
    HRESULT SetScopeEx(ulong, DEBUG_STACK_FRAME_EX*, void*, uint);
    HRESULT GetNameByInlineContext(ulong, uint, PSTR, uint, uint*, ulong*);
    HRESULT GetNameByInlineContextWide(ulong, uint, PWSTR, uint, uint*, ulong*);
    HRESULT GetLineByInlineContext(ulong, uint, uint*, PSTR, uint, uint*, ulong*);
    HRESULT GetLineByInlineContextWide(ulong, uint, uint*, PWSTR, uint, uint*, ulong*);
    HRESULT OutputSymbolByInlineContext(uint, uint, ulong, uint);
}
enum IID_IDebugSymbols5 = GUID(0xc65fa83e, 0x1e69, 0x475e, [0x8e, 0xe, 0xb5, 0xd7, 0x9e, 0x9c, 0xc1, 0x7e]);
interface IDebugSymbols5 : IUnknown
{
    HRESULT GetSymbolOptions(uint*);
    HRESULT AddSymbolOptions(uint);
    HRESULT RemoveSymbolOptions(uint);
    HRESULT SetSymbolOptions(uint);
    HRESULT GetNameByOffset(ulong, PSTR, uint, uint*, ulong*);
    HRESULT GetOffsetByName(const(char)*, ulong*);
    HRESULT GetNearNameByOffset(ulong, int, PSTR, uint, uint*, ulong*);
    HRESULT GetLineByOffset(ulong, uint*, PSTR, uint, uint*, ulong*);
    HRESULT GetOffsetByLine(uint, const(char)*, ulong*);
    HRESULT GetNumberModules(uint*, uint*);
    HRESULT GetModuleByIndex(uint, ulong*);
    HRESULT GetModuleByModuleName(const(char)*, uint, uint*, ulong*);
    HRESULT GetModuleByOffset(ulong, uint, uint*, ulong*);
    HRESULT GetModuleNames(uint, ulong, PSTR, uint, uint*, PSTR, uint, uint*, PSTR, uint, uint*);
    HRESULT GetModuleParameters(uint, ulong*, uint, DEBUG_MODULE_PARAMETERS*);
    HRESULT GetSymbolModule(const(char)*, ulong*);
    HRESULT GetTypeName(ulong, uint, PSTR, uint, uint*);
    HRESULT GetTypeId(ulong, const(char)*, uint*);
    HRESULT GetTypeSize(ulong, uint, uint*);
    HRESULT GetFieldOffset(ulong, uint, const(char)*, uint*);
    HRESULT GetSymbolTypeId(const(char)*, uint*, ulong*);
    HRESULT GetOffsetTypeId(ulong, uint*, ulong*);
    HRESULT ReadTypedDataVirtual(ulong, ulong, uint, void*, uint, uint*);
    HRESULT WriteTypedDataVirtual(ulong, ulong, uint, void*, uint, uint*);
    HRESULT OutputTypedDataVirtual(uint, ulong, ulong, uint, uint);
    HRESULT ReadTypedDataPhysical(ulong, ulong, uint, void*, uint, uint*);
    HRESULT WriteTypedDataPhysical(ulong, ulong, uint, void*, uint, uint*);
    HRESULT OutputTypedDataPhysical(uint, ulong, ulong, uint, uint);
    HRESULT GetScope(ulong*, DEBUG_STACK_FRAME*, void*, uint);
    HRESULT SetScope(ulong, DEBUG_STACK_FRAME*, void*, uint);
    HRESULT ResetScope();
    HRESULT GetScopeSymbolGroup(uint, IDebugSymbolGroup, IDebugSymbolGroup*);
    HRESULT CreateSymbolGroup(IDebugSymbolGroup*);
    HRESULT StartSymbolMatch(const(char)*, ulong*);
    HRESULT GetNextSymbolMatch(ulong, PSTR, uint, uint*, ulong*);
    HRESULT EndSymbolMatch(ulong);
    HRESULT Reload(const(char)*);
    HRESULT GetSymbolPath(PSTR, uint, uint*);
    HRESULT SetSymbolPath(const(char)*);
    HRESULT AppendSymbolPath(const(char)*);
    HRESULT GetImagePath(PSTR, uint, uint*);
    HRESULT SetImagePath(const(char)*);
    HRESULT AppendImagePath(const(char)*);
    HRESULT GetSourcePath(PSTR, uint, uint*);
    HRESULT GetSourcePathElement(uint, PSTR, uint, uint*);
    HRESULT SetSourcePath(const(char)*);
    HRESULT AppendSourcePath(const(char)*);
    HRESULT FindSourceFile(uint, const(char)*, uint, uint*, PSTR, uint, uint*);
    HRESULT GetSourceFileLineOffsets(const(char)*, ulong*, uint, uint*);
    HRESULT GetModuleVersionInformation(uint, ulong, const(char)*, void*, uint, uint*);
    HRESULT GetModuleNameString(uint, uint, ulong, PSTR, uint, uint*);
    HRESULT GetConstantName(ulong, uint, ulong, PSTR, uint, uint*);
    HRESULT GetFieldName(ulong, uint, uint, PSTR, uint, uint*);
    HRESULT GetTypeOptions(uint*);
    HRESULT AddTypeOptions(uint);
    HRESULT RemoveTypeOptions(uint);
    HRESULT SetTypeOptions(uint);
    HRESULT GetNameByOffsetWide(ulong, PWSTR, uint, uint*, ulong*);
    HRESULT GetOffsetByNameWide(const(wchar)*, ulong*);
    HRESULT GetNearNameByOffsetWide(ulong, int, PWSTR, uint, uint*, ulong*);
    HRESULT GetLineByOffsetWide(ulong, uint*, PWSTR, uint, uint*, ulong*);
    HRESULT GetOffsetByLineWide(uint, const(wchar)*, ulong*);
    HRESULT GetModuleByModuleNameWide(const(wchar)*, uint, uint*, ulong*);
    HRESULT GetSymbolModuleWide(const(wchar)*, ulong*);
    HRESULT GetTypeNameWide(ulong, uint, PWSTR, uint, uint*);
    HRESULT GetTypeIdWide(ulong, const(wchar)*, uint*);
    HRESULT GetFieldOffsetWide(ulong, uint, const(wchar)*, uint*);
    HRESULT GetSymbolTypeIdWide(const(wchar)*, uint*, ulong*);
    HRESULT GetScopeSymbolGroup2(uint, IDebugSymbolGroup2, IDebugSymbolGroup2*);
    HRESULT CreateSymbolGroup2(IDebugSymbolGroup2*);
    HRESULT StartSymbolMatchWide(const(wchar)*, ulong*);
    HRESULT GetNextSymbolMatchWide(ulong, PWSTR, uint, uint*, ulong*);
    HRESULT ReloadWide(const(wchar)*);
    HRESULT GetSymbolPathWide(PWSTR, uint, uint*);
    HRESULT SetSymbolPathWide(const(wchar)*);
    HRESULT AppendSymbolPathWide(const(wchar)*);
    HRESULT GetImagePathWide(PWSTR, uint, uint*);
    HRESULT SetImagePathWide(const(wchar)*);
    HRESULT AppendImagePathWide(const(wchar)*);
    HRESULT GetSourcePathWide(PWSTR, uint, uint*);
    HRESULT GetSourcePathElementWide(uint, PWSTR, uint, uint*);
    HRESULT SetSourcePathWide(const(wchar)*);
    HRESULT AppendSourcePathWide(const(wchar)*);
    HRESULT FindSourceFileWide(uint, const(wchar)*, uint, uint*, PWSTR, uint, uint*);
    HRESULT GetSourceFileLineOffsetsWide(const(wchar)*, ulong*, uint, uint*);
    HRESULT GetModuleVersionInformationWide(uint, ulong, const(wchar)*, void*, uint, uint*);
    HRESULT GetModuleNameStringWide(uint, uint, ulong, PWSTR, uint, uint*);
    HRESULT GetConstantNameWide(ulong, uint, ulong, PWSTR, uint, uint*);
    HRESULT GetFieldNameWide(ulong, uint, uint, PWSTR, uint, uint*);
    HRESULT IsManagedModule(uint, ulong);
    HRESULT GetModuleByModuleName2(const(char)*, uint, uint, uint*, ulong*);
    HRESULT GetModuleByModuleName2Wide(const(wchar)*, uint, uint, uint*, ulong*);
    HRESULT GetModuleByOffset2(ulong, uint, uint, uint*, ulong*);
    HRESULT AddSyntheticModule(ulong, uint, const(char)*, const(char)*, uint);
    HRESULT AddSyntheticModuleWide(ulong, uint, const(wchar)*, const(wchar)*, uint);
    HRESULT RemoveSyntheticModule(ulong);
    HRESULT GetCurrentScopeFrameIndex(uint*);
    HRESULT SetScopeFrameByIndex(uint);
    HRESULT SetScopeFromJitDebugInfo(uint, ulong);
    HRESULT SetScopeFromStoredEvent();
    HRESULT OutputSymbolByOffset(uint, uint, ulong);
    HRESULT GetFunctionEntryByOffset(ulong, uint, void*, uint, uint*);
    HRESULT GetFieldTypeAndOffset(ulong, uint, const(char)*, uint*, uint*);
    HRESULT GetFieldTypeAndOffsetWide(ulong, uint, const(wchar)*, uint*, uint*);
    HRESULT AddSyntheticSymbol(ulong, uint, const(char)*, uint, DEBUG_MODULE_AND_ID*);
    HRESULT AddSyntheticSymbolWide(ulong, uint, const(wchar)*, uint, DEBUG_MODULE_AND_ID*);
    HRESULT RemoveSyntheticSymbol(DEBUG_MODULE_AND_ID*);
    HRESULT GetSymbolEntriesByOffset(ulong, uint, DEBUG_MODULE_AND_ID*, ulong*, uint, uint*);
    HRESULT GetSymbolEntriesByName(const(char)*, uint, DEBUG_MODULE_AND_ID*, uint, uint*);
    HRESULT GetSymbolEntriesByNameWide(const(wchar)*, uint, DEBUG_MODULE_AND_ID*, uint, uint*);
    HRESULT GetSymbolEntryByToken(ulong, uint, DEBUG_MODULE_AND_ID*);
    HRESULT GetSymbolEntryInformation(DEBUG_MODULE_AND_ID*, DEBUG_SYMBOL_ENTRY*);
    HRESULT GetSymbolEntryString(DEBUG_MODULE_AND_ID*, uint, PSTR, uint, uint*);
    HRESULT GetSymbolEntryStringWide(DEBUG_MODULE_AND_ID*, uint, PWSTR, uint, uint*);
    HRESULT GetSymbolEntryOffsetRegions(DEBUG_MODULE_AND_ID*, uint, DEBUG_OFFSET_REGION*, uint, uint*);
    HRESULT GetSymbolEntryBySymbolEntry(DEBUG_MODULE_AND_ID*, uint, DEBUG_MODULE_AND_ID*);
    HRESULT GetSourceEntriesByOffset(ulong, uint, DEBUG_SYMBOL_SOURCE_ENTRY*, uint, uint*);
    HRESULT GetSourceEntriesByLine(uint, const(char)*, uint, DEBUG_SYMBOL_SOURCE_ENTRY*, uint, uint*);
    HRESULT GetSourceEntriesByLineWide(uint, const(wchar)*, uint, DEBUG_SYMBOL_SOURCE_ENTRY*, uint, uint*);
    HRESULT GetSourceEntryString(DEBUG_SYMBOL_SOURCE_ENTRY*, uint, PSTR, uint, uint*);
    HRESULT GetSourceEntryStringWide(DEBUG_SYMBOL_SOURCE_ENTRY*, uint, PWSTR, uint, uint*);
    HRESULT GetSourceEntryOffsetRegions(DEBUG_SYMBOL_SOURCE_ENTRY*, uint, DEBUG_OFFSET_REGION*, uint, uint*);
    HRESULT GetSourceEntryBySourceEntry(DEBUG_SYMBOL_SOURCE_ENTRY*, uint, DEBUG_SYMBOL_SOURCE_ENTRY*);
    HRESULT GetScopeEx(ulong*, DEBUG_STACK_FRAME_EX*, void*, uint);
    HRESULT SetScopeEx(ulong, DEBUG_STACK_FRAME_EX*, void*, uint);
    HRESULT GetNameByInlineContext(ulong, uint, PSTR, uint, uint*, ulong*);
    HRESULT GetNameByInlineContextWide(ulong, uint, PWSTR, uint, uint*, ulong*);
    HRESULT GetLineByInlineContext(ulong, uint, uint*, PSTR, uint, uint*, ulong*);
    HRESULT GetLineByInlineContextWide(ulong, uint, uint*, PWSTR, uint, uint*, ulong*);
    HRESULT OutputSymbolByInlineContext(uint, uint, ulong, uint);
    HRESULT GetCurrentScopeFrameIndexEx(uint, uint*);
    HRESULT SetScopeFrameByIndexEx(uint, uint);
}
enum IID_IDebugSystemObjects = GUID(0x6b86fe2c, 0x2c4f, 0x4f0c, [0x9d, 0xa2, 0x17, 0x43, 0x11, 0xac, 0xc3, 0x27]);
interface IDebugSystemObjects : IUnknown
{
    HRESULT GetEventThread(uint*);
    HRESULT GetEventProcess(uint*);
    HRESULT GetCurrentThreadId(uint*);
    HRESULT SetCurrentThreadId(uint);
    HRESULT GetCurrentProcessId(uint*);
    HRESULT SetCurrentProcessId(uint);
    HRESULT GetNumberThreads(uint*);
    HRESULT GetTotalNumberThreads(uint*, uint*);
    HRESULT GetThreadIdsByIndex(uint, uint, uint*, uint*);
    HRESULT GetThreadIdByProcessor(uint, uint*);
    HRESULT GetCurrentThreadDataOffset(ulong*);
    HRESULT GetThreadIdByDataOffset(ulong, uint*);
    HRESULT GetCurrentThreadTeb(ulong*);
    HRESULT GetThreadIdByTeb(ulong, uint*);
    HRESULT GetCurrentThreadSystemId(uint*);
    HRESULT GetThreadIdBySystemId(uint, uint*);
    HRESULT GetCurrentThreadHandle(ulong*);
    HRESULT GetThreadIdByHandle(ulong, uint*);
    HRESULT GetNumberProcesses(uint*);
    HRESULT GetProcessIdsByIndex(uint, uint, uint*, uint*);
    HRESULT GetCurrentProcessDataOffset(ulong*);
    HRESULT GetProcessIdByDataOffset(ulong, uint*);
    HRESULT GetCurrentProcessPeb(ulong*);
    HRESULT GetProcessIdByPeb(ulong, uint*);
    HRESULT GetCurrentProcessSystemId(uint*);
    HRESULT GetProcessIdBySystemId(uint, uint*);
    HRESULT GetCurrentProcessHandle(ulong*);
    HRESULT GetProcessIdByHandle(ulong, uint*);
    HRESULT GetCurrentProcessExecutableName(PSTR, uint, uint*);
}
enum IID_IDebugSystemObjects2 = GUID(0xae9f5ff, 0x1852, 0x4679, [0xb0, 0x55, 0x49, 0x4b, 0xee, 0x64, 0x7, 0xee]);
interface IDebugSystemObjects2 : IUnknown
{
    HRESULT GetEventThread(uint*);
    HRESULT GetEventProcess(uint*);
    HRESULT GetCurrentThreadId(uint*);
    HRESULT SetCurrentThreadId(uint);
    HRESULT GetCurrentProcessId(uint*);
    HRESULT SetCurrentProcessId(uint);
    HRESULT GetNumberThreads(uint*);
    HRESULT GetTotalNumberThreads(uint*, uint*);
    HRESULT GetThreadIdsByIndex(uint, uint, uint*, uint*);
    HRESULT GetThreadIdByProcessor(uint, uint*);
    HRESULT GetCurrentThreadDataOffset(ulong*);
    HRESULT GetThreadIdByDataOffset(ulong, uint*);
    HRESULT GetCurrentThreadTeb(ulong*);
    HRESULT GetThreadIdByTeb(ulong, uint*);
    HRESULT GetCurrentThreadSystemId(uint*);
    HRESULT GetThreadIdBySystemId(uint, uint*);
    HRESULT GetCurrentThreadHandle(ulong*);
    HRESULT GetThreadIdByHandle(ulong, uint*);
    HRESULT GetNumberProcesses(uint*);
    HRESULT GetProcessIdsByIndex(uint, uint, uint*, uint*);
    HRESULT GetCurrentProcessDataOffset(ulong*);
    HRESULT GetProcessIdByDataOffset(ulong, uint*);
    HRESULT GetCurrentProcessPeb(ulong*);
    HRESULT GetProcessIdByPeb(ulong, uint*);
    HRESULT GetCurrentProcessSystemId(uint*);
    HRESULT GetProcessIdBySystemId(uint, uint*);
    HRESULT GetCurrentProcessHandle(ulong*);
    HRESULT GetProcessIdByHandle(ulong, uint*);
    HRESULT GetCurrentProcessExecutableName(PSTR, uint, uint*);
    HRESULT GetCurrentProcessUpTime(uint*);
    HRESULT GetImplicitThreadDataOffset(ulong*);
    HRESULT SetImplicitThreadDataOffset(ulong);
    HRESULT GetImplicitProcessDataOffset(ulong*);
    HRESULT SetImplicitProcessDataOffset(ulong);
}
enum IID_IDebugSystemObjects3 = GUID(0xe9676e2f, 0xe286, 0x4ea3, [0xb0, 0xf9, 0xdf, 0xe5, 0xd9, 0xfc, 0x33, 0xe]);
interface IDebugSystemObjects3 : IUnknown
{
    HRESULT GetEventThread(uint*);
    HRESULT GetEventProcess(uint*);
    HRESULT GetCurrentThreadId(uint*);
    HRESULT SetCurrentThreadId(uint);
    HRESULT GetCurrentProcessId(uint*);
    HRESULT SetCurrentProcessId(uint);
    HRESULT GetNumberThreads(uint*);
    HRESULT GetTotalNumberThreads(uint*, uint*);
    HRESULT GetThreadIdsByIndex(uint, uint, uint*, uint*);
    HRESULT GetThreadIdByProcessor(uint, uint*);
    HRESULT GetCurrentThreadDataOffset(ulong*);
    HRESULT GetThreadIdByDataOffset(ulong, uint*);
    HRESULT GetCurrentThreadTeb(ulong*);
    HRESULT GetThreadIdByTeb(ulong, uint*);
    HRESULT GetCurrentThreadSystemId(uint*);
    HRESULT GetThreadIdBySystemId(uint, uint*);
    HRESULT GetCurrentThreadHandle(ulong*);
    HRESULT GetThreadIdByHandle(ulong, uint*);
    HRESULT GetNumberProcesses(uint*);
    HRESULT GetProcessIdsByIndex(uint, uint, uint*, uint*);
    HRESULT GetCurrentProcessDataOffset(ulong*);
    HRESULT GetProcessIdByDataOffset(ulong, uint*);
    HRESULT GetCurrentProcessPeb(ulong*);
    HRESULT GetProcessIdByPeb(ulong, uint*);
    HRESULT GetCurrentProcessSystemId(uint*);
    HRESULT GetProcessIdBySystemId(uint, uint*);
    HRESULT GetCurrentProcessHandle(ulong*);
    HRESULT GetProcessIdByHandle(ulong, uint*);
    HRESULT GetCurrentProcessExecutableName(PSTR, uint, uint*);
    HRESULT GetCurrentProcessUpTime(uint*);
    HRESULT GetImplicitThreadDataOffset(ulong*);
    HRESULT SetImplicitThreadDataOffset(ulong);
    HRESULT GetImplicitProcessDataOffset(ulong*);
    HRESULT SetImplicitProcessDataOffset(ulong);
    HRESULT GetEventSystem(uint*);
    HRESULT GetCurrentSystemId(uint*);
    HRESULT SetCurrentSystemId(uint);
    HRESULT GetNumberSystems(uint*);
    HRESULT GetSystemIdsByIndex(uint, uint, uint*);
    HRESULT GetTotalNumberThreadsAndProcesses(uint*, uint*, uint*, uint*, uint*);
    HRESULT GetCurrentSystemServer(ulong*);
    HRESULT GetSystemByServer(ulong, uint*);
    HRESULT GetCurrentSystemServerName(PSTR, uint, uint*);
}
enum IID_IDebugSystemObjects4 = GUID(0x489468e6, 0x7d0f, 0x4af5, [0x87, 0xab, 0x25, 0x20, 0x74, 0x54, 0xd5, 0x53]);
interface IDebugSystemObjects4 : IUnknown
{
    HRESULT GetEventThread(uint*);
    HRESULT GetEventProcess(uint*);
    HRESULT GetCurrentThreadId(uint*);
    HRESULT SetCurrentThreadId(uint);
    HRESULT GetCurrentProcessId(uint*);
    HRESULT SetCurrentProcessId(uint);
    HRESULT GetNumberThreads(uint*);
    HRESULT GetTotalNumberThreads(uint*, uint*);
    HRESULT GetThreadIdsByIndex(uint, uint, uint*, uint*);
    HRESULT GetThreadIdByProcessor(uint, uint*);
    HRESULT GetCurrentThreadDataOffset(ulong*);
    HRESULT GetThreadIdByDataOffset(ulong, uint*);
    HRESULT GetCurrentThreadTeb(ulong*);
    HRESULT GetThreadIdByTeb(ulong, uint*);
    HRESULT GetCurrentThreadSystemId(uint*);
    HRESULT GetThreadIdBySystemId(uint, uint*);
    HRESULT GetCurrentThreadHandle(ulong*);
    HRESULT GetThreadIdByHandle(ulong, uint*);
    HRESULT GetNumberProcesses(uint*);
    HRESULT GetProcessIdsByIndex(uint, uint, uint*, uint*);
    HRESULT GetCurrentProcessDataOffset(ulong*);
    HRESULT GetProcessIdByDataOffset(ulong, uint*);
    HRESULT GetCurrentProcessPeb(ulong*);
    HRESULT GetProcessIdByPeb(ulong, uint*);
    HRESULT GetCurrentProcessSystemId(uint*);
    HRESULT GetProcessIdBySystemId(uint, uint*);
    HRESULT GetCurrentProcessHandle(ulong*);
    HRESULT GetProcessIdByHandle(ulong, uint*);
    HRESULT GetCurrentProcessExecutableName(PSTR, uint, uint*);
    HRESULT GetCurrentProcessUpTime(uint*);
    HRESULT GetImplicitThreadDataOffset(ulong*);
    HRESULT SetImplicitThreadDataOffset(ulong);
    HRESULT GetImplicitProcessDataOffset(ulong*);
    HRESULT SetImplicitProcessDataOffset(ulong);
    HRESULT GetEventSystem(uint*);
    HRESULT GetCurrentSystemId(uint*);
    HRESULT SetCurrentSystemId(uint);
    HRESULT GetNumberSystems(uint*);
    HRESULT GetSystemIdsByIndex(uint, uint, uint*);
    HRESULT GetTotalNumberThreadsAndProcesses(uint*, uint*, uint*, uint*, uint*);
    HRESULT GetCurrentSystemServer(ulong*);
    HRESULT GetSystemByServer(ulong, uint*);
    HRESULT GetCurrentSystemServerName(PSTR, uint, uint*);
    HRESULT GetCurrentProcessExecutableNameWide(PWSTR, uint, uint*);
    HRESULT GetCurrentSystemServerNameWide(PWSTR, uint, uint*);
}
alias PDEBUG_EXTENSION_INITIALIZE = HRESULT function(uint*, uint*);
alias PDEBUG_EXTENSION_UNINITIALIZE = void function();
alias PDEBUG_EXTENSION_CANUNLOAD = HRESULT function();
alias PDEBUG_EXTENSION_UNLOAD = void function();
alias PDEBUG_EXTENSION_NOTIFY = void function(uint, ulong);
alias PDEBUG_EXTENSION_CALL = HRESULT function(IDebugClient, const(char)*);
alias PDEBUG_EXTENSION_KNOWN_STRUCT = HRESULT function(uint, ulong, PSTR, PSTR, uint*);
alias PDEBUG_EXTENSION_KNOWN_STRUCT_EX = HRESULT function(IDebugClient, uint, ulong, const(char)*, PSTR, uint*);
alias PDEBUG_EXTENSION_QUERY_VALUE_NAMES = HRESULT function(IDebugClient, uint, PWSTR, uint, uint*);
alias PDEBUG_EXTENSION_PROVIDE_VALUE = HRESULT function(IDebugClient, uint, const(wchar)*, ulong*, ulong*, uint*, uint*);
alias PDEBUG_STACK_PROVIDER_BEGINTHREADSTACKRECONSTRUCTION = HRESULT function(uint, void*, uint);
alias PDEBUG_STACK_PROVIDER_RECONSTRUCTSTACK = HRESULT function(uint, DEBUG_STACK_FRAME_EX*, uint, STACK_SYM_FRAME_INFO**, uint*);
alias PDEBUG_STACK_PROVIDER_FREESTACKSYMFRAMES = HRESULT function(STACK_SYM_FRAME_INFO*);
alias PDEBUG_STACK_PROVIDER_ENDTHREADSTACKRECONSTRUCTION = HRESULT function();
// [Not Found] IID_DebugBaseEventCallbacks
interface DebugBaseEventCallbacks : IDebugEventCallbacks
{
}
// [Not Found] IID_DebugBaseEventCallbacksWide
interface DebugBaseEventCallbacksWide : IDebugEventCallbacksWide
{
}
struct Location
{
    ulong HostDefined;
    ulong Offset;
}
alias ModelObjectKind = int;
enum : int
{
    ObjectPropertyAccessor      = 0x00000000,
    ObjectContext               = 0x00000001,
    ObjectTargetObject          = 0x00000002,
    ObjectTargetObjectReference = 0x00000003,
    ObjectSynthetic             = 0x00000004,
    ObjectNoValue               = 0x00000005,
    ObjectError                 = 0x00000006,
    ObjectIntrinsic             = 0x00000007,
    ObjectMethod                = 0x00000008,
    ObjectKeyReference          = 0x00000009,
}

alias SymbolKind = int;
enum : int
{
    Symbol          = 0x00000000,
    SymbolModule    = 0x00000001,
    SymbolType      = 0x00000002,
    SymbolField     = 0x00000003,
    SymbolConstant  = 0x00000004,
    SymbolData      = 0x00000005,
    SymbolBaseClass = 0x00000006,
    SymbolPublic    = 0x00000007,
    SymbolFunction  = 0x00000008,
}

alias TypeKind = int;
enum : int
{
    TypeUDT           = 0x00000000,
    TypePointer       = 0x00000001,
    TypeMemberPointer = 0x00000002,
    TypeArray         = 0x00000003,
    TypeFunction      = 0x00000004,
    TypeTypedef       = 0x00000005,
    TypeEnum          = 0x00000006,
    TypeIntrinsic     = 0x00000007,
    TypeExtendedArray = 0x00000008,
}

alias IntrinsicKind = int;
enum : int
{
    IntrinsicVoid    = 0x00000000,
    IntrinsicBool    = 0x00000001,
    IntrinsicChar    = 0x00000002,
    IntrinsicWChar   = 0x00000003,
    IntrinsicInt     = 0x00000004,
    IntrinsicUInt    = 0x00000005,
    IntrinsicLong    = 0x00000006,
    IntrinsicULong   = 0x00000007,
    IntrinsicFloat   = 0x00000008,
    IntrinsicHRESULT = 0x00000009,
    IntrinsicChar16  = 0x0000000a,
    IntrinsicChar32  = 0x0000000b,
}

alias PointerKind = int;
enum : int
{
    PointerStandard         = 0x00000000,
    PointerReference        = 0x00000001,
    PointerRValueReference  = 0x00000002,
    PointerCXHat            = 0x00000003,
    PointerManagedReference = 0x00000004,
}

alias CallingConventionKind = int;
enum : int
{
    CallingConventionUnknown  = 0x00000000,
    CallingConventionCDecl    = 0x00000001,
    CallingConventionFastCall = 0x00000002,
    CallingConventionStdCall  = 0x00000003,
    CallingConventionSysCall  = 0x00000004,
    CallingConventionThisCall = 0x00000005,
}

alias LocationKind = int;
enum : int
{
    LocationMember   = 0x00000000,
    LocationStatic   = 0x00000001,
    LocationConstant = 0x00000002,
    LocationNone     = 0x00000003,
}

alias PreferredFormat = int;
enum : int
{
    FormatNone                   = 0x00000000,
    FormatSingleCharacter        = 0x00000001,
    FormatQuotedString           = 0x00000002,
    FormatString                 = 0x00000003,
    FormatQuotedUnicodeString    = 0x00000004,
    FormatUnicodeString          = 0x00000005,
    FormatQuotedUTF8String       = 0x00000006,
    FormatUTF8String             = 0x00000007,
    FormatBSTRString             = 0x00000008,
    FormatQuotedHString          = 0x00000009,
    FormatHString                = 0x0000000a,
    FormatRaw                    = 0x0000000b,
    FormatEnumNameOnly           = 0x0000000c,
    FormatEscapedStringWithQuote = 0x0000000d,
    FormatUTF32String            = 0x0000000e,
    FormatQuotedUTF32String      = 0x0000000f,
}

enum IID_IHostDataModelAccess = GUID(0xf2bce54e, 0x4835, 0x4f8a, [0x83, 0x6e, 0x79, 0x81, 0xe2, 0x99, 0x4, 0xd1]);
interface IHostDataModelAccess : IUnknown
{
    HRESULT GetDataModel(IDataModelManager*, IDebugHost*);
}
enum IID_IKeyStore = GUID(0xfc7557d, 0x401d, 0x4fca, [0x93, 0x65, 0xda, 0x1e, 0x98, 0x50, 0x69, 0x7c]);
interface IKeyStore : IUnknown
{
    HRESULT GetKey(const(wchar)*, IModelObject*, IKeyStore*);
    HRESULT SetKey(const(wchar)*, IModelObject, IKeyStore);
    HRESULT GetKeyValue(const(wchar)*, IModelObject*, IKeyStore*);
    HRESULT SetKeyValue(const(wchar)*, IModelObject);
    HRESULT ClearKeys();
}
alias RawSearchFlags = int;
enum : int
{
    RawSearchNone    = 0x00000000,
    RawSearchNoBases = 0x00000001,
}

enum IID_IModelObject = GUID(0xe28c7893, 0x3f4b, 0x4b96, [0xba, 0xca, 0x29, 0x3c, 0xdc, 0x55, 0xf4, 0x5d]);
interface IModelObject : IUnknown
{
    HRESULT GetContext(IDebugHostContext*);
    HRESULT GetKind(ModelObjectKind*);
    HRESULT GetIntrinsicValue(VARIANT*);
    HRESULT GetIntrinsicValueAs(VARENUM, VARIANT*);
    HRESULT GetKeyValue(const(wchar)*, IModelObject*, IKeyStore*);
    HRESULT SetKeyValue(const(wchar)*, IModelObject);
    HRESULT EnumerateKeyValues(IKeyEnumerator*);
    HRESULT GetRawValue(SymbolKind, const(wchar)*, uint, IModelObject*);
    HRESULT EnumerateRawValues(SymbolKind, uint, IRawEnumerator*);
    HRESULT Dereference(IModelObject*);
    HRESULT TryCastToRuntimeType(IModelObject*);
    HRESULT GetConcept(const(GUID)*, IUnknown*, IKeyStore*);
    HRESULT GetLocation(Location*);
    HRESULT GetTypeInfo(IDebugHostType*);
    HRESULT GetTargetInfo(Location*, IDebugHostType*);
    HRESULT GetNumberOfParentModels(ulong*);
    HRESULT GetParentModel(ulong, IModelObject*, IModelObject*);
    HRESULT AddParentModel(IModelObject, IModelObject, ubyte);
    HRESULT RemoveParentModel(IModelObject);
    HRESULT GetKey(const(wchar)*, IModelObject*, IKeyStore*);
    HRESULT GetKeyReference(const(wchar)*, IModelObject*, IKeyStore*);
    HRESULT SetKey(const(wchar)*, IModelObject, IKeyStore);
    HRESULT ClearKeys();
    HRESULT EnumerateKeys(IKeyEnumerator*);
    HRESULT EnumerateKeyReferences(IKeyEnumerator*);
    HRESULT SetConcept(const(GUID)*, IUnknown, IKeyStore);
    HRESULT ClearConcepts();
    HRESULT GetRawReference(SymbolKind, const(wchar)*, uint, IModelObject*);
    HRESULT EnumerateRawReferences(SymbolKind, uint, IRawEnumerator*);
    HRESULT SetContextForDataModel(IModelObject, IUnknown);
    HRESULT GetContextForDataModel(IModelObject, IUnknown*);
    HRESULT Compare(IModelObject, IModelObject*);
    HRESULT IsEqualTo(IModelObject, bool*);
}
enum IID_IDataModelManager = GUID(0x73fe19f4, 0xa110, 0x4500, [0x8e, 0xd9, 0x3c, 0x28, 0x89, 0x6f, 0x50, 0x8c]);
interface IDataModelManager : IUnknown
{
    HRESULT Close();
    HRESULT CreateNoValue(IModelObject*);
    HRESULT CreateErrorObject(HRESULT, const(wchar)*, IModelObject*);
    HRESULT CreateTypedObject(IDebugHostContext, Location, IDebugHostType, IModelObject*);
    HRESULT CreateTypedObjectReference(IDebugHostContext, Location, IDebugHostType, IModelObject*);
    HRESULT CreateSyntheticObject(IDebugHostContext, IModelObject*);
    HRESULT CreateDataModelObject(IDataModelConcept, IModelObject*);
    HRESULT CreateIntrinsicObject(ModelObjectKind, VARIANT*, IModelObject*);
    HRESULT CreateTypedIntrinsicObject(VARIANT*, IDebugHostType, IModelObject*);
    HRESULT GetModelForTypeSignature(IDebugHostTypeSignature, IModelObject*);
    HRESULT GetModelForType(IDebugHostType, IModelObject*, IDebugHostTypeSignature*, IDebugHostSymbolEnumerator*);
    HRESULT RegisterModelForTypeSignature(IDebugHostTypeSignature, IModelObject);
    HRESULT UnregisterModelForTypeSignature(IModelObject, IDebugHostTypeSignature);
    HRESULT RegisterExtensionForTypeSignature(IDebugHostTypeSignature, IModelObject);
    HRESULT UnregisterExtensionForTypeSignature(IModelObject, IDebugHostTypeSignature);
    HRESULT CreateMetadataStore(IKeyStore, IKeyStore*);
    HRESULT GetRootNamespace(IModelObject*);
    HRESULT RegisterNamedModel(const(wchar)*, IModelObject);
    HRESULT UnregisterNamedModel(const(wchar)*);
    HRESULT AcquireNamedModel(const(wchar)*, IModelObject*);
}
enum IID_IModelKeyReference = GUID(0x5253dcf8, 0x5aff, 0x4c62, [0xb3, 0x2, 0x56, 0xa2, 0x89, 0xe0, 0x9, 0x98]);
interface IModelKeyReference : IUnknown
{
    HRESULT GetKeyName(BSTR*);
    HRESULT GetOriginalObject(IModelObject*);
    HRESULT GetContextObject(IModelObject*);
    HRESULT GetKey(IModelObject*, IKeyStore*);
    HRESULT GetKeyValue(IModelObject*, IKeyStore*);
    HRESULT SetKey(IModelObject, IKeyStore);
    HRESULT SetKeyValue(IModelObject);
}
enum IID_IModelPropertyAccessor = GUID(0x5a0c63d9, 0x526, 0x42b8, [0x96, 0xc, 0x95, 0x16, 0xa3, 0x25, 0x4c, 0x85]);
interface IModelPropertyAccessor : IUnknown
{
    HRESULT GetValue(const(wchar)*, IModelObject, IModelObject*);
    HRESULT SetValue(const(wchar)*, IModelObject, IModelObject);
}
enum IID_IModelMethod = GUID(0x80600c1f, 0xb90b, 0x4896, [0x82, 0xad, 0x1c, 0x0, 0x20, 0x79, 0x9, 0xe8]);
interface IModelMethod : IUnknown
{
    HRESULT Call(IModelObject, ulong, IModelObject*, IModelObject*, IKeyStore*);
}
enum IID_IKeyEnumerator = GUID(0x345fa92e, 0x5e00, 0x4319, [0x9c, 0xae, 0x97, 0x1f, 0x76, 0x1, 0xcd, 0xcf]);
interface IKeyEnumerator : IUnknown
{
    HRESULT Reset();
    HRESULT GetNext(BSTR*, IModelObject*, IKeyStore*);
}
enum IID_IRawEnumerator = GUID(0xe13613f9, 0x3a3c, 0x40b5, [0x8f, 0x48, 0x1e, 0x5e, 0xbf, 0xb9, 0xb2, 0x1b]);
interface IRawEnumerator : IUnknown
{
    HRESULT Reset();
    HRESULT GetNext(BSTR*, SymbolKind*, IModelObject*);
}
enum IID_IDataModelConcept = GUID(0xfcb98d1d, 0x1114, 0x4fbf, [0xb2, 0x4c, 0xef, 0xfc, 0xb5, 0xde, 0xf0, 0xd3]);
interface IDataModelConcept : IUnknown
{
    HRESULT InitializeObject(IModelObject, IDebugHostTypeSignature, IDebugHostSymbolEnumerator);
    HRESULT GetName(BSTR*);
}
enum IID_IStringDisplayableConcept = GUID(0xd28e8d70, 0x6c00, 0x4205, [0x94, 0xd, 0x50, 0x10, 0x16, 0x60, 0x1e, 0xa3]);
interface IStringDisplayableConcept : IUnknown
{
    HRESULT ToDisplayString(IModelObject, IKeyStore, BSTR*);
}
enum IID_ICodeAddressConcept = GUID(0xc7371568, 0x5c78, 0x4a00, [0xa4, 0xab, 0x6e, 0xf8, 0x82, 0x31, 0x84, 0xcb]);
interface ICodeAddressConcept : IUnknown
{
    HRESULT GetContainingSymbol(IModelObject, IDebugHostSymbol*);
}
enum IID_IModelIterator = GUID(0xe4622136, 0x927d, 0x4490, [0x87, 0x4f, 0x58, 0x1f, 0x3e, 0x4e, 0x36, 0x88]);
interface IModelIterator : IUnknown
{
    HRESULT Reset();
    HRESULT GetNext(IModelObject*, ulong, IModelObject*, IKeyStore*);
}
enum IID_IIterableConcept = GUID(0xf5d49d0c, 0xb02, 0x4301, [0x9c, 0x9b, 0xb3, 0xa6, 0x3, 0x76, 0x28, 0xf3]);
interface IIterableConcept : IUnknown
{
    HRESULT GetDefaultIndexDimensionality(IModelObject, ulong*);
    HRESULT GetIterator(IModelObject, IModelIterator*);
}
enum IID_IIndexableConcept = GUID(0xd1fad99f, 0x3f53, 0x4457, [0x85, 0xc, 0x80, 0x51, 0xdf, 0x2d, 0x3f, 0xb5]);
interface IIndexableConcept : IUnknown
{
    HRESULT GetDimensionality(IModelObject, ulong*);
    HRESULT GetAt(IModelObject, ulong, IModelObject*, IModelObject*, IKeyStore*);
    HRESULT SetAt(IModelObject, ulong, IModelObject*, IModelObject);
}
enum IID_IPreferredRuntimeTypeConcept = GUID(0x9d6c1d7b, 0xa76f, 0x4618, [0x80, 0x68, 0x5f, 0x76, 0xbd, 0x9a, 0x4e, 0x8a]);
interface IPreferredRuntimeTypeConcept : IUnknown
{
    HRESULT CastToPreferredRuntimeType(IModelObject, IModelObject*);
}
enum IID_IDebugHost = GUID(0xb8c74943, 0x6b2c, 0x4eeb, [0xb5, 0xc5, 0x35, 0xd3, 0x78, 0xa6, 0xd9, 0x9d]);
interface IDebugHost : IUnknown
{
    HRESULT GetHostDefinedInterface(IUnknown*);
    HRESULT GetCurrentContext(IDebugHostContext*);
    HRESULT GetDefaultMetadata(IKeyStore*);
}
enum IID_IDebugHostContext = GUID(0xa68c70d8, 0x5ec0, 0x46e5, [0xb7, 0x75, 0x31, 0x34, 0xa4, 0x8e, 0xa2, 0xe3]);
interface IDebugHostContext : IUnknown
{
    HRESULT IsEqualTo(IDebugHostContext, bool*);
}
alias ErrorClass = int;
enum : int
{
    ErrorClassWarning = 0x00000000,
    ErrorClassError   = 0x00000001,
}

enum IID_IDebugHostErrorSink = GUID(0xc8ff0f0b, 0xfce9, 0x467e, [0x8b, 0xb3, 0x5d, 0x69, 0xef, 0x10, 0x9c, 0x0]);
interface IDebugHostErrorSink : IUnknown
{
    HRESULT ReportError(ErrorClass, HRESULT, const(wchar)*);
}
enum IID_IDebugHostSymbol = GUID(0xf819103, 0x87de, 0x4e96, [0x82, 0x77, 0xe0, 0x5c, 0xd4, 0x41, 0xfb, 0x22]);
interface IDebugHostSymbol : IUnknown
{
    HRESULT GetContext(IDebugHostContext*);
    HRESULT EnumerateChildren(SymbolKind, const(wchar)*, IDebugHostSymbolEnumerator*);
    HRESULT GetSymbolKind(SymbolKind*);
    HRESULT GetName(BSTR*);
    HRESULT GetType(IDebugHostType*);
    HRESULT GetContainingModule(IDebugHostModule*);
    HRESULT CompareAgainst(IDebugHostSymbol, uint, bool*);
}
enum IID_IDebugHostSymbolEnumerator = GUID(0x28d96c86, 0x10a3, 0x4976, [0xb1, 0x4e, 0xea, 0xef, 0x47, 0x90, 0xaa, 0x1f]);
interface IDebugHostSymbolEnumerator : IUnknown
{
    HRESULT Reset();
    HRESULT GetNext(IDebugHostSymbol*);
}
enum IID_IDebugHostModule = GUID(0xc9ba3e18, 0xd070, 0x4378, [0xbb, 0xd0, 0x34, 0x61, 0x3b, 0x34, 0x6e, 0x1e]);
interface IDebugHostModule : IDebugHostSymbol
{
    HRESULT GetImageName(ubyte, BSTR*);
    HRESULT GetBaseLocation(Location*);
    HRESULT GetVersion(ulong*, ulong*);
    HRESULT FindTypeByName(const(wchar)*, IDebugHostType*);
    HRESULT FindSymbolByRVA(ulong, IDebugHostSymbol*);
    HRESULT FindSymbolByName(const(wchar)*, IDebugHostSymbol*);
}
struct ArrayDimension
{
    long LowerBound;
    ulong Length;
    ulong Stride;
}
enum IID_IDebugHostType = GUID(0x3aadc353, 0x2b14, 0x4abb, [0x98, 0x93, 0x5e, 0x3, 0x45, 0x8e, 0x7, 0xee]);
interface IDebugHostType : IDebugHostSymbol
{
    HRESULT GetTypeKind(TypeKind*);
    HRESULT GetSize(ulong*);
    HRESULT GetBaseType(IDebugHostType*);
    HRESULT GetHashCode(uint*);
    HRESULT GetIntrinsicType(IntrinsicKind*, ushort*);
    HRESULT GetBitField(uint*, uint*);
    HRESULT GetPointerKind(PointerKind*);
    HRESULT GetMemberType(IDebugHostType*);
    HRESULT CreatePointerTo(PointerKind, IDebugHostType*);
    HRESULT GetArrayDimensionality(ulong*);
    HRESULT GetArrayDimensions(ulong, ArrayDimension*);
    HRESULT CreateArrayOf(ulong, ArrayDimension*, IDebugHostType*);
    HRESULT GetFunctionCallingConvention(CallingConventionKind*);
    HRESULT GetFunctionReturnType(IDebugHostType*);
    HRESULT GetFunctionParameterTypeCount(ulong*);
    HRESULT GetFunctionParameterTypeAt(ulong, IDebugHostType*);
    HRESULT IsGeneric(bool*);
    HRESULT GetGenericArgumentCount(ulong*);
    HRESULT GetGenericArgumentAt(ulong, IDebugHostSymbol*);
}
enum IID_IDebugHostConstant = GUID(0x62787edc, 0xfa76, 0x4690, [0xbd, 0x71, 0x5e, 0x8c, 0x3e, 0x29, 0x37, 0xec]);
interface IDebugHostConstant : IDebugHostSymbol
{
    HRESULT GetValue(VARIANT*);
}
enum IID_IDebugHostField = GUID(0xe06f6495, 0x16bc, 0x4cc9, [0xb1, 0x1d, 0x2a, 0x6b, 0x23, 0xfa, 0x72, 0xf3]);
interface IDebugHostField : IDebugHostSymbol
{
    HRESULT GetLocationKind(LocationKind*);
    HRESULT GetOffset(ulong*);
    HRESULT GetLocation(Location*);
    HRESULT GetValue(VARIANT*);
}
enum IID_IDebugHostData = GUID(0xa3d64993, 0x826c, 0x44fa, [0x89, 0x7d, 0x92, 0x6f, 0x2f, 0xe7, 0xad, 0xb]);
interface IDebugHostData : IDebugHostSymbol
{
    HRESULT GetLocationKind(LocationKind*);
    HRESULT GetLocation(Location*);
    HRESULT GetValue(VARIANT*);
}
enum IID_IDebugHostPublic = GUID(0x6c597ac9, 0xfb4d, 0x4f6d, [0x9f, 0x39, 0x22, 0x48, 0x85, 0x39, 0xf8, 0xf4]);
interface IDebugHostPublic : IDebugHostSymbol
{
    HRESULT GetLocationKind(LocationKind*);
    HRESULT GetLocation(Location*);
}
enum IID_IDebugHostBaseClass = GUID(0xb94d57d2, 0x390b, 0x40f7, [0xb5, 0xb4, 0xb6, 0xdb, 0x89, 0x7d, 0x97, 0x4b]);
interface IDebugHostBaseClass : IDebugHostSymbol
{
    HRESULT GetOffset(ulong*);
}
enum IID_IDebugHostSymbols = GUID(0x854fd751, 0xc2e1, 0x4eb2, [0xb5, 0x25, 0x66, 0x19, 0xcb, 0x97, 0xa5, 0x88]);
interface IDebugHostSymbols : IUnknown
{
    HRESULT CreateModuleSignature(const(wchar)*, const(wchar)*, const(wchar)*, IDebugHostModuleSignature*);
    HRESULT CreateTypeSignature(const(wchar)*, IDebugHostModule, IDebugHostTypeSignature*);
    HRESULT CreateTypeSignatureForModuleRange(const(wchar)*, const(wchar)*, const(wchar)*, const(wchar)*, IDebugHostTypeSignature*);
    HRESULT EnumerateModules(IDebugHostContext, IDebugHostSymbolEnumerator*);
    HRESULT FindModuleByName(IDebugHostContext, const(wchar)*, IDebugHostModule*);
    HRESULT FindModuleByLocation(IDebugHostContext, Location, IDebugHostModule*);
    HRESULT GetMostDerivedObject(IDebugHostContext, Location, IDebugHostType, Location*, IDebugHostType*);
}
enum IID_IDebugHostMemory = GUID(0x212149c9, 0x9183, 0x4a3e, [0xb0, 0xe, 0x4f, 0xd1, 0xdc, 0x95, 0x33, 0x9b]);
interface IDebugHostMemory : IUnknown
{
    HRESULT ReadBytes(IDebugHostContext, Location, void*, ulong, ulong*);
    HRESULT WriteBytes(IDebugHostContext, Location, void*, ulong, ulong*);
    HRESULT ReadPointers(IDebugHostContext, Location, ulong, ulong*);
    HRESULT WritePointers(IDebugHostContext, Location, ulong, ulong*);
    HRESULT GetDisplayStringForLocation(IDebugHostContext, Location, ubyte, BSTR*);
}
enum IID_IDebugHostEvaluator = GUID(0xfef9a21, 0x577e, 0x4997, [0xac, 0x7b, 0x1c, 0x48, 0x83, 0x24, 0x1d, 0x99]);
interface IDebugHostEvaluator : IUnknown
{
    HRESULT EvaluateExpression(IDebugHostContext, const(wchar)*, IModelObject, IModelObject*, IKeyStore*);
    HRESULT EvaluateExtendedExpression(IDebugHostContext, const(wchar)*, IModelObject, IModelObject*, IKeyStore*);
}
alias SignatureComparison = int;
enum : int
{
    Unrelated    = 0x00000000,
    Ambiguous    = 0x00000001,
    LessSpecific = 0x00000002,
    MoreSpecific = 0x00000003,
    Identical    = 0x00000004,
}

enum IID_IDebugHostModuleSignature = GUID(0x31e53a5a, 0x1ee, 0x4bbb, [0xb8, 0x99, 0x4b, 0x46, 0xae, 0x7d, 0x59, 0x5c]);
interface IDebugHostModuleSignature : IUnknown
{
    HRESULT IsMatch(IDebugHostModule, bool*);
}
enum IID_IDebugHostTypeSignature = GUID(0x3aadc353, 0x2b14, 0x4abb, [0x98, 0x93, 0x5e, 0x3, 0x45, 0x8e, 0x7, 0xee]);
interface IDebugHostTypeSignature : IUnknown
{
    HRESULT GetHashCode(uint*);
    HRESULT IsMatch(IDebugHostType, bool*, IDebugHostSymbolEnumerator*);
    HRESULT CompareAgainst(IDebugHostTypeSignature, SignatureComparison*);
}
alias SymbolSearchOptions = int;
enum : int
{
    SymbolSearchNone            = 0x00000000,
    SymbolSearchCompletion      = 0x00000001,
    SymbolSearchCaseInsensitive = 0x00000002,
}

alias LanguageKind = int;
enum : int
{
    LanguageUnknown  = 0x00000000,
    LanguageC        = 0x00000001,
    LanguageCPP      = 0x00000002,
    LanguageAssembly = 0x00000003,
}

enum IID_IDebugHostSymbol2 = GUID(0x21515b67, 0x6720, 0x4257, [0x8a, 0x68, 0x7, 0x7d, 0xc9, 0x44, 0x47, 0x1c]);
interface IDebugHostSymbol2 : IDebugHostSymbol
{
    HRESULT GetLanguage(LanguageKind*);
}
alias VarArgsKind = int;
enum : int
{
    VarArgsNone   = 0x00000000,
    VarArgsCStyle = 0x00000001,
}

enum IID_IDebugHostType2 = GUID(0xb28632b9, 0x8506, 0x4676, [0x87, 0xce, 0x8f, 0x7e, 0x5, 0xe5, 0x98, 0x76]);
interface IDebugHostType2 : IDebugHostType
{
    HRESULT IsTypedef(bool*);
    HRESULT GetTypedefBaseType(IDebugHostType2*);
    HRESULT GetTypedefFinalBaseType(IDebugHostType2*);
    HRESULT GetFunctionVarArgsKind(VarArgsKind*);
    HRESULT GetFunctionInstancePointerType(IDebugHostType2*);
}
enum IID_IDebugHostStatus = GUID(0x4f3e1ce2, 0x86b2, 0x4c7a, [0x9c, 0x65, 0xd0, 0xa9, 0xd0, 0xee, 0xcf, 0x44]);
interface IDebugHostStatus : IUnknown
{
    HRESULT PollUserInterrupt(bool*);
}
enum IID_IDataModelScriptClient = GUID(0x3b362b0e, 0x89f0, 0x46c6, [0xa6, 0x63, 0xdf, 0xdc, 0x95, 0x19, 0x4a, 0xef]);
interface IDataModelScriptClient : IUnknown
{
    HRESULT ReportError(ErrorClass, HRESULT, const(wchar)*, uint, uint);
}
enum IID_IDataModelScriptTemplate = GUID(0x1303dec4, 0xfa3b, 0x4f1b, [0x92, 0x24, 0xb9, 0x53, 0xd1, 0x6b, 0xab, 0xb5]);
interface IDataModelScriptTemplate : IUnknown
{
    HRESULT GetName(BSTR*);
    HRESULT GetDescription(BSTR*);
    HRESULT GetContent(IStream*);
}
enum IID_IDataModelScript = GUID(0x7b4d30fc, 0xb14a, 0x49f8, [0x8d, 0x87, 0xd9, 0xa1, 0x48, 0xc, 0x97, 0xf7]);
interface IDataModelScript : IUnknown
{
    HRESULT GetName(BSTR*);
    HRESULT Rename(const(wchar)*);
    HRESULT Populate(IStream);
    HRESULT Execute(IDataModelScriptClient);
    HRESULT Unlink();
    HRESULT IsInvocable(bool*);
    HRESULT InvokeMain(IDataModelScriptClient);
}
enum IID_IDataModelScriptTemplateEnumerator = GUID(0x69ce6ae2, 0x2268, 0x4e6f, [0xb0, 0x62, 0x20, 0xce, 0x62, 0xbf, 0xe6, 0x77]);
interface IDataModelScriptTemplateEnumerator : IUnknown
{
    HRESULT Reset();
    HRESULT GetNext(IDataModelScriptTemplate*);
}
enum IID_IDataModelScriptProvider = GUID(0x513461e0, 0x4fca, 0x48ce, [0x86, 0x58, 0x32, 0xf3, 0xe2, 0x5, 0x6f, 0x3b]);
interface IDataModelScriptProvider : IUnknown
{
    HRESULT GetName(BSTR*);
    HRESULT GetExtension(BSTR*);
    HRESULT CreateScript(IDataModelScript*);
    HRESULT GetDefaultTemplateContent(IDataModelScriptTemplate*);
    HRESULT EnumerateTemplates(IDataModelScriptTemplateEnumerator*);
}
enum IID_IDataModelScriptProviderEnumerator = GUID(0x95ba00e2, 0x704a, 0x4fe2, [0xa8, 0xf1, 0xa7, 0xe7, 0xd8, 0xfb, 0x9, 0x41]);
interface IDataModelScriptProviderEnumerator : IUnknown
{
    HRESULT Reset();
    HRESULT GetNext(IDataModelScriptProvider*);
}
enum IID_IDataModelScriptManager = GUID(0x6fd11e33, 0xe5ad, 0x410b, [0x80, 0x11, 0x68, 0xc6, 0xbc, 0x4b, 0xf8, 0xd]);
interface IDataModelScriptManager : IUnknown
{
    HRESULT GetDefaultNameBinder(IDataModelNameBinder*);
    HRESULT RegisterScriptProvider(IDataModelScriptProvider);
    HRESULT UnregisterScriptProvider(IDataModelScriptProvider);
    HRESULT FindProviderForScriptType(const(wchar)*, IDataModelScriptProvider*);
    HRESULT FindProviderForScriptExtension(const(wchar)*, IDataModelScriptProvider*);
    HRESULT EnumerateScriptProviders(IDataModelScriptProviderEnumerator*);
}
enum IID_IDynamicKeyProviderConcept = GUID(0xe7983fa1, 0x80a7, 0x498c, [0x98, 0x8f, 0x51, 0x8d, 0xdc, 0x5d, 0x40, 0x25]);
interface IDynamicKeyProviderConcept : IUnknown
{
    HRESULT GetKey(IModelObject, const(wchar)*, IModelObject*, IKeyStore*, bool*);
    HRESULT SetKey(IModelObject, const(wchar)*, IModelObject, IKeyStore);
    HRESULT EnumerateKeys(IModelObject, IKeyEnumerator*);
}
enum IID_IDynamicConceptProviderConcept = GUID(0x95a7f7dd, 0x602e, 0x483f, [0x9d, 0x6, 0xa1, 0x5c, 0xe, 0xe1, 0x31, 0x74]);
interface IDynamicConceptProviderConcept : IUnknown
{
    HRESULT GetConcept(IModelObject, const(GUID)*, IUnknown*, IKeyStore*, bool*);
    HRESULT SetConcept(IModelObject, const(GUID)*, IUnknown, IKeyStore);
    HRESULT NotifyParent(IModelObject);
    HRESULT NotifyParentChange(IModelObject);
    HRESULT NotifyDestruct();
}
alias ScriptChangeKind = int;
enum : int
{
    ScriptRename = 0x00000000,
}

enum IID_IDataModelScriptHostContext = GUID(0x14d366a, 0x1f23, 0x4981, [0x92, 0x19, 0xb2, 0xdb, 0x8b, 0x40, 0x20, 0x54]);
interface IDataModelScriptHostContext : IUnknown
{
    HRESULT NotifyScriptChange(IDataModelScript, ScriptChangeKind);
    HRESULT GetNamespaceObject(IModelObject*);
}
enum IID_IDebugHostScriptHost = GUID(0xb70334a4, 0xb92c, 0x4570, [0x93, 0xa1, 0xd3, 0xeb, 0x68, 0x66, 0x49, 0xa0]);
interface IDebugHostScriptHost : IUnknown
{
    HRESULT CreateContext(IDataModelScript, IDataModelScriptHostContext*);
}
enum IID_IDataModelNameBinder = GUID(0xaf352b7b, 0x8292, 0x4c01, [0xb3, 0x60, 0x2d, 0xc3, 0x69, 0x6c, 0x65, 0xe7]);
interface IDataModelNameBinder : IUnknown
{
    HRESULT BindValue(IModelObject, const(wchar)*, IModelObject*, IKeyStore*);
    HRESULT BindReference(IModelObject, const(wchar)*, IModelObject*, IKeyStore*);
    HRESULT EnumerateValues(IModelObject, IKeyEnumerator*);
    HRESULT EnumerateReferences(IModelObject, IKeyEnumerator*);
}
enum IID_IModelKeyReference2 = GUID(0x80e2f7c5, 0x7159, 0x4e92, [0x88, 0x7e, 0x7e, 0x3, 0x47, 0xe8, 0x84, 0x6]);
interface IModelKeyReference2 : IModelKeyReference
{
    HRESULT OverrideContextObject(IModelObject);
}
enum IID_IDebugHostEvaluator2 = GUID(0xa117a435, 0x1fb4, 0x4092, [0xa2, 0xab, 0xa9, 0x29, 0x57, 0x6c, 0x1e, 0x87]);
interface IDebugHostEvaluator2 : IDebugHostEvaluator
{
    HRESULT AssignTo(IModelObject, IModelObject, IModelObject*, IKeyStore*);
}
enum IID_IDataModelManager2 = GUID(0xf412c5ea, 0x2284, 0x4622, [0xa6, 0x60, 0xa6, 0x97, 0x16, 0xd, 0x33, 0x12]);
interface IDataModelManager2 : IDataModelManager
{
    HRESULT AcquireSubNamespace(const(wchar)*, const(wchar)*, const(wchar)*, IKeyStore, IModelObject*);
    HRESULT CreateTypedIntrinsicObjectEx(IDebugHostContext, VARIANT*, IDebugHostType, IModelObject*);
}
enum IID_IDebugHostMemory2 = GUID(0xeea033de, 0x38f6, 0x416b, [0xa2, 0x51, 0x1d, 0x37, 0x71, 0x0, 0x12, 0x70]);
interface IDebugHostMemory2 : IDebugHostMemory
{
    HRESULT LinearizeLocation(IDebugHostContext, Location, Location*);
}
enum IID_IDebugHostExtensibility = GUID(0x3c2b24e1, 0x11d0, 0x4f86, [0x8a, 0xe5, 0x4d, 0xf1, 0x66, 0xf7, 0x32, 0x53]);
interface IDebugHostExtensibility : IUnknown
{
    HRESULT CreateFunctionAlias(const(wchar)*, IModelObject);
    HRESULT DestroyFunctionAlias(const(wchar)*);
}
alias ScriptDebugState = int;
enum : int
{
    ScriptDebugNoDebugger   = 0x00000000,
    ScriptDebugNotExecuting = 0x00000001,
    ScriptDebugExecuting    = 0x00000002,
    ScriptDebugBreak        = 0x00000003,
}

alias ScriptDebugEventFilter = int;
enum : int
{
    ScriptDebugEventFilterEntry              = 0x00000000,
    ScriptDebugEventFilterException          = 0x00000001,
    ScriptDebugEventFilterUnhandledException = 0x00000002,
    ScriptDebugEventFilterAbort              = 0x00000003,
}

alias ScriptDebugEvent = int;
enum : int
{
    ScriptDebugBreakpoint = 0x00000000,
    ScriptDebugStep       = 0x00000001,
    ScriptDebugException  = 0x00000002,
    ScriptDebugAsyncBreak = 0x00000003,
}

alias ScriptExecutionKind = int;
enum : int
{
    ScriptExecutionNormal   = 0x00000000,
    ScriptExecutionStepIn   = 0x00000001,
    ScriptExecutionStepOut  = 0x00000002,
    ScriptExecutionStepOver = 0x00000003,
}

struct ScriptDebugPosition
{
    uint Line;
    uint Column;
}
struct ScriptDebugEventInformation
{
    ScriptDebugEvent DebugEvent;
    ScriptDebugPosition EventPosition;
    ScriptDebugPosition EventSpanEnd;
    union _u_e__Union
    {
        struct _ExceptionInformation_e__Struct
        {
            ubyte IsUncaught;
        }
        struct _BreakpointInformation_e__Struct
        {
            ulong BreakpointId;
        }
    }
}
enum IID_IDataModelScriptDebugClient = GUID(0x53159b6d, 0xd4c4, 0x471b, [0xa8, 0x63, 0x5b, 0x11, 0xc, 0xa8, 0x0, 0xca]);
interface IDataModelScriptDebugClient : IUnknown
{
    HRESULT NotifyDebugEvent(ScriptDebugEventInformation*, IDataModelScript, IModelObject, ScriptExecutionKind*);
}
enum IID_IDataModelScriptDebugVariableSetEnumerator = GUID(0xf9feed7, 0xd045, 0x4ac3, [0x98, 0xa8, 0xa9, 0x89, 0x42, 0xcf, 0x6a, 0x35]);
interface IDataModelScriptDebugVariableSetEnumerator : IUnknown
{
    HRESULT Reset();
    HRESULT GetNext(BSTR*, IModelObject*, IKeyStore*);
}
enum IID_IDataModelScriptDebugStackFrame = GUID(0xdec6ed5e, 0x6360, 0x4941, [0xab, 0x4c, 0xa2, 0x64, 0x9, 0xde, 0x4f, 0x82]);
interface IDataModelScriptDebugStackFrame : IUnknown
{
    HRESULT GetName(BSTR*);
    HRESULT GetPosition(ScriptDebugPosition*, ScriptDebugPosition*, BSTR*);
    HRESULT IsTransitionPoint(bool*);
    HRESULT GetTransition(IDataModelScript*, bool*);
    HRESULT Evaluate(const(wchar)*, IModelObject*);
    HRESULT EnumerateLocals(IDataModelScriptDebugVariableSetEnumerator*);
    HRESULT EnumerateArguments(IDataModelScriptDebugVariableSetEnumerator*);
}
enum IID_IDataModelScriptDebugStack = GUID(0x51364dd, 0xe449, 0x443e, [0x97, 0x62, 0xfe, 0x57, 0x8f, 0x4a, 0x54, 0x73]);
interface IDataModelScriptDebugStack : IUnknown
{
    ulong GetFrameCount();
    HRESULT GetStackFrame(ulong, IDataModelScriptDebugStackFrame*);
}
enum IID_IDataModelScriptDebugBreakpoint = GUID(0x6bb27b35, 0x2e6, 0x47cb, [0x90, 0xa0, 0x53, 0x71, 0x24, 0x40, 0x32, 0xde]);
interface IDataModelScriptDebugBreakpoint : IUnknown
{
    ulong GetId();
    bool IsEnabled();
    void Enable();
    void Disable();
    void Remove();
    HRESULT GetPosition(ScriptDebugPosition*, ScriptDebugPosition*, BSTR*);
}
enum IID_IDataModelScriptDebugBreakpointEnumerator = GUID(0x39484a75, 0xb4f3, 0x4799, [0x86, 0xda, 0x69, 0x1a, 0xfa, 0x57, 0xb2, 0x99]);
interface IDataModelScriptDebugBreakpointEnumerator : IUnknown
{
    HRESULT Reset();
    HRESULT GetNext(IDataModelScriptDebugBreakpoint*);
}
enum IID_IDataModelScriptDebug = GUID(0xde8e0945, 0x9750, 0x4471, [0xab, 0x76, 0xa8, 0xf7, 0x9d, 0x6e, 0xc3, 0x50]);
interface IDataModelScriptDebug : IUnknown
{
    ScriptDebugState GetDebugState();
    HRESULT GetCurrentPosition(ScriptDebugPosition*, ScriptDebugPosition*, BSTR*);
    HRESULT GetStack(IDataModelScriptDebugStack*);
    HRESULT SetBreakpoint(uint, uint, IDataModelScriptDebugBreakpoint*);
    HRESULT FindBreakpointById(ulong, IDataModelScriptDebugBreakpoint*);
    HRESULT EnumerateBreakpoints(IDataModelScriptDebugBreakpointEnumerator*);
    HRESULT GetEventFilter(ScriptDebugEventFilter, bool*);
    HRESULT SetEventFilter(ScriptDebugEventFilter, ubyte);
    HRESULT StartDebugging(IDataModelScriptDebugClient);
    HRESULT StopDebugging(IDataModelScriptDebugClient);
}
enum IID_IDataModelScriptDebug2 = GUID(0xcbb10ed3, 0x839e, 0x426c, [0x92, 0x43, 0xe2, 0x35, 0x35, 0xc1, 0xae, 0x1a]);
interface IDataModelScriptDebug2 : IDataModelScriptDebug
{
    HRESULT SetBreakpointAtFunction(const(wchar)*, IDataModelScriptDebugBreakpoint*);
}
enum IID_IDebugHostModule2 = GUID(0xb51887e8, 0xbcd0, 0x4e8f, [0xa8, 0xc7, 0x43, 0x43, 0x98, 0xb7, 0x8c, 0x37]);
interface IDebugHostModule2 : IDebugHostModule
{
    HRESULT FindContainingSymbolByRVA(ulong, IDebugHostSymbol*, ulong*);
}
enum IID_IComparableConcept = GUID(0xa7830646, 0x9f0c, 0x4a31, [0xba, 0x19, 0x50, 0x3f, 0x33, 0xe6, 0xc8, 0xa3]);
interface IComparableConcept : IUnknown
{
    HRESULT CompareObjects(IModelObject, IModelObject, int*);
}
enum IID_IEquatableConcept = GUID(0xc52d5d3d, 0x609d, 0x4d5d, [0x8a, 0x82, 0x46, 0xb0, 0xac, 0xde, 0xc4, 0xf4]);
interface IEquatableConcept : IUnknown
{
    HRESULT AreObjectsEqual(IModelObject, IModelObject, bool*);
}
alias PWINDBG_OUTPUT_ROUTINE = void function(const(char)*);
alias PWINDBG_GET_EXPRESSION = ulong function(const(char)*);
alias PWINDBG_GET_EXPRESSION32 = uint function(const(char)*);
alias PWINDBG_GET_EXPRESSION64 = ulong function(const(char)*);
alias PWINDBG_GET_SYMBOL = void function(void*, PSTR, ulong*);
alias PWINDBG_GET_SYMBOL32 = void function(uint, PSTR, uint*);
alias PWINDBG_GET_SYMBOL64 = void function(ulong, PSTR, ulong*);
alias PWINDBG_DISASM = uint function(ulong*, const(char)*, uint);
alias PWINDBG_DISASM32 = uint function(uint*, const(char)*, uint);
alias PWINDBG_DISASM64 = uint function(ulong*, const(char)*, uint);
alias PWINDBG_CHECK_CONTROL_C = uint function();
alias PWINDBG_READ_PROCESS_MEMORY_ROUTINE = uint function(ulong, void*, uint, uint*);
alias PWINDBG_READ_PROCESS_MEMORY_ROUTINE32 = uint function(uint, void*, uint, uint*);
alias PWINDBG_READ_PROCESS_MEMORY_ROUTINE64 = uint function(ulong, void*, uint, uint*);
alias PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE = uint function(ulong, const(void)*, uint, uint*);
alias PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32 = uint function(uint, const(void)*, uint, uint*);
alias PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE64 = uint function(ulong, const(void)*, uint, uint*);
alias PWINDBG_GET_THREAD_CONTEXT_ROUTINE = uint function(uint, CONTEXT*, uint);
alias PWINDBG_SET_THREAD_CONTEXT_ROUTINE = uint function(uint, CONTEXT*, uint);
alias PWINDBG_IOCTL_ROUTINE = uint function(ushort, void*, uint);
alias PWINDBG_OLDKD_READ_PHYSICAL_MEMORY = uint function(ulong, void*, uint, uint*);
alias PWINDBG_OLDKD_WRITE_PHYSICAL_MEMORY = uint function(ulong, void*, uint, uint*);
struct EXTSTACKTRACE
{
    uint FramePointer;
    uint ProgramCounter;
    uint ReturnAddress;
    uint[4] Args;
}
struct EXTSTACKTRACE32
{
    uint FramePointer;
    uint ProgramCounter;
    uint ReturnAddress;
    uint[4] Args;
}
struct EXTSTACKTRACE64
{
    ulong FramePointer;
    ulong ProgramCounter;
    ulong ReturnAddress;
    ulong[4] Args;
}
alias PWINDBG_STACKTRACE_ROUTINE = uint function(uint, uint, uint, EXTSTACKTRACE*, uint);
alias PWINDBG_STACKTRACE_ROUTINE32 = uint function(uint, uint, uint, EXTSTACKTRACE32*, uint);
alias PWINDBG_STACKTRACE_ROUTINE64 = uint function(ulong, ulong, ulong, EXTSTACKTRACE64*, uint);
struct WINDBG_EXTENSION_APIS
{
    uint nSize;
    PWINDBG_OUTPUT_ROUTINE lpOutputRoutine;
    PWINDBG_GET_EXPRESSION lpGetExpressionRoutine;
    PWINDBG_GET_SYMBOL lpGetSymbolRoutine;
    PWINDBG_DISASM lpDisasmRoutine;
    PWINDBG_CHECK_CONTROL_C lpCheckControlCRoutine;
    PWINDBG_READ_PROCESS_MEMORY_ROUTINE lpReadProcessMemoryRoutine;
    PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE lpWriteProcessMemoryRoutine;
    PWINDBG_GET_THREAD_CONTEXT_ROUTINE lpGetThreadContextRoutine;
    PWINDBG_SET_THREAD_CONTEXT_ROUTINE lpSetThreadContextRoutine;
    PWINDBG_IOCTL_ROUTINE lpIoctlRoutine;
    PWINDBG_STACKTRACE_ROUTINE lpStackTraceRoutine;
}
struct WINDBG_EXTENSION_APIS32
{
    uint nSize;
    PWINDBG_OUTPUT_ROUTINE lpOutputRoutine;
    PWINDBG_GET_EXPRESSION32 lpGetExpressionRoutine;
    PWINDBG_GET_SYMBOL32 lpGetSymbolRoutine;
    PWINDBG_DISASM32 lpDisasmRoutine;
    PWINDBG_CHECK_CONTROL_C lpCheckControlCRoutine;
    PWINDBG_READ_PROCESS_MEMORY_ROUTINE32 lpReadProcessMemoryRoutine;
    PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32 lpWriteProcessMemoryRoutine;
    PWINDBG_GET_THREAD_CONTEXT_ROUTINE lpGetThreadContextRoutine;
    PWINDBG_SET_THREAD_CONTEXT_ROUTINE lpSetThreadContextRoutine;
    PWINDBG_IOCTL_ROUTINE lpIoctlRoutine;
    PWINDBG_STACKTRACE_ROUTINE32 lpStackTraceRoutine;
}
struct WINDBG_EXTENSION_APIS64
{
    uint nSize;
    PWINDBG_OUTPUT_ROUTINE lpOutputRoutine;
    PWINDBG_GET_EXPRESSION64 lpGetExpressionRoutine;
    PWINDBG_GET_SYMBOL64 lpGetSymbolRoutine;
    PWINDBG_DISASM64 lpDisasmRoutine;
    PWINDBG_CHECK_CONTROL_C lpCheckControlCRoutine;
    PWINDBG_READ_PROCESS_MEMORY_ROUTINE64 lpReadProcessMemoryRoutine;
    PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE64 lpWriteProcessMemoryRoutine;
    PWINDBG_GET_THREAD_CONTEXT_ROUTINE lpGetThreadContextRoutine;
    PWINDBG_SET_THREAD_CONTEXT_ROUTINE lpSetThreadContextRoutine;
    PWINDBG_IOCTL_ROUTINE lpIoctlRoutine;
    PWINDBG_STACKTRACE_ROUTINE64 lpStackTraceRoutine;
}
struct WINDBG_OLD_EXTENSION_APIS
{
    uint nSize;
    PWINDBG_OUTPUT_ROUTINE lpOutputRoutine;
    PWINDBG_GET_EXPRESSION lpGetExpressionRoutine;
    PWINDBG_GET_SYMBOL lpGetSymbolRoutine;
    PWINDBG_DISASM lpDisasmRoutine;
    PWINDBG_CHECK_CONTROL_C lpCheckControlCRoutine;
}
struct WINDBG_OLDKD_EXTENSION_APIS
{
    uint nSize;
    PWINDBG_OUTPUT_ROUTINE lpOutputRoutine;
    PWINDBG_GET_EXPRESSION32 lpGetExpressionRoutine;
    PWINDBG_GET_SYMBOL32 lpGetSymbolRoutine;
    PWINDBG_DISASM32 lpDisasmRoutine;
    PWINDBG_CHECK_CONTROL_C lpCheckControlCRoutine;
    PWINDBG_READ_PROCESS_MEMORY_ROUTINE32 lpReadVirtualMemRoutine;
    PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32 lpWriteVirtualMemRoutine;
    PWINDBG_OLDKD_READ_PHYSICAL_MEMORY lpReadPhysicalMemRoutine;
    PWINDBG_OLDKD_WRITE_PHYSICAL_MEMORY lpWritePhysicalMemRoutine;
}
alias PWINDBG_OLD_EXTENSION_ROUTINE = void function(uint, WINDBG_EXTENSION_APIS*, const(char)*);
alias PWINDBG_EXTENSION_ROUTINE = void function(HANDLE, HANDLE, uint, uint, const(char)*);
alias PWINDBG_EXTENSION_ROUTINE32 = void function(HANDLE, HANDLE, uint, uint, const(char)*);
alias PWINDBG_EXTENSION_ROUTINE64 = void function(HANDLE, HANDLE, ulong, uint, const(char)*);
alias PWINDBG_OLDKD_EXTENSION_ROUTINE = void function(uint, WINDBG_OLDKD_EXTENSION_APIS*, const(char)*);
alias PWINDBG_EXTENSION_DLL_INIT = void function(WINDBG_EXTENSION_APIS*, ushort, ushort);
alias PWINDBG_EXTENSION_DLL_INIT32 = void function(WINDBG_EXTENSION_APIS32*, ushort, ushort);
alias PWINDBG_EXTENSION_DLL_INIT64 = void function(WINDBG_EXTENSION_APIS64*, ushort, ushort);
alias PWINDBG_CHECK_VERSION = uint function();
struct EXT_API_VERSION
{
    ushort MajorVersion;
    ushort MinorVersion;
    ushort Revision;
    ushort Reserved;
}
alias PWINDBG_EXTENSION_API_VERSION = EXT_API_VERSION* function();
struct PROCESSORINFO
{
    ushort Processor;
    ushort NumberProcessors;
}
struct READCONTROLSPACE
{
    ushort Processor;
    uint Address;
    uint BufLen;
    ubyte[1] Buf;
}
struct READCONTROLSPACE32
{
    ushort Processor;
    uint Address;
    uint BufLen;
    ubyte[1] Buf;
}
struct READCONTROLSPACE64
{
    ushort Processor;
    ulong Address;
    uint BufLen;
    ubyte[1] Buf;
}
struct IOSPACE
{
    uint Address;
    uint Length;
    uint Data;
}
struct IOSPACE32
{
    uint Address;
    uint Length;
    uint Data;
}
struct IOSPACE64
{
    ulong Address;
    uint Length;
    uint Data;
}
struct IOSPACE_EX
{
    uint Address;
    uint Length;
    uint Data;
    uint InterfaceType;
    uint BusNumber;
    uint AddressSpace;
}
struct IOSPACE_EX32
{
    uint Address;
    uint Length;
    uint Data;
    uint InterfaceType;
    uint BusNumber;
    uint AddressSpace;
}
struct IOSPACE_EX64
{
    ulong Address;
    uint Length;
    uint Data;
    uint InterfaceType;
    uint BusNumber;
    uint AddressSpace;
}
struct BUSDATA
{
    uint BusDataType;
    uint BusNumber;
    uint SlotNumber;
    void* Buffer;
    uint Offset;
    uint Length;
}
struct SEARCHMEMORY
{
    ulong SearchAddress;
    ulong SearchLength;
    ulong FoundAddress;
    uint PatternLength;
    void* Pattern;
}
struct PHYSICAL
{
    ulong Address;
    uint BufLen;
    ubyte[1] Buf;
}
struct PHYSICAL_WITH_FLAGS
{
    ulong Address;
    uint BufLen;
    uint Flags;
    ubyte[1] Buf;
}
struct READ_WRITE_MSR
{
    uint Msr;
    long Value;
}
struct GET_SET_SYMPATH
{
    const(char)* Args;
    PSTR Result;
    int Length;
}
struct GET_TEB_ADDRESS
{
    ulong Address;
}
struct GET_PEB_ADDRESS
{
    ulong CurrentThread;
    ulong Address;
}
struct GET_CURRENT_THREAD_ADDRESS
{
    uint Processor;
    ulong Address;
}
struct GET_CURRENT_PROCESS_ADDRESS
{
    uint Processor;
    ulong CurrentThread;
    ulong Address;
}
struct GET_INPUT_LINE
{
    const(char)* Prompt;
    PSTR Buffer;
    uint BufferSize;
    uint InputSize;
}
struct GET_EXPRESSION_EX
{
    const(char)* Expression;
    const(char)* Remainder;
    ulong Value;
}
struct TRANSLATE_VIRTUAL_TO_PHYSICAL
{
    ulong Virtual;
    ulong Physical;
}
struct VIRTUAL_TO_PHYSICAL
{
    uint Status;
    uint Size;
    ulong PdeAddress;
    ulong Virtual;
    ulong Physical;
}
struct PHYSICAL_TO_VIRTUAL
{
    uint Status;
    uint Size;
    ulong PdeAddress;
}
struct GET_CONTEXT_EX
{
    uint Status;
    uint ContextSize;
    void* pContext;
}
struct POINTER_SEARCH_PHYSICAL
{
    ulong Offset;
    ulong Length;
    ulong PointerMin;
    ulong PointerMax;
    uint Flags;
    ulong* MatchOffsets;
    uint MatchOffsetsSize;
    uint MatchOffsetsCount;
}
struct WDBGEXTS_THREAD_OS_INFO
{
    uint ThreadId;
    uint ExitStatus;
    uint PriorityClass;
    uint Priority;
    ulong CreateTime;
    ulong ExitTime;
    ulong KernelTime;
    ulong UserTime;
    ulong StartOffset;
    ulong Affinity;
}
struct WDBGEXTS_CLR_DATA_INTERFACE
{
    const(GUID)* Iid;
    void* Iface;
}
struct EXT_MATCH_PATTERN_A
{
    const(char)* Str;
    const(char)* Pattern;
    uint CaseSensitive;
}
struct EXT_FIND_FILE
{
    const(wchar)* FileName;
    ulong IndexedSize;
    uint ImageTimeDateStamp;
    uint ImageCheckSum;
    void* ExtraInfo;
    uint ExtraInfoSize;
    uint Flags;
    void* FileMapping;
    ulong FileMappingSize;
    HANDLE FileHandle;
    PWSTR FoundFileName;
    uint FoundFileNameChars;
}
struct DEBUG_TYPED_DATA
{
    ulong ModBase;
    ulong Offset;
    ulong EngineHandle;
    ulong Data;
    uint Size;
    uint Flags;
    uint TypeId;
    uint BaseTypeId;
    uint Tag;
    uint Register;
    ulong[9] Internal;
}
alias EXT_TDOP = int;
enum : int
{
    EXT_TDOP_COPY                         = 0x00000000,
    EXT_TDOP_RELEASE                      = 0x00000001,
    EXT_TDOP_SET_FROM_EXPR                = 0x00000002,
    EXT_TDOP_SET_FROM_U64_EXPR            = 0x00000003,
    EXT_TDOP_GET_FIELD                    = 0x00000004,
    EXT_TDOP_EVALUATE                     = 0x00000005,
    EXT_TDOP_GET_TYPE_NAME                = 0x00000006,
    EXT_TDOP_OUTPUT_TYPE_NAME             = 0x00000007,
    EXT_TDOP_OUTPUT_SIMPLE_VALUE          = 0x00000008,
    EXT_TDOP_OUTPUT_FULL_VALUE            = 0x00000009,
    EXT_TDOP_HAS_FIELD                    = 0x0000000a,
    EXT_TDOP_GET_FIELD_OFFSET             = 0x0000000b,
    EXT_TDOP_GET_ARRAY_ELEMENT            = 0x0000000c,
    EXT_TDOP_GET_DEREFERENCE              = 0x0000000d,
    EXT_TDOP_GET_TYPE_SIZE                = 0x0000000e,
    EXT_TDOP_OUTPUT_TYPE_DEFINITION       = 0x0000000f,
    EXT_TDOP_GET_POINTER_TO               = 0x00000010,
    EXT_TDOP_SET_FROM_TYPE_ID_AND_U64     = 0x00000011,
    EXT_TDOP_SET_PTR_FROM_TYPE_ID_AND_U64 = 0x00000012,
    EXT_TDOP_COUNT                        = 0x00000013,
}

struct EXT_TYPED_DATA
{
    EXT_TDOP Operation;
    uint Flags;
    DEBUG_TYPED_DATA InData;
    DEBUG_TYPED_DATA OutData;
    uint InStrIndex;
    uint In32;
    uint Out32;
    ulong In64;
    ulong Out64;
    uint StrBufferIndex;
    uint StrBufferChars;
    uint StrCharsNeeded;
    uint DataBufferIndex;
    uint DataBufferBytes;
    uint DataBytesNeeded;
    HRESULT Status;
    ulong[8] Reserved;
}
struct WDBGEXTS_QUERY_INTERFACE
{
    const(GUID)* Iid;
    void* Iface;
}
struct WDBGEXTS_DISASSEMBLE_BUFFER
{
    ulong InOffset;
    ulong OutOffset;
    uint AddrFlags;
    uint FormatFlags;
    uint DataBufferBytes;
    uint DisasmBufferChars;
    void* DataBuffer;
    PWSTR DisasmBuffer;
    ulong[3] Reserved0;
}
struct WDBGEXTS_MODULE_IN_RANGE
{
    ulong Start;
    ulong End;
    ulong FoundModBase;
    uint FoundModSize;
}
alias DBGKD_MAJOR_TYPES = int;
enum : int
{
    DBGKD_MAJOR_NT          = 0x00000000,
    DBGKD_MAJOR_XBOX        = 0x00000001,
    DBGKD_MAJOR_BIG         = 0x00000002,
    DBGKD_MAJOR_EXDI        = 0x00000003,
    DBGKD_MAJOR_NTBD        = 0x00000004,
    DBGKD_MAJOR_EFI         = 0x00000005,
    DBGKD_MAJOR_TNT         = 0x00000006,
    DBGKD_MAJOR_SINGULARITY = 0x00000007,
    DBGKD_MAJOR_HYPERVISOR  = 0x00000008,
    DBGKD_MAJOR_MIDORI      = 0x00000009,
    DBGKD_MAJOR_CE          = 0x0000000a,
    DBGKD_MAJOR_COUNT       = 0x0000000b,
}

struct DBGKD_GET_VERSION32
{
    ushort MajorVersion;
    ushort MinorVersion;
    ushort ProtocolVersion;
    ushort Flags;
    uint KernBase;
    uint PsLoadedModuleList;
    ushort MachineType;
    ushort ThCallbackStack;
    ushort NextCallback;
    ushort FramePointer;
    uint KiCallUserMode;
    uint KeUserCallbackDispatcher;
    uint BreakpointWithStatus;
    uint DebuggerDataList;
}
struct DBGKD_DEBUG_DATA_HEADER32
{
    LIST_ENTRY32 List;
    uint OwnerTag;
    uint Size;
}
struct KDDEBUGGER_DATA32
{
    DBGKD_DEBUG_DATA_HEADER32 Header;
    uint KernBase;
    uint BreakpointWithStatus;
    uint SavedContext;
    ushort ThCallbackStack;
    ushort NextCallback;
    ushort FramePointer;
    ushort _bitfield0;
    uint KiCallUserMode;
    uint KeUserCallbackDispatcher;
    uint PsLoadedModuleList;
    uint PsActiveProcessHead;
    uint PspCidTable;
    uint ExpSystemResourcesList;
    uint ExpPagedPoolDescriptor;
    uint ExpNumberOfPagedPools;
    uint KeTimeIncrement;
    uint KeBugCheckCallbackListHead;
    uint KiBugcheckData;
    uint IopErrorLogListHead;
    uint ObpRootDirectoryObject;
    uint ObpTypeObjectType;
    uint MmSystemCacheStart;
    uint MmSystemCacheEnd;
    uint MmSystemCacheWs;
    uint MmPfnDatabase;
    uint MmSystemPtesStart;
    uint MmSystemPtesEnd;
    uint MmSubsectionBase;
    uint MmNumberOfPagingFiles;
    uint MmLowestPhysicalPage;
    uint MmHighestPhysicalPage;
    uint MmNumberOfPhysicalPages;
    uint MmMaximumNonPagedPoolInBytes;
    uint MmNonPagedSystemStart;
    uint MmNonPagedPoolStart;
    uint MmNonPagedPoolEnd;
    uint MmPagedPoolStart;
    uint MmPagedPoolEnd;
    uint MmPagedPoolInformation;
    uint MmPageSize;
    uint MmSizeOfPagedPoolInBytes;
    uint MmTotalCommitLimit;
    uint MmTotalCommittedPages;
    uint MmSharedCommit;
    uint MmDriverCommit;
    uint MmProcessCommit;
    uint MmPagedPoolCommit;
    uint MmExtendedCommit;
    uint MmZeroedPageListHead;
    uint MmFreePageListHead;
    uint MmStandbyPageListHead;
    uint MmModifiedPageListHead;
    uint MmModifiedNoWritePageListHead;
    uint MmAvailablePages;
    uint MmResidentAvailablePages;
    uint PoolTrackTable;
    uint NonPagedPoolDescriptor;
    uint MmHighestUserAddress;
    uint MmSystemRangeStart;
    uint MmUserProbeAddress;
    uint KdPrintCircularBuffer;
    uint KdPrintCircularBufferEnd;
    uint KdPrintWritePointer;
    uint KdPrintRolloverCount;
    uint MmLoadedUserImageList;
}
struct DBGKD_GET_VERSION64
{
    ushort MajorVersion;
    ushort MinorVersion;
    ubyte ProtocolVersion;
    ubyte KdSecondaryVersion;
    ushort Flags;
    ushort MachineType;
    ubyte MaxPacketType;
    ubyte MaxStateChange;
    ubyte MaxManipulate;
    ubyte Simulation;
    ushort[1] Unused;
    ulong KernBase;
    ulong PsLoadedModuleList;
    ulong DebuggerDataList;
}
struct DBGKD_DEBUG_DATA_HEADER64
{
    LIST_ENTRY64 List;
    uint OwnerTag;
    uint Size;
}
struct KDDEBUGGER_DATA64
{
    DBGKD_DEBUG_DATA_HEADER64 Header;
    ulong KernBase;
    ulong BreakpointWithStatus;
    ulong SavedContext;
    ushort ThCallbackStack;
    ushort NextCallback;
    ushort FramePointer;
    ushort _bitfield0;
    ulong KiCallUserMode;
    ulong KeUserCallbackDispatcher;
    ulong PsLoadedModuleList;
    ulong PsActiveProcessHead;
    ulong PspCidTable;
    ulong ExpSystemResourcesList;
    ulong ExpPagedPoolDescriptor;
    ulong ExpNumberOfPagedPools;
    ulong KeTimeIncrement;
    ulong KeBugCheckCallbackListHead;
    ulong KiBugcheckData;
    ulong IopErrorLogListHead;
    ulong ObpRootDirectoryObject;
    ulong ObpTypeObjectType;
    ulong MmSystemCacheStart;
    ulong MmSystemCacheEnd;
    ulong MmSystemCacheWs;
    ulong MmPfnDatabase;
    ulong MmSystemPtesStart;
    ulong MmSystemPtesEnd;
    ulong MmSubsectionBase;
    ulong MmNumberOfPagingFiles;
    ulong MmLowestPhysicalPage;
    ulong MmHighestPhysicalPage;
    ulong MmNumberOfPhysicalPages;
    ulong MmMaximumNonPagedPoolInBytes;
    ulong MmNonPagedSystemStart;
    ulong MmNonPagedPoolStart;
    ulong MmNonPagedPoolEnd;
    ulong MmPagedPoolStart;
    ulong MmPagedPoolEnd;
    ulong MmPagedPoolInformation;
    ulong MmPageSize;
    ulong MmSizeOfPagedPoolInBytes;
    ulong MmTotalCommitLimit;
    ulong MmTotalCommittedPages;
    ulong MmSharedCommit;
    ulong MmDriverCommit;
    ulong MmProcessCommit;
    ulong MmPagedPoolCommit;
    ulong MmExtendedCommit;
    ulong MmZeroedPageListHead;
    ulong MmFreePageListHead;
    ulong MmStandbyPageListHead;
    ulong MmModifiedPageListHead;
    ulong MmModifiedNoWritePageListHead;
    ulong MmAvailablePages;
    ulong MmResidentAvailablePages;
    ulong PoolTrackTable;
    ulong NonPagedPoolDescriptor;
    ulong MmHighestUserAddress;
    ulong MmSystemRangeStart;
    ulong MmUserProbeAddress;
    ulong KdPrintCircularBuffer;
    ulong KdPrintCircularBufferEnd;
    ulong KdPrintWritePointer;
    ulong KdPrintRolloverCount;
    ulong MmLoadedUserImageList;
    ulong NtBuildLab;
    ulong KiNormalSystemCall;
    ulong KiProcessorBlock;
    ulong MmUnloadedDrivers;
    ulong MmLastUnloadedDriver;
    ulong MmTriageActionTaken;
    ulong MmSpecialPoolTag;
    ulong KernelVerifier;
    ulong MmVerifierData;
    ulong MmAllocatedNonPagedPool;
    ulong MmPeakCommitment;
    ulong MmTotalCommitLimitMaximum;
    ulong CmNtCSDVersion;
    ulong MmPhysicalMemoryBlock;
    ulong MmSessionBase;
    ulong MmSessionSize;
    ulong MmSystemParentTablePage;
    ulong MmVirtualTranslationBase;
    ushort OffsetKThreadNextProcessor;
    ushort OffsetKThreadTeb;
    ushort OffsetKThreadKernelStack;
    ushort OffsetKThreadInitialStack;
    ushort OffsetKThreadApcProcess;
    ushort OffsetKThreadState;
    ushort OffsetKThreadBStore;
    ushort OffsetKThreadBStoreLimit;
    ushort SizeEProcess;
    ushort OffsetEprocessPeb;
    ushort OffsetEprocessParentCID;
    ushort OffsetEprocessDirectoryTableBase;
    ushort SizePrcb;
    ushort OffsetPrcbDpcRoutine;
    ushort OffsetPrcbCurrentThread;
    ushort OffsetPrcbMhz;
    ushort OffsetPrcbCpuType;
    ushort OffsetPrcbVendorString;
    ushort OffsetPrcbProcStateContext;
    ushort OffsetPrcbNumber;
    ushort SizeEThread;
    ubyte L1tfHighPhysicalBitIndex;
    ubyte L1tfSwizzleBitIndex;
    uint Padding0;
    ulong KdPrintCircularBufferPtr;
    ulong KdPrintBufferSize;
    ulong KeLoaderBlock;
    ushort SizePcr;
    ushort OffsetPcrSelfPcr;
    ushort OffsetPcrCurrentPrcb;
    ushort OffsetPcrContainedPrcb;
    ushort OffsetPcrInitialBStore;
    ushort OffsetPcrBStoreLimit;
    ushort OffsetPcrInitialStack;
    ushort OffsetPcrStackLimit;
    ushort OffsetPrcbPcrPage;
    ushort OffsetPrcbProcStateSpecialReg;
    ushort GdtR0Code;
    ushort GdtR0Data;
    ushort GdtR0Pcr;
    ushort GdtR3Code;
    ushort GdtR3Data;
    ushort GdtR3Teb;
    ushort GdtLdt;
    ushort GdtTss;
    ushort Gdt64R3CmCode;
    ushort Gdt64R3CmTeb;
    ulong IopNumTriageDumpDataBlocks;
    ulong IopTriageDumpDataBlocks;
    ulong VfCrashDataBlock;
    ulong MmBadPagesDetected;
    ulong MmZeroedPageSingleBitErrorsDetected;
    ulong EtwpDebuggerData;
    ushort OffsetPrcbContext;
    ushort OffsetPrcbMaxBreakpoints;
    ushort OffsetPrcbMaxWatchpoints;
    uint OffsetKThreadStackLimit;
    uint OffsetKThreadStackBase;
    uint OffsetKThreadQueueListEntry;
    uint OffsetEThreadIrpList;
    ushort OffsetPrcbIdleThread;
    ushort OffsetPrcbNormalDpcState;
    ushort OffsetPrcbDpcStack;
    ushort OffsetPrcbIsrStack;
    ushort SizeKDPC_STACK_FRAME;
    ushort OffsetKPriQueueThreadListHead;
    ushort OffsetKThreadWaitReason;
    ushort Padding1;
    ulong PteBase;
    ulong RetpolineStubFunctionTable;
    uint RetpolineStubFunctionTableSize;
    uint RetpolineStubOffset;
    uint RetpolineStubSize;
    ushort OffsetEProcessMmHotPatchContext;
    uint OffsetKThreadShadowStackLimit;
    uint OffsetKThreadShadowStackBase;
    ulong ShadowStackEnabled;
    ulong PointerAuthMask;
    ushort OffsetPrcbExceptionStack;
}
alias PSYM_DUMP_FIELD_CALLBACK = uint function(FIELD_INFO*, void*);
struct FIELD_INFO
{
    ubyte* fName;
    ubyte* printName;
    uint size;
    uint fOptions;
    ulong address;
    union
    {
        void* fieldCallBack;
        void* pBuffer;
    }
    uint TypeId;
    uint FieldOffset;
    uint BufferSize;
    struct _BitField
    {
        ushort Position;
        ushort Size;
    }
    uint _bitfield0;
}
struct SYM_DUMP_PARAM
{
    uint size;
    ubyte* sName;
    uint Options;
    ulong addr;
    FIELD_INFO* listLink;
    union
    {
        void* Context;
        void* pBuffer;
    }
    PSYM_DUMP_FIELD_CALLBACK CallbackRoutine;
    uint nFields;
    FIELD_INFO* Fields;
    ulong ModBase;
    uint TypeId;
    uint TypeSize;
    uint BufferSize;
    uint _bitfield0;
}
struct DEBUG_DEVICE_OBJECT_INFO
{
    uint SizeOfStruct;
    ulong DevObjAddress;
    uint ReferenceCount;
    BOOL QBusy;
    ulong DriverObject;
    ulong CurrentIrp;
    ulong DevExtension;
    ulong DevObjExtension;
}
alias PGET_DEVICE_OBJECT_INFO = HRESULT function(IDebugClient, ulong, DEBUG_DEVICE_OBJECT_INFO*);
struct DEBUG_DRIVER_OBJECT_INFO
{
    uint SizeOfStruct;
    uint DriverSize;
    ulong DriverObjAddress;
    ulong DriverStart;
    ulong DriverExtension;
    ulong DeviceObject;
    struct _DriverName_e__Struct
    {
        ushort Length;
        ushort MaximumLength;
        ulong Buffer;
    }
}
alias PGET_DRIVER_OBJECT_INFO = HRESULT function(IDebugClient, ulong, DEBUG_DRIVER_OBJECT_INFO*);
struct PROCESS_COMMIT_USAGE
{
    ubyte[16] ImageFileName;
    ulong ClientId;
    ulong ProcessAddress;
    ulong CommitCharge;
    ulong SharedCommitCharge;
    ulong ReleasedCommitDebt;
    ulong Reserved;
}
alias PGET_PROCESS_COMMIT = HRESULT function(IDebugClient, ulong*, uint*, PROCESS_COMMIT_USAGE**);
alias PGET_FULL_IMAGE_NAME = HRESULT function(IDebugClient, ulong, PSTR*);
struct DEBUG_CPU_SPEED_INFO
{
    uint SizeOfStruct;
    uint CurrentSpeed;
    uint RatedSpeed;
    wchar[256] NameString;
}
alias PGET_CPU_PSPEED_INFO = HRESULT function(IDebugClient, DEBUG_CPU_SPEED_INFO*);
struct DEBUG_CPU_MICROCODE_VERSION
{
    uint SizeOfStruct;
    long CachedSignature;
    long InitialSignature;
    uint ProcessorModel;
    uint ProcessorFamily;
    uint ProcessorStepping;
    uint ProcessorArchRev;
}
alias PGET_CPU_MICROCODE_VERSION = HRESULT function(IDebugClient, DEBUG_CPU_MICROCODE_VERSION*);
struct DEBUG_SMBIOS_INFO
{
    uint SizeOfStruct;
    ubyte SmbiosMajorVersion;
    ubyte SmbiosMinorVersion;
    ubyte DMIVersion;
    uint TableSize;
    ubyte BiosMajorRelease;
    ubyte BiosMinorRelease;
    ubyte FirmwareMajorRelease;
    ubyte FirmwareMinorRelease;
    CHAR[64] BaseBoardManufacturer;
    CHAR[64] BaseBoardProduct;
    CHAR[64] BaseBoardVersion;
    CHAR[64] BiosReleaseDate;
    CHAR[64] BiosVendor;
    CHAR[64] BiosVersion;
    CHAR[64] SystemFamily;
    CHAR[64] SystemManufacturer;
    CHAR[64] SystemProductName;
    CHAR[64] SystemSKU;
    CHAR[64] SystemVersion;
}
alias PGET_SMBIOS_INFO = HRESULT function(IDebugClient, DEBUG_SMBIOS_INFO*);
struct DEBUG_IRP_STACK_INFO
{
    ubyte Major;
    ubyte Minor;
    ulong DeviceObject;
    ulong FileObject;
    ulong CompletionRoutine;
    ulong StackAddress;
}
struct DEBUG_IRP_INFO
{
    uint SizeOfStruct;
    ulong IrpAddress;
    uint IoStatus;
    uint StackCount;
    uint CurrentLocation;
    ulong MdlAddress;
    ulong Thread;
    ulong CancelRoutine;
    DEBUG_IRP_STACK_INFO CurrentStack;
    DEBUG_IRP_STACK_INFO[10] Stack;
}
alias PGET_IRP_INFO = HRESULT function(IDebugClient, ulong, DEBUG_IRP_INFO*);
struct DEBUG_PNP_TRIAGE_INFO
{
    uint SizeOfStruct;
    ulong Lock_Address;
    int Lock_ActiveCount;
    uint Lock_ContentionCount;
    uint Lock_NumberOfExclusiveWaiters;
    uint Lock_NumberOfSharedWaiters;
    ushort Lock_Flag;
    ulong TriagedThread;
    int ThreadCount;
    ulong TriagedThread_WaitTime;
}
alias PGET_PNP_TRIAGE_INFO = HRESULT function(IDebugClient, DEBUG_PNP_TRIAGE_INFO*);
struct DEBUG_POOL_DATA
{
    uint SizeofStruct;
    ulong PoolBlock;
    ulong Pool;
    uint PreviousSize;
    uint Size;
    uint PoolTag;
    ulong ProcessBilled;
    union
    {
        struct
        {
            uint _bitfield0;
        }
        uint AsUlong;
    }
    ulong[4] Reserved2;
    CHAR[64] PoolTagDescription;
}
alias PGET_POOL_DATA = HRESULT function(IDebugClient, ulong, DEBUG_POOL_DATA*);
alias DEBUG_POOL_REGION = int;
enum : int
{
    DbgPoolRegionUnknown           = 0x00000000,
    DbgPoolRegionSpecial           = 0x00000001,
    DbgPoolRegionPaged             = 0x00000002,
    DbgPoolRegionNonPaged          = 0x00000003,
    DbgPoolRegionNonPagedExpansion = 0x00000004,
    DbgPoolRegionSessionPaged      = 0x00000005,
    DbgPoolRegionMax               = 0x00000006,
}

alias PGET_POOL_REGION = HRESULT function(IDebugClient, ulong, DEBUG_POOL_REGION*);
struct KDEXT_THREAD_FIND_PARAMS
{
    uint SizeofStruct;
    ulong StackPointer;
    uint Cid;
    ulong Thread;
}
alias PFIND_MATCHING_THREAD = HRESULT function(IDebugClient, KDEXT_THREAD_FIND_PARAMS*);
struct KDEXT_PROCESS_FIND_PARAMS
{
    uint SizeofStruct;
    uint Pid;
    uint Session;
    PSTR ImageName;
}
alias PFIND_MATCHING_PROCESS = HRESULT function(IDebugClient, KDEXT_PROCESS_FIND_PARAMS*, ulong*);
alias EXTS_JOB_PROCESS_CALLBACK = BOOLEAN function(ulong, ulong, void*);
alias PENUMERATE_JOB_PROCESSES = HRESULT function(IDebugClient, ulong, EXTS_JOB_PROCESS_CALLBACK, void*);
alias EXTS_TABLE_ENTRY_CALLBACK = BOOLEAN function(ulong, void*);
alias PENUMERATE_HASH_TABLE = HRESULT function(IDebugClient, ulong, EXTS_TABLE_ENTRY_CALLBACK, void*);
struct KDEXT_HANDLE_INFORMATION
{
    ulong HandleTableEntry;
    ulong Handle;
    ulong Object;
    ulong ObjectBody;
    ulong GrantedAccess;
    uint HandleAttributes;
    BOOLEAN PagedOut;
}
alias KDEXT_DUMP_HANDLE_CALLBACK = BOOLEAN function(KDEXT_HANDLE_INFORMATION*, uint, void*);
alias PENUMERATE_HANDLES = HRESULT function(IDebugClient, ulong, ulong, uint, KDEXT_DUMP_HANDLE_CALLBACK, void*);
struct KDEXT_FILELOCK_OWNER
{
    uint Sizeofstruct;
    ulong FileObject;
    ulong OwnerThread;
    ulong WaitIrp;
    ulong DeviceObject;
    CHAR[32] BlockingDirver;
}
alias PFIND_FILELOCK_OWNERINFO = HRESULT function(IDebugClient, KDEXT_FILELOCK_OWNER*);
struct KDEXTS_LOCK_INFO
{
    uint SizeOfStruct;
    ulong Address;
    ulong OwningThread;
    BOOL ExclusiveOwned;
    uint NumOwners;
    uint ContentionCount;
    uint NumExclusiveWaiters;
    uint NumSharedWaiters;
    ulong* pOwnerThreads;
    ulong* pWaiterThreads;
}
alias KDEXTS_LOCK_CALLBACKROUTINE = HRESULT function(KDEXTS_LOCK_INFO*, void*);
alias PENUMERATE_SYSTEM_LOCKS = HRESULT function(IDebugClient, uint, KDEXTS_LOCK_CALLBACKROUTINE, void*);
struct KDEXTS_PTE_INFO
{
    uint SizeOfStruct;
    ulong VirtualAddress;
    ulong PpeAddress;
    ulong PdeAddress;
    ulong PteAddress;
    ulong Pfn;
    ulong Levels;
    uint _bitfield1;
    uint _bitfield2;
}
alias PKDEXTS_GET_PTE_INFO = HRESULT function(IDebugClient, ulong, KDEXTS_PTE_INFO*);
struct DEBUG_POOLTAG_DESCRIPTION
{
    uint SizeOfStruct;
    uint PoolTag;
    CHAR[260] Description;
    CHAR[32] Binary;
    CHAR[32] Owner;
}
alias PGET_POOL_TAG_DESCRIPTION = HRESULT function(uint, DEBUG_POOLTAG_DESCRIPTION*);
alias DEBUG_FAILURE_TYPE = int;
enum : int
{
    DEBUG_FLR_UNKNOWN = 0x00000000,
    DEBUG_FLR_KERNEL  = 0x00000001,
    DEBUG_FLR_USER    = 0x00000002,
}

alias DEBUG_FLR_PARAM_TYPE = int;
enum : int
{
    DEBUG_FLR_INVALID                                       = 0x00000000,
    DEBUG_FLR_RESERVED                                      = 0x00000001,
    DEBUG_FLR_DRIVER_OBJECT                                 = 0x00000002,
    DEBUG_FLR_DEVICE_OBJECT                                 = 0x00000003,
    DEBUG_FLR_INVALID_PFN                                   = 0x00000004,
    DEBUG_FLR_WORKER_ROUTINE                                = 0x00000005,
    DEBUG_FLR_WORK_ITEM                                     = 0x00000006,
    DEBUG_FLR_INVALID_DPC_FOUND                             = 0x00000007,
    DEBUG_FLR_PROCESS_OBJECT                                = 0x00000008,
    DEBUG_FLR_FAILED_INSTRUCTION_ADDRESS                    = 0x00000009,
    DEBUG_FLR_LAST_CONTROL_TRANSFER                         = 0x0000000a,
    DEBUG_FLR_ACPI_EXTENSION                                = 0x0000000b,
    DEBUG_FLR_ACPI_RESCONFLICT                              = 0x0000000c,
    DEBUG_FLR_ACPI_OBJECT                                   = 0x0000000d,
    DEBUG_FLR_READ_ADDRESS                                  = 0x0000000e,
    DEBUG_FLR_WRITE_ADDRESS                                 = 0x0000000f,
    DEBUG_FLR_CRITICAL_SECTION                              = 0x00000010,
    DEBUG_FLR_BAD_HANDLE                                    = 0x00000011,
    DEBUG_FLR_INVALID_HEAP_ADDRESS                          = 0x00000012,
    DEBUG_FLR_CHKIMG_EXTENSION                              = 0x00000013,
    DEBUG_FLR_USBPORT_OCADATA                               = 0x00000014,
    DEBUG_FLR_WORK_QUEUE_ITEM                               = 0x00000015,
    DEBUG_FLR_ERESOURCE_ADDRESS                             = 0x00000016,
    DEBUG_FLR_PNP_TRIAGE_DATA_DEPRECATED                    = 0x00000017,
    DEBUG_FLR_HANDLE_VALUE                                  = 0x00000018,
    DEBUG_FLR_WHEA_ERROR_RECORD                             = 0x00000019,
    DEBUG_FLR_VERIFIER_FOUND_DEADLOCK                       = 0x0000001a,
    DEBUG_FLR_PG_MISMATCH                                   = 0x0000001b,
    DEBUG_FLR_DEVICE_NODE                                   = 0x0000001c,
    DEBUG_FLR_POWERREQUEST_ADDRESS                          = 0x0000001d,
    DEBUG_FLR_EXECUTE_ADDRESS                               = 0x0000001e,
    DEBUG_FLR_IRP_ADDRESS                                   = 0x00000100,
    DEBUG_FLR_IRP_MAJOR_FN                                  = 0x00000101,
    DEBUG_FLR_IRP_MINOR_FN                                  = 0x00000102,
    DEBUG_FLR_IRP_CANCEL_ROUTINE                            = 0x00000103,
    DEBUG_FLR_IOSB_ADDRESS                                  = 0x00000104,
    DEBUG_FLR_INVALID_USEREVENT                             = 0x00000105,
    DEBUG_FLR_VIDEO_TDR_CONTEXT                             = 0x00000106,
    DEBUG_FLR_VERIFIER_DRIVER_ENTRY                         = 0x00000107,
    DEBUG_FLR_PNP_IRP_ADDRESS_DEPRECATED                    = 0x00000108,
    DEBUG_FLR_PREVIOUS_MODE                                 = 0x00000109,
    DEBUG_FLR_CURRENT_IRQL                                  = 0x00000200,
    DEBUG_FLR_PREVIOUS_IRQL                                 = 0x00000201,
    DEBUG_FLR_REQUESTED_IRQL                                = 0x00000202,
    DEBUG_FLR_ASSERT_DATA                                   = 0x00000300,
    DEBUG_FLR_ASSERT_FILE                                   = 0x00000301,
    DEBUG_FLR_EXCEPTION_PARAMETER1                          = 0x00000302,
    DEBUG_FLR_EXCEPTION_PARAMETER2                          = 0x00000303,
    DEBUG_FLR_EXCEPTION_PARAMETER3                          = 0x00000304,
    DEBUG_FLR_EXCEPTION_PARAMETER4                          = 0x00000305,
    DEBUG_FLR_EXCEPTION_RECORD                              = 0x00000306,
    DEBUG_FLR_IO_ERROR_CODE                                 = 0x00000307,
    DEBUG_FLR_EXCEPTION_STR                                 = 0x00000308,
    DEBUG_FLR_EXCEPTION_DOESNOT_MATCH_CODE                  = 0x00000309,
    DEBUG_FLR_ASSERT_INSTRUCTION                            = 0x0000030a,
    DEBUG_FLR_POOL_ADDRESS                                  = 0x00000400,
    DEBUG_FLR_SPECIAL_POOL_CORRUPTION_TYPE                  = 0x00000401,
    DEBUG_FLR_CORRUPTING_POOL_ADDRESS                       = 0x00000402,
    DEBUG_FLR_CORRUPTING_POOL_TAG                           = 0x00000403,
    DEBUG_FLR_FREED_POOL_TAG                                = 0x00000404,
    DEBUG_FLR_LEAKED_SESSION_POOL_TAG                       = 0x00000405,
    DEBUG_FLR_INSTR_SESSION_POOL_TAG                        = 0x00000406,
    DEBUG_FLR_CLIENT_DRIVER                                 = 0x00000407,
    DEBUG_FLR_FILE_ID                                       = 0x00000500,
    DEBUG_FLR_FILE_LINE                                     = 0x00000501,
    DEBUG_FLR_BUGCHECK_STR                                  = 0x00000600,
    DEBUG_FLR_BUGCHECK_SPECIFIER                            = 0x00000601,
    DEBUG_FLR_BUGCHECK_DESC                                 = 0x00000602,
    DEBUG_FLR_MANAGED_CODE                                  = 0x00000700,
    DEBUG_FLR_MANAGED_OBJECT                                = 0x00000701,
    DEBUG_FLR_MANAGED_EXCEPTION_OBJECT                      = 0x00000702,
    DEBUG_FLR_MANAGED_EXCEPTION_MESSAGE_deprecated          = 0x00000703,
    DEBUG_FLR_MANAGED_STACK_STRING                          = 0x00000704,
    DEBUG_FLR_MANAGED_BITNESS_MISMATCH                      = 0x00000705,
    DEBUG_FLR_MANAGED_OBJECT_NAME                           = 0x00000706,
    DEBUG_FLR_MANAGED_EXCEPTION_CONTEXT_MESSAGE             = 0x00000707,
    DEBUG_FLR_MANAGED_STACK_COMMAND                         = 0x00000708,
    DEBUG_FLR_MANAGED_KERNEL_DEBUGGER                       = 0x00000709,
    DEBUG_FLR_MANAGED_HRESULT_STRING                        = 0x0000070a,
    DEBUG_FLR_MANAGED_ENGINE_MODULE                         = 0x0000070b,
    DEBUG_FLR_MANAGED_ANALYSIS_PROVIDER                     = 0x0000070c,
    DEBUG_FLR_MANAGED_EXCEPTION_ADDRESS                     = 0x00000800,
    DEBUG_FLR_MANAGED_EXCEPTION_HRESULT                     = 0x00000801,
    DEBUG_FLR_MANAGED_EXCEPTION_TYPE                        = 0x00000802,
    DEBUG_FLR_MANAGED_EXCEPTION_MESSAGE                     = 0x00000803,
    DEBUG_FLR_MANAGED_EXCEPTION_CALLSTACK                   = 0x00000804,
    DEBUG_FLR_MANAGED_EXCEPTION_INNER_ADDRESS               = 0x00000810,
    DEBUG_FLR_MANAGED_EXCEPTION_INNER_HRESULT               = 0x00000811,
    DEBUG_FLR_MANAGED_EXCEPTION_INNER_TYPE                  = 0x00000812,
    DEBUG_FLR_MANAGED_EXCEPTION_INNER_MESSAGE               = 0x00000813,
    DEBUG_FLR_MANAGED_EXCEPTION_INNER_CALLSTACK             = 0x00000814,
    DEBUG_FLR_MANAGED_EXCEPTION_NESTED_ADDRESS              = 0x00000820,
    DEBUG_FLR_MANAGED_EXCEPTION_NESTED_HRESULT              = 0x00000821,
    DEBUG_FLR_MANAGED_EXCEPTION_NESTED_TYPE                 = 0x00000822,
    DEBUG_FLR_MANAGED_EXCEPTION_NESTED_MESSAGE              = 0x00000823,
    DEBUG_FLR_MANAGED_EXCEPTION_NESTED_CALLSTACK            = 0x00000824,
    DEBUG_FLR_MANAGED_EXCEPTION_CMD                         = 0x000008f0,
    DEBUG_FLR_MANAGED_THREAD_ID                             = 0x00000900,
    DEBUG_FLR_MANAGED_THREAD_CMD_CALLSTACK                  = 0x000009f0,
    DEBUG_FLR_MANAGED_THREAD_CMD_STACKOBJECTS               = 0x000009f1,
    DEBUG_FLR_DRIVER_VERIFIER_IO_VIOLATION_TYPE             = 0x00001000,
    DEBUG_FLR_EXCEPTION_CODE                                = 0x00001001,
    DEBUG_FLR_EXCEPTION_CODE_STR                            = 0x00001002,
    DEBUG_FLR_IOCONTROL_CODE                                = 0x00001003,
    DEBUG_FLR_MM_INTERNAL_CODE                              = 0x00001004,
    DEBUG_FLR_DRVPOWERSTATE_SUBCODE                         = 0x00001005,
    DEBUG_FLR_STATUS_CODE                                   = 0x00001006,
    DEBUG_FLR_SYMBOL_STACK_INDEX                            = 0x00001007,
    DEBUG_FLR_SYMBOL_ON_RAW_STACK                           = 0x00001008,
    DEBUG_FLR_SECURITY_COOKIES                              = 0x00001009,
    DEBUG_FLR_THREADPOOL_WAITER                             = 0x0000100a,
    DEBUG_FLR_TARGET_MODE                                   = 0x0000100b,
    DEBUG_FLR_BUGCHECK_CODE                                 = 0x0000100c,
    DEBUG_FLR_BADPAGES_DETECTED                             = 0x0000100d,
    DEBUG_FLR_DPC_TIMEOUT_TYPE                              = 0x0000100e,
    DEBUG_FLR_DPC_RUNTIME                                   = 0x0000100f,
    DEBUG_FLR_DPC_TIMELIMIT                                 = 0x00001010,
    DEBUG_FLR_DUMP_FILE_ATTRIBUTES                          = 0x00001011,
    DEBUG_FLR_PAGE_HASH_ERRORS                              = 0x00001012,
    DEBUG_FLR_BUGCHECK_P1                                   = 0x00001013,
    DEBUG_FLR_BUGCHECK_P2                                   = 0x00001014,
    DEBUG_FLR_BUGCHECK_P3                                   = 0x00001015,
    DEBUG_FLR_BUGCHECK_P4                                   = 0x00001016,
    DEBUG_FLR_CRITICAL_PROCESS                              = 0x00001017,
    DEBUG_FLR_RESOURCE_CALL_TYPE                            = 0x00001100,
    DEBUG_FLR_RESOURCE_CALL_TYPE_STR                        = 0x00001101,
    DEBUG_FLR_CORRUPT_MODULE_LIST                           = 0x00002000,
    DEBUG_FLR_BAD_STACK                                     = 0x00002001,
    DEBUG_FLR_ZEROED_STACK                                  = 0x00002002,
    DEBUG_FLR_WRONG_SYMBOLS                                 = 0x00002003,
    DEBUG_FLR_FOLLOWUP_DRIVER_ONLY                          = 0x00002004,
    DEBUG_FLR_UNUSED001                                     = 0x00002005,
    DEBUG_FLR_CPU_OVERCLOCKED                               = 0x00002006,
    DEBUG_FLR_POSSIBLE_INVALID_CONTROL_TRANSFER             = 0x00002007,
    DEBUG_FLR_POISONED_TB                                   = 0x00002008,
    DEBUG_FLR_UNKNOWN_MODULE                                = 0x00002009,
    DEBUG_FLR_ANALYZABLE_POOL_CORRUPTION                    = 0x0000200a,
    DEBUG_FLR_SINGLE_BIT_ERROR                              = 0x0000200b,
    DEBUG_FLR_TWO_BIT_ERROR                                 = 0x0000200c,
    DEBUG_FLR_INVALID_KERNEL_CONTEXT                        = 0x0000200d,
    DEBUG_FLR_DISK_HARDWARE_ERROR                           = 0x0000200e,
    DEBUG_FLR_SHOW_ERRORLOG                                 = 0x0000200f,
    DEBUG_FLR_MANUAL_BREAKIN                                = 0x00002010,
    DEBUG_FLR_HANG                                          = 0x00002011,
    DEBUG_FLR_BAD_MEMORY_REFERENCE                          = 0x00002012,
    DEBUG_FLR_BAD_OBJECT_REFERENCE                          = 0x00002013,
    DEBUG_FLR_APPKILL                                       = 0x00002014,
    DEBUG_FLR_SINGLE_BIT_PFN_PAGE_ERROR                     = 0x00002015,
    DEBUG_FLR_HARDWARE_ERROR                                = 0x00002016,
    DEBUG_FLR_NO_IMAGE_IN_BUCKET                            = 0x00002017,
    DEBUG_FLR_NO_BUGCHECK_IN_BUCKET                         = 0x00002018,
    DEBUG_FLR_SKIP_STACK_ANALYSIS                           = 0x00002019,
    DEBUG_FLR_INVALID_OPCODE                                = 0x0000201a,
    DEBUG_FLR_ADD_PROCESS_IN_BUCKET                         = 0x0000201b,
    DEBUG_FLR_RAISED_IRQL_USER_FAULT                        = 0x0000201c,
    DEBUG_FLR_USE_DEFAULT_CONTEXT                           = 0x0000201d,
    DEBUG_FLR_BOOST_FOLLOWUP_TO_SPECIFIC                    = 0x0000201e,
    DEBUG_FLR_SWITCH_PROCESS_CONTEXT                        = 0x0000201f,
    DEBUG_FLR_VERIFIER_STOP                                 = 0x00002020,
    DEBUG_FLR_USERBREAK_PEB_PAGEDOUT                        = 0x00002021,
    DEBUG_FLR_MOD_SPECIFIC_DATA_ONLY                        = 0x00002022,
    DEBUG_FLR_OVERLAPPED_MODULE                             = 0x00002023,
    DEBUG_FLR_CPU_MICROCODE_ZERO_INTEL                      = 0x00002024,
    DEBUG_FLR_INTEL_CPU_BIOS_UPGRADE_NEEDED                 = 0x00002025,
    DEBUG_FLR_OVERLAPPED_UNLOADED_MODULE                    = 0x00002026,
    DEBUG_FLR_INVALID_USER_CONTEXT                          = 0x00002027,
    DEBUG_FLR_MILCORE_BREAK                                 = 0x00002028,
    DEBUG_FLR_NO_IMAGE_TIMESTAMP_IN_BUCKET                  = 0x00002029,
    DEBUG_FLR_KERNEL_VERIFIER_ENABLED                       = 0x0000202a,
    DEBUG_FLR_SKIP_CORRUPT_MODULE_DETECTION                 = 0x0000202b,
    DEBUG_FLR_GSFAILURE_FALSE_POSITIVE                      = 0x0000202c,
    DEBUG_FLR_IGNORE_LARGE_MODULE_CORRUPTION                = 0x0000202d,
    DEBUG_FLR_IGNORE_BUCKET_ID_OFFSET                       = 0x0000202e,
    DEBUG_FLR_NO_ARCH_IN_BUCKET                             = 0x0000202f,
    DEBUG_FLR_IGNORE_MODULE_HARDWARE_ID                     = 0x00002030,
    DEBUG_FLR_ARM_WRITE_AV_CAVEAT                           = 0x00002031,
    DEBUG_FLR_ON_DPC_STACK                                  = 0x00002032,
    DEBUG_FLR_LIVE_KERNEL_DUMP                              = 0x00002033,
    DEBUG_FLR_COVERAGE_BUILD                                = 0x00002034,
    DEBUG_FLR_POSSIBLE_STACK_OVERFLOW                       = 0x00002035,
    DEBUG_FLR_WRONG_SYMBOLS_TIMESTAMP                       = 0x00002036,
    DEBUG_FLR_WRONG_SYMBOLS_SIZE                            = 0x00002037,
    DEBUG_FLR_MISSING_IMPORTANT_SYMBOL                      = 0x00002038,
    DEBUG_FLR_MISSING_CLR_SYMBOL                            = 0x00002039,
    DEBUG_FLR_TARGET_TIME                                   = 0x0000203a,
    DEBUG_FLR_LOW_SYSTEM_COMMIT                             = 0x0000203b,
    DEBUG_FLR_LEGACY_PAGE_TABLE_ACCESS                      = 0x0000203c,
    DEBUG_FLR_HIGH_PROCESS_COMMIT                           = 0x0000203d,
    DEBUG_FLR_HIGH_SERVICE_COMMIT                           = 0x0000203e,
    DEBUG_FLR_HIGH_NONPAGED_POOL_USAGE                      = 0x0000203f,
    DEBUG_FLR_HIGH_PAGED_POOL_USAGE                         = 0x00002040,
    DEBUG_FLR_HIGH_SHARED_COMMIT_USAGE                      = 0x00002041,
    DEBUG_FLR_APPS_NOT_TERMINATED                           = 0x00002042,
    DEBUG_FLR_POOL_CORRUPTOR                                = 0x00003000,
    DEBUG_FLR_MEMORY_CORRUPTOR                              = 0x00003001,
    DEBUG_FLR_UNALIGNED_STACK_POINTER                       = 0x00003002,
    DEBUG_FLR_OS_VERSION_deprecated                         = 0x00003003,
    DEBUG_FLR_BUGCHECKING_DRIVER                            = 0x00003004,
    DEBUG_FLR_SOLUTION_ID                                   = 0x00003005,
    DEBUG_FLR_DEFAULT_SOLUTION_ID                           = 0x00003006,
    DEBUG_FLR_SOLUTION_TYPE                                 = 0x00003007,
    DEBUG_FLR_RECURRING_STACK                               = 0x00003008,
    DEBUG_FLR_FAULTING_INSTR_CODE                           = 0x00003009,
    DEBUG_FLR_SYSTEM_LOCALE_deprecated                      = 0x0000300a,
    DEBUG_FLR_CUSTOMER_CRASH_COUNT                          = 0x0000300b,
    DEBUG_FLR_TRAP_FRAME_RECURSION                          = 0x0000300c,
    DEBUG_FLR_STACK_OVERFLOW                                = 0x0000300d,
    DEBUG_FLR_STACK_POINTER_ERROR                           = 0x0000300e,
    DEBUG_FLR_STACK_POINTER_ONEBIT_ERROR                    = 0x0000300f,
    DEBUG_FLR_STACK_POINTER_MISALIGNED                      = 0x00003010,
    DEBUG_FLR_INSTR_POINTER_MISALIGNED                      = 0x00003011,
    DEBUG_FLR_INSTR_POINTER_CLIFAULT                        = 0x00003012,
    DEBUG_FLR_REGISTRYTXT_STRESS_ID                         = 0x00003013,
    DEBUG_FLR_CORRUPT_SERVICE_TABLE                         = 0x00003014,
    DEBUG_FLR_LOP_STACKHASH                                 = 0x00003015,
    DEBUG_FLR_GSFAILURE_FUNCTION                            = 0x00003016,
    DEBUG_FLR_GSFAILURE_MODULE_COOKIE                       = 0x00003017,
    DEBUG_FLR_GSFAILURE_FRAME_COOKIE                        = 0x00003018,
    DEBUG_FLR_GSFAILURE_FRAME_COOKIE_COMPLEMENT             = 0x00003019,
    DEBUG_FLR_GSFAILURE_CORRUPTED_COOKIE                    = 0x0000301a,
    DEBUG_FLR_GSFAILURE_CORRUPTED_EBP                       = 0x0000301b,
    DEBUG_FLR_GSFAILURE_OVERRUN_LOCAL                       = 0x0000301c,
    DEBUG_FLR_GSFAILURE_OVERRUN_LOCAL_NAME                  = 0x0000301d,
    DEBUG_FLR_GSFAILURE_CORRUPTED_EBPESP                    = 0x0000301e,
    DEBUG_FLR_GSFAILURE_POSITIVELY_CORRUPTED_EBPESP         = 0x0000301f,
    DEBUG_FLR_GSFAILURE_MEMORY_READ_ERROR                   = 0x00003020,
    DEBUG_FLR_GSFAILURE_PROBABLY_NOT_USING_GS               = 0x00003021,
    DEBUG_FLR_GSFAILURE_POSITIVE_BUFFER_OVERFLOW            = 0x00003022,
    DEBUG_FLR_GSFAILURE_ANALYSIS_TEXT                       = 0x00003023,
    DEBUG_FLR_GSFAILURE_OFF_BY_ONE_OVERRUN                  = 0x00003024,
    DEBUG_FLR_GSFAILURE_RA_SMASHED                          = 0x00003025,
    DEBUG_FLR_GSFAILURE_NOT_UP2DATE                         = 0x00003026,
    DEBUG_FLR_GSFAILURE_UP2DATE_UNKNOWN                     = 0x00003027,
    DEBUG_FLR_TRIAGER_OS_BUILD_NAME                         = 0x00003028,
    DEBUG_FLR_CPU_MICROCODE_VERSION                         = 0x00003029,
    DEBUG_FLR_CPU_COUNT                                     = 0x0000302a,
    DEBUG_FLR_CPU_SPEED                                     = 0x0000302b,
    DEBUG_FLR_CPU_VENDOR                                    = 0x0000302c,
    DEBUG_FLR_CPU_FAMILY                                    = 0x0000302d,
    DEBUG_FLR_CPU_MODEL                                     = 0x0000302e,
    DEBUG_FLR_CPU_STEPPING                                  = 0x0000302f,
    DEBUG_FLR_INSTR_POINTER_ON_STACK                        = 0x00003030,
    DEBUG_FLR_INSTR_POINTER_ON_HEAP                         = 0x00003031,
    DEBUG_FLR_EVENT_CODE_DATA_MISMATCH                      = 0x00003032,
    DEBUG_FLR_PROCESSOR_INFO                                = 0x00003033,
    DEBUG_FLR_INSTR_POINTER_IN_UNLOADED_MODULE              = 0x00003034,
    DEBUG_FLR_MEMDIAG_LASTRUN_STATUS                        = 0x00003035,
    DEBUG_FLR_MEMDIAG_LASTRUN_TIME                          = 0x00003036,
    DEBUG_FLR_INSTR_POINTER_IN_FREE_BLOCK                   = 0x00003037,
    DEBUG_FLR_INSTR_POINTER_IN_RESERVED_BLOCK               = 0x00003038,
    DEBUG_FLR_INSTR_POINTER_IN_VM_MAPPED_MODULE             = 0x00003039,
    DEBUG_FLR_INSTR_POINTER_IN_MODULE_NOT_IN_LIST           = 0x0000303a,
    DEBUG_FLR_INSTR_POINTER_NOT_IN_STREAM                   = 0x0000303b,
    DEBUG_FLR_MEMORY_CORRUPTION_SIGNATURE                   = 0x0000303c,
    DEBUG_FLR_BUILDNAME_IN_BUCKET                           = 0x0000303d,
    DEBUG_FLR_CANCELLATION_NOT_SUPPORTED                    = 0x0000303e,
    DEBUG_FLR_DETOURED_IMAGE                                = 0x0000303f,
    DEBUG_FLR_EXCEPTION_CONTEXT_RECURSION                   = 0x00003040,
    DEBUG_FLR_DISKIO_READ_FAILURE                           = 0x00003041,
    DEBUG_FLR_DISKIO_WRITE_FAILURE                          = 0x00003042,
    DEBUG_FLR_GSFAILURE_MISSING_ESTABLISHER_FRAME           = 0x00003043,
    DEBUG_FLR_GSFAILURE_COOKIES_MATCH_EXH                   = 0x00003044,
    DEBUG_FLR_GSFAILURE_MANAGED                             = 0x00003045,
    DEBUG_FLR_MANAGED_FRAME_CHAIN_CORRUPTION                = 0x00003046,
    DEBUG_FLR_GSFAILURE_MANAGED_THREADID                    = 0x00003047,
    DEBUG_FLR_GSFAILURE_MANAGED_FRAMEID                     = 0x00003048,
    DEBUG_FLR_STACKUSAGE_IMAGE                              = 0x00003049,
    DEBUG_FLR_STACKUSAGE_IMAGE_SIZE                         = 0x0000304a,
    DEBUG_FLR_STACKUSAGE_FUNCTION                           = 0x0000304b,
    DEBUG_FLR_STACKUSAGE_FUNCTION_SIZE                      = 0x0000304c,
    DEBUG_FLR_STACKUSAGE_RECURSION_COUNT                    = 0x0000304d,
    DEBUG_FLR_XBOX_SYSTEM_UPTIME                            = 0x0000304e,
    DEBUG_FLR_XBOX_SYSTEM_CRASHTIME                         = 0x0000304f,
    DEBUG_FLR_XBOX_LIVE_ENVIRONMENT                         = 0x00003050,
    DEBUG_FLR_LARGE_TICK_INCREMENT                          = 0x00003051,
    DEBUG_FLR_INSTR_POINTER_IN_PAGED_CODE                   = 0x00003052,
    DEBUG_FLR_SERVICETABLE_MODIFIED                         = 0x00003053,
    DEBUG_FLR_ALUREON                                       = 0x00003054,
    DEBUG_FLR_INTERNAL_RAID_BUG                             = 0x00004000,
    DEBUG_FLR_INTERNAL_BUCKET_URL                           = 0x00004001,
    DEBUG_FLR_INTERNAL_SOLUTION_TEXT                        = 0x00004002,
    DEBUG_FLR_INTERNAL_BUCKET_HITCOUNT                      = 0x00004003,
    DEBUG_FLR_INTERNAL_RAID_BUG_DATABASE_STRING             = 0x00004004,
    DEBUG_FLR_INTERNAL_BUCKET_CONTINUABLE                   = 0x00004005,
    DEBUG_FLR_INTERNAL_BUCKET_STATUS_TEXT                   = 0x00004006,
    DEBUG_FLR_WATSON_MODULE                                 = 0x00004100,
    DEBUG_FLR_WATSON_MODULE_VERSION                         = 0x00004101,
    DEBUG_FLR_WATSON_MODULE_OFFSET                          = 0x00004102,
    DEBUG_FLR_WATSON_PROCESS_VERSION                        = 0x00004103,
    DEBUG_FLR_WATSON_IBUCKET                                = 0x00004104,
    DEBUG_FLR_WATSON_MODULE_TIMESTAMP                       = 0x00004105,
    DEBUG_FLR_WATSON_PROCESS_TIMESTAMP                      = 0x00004106,
    DEBUG_FLR_WATSON_GENERIC_EVENT_NAME                     = 0x00004107,
    DEBUG_FLR_WATSON_GENERIC_BUCKETING_00                   = 0x00004108,
    DEBUG_FLR_WATSON_GENERIC_BUCKETING_01                   = 0x00004109,
    DEBUG_FLR_WATSON_GENERIC_BUCKETING_02                   = 0x0000410a,
    DEBUG_FLR_WATSON_GENERIC_BUCKETING_03                   = 0x0000410b,
    DEBUG_FLR_WATSON_GENERIC_BUCKETING_04                   = 0x0000410c,
    DEBUG_FLR_WATSON_GENERIC_BUCKETING_05                   = 0x0000410d,
    DEBUG_FLR_WATSON_GENERIC_BUCKETING_06                   = 0x0000410e,
    DEBUG_FLR_WATSON_GENERIC_BUCKETING_07                   = 0x0000410f,
    DEBUG_FLR_WATSON_GENERIC_BUCKETING_08                   = 0x00004110,
    DEBUG_FLR_WATSON_GENERIC_BUCKETING_09                   = 0x00004111,
    DEBUG_FLR_SYSXML_LOCALEID                               = 0x00004200,
    DEBUG_FLR_SYSXML_CHECKSUM                               = 0x00004201,
    DEBUG_FLR_WQL_EVENT_COUNT                               = 0x00004202,
    DEBUG_FLR_WQL_EVENTLOG_INFO                             = 0x00004203,
    DEBUG_FLR_SYSINFO_SYSTEM_MANUFACTURER                   = 0x00004300,
    DEBUG_FLR_SYSINFO_SYSTEM_PRODUCT                        = 0x00004301,
    DEBUG_FLR_SYSINFO_SYSTEM_SKU                            = 0x00004302,
    DEBUG_FLR_SYSINFO_SYSTEM_VERSION                        = 0x00004303,
    DEBUG_FLR_SYSINFO_BASEBOARD_MANUFACTURER                = 0x00004304,
    DEBUG_FLR_SYSINFO_BASEBOARD_PRODUCT                     = 0x00004305,
    DEBUG_FLR_SYSINFO_BASEBOARD_VERSION                     = 0x00004306,
    DEBUG_FLR_SYSINFO_BIOS_VENDOR                           = 0x00004307,
    DEBUG_FLR_SYSINFO_BIOS_VERSION                          = 0x00004308,
    DEBUG_FLR_SYSINFO_BIOS_DATE                             = 0x00004309,
    DEBUG_FLR_VIRTUAL_MACHINE                               = 0x0000430a,
    DEBUG_FLR_SERVICE                                       = 0x00005000,
    DEBUG_FLR_SERVICE_NAME                                  = 0x00005001,
    DEBUG_FLR_SERVICE_GROUP                                 = 0x00005002,
    DEBUG_FLR_SERVICE_DISPLAYNAME                           = 0x00005003,
    DEBUG_FLR_SERVICE_DESCRIPTION                           = 0x00005004,
    DEBUG_FLR_SERVICE_DEPENDONSERVICE                       = 0x00005005,
    DEBUG_FLR_SERVICE_DEPENDONGROUP                         = 0x00005006,
    DEBUG_FLR_SVCHOST                                       = 0x00005100,
    DEBUG_FLR_SVCHOST_GROUP                                 = 0x00005101,
    DEBUG_FLR_SVCHOST_IMAGEPATH                             = 0x00005102,
    DEBUG_FLR_SVCHOST_SERVICEDLL                            = 0x00005103,
    DEBUG_FLR_SCM                                           = 0x00005200,
    DEBUG_FLR_SCM_BLACKBOX                                  = 0x000052f0,
    DEBUG_FLR_SCM_BLACKBOX_ENTRY                            = 0x000052f1,
    DEBUG_FLR_SCM_BLACKBOX_ENTRY_CONTROLCODE                = 0x000052f2,
    DEBUG_FLR_SCM_BLACKBOX_ENTRY_STARTTIME                  = 0x000052f3,
    DEBUG_FLR_SCM_BLACKBOX_ENTRY_SERVICENAME                = 0x000052f4,
    DEBUG_FLR_ACPI                                          = 0x00006000,
    DEBUG_FLR_ACPI_BLACKBOX                                 = 0x00006100,
    DEBUG_FLR_PO_BLACKBOX                                   = 0x00006101,
    DEBUG_FLR_BOOTSTAT                                      = 0x00007000,
    DEBUG_FLR_BOOTSTAT_BLACKBOX                             = 0x00007100,
    DEBUG_FLR_STORAGE                                       = 0x00007400,
    DEBUG_FLR_STORAGE_ORGID                                 = 0x00007401,
    DEBUG_FLR_STORAGE_MODEL                                 = 0x00007402,
    DEBUG_FLR_STORAGE_MFGID                                 = 0x00007403,
    DEBUG_FLR_STORAGE_ISSUEDESCSTRING                       = 0x00007404,
    DEBUG_FLR_STORAGE_PUBLIC_TOTSIZE                        = 0x00007405,
    DEBUG_FLR_STORAGE_PUBLIC_OFFSET                         = 0x00007406,
    DEBUG_FLR_STORAGE_PUBLIC_DATASIZE                       = 0x00007407,
    DEBUG_FLR_STORAGE_PRIVATE_TOTSIZE                       = 0x00007408,
    DEBUG_FLR_STORAGE_PRIVATE_OFFSET                        = 0x00007409,
    DEBUG_FLR_STORAGE_PRIVATE_DATASIZE                      = 0x0000740a,
    DEBUG_FLR_STORAGE_TOTALSIZE                             = 0x0000740b,
    DEBUG_FLR_STORAGE_REASON                                = 0x0000740c,
    DEBUG_FLR_STORAGE_BLACKBOX                              = 0x000074f0,
    DEBUG_FLR_FILESYSTEMS_NTFS                              = 0x00007600,
    DEBUG_FLR_FILESYSTEMS_NTFS_BLACKBOX                     = 0x000076f0,
    DEBUG_FLR_FILESYSTEMS_REFS                              = 0x00007800,
    DEBUG_FLR_FILESYSTEMS_REFS_BLACKBOX                     = 0x000078f0,
    DEBUG_FLR_PNP                                           = 0x00008000,
    DEBUG_FLR_PNP_TRIAGE_DATA                               = 0x00008001,
    DEBUG_FLR_PNP_IRP_ADDRESS                               = 0x00008002,
    DEBUG_FLR_PNP_BLACKBOX                                  = 0x00008100,
    DEBUG_FLR_BUCKET_ID                                     = 0x00010000,
    DEBUG_FLR_IMAGE_NAME                                    = 0x00010001,
    DEBUG_FLR_SYMBOL_NAME                                   = 0x00010002,
    DEBUG_FLR_FOLLOWUP_NAME                                 = 0x00010003,
    DEBUG_FLR_STACK_COMMAND                                 = 0x00010004,
    DEBUG_FLR_STACK_TEXT                                    = 0x00010005,
    DEBUG_FLR_MODULE_NAME                                   = 0x00010006,
    DEBUG_FLR_FIXED_IN_OSVERSION                            = 0x00010007,
    DEBUG_FLR_DEFAULT_BUCKET_ID                             = 0x00010008,
    DEBUG_FLR_MODULE_BUCKET_ID                              = 0x00010009,
    DEBUG_FLR_ADDITIONAL_DEBUGTEXT                          = 0x0001000a,
    DEBUG_FLR_PROCESS_NAME                                  = 0x0001000b,
    DEBUG_FLR_USER_NAME                                     = 0x0001000c,
    DEBUG_FLR_MARKER_FILE                                   = 0x0001000d,
    DEBUG_FLR_INTERNAL_RESPONSE                             = 0x0001000e,
    DEBUG_FLR_CONTEXT_RESTORE_COMMAND                       = 0x0001000f,
    DEBUG_FLR_DRIVER_HARDWAREID                             = 0x00010010,
    DEBUG_FLR_DRIVER_HARDWARE_VENDOR_ID                     = 0x00010011,
    DEBUG_FLR_DRIVER_HARDWARE_DEVICE_ID                     = 0x00010012,
    DEBUG_FLR_DRIVER_HARDWARE_SUBSYS_ID                     = 0x00010013,
    DEBUG_FLR_DRIVER_HARDWARE_REV_ID                        = 0x00010014,
    DEBUG_FLR_DRIVER_HARDWARE_ID_BUS_TYPE                   = 0x00010015,
    DEBUG_FLR_MARKER_MODULE_FILE                            = 0x00010016,
    DEBUG_FLR_BUGCHECKING_DRIVER_IDTAG                      = 0x00010017,
    DEBUG_FLR_MARKER_BUCKET                                 = 0x00010018,
    DEBUG_FLR_FAILURE_BUCKET_ID                             = 0x00010019,
    DEBUG_FLR_DRIVER_XML_DESCRIPTION                        = 0x0001001a,
    DEBUG_FLR_DRIVER_XML_PRODUCTNAME                        = 0x0001001b,
    DEBUG_FLR_DRIVER_XML_MANUFACTURER                       = 0x0001001c,
    DEBUG_FLR_DRIVER_XML_VERSION                            = 0x0001001d,
    DEBUG_FLR_BUILD_VERSION_STRING                          = 0x0001001e,
    DEBUG_FLR_BUILD_OS_FULL_VERSION_STRING                  = 0x0001001f,
    DEBUG_FLR_ORIGINAL_CAB_NAME                             = 0x00010020,
    DEBUG_FLR_FAULTING_SOURCE_CODE                          = 0x00010021,
    DEBUG_FLR_FAULTING_SERVICE_NAME                         = 0x00010022,
    DEBUG_FLR_FILE_IN_CAB                                   = 0x00010023,
    DEBUG_FLR_UNRESPONSIVE_UI_SYMBOL_NAME                   = 0x00010024,
    DEBUG_FLR_UNRESPONSIVE_UI_FOLLOWUP_NAME                 = 0x00010025,
    DEBUG_FLR_UNRESPONSIVE_UI_STACK                         = 0x00010026,
    DEBUG_FLR_PROCESS_PRODUCTNAME                           = 0x00010027,
    DEBUG_FLR_MODULE_PRODUCTNAME                            = 0x00010028,
    DEBUG_FLR_COLLECT_DATA_FOR_BUCKET                       = 0x00010029,
    DEBUG_FLR_COMPUTER_NAME                                 = 0x0001002a,
    DEBUG_FLR_IMAGE_CLASS                                   = 0x0001002b,
    DEBUG_FLR_SYMBOL_ROUTINE_NAME                           = 0x0001002c,
    DEBUG_FLR_HARDWARE_BUCKET_TAG                           = 0x0001002d,
    DEBUG_FLR_KERNEL_LOG_PROCESS_NAME                       = 0x0001002e,
    DEBUG_FLR_KERNEL_LOG_STATUS                             = 0x0001002f,
    DEBUG_FLR_REGISTRYTXT_SOURCE                            = 0x00010030,
    DEBUG_FLR_FAULTING_SOURCE_LINE                          = 0x00010031,
    DEBUG_FLR_FAULTING_SOURCE_FILE                          = 0x00010032,
    DEBUG_FLR_FAULTING_SOURCE_LINE_NUMBER                   = 0x00010033,
    DEBUG_FLR_SKIP_MODULE_SPECIFIC_BUCKET_INFO              = 0x00010034,
    DEBUG_FLR_BUCKET_ID_FUNC_OFFSET                         = 0x00010035,
    DEBUG_FLR_XHCI_FIRMWARE_VERSION                         = 0x00010036,
    DEBUG_FLR_FAILURE_ANALYSIS_SOURCE                       = 0x00010037,
    DEBUG_FLR_FAILURE_ID_HASH                               = 0x00010038,
    DEBUG_FLR_FAILURE_ID_HASH_STRING                        = 0x00010039,
    DEBUG_FLR_FAILURE_ID_REPORT_LINK                        = 0x0001003a,
    DEBUG_FLR_HOLDINFO                                      = 0x0001003b,
    DEBUG_FLR_HOLDINFO_ACTIVE_HOLD_COUNT                    = 0x0001003c,
    DEBUG_FLR_HOLDINFO_TENET_SOCRE                          = 0x0001003d,
    DEBUG_FLR_HOLDINFO_HISTORIC_HOLD_COUNT                  = 0x0001003e,
    DEBUG_FLR_HOLDINFO_ALWAYS_IGNORE                        = 0x0001003f,
    DEBUG_FLR_HOLDINFO_ALWAYS_HOLD                          = 0x00010040,
    DEBUG_FLR_HOLDINFO_MAX_HOLD_LIMIT                       = 0x00010041,
    DEBUG_FLR_HOLDINFO_MANUAL_HOLD                          = 0x00010042,
    DEBUG_FLR_HOLDINFO_NOTIFICATION_ALIASES                 = 0x00010043,
    DEBUG_FLR_HOLDINFO_LAST_SEEN_HOLD_DATE                  = 0x00010044,
    DEBUG_FLR_HOLDINFO_RECOMMEND_HOLD                       = 0x00010045,
    DEBUG_FLR_FAILURE_PROBLEM_CLASS                         = 0x00010046,
    DEBUG_FLR_FAILURE_EXCEPTION_CODE                        = 0x00010047,
    DEBUG_FLR_FAILURE_IMAGE_NAME                            = 0x00010048,
    DEBUG_FLR_FAILURE_FUNCTION_NAME                         = 0x00010049,
    DEBUG_FLR_FAILURE_SYMBOL_NAME                           = 0x0001004a,
    DEBUG_FLR_FOLLOWUP_BEFORE_RETRACER                      = 0x0001004b,
    DEBUG_FLR_END_MESSAGE                                   = 0x0001004c,
    DEBUG_FLR_FEATURE_PATH                                  = 0x0001004d,
    DEBUG_FLR_USER_MODE_BUCKET                              = 0x0001004e,
    DEBUG_FLR_USER_MODE_BUCKET_INDEX                        = 0x0001004f,
    DEBUG_FLR_USER_MODE_BUCKET_EVENTTYPE                    = 0x00010050,
    DEBUG_FLR_USER_MODE_BUCKET_REPORTGUID                   = 0x00010051,
    DEBUG_FLR_USER_MODE_BUCKET_REPORTCREATIONTIME           = 0x00010052,
    DEBUG_FLR_USER_MODE_BUCKET_P0                           = 0x00010053,
    DEBUG_FLR_USER_MODE_BUCKET_P1                           = 0x00010054,
    DEBUG_FLR_USER_MODE_BUCKET_P2                           = 0x00010055,
    DEBUG_FLR_USER_MODE_BUCKET_P3                           = 0x00010056,
    DEBUG_FLR_USER_MODE_BUCKET_P4                           = 0x00010057,
    DEBUG_FLR_USER_MODE_BUCKET_P5                           = 0x00010058,
    DEBUG_FLR_USER_MODE_BUCKET_P6                           = 0x00010059,
    DEBUG_FLR_USER_MODE_BUCKET_P7                           = 0x0001005a,
    DEBUG_FLR_USER_MODE_BUCKET_STRING                       = 0x0001005b,
    DEBUG_FLR_CRITICAL_PROCESS_REPORTGUID                   = 0x0001005c,
    DEBUG_FLR_FAILURE_MODULE_NAME                           = 0x0001005d,
    DEBUG_FLR_PLATFORM_BUCKET_STRING                        = 0x0001005e,
    DEBUG_FLR_DRIVER_HARDWARE_VENDOR_NAME                   = 0x0001005f,
    DEBUG_FLR_DRIVER_HARDWARE_SUBVENDOR_NAME                = 0x00010060,
    DEBUG_FLR_DRIVER_HARDWARE_DEVICE_NAME                   = 0x00010061,
    DEBUG_FLR_FAULTING_SOURCE_COMMIT_ID                     = 0x00010062,
    DEBUG_FLR_FAULTING_SOURCE_CONTROL_TYPE                  = 0x00010063,
    DEBUG_FLR_FAULTING_SOURCE_PROJECT                       = 0x00010064,
    DEBUG_FLR_FAULTING_SOURCE_REPO_ID                       = 0x00010065,
    DEBUG_FLR_FAULTING_SOURCE_REPO_URL                      = 0x00010066,
    DEBUG_FLR_FAULTING_SOURCE_SRV_COMMAND                   = 0x00010067,
    DEBUG_FLR_USERMODE_DATA                                 = 0x00100000,
    DEBUG_FLR_THREAD_ATTRIBUTES                             = 0x00100001,
    DEBUG_FLR_PROBLEM_CLASSES                               = 0x00100002,
    DEBUG_FLR_PRIMARY_PROBLEM_CLASS                         = 0x00100003,
    DEBUG_FLR_PRIMARY_PROBLEM_CLASS_DATA                    = 0x00100004,
    DEBUG_FLR_UNRESPONSIVE_UI_PROBLEM_CLASS                 = 0x00100005,
    DEBUG_FLR_UNRESPONSIVE_UI_PROBLEM_CLASS_DATA            = 0x00100006,
    DEBUG_FLR_DERIVED_WAIT_CHAIN                            = 0x00100007,
    DEBUG_FLR_HANG_DATA_NEEDED                              = 0x00100008,
    DEBUG_FLR_PROBLEM_CODE_PATH_HASH                        = 0x00100009,
    DEBUG_FLR_SUSPECT_CODE_PATH_HASH                        = 0x0010000a,
    DEBUG_FLR_LOADERLOCK_IN_WAIT_CHAIN                      = 0x0010000b,
    DEBUG_FLR_XPROC_HANG                                    = 0x0010000c,
    DEBUG_FLR_DEADLOCK_INPROC                               = 0x0010000d,
    DEBUG_FLR_DEADLOCK_XPROC                                = 0x0010000e,
    DEBUG_FLR_WCT_XML_AVAILABLE                             = 0x0010000f,
    DEBUG_FLR_XPROC_DUMP_AVAILABLE                          = 0x00100010,
    DEBUG_FLR_DESKTOP_HEAP_MISSING                          = 0x00100011,
    DEBUG_FLR_HANG_REPORT_THREAD_IS_IDLE                    = 0x00100012,
    DEBUG_FLR_FAULT_THREAD_SHA1_HASH_MF                     = 0x00100013,
    DEBUG_FLR_FAULT_THREAD_SHA1_HASH_MFO                    = 0x00100014,
    DEBUG_FLR_FAULT_THREAD_SHA1_HASH_M                      = 0x00100015,
    DEBUG_FLR_WAIT_CHAIN_COMMAND                            = 0x00100016,
    DEBUG_FLR_NTGLOBALFLAG                                  = 0x00100017,
    DEBUG_FLR_APPVERIFERFLAGS                               = 0x00100018,
    DEBUG_FLR_MODLIST_SHA1_HASH                             = 0x00100019,
    DEBUG_FLR_DUMP_TYPE                                     = 0x0010001a,
    DEBUG_FLR_XCS_PATH                                      = 0x0010001b,
    DEBUG_FLR_LOADERLOCK_OWNER_API                          = 0x0010001c,
    DEBUG_FLR_LOADERLOCK_BLOCKED_API                        = 0x0010001d,
    DEBUG_FLR_MODLIST_TSCHKSUM_SHA1_HASH                    = 0x0010001e,
    DEBUG_FLR_MODLIST_UNLOADED_SHA1_HASH                    = 0x0010001f,
    DEBUG_FLR_MACHINE_INFO_SHA1_HASH                        = 0x00100020,
    DEBUG_FLR_URLS_DISCOVERED                               = 0x00100021,
    DEBUG_FLR_URLS                                          = 0x00100022,
    DEBUG_FLR_URL_ENTRY                                     = 0x00100023,
    DEBUG_FLR_WATSON_IBUCKET_S1_RESP                        = 0x00100024,
    DEBUG_FLR_WATSON_IBUCKETTABLE_S1_RESP                   = 0x00100025,
    DEBUG_FLR_SEARCH_HANG                                   = 0x00100026,
    DEBUG_FLR_WER_DATA_COLLECTION_INFO                      = 0x00100027,
    DEBUG_FLR_WER_MACHINE_ID                                = 0x00100028,
    DEBUG_FLR_ULS_SCRIPT_EXCEPTION                          = 0x00100029,
    DEBUG_FLR_LCIE_ISO_AVAILABLE                            = 0x0010002a,
    DEBUG_FLR_SHOW_LCIE_ISO_DATA                            = 0x0010002b,
    DEBUG_FLR_URL_LCIE_ENTRY                                = 0x0010002c,
    DEBUG_FLR_URL_URLMON_ENTRY                              = 0x0010002d,
    DEBUG_FLR_URL_XMLHTTPREQ_SYNC_ENTRY                     = 0x0010002e,
    DEBUG_FLR_FAULTING_LOCAL_VARIABLE_NAME                  = 0x0010002f,
    DEBUG_FLR_MODULE_LIST                                   = 0x00100030,
    DEBUG_FLR_DUMP_FLAGS                                    = 0x00100031,
    DEBUG_FLR_APPLICATION_VERIFIER_LOADED                   = 0x00100032,
    DEBUG_FLR_DUMP_CLASS                                    = 0x00100033,
    DEBUG_FLR_DUMP_QUALIFIER                                = 0x00100034,
    DEBUG_FLR_KM_MODULE_LIST                                = 0x00100035,
    DEBUG_FLR_EXCEPTION_CODE_STR_deprecated                 = 0x00101000,
    DEBUG_FLR_BUCKET_ID_PREFIX_STR                          = 0x00101001,
    DEBUG_FLR_BUCKET_ID_MODULE_STR                          = 0x00101002,
    DEBUG_FLR_BUCKET_ID_MODVER_STR                          = 0x00101003,
    DEBUG_FLR_BUCKET_ID_FUNCTION_STR                        = 0x00101004,
    DEBUG_FLR_BUCKET_ID_OFFSET                              = 0x00101005,
    DEBUG_FLR_OS_BUILD                                      = 0x00101006,
    DEBUG_FLR_OS_SERVICEPACK                                = 0x00101007,
    DEBUG_FLR_OS_BRANCH                                     = 0x00101008,
    DEBUG_FLR_OS_BUILD_TIMESTAMP_LAB                        = 0x00101009,
    DEBUG_FLR_OS_VERSION                                    = 0x0010100a,
    DEBUG_FLR_BUCKET_ID_TIMEDATESTAMP                       = 0x0010100b,
    DEBUG_FLR_BUCKET_ID_CHECKSUM                            = 0x0010100c,
    DEBUG_FLR_OS_FLAVOR                                     = 0x0010100d,
    DEBUG_FLR_BUCKET_ID_FLAVOR_STR                          = 0x0010100e,
    DEBUG_FLR_OS_SKU                                        = 0x0010100f,
    DEBUG_FLR_OS_PRODUCT_TYPE                               = 0x00101010,
    DEBUG_FLR_OS_SUITE_MASK                                 = 0x00101011,
    DEBUG_FLR_USER_LCID                                     = 0x00101012,
    DEBUG_FLR_OS_REVISION                                   = 0x00101013,
    DEBUG_FLR_OS_NAME                                       = 0x00101014,
    DEBUG_FLR_OS_NAME_EDITION                               = 0x00101015,
    DEBUG_FLR_OS_PLATFORM_ARCH                              = 0x00101016,
    DEBUG_FLR_OS_SERVICEPACK_deprecated                     = 0x00101017,
    DEBUG_FLR_OS_LOCALE                                     = 0x00101018,
    DEBUG_FLR_OS_BUILD_TIMESTAMP_ISO                        = 0x00101019,
    DEBUG_FLR_USER_LCID_STR                                 = 0x0010101a,
    DEBUG_FLR_ANALYSIS_SESSION_TIME                         = 0x0010101b,
    DEBUG_FLR_ANALYSIS_SESSION_HOST                         = 0x0010101c,
    DEBUG_FLR_ANALYSIS_SESSION_ELAPSED_TIME                 = 0x0010101d,
    DEBUG_FLR_ANALYSIS_VERSION                              = 0x0010101e,
    DEBUG_FLR_BUCKET_ID_IMAGE_STR                           = 0x0010101f,
    DEBUG_FLR_BUCKET_ID_PRIVATE                             = 0x00101020,
    DEBUG_FLR_ANALYSIS_REPROCESS                            = 0x00101021,
    DEBUG_FLR_OS_MAJOR                                      = 0x00101022,
    DEBUG_FLR_OS_MINOR                                      = 0x00101023,
    DEBUG_FLR_OS_BUILD_STRING                               = 0x00101024,
    DEBUG_FLR_OS_LOCALE_LCID                                = 0x00101025,
    DEBUG_FLR_OS_PLATFORM_ID                                = 0x00101026,
    DEBUG_FLR_OS_BUILD_LAYERS_XML                           = 0x00101027,
    DEBUG_FLR_OSBUILD_deprecated                            = 0x00101100,
    DEBUG_FLR_BUILDOSVER_STR_deprecated                     = 0x00101101,
    DEBUG_FLR_DEBUG_ANALYSIS                                = 0x00111000,
    DEBUG_FLR_KEYVALUE_ANALYSIS                             = 0x00112000,
    DEBUG_FLR_KEY_VALUES_STRING                             = 0x00112100,
    DEBUG_FLR_KEY_VALUES_VARIANT                            = 0x00112200,
    DEBUG_FLR_TIMELINE_ANALYSIS                             = 0x00113000,
    DEBUG_FLR_TIMELINE_TIMES                                = 0x00113001,
    DEBUG_FLR_STREAM_ANALYSIS                               = 0x00114000,
    DEBUG_FLR_MEMORY_ANALYSIS                               = 0x00115000,
    DEBUG_FLR_STACKHASH_ANALYSIS                            = 0x00116000,
    DEBUG_FLR_PROCESSES_ANALYSIS                            = 0x00117000,
    DEBUG_FLR_SERVICE_ANALYSIS                              = 0x00118000,
    DEBUG_FLR_ADDITIONAL_XML                                = 0x00119000,
    DEBUG_FLR_STACK                                         = 0x00200000,
    DEBUG_FLR_FOLLOWUP_CONTEXT                              = 0x00200001,
    DEBUG_FLR_XML_MODULE_LIST                               = 0x00200002,
    DEBUG_FLR_STACK_FRAME                                   = 0x00200003,
    DEBUG_FLR_STACK_FRAME_NUMBER                            = 0x00200004,
    DEBUG_FLR_STACK_FRAME_INSTRUCTION                       = 0x00200005,
    DEBUG_FLR_STACK_FRAME_SYMBOL                            = 0x00200006,
    DEBUG_FLR_STACK_FRAME_SYMBOL_OFFSET                     = 0x00200007,
    DEBUG_FLR_STACK_FRAME_MODULE                            = 0x00200008,
    DEBUG_FLR_STACK_FRAME_IMAGE                             = 0x00200009,
    DEBUG_FLR_STACK_FRAME_FUNCTION                          = 0x0020000a,
    DEBUG_FLR_STACK_FRAME_FLAGS                             = 0x0020000b,
    DEBUG_FLR_CONTEXT_COMMAND                               = 0x0020000c,
    DEBUG_FLR_CONTEXT_FLAGS                                 = 0x0020000d,
    DEBUG_FLR_CONTEXT_ORDER                                 = 0x0020000e,
    DEBUG_FLR_CONTEXT_SYSTEM                                = 0x0020000f,
    DEBUG_FLR_CONTEXT_ID                                    = 0x00200010,
    DEBUG_FLR_XML_MODULE_INFO                               = 0x00200011,
    DEBUG_FLR_XML_MODULE_INFO_INDEX                         = 0x00200012,
    DEBUG_FLR_XML_MODULE_INFO_NAME                          = 0x00200013,
    DEBUG_FLR_XML_MODULE_INFO_IMAGE_NAME                    = 0x00200014,
    DEBUG_FLR_XML_MODULE_INFO_IMAGE_PATH                    = 0x00200015,
    DEBUG_FLR_XML_MODULE_INFO_CHECKSUM                      = 0x00200016,
    DEBUG_FLR_XML_MODULE_INFO_TIMESTAMP                     = 0x00200017,
    DEBUG_FLR_XML_MODULE_INFO_UNLOADED                      = 0x00200018,
    DEBUG_FLR_XML_MODULE_INFO_ON_STACK                      = 0x00200019,
    DEBUG_FLR_XML_MODULE_INFO_FIXED_FILE_VER                = 0x0020001a,
    DEBUG_FLR_XML_MODULE_INFO_FIXED_PROD_VER                = 0x0020001b,
    DEBUG_FLR_XML_MODULE_INFO_STRING_FILE_VER               = 0x0020001c,
    DEBUG_FLR_XML_MODULE_INFO_STRING_PROD_VER               = 0x0020001d,
    DEBUG_FLR_XML_MODULE_INFO_COMPANY_NAME                  = 0x0020001e,
    DEBUG_FLR_XML_MODULE_INFO_FILE_DESCRIPTION              = 0x0020001f,
    DEBUG_FLR_XML_MODULE_INFO_INTERNAL_NAME                 = 0x00200020,
    DEBUG_FLR_XML_MODULE_INFO_ORIG_FILE_NAME                = 0x00200021,
    DEBUG_FLR_XML_MODULE_INFO_BASE                          = 0x00200022,
    DEBUG_FLR_XML_MODULE_INFO_SIZE                          = 0x00200023,
    DEBUG_FLR_XML_MODULE_INFO_PRODUCT_NAME                  = 0x00200024,
    DEBUG_FLR_PROCESS_INFO                                  = 0x00200025,
    DEBUG_FLR_EXCEPTION_MODULE_INFO                         = 0x00200026,
    DEBUG_FLR_CONTEXT_FOLLOWUP_INDEX                        = 0x00200027,
    DEBUG_FLR_XML_GLOBALATTRIBUTE_LIST                      = 0x00200028,
    DEBUG_FLR_XML_ATTRIBUTE_LIST                            = 0x00200029,
    DEBUG_FLR_XML_ATTRIBUTE                                 = 0x0020002a,
    DEBUG_FLR_XML_ATTRIBUTE_NAME                            = 0x0020002b,
    DEBUG_FLR_XML_ATTRIBUTE_VALUE                           = 0x0020002c,
    DEBUG_FLR_XML_ATTRIBUTE_D1VALUE                         = 0x0020002d,
    DEBUG_FLR_XML_ATTRIBUTE_D2VALUE                         = 0x0020002e,
    DEBUG_FLR_XML_ATTRIBUTE_DOVALUE                         = 0x0020002f,
    DEBUG_FLR_XML_ATTRIBUTE_VALUE_TYPE                      = 0x00200030,
    DEBUG_FLR_XML_ATTRIBUTE_FRAME_NUMBER                    = 0x00200031,
    DEBUG_FLR_XML_ATTRIBUTE_THREAD_INDEX                    = 0x00200032,
    DEBUG_FLR_XML_PROBLEMCLASS_LIST                         = 0x00200033,
    DEBUG_FLR_XML_PROBLEMCLASS                              = 0x00200034,
    DEBUG_FLR_XML_PROBLEMCLASS_NAME                         = 0x00200035,
    DEBUG_FLR_XML_PROBLEMCLASS_VALUE                        = 0x00200036,
    DEBUG_FLR_XML_PROBLEMCLASS_VALUE_TYPE                   = 0x00200037,
    DEBUG_FLR_XML_PROBLEMCLASS_FRAME_NUMBER                 = 0x00200038,
    DEBUG_FLR_XML_PROBLEMCLASS_THREAD_INDEX                 = 0x00200039,
    DEBUG_FLR_XML_STACK_FRAME_TRIAGE_STATUS                 = 0x0020003a,
    DEBUG_FLR_CONTEXT_METADATA                              = 0x0020003b,
    DEBUG_FLR_STACK_FRAMES                                  = 0x0020003c,
    DEBUG_FLR_XML_ENCODED_OFFSETS                           = 0x0020003d,
    DEBUG_FLR_FA_PERF_DATA                                  = 0x0020003e,
    DEBUG_FLR_FA_PERF_ITEM                                  = 0x0020003f,
    DEBUG_FLR_FA_PERF_ITEM_NAME                             = 0x00200040,
    DEBUG_FLR_FA_PERF_ITERATIONS                            = 0x00200041,
    DEBUG_FLR_FA_PERF_ELAPSED_MS                            = 0x00200042,
    DEBUG_FLR_STACK_SHA1_HASH_MF                            = 0x00200043,
    DEBUG_FLR_STACK_SHA1_HASH_MFO                           = 0x00200044,
    DEBUG_FLR_STACK_SHA1_HASH_M                             = 0x00200045,
    DEBUG_FLR_XML_MODULE_INFO_SYMBOL_TYPE                   = 0x00200046,
    DEBUG_FLR_XML_MODULE_INFO_FILE_FLAGS                    = 0x00200047,
    DEBUG_FLR_STACK_FRAME_MODULE_BASE                       = 0x00200048,
    DEBUG_FLR_STACK_FRAME_SRC                               = 0x00200049,
    DEBUG_FLR_XML_SYSTEMINFO                                = 0x0020004a,
    DEBUG_FLR_XML_SYSTEMINFO_SYSTEMMANUFACTURER             = 0x0020004b,
    DEBUG_FLR_XML_SYSTEMINFO_SYSTEMMODEL                    = 0x0020004c,
    DEBUG_FLR_XML_SYSTEMINFO_SYSTEMMARKER                   = 0x0020004d,
    DEBUG_FLR_FA_ADHOC_ANALYSIS_ITEMS                       = 0x0020004e,
    DEBUG_FLR_XML_APPLICATION_NAME                          = 0x0020004f,
    DEBUG_FLR_XML_PACKAGE_MONIKER                           = 0x00200050,
    DEBUG_FLR_XML_PACKAGE_RELATIVE_APPLICATION_ID           = 0x00200051,
    DEBUG_FLR_XML_MODERN_ASYNC_REQUEST_OUTSTANDING          = 0x00200052,
    DEBUG_FLR_XML_EVENTTYPE                                 = 0x00200053,
    DEBUG_FLR_XML_PACKAGE_NAME                              = 0x00200054,
    DEBUG_FLR_XML_PACKAGE_VERSION                           = 0x00200055,
    DEBUG_FLR_FAILURE_LIST                                  = 0x00200056,
    DEBUG_FLR_FAILURE_DISPLAY_NAME                          = 0x00200057,
    DEBUG_FLR_FRAME_SOURCE_FILE_NAME                        = 0x00200058,
    DEBUG_FLR_FRAME_SOURCE_FILE_PATH                        = 0x00200059,
    DEBUG_FLR_FRAME_SOURCE_LINE_NUMBER                      = 0x0020005a,
    DEBUG_FLR_XML_MODULE_INFO_SYMSRV_IMAGE_STATUS           = 0x0020005b,
    DEBUG_FLR_XML_MODULE_INFO_SYMSRV_IMAGE_ERROR            = 0x0020005c,
    DEBUG_FLR_XML_MODULE_INFO_SYMSRV_IMAGE_DETAIL           = 0x0020005d,
    DEBUG_FLR_XML_MODULE_INFO_SYMSRV_IMAGE_SEC              = 0x0020005e,
    DEBUG_FLR_XML_MODULE_INFO_SYMSRV_PDB_STATUS             = 0x0020005f,
    DEBUG_FLR_XML_MODULE_INFO_SYMSRV_PDB_ERROR              = 0x00200060,
    DEBUG_FLR_XML_MODULE_INFO_SYMSRV_PDB_DETAIL             = 0x00200061,
    DEBUG_FLR_XML_MODULE_INFO_SYMSRV_PDB_SEC                = 0x00200062,
    DEBUG_FLR_XML_MODULE_INFO_DRIVER_GROUP                  = 0x00200063,
    DEBUG_FLR_REGISTRY_DATA                                 = 0x00300000,
    DEBUG_FLR_WMI_QUERY_DATA                                = 0x00301000,
    DEBUG_FLR_USER_GLOBAL_ATTRIBUTES                        = 0x00302000,
    DEBUG_FLR_USER_THREAD_ATTRIBUTES                        = 0x00303000,
    DEBUG_FLR_USER_PROBLEM_CLASSES                          = 0x00304000,
    DEBUG_FLR_SM_COMPRESSION_FORMAT                         = 0x50000000,
    DEBUG_FLR_SM_SOURCE_PFN1                                = 0x50000001,
    DEBUG_FLR_SM_SOURCE_PFN2                                = 0x50000002,
    DEBUG_FLR_SM_SOURCE_OFFSET                              = 0x50000003,
    DEBUG_FLR_SM_SOURCE_SIZE                                = 0x50000004,
    DEBUG_FLR_SM_TARGET_PFN                                 = 0x50000005,
    DEBUG_FLR_SM_BUFFER_HASH                                = 0x50000006,
    DEBUG_FLR_SM_ONEBIT_SOLUTION_COUNT                      = 0x50000007,
    DEBUG_FLR_STORE_PRODUCT_ID                              = 0x60000000,
    DEBUG_FLR_STORE_PRODUCT_DISPLAY_NAME                    = 0x60000001,
    DEBUG_FLR_STORE_PRODUCT_DESCRIPTION                     = 0x60000002,
    DEBUG_FLR_STORE_PRODUCT_EXTENDED_NAME                   = 0x60000003,
    DEBUG_FLR_STORE_PUBLISHER_ID                            = 0x60000004,
    DEBUG_FLR_STORE_PUBLISHER_NAME                          = 0x60000005,
    DEBUG_FLR_STORE_PUBLISHER_CERTIFICATE_NAME              = 0x60000006,
    DEBUG_FLR_STORE_DEVELOPER_NAME                          = 0x60000007,
    DEBUG_FLR_STORE_PACKAGE_FAMILY_NAME                     = 0x60000008,
    DEBUG_FLR_STORE_PACKAGE_IDENTITY_NAME                   = 0x60000009,
    DEBUG_FLR_STORE_PRIMARY_PARENT_PRODUCT_ID               = 0x6000000a,
    DEBUG_FLR_STORE_LEGACY_PARENT_PRODUCT_ID                = 0x6000000b,
    DEBUG_FLR_STORE_LEGACY_WINDOWS_STORE_PRODUCT_ID         = 0x6000000c,
    DEBUG_FLR_STORE_LEGACY_WINDOWS_PHONE_PRODUCT_ID         = 0x6000000d,
    DEBUG_FLR_STORE_LEGACY_XBOX_ONE_PRODUCT_ID              = 0x6000000e,
    DEBUG_FLR_STORE_LEGACY_XBOX_360_PRODUCT_ID              = 0x6000000f,
    DEBUG_FLR_STORE_XBOX_TITLE_ID                           = 0x60000010,
    DEBUG_FLR_STORE_PREFERRED_SKU_ID                        = 0x60000011,
    DEBUG_FLR_STORE_IS_MICROSOFT_PRODUCT                    = 0x60000012,
    DEBUG_FLR_STORE_URL_APP                                 = 0x60000013,
    DEBUG_FLR_STORE_URL_APPHEALTH                           = 0x60000014,
    DEBUG_FLR_PHONE_VERSIONMAJOR                            = 0x70000000,
    DEBUG_FLR_PHONE_VERSIONMINOR                            = 0x70000001,
    DEBUG_FLR_PHONE_BUILDNUMBER                             = 0x70000002,
    DEBUG_FLR_PHONE_BUILDTIMESTAMP                          = 0x70000003,
    DEBUG_FLR_PHONE_BUILDBRANCH                             = 0x70000004,
    DEBUG_FLR_PHONE_BUILDER                                 = 0x70000005,
    DEBUG_FLR_PHONE_LCID                                    = 0x70000006,
    DEBUG_FLR_PHONE_QFE                                     = 0x70000007,
    DEBUG_FLR_PHONE_OPERATOR                                = 0x70000008,
    DEBUG_FLR_PHONE_MCCMNC                                  = 0x70000009,
    DEBUG_FLR_PHONE_FIRMWAREREVISION                        = 0x7000000a,
    DEBUG_FLR_PHONE_RAM                                     = 0x7000000b,
    DEBUG_FLR_PHONE_ROMVERSION                              = 0x7000000c,
    DEBUG_FLR_PHONE_SOCVERSION                              = 0x7000000d,
    DEBUG_FLR_PHONE_HARDWAREREVISION                        = 0x7000000e,
    DEBUG_FLR_PHONE_RADIOHARDWAREREVISION                   = 0x7000000f,
    DEBUG_FLR_PHONE_RADIOSOFTWAREREVISION                   = 0x70000010,
    DEBUG_FLR_PHONE_BOOTLOADERVERSION                       = 0x70000011,
    DEBUG_FLR_PHONE_REPORTGUID                              = 0x70000012,
    DEBUG_FLR_PHONE_SOURCE                                  = 0x70000013,
    DEBUG_FLR_PHONE_SOURCEEXTERNAL                          = 0x70000014,
    DEBUG_FLR_PHONE_USERALIAS                               = 0x70000015,
    DEBUG_FLR_PHONE_REPORTTIMESTAMP                         = 0x70000016,
    DEBUG_FLR_PHONE_APPID                                   = 0x70000017,
    DEBUG_FLR_PHONE_SKUID                                   = 0x70000018,
    DEBUG_FLR_PHONE_APPVERSION                              = 0x70000019,
    DEBUG_FLR_PHONE_UIF_COMMENT                             = 0x7000001a,
    DEBUG_FLR_PHONE_UIF_APPNAME                             = 0x7000001b,
    DEBUG_FLR_PHONE_UIF_APPID                               = 0x7000001c,
    DEBUG_FLR_PHONE_UIF_CATEGORY                            = 0x7000001d,
    DEBUG_FLR_PHONE_UIF_ORIGIN                              = 0x7000001e,
    DEBUG_FLR_SIMULTANEOUS_TELSVC_INSTANCES                 = 0x7000001f,
    DEBUG_FLR_SIMULTANEOUS_TELWP_INSTANCES                  = 0x70000020,
    DEBUG_FLR_MINUTES_SINCE_LAST_EVENT                      = 0x70000021,
    DEBUG_FLR_MINUTES_SINCE_LAST_EVENT_OF_THIS_TYPE         = 0x70000022,
    DEBUG_FLR_REPORT_INFO_GUID                              = 0x70000023,
    DEBUG_FLR_REPORT_INFO_SOURCE                            = 0x70000024,
    DEBUG_FLR_REPORT_INFO_CREATION_TIME                     = 0x70000025,
    DEBUG_FLR_FAULTING_IP                                   = 0x80000000,
    DEBUG_FLR_FAULTING_MODULE                               = 0x80000001,
    DEBUG_FLR_IMAGE_TIMESTAMP                               = 0x80000002,
    DEBUG_FLR_FOLLOWUP_IP                                   = 0x80000003,
    DEBUG_FLR_FRAME_ONE_INVALID                             = 0x80000004,
    DEBUG_FLR_SYMBOL_FROM_RAW_STACK_ADDRESS                 = 0x80000005,
    DEBUG_FLR_IMAGE_VERSION                                 = 0x80000006,
    DEBUG_FLR_FOLLOWUP_BUCKET_ID                            = 0x80000007,
    DEBUG_FLR_CUSTOM_ANALYSIS_TAG_MIN                       = 0xa0000000,
    DEBUG_FLR_CUSTOM_ANALYSIS_TAG_MAX                       = 0xb0000000,
    DEBUG_FLR_FAULTING_THREAD                               = 0xc0000000,
    DEBUG_FLR_CONTEXT                                       = 0xc0000001,
    DEBUG_FLR_TRAP_FRAME                                    = 0xc0000002,
    DEBUG_FLR_TSS                                           = 0xc0000003,
    DEBUG_FLR_BLOCKING_THREAD                               = 0xc0000004,
    DEBUG_FLR_UNRESPONSIVE_UI_THREAD                        = 0xc0000005,
    DEBUG_FLR_BLOCKED_THREAD0                               = 0xc0000006,
    DEBUG_FLR_BLOCKED_THREAD1                               = 0xc0000007,
    DEBUG_FLR_BLOCKED_THREAD2                               = 0xc0000008,
    DEBUG_FLR_BLOCKING_PROCESSID                            = 0xc0000009,
    DEBUG_FLR_PROCESSOR_ID                                  = 0xc000000a,
    DEBUG_FLR_XDV_VIOLATED_CONDITION                        = 0xc000000b,
    DEBUG_FLR_XDV_STATE_VARIABLE                            = 0xc000000c,
    DEBUG_FLR_XDV_HELP_LINK                                 = 0xc000000d,
    DEBUG_FLR_XDV_RULE_INFO                                 = 0xc000000e,
    DEBUG_FLR_DPC_STACK_BASE                                = 0xc000000f,
    DEBUG_FLR_TESTRESULTSERVER                              = 0xf0000000,
    DEBUG_FLR_TESTRESULTGUID                                = 0xf0000001,
    DEBUG_FLR_CUSTOMREPORTTAG                               = 0xf0000002,
    DEBUG_FLR_DISKSEC_ORGID_DEPRECATED                      = 0xf0000003,
    DEBUG_FLR_DISKSEC_MODEL_DEPRECATED                      = 0xf0000004,
    DEBUG_FLR_DISKSEC_MFGID_DEPRECATED                      = 0xf0000005,
    DEBUG_FLR_DISKSEC_ISSUEDESCSTRING_DEPRECATED            = 0xf0000006,
    DEBUG_FLR_DISKSEC_PUBLIC_TOTSIZE_DEPRECATED             = 0xf0000007,
    DEBUG_FLR_DISKSEC_PUBLIC_OFFSET_DEPRECATED              = 0xf0000008,
    DEBUG_FLR_DISKSEC_PUBLIC_DATASIZE_DEPRECATED            = 0xf0000009,
    DEBUG_FLR_DISKSEC_PRIVATE_TOTSIZE_DEPRECATED            = 0xf000000a,
    DEBUG_FLR_DISKSEC_PRIVATE_OFFSET_DEPRECATED             = 0xf000000b,
    DEBUG_FLR_DISKSEC_PRIVATE_DATASIZE_DEPRECATED           = 0xf000000c,
    DEBUG_FLR_DISKSEC_TOTALSIZE_DEPRECATED                  = 0xf000000d,
    DEBUG_FLR_DISKSEC_REASON_DEPRECATED                     = 0xf000000e,
    DEBUG_FLR_WERCOLLECTION_PROCESSTERMINATED               = 0xf000000f,
    DEBUG_FLR_WERCOLLECTION_PROCESSHEAPDUMP_REQUEST_FAILURE = 0xf0000010,
    DEBUG_FLR_WERCOLLECTION_MINIDUMP_WRITE_FAILURE          = 0xf0000011,
    DEBUG_FLR_WERCOLLECTION_DEFAULTCOLLECTION_FAILURE       = 0xf0000012,
    DEBUG_FLR_PROCESS_BAM_CURRENT_THROTTLED                 = 0xf0000013,
    DEBUG_FLR_PROCESS_BAM_PREVIOUS_THROTTLED                = 0xf0000014,
    DEBUG_FLR_DUMPSTREAM_COMMENTA                           = 0xf0000015,
    DEBUG_FLR_DUMPSTREAM_COMMENTW                           = 0xf0000016,
    DEBUG_FLR_CHPE_PROCESS                                  = 0xf0000017,
    DEBUG_FLR_WINLOGON_BLACKBOX                             = 0xf0000018,
    DEBUG_FLR_CUSTOM_COMMAND                                = 0xf0000019,
    DEBUG_FLR_CUSTOM_COMMAND_OUTPUT                         = 0xf000001a,
    DEBUG_FLR_MASK_ALL                                      = 0xffffffff,
}

struct DBG_THREAD_ATTRIBUTES
{
    uint ThreadIndex;
    ulong ProcessID;
    ulong ThreadID;
    ulong AttributeBits;
    uint BoolBits;
    ulong BlockedOnPID;
    ulong BlockedOnTID;
    ulong CritSecAddress;
    uint Timeout_msec;
    CHAR[100] StringData;
    CHAR[100] SymName;
}
alias FA_ENTRY_TYPE = int;
enum : int
{
    DEBUG_FA_ENTRY_NO_TYPE            = 0x00000000,
    DEBUG_FA_ENTRY_ULONG              = 0x00000001,
    DEBUG_FA_ENTRY_ULONG64            = 0x00000002,
    DEBUG_FA_ENTRY_INSTRUCTION_OFFSET = 0x00000003,
    DEBUG_FA_ENTRY_POINTER            = 0x00000004,
    DEBUG_FA_ENTRY_ANSI_STRING        = 0x00000005,
    DEBUG_FA_ENTRY_ANSI_STRINGs       = 0x00000006,
    DEBUG_FA_ENTRY_EXTENSION_CMD      = 0x00000007,
    DEBUG_FA_ENTRY_STRUCTURED_DATA    = 0x00000008,
    DEBUG_FA_ENTRY_UNICODE_STRING     = 0x00000009,
    DEBUG_FA_ENTRY_ARRAY              = 0x00008000,
}

// [Not Found] IID_IDebugFAEntryTags
interface IDebugFAEntryTags
{
    FA_ENTRY_TYPE GetType(DEBUG_FLR_PARAM_TYPE);
    HRESULT SetType(DEBUG_FLR_PARAM_TYPE, FA_ENTRY_TYPE);
    HRESULT GetProperties(DEBUG_FLR_PARAM_TYPE, PSTR, uint*, PSTR, uint*, uint*);
    HRESULT SetProperties(DEBUG_FLR_PARAM_TYPE, const(char)*, const(char)*, uint);
    HRESULT GetTagByName(const(char)*, const(char)*, DEBUG_FLR_PARAM_TYPE*);
    BOOL IsValidTagToSet(DEBUG_FLR_PARAM_TYPE);
}
struct FA_ENTRY
{
    DEBUG_FLR_PARAM_TYPE Tag;
    ushort FullSize;
    ushort DataSize;
}
enum IID_IDebugFailureAnalysis = GUID(0xed0de363, 0x451f, 0x4943, [0x82, 0xc, 0x62, 0xdc, 0xcd, 0xfa, 0x7e, 0x6d]);
interface IDebugFailureAnalysis : IUnknown
{
    uint GetFailureClass();
    DEBUG_FAILURE_TYPE GetFailureType();
    uint GetFailureCode();
    FA_ENTRY* Get(DEBUG_FLR_PARAM_TYPE);
    FA_ENTRY* GetNext(FA_ENTRY*, DEBUG_FLR_PARAM_TYPE, DEBUG_FLR_PARAM_TYPE);
    FA_ENTRY* GetString(DEBUG_FLR_PARAM_TYPE, PSTR, uint);
    FA_ENTRY* GetBuffer(DEBUG_FLR_PARAM_TYPE, void*, uint);
    FA_ENTRY* GetUlong(DEBUG_FLR_PARAM_TYPE, uint*);
    FA_ENTRY* GetUlong64(DEBUG_FLR_PARAM_TYPE, ulong*);
    FA_ENTRY* NextEntry(FA_ENTRY*);
}
enum IID_IDebugFailureAnalysis2 = GUID(0xea15c288, 0x8226, 0x4b70, [0xac, 0xf6, 0xb, 0xe6, 0xb1, 0x89, 0xe3, 0xad]);
interface IDebugFailureAnalysis2 : IUnknown
{
    uint GetFailureClass();
    DEBUG_FAILURE_TYPE GetFailureType();
    uint GetFailureCode();
    FA_ENTRY* Get(DEBUG_FLR_PARAM_TYPE);
    FA_ENTRY* GetNext(FA_ENTRY*, DEBUG_FLR_PARAM_TYPE, DEBUG_FLR_PARAM_TYPE);
    FA_ENTRY* GetString(DEBUG_FLR_PARAM_TYPE, PSTR, uint);
    FA_ENTRY* GetBuffer(DEBUG_FLR_PARAM_TYPE, void*, uint);
    FA_ENTRY* GetUlong(DEBUG_FLR_PARAM_TYPE, uint*);
    FA_ENTRY* GetUlong64(DEBUG_FLR_PARAM_TYPE, ulong*);
    FA_ENTRY* NextEntry(FA_ENTRY*);
    FA_ENTRY* SetString(DEBUG_FLR_PARAM_TYPE, const(char)*);
    FA_ENTRY* SetExtensionCommand(DEBUG_FLR_PARAM_TYPE, const(char)*);
    FA_ENTRY* SetUlong(DEBUG_FLR_PARAM_TYPE, uint);
    FA_ENTRY* SetUlong64(DEBUG_FLR_PARAM_TYPE, ulong);
    FA_ENTRY* SetBuffer(DEBUG_FLR_PARAM_TYPE, FA_ENTRY_TYPE, void*, uint);
    FA_ENTRY* AddString(DEBUG_FLR_PARAM_TYPE, const(char)*);
    FA_ENTRY* AddExtensionCommand(DEBUG_FLR_PARAM_TYPE, const(char)*);
    FA_ENTRY* AddUlong(DEBUG_FLR_PARAM_TYPE, uint);
    FA_ENTRY* AddUlong64(DEBUG_FLR_PARAM_TYPE, ulong);
    FA_ENTRY* AddBuffer(DEBUG_FLR_PARAM_TYPE, FA_ENTRY_TYPE, const(void)*, uint);
    HRESULT GetDebugFATagControl(IDebugFAEntryTags*);
    HRESULT GetAnalysisXml(IXMLDOMElement*);
    HRESULT AddStructuredAnalysisData(DEBUG_FLR_PARAM_TYPE, IDebugFailureAnalysis2);
}
enum IID_IDebugFailureAnalysis3 = GUID(0x3627dc67, 0xfd45, 0x42ff, [0x9b, 0xa4, 0x4a, 0x67, 0xee, 0x64, 0x61, 0x9f]);
interface IDebugFailureAnalysis3 : IUnknown
{
    uint GetFailureClass();
    DEBUG_FAILURE_TYPE GetFailureType();
    uint GetFailureCode();
    FA_ENTRY* Get(DEBUG_FLR_PARAM_TYPE);
    FA_ENTRY* GetNext(FA_ENTRY*, DEBUG_FLR_PARAM_TYPE, DEBUG_FLR_PARAM_TYPE);
    FA_ENTRY* GetString(DEBUG_FLR_PARAM_TYPE, PSTR, uint);
    FA_ENTRY* GetBuffer(DEBUG_FLR_PARAM_TYPE, void*, uint);
    FA_ENTRY* GetUlong(DEBUG_FLR_PARAM_TYPE, uint*);
    FA_ENTRY* GetUlong64(DEBUG_FLR_PARAM_TYPE, ulong*);
    FA_ENTRY* NextEntry(FA_ENTRY*);
    FA_ENTRY* SetString(DEBUG_FLR_PARAM_TYPE, const(char)*);
    FA_ENTRY* SetExtensionCommand(DEBUG_FLR_PARAM_TYPE, const(char)*);
    FA_ENTRY* SetUlong(DEBUG_FLR_PARAM_TYPE, uint);
    FA_ENTRY* SetUlong64(DEBUG_FLR_PARAM_TYPE, ulong);
    FA_ENTRY* SetBuffer(DEBUG_FLR_PARAM_TYPE, FA_ENTRY_TYPE, void*, uint);
    FA_ENTRY* AddString(DEBUG_FLR_PARAM_TYPE, const(char)*);
    FA_ENTRY* AddExtensionCommand(DEBUG_FLR_PARAM_TYPE, const(char)*);
    FA_ENTRY* AddUlong(DEBUG_FLR_PARAM_TYPE, uint);
    FA_ENTRY* AddUlong64(DEBUG_FLR_PARAM_TYPE, ulong);
    FA_ENTRY* AddBuffer(DEBUG_FLR_PARAM_TYPE, FA_ENTRY_TYPE, const(void)*, uint);
    HRESULT GetDebugFATagControl(IDebugFAEntryTags*);
    HRESULT GetAnalysisXml(IXMLDOMElement*);
    HRESULT AddStructuredAnalysisData(DEBUG_FLR_PARAM_TYPE, IDebugFailureAnalysis2);
    HRESULT AddThreads(IUnknown);
    HRESULT AttributeGet(uint, VARIANT*);
    HRESULT AttributeGetName(uint, BSTR*);
    HRESULT AttributeSet(uint, VARIANT);
    HRESULT BlameApplication(BSTR);
    HRESULT BlameProcess(BSTR);
    HRESULT BlameThread(IUnknown);
    HRESULT BlameStitch(IUnknown, BSTR);
    HRESULT BlameTEB(ulong);
    HRESULT BlameETHREAD(ulong);
    HRESULT ProblemClassIsSet(uint, VARIANT_BOOL*);
    HRESULT ProblemClassDelete(uint);
    HRESULT ProblemClassSet(uint);
    HRESULT ProblemClassSetBSTR(uint, BSTR);
    HRESULT SetAdditionalXML(BSTR, IUnknown);
    HRESULT GetAdditionalXML(BSTR, IUnknown*);
    HRESULT DeleteAdditionalXML(BSTR);
}
alias EXT_GET_FAILURE_ANALYSIS = HRESULT function(IDebugClient4, uint, IDebugFailureAnalysis*);
alias EXT_GET_DEBUG_FAILURE_ANALYSIS = HRESULT function(IDebugClient4, uint, GUID, IDebugFailureAnalysis2*);
alias fnDebugFailureAnalysisCreateInstance = HRESULT function(IDebugClient, const(wchar)*, uint, const(GUID)*, const(GUID)*, void**);
alias FA_EXTENSION_PLUGIN_PHASE = int;
enum : int
{
    FA_PLUGIN_INITIALIZATION = 0x00000001,
    FA_PLUGIN_STACK_ANALYSIS = 0x00000002,
    FA_PLUGIN_PRE_BUCKETING  = 0x00000004,
    FA_PLUGIN_POST_BUCKETING = 0x00000008,
}

alias EXT_ANALYSIS_PLUGIN = HRESULT function(IDebugClient4, FA_EXTENSION_PLUGIN_PHASE, IDebugFailureAnalysis2);
alias EXT_GET_FA_ENTRIES_DATA = HRESULT function(IDebugClient4, uint*, FA_ENTRY**);
alias OS_TYPE = int;
enum : int
{
    WIN_95        = 0x00000000,
    WIN_98        = 0x00000001,
    WIN_ME        = 0x00000002,
    WIN_NT4       = 0x00000003,
    WIN_NT5       = 0x00000004,
    WIN_NT5_1     = 0x00000005,
    WIN_NT5_2     = 0x00000006,
    WIN_NT6_0     = 0x00000007,
    WIN_NT6_1     = 0x00000008,
    WIN_UNDEFINED = 0x000000ff,
}

struct OS_INFO
{
    uint MajorVer;
    uint MinorVer;
    uint Build;
    uint BuildQfe;
    uint ProductType;
    uint Suite;
    uint Revision;
    struct _s_e__Struct
    {
        uint _bitfield0;
    }
    uint SrvPackNumber;
    uint ServicePackBuild;
    uint Architecture;
    uint Lcid;
    CHAR[64] Name;
    CHAR[256] FullName;
    CHAR[30] Language;
    CHAR[64] BuildVersion;
    CHAR[64] ServicePackString;
}
struct CPU_INFO
{
    uint Type;
    uint NumCPUs;
    uint CurrentProc;
    DEBUG_PROCESSOR_IDENTIFICATION_ALL[2048] ProcInfo;
    uint Mhz;
}
struct TARGET_DEBUG_INFO
{
    uint SizeOfStruct;
    ulong EntryDate;
    uint DebugeeClass;
    ulong SysUpTime;
    ulong AppUpTime;
    ulong CrashTime;
    OS_INFO OsInfo;
    CPU_INFO Cpu;
    CHAR[260] DumpFile;
}
struct CPU_INFO_v2
{
    uint Type;
    uint NumCPUs;
    uint CurrentProc;
    DEBUG_PROCESSOR_IDENTIFICATION_ALL[1280] ProcInfo;
    uint Mhz;
}
struct TARGET_DEBUG_INFO_v2
{
    uint SizeOfStruct;
    ulong EntryDate;
    uint DebugeeClass;
    ulong SysUpTime;
    ulong AppUpTime;
    ulong CrashTime;
    OS_INFO OsInfo;
    CPU_INFO_v2 Cpu;
    CHAR[260] DumpFile;
}
struct OS_INFO_v1
{
    OS_TYPE Type;
    union
    {
        struct _Version_e__Struct
        {
            uint Major;
            uint Minor;
        }
        ulong Ver64;
    }
    uint ProductType;
    uint Suite;
    struct _s_e__Struct
    {
        uint _bitfield0;
    }
    uint SrvPackNumber;
    CHAR[30] Language;
    CHAR[64] OsString;
    CHAR[64] ServicePackString;
}
struct CPU_INFO_v1
{
    uint Type;
    uint NumCPUs;
    uint CurrentProc;
    DEBUG_PROCESSOR_IDENTIFICATION_ALL[32] ProcInfo;
    uint Mhz;
}
struct TARGET_DEBUG_INFO_v1
{
    uint SizeOfStruct;
    ulong Id;
    ulong Source;
    ulong EntryDate;
    ulong SysUpTime;
    ulong AppUpTime;
    ulong CrashTime;
    ulong Mode;
    OS_INFO_v1 OsInfo;
    CPU_INFO_v1 Cpu;
    CHAR[260] DumpFile;
    void* FailureData;
    CHAR[4096] StackTr;
}
alias EXT_TARGET_INFO = HRESULT function(IDebugClient4, TARGET_DEBUG_INFO*);
struct DEBUG_DECODE_ERROR
{
    uint SizeOfStruct;
    uint Code;
    BOOL TreatAsStatus;
    CHAR[64] Source;
    CHAR[260] Message;
}
alias EXT_DECODE_ERROR = void function(DEBUG_DECODE_ERROR*);
struct DEBUG_TRIAGE_FOLLOWUP_INFO
{
    uint SizeOfStruct;
    uint OwnerNameSize;
    PSTR OwnerName;
}
struct DEBUG_TRIAGE_FOLLOWUP_INFO_2
{
    uint SizeOfStruct;
    uint OwnerNameSize;
    PSTR OwnerName;
    uint FeaturePathSize;
    PSTR FeaturePath;
}
alias EXT_TRIAGE_FOLLOWUP = uint function(IDebugClient4, const(char)*, DEBUG_TRIAGE_FOLLOWUP_INFO*);
alias EXT_RELOAD_TRIAGER = HRESULT function(IDebugClient4);
struct EXT_CAB_XML_DATA
{
    uint SizeOfStruct;
    const(wchar)* XmlObjectTag;
    uint NumSubTags;
    struct _SUBTAGS
    {
        const(wchar)* SubTag;
        const(wchar)* MatchPattern;
        PWSTR ReturnText;
        uint ReturnTextSize;
        uint _bitfield0;
        uint Reserved2;
    }
}
alias EXT_XML_DATA = HRESULT function(IDebugClient4, EXT_CAB_XML_DATA*);
struct XML_DRIVER_NODE_INFO
{
    CHAR[64] FileName;
    ulong FileSize;
    ulong CreationDate;
    CHAR[64] Version;
    CHAR[260] Manufacturer;
    CHAR[260] ProductName;
    CHAR[260] Group;
    CHAR[260] Altitude;
}
alias EXT_ANALYZER = HRESULT function(IDebugClient, PSTR, uint, PSTR, uint, uint*, IDebugFailureAnalysis);
struct DEBUG_ANALYSIS_PROCESSOR_INFO
{
    uint SizeOfStruct;
    uint Model;
    uint Family;
    uint Stepping;
    uint Architecture;
    uint Revision;
    uint CurrentClockSpeed;
    uint CurrentVoltage;
    uint MaxClockSpeed;
    uint ProcessorType;
    CHAR[32] DeviceID;
    CHAR[64] Manufacturer;
    CHAR[64] Name;
    CHAR[64] Version;
    CHAR[64] Description;
}
alias EXTDLL_QUERYDATABYTAG = HRESULT function(IDebugClient4, uint, void*, ubyte*, uint);
alias EXTDLL_QUERYDATABYTAGEX = HRESULT function(IDebugClient4, uint, void*, ubyte*, uint, ubyte*, uint);
alias ENTRY_CALLBACK = HRESULT function(ulong, void*);
alias EXTDLL_ITERATERTLBALANCEDNODES = void function(ulong, uint, ENTRY_CALLBACK, void*);
alias EXT_GET_HANDLE_TRACE = HRESULT function(IDebugClient, uint, uint, ulong*, ulong*, uint);
alias EXT_GET_ENVIRONMENT_VARIABLE = HRESULT function(ulong, PSTR, PSTR, uint);
alias TANALYZE_RETURN = int;
enum : int
{
    NO_TYPE           = 0x00000000,
    PROCESS_END       = 0x00000001,
    EXIT_STATUS       = 0x00000002,
    DISK_READ_0_BYTES = 0x00000003,
    DISK_WRITE        = 0x00000004,
    NT_STATUS_CODE    = 0x00000005,
}

struct CKCL_DATA
{
    void* NextLogEvent;
    PSTR TAnalyzeString;
    TANALYZE_RETURN TAnalyzeReturnType;
}
struct CKCL_LISTHEAD
{
    CKCL_DATA* LogEventListHead;
    HANDLE Heap;
}
