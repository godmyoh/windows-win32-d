module windows.win32.system.diagnostics.etw;

import windows.win32.guid : GUID;
import windows.win32.foundation : BOOL, BOOLEAN, BSTR, FILETIME, HANDLE, HRESULT, PSID, PSTR, PWSTR, WIN32_ERROR;
import windows.win32.security : PSECURITY_DESCRIPTOR;
import windows.win32.system.com : IUnknown;
import windows.win32.system.time : TIME_ZONE_INFORMATION;

version (Windows):
extern (Windows):

WIN32_ERROR StartTraceW(CONTROLTRACE_HANDLE*, const(wchar)*, EVENT_TRACE_PROPERTIES*);
WIN32_ERROR StartTraceA(CONTROLTRACE_HANDLE*, const(char)*, EVENT_TRACE_PROPERTIES*);
WIN32_ERROR StopTraceW(CONTROLTRACE_HANDLE, const(wchar)*, EVENT_TRACE_PROPERTIES*);
WIN32_ERROR StopTraceA(CONTROLTRACE_HANDLE, const(char)*, EVENT_TRACE_PROPERTIES*);
WIN32_ERROR QueryTraceW(CONTROLTRACE_HANDLE, const(wchar)*, EVENT_TRACE_PROPERTIES*);
WIN32_ERROR QueryTraceA(CONTROLTRACE_HANDLE, const(char)*, EVENT_TRACE_PROPERTIES*);
WIN32_ERROR UpdateTraceW(CONTROLTRACE_HANDLE, const(wchar)*, EVENT_TRACE_PROPERTIES*);
WIN32_ERROR UpdateTraceA(CONTROLTRACE_HANDLE, const(char)*, EVENT_TRACE_PROPERTIES*);
WIN32_ERROR FlushTraceW(CONTROLTRACE_HANDLE, const(wchar)*, EVENT_TRACE_PROPERTIES*);
WIN32_ERROR FlushTraceA(CONTROLTRACE_HANDLE, const(char)*, EVENT_TRACE_PROPERTIES*);
WIN32_ERROR ControlTraceW(CONTROLTRACE_HANDLE, const(wchar)*, EVENT_TRACE_PROPERTIES*, EVENT_TRACE_CONTROL);
WIN32_ERROR ControlTraceA(CONTROLTRACE_HANDLE, const(char)*, EVENT_TRACE_PROPERTIES*, EVENT_TRACE_CONTROL);
WIN32_ERROR QueryAllTracesW(EVENT_TRACE_PROPERTIES**, uint, uint*);
WIN32_ERROR QueryAllTracesA(EVENT_TRACE_PROPERTIES**, uint, uint*);
WIN32_ERROR EnableTrace(uint, uint, uint, const(GUID)*, CONTROLTRACE_HANDLE);
WIN32_ERROR EnableTraceEx(const(GUID)*, const(GUID)*, CONTROLTRACE_HANDLE, uint, ubyte, ulong, ulong, uint, EVENT_FILTER_DESCRIPTOR*);
WIN32_ERROR EnableTraceEx2(CONTROLTRACE_HANDLE, const(GUID)*, uint, ubyte, ulong, ulong, uint, ENABLE_TRACE_PARAMETERS*);
WIN32_ERROR EnumerateTraceGuidsEx(TRACE_QUERY_INFO_CLASS, void*, uint, void*, uint, uint*);
WIN32_ERROR TraceSetInformation(CONTROLTRACE_HANDLE, TRACE_QUERY_INFO_CLASS, void*, uint);
WIN32_ERROR TraceQueryInformation(CONTROLTRACE_HANDLE, TRACE_QUERY_INFO_CLASS, void*, uint, uint*);
WIN32_ERROR CreateTraceInstanceId(HANDLE, EVENT_INSTANCE_INFO*);
WIN32_ERROR TraceEvent(ulong, EVENT_TRACE_HEADER*);
uint TraceEventInstance(ulong, EVENT_INSTANCE_HEADER*, EVENT_INSTANCE_INFO*, EVENT_INSTANCE_INFO*);
uint RegisterTraceGuidsW(WMIDPREQUEST, void*, const(GUID)*, uint, TRACE_GUID_REGISTRATION*, const(wchar)*, const(wchar)*, ulong*);
uint RegisterTraceGuidsA(WMIDPREQUEST, void*, const(GUID)*, uint, TRACE_GUID_REGISTRATION*, const(char)*, const(char)*, ulong*);
WIN32_ERROR EnumerateTraceGuids(TRACE_GUID_PROPERTIES**, uint, uint*);
uint UnregisterTraceGuids(ulong);
ulong GetTraceLoggerHandle(void*);
ubyte GetTraceEnableLevel(ulong);
uint GetTraceEnableFlags(ulong);
PROCESSTRACE_HANDLE OpenTraceW(EVENT_TRACE_LOGFILEW*);
WIN32_ERROR ProcessTrace(PROCESSTRACE_HANDLE*, uint, FILETIME*, FILETIME*);
WIN32_ERROR CloseTrace(PROCESSTRACE_HANDLE);
ulong OpenTraceFromBufferStream(const(ETW_OPEN_TRACE_OPTIONS)*, PETW_BUFFER_COMPLETION_CALLBACK, void*);
ulong OpenTraceFromRealTimeLogger(const(wchar)*, const(ETW_OPEN_TRACE_OPTIONS)*, TRACE_LOGFILE_HEADER*);
ulong OpenTraceFromRealTimeLoggerWithAllocationOptions(const(wchar)*, const(ETW_OPEN_TRACE_OPTIONS)*, ulong, HANDLE, TRACE_LOGFILE_HEADER*);
ulong OpenTraceFromFile(const(wchar)*, const(ETW_OPEN_TRACE_OPTIONS)*, TRACE_LOGFILE_HEADER*);
uint ProcessTraceBufferIncrementReference(ulong, const(ETW_BUFFER_HEADER)*);
uint ProcessTraceBufferDecrementReference(const(ETW_BUFFER_HEADER)*);
uint ProcessTraceAddBufferToBufferStream(ulong, const(ETW_BUFFER_HEADER)*, uint);
WIN32_ERROR QueryTraceProcessingHandle(PROCESSTRACE_HANDLE, ETW_PROCESS_HANDLE_INFO_TYPE, void*, uint, void*, uint, uint*);
PROCESSTRACE_HANDLE OpenTraceA(EVENT_TRACE_LOGFILEA*);
WIN32_ERROR SetTraceCallback(const(GUID)*, PEVENT_CALLBACK);
WIN32_ERROR RemoveTraceCallback(const(GUID)*);
WIN32_ERROR TraceMessage(ulong, TRACE_MESSAGE_FLAGS, const(GUID)*, ushort);
WIN32_ERROR TraceMessageVa(ulong, TRACE_MESSAGE_FLAGS, const(GUID)*, ushort, byte*);
uint EventRegister(const(GUID)*, PENABLECALLBACK, void*, ulong*);
uint EventUnregister(ulong);
uint EventSetInformation(ulong, EVENT_INFO_CLASS, void*, uint);
BOOLEAN EventEnabled(ulong, const(EVENT_DESCRIPTOR)*);
BOOLEAN EventProviderEnabled(ulong, ubyte, ulong);
uint EventWrite(ulong, const(EVENT_DESCRIPTOR)*, uint, EVENT_DATA_DESCRIPTOR*);
uint EventWriteTransfer(ulong, const(EVENT_DESCRIPTOR)*, const(GUID)*, const(GUID)*, uint, EVENT_DATA_DESCRIPTOR*);
uint EventWriteEx(ulong, const(EVENT_DESCRIPTOR)*, ulong, uint, const(GUID)*, const(GUID)*, uint, EVENT_DATA_DESCRIPTOR*);
uint EventWriteString(ulong, ubyte, ulong, const(wchar)*);
uint EventActivityIdControl(uint, GUID*);
uint EventAccessControl(GUID*, uint, PSID, uint, BOOLEAN);
uint EventAccessQuery(GUID*, PSECURITY_DESCRIPTOR, uint*);
uint EventAccessRemove(GUID*);
uint TdhCreatePayloadFilter(const(GUID)*, const(EVENT_DESCRIPTOR)*, BOOLEAN, uint, PAYLOAD_FILTER_PREDICATE*, void**);
uint TdhDeletePayloadFilter(void**);
uint TdhAggregatePayloadFilters(uint, void**, BOOLEAN*, EVENT_FILTER_DESCRIPTOR*);
uint TdhCleanupPayloadEventFilterDescriptor(EVENT_FILTER_DESCRIPTOR*);
uint TdhGetEventInformation(EVENT_RECORD*, uint, TDH_CONTEXT*, TRACE_EVENT_INFO*, uint*);
uint TdhGetEventMapInformation(EVENT_RECORD*, PWSTR, EVENT_MAP_INFO*, uint*);
uint TdhGetPropertySize(EVENT_RECORD*, uint, TDH_CONTEXT*, uint, PROPERTY_DATA_DESCRIPTOR*, uint*);
uint TdhGetProperty(EVENT_RECORD*, uint, TDH_CONTEXT*, uint, PROPERTY_DATA_DESCRIPTOR*, uint, ubyte*);
uint TdhEnumerateProviders(PROVIDER_ENUMERATION_INFO*, uint*);
uint TdhEnumerateProvidersForDecodingSource(DECODING_SOURCE, PROVIDER_ENUMERATION_INFO*, uint, uint*);
uint TdhQueryProviderFieldInformation(GUID*, ulong, EVENT_FIELD_TYPE, PROVIDER_FIELD_INFOARRAY*, uint*);
uint TdhEnumerateProviderFieldInformation(GUID*, EVENT_FIELD_TYPE, PROVIDER_FIELD_INFOARRAY*, uint*);
uint TdhEnumerateProviderFilters(GUID*, uint, TDH_CONTEXT*, uint*, PROVIDER_FILTER_INFO**, uint*);
uint TdhLoadManifest(PWSTR);
uint TdhLoadManifestFromMemory(const(void)*, uint);
uint TdhUnloadManifest(PWSTR);
uint TdhUnloadManifestFromMemory(const(void)*, uint);
uint TdhFormatProperty(TRACE_EVENT_INFO*, EVENT_MAP_INFO*, uint, ushort, ushort, ushort, ushort, ubyte*, uint*, PWSTR, ushort*);
uint TdhOpenDecodingHandle(TDH_HANDLE*);
uint TdhSetDecodingParameter(TDH_HANDLE, TDH_CONTEXT*);
uint TdhGetDecodingParameter(TDH_HANDLE, TDH_CONTEXT*);
uint TdhGetWppProperty(TDH_HANDLE, EVENT_RECORD*, PWSTR, uint*, ubyte*);
uint TdhGetWppMessage(TDH_HANDLE, EVENT_RECORD*, uint*, ubyte*);
uint TdhCloseDecodingHandle(TDH_HANDLE);
uint TdhLoadManifestFromBinary(PWSTR);
uint TdhEnumerateManifestProviderEvents(GUID*, PROVIDER_EVENT_INFO*, uint*);
uint TdhGetManifestEventInformation(GUID*, EVENT_DESCRIPTOR*, TRACE_EVENT_INFO*, uint*);
int CveEventWrite(const(wchar)*, const(wchar)*);
enum ALPCGuid = GUID(0x45d8cccd, 0x539f, 0x4b72, [0xa8, 0xb7, 0x5c, 0x68, 0x31, 0x42, 0x60, 0x9a]);
enum DiskIoGuid = GUID(0x3d6fa8d4, 0xfe05, 0x11d0, [0x9d, 0xda, 0x0, 0xc0, 0x4f, 0xd7, 0xba, 0x7c]);
enum EventTraceConfigGuid = GUID(0x1853a65, 0x418f, 0x4f36, [0xae, 0xfc, 0xdc, 0xf, 0x1d, 0x2f, 0xd2, 0x35]);
enum FileIoGuid = GUID(0x90cbdc39, 0x4a3e, 0x11d1, [0x84, 0xf4, 0x0, 0x0, 0xf8, 0x4, 0x64, 0xe3]);
enum ImageLoadGuid = GUID(0x2cb15d1d, 0x5fc1, 0x11d2, [0xab, 0xe1, 0x0, 0xa0, 0xc9, 0x11, 0xf5, 0x18]);
enum PageFaultGuid = GUID(0x3d6fa8d3, 0xfe05, 0x11d0, [0x9d, 0xda, 0x0, 0xc0, 0x4f, 0xd7, 0xba, 0x7c]);
enum PerfInfoGuid = GUID(0xce1dbfb4, 0x137e, 0x4da6, [0x87, 0xb0, 0x3f, 0x59, 0xaa, 0x10, 0x2c, 0xbc]);
enum ProcessGuid = GUID(0x3d6fa8d0, 0xfe05, 0x11d0, [0x9d, 0xda, 0x0, 0xc0, 0x4f, 0xd7, 0xba, 0x7c]);
enum RegistryGuid = GUID(0xae53722e, 0xc863, 0x11d2, [0x86, 0x59, 0x0, 0xc0, 0x4f, 0xa3, 0x21, 0xa1]);
enum SplitIoGuid = GUID(0xd837ca92, 0x12b9, 0x44a5, [0xad, 0x6a, 0x3a, 0x65, 0xb3, 0x57, 0x8a, 0xa8]);
enum TcpIpGuid = GUID(0x9a280ac0, 0xc8e0, 0x11d1, [0x84, 0xe2, 0x0, 0xc0, 0x4f, 0xb9, 0x98, 0xa2]);
enum ThreadGuid = GUID(0x3d6fa8d1, 0xfe05, 0x11d0, [0x9d, 0xda, 0x0, 0xc0, 0x4f, 0xd7, 0xba, 0x7c]);
enum UdpIpGuid = GUID(0xbf3a50c5, 0xa9c9, 0x4988, [0xa0, 0x5, 0x2d, 0xf0, 0xb7, 0xc8, 0xf, 0x80]);
enum WNODE_FLAG_ALL_DATA = 0x00000001;
enum WNODE_FLAG_SINGLE_INSTANCE = 0x00000002;
enum WNODE_FLAG_SINGLE_ITEM = 0x00000004;
enum WNODE_FLAG_EVENT_ITEM = 0x00000008;
enum WNODE_FLAG_FIXED_INSTANCE_SIZE = 0x00000010;
enum WNODE_FLAG_TOO_SMALL = 0x00000020;
enum WNODE_FLAG_INSTANCES_SAME = 0x00000040;
enum WNODE_FLAG_STATIC_INSTANCE_NAMES = 0x00000080;
enum WNODE_FLAG_INTERNAL = 0x00000100;
enum WNODE_FLAG_USE_TIMESTAMP = 0x00000200;
enum WNODE_FLAG_PERSIST_EVENT = 0x00000400;
enum WNODE_FLAG_EVENT_REFERENCE = 0x00002000;
enum WNODE_FLAG_ANSI_INSTANCENAMES = 0x00004000;
enum WNODE_FLAG_METHOD_ITEM = 0x00008000;
enum WNODE_FLAG_PDO_INSTANCE_NAMES = 0x00010000;
enum WNODE_FLAG_TRACED_GUID = 0x00020000;
enum WNODE_FLAG_LOG_WNODE = 0x00040000;
enum WNODE_FLAG_USE_GUID_PTR = 0x00080000;
enum WNODE_FLAG_USE_MOF_PTR = 0x00100000;
enum WNODE_FLAG_NO_HEADER = 0x00200000;
enum WNODE_FLAG_SEND_DATA_BLOCK = 0x00400000;
enum WNODE_FLAG_VERSIONED_PROPERTIES = 0x00800000;
enum WNODE_FLAG_SEVERITY_MASK = 0xff000000;
enum WMIREG_FLAG_EXPENSIVE = 0x00000001;
enum WMIREG_FLAG_INSTANCE_LIST = 0x00000004;
enum WMIREG_FLAG_INSTANCE_BASENAME = 0x00000008;
enum WMIREG_FLAG_INSTANCE_PDO = 0x00000020;
enum WMIREG_FLAG_REMOVE_GUID = 0x00010000;
enum WMIREG_FLAG_RESERVED1 = 0x00020000;
enum WMIREG_FLAG_RESERVED2 = 0x00040000;
enum WMIREG_FLAG_TRACED_GUID = 0x00080000;
enum WMIREG_FLAG_TRACE_CONTROL_GUID = 0x00001000;
enum WMIREG_FLAG_EVENT_ONLY_GUID = 0x00000040;
enum WMI_GUIDTYPE_TRACECONTROL = 0x00000000;
enum WMI_GUIDTYPE_TRACE = 0x00000001;
enum WMI_GUIDTYPE_DATA = 0x00000002;
enum WMI_GUIDTYPE_EVENT = 0x00000003;
enum WMIGUID_QUERY = 0x00000001;
enum WMIGUID_SET = 0x00000002;
enum WMIGUID_NOTIFICATION = 0x00000004;
enum WMIGUID_READ_DESCRIPTION = 0x00000008;
enum WMIGUID_EXECUTE = 0x00000010;
enum TRACELOG_CREATE_REALTIME = 0x00000020;
enum TRACELOG_CREATE_ONDISK = 0x00000040;
enum TRACELOG_GUID_ENABLE = 0x00000080;
enum TRACELOG_ACCESS_KERNEL_LOGGER = 0x00000100;
enum TRACELOG_LOG_EVENT = 0x00000200;
enum TRACELOG_CREATE_INPROC = 0x00000200;
enum TRACELOG_ACCESS_REALTIME = 0x00000400;
enum TRACELOG_REGISTER_GUIDS = 0x00000800;
enum TRACELOG_JOIN_GROUP = 0x00001000;
enum WMI_GLOBAL_LOGGER_ID = 0x00000001;
enum MAX_PAYLOAD_PREDICATES = 0x00000008;
enum EventTraceGuid = GUID(0x68fdd900, 0x4a3e, 0x11d1, [0x84, 0xf4, 0x0, 0x0, 0xf8, 0x4, 0x64, 0xe3]);
enum SystemTraceControlGuid = GUID(0x9e814aad, 0x3204, 0x11d2, [0x9a, 0x82, 0x0, 0x60, 0x8, 0xa8, 0x69, 0x39]);
enum DefaultTraceSecurityGuid = GUID(0x811c1af, 0x7a07, 0x4a06, [0x82, 0xed, 0x86, 0x94, 0x55, 0xcd, 0xf7, 0x13]);
enum PrivateLoggerNotificationGuid = GUID(0x3595ab5c, 0x42a, 0x4c8e, [0xb9, 0x42, 0x2d, 0x5, 0x9b, 0xfe, 0xb1, 0xb1]);
enum SystemIoFilterProviderGuid = GUID(0xfbd09363, 0x9e22, 0x4661, [0xb8, 0xbf, 0xe7, 0xa3, 0x4b, 0x53, 0x5b, 0x8c]);
enum SystemObjectProviderGuid = GUID(0xfebd7460, 0x3d1d, 0x47eb, [0xaf, 0x49, 0xc9, 0xee, 0xb1, 0xe1, 0x46, 0xf2]);
enum SystemPowerProviderGuid = GUID(0xc134884a, 0x32d5, 0x4488, [0x80, 0xe5, 0x14, 0xed, 0x7a, 0xbb, 0x82, 0x69]);
enum SystemHypervisorProviderGuid = GUID(0xbafa072a, 0x918a, 0x4bed, [0xb6, 0x22, 0xbc, 0x15, 0x20, 0x97, 0x9, 0x8f]);
enum SystemLockProviderGuid = GUID(0x721ddfd3, 0xdacc, 0x4e1e, [0xb2, 0x6a, 0xa2, 0xcb, 0x31, 0xd4, 0x70, 0x5a]);
enum SystemConfigProviderGuid = GUID(0xfef3a8b6, 0x318d, 0x4b67, [0xa9, 0x6a, 0x3b, 0xf, 0x6b, 0x8f, 0x18, 0xfe]);
enum SystemCpuProviderGuid = GUID(0xc6c5265f, 0xeae8, 0x4650, [0xaa, 0xe4, 0x9d, 0x48, 0x60, 0x3d, 0x85, 0x10]);
enum SystemSchedulerProviderGuid = GUID(0x599a2a76, 0x4d91, 0x4910, [0x9a, 0xc7, 0x7d, 0x33, 0xf2, 0xe9, 0x7a, 0x6c]);
enum SystemProfileProviderGuid = GUID(0xbfeb0324, 0x1cee, 0x496f, [0xa4, 0x9, 0x2a, 0xc2, 0xb4, 0x8a, 0x63, 0x22]);
enum SystemIoProviderGuid = GUID(0x3d5c43e3, 0xf1c, 0x4202, [0xb8, 0x17, 0x17, 0x4c, 0x0, 0x70, 0xdc, 0x79]);
enum SystemMemoryProviderGuid = GUID(0x82958ca9, 0xb6cd, 0x47f8, [0xa3, 0xa8, 0x3, 0xae, 0x85, 0xa4, 0xbc, 0x24]);
enum SystemRegistryProviderGuid = GUID(0x16156bd9, 0xfab4, 0x4cfa, [0xa2, 0x32, 0x89, 0xd1, 0x9, 0x90, 0x58, 0xe3]);
enum SystemProcessProviderGuid = GUID(0x151f55dc, 0x467d, 0x471f, [0x83, 0xb5, 0x5f, 0x88, 0x9d, 0x46, 0xff, 0x66]);
enum SystemAlpcProviderGuid = GUID(0xfcb9baaf, 0xe529, 0x4980, [0x92, 0xe9, 0xce, 0xd1, 0xa6, 0xaa, 0xdf, 0xdf]);
enum SystemSyscallProviderGuid = GUID(0x434286f7, 0x6f1b, 0x45bb, [0xb3, 0x7e, 0x95, 0xf6, 0x23, 0x4, 0x6c, 0x7c]);
enum SystemInterruptProviderGuid = GUID(0xd4bbee17, 0xb545, 0x4888, [0x85, 0x8b, 0x74, 0x41, 0x69, 0x1, 0x5b, 0x25]);
enum SystemTimerProviderGuid = GUID(0x4f061568, 0xe215, 0x499f, [0xab, 0x2e, 0xed, 0xa0, 0xae, 0x89, 0xa, 0x5b]);
enum KERNEL_LOGGER_NAMEW = "NT Kernel Logger";
enum GLOBAL_LOGGER_NAMEW = "GlobalLogger";
enum EVENT_LOGGER_NAMEW = "EventLog";
enum DIAG_LOGGER_NAMEW = "DiagLog";
enum KERNEL_LOGGER_NAMEA = "NT Kernel Logger";
enum GLOBAL_LOGGER_NAMEA = "GlobalLogger";
enum EVENT_LOGGER_NAMEA = "EventLog";
enum DIAG_LOGGER_NAMEA = "DiagLog";
enum MAX_MOF_FIELDS = 0x00000010;
enum SYSTEM_EVENT_TYPE = 0x00000001;
enum EVENT_TRACE_TYPE_INFO = 0x00000000;
enum EVENT_TRACE_TYPE_START = 0x00000001;
enum EVENT_TRACE_TYPE_END = 0x00000002;
enum EVENT_TRACE_TYPE_STOP = 0x00000002;
enum EVENT_TRACE_TYPE_DC_START = 0x00000003;
enum EVENT_TRACE_TYPE_DC_END = 0x00000004;
enum EVENT_TRACE_TYPE_EXTENSION = 0x00000005;
enum EVENT_TRACE_TYPE_REPLY = 0x00000006;
enum EVENT_TRACE_TYPE_DEQUEUE = 0x00000007;
enum EVENT_TRACE_TYPE_RESUME = 0x00000007;
enum EVENT_TRACE_TYPE_CHECKPOINT = 0x00000008;
enum EVENT_TRACE_TYPE_SUSPEND = 0x00000008;
enum EVENT_TRACE_TYPE_WINEVT_SEND = 0x00000009;
enum EVENT_TRACE_TYPE_WINEVT_RECEIVE = 0x000000f0;
enum TRACE_LEVEL_NONE = 0x00000000;
enum TRACE_LEVEL_CRITICAL = 0x00000001;
enum TRACE_LEVEL_FATAL = 0x00000001;
enum TRACE_LEVEL_ERROR = 0x00000002;
enum TRACE_LEVEL_WARNING = 0x00000003;
enum TRACE_LEVEL_INFORMATION = 0x00000004;
enum TRACE_LEVEL_VERBOSE = 0x00000005;
enum TRACE_LEVEL_RESERVED6 = 0x00000006;
enum TRACE_LEVEL_RESERVED7 = 0x00000007;
enum TRACE_LEVEL_RESERVED8 = 0x00000008;
enum TRACE_LEVEL_RESERVED9 = 0x00000009;
enum EVENT_TRACE_TYPE_LOAD = 0x0000000a;
enum EVENT_TRACE_TYPE_TERMINATE = 0x0000000b;
enum EVENT_TRACE_TYPE_IO_READ = 0x0000000a;
enum EVENT_TRACE_TYPE_IO_WRITE = 0x0000000b;
enum EVENT_TRACE_TYPE_IO_READ_INIT = 0x0000000c;
enum EVENT_TRACE_TYPE_IO_WRITE_INIT = 0x0000000d;
enum EVENT_TRACE_TYPE_IO_FLUSH = 0x0000000e;
enum EVENT_TRACE_TYPE_IO_FLUSH_INIT = 0x0000000f;
enum EVENT_TRACE_TYPE_IO_REDIRECTED_INIT = 0x00000010;
enum EVENT_TRACE_TYPE_MM_TF = 0x0000000a;
enum EVENT_TRACE_TYPE_MM_DZF = 0x0000000b;
enum EVENT_TRACE_TYPE_MM_COW = 0x0000000c;
enum EVENT_TRACE_TYPE_MM_GPF = 0x0000000d;
enum EVENT_TRACE_TYPE_MM_HPF = 0x0000000e;
enum EVENT_TRACE_TYPE_MM_AV = 0x0000000f;
enum EVENT_TRACE_TYPE_SEND = 0x0000000a;
enum EVENT_TRACE_TYPE_RECEIVE = 0x0000000b;
enum EVENT_TRACE_TYPE_CONNECT = 0x0000000c;
enum EVENT_TRACE_TYPE_DISCONNECT = 0x0000000d;
enum EVENT_TRACE_TYPE_RETRANSMIT = 0x0000000e;
enum EVENT_TRACE_TYPE_ACCEPT = 0x0000000f;
enum EVENT_TRACE_TYPE_RECONNECT = 0x00000010;
enum EVENT_TRACE_TYPE_CONNFAIL = 0x00000011;
enum EVENT_TRACE_TYPE_COPY_TCP = 0x00000012;
enum EVENT_TRACE_TYPE_COPY_ARP = 0x00000013;
enum EVENT_TRACE_TYPE_ACKFULL = 0x00000014;
enum EVENT_TRACE_TYPE_ACKPART = 0x00000015;
enum EVENT_TRACE_TYPE_ACKDUP = 0x00000016;
enum EVENT_TRACE_TYPE_GUIDMAP = 0x0000000a;
enum EVENT_TRACE_TYPE_CONFIG = 0x0000000b;
enum EVENT_TRACE_TYPE_SIDINFO = 0x0000000c;
enum EVENT_TRACE_TYPE_SECURITY = 0x0000000d;
enum EVENT_TRACE_TYPE_DBGID_RSDS = 0x00000040;
enum EVENT_TRACE_TYPE_REGCREATE = 0x0000000a;
enum EVENT_TRACE_TYPE_REGOPEN = 0x0000000b;
enum EVENT_TRACE_TYPE_REGDELETE = 0x0000000c;
enum EVENT_TRACE_TYPE_REGQUERY = 0x0000000d;
enum EVENT_TRACE_TYPE_REGSETVALUE = 0x0000000e;
enum EVENT_TRACE_TYPE_REGDELETEVALUE = 0x0000000f;
enum EVENT_TRACE_TYPE_REGQUERYVALUE = 0x00000010;
enum EVENT_TRACE_TYPE_REGENUMERATEKEY = 0x00000011;
enum EVENT_TRACE_TYPE_REGENUMERATEVALUEKEY = 0x00000012;
enum EVENT_TRACE_TYPE_REGQUERYMULTIPLEVALUE = 0x00000013;
enum EVENT_TRACE_TYPE_REGSETINFORMATION = 0x00000014;
enum EVENT_TRACE_TYPE_REGFLUSH = 0x00000015;
enum EVENT_TRACE_TYPE_REGKCBCREATE = 0x00000016;
enum EVENT_TRACE_TYPE_REGKCBDELETE = 0x00000017;
enum EVENT_TRACE_TYPE_REGKCBRUNDOWNBEGIN = 0x00000018;
enum EVENT_TRACE_TYPE_REGKCBRUNDOWNEND = 0x00000019;
enum EVENT_TRACE_TYPE_REGVIRTUALIZE = 0x0000001a;
enum EVENT_TRACE_TYPE_REGCLOSE = 0x0000001b;
enum EVENT_TRACE_TYPE_REGSETSECURITY = 0x0000001c;
enum EVENT_TRACE_TYPE_REGQUERYSECURITY = 0x0000001d;
enum EVENT_TRACE_TYPE_REGCOMMIT = 0x0000001e;
enum EVENT_TRACE_TYPE_REGPREPARE = 0x0000001f;
enum EVENT_TRACE_TYPE_REGROLLBACK = 0x00000020;
enum EVENT_TRACE_TYPE_REGMOUNTHIVE = 0x00000021;
enum EVENT_TRACE_TYPE_CONFIG_CPU = 0x0000000a;
enum EVENT_TRACE_TYPE_CONFIG_PHYSICALDISK = 0x0000000b;
enum EVENT_TRACE_TYPE_CONFIG_LOGICALDISK = 0x0000000c;
enum EVENT_TRACE_TYPE_CONFIG_NIC = 0x0000000d;
enum EVENT_TRACE_TYPE_CONFIG_VIDEO = 0x0000000e;
enum EVENT_TRACE_TYPE_CONFIG_SERVICES = 0x0000000f;
enum EVENT_TRACE_TYPE_CONFIG_POWER = 0x00000010;
enum EVENT_TRACE_TYPE_CONFIG_NETINFO = 0x00000011;
enum EVENT_TRACE_TYPE_CONFIG_OPTICALMEDIA = 0x00000012;
enum EVENT_TRACE_TYPE_CONFIG_PHYSICALDISK_EX = 0x00000013;
enum EVENT_TRACE_TYPE_CONFIG_IRQ = 0x00000015;
enum EVENT_TRACE_TYPE_CONFIG_PNP = 0x00000016;
enum EVENT_TRACE_TYPE_CONFIG_IDECHANNEL = 0x00000017;
enum EVENT_TRACE_TYPE_CONFIG_NUMANODE = 0x00000018;
enum EVENT_TRACE_TYPE_CONFIG_PLATFORM = 0x00000019;
enum EVENT_TRACE_TYPE_CONFIG_PROCESSORGROUP = 0x0000001a;
enum EVENT_TRACE_TYPE_CONFIG_PROCESSORNUMBER = 0x0000001b;
enum EVENT_TRACE_TYPE_CONFIG_DPI = 0x0000001c;
enum EVENT_TRACE_TYPE_CONFIG_CI_INFO = 0x0000001d;
enum EVENT_TRACE_TYPE_CONFIG_MACHINEID = 0x0000001e;
enum EVENT_TRACE_TYPE_CONFIG_DEFRAG = 0x0000001f;
enum EVENT_TRACE_TYPE_CONFIG_MOBILEPLATFORM = 0x00000020;
enum EVENT_TRACE_TYPE_CONFIG_DEVICEFAMILY = 0x00000021;
enum EVENT_TRACE_TYPE_CONFIG_FLIGHTID = 0x00000022;
enum EVENT_TRACE_TYPE_CONFIG_PROCESSOR = 0x00000023;
enum EVENT_TRACE_TYPE_CONFIG_VIRTUALIZATION = 0x00000024;
enum EVENT_TRACE_TYPE_CONFIG_BOOT = 0x00000025;
enum EVENT_TRACE_TYPE_OPTICAL_IO_READ = 0x00000037;
enum EVENT_TRACE_TYPE_OPTICAL_IO_WRITE = 0x00000038;
enum EVENT_TRACE_TYPE_OPTICAL_IO_FLUSH = 0x00000039;
enum EVENT_TRACE_TYPE_OPTICAL_IO_READ_INIT = 0x0000003a;
enum EVENT_TRACE_TYPE_OPTICAL_IO_WRITE_INIT = 0x0000003b;
enum EVENT_TRACE_TYPE_OPTICAL_IO_FLUSH_INIT = 0x0000003c;
enum EVENT_TRACE_TYPE_FLT_PREOP_INIT = 0x00000060;
enum EVENT_TRACE_TYPE_FLT_POSTOP_INIT = 0x00000061;
enum EVENT_TRACE_TYPE_FLT_PREOP_COMPLETION = 0x00000062;
enum EVENT_TRACE_TYPE_FLT_POSTOP_COMPLETION = 0x00000063;
enum EVENT_TRACE_TYPE_FLT_PREOP_FAILURE = 0x00000064;
enum EVENT_TRACE_TYPE_FLT_POSTOP_FAILURE = 0x00000065;
enum EVENT_TRACE_FLAG_DEBUG_EVENTS = 0x00400000;
enum EVENT_TRACE_FLAG_EXTENSION = 0x80000000;
enum EVENT_TRACE_FLAG_FORWARD_WMI = 0x40000000;
enum EVENT_TRACE_FLAG_ENABLE_RESERVE = 0x20000000;
enum EVENT_TRACE_FILE_MODE_NONE = 0x00000000;
enum EVENT_TRACE_FILE_MODE_SEQUENTIAL = 0x00000001;
enum EVENT_TRACE_FILE_MODE_CIRCULAR = 0x00000002;
enum EVENT_TRACE_FILE_MODE_APPEND = 0x00000004;
enum EVENT_TRACE_REAL_TIME_MODE = 0x00000100;
enum EVENT_TRACE_DELAY_OPEN_FILE_MODE = 0x00000200;
enum EVENT_TRACE_BUFFERING_MODE = 0x00000400;
enum EVENT_TRACE_PRIVATE_LOGGER_MODE = 0x00000800;
enum EVENT_TRACE_ADD_HEADER_MODE = 0x00001000;
enum EVENT_TRACE_USE_GLOBAL_SEQUENCE = 0x00004000;
enum EVENT_TRACE_USE_LOCAL_SEQUENCE = 0x00008000;
enum EVENT_TRACE_RELOG_MODE = 0x00010000;
enum EVENT_TRACE_USE_PAGED_MEMORY = 0x01000000;
enum EVENT_TRACE_FILE_MODE_NEWFILE = 0x00000008;
enum EVENT_TRACE_FILE_MODE_PREALLOCATE = 0x00000020;
enum EVENT_TRACE_NONSTOPPABLE_MODE = 0x00000040;
enum EVENT_TRACE_SECURE_MODE = 0x00000080;
enum EVENT_TRACE_USE_KBYTES_FOR_SIZE = 0x00002000;
enum EVENT_TRACE_PRIVATE_IN_PROC = 0x00020000;
enum EVENT_TRACE_MODE_RESERVED = 0x00100000;
enum EVENT_TRACE_NO_PER_PROCESSOR_BUFFERING = 0x10000000;
enum EVENT_TRACE_SYSTEM_LOGGER_MODE = 0x02000000;
enum EVENT_TRACE_ADDTO_TRIAGE_DUMP = 0x80000000;
enum EVENT_TRACE_STOP_ON_HYBRID_SHUTDOWN = 0x00400000;
enum EVENT_TRACE_PERSIST_ON_HYBRID_SHUTDOWN = 0x00800000;
enum EVENT_TRACE_INDEPENDENT_SESSION_MODE = 0x08000000;
enum EVENT_TRACE_COMPRESSED_MODE = 0x04000000;
enum EVENT_TRACE_CONTROL_INCREMENT_FILE = 0x00000004;
enum EVENT_TRACE_CONTROL_CONVERT_TO_REALTIME = 0x00000005;
enum TRACE_MESSAGE_PERFORMANCE_TIMESTAMP = 0x00000010;
enum TRACE_MESSAGE_POINTER32 = 0x00000040;
enum TRACE_MESSAGE_POINTER64 = 0x00000080;
enum TRACE_MESSAGE_FLAG_MASK = 0x0000ffff;
enum EVENT_TRACE_USE_PROCTIME = 0x00000001;
enum EVENT_TRACE_USE_NOCPUTIME = 0x00000002;
enum TRACE_HEADER_FLAG_USE_TIMESTAMP = 0x00000200;
enum TRACE_HEADER_FLAG_TRACED_GUID = 0x00020000;
enum TRACE_HEADER_FLAG_LOG_WNODE = 0x00040000;
enum TRACE_HEADER_FLAG_USE_GUID_PTR = 0x00080000;
enum TRACE_HEADER_FLAG_USE_MOF_PTR = 0x00100000;
enum SYSTEM_ALPC_KW_GENERAL = 0x0000000000000001;
enum SYSTEM_CONFIG_KW_SYSTEM = 0x0000000000000001;
enum SYSTEM_CONFIG_KW_GRAPHICS = 0x0000000000000002;
enum SYSTEM_CONFIG_KW_STORAGE = 0x0000000000000004;
enum SYSTEM_CONFIG_KW_NETWORK = 0x0000000000000008;
enum SYSTEM_CONFIG_KW_SERVICES = 0x0000000000000010;
enum SYSTEM_CONFIG_KW_PNP = 0x0000000000000020;
enum SYSTEM_CONFIG_KW_OPTICAL = 0x0000000000000040;
enum SYSTEM_CPU_KW_CONFIG = 0x0000000000000001;
enum SYSTEM_CPU_KW_CACHE_FLUSH = 0x0000000000000002;
enum SYSTEM_CPU_KW_SPEC_CONTROL = 0x0000000000000004;
enum SYSTEM_HYPERVISOR_KW_PROFILE = 0x0000000000000001;
enum SYSTEM_HYPERVISOR_KW_CALLOUTS = 0x0000000000000002;
enum SYSTEM_HYPERVISOR_KW_VTL_CHANGE = 0x0000000000000004;
enum SYSTEM_INTERRUPT_KW_GENERAL = 0x0000000000000001;
enum SYSTEM_INTERRUPT_KW_CLOCK_INTERRUPT = 0x0000000000000002;
enum SYSTEM_INTERRUPT_KW_DPC = 0x0000000000000004;
enum SYSTEM_INTERRUPT_KW_DPC_QUEUE = 0x0000000000000008;
enum SYSTEM_INTERRUPT_KW_WDF_DPC = 0x0000000000000010;
enum SYSTEM_INTERRUPT_KW_WDF_INTERRUPT = 0x0000000000000020;
enum SYSTEM_INTERRUPT_KW_IPI = 0x0000000000000040;
enum SYSTEM_IO_KW_DISK = 0x0000000000000001;
enum SYSTEM_IO_KW_DISK_INIT = 0x0000000000000002;
enum SYSTEM_IO_KW_FILENAME = 0x0000000000000004;
enum SYSTEM_IO_KW_SPLIT = 0x0000000000000008;
enum SYSTEM_IO_KW_FILE = 0x0000000000000010;
enum SYSTEM_IO_KW_OPTICAL = 0x0000000000000020;
enum SYSTEM_IO_KW_OPTICAL_INIT = 0x0000000000000040;
enum SYSTEM_IO_KW_DRIVERS = 0x0000000000000080;
enum SYSTEM_IO_KW_CC = 0x0000000000000100;
enum SYSTEM_IO_KW_NETWORK = 0x0000000000000200;
enum SYSTEM_IOFILTER_KW_GENERAL = 0x0000000000000001;
enum SYSTEM_IOFILTER_KW_INIT = 0x0000000000000002;
enum SYSTEM_IOFILTER_KW_FASTIO = 0x0000000000000004;
enum SYSTEM_IOFILTER_KW_FAILURE = 0x0000000000000008;
enum SYSTEM_LOCK_KW_SPINLOCK = 0x0000000000000001;
enum SYSTEM_LOCK_KW_SPINLOCK_COUNTERS = 0x0000000000000002;
enum SYSTEM_LOCK_KW_SYNC_OBJECTS = 0x0000000000000004;
enum SYSTEM_MEMORY_KW_GENERAL = 0x0000000000000001;
enum SYSTEM_MEMORY_KW_HARD_FAULTS = 0x0000000000000002;
enum SYSTEM_MEMORY_KW_ALL_FAULTS = 0x0000000000000004;
enum SYSTEM_MEMORY_KW_POOL = 0x0000000000000008;
enum SYSTEM_MEMORY_KW_MEMINFO = 0x0000000000000010;
enum SYSTEM_MEMORY_KW_PFSECTION = 0x0000000000000020;
enum SYSTEM_MEMORY_KW_MEMINFO_WS = 0x0000000000000040;
enum SYSTEM_MEMORY_KW_HEAP = 0x0000000000000080;
enum SYSTEM_MEMORY_KW_WS = 0x0000000000000100;
enum SYSTEM_MEMORY_KW_CONTMEM_GEN = 0x0000000000000200;
enum SYSTEM_MEMORY_KW_VIRTUAL_ALLOC = 0x0000000000000400;
enum SYSTEM_MEMORY_KW_FOOTPRINT = 0x0000000000000800;
enum SYSTEM_MEMORY_KW_SESSION = 0x0000000000001000;
enum SYSTEM_MEMORY_KW_REFSET = 0x0000000000002000;
enum SYSTEM_MEMORY_KW_VAMAP = 0x0000000000004000;
enum SYSTEM_MEMORY_KW_NONTRADEABLE = 0x0000000000008000;
enum SYSTEM_OBJECT_KW_GENERAL = 0x0000000000000001;
enum SYSTEM_OBJECT_KW_HANDLE = 0x0000000000000002;
enum SYSTEM_POWER_KW_GENERAL = 0x0000000000000001;
enum SYSTEM_POWER_KW_HIBER_RUNDOWN = 0x0000000000000002;
enum SYSTEM_POWER_KW_PROCESSOR_IDLE = 0x0000000000000004;
enum SYSTEM_POWER_KW_IDLE_SELECTION = 0x0000000000000008;
enum SYSTEM_POWER_KW_PPM_EXIT_LATENCY = 0x0000000000000010;
enum SYSTEM_PROCESS_KW_GENERAL = 0x0000000000000001;
enum SYSTEM_PROCESS_KW_INSWAP = 0x0000000000000002;
enum SYSTEM_PROCESS_KW_FREEZE = 0x0000000000000004;
enum SYSTEM_PROCESS_KW_PERF_COUNTER = 0x0000000000000008;
enum SYSTEM_PROCESS_KW_WAKE_COUNTER = 0x0000000000000010;
enum SYSTEM_PROCESS_KW_WAKE_DROP = 0x0000000000000020;
enum SYSTEM_PROCESS_KW_WAKE_EVENT = 0x0000000000000040;
enum SYSTEM_PROCESS_KW_DEBUG_EVENTS = 0x0000000000000080;
enum SYSTEM_PROCESS_KW_DBGPRINT = 0x0000000000000100;
enum SYSTEM_PROCESS_KW_JOB = 0x0000000000000200;
enum SYSTEM_PROCESS_KW_WORKER_THREAD = 0x0000000000000400;
enum SYSTEM_PROCESS_KW_THREAD = 0x0000000000000800;
enum SYSTEM_PROCESS_KW_LOADER = 0x0000000000001000;
enum SYSTEM_PROFILE_KW_GENERAL = 0x0000000000000001;
enum SYSTEM_PROFILE_KW_PMC_PROFILE = 0x0000000000000002;
enum SYSTEM_REGISTRY_KW_GENERAL = 0x0000000000000001;
enum SYSTEM_REGISTRY_KW_HIVE = 0x0000000000000002;
enum SYSTEM_REGISTRY_KW_NOTIFICATION = 0x0000000000000004;
enum SYSTEM_SCHEDULER_KW_XSCHEDULER = 0x0000000000000001;
enum SYSTEM_SCHEDULER_KW_DISPATCHER = 0x0000000000000002;
enum SYSTEM_SCHEDULER_KW_KERNEL_QUEUE = 0x0000000000000004;
enum SYSTEM_SCHEDULER_KW_SHOULD_YIELD = 0x0000000000000008;
enum SYSTEM_SCHEDULER_KW_ANTI_STARVATION = 0x0000000000000010;
enum SYSTEM_SCHEDULER_KW_LOAD_BALANCER = 0x0000000000000020;
enum SYSTEM_SCHEDULER_KW_AFFINITY = 0x0000000000000040;
enum SYSTEM_SCHEDULER_KW_PRIORITY = 0x0000000000000080;
enum SYSTEM_SCHEDULER_KW_IDEAL_PROCESSOR = 0x0000000000000100;
enum SYSTEM_SCHEDULER_KW_CONTEXT_SWITCH = 0x0000000000000200;
enum SYSTEM_SCHEDULER_KW_COMPACT_CSWITCH = 0x0000000000000400;
enum SYSTEM_SYSCALL_KW_GENERAL = 0x0000000000000001;
enum SYSTEM_TIMER_KW_GENERAL = 0x0000000000000001;
enum SYSTEM_TIMER_KW_CLOCK_TIMER = 0x0000000000000002;
enum SYSTEM_MEMORY_POOL_FILTER_ID = 0x00000001;
enum ETW_NULL_TYPE_VALUE = 0x00000000;
enum ETW_OBJECT_TYPE_VALUE = 0x00000001;
enum ETW_STRING_TYPE_VALUE = 0x00000002;
enum ETW_SBYTE_TYPE_VALUE = 0x00000003;
enum ETW_BYTE_TYPE_VALUE = 0x00000004;
enum ETW_INT16_TYPE_VALUE = 0x00000005;
enum ETW_UINT16_TYPE_VALUE = 0x00000006;
enum ETW_INT32_TYPE_VALUE = 0x00000007;
enum ETW_UINT32_TYPE_VALUE = 0x00000008;
enum ETW_INT64_TYPE_VALUE = 0x00000009;
enum ETW_UINT64_TYPE_VALUE = 0x0000000a;
enum ETW_CHAR_TYPE_VALUE = 0x0000000b;
enum ETW_SINGLE_TYPE_VALUE = 0x0000000c;
enum ETW_DOUBLE_TYPE_VALUE = 0x0000000d;
enum ETW_BOOLEAN_TYPE_VALUE = 0x0000000e;
enum ETW_DECIMAL_TYPE_VALUE = 0x0000000f;
enum ETW_GUID_TYPE_VALUE = 0x00000065;
enum ETW_ASCIICHAR_TYPE_VALUE = 0x00000066;
enum ETW_ASCIISTRING_TYPE_VALUE = 0x00000067;
enum ETW_COUNTED_STRING_TYPE_VALUE = 0x00000068;
enum ETW_POINTER_TYPE_VALUE = 0x00000069;
enum ETW_SIZET_TYPE_VALUE = 0x0000006a;
enum ETW_HIDDEN_TYPE_VALUE = 0x0000006b;
enum ETW_BOOL_TYPE_VALUE = 0x0000006c;
enum ETW_COUNTED_ANSISTRING_TYPE_VALUE = 0x0000006d;
enum ETW_REVERSED_COUNTED_STRING_TYPE_VALUE = 0x0000006e;
enum ETW_REVERSED_COUNTED_ANSISTRING_TYPE_VALUE = 0x0000006f;
enum ETW_NON_NULL_TERMINATED_STRING_TYPE_VALUE = 0x00000070;
enum ETW_REDUCED_ANSISTRING_TYPE_VALUE = 0x00000071;
enum ETW_REDUCED_STRING_TYPE_VALUE = 0x00000072;
enum ETW_SID_TYPE_VALUE = 0x00000073;
enum ETW_VARIANT_TYPE_VALUE = 0x00000074;
enum ETW_PTVECTOR_TYPE_VALUE = 0x00000075;
enum ETW_WMITIME_TYPE_VALUE = 0x00000076;
enum ETW_DATETIME_TYPE_VALUE = 0x00000077;
enum ETW_REFRENCE_TYPE_VALUE = 0x00000078;
enum TRACE_PROVIDER_FLAG_LEGACY = 0x00000001;
enum TRACE_PROVIDER_FLAG_PRE_ENABLE = 0x00000002;
enum KERNEL_LOGGER_NAME = "NT Kernel Logger";
enum GLOBAL_LOGGER_NAME = "GlobalLogger";
enum EVENT_LOGGER_NAME = "EventLog";
enum ENABLE_TRACE_PARAMETERS_VERSION = 0x00000001;
enum ENABLE_TRACE_PARAMETERS_VERSION_2 = 0x00000002;
enum EVENT_MIN_LEVEL = 0x00000000;
enum EVENT_MAX_LEVEL = 0x000000ff;
enum EVENT_ACTIVITY_CTRL_GET_ID = 0x00000001;
enum EVENT_ACTIVITY_CTRL_SET_ID = 0x00000002;
enum EVENT_ACTIVITY_CTRL_CREATE_ID = 0x00000003;
enum EVENT_ACTIVITY_CTRL_GET_SET_ID = 0x00000004;
enum EVENT_ACTIVITY_CTRL_CREATE_SET_ID = 0x00000005;
enum MAX_EVENT_DATA_DESCRIPTORS = 0x00000080;
enum MAX_EVENT_FILTER_DATA_SIZE = 0x00000400;
enum MAX_EVENT_FILTER_PAYLOAD_SIZE = 0x00001000;
enum MAX_EVENT_FILTER_EVENT_NAME_SIZE = 0x00001000;
enum MAX_EVENT_FILTERS_COUNT = 0x0000000d;
enum MAX_EVENT_FILTER_PID_COUNT = 0x00000008;
enum MAX_EVENT_FILTER_EVENT_ID_COUNT = 0x00000040;
enum EVENT_FILTER_TYPE_NONE = 0x00000000;
enum EVENT_FILTER_TYPE_SCHEMATIZED = 0x80000000;
enum EVENT_FILTER_TYPE_SYSTEM_FLAGS = 0x80000001;
enum EVENT_FILTER_TYPE_TRACEHANDLE = 0x80000002;
enum EVENT_FILTER_TYPE_PID = 0x80000004;
enum EVENT_FILTER_TYPE_EXECUTABLE_NAME = 0x80000008;
enum EVENT_FILTER_TYPE_PACKAGE_ID = 0x80000010;
enum EVENT_FILTER_TYPE_PACKAGE_APP_ID = 0x80000020;
enum EVENT_FILTER_TYPE_PAYLOAD = 0x80000100;
enum EVENT_FILTER_TYPE_EVENT_ID = 0x80000200;
enum EVENT_FILTER_TYPE_EVENT_NAME = 0x80000400;
enum EVENT_FILTER_TYPE_STACKWALK = 0x80001000;
enum EVENT_FILTER_TYPE_STACKWALK_NAME = 0x80002000;
enum EVENT_FILTER_TYPE_STACKWALK_LEVEL_KW = 0x80004000;
enum EVENT_FILTER_TYPE_CONTAINER = 0x80008000;
enum EVENT_DATA_DESCRIPTOR_TYPE_NONE = 0x00000000;
enum EVENT_DATA_DESCRIPTOR_TYPE_EVENT_METADATA = 0x00000001;
enum EVENT_DATA_DESCRIPTOR_TYPE_PROVIDER_METADATA = 0x00000002;
enum EVENT_DATA_DESCRIPTOR_TYPE_TIMESTAMP_OVERRIDE = 0x00000003;
enum EVENT_WRITE_FLAG_NO_FAULTING = 0x00000001;
enum EVENT_WRITE_FLAG_INPRIVATE = 0x00000002;
enum EVENT_HEADER_EXT_TYPE_RELATED_ACTIVITYID = 0x00000001;
enum EVENT_HEADER_EXT_TYPE_SID = 0x00000002;
enum EVENT_HEADER_EXT_TYPE_TS_ID = 0x00000003;
enum EVENT_HEADER_EXT_TYPE_INSTANCE_INFO = 0x00000004;
enum EVENT_HEADER_EXT_TYPE_STACK_TRACE32 = 0x00000005;
enum EVENT_HEADER_EXT_TYPE_STACK_TRACE64 = 0x00000006;
enum EVENT_HEADER_EXT_TYPE_PEBS_INDEX = 0x00000007;
enum EVENT_HEADER_EXT_TYPE_PMC_COUNTERS = 0x00000008;
enum EVENT_HEADER_EXT_TYPE_PSM_KEY = 0x00000009;
enum EVENT_HEADER_EXT_TYPE_EVENT_KEY = 0x0000000a;
enum EVENT_HEADER_EXT_TYPE_EVENT_SCHEMA_TL = 0x0000000b;
enum EVENT_HEADER_EXT_TYPE_PROV_TRAITS = 0x0000000c;
enum EVENT_HEADER_EXT_TYPE_PROCESS_START_KEY = 0x0000000d;
enum EVENT_HEADER_EXT_TYPE_CONTROL_GUID = 0x0000000e;
enum EVENT_HEADER_EXT_TYPE_QPC_DELTA = 0x0000000f;
enum EVENT_HEADER_EXT_TYPE_CONTAINER_ID = 0x00000010;
enum EVENT_HEADER_EXT_TYPE_STACK_KEY32 = 0x00000011;
enum EVENT_HEADER_EXT_TYPE_STACK_KEY64 = 0x00000012;
enum EVENT_HEADER_EXT_TYPE_MAX = 0x00000013;
enum EVENT_HEADER_PROPERTY_XML = 0x00000001;
enum EVENT_HEADER_PROPERTY_FORWARDED_XML = 0x00000002;
enum EVENT_HEADER_PROPERTY_LEGACY_EVENTLOG = 0x00000004;
enum EVENT_HEADER_PROPERTY_RELOGGABLE = 0x00000008;
enum EVENT_HEADER_FLAG_EXTENDED_INFO = 0x00000001;
enum EVENT_HEADER_FLAG_PRIVATE_SESSION = 0x00000002;
enum EVENT_HEADER_FLAG_STRING_ONLY = 0x00000004;
enum EVENT_HEADER_FLAG_TRACE_MESSAGE = 0x00000008;
enum EVENT_HEADER_FLAG_NO_CPUTIME = 0x00000010;
enum EVENT_HEADER_FLAG_32_BIT_HEADER = 0x00000020;
enum EVENT_HEADER_FLAG_64_BIT_HEADER = 0x00000040;
enum EVENT_HEADER_FLAG_DECODE_GUID = 0x00000080;
enum EVENT_HEADER_FLAG_CLASSIC_HEADER = 0x00000100;
enum EVENT_HEADER_FLAG_PROCESSOR_INDEX = 0x00000200;
enum EVENT_ENABLE_PROPERTY_SID = 0x00000001;
enum EVENT_ENABLE_PROPERTY_TS_ID = 0x00000002;
enum EVENT_ENABLE_PROPERTY_STACK_TRACE = 0x00000004;
enum EVENT_ENABLE_PROPERTY_PSM_KEY = 0x00000008;
enum EVENT_ENABLE_PROPERTY_IGNORE_KEYWORD_0 = 0x00000010;
enum EVENT_ENABLE_PROPERTY_PROVIDER_GROUP = 0x00000020;
enum EVENT_ENABLE_PROPERTY_ENABLE_KEYWORD_0 = 0x00000040;
enum EVENT_ENABLE_PROPERTY_PROCESS_START_KEY = 0x00000080;
enum EVENT_ENABLE_PROPERTY_EVENT_KEY = 0x00000100;
enum EVENT_ENABLE_PROPERTY_EXCLUDE_INPRIVATE = 0x00000200;
enum EVENT_ENABLE_PROPERTY_ENABLE_SILOS = 0x00000400;
enum EVENT_ENABLE_PROPERTY_SOURCE_CONTAINER_TRACKING = 0x00000800;
enum PROCESS_TRACE_MODE_REAL_TIME = 0x00000100;
enum PROCESS_TRACE_MODE_RAW_TIMESTAMP = 0x00001000;
enum PROCESS_TRACE_MODE_EVENT_RECORD = 0x10000000;
enum CLSID_TraceRelogger = GUID(0x7b40792d, 0x5ff, 0x44c4, [0x90, 0x58, 0xf4, 0x40, 0xc7, 0x1f, 0x17, 0xd4]);
alias TRACE_MESSAGE_FLAGS = uint;
enum : uint
{
    TRACE_MESSAGE_COMPONENTID = 0x00000004,
    TRACE_MESSAGE_GUID        = 0x00000002,
    TRACE_MESSAGE_SEQUENCE    = 0x00000001,
    TRACE_MESSAGE_SYSTEMINFO  = 0x00000020,
    TRACE_MESSAGE_TIMESTAMP   = 0x00000008,
}

alias ENABLECALLBACK_ENABLED_STATE = uint;
enum : uint
{
    EVENT_CONTROL_CODE_DISABLE_PROVIDER = 0x00000000,
    EVENT_CONTROL_CODE_ENABLE_PROVIDER  = 0x00000001,
    EVENT_CONTROL_CODE_CAPTURE_STATE    = 0x00000002,
}

alias EVENT_TRACE_CONTROL = uint;
enum : uint
{
    EVENT_TRACE_CONTROL_FLUSH  = 0x00000003,
    EVENT_TRACE_CONTROL_QUERY  = 0x00000000,
    EVENT_TRACE_CONTROL_STOP   = 0x00000001,
    EVENT_TRACE_CONTROL_UPDATE = 0x00000002,
}

alias EVENT_TRACE_FLAG = uint;
enum : uint
{
    EVENT_TRACE_FLAG_ALPC               = 0x00100000,
    EVENT_TRACE_FLAG_CSWITCH            = 0x00000010,
    EVENT_TRACE_FLAG_DBGPRINT           = 0x00040000,
    EVENT_TRACE_FLAG_DISK_FILE_IO       = 0x00000200,
    EVENT_TRACE_FLAG_DISK_IO            = 0x00000100,
    EVENT_TRACE_FLAG_DISK_IO_INIT       = 0x00000400,
    EVENT_TRACE_FLAG_DISPATCHER         = 0x00000800,
    EVENT_TRACE_FLAG_DPC                = 0x00000020,
    EVENT_TRACE_FLAG_DRIVER             = 0x00800000,
    EVENT_TRACE_FLAG_FILE_IO            = 0x02000000,
    EVENT_TRACE_FLAG_FILE_IO_INIT       = 0x04000000,
    EVENT_TRACE_FLAG_IMAGE_LOAD         = 0x00000004,
    EVENT_TRACE_FLAG_INTERRUPT          = 0x00000040,
    EVENT_TRACE_FLAG_JOB                = 0x00080000,
    EVENT_TRACE_FLAG_MEMORY_HARD_FAULTS = 0x00002000,
    EVENT_TRACE_FLAG_MEMORY_PAGE_FAULTS = 0x00001000,
    EVENT_TRACE_FLAG_NETWORK_TCPIP      = 0x00010000,
    EVENT_TRACE_FLAG_NO_SYSCONFIG       = 0x10000000,
    EVENT_TRACE_FLAG_PROCESS            = 0x00000001,
    EVENT_TRACE_FLAG_PROCESS_COUNTERS   = 0x00000008,
    EVENT_TRACE_FLAG_PROFILE            = 0x01000000,
    EVENT_TRACE_FLAG_REGISTRY           = 0x00020000,
    EVENT_TRACE_FLAG_SPLIT_IO           = 0x00200000,
    EVENT_TRACE_FLAG_SYSTEMCALL         = 0x00000080,
    EVENT_TRACE_FLAG_THREAD             = 0x00000002,
    EVENT_TRACE_FLAG_VAMAP              = 0x00008000,
    EVENT_TRACE_FLAG_VIRTUAL_ALLOC      = 0x00004000,
}

alias TDH_HANDLE = long;
alias PROCESSTRACE_HANDLE = ulong;
alias CONTROLTRACE_HANDLE = ulong;
alias RELOGSTREAM_HANDLE = ulong;
struct WNODE_HEADER
{
    uint BufferSize;
    uint ProviderId;
    union
    {
        ulong HistoricalContext;
        struct
        {
            uint Version;
            uint Linkage;
        }
    }
    union
    {
        uint CountLost;
        HANDLE KernelHandle;
        long TimeStamp;
    }
    GUID Guid;
    uint ClientContext;
    uint Flags;
}
struct OFFSETINSTANCEDATAANDLENGTH
{
    uint OffsetInstanceData;
    uint LengthInstanceData;
}
struct WNODE_ALL_DATA
{
    WNODE_HEADER WnodeHeader;
    uint DataBlockOffset;
    uint InstanceCount;
    uint OffsetInstanceNameOffsets;
    union
    {
        uint FixedInstanceSize;
        OFFSETINSTANCEDATAANDLENGTH[1] OffsetInstanceDataAndLength;
    }
}
struct WNODE_SINGLE_INSTANCE
{
    WNODE_HEADER WnodeHeader;
    uint OffsetInstanceName;
    uint InstanceIndex;
    uint DataBlockOffset;
    uint SizeDataBlock;
    ubyte[1] VariableData;
}
struct WNODE_SINGLE_ITEM
{
    WNODE_HEADER WnodeHeader;
    uint OffsetInstanceName;
    uint InstanceIndex;
    uint ItemId;
    uint DataBlockOffset;
    uint SizeDataItem;
    ubyte[1] VariableData;
}
struct WNODE_METHOD_ITEM
{
    WNODE_HEADER WnodeHeader;
    uint OffsetInstanceName;
    uint InstanceIndex;
    uint MethodId;
    uint DataBlockOffset;
    uint SizeDataBlock;
    ubyte[1] VariableData;
}
struct WNODE_EVENT_ITEM
{
    WNODE_HEADER WnodeHeader;
}
struct WNODE_EVENT_REFERENCE
{
    WNODE_HEADER WnodeHeader;
    GUID TargetGuid;
    uint TargetDataBlockSize;
    union
    {
        uint TargetInstanceIndex;
        wchar[1] TargetInstanceName;
    }
}
struct WNODE_TOO_SMALL
{
    WNODE_HEADER WnodeHeader;
    uint SizeNeeded;
}
struct WMIREGGUIDW
{
    GUID Guid;
    uint Flags;
    uint InstanceCount;
    union
    {
        uint InstanceNameList;
        uint BaseNameOffset;
        ulong Pdo;
        ulong InstanceInfo;
    }
}
struct WMIREGINFOW
{
    uint BufferSize;
    uint NextWmiRegInfo;
    uint RegistryPath;
    uint MofResourceName;
    uint GuidCount;
    WMIREGGUIDW[1] WmiRegGuid;
}
alias WMIDPREQUESTCODE = int;
enum : int
{
    WMI_GET_ALL_DATA        = 0x00000000,
    WMI_GET_SINGLE_INSTANCE = 0x00000001,
    WMI_SET_SINGLE_INSTANCE = 0x00000002,
    WMI_SET_SINGLE_ITEM     = 0x00000003,
    WMI_ENABLE_EVENTS       = 0x00000004,
    WMI_DISABLE_EVENTS      = 0x00000005,
    WMI_ENABLE_COLLECTION   = 0x00000006,
    WMI_DISABLE_COLLECTION  = 0x00000007,
    WMI_REGINFO             = 0x00000008,
    WMI_EXECUTE_METHOD      = 0x00000009,
    WMI_CAPTURE_STATE       = 0x0000000a,
}

alias ETW_COMPRESSION_RESUMPTION_MODE = int;
enum : int
{
    EtwCompressionModeRestart   = 0x00000000,
    EtwCompressionModeNoDisable = 0x00000001,
    EtwCompressionModeNoRestart = 0x00000002,
}

struct EVENT_TRACE_HEADER
{
    ushort Size;
    union
    {
        ushort FieldTypeFlags;
        struct
        {
            ubyte HeaderType;
            ubyte MarkerFlags;
        }
    }
    union
    {
        uint Version;
        struct _Class_e__Struct
        {
            ubyte Type;
            ubyte Level;
            ushort Version;
        }
    }
    uint ThreadId;
    uint ProcessId;
    long TimeStamp;
    union
    {
        GUID Guid;
        ulong GuidPtr;
    }
    union
    {
        struct
        {
            uint KernelTime;
            uint UserTime;
        }
        ulong ProcessorTime;
        struct
        {
            uint ClientContext;
            uint Flags;
        }
    }
}
struct EVENT_INSTANCE_HEADER
{
    ushort Size;
    union
    {
        ushort FieldTypeFlags;
        struct
        {
            ubyte HeaderType;
            ubyte MarkerFlags;
        }
    }
    union
    {
        uint Version;
        struct _Class_e__Struct
        {
            ubyte Type;
            ubyte Level;
            ushort Version;
        }
    }
    uint ThreadId;
    uint ProcessId;
    long TimeStamp;
    ulong RegHandle;
    uint InstanceId;
    uint ParentInstanceId;
    union
    {
        struct
        {
            uint KernelTime;
            uint UserTime;
        }
        ulong ProcessorTime;
        struct
        {
            uint EventId;
            uint Flags;
        }
    }
    ulong ParentRegHandle;
}
struct MOF_FIELD
{
    ulong DataPtr;
    uint Length;
    uint DataType;
}
struct TRACE_LOGFILE_HEADER
{
    uint BufferSize;
    union
    {
        uint Version;
        struct _VersionDetail_e__Struct
        {
            ubyte MajorVersion;
            ubyte MinorVersion;
            ubyte SubVersion;
            ubyte SubMinorVersion;
        }
    }
    uint ProviderVersion;
    uint NumberOfProcessors;
    long EndTime;
    uint TimerResolution;
    uint MaximumFileSize;
    uint LogFileMode;
    uint BuffersWritten;
    union
    {
        GUID LogInstanceGuid;
        struct
        {
            uint StartBuffers;
            uint PointerSize;
            uint EventsLost;
            uint CpuSpeedInMHz;
        }
    }
    PWSTR LoggerName;
    PWSTR LogFileName;
    TIME_ZONE_INFORMATION TimeZone;
    long BootTime;
    long PerfFreq;
    long StartTime;
    uint ReservedFlags;
    uint BuffersLost;
}
struct TRACE_LOGFILE_HEADER32
{
    uint BufferSize;
    union
    {
        uint Version;
        struct _VersionDetail_e__Struct
        {
            ubyte MajorVersion;
            ubyte MinorVersion;
            ubyte SubVersion;
            ubyte SubMinorVersion;
        }
    }
    uint ProviderVersion;
    uint NumberOfProcessors;
    long EndTime;
    uint TimerResolution;
    uint MaximumFileSize;
    uint LogFileMode;
    uint BuffersWritten;
    union
    {
        GUID LogInstanceGuid;
        struct
        {
            uint StartBuffers;
            uint PointerSize;
            uint EventsLost;
            uint CpuSpeedInMHz;
        }
    }
    uint LoggerName;
    uint LogFileName;
    TIME_ZONE_INFORMATION TimeZone;
    long BootTime;
    long PerfFreq;
    long StartTime;
    uint ReservedFlags;
    uint BuffersLost;
}
struct TRACE_LOGFILE_HEADER64
{
    uint BufferSize;
    union
    {
        uint Version;
        struct _VersionDetail_e__Struct
        {
            ubyte MajorVersion;
            ubyte MinorVersion;
            ubyte SubVersion;
            ubyte SubMinorVersion;
        }
    }
    uint ProviderVersion;
    uint NumberOfProcessors;
    long EndTime;
    uint TimerResolution;
    uint MaximumFileSize;
    uint LogFileMode;
    uint BuffersWritten;
    union
    {
        GUID LogInstanceGuid;
        struct
        {
            uint StartBuffers;
            uint PointerSize;
            uint EventsLost;
            uint CpuSpeedInMHz;
        }
    }
    ulong LoggerName;
    ulong LogFileName;
    TIME_ZONE_INFORMATION TimeZone;
    long BootTime;
    long PerfFreq;
    long StartTime;
    uint ReservedFlags;
    uint BuffersLost;
}
struct EVENT_INSTANCE_INFO
{
    HANDLE RegHandle;
    uint InstanceId;
}
struct EVENT_TRACE_PROPERTIES
{
    WNODE_HEADER Wnode;
    uint BufferSize;
    uint MinimumBuffers;
    uint MaximumBuffers;
    uint MaximumFileSize;
    uint LogFileMode;
    uint FlushTimer;
    EVENT_TRACE_FLAG EnableFlags;
    union
    {
        int AgeLimit;
        int FlushThreshold;
    }
    uint NumberOfBuffers;
    uint FreeBuffers;
    uint EventsLost;
    uint BuffersWritten;
    uint LogBuffersLost;
    uint RealTimeBuffersLost;
    HANDLE LoggerThreadId;
    uint LogFileNameOffset;
    uint LoggerNameOffset;
}
struct EVENT_TRACE_PROPERTIES_V2
{
    WNODE_HEADER Wnode;
    uint BufferSize;
    uint MinimumBuffers;
    uint MaximumBuffers;
    uint MaximumFileSize;
    uint LogFileMode;
    uint FlushTimer;
    EVENT_TRACE_FLAG EnableFlags;
    union
    {
        int AgeLimit;
        int FlushThreshold;
    }
    uint NumberOfBuffers;
    uint FreeBuffers;
    uint EventsLost;
    uint BuffersWritten;
    uint LogBuffersLost;
    uint RealTimeBuffersLost;
    HANDLE LoggerThreadId;
    uint LogFileNameOffset;
    uint LoggerNameOffset;
    union
    {
        struct
        {
            uint _bitfield0;
        }
        uint V2Control;
    }
    uint FilterDescCount;
    EVENT_FILTER_DESCRIPTOR* FilterDesc;
    union
    {
        struct
        {
            uint _bitfield1;
        }
        ulong V2Options;
    }
}
struct TRACE_GUID_REGISTRATION
{
    const(GUID)* Guid;
    HANDLE RegHandle;
}
struct TRACE_GUID_PROPERTIES
{
    GUID Guid;
    uint GuidType;
    uint LoggerId;
    uint EnableLevel;
    uint EnableFlags;
    BOOLEAN IsEnable;
}
struct ETW_BUFFER_CONTEXT
{
    union
    {
        struct
        {
            ubyte ProcessorNumber;
            ubyte Alignment;
        }
        ushort ProcessorIndex;
    }
    ushort LoggerId;
}
struct TRACE_ENABLE_INFO
{
    uint IsEnabled;
    ubyte Level;
    ubyte Reserved1;
    ushort LoggerId;
    uint EnableProperty;
    uint Reserved2;
    ulong MatchAnyKeyword;
    ulong MatchAllKeyword;
}
struct TRACE_PROVIDER_INSTANCE_INFO
{
    uint NextOffset;
    uint EnableCount;
    uint Pid;
    uint Flags;
}
struct TRACE_GUID_INFO
{
    uint InstanceCount;
    uint Reserved;
}
struct PROFILE_SOURCE_INFO
{
    uint NextEntryOffset;
    uint Source;
    uint MinInterval;
    uint MaxInterval;
    ulong Reserved;
    wchar[1] Description;
}
alias ETW_PMC_COUNTER_OWNER_TYPE = int;
enum : int
{
    EtwPmcOwnerFree             = 0x00000000,
    EtwPmcOwnerUntagged         = 0x00000001,
    EtwPmcOwnerTagged           = 0x00000002,
    EtwPmcOwnerTaggedWithSource = 0x00000003,
}

struct ETW_PMC_COUNTER_OWNER
{
    ETW_PMC_COUNTER_OWNER_TYPE OwnerType;
    uint ProfileSource;
    uint OwnerTag;
}
struct ETW_PMC_COUNTER_OWNERSHIP_STATUS
{
    uint ProcessorNumber;
    uint NumberOfCounters;
    ETW_PMC_COUNTER_OWNER[1] CounterOwners;
}
struct ETW_PMC_SESSION_INFO
{
    uint NextEntryOffset;
    ushort LoggerId;
    ushort Reserved;
    uint ProfileSourceCount;
    uint HookIdCount;
}
struct EVENT_TRACE
{
    EVENT_TRACE_HEADER Header;
    uint InstanceId;
    uint ParentInstanceId;
    GUID ParentGuid;
    void* MofData;
    uint MofLength;
    union
    {
        uint ClientContext;
        ETW_BUFFER_CONTEXT BufferContext;
    }
}
alias PEVENT_TRACE_BUFFER_CALLBACKW = uint function(EVENT_TRACE_LOGFILEW*);
alias PEVENT_TRACE_BUFFER_CALLBACKA = uint function(EVENT_TRACE_LOGFILEA*);
alias PEVENT_CALLBACK = void function(EVENT_TRACE*);
alias PEVENT_RECORD_CALLBACK = void function(EVENT_RECORD*);
struct ETW_BUFFER_HEADER
{
    uint[4] Reserved1;
    long TimeStamp;
    uint[4] Reserved2;
    ETW_BUFFER_CONTEXT ClientContext;
    uint Reserved3;
    uint FilledBytes;
    uint[5] Reserved4;
}
struct ETW_BUFFER_CALLBACK_INFORMATION
{
    ulong TraceHandle;
    const(TRACE_LOGFILE_HEADER)* LogfileHeader;
    uint BuffersRead;
}
alias PETW_BUFFER_CALLBACK = BOOL function(const(ETW_BUFFER_HEADER)*, uint, const(ETW_BUFFER_CALLBACK_INFORMATION)*, void*);
alias ETW_PROCESS_TRACE_MODES = int;
enum : int
{
    ETW_PROCESS_TRACE_MODE_NONE          = 0x00000000,
    ETW_PROCESS_TRACE_MODE_RAW_TIMESTAMP = 0x00000001,
}

struct ETW_OPEN_TRACE_OPTIONS
{
    ETW_PROCESS_TRACE_MODES ProcessTraceModes;
    PEVENT_RECORD_CALLBACK EventCallback;
    void* EventCallbackContext;
    PETW_BUFFER_CALLBACK BufferCallback;
    void* BufferCallbackContext;
}
alias PETW_BUFFER_COMPLETION_CALLBACK = void function(const(ETW_BUFFER_HEADER)*, void*);
alias WMIDPREQUEST = uint function(WMIDPREQUESTCODE, void*, uint*, void*);
struct EVENT_TRACE_LOGFILEW
{
    PWSTR LogFileName;
    PWSTR LoggerName;
    long CurrentTime;
    uint BuffersRead;
    union
    {
        uint LogFileMode;
        uint ProcessTraceMode;
    }
    EVENT_TRACE CurrentEvent;
    TRACE_LOGFILE_HEADER LogfileHeader;
    PEVENT_TRACE_BUFFER_CALLBACKW BufferCallback;
    uint BufferSize;
    uint Filled;
    uint EventsLost;
    union
    {
        PEVENT_CALLBACK EventCallback;
        PEVENT_RECORD_CALLBACK EventRecordCallback;
    }
    uint IsKernelTrace;
    void* Context;
}
struct EVENT_TRACE_LOGFILEA
{
    PSTR LogFileName;
    PSTR LoggerName;
    long CurrentTime;
    uint BuffersRead;
    union
    {
        uint LogFileMode;
        uint ProcessTraceMode;
    }
    EVENT_TRACE CurrentEvent;
    TRACE_LOGFILE_HEADER LogfileHeader;
    PEVENT_TRACE_BUFFER_CALLBACKA BufferCallback;
    uint BufferSize;
    uint Filled;
    uint EventsLost;
    union
    {
        PEVENT_CALLBACK EventCallback;
        PEVENT_RECORD_CALLBACK EventRecordCallback;
    }
    uint IsKernelTrace;
    void* Context;
}
struct ENABLE_TRACE_PARAMETERS_V1
{
    uint Version;
    uint EnableProperty;
    uint ControlFlags;
    GUID SourceId;
    EVENT_FILTER_DESCRIPTOR* EnableFilterDesc;
}
struct ENABLE_TRACE_PARAMETERS
{
    uint Version;
    uint EnableProperty;
    uint ControlFlags;
    GUID SourceId;
    EVENT_FILTER_DESCRIPTOR* EnableFilterDesc;
    uint FilterDescCount;
}
alias TRACE_QUERY_INFO_CLASS = int;
enum : int
{
    TraceGuidQueryList                = 0x00000000,
    TraceGuidQueryInfo                = 0x00000001,
    TraceGuidQueryProcess             = 0x00000002,
    TraceStackTracingInfo             = 0x00000003,
    TraceSystemTraceEnableFlagsInfo   = 0x00000004,
    TraceSampledProfileIntervalInfo   = 0x00000005,
    TraceProfileSourceConfigInfo      = 0x00000006,
    TraceProfileSourceListInfo        = 0x00000007,
    TracePmcEventListInfo             = 0x00000008,
    TracePmcCounterListInfo           = 0x00000009,
    TraceSetDisallowList              = 0x0000000a,
    TraceVersionInfo                  = 0x0000000b,
    TraceGroupQueryList               = 0x0000000c,
    TraceGroupQueryInfo               = 0x0000000d,
    TraceDisallowListQuery            = 0x0000000e,
    TraceInfoReserved15               = 0x0000000f,
    TracePeriodicCaptureStateListInfo = 0x00000010,
    TracePeriodicCaptureStateInfo     = 0x00000011,
    TraceProviderBinaryTracking       = 0x00000012,
    TraceMaxLoggersQuery              = 0x00000013,
    TraceLbrConfigurationInfo         = 0x00000014,
    TraceLbrEventListInfo             = 0x00000015,
    TraceMaxPmcCounterQuery           = 0x00000016,
    TraceStreamCount                  = 0x00000017,
    TraceStackCachingInfo             = 0x00000018,
    TracePmcCounterOwners             = 0x00000019,
    TraceUnifiedStackCachingInfo      = 0x0000001a,
    TracePmcSessionInformation        = 0x0000001b,
    MaxTraceSetInfoClass              = 0x0000001c,
}

struct CLASSIC_EVENT_ID
{
    GUID EventGuid;
    ubyte Type;
    ubyte[7] Reserved;
}
struct TRACE_STACK_CACHING_INFO
{
    BOOLEAN Enabled;
    uint CacheSize;
    uint BucketCount;
}
struct TRACE_PROFILE_INTERVAL
{
    uint Source;
    uint Interval;
}
struct TRACE_VERSION_INFO
{
    uint EtwTraceProcessingVersion;
    uint Reserved;
}
struct TRACE_PERIODIC_CAPTURE_STATE_INFO
{
    uint CaptureStateFrequencyInSeconds;
    ushort ProviderCount;
    ushort Reserved;
}
alias ETW_PROCESS_HANDLE_INFO_TYPE = int;
enum : int
{
    EtwQueryPartitionInformation   = 0x00000001,
    EtwQueryPartitionInformationV2 = 0x00000002,
    EtwQueryLastDroppedTimes       = 0x00000003,
    EtwQueryLogFileHeader          = 0x00000004,
    EtwQueryProcessHandleInfoMax   = 0x00000005,
}

struct ETW_TRACE_PARTITION_INFORMATION
{
    GUID PartitionId;
    GUID ParentId;
    long QpcOffsetFromRoot;
    uint PartitionType;
}
struct ETW_TRACE_PARTITION_INFORMATION_V2
{
    long QpcOffsetFromRoot;
    uint PartitionType;
    PWSTR PartitionId;
    PWSTR ParentId;
}
struct EVENT_DATA_DESCRIPTOR
{
    ulong Ptr;
    uint Size;
    union
    {
        uint Reserved;
        struct
        {
            ubyte Type;
            ubyte Reserved1;
            ushort Reserved2;
        }
    }
}
struct EVENT_DESCRIPTOR
{
    ushort Id;
    ubyte Version;
    ubyte Channel;
    ubyte Level;
    ubyte Opcode;
    ushort Task;
    ulong Keyword;
}
struct EVENT_FILTER_DESCRIPTOR
{
    ulong Ptr;
    uint Size;
    uint Type;
}
struct EVENT_FILTER_HEADER
{
    ushort Id;
    ubyte Version;
    ubyte[5] Reserved;
    ulong InstanceId;
    uint Size;
    uint NextOffset;
}
struct EVENT_FILTER_EVENT_ID
{
    BOOLEAN FilterIn;
    ubyte Reserved;
    ushort Count;
    ushort[1] Events;
}
struct EVENT_FILTER_EVENT_NAME
{
    ulong MatchAnyKeyword;
    ulong MatchAllKeyword;
    ubyte Level;
    BOOLEAN FilterIn;
    ushort NameCount;
    ubyte[1] Names;
}
struct EVENT_FILTER_LEVEL_KW
{
    ulong MatchAnyKeyword;
    ulong MatchAllKeyword;
    ubyte Level;
    BOOLEAN FilterIn;
}
alias EVENT_INFO_CLASS = int;
enum : int
{
    EventProviderBinaryTrackInfo   = 0x00000000,
    EventProviderSetReserved1      = 0x00000001,
    EventProviderSetTraits         = 0x00000002,
    EventProviderUseDescriptorType = 0x00000003,
    MaxEventInfo                   = 0x00000004,
}

alias PENABLECALLBACK = void function(const(GUID)*, ENABLECALLBACK_ENABLED_STATE, ubyte, ulong, ulong, EVENT_FILTER_DESCRIPTOR*, void*);
struct EVENT_HEADER_EXTENDED_DATA_ITEM
{
    ushort Reserved1;
    ushort ExtType;
    struct
    {
        ushort _bitfield0;
    }
    ushort DataSize;
    ulong DataPtr;
}
struct EVENT_EXTENDED_ITEM_INSTANCE
{
    uint InstanceId;
    uint ParentInstanceId;
    GUID ParentGuid;
}
struct EVENT_EXTENDED_ITEM_RELATED_ACTIVITYID
{
    GUID RelatedActivityId;
}
struct EVENT_EXTENDED_ITEM_TS_ID
{
    uint SessionId;
}
struct EVENT_EXTENDED_ITEM_STACK_TRACE32
{
    ulong MatchId;
    uint[1] Address;
}
struct EVENT_EXTENDED_ITEM_STACK_TRACE64
{
    ulong MatchId;
    ulong[1] Address;
}
struct EVENT_EXTENDED_ITEM_STACK_KEY32
{
    ulong MatchId;
    uint StackKey;
    uint Padding;
}
struct EVENT_EXTENDED_ITEM_STACK_KEY64
{
    ulong MatchId;
    ulong StackKey;
}
struct EVENT_EXTENDED_ITEM_PEBS_INDEX
{
    ulong PebsIndex;
}
struct EVENT_EXTENDED_ITEM_PMC_COUNTERS
{
    ulong[1] Counter;
}
struct EVENT_EXTENDED_ITEM_PROCESS_START_KEY
{
    ulong ProcessStartKey;
}
struct EVENT_EXTENDED_ITEM_EVENT_KEY
{
    ulong Key;
}
struct EVENT_HEADER
{
    ushort Size;
    ushort HeaderType;
    ushort Flags;
    ushort EventProperty;
    uint ThreadId;
    uint ProcessId;
    long TimeStamp;
    GUID ProviderId;
    EVENT_DESCRIPTOR EventDescriptor;
    union
    {
        struct
        {
            uint KernelTime;
            uint UserTime;
        }
        ulong ProcessorTime;
    }
    GUID ActivityId;
}
struct EVENT_RECORD
{
    EVENT_HEADER EventHeader;
    ETW_BUFFER_CONTEXT BufferContext;
    ushort ExtendedDataCount;
    ushort UserDataLength;
    EVENT_HEADER_EXTENDED_DATA_ITEM* ExtendedData;
    void* UserData;
    void* UserContext;
}
alias ETW_PROVIDER_TRAIT_TYPE = int;
enum : int
{
    EtwProviderTraitTypeGroup  = 0x00000001,
    EtwProviderTraitDecodeGuid = 0x00000002,
    EtwProviderTraitTypeMax    = 0x00000003,
}

alias EVENTSECURITYOPERATION = int;
enum : int
{
    EventSecuritySetDACL = 0x00000000,
    EventSecuritySetSACL = 0x00000001,
    EventSecurityAddDACL = 0x00000002,
    EventSecurityAddSACL = 0x00000003,
    EventSecurityMax     = 0x00000004,
}

struct EVENT_MAP_ENTRY
{
    uint OutputOffset;
    union
    {
        uint Value;
        uint InputOffset;
    }
}
alias MAP_FLAGS = int;
enum : int
{
    EVENTMAP_INFO_FLAG_MANIFEST_VALUEMAP   = 0x00000001,
    EVENTMAP_INFO_FLAG_MANIFEST_BITMAP     = 0x00000002,
    EVENTMAP_INFO_FLAG_MANIFEST_PATTERNMAP = 0x00000004,
    EVENTMAP_INFO_FLAG_WBEM_VALUEMAP       = 0x00000008,
    EVENTMAP_INFO_FLAG_WBEM_BITMAP         = 0x00000010,
    EVENTMAP_INFO_FLAG_WBEM_FLAG           = 0x00000020,
    EVENTMAP_INFO_FLAG_WBEM_NO_MAP         = 0x00000040,
}

alias MAP_VALUETYPE = int;
enum : int
{
    EVENTMAP_ENTRY_VALUETYPE_ULONG  = 0x00000000,
    EVENTMAP_ENTRY_VALUETYPE_STRING = 0x00000001,
}

struct EVENT_MAP_INFO
{
    uint NameOffset;
    MAP_FLAGS Flag;
    uint EntryCount;
    union
    {
        MAP_VALUETYPE MapEntryValueType;
        uint FormatStringOffset;
    }
    EVENT_MAP_ENTRY[1] MapEntryArray;
}
alias _TDH_IN_TYPE = int;
enum : int
{
    TDH_INTYPE_NULL                        = 0x00000000,
    TDH_INTYPE_UNICODESTRING               = 0x00000001,
    TDH_INTYPE_ANSISTRING                  = 0x00000002,
    TDH_INTYPE_INT8                        = 0x00000003,
    TDH_INTYPE_UINT8                       = 0x00000004,
    TDH_INTYPE_INT16                       = 0x00000005,
    TDH_INTYPE_UINT16                      = 0x00000006,
    TDH_INTYPE_INT32                       = 0x00000007,
    TDH_INTYPE_UINT32                      = 0x00000008,
    TDH_INTYPE_INT64                       = 0x00000009,
    TDH_INTYPE_UINT64                      = 0x0000000a,
    TDH_INTYPE_FLOAT                       = 0x0000000b,
    TDH_INTYPE_DOUBLE                      = 0x0000000c,
    TDH_INTYPE_BOOLEAN                     = 0x0000000d,
    TDH_INTYPE_BINARY                      = 0x0000000e,
    TDH_INTYPE_GUID                        = 0x0000000f,
    TDH_INTYPE_POINTER                     = 0x00000010,
    TDH_INTYPE_FILETIME                    = 0x00000011,
    TDH_INTYPE_SYSTEMTIME                  = 0x00000012,
    TDH_INTYPE_SID                         = 0x00000013,
    TDH_INTYPE_HEXINT32                    = 0x00000014,
    TDH_INTYPE_HEXINT64                    = 0x00000015,
    TDH_INTYPE_MANIFEST_COUNTEDSTRING      = 0x00000016,
    TDH_INTYPE_MANIFEST_COUNTEDANSISTRING  = 0x00000017,
    TDH_INTYPE_RESERVED24                  = 0x00000018,
    TDH_INTYPE_MANIFEST_COUNTEDBINARY      = 0x00000019,
    TDH_INTYPE_COUNTEDSTRING               = 0x0000012c,
    TDH_INTYPE_COUNTEDANSISTRING           = 0x0000012d,
    TDH_INTYPE_REVERSEDCOUNTEDSTRING       = 0x0000012e,
    TDH_INTYPE_REVERSEDCOUNTEDANSISTRING   = 0x0000012f,
    TDH_INTYPE_NONNULLTERMINATEDSTRING     = 0x00000130,
    TDH_INTYPE_NONNULLTERMINATEDANSISTRING = 0x00000131,
    TDH_INTYPE_UNICODECHAR                 = 0x00000132,
    TDH_INTYPE_ANSICHAR                    = 0x00000133,
    TDH_INTYPE_SIZET                       = 0x00000134,
    TDH_INTYPE_HEXDUMP                     = 0x00000135,
    TDH_INTYPE_WBEMSID                     = 0x00000136,
}

alias _TDH_OUT_TYPE = int;
enum : int
{
    TDH_OUTTYPE_NULL                         = 0x00000000,
    TDH_OUTTYPE_STRING                       = 0x00000001,
    TDH_OUTTYPE_DATETIME                     = 0x00000002,
    TDH_OUTTYPE_BYTE                         = 0x00000003,
    TDH_OUTTYPE_UNSIGNEDBYTE                 = 0x00000004,
    TDH_OUTTYPE_SHORT                        = 0x00000005,
    TDH_OUTTYPE_UNSIGNEDSHORT                = 0x00000006,
    TDH_OUTTYPE_INT                          = 0x00000007,
    TDH_OUTTYPE_UNSIGNEDINT                  = 0x00000008,
    TDH_OUTTYPE_LONG                         = 0x00000009,
    TDH_OUTTYPE_UNSIGNEDLONG                 = 0x0000000a,
    TDH_OUTTYPE_FLOAT                        = 0x0000000b,
    TDH_OUTTYPE_DOUBLE                       = 0x0000000c,
    TDH_OUTTYPE_BOOLEAN                      = 0x0000000d,
    TDH_OUTTYPE_GUID                         = 0x0000000e,
    TDH_OUTTYPE_HEXBINARY                    = 0x0000000f,
    TDH_OUTTYPE_HEXINT8                      = 0x00000010,
    TDH_OUTTYPE_HEXINT16                     = 0x00000011,
    TDH_OUTTYPE_HEXINT32                     = 0x00000012,
    TDH_OUTTYPE_HEXINT64                     = 0x00000013,
    TDH_OUTTYPE_PID                          = 0x00000014,
    TDH_OUTTYPE_TID                          = 0x00000015,
    TDH_OUTTYPE_PORT                         = 0x00000016,
    TDH_OUTTYPE_IPV4                         = 0x00000017,
    TDH_OUTTYPE_IPV6                         = 0x00000018,
    TDH_OUTTYPE_SOCKETADDRESS                = 0x00000019,
    TDH_OUTTYPE_CIMDATETIME                  = 0x0000001a,
    TDH_OUTTYPE_ETWTIME                      = 0x0000001b,
    TDH_OUTTYPE_XML                          = 0x0000001c,
    TDH_OUTTYPE_ERRORCODE                    = 0x0000001d,
    TDH_OUTTYPE_WIN32ERROR                   = 0x0000001e,
    TDH_OUTTYPE_NTSTATUS                     = 0x0000001f,
    TDH_OUTTYPE_HRESULT                      = 0x00000020,
    TDH_OUTTYPE_CULTURE_INSENSITIVE_DATETIME = 0x00000021,
    TDH_OUTTYPE_JSON                         = 0x00000022,
    TDH_OUTTYPE_UTF8                         = 0x00000023,
    TDH_OUTTYPE_PKCS7_WITH_TYPE_INFO         = 0x00000024,
    TDH_OUTTYPE_CODE_POINTER                 = 0x00000025,
    TDH_OUTTYPE_DATETIME_UTC                 = 0x00000026,
    TDH_OUTTYPE_REDUCEDSTRING                = 0x0000012c,
    TDH_OUTTYPE_NOPRINT                      = 0x0000012d,
}

alias PROPERTY_FLAGS = int;
enum : int
{
    PropertyStruct           = 0x00000001,
    PropertyParamLength      = 0x00000002,
    PropertyParamCount       = 0x00000004,
    PropertyWBEMXmlFragment  = 0x00000008,
    PropertyParamFixedLength = 0x00000010,
    PropertyParamFixedCount  = 0x00000020,
    PropertyHasTags          = 0x00000040,
    PropertyHasCustomSchema  = 0x00000080,
}

struct EVENT_PROPERTY_INFO
{
    PROPERTY_FLAGS Flags;
    uint NameOffset;
    union
    {
        struct _nonStructType
        {
            ushort InType;
            ushort OutType;
            uint MapNameOffset;
        }
        struct _structType
        {
            ushort StructStartIndex;
            ushort NumOfStructMembers;
            uint padding;
        }
        struct _customSchemaType
        {
            ushort InType;
            ushort OutType;
            uint CustomSchemaOffset;
        }
    }
    union
    {
        ushort count;
        ushort countPropertyIndex;
    }
    union
    {
        ushort length;
        ushort lengthPropertyIndex;
    }
    union
    {
        uint Reserved;
        struct
        {
            uint _bitfield0;
        }
    }
}
alias DECODING_SOURCE = int;
enum : int
{
    DecodingSourceXMLFile = 0x00000000,
    DecodingSourceWbem    = 0x00000001,
    DecodingSourceWPP     = 0x00000002,
    DecodingSourceTlg     = 0x00000003,
    DecodingSourceMax     = 0x00000004,
}

alias TEMPLATE_FLAGS = int;
enum : int
{
    TEMPLATE_EVENT_DATA   = 0x00000001,
    TEMPLATE_USER_DATA    = 0x00000002,
    TEMPLATE_CONTROL_GUID = 0x00000004,
}

struct TRACE_EVENT_INFO
{
    GUID ProviderGuid;
    GUID EventGuid;
    EVENT_DESCRIPTOR EventDescriptor;
    DECODING_SOURCE DecodingSource;
    uint ProviderNameOffset;
    uint LevelNameOffset;
    uint ChannelNameOffset;
    uint KeywordsNameOffset;
    uint TaskNameOffset;
    uint OpcodeNameOffset;
    uint EventMessageOffset;
    uint ProviderMessageOffset;
    uint BinaryXMLOffset;
    uint BinaryXMLSize;
    union
    {
        uint EventNameOffset;
        uint ActivityIDNameOffset;
    }
    union
    {
        uint EventAttributesOffset;
        uint RelatedActivityIDNameOffset;
    }
    uint PropertyCount;
    uint TopLevelPropertyCount;
    union
    {
        TEMPLATE_FLAGS Flags;
        struct
        {
            uint _bitfield0;
        }
    }
    EVENT_PROPERTY_INFO[1] EventPropertyInfoArray;
}
struct PROPERTY_DATA_DESCRIPTOR
{
    ulong PropertyName;
    uint ArrayIndex;
    uint Reserved;
}
alias PAYLOAD_OPERATOR = int;
enum : int
{
    PAYLOADFIELD_EQ            = 0x00000000,
    PAYLOADFIELD_NE            = 0x00000001,
    PAYLOADFIELD_LE            = 0x00000002,
    PAYLOADFIELD_GT            = 0x00000003,
    PAYLOADFIELD_LT            = 0x00000004,
    PAYLOADFIELD_GE            = 0x00000005,
    PAYLOADFIELD_BETWEEN       = 0x00000006,
    PAYLOADFIELD_NOTBETWEEN    = 0x00000007,
    PAYLOADFIELD_MODULO        = 0x00000008,
    PAYLOADFIELD_CONTAINS      = 0x00000014,
    PAYLOADFIELD_DOESNTCONTAIN = 0x00000015,
    PAYLOADFIELD_IS            = 0x0000001e,
    PAYLOADFIELD_ISNOT         = 0x0000001f,
    PAYLOADFIELD_INVALID       = 0x00000020,
}

struct PAYLOAD_FILTER_PREDICATE
{
    PWSTR FieldName;
    ushort CompareOp;
    PWSTR Value;
}
struct PROVIDER_FILTER_INFO
{
    ubyte Id;
    ubyte Version;
    uint MessageOffset;
    uint Reserved;
    uint PropertyCount;
    EVENT_PROPERTY_INFO[1] EventPropertyInfoArray;
}
alias EVENT_FIELD_TYPE = int;
enum : int
{
    EventKeywordInformation = 0x00000000,
    EventLevelInformation   = 0x00000001,
    EventChannelInformation = 0x00000002,
    EventTaskInformation    = 0x00000003,
    EventOpcodeInformation  = 0x00000004,
    EventInformationMax     = 0x00000005,
}

struct PROVIDER_FIELD_INFO
{
    uint NameOffset;
    uint DescriptionOffset;
    ulong Value;
}
struct PROVIDER_FIELD_INFOARRAY
{
    uint NumberOfElements;
    EVENT_FIELD_TYPE FieldType;
    PROVIDER_FIELD_INFO[1] FieldInfoArray;
}
struct TRACE_PROVIDER_INFO
{
    GUID ProviderGuid;
    uint SchemaSource;
    uint ProviderNameOffset;
}
struct PROVIDER_ENUMERATION_INFO
{
    uint NumberOfProviders;
    uint Reserved;
    TRACE_PROVIDER_INFO[1] TraceProviderInfoArray;
}
struct PROVIDER_EVENT_INFO
{
    uint NumberOfEvents;
    uint Reserved;
    EVENT_DESCRIPTOR[1] EventDescriptorsArray;
}
alias TDH_CONTEXT_TYPE = int;
enum : int
{
    TDH_CONTEXT_WPP_TMFFILE       = 0x00000000,
    TDH_CONTEXT_WPP_TMFSEARCHPATH = 0x00000001,
    TDH_CONTEXT_WPP_GMT           = 0x00000002,
    TDH_CONTEXT_POINTERSIZE       = 0x00000003,
    TDH_CONTEXT_PDB_PATH          = 0x00000004,
    TDH_CONTEXT_MAXIMUM           = 0x00000005,
}

struct TDH_CONTEXT
{
    ulong ParameterValue;
    TDH_CONTEXT_TYPE ParameterType;
    uint ParameterSize;
}
enum IID_ITraceEvent = GUID(0x8cc97f40, 0x9028, 0x4ff3, [0x9b, 0x62, 0x7d, 0x1f, 0x79, 0xca, 0x7b, 0xcb]);
interface ITraceEvent : IUnknown
{
    HRESULT Clone(ITraceEvent*);
    HRESULT GetUserContext(void**);
    HRESULT GetEventRecord(EVENT_RECORD**);
    HRESULT SetPayload(ubyte*, uint);
    HRESULT SetEventDescriptor(const(EVENT_DESCRIPTOR)*);
    HRESULT SetProcessId(uint);
    HRESULT SetProcessorIndex(uint);
    HRESULT SetThreadId(uint);
    HRESULT SetThreadTimes(uint, uint);
    HRESULT SetActivityId(const(GUID)*);
    HRESULT SetTimeStamp(long*);
    HRESULT SetProviderId(const(GUID)*);
}
enum IID_ITraceEventCallback = GUID(0x3ed25501, 0x593f, 0x43e9, [0x8f, 0x38, 0x3a, 0xb4, 0x6f, 0x5a, 0x4a, 0x52]);
interface ITraceEventCallback : IUnknown
{
    HRESULT OnBeginProcessTrace(ITraceEvent, ITraceRelogger);
    HRESULT OnFinalizeProcessTrace(ITraceRelogger);
    HRESULT OnEvent(ITraceEvent, ITraceRelogger);
}
enum IID_ITraceRelogger = GUID(0xf754ad43, 0x3bcc, 0x4286, [0x80, 0x9, 0x9c, 0x5d, 0xa2, 0x14, 0xe8, 0x4e]);
interface ITraceRelogger : IUnknown
{
    HRESULT AddLogfileTraceStream(BSTR, void*, RELOGSTREAM_HANDLE*);
    HRESULT AddRealtimeTraceStream(BSTR, void*, RELOGSTREAM_HANDLE*);
    HRESULT RegisterCallback(ITraceEventCallback);
    HRESULT Inject(ITraceEvent);
    HRESULT CreateEventInstance(RELOGSTREAM_HANDLE, uint, ITraceEvent*);
    HRESULT ProcessTrace();
    HRESULT SetOutputFilename(BSTR);
    HRESULT SetCompressionMode(BOOLEAN);
    HRESULT Cancel();
}
enum CLSID_CTraceRelogger = GUID(0x7b40792d, 0x5ff, 0x44c4, [0x90, 0x58, 0xf4, 0x40, 0xc7, 0x1f, 0x17, 0xd4]);
struct CTraceRelogger
{
}
