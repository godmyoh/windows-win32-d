module windows.win32.system.com.urlmon;

import windows.win32.guid : GUID;
import windows.win32.data.xml.msxml : IXMLElement;
import windows.win32.foundation : BOOL, HANDLE, HANDLE_PTR, HRESULT, HWND, LARGE_INTEGER, PSTR, PWSTR, SYSTEMTIME, ULARGE_INTEGER;
import windows.win32.system.com_ : BINDINFO, CLSCTX, FORMATETC, IBindCtx, IBindStatusCallback, IBinding, IClassFactory, IEnumFORMATETC, IEnumString, IMoniker, IServiceProvider, IStream, IUnknown, IUri, IUriBuilder, QUERYCONTEXT, STGMEDIUM, uCLSSPEC;

version (Windows):
extern (Windows):

HRESULT CreateURLMoniker(IMoniker, const(wchar)*, IMoniker*);
HRESULT CreateURLMonikerEx(IMoniker, const(wchar)*, IMoniker*, uint);
HRESULT GetClassURL(const(wchar)*, GUID*);
HRESULT CreateAsyncBindCtx(uint, IBindStatusCallback, IEnumFORMATETC, IBindCtx*);
HRESULT CreateURLMonikerEx2(IMoniker, IUri, IMoniker*, uint);
HRESULT CreateAsyncBindCtxEx(IBindCtx, uint, IBindStatusCallback, IEnumFORMATETC, IBindCtx*, uint);
HRESULT MkParseDisplayNameEx(IBindCtx, const(wchar)*, uint*, IMoniker*);
HRESULT RegisterBindStatusCallback(IBindCtx, IBindStatusCallback, IBindStatusCallback*, uint);
HRESULT RevokeBindStatusCallback(IBindCtx, IBindStatusCallback);
HRESULT GetClassFileOrMime(IBindCtx, const(wchar)*, void*, uint, const(wchar)*, uint, GUID*);
HRESULT IsValidURL(IBindCtx, const(wchar)*, uint);
HRESULT CoGetClassObjectFromURL(const(GUID)*, const(wchar)*, uint, uint, const(wchar)*, IBindCtx, CLSCTX, void*, const(GUID)*, void**);
HRESULT IEInstallScope(uint*);
HRESULT FaultInIEFeature(HWND, uCLSSPEC*, QUERYCONTEXT*, uint);
HRESULT GetComponentIDFromCLSSPEC(uCLSSPEC*, PSTR*);
HRESULT IsAsyncMoniker(IMoniker);
HRESULT RegisterMediaTypes(uint, const(char)**, ushort*);
HRESULT FindMediaType(const(char)*, ushort*);
HRESULT CreateFormatEnumerator(uint, FORMATETC*, IEnumFORMATETC*);
HRESULT RegisterFormatEnumerator(IBindCtx, IEnumFORMATETC, uint);
HRESULT RevokeFormatEnumerator(IBindCtx, IEnumFORMATETC);
HRESULT RegisterMediaTypeClass(IBindCtx, uint, const(char)**, GUID*, uint);
HRESULT FindMediaTypeClass(IBindCtx, const(char)*, GUID*, uint);
HRESULT UrlMkSetSessionOption(uint, void*, uint, uint);
HRESULT UrlMkGetSessionOption(uint, void*, uint, uint*, uint);
HRESULT FindMimeFromData(IBindCtx, const(wchar)*, void*, uint, const(wchar)*, uint, PWSTR*, uint);
HRESULT ObtainUserAgentString(uint, PSTR, uint*);
HRESULT CompareSecurityIds(ubyte*, uint, ubyte*, uint, uint);
HRESULT CompatFlagsFromClsid(GUID*, uint*, uint*);
HRESULT SetAccessForIEAppContainer(HANDLE, IEObjectType, uint);
HRESULT HlinkSimpleNavigateToString(const(wchar)*, const(wchar)*, const(wchar)*, IUnknown, IBindCtx, IBindStatusCallback, uint, uint);
HRESULT HlinkSimpleNavigateToMoniker(IMoniker, const(wchar)*, const(wchar)*, IUnknown, IBindCtx, IBindStatusCallback, uint, uint);
HRESULT URLOpenStreamA(IUnknown, const(char)*, uint, IBindStatusCallback);
HRESULT URLOpenStreamW(IUnknown, const(wchar)*, uint, IBindStatusCallback);
HRESULT URLOpenPullStreamA(IUnknown, const(char)*, uint, IBindStatusCallback);
HRESULT URLOpenPullStreamW(IUnknown, const(wchar)*, uint, IBindStatusCallback);
HRESULT URLDownloadToFileA(IUnknown, const(char)*, const(char)*, uint, IBindStatusCallback);
HRESULT URLDownloadToFileW(IUnknown, const(wchar)*, const(wchar)*, uint, IBindStatusCallback);
HRESULT URLDownloadToCacheFileA(IUnknown, const(char)*, PSTR, uint, uint, IBindStatusCallback);
HRESULT URLDownloadToCacheFileW(IUnknown, const(wchar)*, PWSTR, uint, uint, IBindStatusCallback);
HRESULT URLOpenBlockingStreamA(IUnknown, const(char)*, IStream*, uint, IBindStatusCallback);
HRESULT URLOpenBlockingStreamW(IUnknown, const(wchar)*, IStream*, uint, IBindStatusCallback);
HRESULT HlinkGoBack(IUnknown);
HRESULT HlinkGoForward(IUnknown);
HRESULT HlinkNavigateString(IUnknown, const(wchar)*);
HRESULT HlinkNavigateMoniker(IUnknown, IMoniker);
HRESULT CoInternetParseUrl(const(wchar)*, PARSEACTION, uint, PWSTR, uint, uint*, uint);
HRESULT CoInternetParseIUri(IUri, PARSEACTION, uint, PWSTR, uint, uint*, ulong);
HRESULT CoInternetCombineUrl(const(wchar)*, const(wchar)*, uint, PWSTR, uint, uint*, uint);
HRESULT CoInternetCombineUrlEx(IUri, const(wchar)*, uint, IUri*, ulong);
HRESULT CoInternetCombineIUri(IUri, IUri, uint, IUri*, ulong);
HRESULT CoInternetCompareUrl(const(wchar)*, const(wchar)*, uint);
HRESULT CoInternetGetProtocolFlags(const(wchar)*, uint*, uint);
HRESULT CoInternetQueryInfo(const(wchar)*, QUERYOPTION, uint, void*, uint, uint*, uint);
HRESULT CoInternetGetSession(uint, IInternetSession*, uint);
HRESULT CoInternetGetSecurityUrl(const(wchar)*, PWSTR*, PSUACTION, uint);
HRESULT CoInternetGetSecurityUrlEx(IUri, IUri*, PSUACTION, ulong);
HRESULT CoInternetSetFeatureEnabled(INTERNETFEATURELIST, uint, BOOL);
HRESULT CoInternetIsFeatureEnabled(INTERNETFEATURELIST, uint);
HRESULT CoInternetIsFeatureEnabledForUrl(INTERNETFEATURELIST, uint, const(wchar)*, IInternetSecurityManager);
HRESULT CoInternetIsFeatureEnabledForIUri(INTERNETFEATURELIST, uint, IUri, IInternetSecurityManagerEx2);
HRESULT CoInternetIsFeatureZoneElevationEnabled(const(wchar)*, const(wchar)*, IInternetSecurityManager, uint);
HRESULT CopyStgMedium(const(STGMEDIUM)*, STGMEDIUM*);
HRESULT CopyBindInfo(const(BINDINFO)*, BINDINFO*);
void ReleaseBindInfo(BINDINFO*);
PWSTR IEGetUserPrivateNamespaceName();
HRESULT CoInternetCreateSecurityManager(IServiceProvider, IInternetSecurityManager*, uint);
HRESULT CoInternetCreateZoneManager(IServiceProvider, IInternetZoneManager*, uint);
HRESULT GetSoftwareUpdateInfo(const(wchar)*, SOFTDISTINFO*);
HRESULT SetSoftwareUpdateAdvertisementState(const(wchar)*, uint, uint, uint);
BOOL IsLoggingEnabledA(const(char)*);
BOOL IsLoggingEnabledW(const(wchar)*);
BOOL WriteHitLogging(HIT_LOGGING_INFO*);
enum MKSYS_URLMONIKER = 0x00000006;
enum URL_MK_LEGACY = 0x00000000;
enum URL_MK_UNIFORM = 0x00000001;
enum URL_MK_NO_CANONICALIZE = 0x00000002;
enum FIEF_FLAG_FORCE_JITUI = 0x00000001;
enum FIEF_FLAG_PEEK = 0x00000002;
enum FIEF_FLAG_SKIP_INSTALLED_VERSION_CHECK = 0x00000004;
enum FIEF_FLAG_RESERVED_0 = 0x00000008;
enum FMFD_DEFAULT = 0x00000000;
enum FMFD_URLASFILENAME = 0x00000001;
enum FMFD_ENABLEMIMESNIFFING = 0x00000002;
enum FMFD_IGNOREMIMETEXTPLAIN = 0x00000004;
enum FMFD_SERVERMIME = 0x00000008;
enum FMFD_RESPECTTEXTPLAIN = 0x00000010;
enum FMFD_RETURNUPDATEDIMGMIMES = 0x00000020;
enum FMFD_RESERVED_1 = 0x00000040;
enum FMFD_RESERVED_2 = 0x00000080;
enum UAS_EXACTLEGACY = 0x00001000;
enum URLMON_OPTION_USERAGENT = 0x10000001;
enum URLMON_OPTION_USERAGENT_REFRESH = 0x10000002;
enum URLMON_OPTION_URL_ENCODING = 0x10000004;
enum URLMON_OPTION_USE_BINDSTRINGCREDS = 0x10000008;
enum URLMON_OPTION_USE_BROWSERAPPSDOCUMENTS = 0x10000010;
enum CF_NULL = 0x00000000;
enum MK_S_ASYNCHRONOUS = 0x000401e8;
enum S_ASYNCHRONOUS = 0x000401e8;
enum E_PENDING = 0xffffffff8000000a;
enum INET_E_INVALID_URL = 0xffffffff800c0002;
enum INET_E_NO_SESSION = 0xffffffff800c0003;
enum INET_E_CANNOT_CONNECT = 0xffffffff800c0004;
enum INET_E_RESOURCE_NOT_FOUND = 0xffffffff800c0005;
enum INET_E_OBJECT_NOT_FOUND = 0xffffffff800c0006;
enum INET_E_DATA_NOT_AVAILABLE = 0xffffffff800c0007;
enum INET_E_DOWNLOAD_FAILURE = 0xffffffff800c0008;
enum INET_E_AUTHENTICATION_REQUIRED = 0xffffffff800c0009;
enum INET_E_NO_VALID_MEDIA = 0xffffffff800c000a;
enum INET_E_CONNECTION_TIMEOUT = 0xffffffff800c000b;
enum INET_E_INVALID_REQUEST = 0xffffffff800c000c;
enum INET_E_UNKNOWN_PROTOCOL = 0xffffffff800c000d;
enum INET_E_SECURITY_PROBLEM = 0xffffffff800c000e;
enum INET_E_CANNOT_LOAD_DATA = 0xffffffff800c000f;
enum INET_E_CANNOT_INSTANTIATE_OBJECT = 0xffffffff800c0010;
enum INET_E_INVALID_CERTIFICATE = 0xffffffff800c0019;
enum INET_E_REDIRECT_FAILED = 0xffffffff800c0014;
enum INET_E_REDIRECT_TO_DIR = 0xffffffff800c0015;
enum INET_E_CANNOT_LOCK_REQUEST = 0xffffffff800c0016;
enum INET_E_USE_EXTEND_BINDING = 0xffffffff800c0017;
enum INET_E_TERMINATED_BIND = 0xffffffff800c0018;
enum INET_E_RESERVED_1 = 0xffffffff800c001a;
enum INET_E_BLOCKED_REDIRECT_XSECURITYID = 0xffffffff800c001b;
enum INET_E_DOMINJECTIONVALIDATION = 0xffffffff800c001c;
enum INET_E_VTAB_SWITCH_FORCE_ENGINE = 0xffffffff800c001d;
enum INET_E_HSTS_CERTIFICATE_ERROR = 0xffffffff800c001e;
enum INET_E_RESERVED_2 = 0xffffffff800c001f;
enum INET_E_RESERVED_3 = 0xffffffff800c0020;
enum INET_E_RESERVED_4 = 0xffffffff800c0021;
enum INET_E_RESERVED_5 = 0xffffffff800c0022;
enum INET_E_ERROR_FIRST = 0xffffffff800c0002;
enum INET_E_CODE_DOWNLOAD_DECLINED = 0xffffffff800c0100;
enum INET_E_RESULT_DISPATCHED = 0xffffffff800c0200;
enum INET_E_CANNOT_REPLACE_SFP_FILE = 0xffffffff800c0300;
enum INET_E_CODE_INSTALL_SUPPRESSED = 0xffffffff800c0400;
enum INET_E_CODE_INSTALL_BLOCKED_BY_HASH_POLICY = 0xffffffff800c0500;
enum INET_E_DOWNLOAD_BLOCKED_BY_INPRIVATE = 0xffffffff800c0501;
enum INET_E_CODE_INSTALL_BLOCKED_IMMERSIVE = 0xffffffff800c0502;
enum INET_E_FORBIDFRAMING = 0xffffffff800c0503;
enum INET_E_CODE_INSTALL_BLOCKED_ARM = 0xffffffff800c0504;
enum INET_E_BLOCKED_PLUGGABLE_PROTOCOL = 0xffffffff800c0505;
enum INET_E_BLOCKED_ENHANCEDPROTECTEDMODE = 0xffffffff800c0506;
enum INET_E_CODE_INSTALL_BLOCKED_BITNESS = 0xffffffff800c0507;
enum INET_E_DOWNLOAD_BLOCKED_BY_CSP = 0xffffffff800c0508;
enum INET_E_ERROR_LAST = 0xffffffff800c0508;
enum Uri_DISPLAY_NO_FRAGMENT = 0x00000001;
enum Uri_PUNYCODE_IDN_HOST = 0x00000002;
enum Uri_DISPLAY_IDN_HOST = 0x00000004;
enum Uri_DISPLAY_NO_PUNYCODE = 0x00000008;
enum Uri_ENCODING_USER_INFO_AND_PATH_IS_PERCENT_ENCODED_UTF8 = 0x00000001;
enum Uri_ENCODING_USER_INFO_AND_PATH_IS_CP = 0x00000002;
enum Uri_ENCODING_HOST_IS_IDN = 0x00000004;
enum Uri_ENCODING_HOST_IS_PERCENT_ENCODED_UTF8 = 0x00000008;
enum Uri_ENCODING_HOST_IS_PERCENT_ENCODED_CP = 0x00000010;
enum Uri_ENCODING_QUERY_AND_FRAGMENT_IS_PERCENT_ENCODED_UTF8 = 0x00000020;
enum Uri_ENCODING_QUERY_AND_FRAGMENT_IS_CP = 0x00000040;
enum UriBuilder_USE_ORIGINAL_FLAGS = 0x00000001;
enum WININETINFO_OPTION_LOCK_HANDLE = 0x0000fffe;
enum URLOSTRM_USECACHEDCOPY_ONLY = 0x00000001;
enum URLOSTRM_USECACHEDCOPY = 0x00000002;
enum URLOSTRM_GETNEWESTVERSION = 0x00000003;
enum SET_FEATURE_ON_THREAD = 0x00000001;
enum SET_FEATURE_ON_PROCESS = 0x00000002;
enum SET_FEATURE_IN_REGISTRY = 0x00000004;
enum SET_FEATURE_ON_THREAD_LOCALMACHINE = 0x00000008;
enum SET_FEATURE_ON_THREAD_INTRANET = 0x00000010;
enum SET_FEATURE_ON_THREAD_TRUSTED = 0x00000020;
enum SET_FEATURE_ON_THREAD_INTERNET = 0x00000040;
enum SET_FEATURE_ON_THREAD_RESTRICTED = 0x00000080;
enum GET_FEATURE_FROM_THREAD = 0x00000001;
enum GET_FEATURE_FROM_PROCESS = 0x00000002;
enum GET_FEATURE_FROM_REGISTRY = 0x00000004;
enum GET_FEATURE_FROM_THREAD_LOCALMACHINE = 0x00000008;
enum GET_FEATURE_FROM_THREAD_INTRANET = 0x00000010;
enum GET_FEATURE_FROM_THREAD_TRUSTED = 0x00000020;
enum GET_FEATURE_FROM_THREAD_INTERNET = 0x00000040;
enum GET_FEATURE_FROM_THREAD_RESTRICTED = 0x00000080;
enum INET_E_USE_DEFAULT_PROTOCOLHANDLER = 0xffffffff800c0011;
enum INET_E_USE_DEFAULT_SETTING = 0xffffffff800c0012;
enum INET_E_DEFAULT_ACTION = 0xffffffff800c0011;
enum INET_E_QUERYOPTION_UNKNOWN = 0xffffffff800c0013;
enum INET_E_REDIRECTING = 0xffffffff800c0014;
enum PROTOCOLFLAG_NO_PICS_CHECK = 0x00000001;
enum MUTZ_NOSAVEDFILECHECK = 0x00000001;
enum MUTZ_ISFILE = 0x00000002;
enum MUTZ_ACCEPT_WILDCARD_SCHEME = 0x00000080;
enum MUTZ_ENFORCERESTRICTED = 0x00000100;
enum MUTZ_RESERVED = 0x00000200;
enum MUTZ_REQUIRESAVEDFILECHECK = 0x00000400;
enum MUTZ_DONT_UNESCAPE = 0x00000800;
enum MUTZ_DONT_USE_CACHE = 0x00001000;
enum MUTZ_FORCE_INTRANET_FLAGS = 0x00002000;
enum MUTZ_IGNORE_ZONE_MAPPINGS = 0x00004000;
enum MAX_SIZE_SECURITY_ID = 0x00000200;
enum URLACTION_MIN = 0x00001000;
enum URLACTION_DOWNLOAD_MIN = 0x00001000;
enum URLACTION_DOWNLOAD_SIGNED_ACTIVEX = 0x00001001;
enum URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX = 0x00001004;
enum URLACTION_DOWNLOAD_CURR_MAX = 0x00001004;
enum URLACTION_DOWNLOAD_MAX = 0x000011ff;
enum URLACTION_ACTIVEX_MIN = 0x00001200;
enum URLACTION_ACTIVEX_RUN = 0x00001200;
enum URLPOLICY_ACTIVEX_CHECK_LIST = 0x00010000;
enum URLACTION_ACTIVEX_OVERRIDE_OBJECT_SAFETY = 0x00001201;
enum URLACTION_ACTIVEX_OVERRIDE_DATA_SAFETY = 0x00001202;
enum URLACTION_ACTIVEX_OVERRIDE_SCRIPT_SAFETY = 0x00001203;
enum URLACTION_SCRIPT_OVERRIDE_SAFETY = 0x00001401;
enum URLACTION_ACTIVEX_CONFIRM_NOOBJECTSAFETY = 0x00001204;
enum URLACTION_ACTIVEX_TREATASUNTRUSTED = 0x00001205;
enum URLACTION_ACTIVEX_NO_WEBOC_SCRIPT = 0x00001206;
enum URLACTION_ACTIVEX_OVERRIDE_REPURPOSEDETECTION = 0x00001207;
enum URLACTION_ACTIVEX_OVERRIDE_OPTIN = 0x00001208;
enum URLACTION_ACTIVEX_SCRIPTLET_RUN = 0x00001209;
enum URLACTION_ACTIVEX_DYNSRC_VIDEO_AND_ANIMATION = 0x0000120a;
enum URLACTION_ACTIVEX_OVERRIDE_DOMAINLIST = 0x0000120b;
enum URLACTION_ACTIVEX_ALLOW_TDC = 0x0000120c;
enum URLACTION_ACTIVEX_CURR_MAX = 0x0000120c;
enum URLACTION_ACTIVEX_MAX = 0x000013ff;
enum URLACTION_SCRIPT_MIN = 0x00001400;
enum URLACTION_SCRIPT_RUN = 0x00001400;
enum URLACTION_SCRIPT_JAVA_USE = 0x00001402;
enum URLACTION_SCRIPT_SAFE_ACTIVEX = 0x00001405;
enum URLACTION_CROSS_DOMAIN_DATA = 0x00001406;
enum URLACTION_SCRIPT_PASTE = 0x00001407;
enum URLACTION_ALLOW_XDOMAIN_SUBFRAME_RESIZE = 0x00001408;
enum URLACTION_SCRIPT_XSSFILTER = 0x00001409;
enum URLACTION_SCRIPT_NAVIGATE = 0x0000140a;
enum URLACTION_PLUGGABLE_PROTOCOL_XHR = 0x0000140b;
enum URLACTION_ALLOW_VBSCRIPT_IE = 0x0000140c;
enum URLACTION_ALLOW_JSCRIPT_IE = 0x0000140d;
enum URLACTION_SCRIPT_CURR_MAX = 0x0000140d;
enum URLACTION_SCRIPT_MAX = 0x000015ff;
enum URLACTION_HTML_MIN = 0x00001600;
enum URLACTION_HTML_SUBMIT_FORMS = 0x00001601;
enum URLACTION_HTML_SUBMIT_FORMS_FROM = 0x00001602;
enum URLACTION_HTML_SUBMIT_FORMS_TO = 0x00001603;
enum URLACTION_HTML_FONT_DOWNLOAD = 0x00001604;
enum URLACTION_HTML_JAVA_RUN = 0x00001605;
enum URLACTION_HTML_USERDATA_SAVE = 0x00001606;
enum URLACTION_HTML_SUBFRAME_NAVIGATE = 0x00001607;
enum URLACTION_HTML_META_REFRESH = 0x00001608;
enum URLACTION_HTML_MIXED_CONTENT = 0x00001609;
enum URLACTION_HTML_INCLUDE_FILE_PATH = 0x0000160a;
enum URLACTION_HTML_ALLOW_INJECTED_DYNAMIC_HTML = 0x0000160b;
enum URLACTION_HTML_REQUIRE_UTF8_DOCUMENT_CODEPAGE = 0x0000160c;
enum URLACTION_HTML_ALLOW_CROSS_DOMAIN_CANVAS = 0x0000160d;
enum URLACTION_HTML_ALLOW_WINDOW_CLOSE = 0x0000160e;
enum URLACTION_HTML_ALLOW_CROSS_DOMAIN_WEBWORKER = 0x0000160f;
enum URLACTION_HTML_ALLOW_CROSS_DOMAIN_TEXTTRACK = 0x00001610;
enum URLACTION_HTML_ALLOW_INDEXEDDB = 0x00001611;
enum URLACTION_HTML_MAX = 0x000017ff;
enum URLACTION_SHELL_MIN = 0x00001800;
enum URLACTION_SHELL_INSTALL_DTITEMS = 0x00001800;
enum URLACTION_SHELL_MOVE_OR_COPY = 0x00001802;
enum URLACTION_SHELL_FILE_DOWNLOAD = 0x00001803;
enum URLACTION_SHELL_VERB = 0x00001804;
enum URLACTION_SHELL_WEBVIEW_VERB = 0x00001805;
enum URLACTION_SHELL_SHELLEXECUTE = 0x00001806;
enum URLACTION_SHELL_EXECUTE_HIGHRISK = 0x00001806;
enum URLACTION_SHELL_EXECUTE_MODRISK = 0x00001807;
enum URLACTION_SHELL_EXECUTE_LOWRISK = 0x00001808;
enum URLACTION_SHELL_POPUPMGR = 0x00001809;
enum URLACTION_SHELL_RTF_OBJECTS_LOAD = 0x0000180a;
enum URLACTION_SHELL_ENHANCED_DRAGDROP_SECURITY = 0x0000180b;
enum URLACTION_SHELL_EXTENSIONSECURITY = 0x0000180c;
enum URLACTION_SHELL_SECURE_DRAGSOURCE = 0x0000180d;
enum URLACTION_SHELL_REMOTEQUERY = 0x0000180e;
enum URLACTION_SHELL_PREVIEW = 0x0000180f;
enum URLACTION_SHELL_SHARE = 0x00001810;
enum URLACTION_SHELL_ALLOW_CROSS_SITE_SHARE = 0x00001811;
enum URLACTION_SHELL_TOCTOU_RISK = 0x00001812;
enum URLACTION_SHELL_CURR_MAX = 0x00001812;
enum URLACTION_SHELL_MAX = 0x000019ff;
enum URLACTION_NETWORK_MIN = 0x00001a00;
enum URLACTION_CREDENTIALS_USE = 0x00001a00;
enum URLPOLICY_CREDENTIALS_SILENT_LOGON_OK = 0x00000000;
enum URLPOLICY_CREDENTIALS_MUST_PROMPT_USER = 0x00010000;
enum URLPOLICY_CREDENTIALS_CONDITIONAL_PROMPT = 0x00020000;
enum URLPOLICY_CREDENTIALS_ANONYMOUS_ONLY = 0x00030000;
enum URLACTION_AUTHENTICATE_CLIENT = 0x00001a01;
enum URLPOLICY_AUTHENTICATE_CLEARTEXT_OK = 0x00000000;
enum URLPOLICY_AUTHENTICATE_CHALLENGE_RESPONSE = 0x00010000;
enum URLPOLICY_AUTHENTICATE_MUTUAL_ONLY = 0x00030000;
enum URLACTION_COOKIES = 0x00001a02;
enum URLACTION_COOKIES_SESSION = 0x00001a03;
enum URLACTION_CLIENT_CERT_PROMPT = 0x00001a04;
enum URLACTION_COOKIES_THIRD_PARTY = 0x00001a05;
enum URLACTION_COOKIES_SESSION_THIRD_PARTY = 0x00001a06;
enum URLACTION_COOKIES_ENABLED = 0x00001a10;
enum URLACTION_NETWORK_CURR_MAX = 0x00001a10;
enum URLACTION_NETWORK_MAX = 0x00001bff;
enum URLACTION_JAVA_MIN = 0x00001c00;
enum URLACTION_JAVA_PERMISSIONS = 0x00001c00;
enum URLPOLICY_JAVA_PROHIBIT = 0x00000000;
enum URLPOLICY_JAVA_HIGH = 0x00010000;
enum URLPOLICY_JAVA_MEDIUM = 0x00020000;
enum URLPOLICY_JAVA_LOW = 0x00030000;
enum URLPOLICY_JAVA_CUSTOM = 0x00800000;
enum URLACTION_JAVA_CURR_MAX = 0x00001c00;
enum URLACTION_JAVA_MAX = 0x00001cff;
enum URLACTION_INFODELIVERY_MIN = 0x00001d00;
enum URLACTION_INFODELIVERY_NO_ADDING_CHANNELS = 0x00001d00;
enum URLACTION_INFODELIVERY_NO_EDITING_CHANNELS = 0x00001d01;
enum URLACTION_INFODELIVERY_NO_REMOVING_CHANNELS = 0x00001d02;
enum URLACTION_INFODELIVERY_NO_ADDING_SUBSCRIPTIONS = 0x00001d03;
enum URLACTION_INFODELIVERY_NO_EDITING_SUBSCRIPTIONS = 0x00001d04;
enum URLACTION_INFODELIVERY_NO_REMOVING_SUBSCRIPTIONS = 0x00001d05;
enum URLACTION_INFODELIVERY_NO_CHANNEL_LOGGING = 0x00001d06;
enum URLACTION_INFODELIVERY_CURR_MAX = 0x00001d06;
enum URLACTION_INFODELIVERY_MAX = 0x00001dff;
enum URLACTION_CHANNEL_SOFTDIST_MIN = 0x00001e00;
enum URLACTION_CHANNEL_SOFTDIST_PERMISSIONS = 0x00001e05;
enum URLPOLICY_CHANNEL_SOFTDIST_PROHIBIT = 0x00010000;
enum URLPOLICY_CHANNEL_SOFTDIST_PRECACHE = 0x00020000;
enum URLPOLICY_CHANNEL_SOFTDIST_AUTOINSTALL = 0x00030000;
enum URLACTION_CHANNEL_SOFTDIST_MAX = 0x00001eff;
enum URLACTION_DOTNET_USERCONTROLS = 0x00002005;
enum URLACTION_BEHAVIOR_MIN = 0x00002000;
enum URLACTION_BEHAVIOR_RUN = 0x00002000;
enum URLPOLICY_BEHAVIOR_CHECK_LIST = 0x00010000;
enum URLACTION_FEATURE_MIN = 0x00002100;
enum URLACTION_FEATURE_MIME_SNIFFING = 0x00002100;
enum URLACTION_FEATURE_ZONE_ELEVATION = 0x00002101;
enum URLACTION_FEATURE_WINDOW_RESTRICTIONS = 0x00002102;
enum URLACTION_FEATURE_SCRIPT_STATUS_BAR = 0x00002103;
enum URLACTION_FEATURE_FORCE_ADDR_AND_STATUS = 0x00002104;
enum URLACTION_FEATURE_BLOCK_INPUT_PROMPTS = 0x00002105;
enum URLACTION_FEATURE_DATA_BINDING = 0x00002106;
enum URLACTION_FEATURE_CROSSDOMAIN_FOCUS_CHANGE = 0x00002107;
enum URLACTION_AUTOMATIC_DOWNLOAD_UI_MIN = 0x00002200;
enum URLACTION_AUTOMATIC_DOWNLOAD_UI = 0x00002200;
enum URLACTION_AUTOMATIC_ACTIVEX_UI = 0x00002201;
enum URLACTION_ALLOW_RESTRICTEDPROTOCOLS = 0x00002300;
enum URLACTION_ALLOW_APEVALUATION = 0x00002301;
enum URLACTION_ALLOW_XHR_EVALUATION = 0x00002302;
enum URLACTION_WINDOWS_BROWSER_APPLICATIONS = 0x00002400;
enum URLACTION_XPS_DOCUMENTS = 0x00002401;
enum URLACTION_LOOSE_XAML = 0x00002402;
enum URLACTION_LOWRIGHTS = 0x00002500;
enum URLACTION_WINFX_SETUP = 0x00002600;
enum URLACTION_INPRIVATE_BLOCKING = 0x00002700;
enum URLACTION_ALLOW_AUDIO_VIDEO = 0x00002701;
enum URLACTION_ALLOW_ACTIVEX_FILTERING = 0x00002702;
enum URLACTION_ALLOW_STRUCTURED_STORAGE_SNIFFING = 0x00002703;
enum URLACTION_ALLOW_AUDIO_VIDEO_PLUGINS = 0x00002704;
enum URLACTION_ALLOW_ZONE_ELEVATION_VIA_OPT_OUT = 0x00002705;
enum URLACTION_ALLOW_ZONE_ELEVATION_OPT_OUT_ADDITION = 0x00002706;
enum URLACTION_ALLOW_CROSSDOMAIN_DROP_WITHIN_WINDOW = 0x00002708;
enum URLACTION_ALLOW_CROSSDOMAIN_DROP_ACROSS_WINDOWS = 0x00002709;
enum URLACTION_ALLOW_CROSSDOMAIN_APPCACHE_MANIFEST = 0x0000270a;
enum URLACTION_ALLOW_RENDER_LEGACY_DXTFILTERS = 0x0000270b;
enum URLACTION_ALLOW_ANTIMALWARE_SCANNING_OF_ACTIVEX = 0x0000270c;
enum URLACTION_ALLOW_CSS_EXPRESSIONS = 0x0000270d;
enum URLPOLICY_ALLOW = 0x00000000;
enum URLPOLICY_QUERY = 0x00000001;
enum URLPOLICY_DISALLOW = 0x00000003;
enum URLPOLICY_NOTIFY_ON_ALLOW = 0x00000010;
enum URLPOLICY_NOTIFY_ON_DISALLOW = 0x00000020;
enum URLPOLICY_LOG_ON_ALLOW = 0x00000040;
enum URLPOLICY_LOG_ON_DISALLOW = 0x00000080;
enum URLPOLICY_MASK_PERMISSIONS = 0x0000000f;
enum URLPOLICY_DONTCHECKDLGBOX = 0x00000100;
enum URLZONE_ESC_FLAG = 0x00000100;
enum SECURITY_IE_STATE_GREEN = 0x00000000;
enum SECURITY_IE_STATE_RED = 0x00000001;
enum SOFTDIST_FLAG_USAGE_EMAIL = 0x00000001;
enum SOFTDIST_FLAG_USAGE_PRECACHE = 0x00000002;
enum SOFTDIST_FLAG_USAGE_AUTOINSTALL = 0x00000004;
enum SOFTDIST_FLAG_DELETE_SUBSCRIPTION = 0x00000008;
enum SOFTDIST_ADSTATE_NONE = 0x00000000;
enum SOFTDIST_ADSTATE_AVAILABLE = 0x00000001;
enum SOFTDIST_ADSTATE_DOWNLOADED = 0x00000002;
enum SOFTDIST_ADSTATE_INSTALLED = 0x00000003;
enum CONFIRMSAFETYACTION_LOADOBJECT = 0x00000001;
alias IEObjectType = int;
enum : int
{
    IE_EPM_OBJECT_EVENT          = 0x00000000,
    IE_EPM_OBJECT_MUTEX          = 0x00000001,
    IE_EPM_OBJECT_SEMAPHORE      = 0x00000002,
    IE_EPM_OBJECT_SHARED_MEMORY  = 0x00000003,
    IE_EPM_OBJECT_WAITABLE_TIMER = 0x00000004,
    IE_EPM_OBJECT_FILE           = 0x00000005,
    IE_EPM_OBJECT_NAMED_PIPE     = 0x00000006,
    IE_EPM_OBJECT_REGISTRY       = 0x00000007,
}

enum IID_IPersistMoniker = GUID(0x79eac9c9, 0xbaf9, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IPersistMoniker : IUnknown
{
    HRESULT GetClassID(GUID*);
    HRESULT IsDirty();
    HRESULT Load(BOOL, IMoniker, IBindCtx, uint);
    HRESULT Save(IMoniker, IBindCtx, BOOL);
    HRESULT SaveCompleted(IMoniker, IBindCtx);
    HRESULT GetCurMoniker(IMoniker*);
}
alias MONIKERPROPERTY = int;
enum : int
{
    MIMETYPEPROP        = 0x00000000,
    USE_SRC_URL         = 0x00000001,
    CLASSIDPROP         = 0x00000002,
    TRUSTEDDOWNLOADPROP = 0x00000003,
    POPUPLEVELPROP      = 0x00000004,
}

enum IID_IMonikerProp = GUID(0xa5ca5f7f, 0x1847, 0x4d87, [0x9c, 0x5b, 0x91, 0x85, 0x9, 0xf7, 0x51, 0x1d]);
interface IMonikerProp : IUnknown
{
    HRESULT PutProperty(MONIKERPROPERTY, const(wchar)*);
}
enum IID_IBindProtocol = GUID(0x79eac9cd, 0xbaf9, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IBindProtocol : IUnknown
{
    HRESULT CreateBinding(const(wchar)*, IBindCtx, IBinding*);
}
alias BINDVERB = int;
enum : int
{
    BINDVERB_GET       = 0x00000000,
    BINDVERB_POST      = 0x00000001,
    BINDVERB_PUT       = 0x00000002,
    BINDVERB_CUSTOM    = 0x00000003,
    BINDVERB_RESERVED1 = 0x00000004,
}

alias BINDF = int;
enum : int
{
    BINDF_ASYNCHRONOUS             = 0x00000001,
    BINDF_ASYNCSTORAGE             = 0x00000002,
    BINDF_NOPROGRESSIVERENDERING   = 0x00000004,
    BINDF_OFFLINEOPERATION         = 0x00000008,
    BINDF_GETNEWESTVERSION         = 0x00000010,
    BINDF_NOWRITECACHE             = 0x00000020,
    BINDF_NEEDFILE                 = 0x00000040,
    BINDF_PULLDATA                 = 0x00000080,
    BINDF_IGNORESECURITYPROBLEM    = 0x00000100,
    BINDF_RESYNCHRONIZE            = 0x00000200,
    BINDF_HYPERLINK                = 0x00000400,
    BINDF_NO_UI                    = 0x00000800,
    BINDF_SILENTOPERATION          = 0x00001000,
    BINDF_PRAGMA_NO_CACHE          = 0x00002000,
    BINDF_GETCLASSOBJECT           = 0x00004000,
    BINDF_RESERVED_1               = 0x00008000,
    BINDF_FREE_THREADED            = 0x00010000,
    BINDF_DIRECT_READ              = 0x00020000,
    BINDF_FORMS_SUBMIT             = 0x00040000,
    BINDF_GETFROMCACHE_IF_NET_FAIL = 0x00080000,
    BINDF_FROMURLMON               = 0x00100000,
    BINDF_FWD_BACK                 = 0x00200000,
    BINDF_PREFERDEFAULTHANDLER     = 0x00400000,
    BINDF_ENFORCERESTRICTED        = 0x00800000,
    BINDF_RESERVED_2               = 0x80000000,
    BINDF_RESERVED_3               = 0x01000000,
    BINDF_RESERVED_4               = 0x02000000,
    BINDF_RESERVED_5               = 0x04000000,
    BINDF_RESERVED_6               = 0x08000000,
    BINDF_RESERVED_7               = 0x40000000,
    BINDF_RESERVED_8               = 0x20000000,
}

alias URL_ENCODING = int;
enum : int
{
    URL_ENCODING_NONE         = 0x00000000,
    URL_ENCODING_ENABLE_UTF8  = 0x10000000,
    URL_ENCODING_DISABLE_UTF8 = 0x20000000,
}

struct REMSECURITY_ATTRIBUTES
{
    uint nLength;
    uint lpSecurityDescriptor;
    BOOL bInheritHandle;
}
struct RemBINDINFO
{
    uint cbSize;
    PWSTR szExtraInfo;
    uint grfBindInfoF;
    uint dwBindVerb;
    PWSTR szCustomVerb;
    uint cbstgmedData;
    uint dwOptions;
    uint dwOptionsFlags;
    uint dwCodePage;
    REMSECURITY_ATTRIBUTES securityAttributes;
    GUID iid;
    IUnknown pUnk;
    uint dwReserved;
}
struct RemFORMATETC
{
    uint cfFormat;
    uint ptd;
    uint dwAspect;
    int lindex;
    uint tymed;
}
alias BINDINFO_OPTIONS = int;
enum : int
{
    BINDINFO_OPTIONS_WININETFLAG              = 0x00010000,
    BINDINFO_OPTIONS_ENABLE_UTF8              = 0x00020000,
    BINDINFO_OPTIONS_DISABLE_UTF8             = 0x00040000,
    BINDINFO_OPTIONS_USE_IE_ENCODING          = 0x00080000,
    BINDINFO_OPTIONS_BINDTOOBJECT             = 0x00100000,
    BINDINFO_OPTIONS_SECURITYOPTOUT           = 0x00200000,
    BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN      = 0x00400000,
    BINDINFO_OPTIONS_USEBINDSTRINGCREDS       = 0x00800000,
    BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 0x01000000,
    BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE    = 0x02000000,
    BINDINFO_WPC_DOWNLOADBLOCKED              = 0x08000000,
    BINDINFO_WPC_LOGGING_ENABLED              = 0x10000000,
    BINDINFO_OPTIONS_ALLOWCONNECTDATA         = 0x20000000,
    BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS     = 0x40000000,
    BINDINFO_OPTIONS_SHDOCVW_NAVIGATE         = 0x80000000,
}

alias BSCF = int;
enum : int
{
    BSCF_FIRSTDATANOTIFICATION        = 0x00000001,
    BSCF_INTERMEDIATEDATANOTIFICATION = 0x00000002,
    BSCF_LASTDATANOTIFICATION         = 0x00000004,
    BSCF_DATAFULLYAVAILABLE           = 0x00000008,
    BSCF_AVAILABLEDATASIZEUNKNOWN     = 0x00000010,
    BSCF_SKIPDRAINDATAFORFILEURLS     = 0x00000020,
    BSCF_64BITLENGTHDOWNLOAD          = 0x00000040,
}

alias BINDSTATUS = int;
enum : int
{
    BINDSTATUS_FINDINGRESOURCE            = 0x00000001,
    BINDSTATUS_CONNECTING                 = 0x00000002,
    BINDSTATUS_REDIRECTING                = 0x00000003,
    BINDSTATUS_BEGINDOWNLOADDATA          = 0x00000004,
    BINDSTATUS_DOWNLOADINGDATA            = 0x00000005,
    BINDSTATUS_ENDDOWNLOADDATA            = 0x00000006,
    BINDSTATUS_BEGINDOWNLOADCOMPONENTS    = 0x00000007,
    BINDSTATUS_INSTALLINGCOMPONENTS       = 0x00000008,
    BINDSTATUS_ENDDOWNLOADCOMPONENTS      = 0x00000009,
    BINDSTATUS_USINGCACHEDCOPY            = 0x0000000a,
    BINDSTATUS_SENDINGREQUEST             = 0x0000000b,
    BINDSTATUS_CLASSIDAVAILABLE           = 0x0000000c,
    BINDSTATUS_MIMETYPEAVAILABLE          = 0x0000000d,
    BINDSTATUS_CACHEFILENAMEAVAILABLE     = 0x0000000e,
    BINDSTATUS_BEGINSYNCOPERATION         = 0x0000000f,
    BINDSTATUS_ENDSYNCOPERATION           = 0x00000010,
    BINDSTATUS_BEGINUPLOADDATA            = 0x00000011,
    BINDSTATUS_UPLOADINGDATA              = 0x00000012,
    BINDSTATUS_ENDUPLOADDATA              = 0x00000013,
    BINDSTATUS_PROTOCOLCLASSID            = 0x00000014,
    BINDSTATUS_ENCODING                   = 0x00000015,
    BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE  = 0x00000016,
    BINDSTATUS_CLASSINSTALLLOCATION       = 0x00000017,
    BINDSTATUS_DECODING                   = 0x00000018,
    BINDSTATUS_LOADINGMIMEHANDLER         = 0x00000019,
    BINDSTATUS_CONTENTDISPOSITIONATTACH   = 0x0000001a,
    BINDSTATUS_FILTERREPORTMIMETYPE       = 0x0000001b,
    BINDSTATUS_CLSIDCANINSTANTIATE        = 0x0000001c,
    BINDSTATUS_IUNKNOWNAVAILABLE          = 0x0000001d,
    BINDSTATUS_DIRECTBIND                 = 0x0000001e,
    BINDSTATUS_RAWMIMETYPE                = 0x0000001f,
    BINDSTATUS_PROXYDETECTING             = 0x00000020,
    BINDSTATUS_ACCEPTRANGES               = 0x00000021,
    BINDSTATUS_COOKIE_SENT                = 0x00000022,
    BINDSTATUS_COMPACT_POLICY_RECEIVED    = 0x00000023,
    BINDSTATUS_COOKIE_SUPPRESSED          = 0x00000024,
    BINDSTATUS_COOKIE_STATE_UNKNOWN       = 0x00000025,
    BINDSTATUS_COOKIE_STATE_ACCEPT        = 0x00000026,
    BINDSTATUS_COOKIE_STATE_REJECT        = 0x00000027,
    BINDSTATUS_COOKIE_STATE_PROMPT        = 0x00000028,
    BINDSTATUS_COOKIE_STATE_LEASH         = 0x00000029,
    BINDSTATUS_COOKIE_STATE_DOWNGRADE     = 0x0000002a,
    BINDSTATUS_POLICY_HREF                = 0x0000002b,
    BINDSTATUS_P3P_HEADER                 = 0x0000002c,
    BINDSTATUS_SESSION_COOKIE_RECEIVED    = 0x0000002d,
    BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 0x0000002e,
    BINDSTATUS_SESSION_COOKIES_ALLOWED    = 0x0000002f,
    BINDSTATUS_CACHECONTROL               = 0x00000030,
    BINDSTATUS_CONTENTDISPOSITIONFILENAME = 0x00000031,
    BINDSTATUS_MIMETEXTPLAINMISMATCH      = 0x00000032,
    BINDSTATUS_PUBLISHERAVAILABLE         = 0x00000033,
    BINDSTATUS_DISPLAYNAMEAVAILABLE       = 0x00000034,
    BINDSTATUS_SSLUX_NAVBLOCKED           = 0x00000035,
    BINDSTATUS_SERVER_MIMETYPEAVAILABLE   = 0x00000036,
    BINDSTATUS_SNIFFED_CLASSIDAVAILABLE   = 0x00000037,
    BINDSTATUS_64BIT_PROGRESS             = 0x00000038,
    BINDSTATUS_LAST                       = 0x00000038,
    BINDSTATUS_RESERVED_0                 = 0x00000039,
    BINDSTATUS_RESERVED_1                 = 0x0000003a,
    BINDSTATUS_RESERVED_2                 = 0x0000003b,
    BINDSTATUS_RESERVED_3                 = 0x0000003c,
    BINDSTATUS_RESERVED_4                 = 0x0000003d,
    BINDSTATUS_RESERVED_5                 = 0x0000003e,
    BINDSTATUS_RESERVED_6                 = 0x0000003f,
    BINDSTATUS_RESERVED_7                 = 0x00000040,
    BINDSTATUS_RESERVED_8                 = 0x00000041,
    BINDSTATUS_RESERVED_9                 = 0x00000042,
    BINDSTATUS_RESERVED_A                 = 0x00000043,
    BINDSTATUS_RESERVED_B                 = 0x00000044,
    BINDSTATUS_RESERVED_C                 = 0x00000045,
    BINDSTATUS_RESERVED_D                 = 0x00000046,
    BINDSTATUS_RESERVED_E                 = 0x00000047,
    BINDSTATUS_RESERVED_F                 = 0x00000048,
    BINDSTATUS_RESERVED_10                = 0x00000049,
    BINDSTATUS_RESERVED_11                = 0x0000004a,
    BINDSTATUS_RESERVED_12                = 0x0000004b,
    BINDSTATUS_RESERVED_13                = 0x0000004c,
    BINDSTATUS_RESERVED_14                = 0x0000004d,
    BINDSTATUS_LAST_PRIVATE               = 0x0000004d,
}

alias BINDF2 = int;
enum : int
{
    BINDF2_DISABLEBASICOVERHTTP              = 0x00000001,
    BINDF2_DISABLEAUTOCOOKIEHANDLING         = 0x00000002,
    BINDF2_READ_DATA_GREATER_THAN_4GB        = 0x00000004,
    BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 0x00000008,
    BINDF2_SETDOWNLOADMODE                   = 0x00000020,
    BINDF2_DISABLE_HTTP_REDIRECT_CACHING     = 0x00000040,
    BINDF2_KEEP_CALLBACK_MODULE_LOADED       = 0x00000080,
    BINDF2_ALLOW_PROXY_CRED_PROMPT           = 0x00000100,
    BINDF2_RESERVED_17                       = 0x00000200,
    BINDF2_RESERVED_16                       = 0x00000400,
    BINDF2_RESERVED_15                       = 0x00000800,
    BINDF2_RESERVED_14                       = 0x00001000,
    BINDF2_RESERVED_13                       = 0x00002000,
    BINDF2_RESERVED_12                       = 0x00004000,
    BINDF2_RESERVED_11                       = 0x00008000,
    BINDF2_RESERVED_10                       = 0x00010000,
    BINDF2_RESERVED_F                        = 0x00020000,
    BINDF2_RESERVED_E                        = 0x00040000,
    BINDF2_RESERVED_D                        = 0x00080000,
    BINDF2_RESERVED_C                        = 0x00100000,
    BINDF2_RESERVED_B                        = 0x00200000,
    BINDF2_RESERVED_A                        = 0x00400000,
    BINDF2_RESERVED_9                        = 0x00800000,
    BINDF2_RESERVED_8                        = 0x01000000,
    BINDF2_RESERVED_7                        = 0x02000000,
    BINDF2_RESERVED_6                        = 0x04000000,
    BINDF2_RESERVED_5                        = 0x08000000,
    BINDF2_RESERVED_4                        = 0x10000000,
    BINDF2_RESERVED_3                        = 0x20000000,
    BINDF2_RESERVED_2                        = 0x40000000,
    BINDF2_RESERVED_1                        = 0x80000000,
}

alias AUTHENTICATEF = int;
enum : int
{
    AUTHENTICATEF_PROXY = 0x00000001,
    AUTHENTICATEF_BASIC = 0x00000002,
    AUTHENTICATEF_HTTP  = 0x00000004,
}

enum IID_IHttpNegotiate = GUID(0x79eac9d2, 0xbaf9, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IHttpNegotiate : IUnknown
{
    HRESULT BeginningTransaction(const(wchar)*, const(wchar)*, uint, PWSTR*);
    HRESULT OnResponse(uint, const(wchar)*, const(wchar)*, PWSTR*);
}
enum IID_IHttpNegotiate2 = GUID(0x4f9f9fcb, 0xe0f4, 0x48eb, [0xb7, 0xab, 0xfa, 0x2e, 0xa9, 0x36, 0x5c, 0xb4]);
interface IHttpNegotiate2 : IHttpNegotiate
{
    HRESULT GetRootSecurityId(ubyte*, uint*, ulong);
}
enum IID_IHttpNegotiate3 = GUID(0x57b6c80a, 0x34c2, 0x4602, [0xbc, 0x26, 0x66, 0xa0, 0x2f, 0xc5, 0x71, 0x53]);
interface IHttpNegotiate3 : IHttpNegotiate2
{
    HRESULT GetSerializedClientCertContext(ubyte**, uint*);
}
enum IID_IWinInetFileStream = GUID(0xf134c4b7, 0xb1f8, 0x4e75, [0xb8, 0x86, 0x74, 0xb9, 0x9, 0x43, 0xbe, 0xcb]);
interface IWinInetFileStream : IUnknown
{
    HRESULT SetHandleForUnlock(ulong, ulong);
    HRESULT SetDeleteFile(ulong);
}
enum IID_IWindowForBindingUI = GUID(0x79eac9d5, 0xbafa, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IWindowForBindingUI : IUnknown
{
    HRESULT GetWindow(const(GUID)*, HWND*);
}
alias CIP_STATUS = int;
enum : int
{
    CIP_DISK_FULL                            = 0x00000000,
    CIP_ACCESS_DENIED                        = 0x00000001,
    CIP_NEWER_VERSION_EXISTS                 = 0x00000002,
    CIP_OLDER_VERSION_EXISTS                 = 0x00000003,
    CIP_NAME_CONFLICT                        = 0x00000004,
    CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 0x00000005,
    CIP_EXE_SELF_REGISTERATION_TIMEOUT       = 0x00000006,
    CIP_UNSAFE_TO_ABORT                      = 0x00000007,
    CIP_NEED_REBOOT                          = 0x00000008,
    CIP_NEED_REBOOT_UI_PERMISSION            = 0x00000009,
}

enum IID_ICodeInstall = GUID(0x79eac9d1, 0xbaf9, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface ICodeInstall : IWindowForBindingUI
{
    HRESULT OnCodeInstallProblem(uint, const(wchar)*, const(wchar)*, uint);
}
alias Uri_HOST_TYPE = int;
enum : int
{
    Uri_HOST_UNKNOWN = 0x00000000,
    Uri_HOST_DNS     = 0x00000001,
    Uri_HOST_IPV4    = 0x00000002,
    Uri_HOST_IPV6    = 0x00000003,
    Uri_HOST_IDN     = 0x00000004,
}

enum IID_IUriContainer = GUID(0xa158a630, 0xed6f, 0x45fb, [0xb9, 0x87, 0xf6, 0x86, 0x76, 0xf5, 0x77, 0x52]);
interface IUriContainer : IUnknown
{
    HRESULT GetIUri(IUri*);
}
enum IID_IUriBuilderFactory = GUID(0xe982ce48, 0xb96, 0x440c, [0xbc, 0x37, 0xc, 0x86, 0x9b, 0x27, 0xa2, 0x9e]);
interface IUriBuilderFactory : IUnknown
{
    HRESULT CreateIUriBuilder(uint, ulong, IUriBuilder*);
    HRESULT CreateInitializedIUriBuilder(uint, ulong, IUriBuilder*);
}
enum IID_IWinInetInfo = GUID(0x79eac9d6, 0xbafa, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IWinInetInfo : IUnknown
{
    HRESULT QueryOption(uint, void*, uint*);
}
enum IID_IHttpSecurity = GUID(0x79eac9d7, 0xbafa, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IHttpSecurity : IWindowForBindingUI
{
    HRESULT OnSecurityProblem(uint);
}
enum IID_IWinInetHttpInfo = GUID(0x79eac9d8, 0xbafa, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IWinInetHttpInfo : IWinInetInfo
{
    HRESULT QueryInfo(uint, void*, uint*, uint*, uint*);
}
enum IID_IWinInetHttpTimeouts = GUID(0xf286fa56, 0xc1fd, 0x4270, [0x8e, 0x67, 0xb3, 0xeb, 0x79, 0xa, 0x81, 0xe8]);
interface IWinInetHttpTimeouts : IUnknown
{
    HRESULT GetRequestTimeouts(uint*, uint*, uint*);
}
enum IID_IWinInetCacheHints = GUID(0xdd1ec3b3, 0x8391, 0x4fdb, [0xa9, 0xe6, 0x34, 0x7c, 0x3c, 0xaa, 0xa7, 0xdd]);
interface IWinInetCacheHints : IUnknown
{
    HRESULT SetCacheExtension(const(wchar)*, void*, uint*, uint*, uint*);
}
enum IID_IWinInetCacheHints2 = GUID(0x7857aeac, 0xd31f, 0x49bf, [0x88, 0x4e, 0xdd, 0x46, 0xdf, 0x36, 0x78, 0xa]);
interface IWinInetCacheHints2 : IWinInetCacheHints
{
    HRESULT SetCacheExtension2(const(wchar)*, PWSTR, uint*, uint*, uint*);
}
enum IID_IInternet = GUID(0x79eac9e0, 0xbaf9, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IInternet : IUnknown
{
}
alias BINDSTRING = int;
enum : int
{
    BINDSTRING_HEADERS               = 0x00000001,
    BINDSTRING_ACCEPT_MIMES          = 0x00000002,
    BINDSTRING_EXTRA_URL             = 0x00000003,
    BINDSTRING_LANGUAGE              = 0x00000004,
    BINDSTRING_USERNAME              = 0x00000005,
    BINDSTRING_PASSWORD              = 0x00000006,
    BINDSTRING_UA_PIXELS             = 0x00000007,
    BINDSTRING_UA_COLOR              = 0x00000008,
    BINDSTRING_OS                    = 0x00000009,
    BINDSTRING_USER_AGENT            = 0x0000000a,
    BINDSTRING_ACCEPT_ENCODINGS      = 0x0000000b,
    BINDSTRING_POST_COOKIE           = 0x0000000c,
    BINDSTRING_POST_DATA_MIME        = 0x0000000d,
    BINDSTRING_URL                   = 0x0000000e,
    BINDSTRING_IID                   = 0x0000000f,
    BINDSTRING_FLAG_BIND_TO_OBJECT   = 0x00000010,
    BINDSTRING_PTR_BIND_CONTEXT      = 0x00000011,
    BINDSTRING_XDR_ORIGIN            = 0x00000012,
    BINDSTRING_DOWNLOADPATH          = 0x00000013,
    BINDSTRING_ROOTDOC_URL           = 0x00000014,
    BINDSTRING_INITIAL_FILENAME      = 0x00000015,
    BINDSTRING_PROXY_USERNAME        = 0x00000016,
    BINDSTRING_PROXY_PASSWORD        = 0x00000017,
    BINDSTRING_ENTERPRISE_ID         = 0x00000018,
    BINDSTRING_DOC_URL               = 0x00000019,
    BINDSTRING_SAMESITE_COOKIE_LEVEL = 0x0000001a,
}

enum IID_IInternetBindInfo = GUID(0x79eac9e1, 0xbaf9, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IInternetBindInfo : IUnknown
{
    HRESULT GetBindInfo(uint*, BINDINFO*);
    HRESULT GetBindString(uint, PWSTR*, uint, uint*);
}
enum IID_IInternetBindInfoEx = GUID(0xa3e015b7, 0xa82c, 0x4dcd, [0xa1, 0x50, 0x56, 0x9a, 0xee, 0xed, 0x36, 0xab]);
interface IInternetBindInfoEx : IInternetBindInfo
{
    HRESULT GetBindInfoEx(uint*, BINDINFO*, uint*, uint*);
}
alias PI_FLAGS = int;
enum : int
{
    PI_PARSE_URL            = 0x00000001,
    PI_FILTER_MODE          = 0x00000002,
    PI_FORCE_ASYNC          = 0x00000004,
    PI_USE_WORKERTHREAD     = 0x00000008,
    PI_MIMEVERIFICATION     = 0x00000010,
    PI_CLSIDLOOKUP          = 0x00000020,
    PI_DATAPROGRESS         = 0x00000040,
    PI_SYNCHRONOUS          = 0x00000080,
    PI_APARTMENTTHREADED    = 0x00000100,
    PI_CLASSINSTALL         = 0x00000200,
    PI_PASSONBINDCTX        = 0x00002000,
    PI_NOMIMEHANDLER        = 0x00008000,
    PI_LOADAPPDIRECT        = 0x00004000,
    PD_FORCE_SWITCH         = 0x00010000,
    PI_PREFERDEFAULTHANDLER = 0x00020000,
}

struct PROTOCOLDATA
{
    uint grfFlags;
    uint dwState;
    void* pData;
    uint cbData;
}
struct StartParam
{
    GUID iid;
    IBindCtx pIBindCtx;
    IUnknown pItf;
}
enum IID_IInternetProtocolRoot = GUID(0x79eac9e3, 0xbaf9, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IInternetProtocolRoot : IUnknown
{
    HRESULT Start(const(wchar)*, IInternetProtocolSink, IInternetBindInfo, uint, HANDLE_PTR);
    HRESULT Continue(PROTOCOLDATA*);
    HRESULT Abort(HRESULT, uint);
    HRESULT Terminate(uint);
    HRESULT Suspend();
    HRESULT Resume();
}
enum IID_IInternetProtocol = GUID(0x79eac9e4, 0xbaf9, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IInternetProtocol : IInternetProtocolRoot
{
    HRESULT Read(void*, uint, uint*);
    HRESULT Seek(LARGE_INTEGER, uint, ULARGE_INTEGER*);
    HRESULT LockRequest(uint);
    HRESULT UnlockRequest();
}
enum IID_IInternetProtocolEx = GUID(0xc7a98e66, 0x1010, 0x492c, [0xa1, 0xc8, 0xc8, 0x9, 0xe1, 0xf7, 0x59, 0x5]);
interface IInternetProtocolEx : IInternetProtocol
{
    HRESULT StartEx(IUri, IInternetProtocolSink, IInternetBindInfo, uint, HANDLE_PTR);
}
enum IID_IInternetProtocolSink = GUID(0x79eac9e5, 0xbaf9, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IInternetProtocolSink : IUnknown
{
    HRESULT Switch(PROTOCOLDATA*);
    HRESULT ReportProgress(uint, const(wchar)*);
    HRESULT ReportData(uint, uint, uint);
    HRESULT ReportResult(HRESULT, uint, const(wchar)*);
}
enum IID_IInternetProtocolSinkStackable = GUID(0x79eac9f0, 0xbaf9, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IInternetProtocolSinkStackable : IUnknown
{
    HRESULT SwitchSink(IInternetProtocolSink);
    HRESULT CommitSwitch();
    HRESULT RollbackSwitch();
}
alias OIBDG_FLAGS = int;
enum : int
{
    OIBDG_APARTMENTTHREADED = 0x00000100,
    OIBDG_DATAONLY          = 0x00001000,
}

enum IID_IInternetSession = GUID(0x79eac9e7, 0xbaf9, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IInternetSession : IUnknown
{
    HRESULT RegisterNameSpace(IClassFactory, const(GUID)*, const(wchar)*, uint, const(wchar)**, uint);
    HRESULT UnregisterNameSpace(IClassFactory, const(wchar)*);
    HRESULT RegisterMimeFilter(IClassFactory, const(GUID)*, const(wchar)*);
    HRESULT UnregisterMimeFilter(IClassFactory, const(wchar)*);
    HRESULT CreateBinding(IBindCtx, const(wchar)*, IUnknown, IUnknown*, IInternetProtocol*, uint);
    HRESULT SetSessionOption(uint, void*, uint, uint);
    HRESULT GetSessionOption(uint, void*, uint*, uint);
}
enum IID_IInternetThreadSwitch = GUID(0x79eac9e8, 0xbaf9, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IInternetThreadSwitch : IUnknown
{
    HRESULT Prepare();
    HRESULT Continue();
}
enum IID_IInternetPriority = GUID(0x79eac9eb, 0xbaf9, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IInternetPriority : IUnknown
{
    HRESULT SetPriority(int);
    HRESULT GetPriority(int*);
}
alias PARSEACTION = int;
enum : int
{
    PARSE_CANONICALIZE       = 0x00000001,
    PARSE_FRIENDLY           = 0x00000002,
    PARSE_SECURITY_URL       = 0x00000003,
    PARSE_ROOTDOCUMENT       = 0x00000004,
    PARSE_DOCUMENT           = 0x00000005,
    PARSE_ANCHOR             = 0x00000006,
    PARSE_ENCODE_IS_UNESCAPE = 0x00000007,
    PARSE_DECODE_IS_ESCAPE   = 0x00000008,
    PARSE_PATH_FROM_URL      = 0x00000009,
    PARSE_URL_FROM_PATH      = 0x0000000a,
    PARSE_MIME               = 0x0000000b,
    PARSE_SERVER             = 0x0000000c,
    PARSE_SCHEMA             = 0x0000000d,
    PARSE_SITE               = 0x0000000e,
    PARSE_DOMAIN             = 0x0000000f,
    PARSE_LOCATION           = 0x00000010,
    PARSE_SECURITY_DOMAIN    = 0x00000011,
    PARSE_ESCAPE             = 0x00000012,
    PARSE_UNESCAPE           = 0x00000013,
}

alias PSUACTION = int;
enum : int
{
    PSU_DEFAULT           = 0x00000001,
    PSU_SECURITY_URL_ONLY = 0x00000002,
}

alias QUERYOPTION = int;
enum : int
{
    QUERY_EXPIRATION_DATE              = 0x00000001,
    QUERY_TIME_OF_LAST_CHANGE          = 0x00000002,
    QUERY_CONTENT_ENCODING             = 0x00000003,
    QUERY_CONTENT_TYPE                 = 0x00000004,
    QUERY_REFRESH                      = 0x00000005,
    QUERY_RECOMBINE                    = 0x00000006,
    QUERY_CAN_NAVIGATE                 = 0x00000007,
    QUERY_USES_NETWORK                 = 0x00000008,
    QUERY_IS_CACHED                    = 0x00000009,
    QUERY_IS_INSTALLEDENTRY            = 0x0000000a,
    QUERY_IS_CACHED_OR_MAPPED          = 0x0000000b,
    QUERY_USES_CACHE                   = 0x0000000c,
    QUERY_IS_SECURE                    = 0x0000000d,
    QUERY_IS_SAFE                      = 0x0000000e,
    QUERY_USES_HISTORYFOLDER           = 0x0000000f,
    QUERY_IS_CACHED_AND_USABLE_OFFLINE = 0x00000010,
}

enum IID_IInternetProtocolInfo = GUID(0x79eac9ec, 0xbaf9, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IInternetProtocolInfo : IUnknown
{
    HRESULT ParseUrl(const(wchar)*, PARSEACTION, uint, PWSTR, uint, uint*, uint);
    HRESULT CombineUrl(const(wchar)*, const(wchar)*, uint, PWSTR, uint, uint*, uint);
    HRESULT CompareUrl(const(wchar)*, const(wchar)*, uint);
    HRESULT QueryInfo(const(wchar)*, QUERYOPTION, uint, void*, uint, uint*, uint);
}
alias INTERNETFEATURELIST = int;
enum : int
{
    FEATURE_OBJECT_CACHING                 = 0x00000000,
    FEATURE_ZONE_ELEVATION                 = 0x00000001,
    FEATURE_MIME_HANDLING                  = 0x00000002,
    FEATURE_MIME_SNIFFING                  = 0x00000003,
    FEATURE_WINDOW_RESTRICTIONS            = 0x00000004,
    FEATURE_WEBOC_POPUPMANAGEMENT          = 0x00000005,
    FEATURE_BEHAVIORS                      = 0x00000006,
    FEATURE_DISABLE_MK_PROTOCOL            = 0x00000007,
    FEATURE_LOCALMACHINE_LOCKDOWN          = 0x00000008,
    FEATURE_SECURITYBAND                   = 0x00000009,
    FEATURE_RESTRICT_ACTIVEXINSTALL        = 0x0000000a,
    FEATURE_VALIDATE_NAVIGATE_URL          = 0x0000000b,
    FEATURE_RESTRICT_FILEDOWNLOAD          = 0x0000000c,
    FEATURE_ADDON_MANAGEMENT               = 0x0000000d,
    FEATURE_PROTOCOL_LOCKDOWN              = 0x0000000e,
    FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 0x0000000f,
    FEATURE_SAFE_BINDTOOBJECT              = 0x00000010,
    FEATURE_UNC_SAVEDFILECHECK             = 0x00000011,
    FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 0x00000012,
    FEATURE_TABBED_BROWSING                = 0x00000013,
    FEATURE_SSLUX                          = 0x00000014,
    FEATURE_DISABLE_NAVIGATION_SOUNDS      = 0x00000015,
    FEATURE_DISABLE_LEGACY_COMPRESSION     = 0x00000016,
    FEATURE_FORCE_ADDR_AND_STATUS          = 0x00000017,
    FEATURE_XMLHTTP                        = 0x00000018,
    FEATURE_DISABLE_TELNET_PROTOCOL        = 0x00000019,
    FEATURE_FEEDS                          = 0x0000001a,
    FEATURE_BLOCK_INPUT_PROMPTS            = 0x0000001b,
    FEATURE_ENTRY_COUNT                    = 0x0000001c,
}

enum IID_IInternetSecurityMgrSite = GUID(0x79eac9ed, 0xbaf9, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IInternetSecurityMgrSite : IUnknown
{
    HRESULT GetWindow(HWND*);
    HRESULT EnableModeless(BOOL);
}
alias PUAF = int;
enum : int
{
    PUAF_DEFAULT                      = 0x00000000,
    PUAF_NOUI                         = 0x00000001,
    PUAF_ISFILE                       = 0x00000002,
    PUAF_WARN_IF_DENIED               = 0x00000004,
    PUAF_FORCEUI_FOREGROUND           = 0x00000008,
    PUAF_CHECK_TIFS                   = 0x00000010,
    PUAF_DONTCHECKBOXINDIALOG         = 0x00000020,
    PUAF_TRUSTED                      = 0x00000040,
    PUAF_ACCEPT_WILDCARD_SCHEME       = 0x00000080,
    PUAF_ENFORCERESTRICTED            = 0x00000100,
    PUAF_NOSAVEDFILECHECK             = 0x00000200,
    PUAF_REQUIRESAVEDFILECHECK        = 0x00000400,
    PUAF_DONT_USE_CACHE               = 0x00001000,
    PUAF_RESERVED1                    = 0x00002000,
    PUAF_RESERVED2                    = 0x00004000,
    PUAF_LMZ_UNLOCKED                 = 0x00010000,
    PUAF_LMZ_LOCKED                   = 0x00020000,
    PUAF_DEFAULTZONEPOL               = 0x00040000,
    PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 0x00080000,
    PUAF_NOUIIFLOCKED                 = 0x00100000,
    PUAF_DRAGPROTOCOLCHECK            = 0x00200000,
}

alias PUAFOUT = int;
enum : int
{
    PUAFOUT_DEFAULT          = 0x00000000,
    PUAFOUT_ISLOCKZONEPOLICY = 0x00000001,
}

alias SZM_FLAGS = int;
enum : int
{
    SZM_CREATE = 0x00000000,
    SZM_DELETE = 0x00000001,
}

enum IID_IInternetSecurityManager = GUID(0x79eac9ee, 0xbaf9, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IInternetSecurityManager : IUnknown
{
    HRESULT SetSecuritySite(IInternetSecurityMgrSite);
    HRESULT GetSecuritySite(IInternetSecurityMgrSite*);
    HRESULT MapUrlToZone(const(wchar)*, uint*, uint);
    HRESULT GetSecurityId(const(wchar)*, ubyte*, uint*, ulong);
    HRESULT ProcessUrlAction(const(wchar)*, uint, ubyte*, uint, ubyte*, uint, uint, uint);
    HRESULT QueryCustomPolicy(const(wchar)*, const(GUID)*, ubyte**, uint*, ubyte*, uint, uint);
    HRESULT SetZoneMapping(uint, const(wchar)*, uint);
    HRESULT GetZoneMappings(uint, IEnumString*, uint);
}
enum IID_IInternetSecurityManagerEx = GUID(0xf164edf1, 0xcc7c, 0x4f0d, [0x9a, 0x94, 0x34, 0x22, 0x26, 0x25, 0xc3, 0x93]);
interface IInternetSecurityManagerEx : IInternetSecurityManager
{
    HRESULT ProcessUrlActionEx(const(wchar)*, uint, ubyte*, uint, ubyte*, uint, uint, uint, uint*);
}
enum IID_IInternetSecurityManagerEx2 = GUID(0xf1e50292, 0xa795, 0x4117, [0x8e, 0x9, 0x2b, 0x56, 0xa, 0x72, 0xac, 0x60]);
interface IInternetSecurityManagerEx2 : IInternetSecurityManagerEx
{
    HRESULT MapUrlToZoneEx2(IUri, uint*, uint, PWSTR*, uint*);
    HRESULT ProcessUrlActionEx2(IUri, uint, ubyte*, uint, ubyte*, uint, uint, ulong, uint*);
    HRESULT GetSecurityIdEx2(IUri, ubyte*, uint*, ulong);
    HRESULT QueryCustomPolicyEx2(IUri, const(GUID)*, ubyte**, uint*, ubyte*, uint, ulong);
}
enum IID_IZoneIdentifier = GUID(0xcd45f185, 0x1b21, 0x48e2, [0x96, 0x7b, 0xea, 0xd7, 0x43, 0xa8, 0x91, 0x4e]);
interface IZoneIdentifier : IUnknown
{
    HRESULT GetId(uint*);
    HRESULT SetId(uint);
    HRESULT Remove();
}
enum IID_IZoneIdentifier2 = GUID(0xeb5e760c, 0x9ef, 0x45c0, [0xb5, 0x10, 0x70, 0x83, 0xc, 0xe3, 0x1e, 0x6a]);
interface IZoneIdentifier2 : IZoneIdentifier
{
    HRESULT GetLastWriterPackageFamilyName(PWSTR*);
    HRESULT SetLastWriterPackageFamilyName(const(wchar)*);
    HRESULT RemoveLastWriterPackageFamilyName();
    HRESULT GetAppZoneId(uint*);
    HRESULT SetAppZoneId(uint);
    HRESULT RemoveAppZoneId();
}
enum IID_IInternetHostSecurityManager = GUID(0x3af280b6, 0xcb3f, 0x11d0, [0x89, 0x1e, 0x0, 0xc0, 0x4f, 0xb6, 0xbf, 0xc4]);
interface IInternetHostSecurityManager : IUnknown
{
    HRESULT GetSecurityId(ubyte*, uint*, ulong);
    HRESULT ProcessUrlAction(uint, ubyte*, uint, ubyte*, uint, uint, uint);
    HRESULT QueryCustomPolicy(const(GUID)*, ubyte**, uint*, ubyte*, uint, uint);
}
alias URLZONE = int;
enum : int
{
    URLZONE_INVALID        = 0xffffffff,
    URLZONE_PREDEFINED_MIN = 0x00000000,
    URLZONE_LOCAL_MACHINE  = 0x00000000,
    URLZONE_INTRANET       = 0x00000001,
    URLZONE_TRUSTED        = 0x00000002,
    URLZONE_INTERNET       = 0x00000003,
    URLZONE_UNTRUSTED      = 0x00000004,
    URLZONE_PREDEFINED_MAX = 0x000003e7,
    URLZONE_USER_MIN       = 0x000003e8,
    URLZONE_USER_MAX       = 0x00002710,
}

alias URLTEMPLATE = int;
enum : int
{
    URLTEMPLATE_CUSTOM         = 0x00000000,
    URLTEMPLATE_PREDEFINED_MIN = 0x00010000,
    URLTEMPLATE_LOW            = 0x00010000,
    URLTEMPLATE_MEDLOW         = 0x00010500,
    URLTEMPLATE_MEDIUM         = 0x00011000,
    URLTEMPLATE_MEDHIGH        = 0x00011500,
    URLTEMPLATE_HIGH           = 0x00012000,
    URLTEMPLATE_PREDEFINED_MAX = 0x00020000,
}

alias INET_ZONE_MANAGER_CONSTANTS = int;
enum : int
{
    MAX_ZONE_PATH        = 0x00000104,
    MAX_ZONE_DESCRIPTION = 0x000000c8,
}

alias ZAFLAGS = int;
enum : int
{
    ZAFLAGS_CUSTOM_EDIT              = 0x00000001,
    ZAFLAGS_ADD_SITES                = 0x00000002,
    ZAFLAGS_REQUIRE_VERIFICATION     = 0x00000004,
    ZAFLAGS_INCLUDE_PROXY_OVERRIDE   = 0x00000008,
    ZAFLAGS_INCLUDE_INTRANET_SITES   = 0x00000010,
    ZAFLAGS_NO_UI                    = 0x00000020,
    ZAFLAGS_SUPPORTS_VERIFICATION    = 0x00000040,
    ZAFLAGS_UNC_AS_INTRANET          = 0x00000080,
    ZAFLAGS_DETECT_INTRANET          = 0x00000100,
    ZAFLAGS_USE_LOCKED_ZONES         = 0x00010000,
    ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 0x00020000,
    ZAFLAGS_NO_CACHE                 = 0x00040000,
}

struct ZONEATTRIBUTES
{
    uint cbSize;
    wchar[260] szDisplayName;
    wchar[200] szDescription;
    wchar[260] szIconPath;
    uint dwTemplateMinLevel;
    uint dwTemplateRecommended;
    uint dwTemplateCurrentLevel;
    uint dwFlags;
}
alias URLZONEREG = int;
enum : int
{
    URLZONEREG_DEFAULT = 0x00000000,
    URLZONEREG_HKLM    = 0x00000001,
    URLZONEREG_HKCU    = 0x00000002,
}

enum IID_IInternetZoneManager = GUID(0x79eac9ef, 0xbaf9, 0x11ce, [0x8c, 0x82, 0x0, 0xaa, 0x0, 0x4b, 0xa9, 0xb]);
interface IInternetZoneManager : IUnknown
{
    HRESULT GetZoneAttributes(uint, ZONEATTRIBUTES*);
    HRESULT SetZoneAttributes(uint, ZONEATTRIBUTES*);
    HRESULT GetZoneCustomPolicy(uint, const(GUID)*, ubyte**, uint*, URLZONEREG);
    HRESULT SetZoneCustomPolicy(uint, const(GUID)*, ubyte*, uint, URLZONEREG);
    HRESULT GetZoneActionPolicy(uint, uint, ubyte*, uint, URLZONEREG);
    HRESULT SetZoneActionPolicy(uint, uint, ubyte*, uint, URLZONEREG);
    HRESULT PromptAction(uint, HWND, const(wchar)*, const(wchar)*, uint);
    HRESULT LogAction(uint, const(wchar)*, const(wchar)*, uint);
    HRESULT CreateZoneEnumerator(uint*, uint*, uint);
    HRESULT GetZoneAt(uint, uint, uint*);
    HRESULT DestroyZoneEnumerator(uint);
    HRESULT CopyTemplatePoliciesToZone(uint, uint, uint);
}
enum IID_IInternetZoneManagerEx = GUID(0xa4c23339, 0x8e06, 0x431e, [0x9b, 0xf4, 0x7e, 0x71, 0x1c, 0x8, 0x56, 0x48]);
interface IInternetZoneManagerEx : IInternetZoneManager
{
    HRESULT GetZoneActionPolicyEx(uint, uint, ubyte*, uint, URLZONEREG, uint);
    HRESULT SetZoneActionPolicyEx(uint, uint, ubyte*, uint, URLZONEREG, uint);
}
enum IID_IInternetZoneManagerEx2 = GUID(0xedc17559, 0xdd5d, 0x4846, [0x8e, 0xef, 0x8b, 0xec, 0xba, 0x5a, 0x4a, 0xbf]);
interface IInternetZoneManagerEx2 : IInternetZoneManagerEx
{
    HRESULT GetZoneAttributesEx(uint, ZONEATTRIBUTES*, uint);
    HRESULT GetZoneSecurityState(uint, BOOL, uint*, BOOL*);
    HRESULT GetIESecurityState(BOOL, uint*, BOOL*, BOOL);
    HRESULT FixUnsecureSettings();
}
struct CODEBASEHOLD
{
    uint cbSize;
    PWSTR szDistUnit;
    PWSTR szCodeBase;
    uint dwVersionMS;
    uint dwVersionLS;
    uint dwStyle;
}
struct SOFTDISTINFO
{
    uint cbSize;
    uint dwFlags;
    uint dwAdState;
    PWSTR szTitle;
    PWSTR szAbstract;
    PWSTR szHREF;
    uint dwInstalledVersionMS;
    uint dwInstalledVersionLS;
    uint dwUpdateVersionMS;
    uint dwUpdateVersionLS;
    uint dwAdvertisedVersionMS;
    uint dwAdvertisedVersionLS;
    uint dwReserved;
}
enum IID_ISoftDistExt = GUID(0xb15b8dc1, 0xc7e1, 0x11d0, [0x86, 0x80, 0x0, 0xaa, 0x0, 0xbd, 0xcb, 0x71]);
interface ISoftDistExt : IUnknown
{
    HRESULT ProcessSoftDist(const(wchar)*, IXMLElement, SOFTDISTINFO*);
    HRESULT GetFirstCodeBase(PWSTR*, uint*);
    HRESULT GetNextCodeBase(PWSTR*, uint*);
    HRESULT AsyncInstallDistributionUnit(IBindCtx, void*, uint, CODEBASEHOLD*);
}
enum IID_ICatalogFileInfo = GUID(0x711c7600, 0x6b48, 0x11d1, [0xb4, 0x3, 0x0, 0xaa, 0x0, 0xb9, 0x2a, 0xf1]);
interface ICatalogFileInfo : IUnknown
{
    HRESULT GetCatalogFile(PSTR*);
    HRESULT GetJavaTrust(void**);
}
enum IID_IDataFilter = GUID(0x69d14c80, 0xc18e, 0x11d0, [0xa9, 0xce, 0x0, 0x60, 0x97, 0x94, 0x23, 0x11]);
interface IDataFilter : IUnknown
{
    HRESULT DoEncode(uint, int, ubyte*, int, ubyte*, int, int*, int*, uint);
    HRESULT DoDecode(uint, int, ubyte*, int, ubyte*, int, int*, int*, uint);
    HRESULT SetEncodingLevel(uint);
}
struct PROTOCOLFILTERDATA
{
    uint cbSize;
    IInternetProtocolSink pProtocolSink;
    IInternetProtocol pProtocol;
    IUnknown pUnk;
    uint dwFilterFlags;
}
struct DATAINFO
{
    uint ulTotalSize;
    uint ulavrPacketSize;
    uint ulConnectSpeed;
    uint ulProcessorSpeed;
}
enum IID_IEncodingFilterFactory = GUID(0x70bdde00, 0xc18e, 0x11d0, [0xa9, 0xce, 0x0, 0x60, 0x97, 0x94, 0x23, 0x11]);
interface IEncodingFilterFactory : IUnknown
{
    HRESULT FindBestFilter(const(wchar)*, const(wchar)*, DATAINFO, IDataFilter*);
    HRESULT GetDefaultFilter(const(wchar)*, const(wchar)*, IDataFilter*);
}
struct HIT_LOGGING_INFO
{
    uint dwStructSize;
    PSTR lpszLoggedUrlName;
    SYSTEMTIME StartTime;
    SYSTEMTIME EndTime;
    PSTR lpszExtendedInfo;
}
struct CONFIRMSAFETY
{
    GUID clsid;
    IUnknown pUnk;
    uint dwFlags;
}
enum IID_IWrappedProtocol = GUID(0x53c84785, 0x8425, 0x4dc5, [0x97, 0x1b, 0xe5, 0x8d, 0x9c, 0x19, 0xf9, 0xb6]);
interface IWrappedProtocol : IUnknown
{
    HRESULT GetWrapperCode(int*, ulong);
}
alias BINDHANDLETYPES = int;
enum : int
{
    BINDHANDLETYPES_APPCACHE   = 0x00000000,
    BINDHANDLETYPES_DEPENDENCY = 0x00000001,
    BINDHANDLETYPES_COUNT      = 0x00000002,
}

enum IID_IGetBindHandle = GUID(0xaf0ff408, 0x129d, 0x4b20, [0x91, 0xf0, 0x2, 0xbd, 0x23, 0xd8, 0x83, 0x52]);
interface IGetBindHandle : IUnknown
{
    HRESULT GetBindHandle(BINDHANDLETYPES, HANDLE*);
}
struct PROTOCOL_ARGUMENT
{
    const(wchar)* szMethod;
    const(wchar)* szTargetUrl;
}
enum IID_IBindCallbackRedirect = GUID(0x11c81bc2, 0x121e, 0x4ed5, [0xb9, 0xc4, 0xb4, 0x30, 0xbd, 0x54, 0xf2, 0xc0]);
interface IBindCallbackRedirect : IUnknown
{
    HRESULT Redirect(const(wchar)*, short*);
}
enum IID_IBindHttpSecurity = GUID(0xa9eda967, 0xf50e, 0x4a33, [0xb3, 0x58, 0x20, 0x6f, 0x6e, 0xf3, 0x8, 0x6d]);
interface IBindHttpSecurity : IUnknown
{
    HRESULT GetIgnoreCertMask(uint*);
}
