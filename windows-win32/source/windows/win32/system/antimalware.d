module windows.win32.system.antimalware;

import windows.win32.guid : GUID;
import windows.win32.foundation : BOOL, HANDLE, HRESULT, PWSTR;
import windows.win32.system.com : IUnknown;

version (Windows):
extern (Windows):

alias AMSI_RESULT = int;
enum : int
{
    AMSI_RESULT_CLEAN                  = 0x00000000,
    AMSI_RESULT_NOT_DETECTED           = 0x00000001,
    AMSI_RESULT_BLOCKED_BY_ADMIN_START = 0x00004000,
    AMSI_RESULT_BLOCKED_BY_ADMIN_END   = 0x00004fff,
    AMSI_RESULT_DETECTED               = 0x00008000,
}

alias AMSI_ATTRIBUTE = int;
enum : int
{
    AMSI_ATTRIBUTE_APP_NAME               = 0x00000000,
    AMSI_ATTRIBUTE_CONTENT_NAME           = 0x00000001,
    AMSI_ATTRIBUTE_CONTENT_SIZE           = 0x00000002,
    AMSI_ATTRIBUTE_CONTENT_ADDRESS        = 0x00000003,
    AMSI_ATTRIBUTE_SESSION                = 0x00000004,
    AMSI_ATTRIBUTE_REDIRECT_CHAIN_SIZE    = 0x00000005,
    AMSI_ATTRIBUTE_REDIRECT_CHAIN_ADDRESS = 0x00000006,
    AMSI_ATTRIBUTE_ALL_SIZE               = 0x00000007,
    AMSI_ATTRIBUTE_ALL_ADDRESS            = 0x00000008,
    AMSI_ATTRIBUTE_QUIET                  = 0x00000009,
}

alias AMSI_UAC_REQUEST_TYPE = int;
enum : int
{
    AMSI_UAC_REQUEST_TYPE_EXE          = 0x00000000,
    AMSI_UAC_REQUEST_TYPE_COM          = 0x00000001,
    AMSI_UAC_REQUEST_TYPE_MSI          = 0x00000002,
    AMSI_UAC_REQUEST_TYPE_AX           = 0x00000003,
    AMSI_UAC_REQUEST_TYPE_PACKAGED_APP = 0x00000004,
    AMSI_UAC_REQUEST_TYPE_MAX          = 0x00000005,
}

alias AMSI_UAC_TRUST_STATE = int;
enum : int
{
    AMSI_UAC_TRUST_STATE_TRUSTED   = 0x00000000,
    AMSI_UAC_TRUST_STATE_UNTRUSTED = 0x00000001,
    AMSI_UAC_TRUST_STATE_BLOCKED   = 0x00000002,
    AMSI_UAC_TRUST_STATE_MAX       = 0x00000003,
}

alias AMSI_UAC_MSI_ACTION = int;
enum : int
{
    AMSI_UAC_MSI_ACTION_INSTALL     = 0x00000000,
    AMSI_UAC_MSI_ACTION_UNINSTALL   = 0x00000001,
    AMSI_UAC_MSI_ACTION_UPDATE      = 0x00000002,
    AMSI_UAC_MSI_ACTION_MAINTENANCE = 0x00000003,
    AMSI_UAC_MSI_ACTION_MAX         = 0x00000004,
}

struct AMSI_UAC_REQUEST_EXE_INFO
{
    uint ulLength;
    PWSTR lpwszApplicationName;
    PWSTR lpwszCommandLine;
    PWSTR lpwszDLLParameter;
}
struct AMSI_UAC_REQUEST_COM_INFO
{
    uint ulLength;
    PWSTR lpwszServerBinary;
    PWSTR lpwszRequestor;
    GUID Clsid;
}
struct AMSI_UAC_REQUEST_MSI_INFO
{
    uint ulLength;
    AMSI_UAC_MSI_ACTION MsiAction;
    PWSTR lpwszProductName;
    PWSTR lpwszVersion;
    PWSTR lpwszLanguage;
    PWSTR lpwszManufacturer;
    PWSTR lpwszPackagePath;
    PWSTR lpwszPackageSource;
    uint ulUpdates;
    PWSTR* ppwszUpdates;
    PWSTR* ppwszUpdateSources;
}
struct AMSI_UAC_REQUEST_AX_INFO
{
    uint ulLength;
    PWSTR lpwszLocalInstallPath;
    PWSTR lpwszSourceURL;
}
struct AMSI_UAC_REQUEST_PACKAGED_APP_INFO
{
    uint ulLength;
    PWSTR lpwszApplicationName;
    PWSTR lpwszCommandLine;
    PWSTR lpPackageFamilyName;
    PWSTR lpApplicationId;
}
struct AMSI_UAC_REQUEST_CONTEXT
{
    uint ulLength;
    uint ulRequestorProcessId;
    AMSI_UAC_TRUST_STATE UACTrustState;
    AMSI_UAC_REQUEST_TYPE Type;
    union RequestType
    {
        AMSI_UAC_REQUEST_EXE_INFO ExeInfo;
        AMSI_UAC_REQUEST_COM_INFO ComInfo;
        AMSI_UAC_REQUEST_MSI_INFO MsiInfo;
        AMSI_UAC_REQUEST_AX_INFO ActiveXInfo;
        AMSI_UAC_REQUEST_PACKAGED_APP_INFO PackagedAppInfo;
    }
    BOOL bAutoElevateRequest;
}
enum IID_IAmsiStream = GUID(0x3e47f2e5, 0x81d4, 0x4d3b, [0x89, 0x7f, 0x54, 0x50, 0x96, 0x77, 0x3, 0x73]);
interface IAmsiStream : IUnknown
{
    HRESULT GetAttribute(AMSI_ATTRIBUTE, uint, ubyte*, uint*);
    HRESULT Read(ulong, uint, ubyte*, uint*);
}
enum IID_IAntimalwareProvider = GUID(0xb2cabfe3, 0xfe04, 0x42b1, [0xa5, 0xdf, 0x8, 0xd4, 0x83, 0xd4, 0xd1, 0x25]);
interface IAntimalwareProvider : IUnknown
{
    HRESULT Scan(IAmsiStream, AMSI_RESULT*);
    void CloseSession(ulong);
    HRESULT DisplayName(PWSTR*);
}
enum IID_IAntimalwareUacProvider = GUID(0xb2cabfe4, 0xfe04, 0x42b1, [0xa5, 0xdf, 0x8, 0xd4, 0x83, 0xd4, 0xd1, 0x25]);
interface IAntimalwareUacProvider : IUnknown
{
    HRESULT UacScan(AMSI_UAC_REQUEST_CONTEXT*, AMSI_RESULT*);
    HRESULT DisplayName(PWSTR*);
}
enum IID_IAntimalwareProvider2 = GUID(0x7c1e6570, 0x3f73, 0x4e0f, [0x8a, 0xd4, 0x98, 0xb9, 0x4c, 0xd3, 0x29, 0xf]);
interface IAntimalwareProvider2 : IAntimalwareProvider
{
    HRESULT Notify(void*, uint, const(wchar)*, const(wchar)*, AMSI_RESULT*);
}
enum IID_IAntimalware = GUID(0x82d29c2e, 0xf062, 0x44e6, [0xb5, 0xc9, 0x3d, 0x9a, 0x2f, 0x24, 0xa2, 0xdf]);
interface IAntimalware : IUnknown
{
    HRESULT Scan(IAmsiStream, AMSI_RESULT*, IAntimalwareProvider*);
    void CloseSession(ulong);
}
enum IID_IAntimalware2 = GUID(0x301035b5, 0x2d42, 0x4f56, [0x8c, 0x65, 0x2d, 0xca, 0xa7, 0xfb, 0x3c, 0xdc]);
interface IAntimalware2 : IAntimalware
{
    HRESULT Notify(void*, uint, const(wchar)*, const(wchar)*, AMSI_RESULT*);
}
enum CLSID_CAntimalware = GUID(0xfdb00e52, 0xa214, 0x4aa1, [0x8f, 0xba, 0x43, 0x57, 0xbb, 0x0, 0x72, 0xec]);
struct CAntimalware
{
}
HRESULT AmsiInitialize(const(wchar)*, HAMSICONTEXT*);
void AmsiUninitialize(HAMSICONTEXT);
HRESULT AmsiOpenSession(HAMSICONTEXT, HAMSISESSION*);
void AmsiCloseSession(HAMSICONTEXT, HAMSISESSION);
HRESULT AmsiScanBuffer(HAMSICONTEXT, void*, uint, const(wchar)*, HAMSISESSION, AMSI_RESULT*);
HRESULT AmsiNotifyOperation(HAMSICONTEXT, void*, uint, const(wchar)*, AMSI_RESULT*);
HRESULT AmsiScanString(HAMSICONTEXT, const(wchar)*, const(wchar)*, HAMSISESSION, AMSI_RESULT*);
BOOL InstallELAMCertificateInfo(HANDLE);
alias HAMSICONTEXT = void*;
alias HAMSISESSION = void*;
