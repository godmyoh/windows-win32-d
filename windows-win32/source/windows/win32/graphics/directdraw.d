module windows.win32.graphics.directdraw;

import windows.win32.guid : GUID;
import windows.win32.foundation : BOOL, CHAR, HANDLE, HINSTANCE, HRESULT, HWND, PSTR, PWSTR, RECT, RECTL, SIZE;
import windows.win32.graphics.gdi : HDC, HMONITOR, HPALETTE, PALETTEENTRY, RGNDATA;
import windows.win32.system.com : IUnknown;

version (Windows):
extern (Windows):

HRESULT DirectDrawEnumerateW(LPDDENUMCALLBACKW, void*);
HRESULT DirectDrawEnumerateA(LPDDENUMCALLBACKA, void*);
HRESULT DirectDrawEnumerateExW(LPDDENUMCALLBACKEXW, void*, uint);
HRESULT DirectDrawEnumerateExA(LPDDENUMCALLBACKEXA, void*, uint);
HRESULT DirectDrawCreate(GUID*, IDirectDraw*, IUnknown);
HRESULT DirectDrawCreateEx(GUID*, void**, const(GUID)*, IUnknown);
HRESULT DirectDrawCreateClipper(uint, IDirectDrawClipper*, IUnknown);
enum DIRECTDRAW_VERSION = 0x00000700;
enum _FACDD = 0x00000876;
enum CLSID_DirectDraw = GUID(0xd7b70ee0, 0x4340, 0x11cf, [0xb0, 0x63, 0x0, 0x20, 0xaf, 0xc2, 0xcd, 0x35]);
enum CLSID_DirectDraw7 = GUID(0x3c305196, 0x50db, 0x11d3, [0x9c, 0xfe, 0x0, 0xc0, 0x4f, 0xd9, 0x30, 0xc5]);
enum CLSID_DirectDrawClipper = GUID(0x593817a0, 0x7db3, 0x11cf, [0xa2, 0xde, 0x0, 0xaa, 0x0, 0xb9, 0x33, 0x56]);
enum DDENUM_ATTACHEDSECONDARYDEVICES = 0x00000001;
enum DDENUM_DETACHEDSECONDARYDEVICES = 0x00000002;
enum DDENUM_NONDISPLAYDEVICES = 0x00000004;
enum REGSTR_KEY_DDHW_DESCRIPTION = "Description";
enum REGSTR_KEY_DDHW_DRIVERNAME = "DriverName";
enum REGSTR_PATH_DDHW = "Hardware\\DirectDrawDrivers";
enum DDCREATE_HARDWAREONLY = 0x00000001;
enum DDCREATE_EMULATIONONLY = 0x00000002;
enum MAX_DDDEVICEID_STRING = 0x00000200;
enum DDGDI_GETHOSTIDENTIFIER = 0x00000001;
enum DDSD_CAPS = 0x00000001;
enum DDSD_HEIGHT = 0x00000002;
enum DDSD_WIDTH = 0x00000004;
enum DDSD_PITCH = 0x00000008;
enum DDSD_BACKBUFFERCOUNT = 0x00000020;
enum DDSD_ZBUFFERBITDEPTH = 0x00000040;
enum DDSD_ALPHABITDEPTH = 0x00000080;
enum DDSD_LPSURFACE = 0x00000800;
enum DDSD_PIXELFORMAT = 0x00001000;
enum DDSD_CKDESTOVERLAY = 0x00002000;
enum DDSD_CKDESTBLT = 0x00004000;
enum DDSD_CKSRCOVERLAY = 0x00008000;
enum DDSD_CKSRCBLT = 0x00010000;
enum DDSD_MIPMAPCOUNT = 0x00020000;
enum DDSD_REFRESHRATE = 0x00040000;
enum DDSD_LINEARSIZE = 0x00080000;
enum DDSD_TEXTURESTAGE = 0x00100000;
enum DDSD_FVF = 0x00200000;
enum DDSD_SRCVBHANDLE = 0x00400000;
enum DDSD_DEPTH = 0x00800000;
enum DDSD_ALL = 0x00fff9ee;
enum DDOSD_GUID = 0x00000001;
enum DDOSD_COMPRESSION_RATIO = 0x00000002;
enum DDOSD_SCAPS = 0x00000004;
enum DDOSD_OSCAPS = 0x00000008;
enum DDOSD_ALL = 0x0000000f;
enum DDOSDCAPS_OPTCOMPRESSED = 0x00000001;
enum DDOSDCAPS_OPTREORDERED = 0x00000002;
enum DDOSDCAPS_MONOLITHICMIPMAP = 0x00000004;
enum DDOSDCAPS_VALIDSCAPS = 0x30004800;
enum DDOSDCAPS_VALIDOSCAPS = 0x00000007;
enum DDCOLOR_BRIGHTNESS = 0x00000001;
enum DDCOLOR_CONTRAST = 0x00000002;
enum DDCOLOR_HUE = 0x00000004;
enum DDCOLOR_SATURATION = 0x00000008;
enum DDCOLOR_SHARPNESS = 0x00000010;
enum DDCOLOR_GAMMA = 0x00000020;
enum DDCOLOR_COLORENABLE = 0x00000040;
enum DDSCAPS_RESERVED1 = 0x00000001;
enum DDSCAPS_ALPHA = 0x00000002;
enum DDSCAPS_BACKBUFFER = 0x00000004;
enum DDSCAPS_COMPLEX = 0x00000008;
enum DDSCAPS_FLIP = 0x00000010;
enum DDSCAPS_FRONTBUFFER = 0x00000020;
enum DDSCAPS_OFFSCREENPLAIN = 0x00000040;
enum DDSCAPS_OVERLAY = 0x00000080;
enum DDSCAPS_PALETTE = 0x00000100;
enum DDSCAPS_PRIMARYSURFACE = 0x00000200;
enum DDSCAPS_RESERVED3 = 0x00000400;
enum DDSCAPS_PRIMARYSURFACELEFT = 0x00000000;
enum DDSCAPS_SYSTEMMEMORY = 0x00000800;
enum DDSCAPS_TEXTURE = 0x00001000;
enum DDSCAPS_3DDEVICE = 0x00002000;
enum DDSCAPS_VIDEOMEMORY = 0x00004000;
enum DDSCAPS_VISIBLE = 0x00008000;
enum DDSCAPS_WRITEONLY = 0x00010000;
enum DDSCAPS_ZBUFFER = 0x00020000;
enum DDSCAPS_OWNDC = 0x00040000;
enum DDSCAPS_LIVEVIDEO = 0x00080000;
enum DDSCAPS_HWCODEC = 0x00100000;
enum DDSCAPS_MODEX = 0x00200000;
enum DDSCAPS_MIPMAP = 0x00400000;
enum DDSCAPS_RESERVED2 = 0x00800000;
enum DDSCAPS_ALLOCONLOAD = 0x04000000;
enum DDSCAPS_VIDEOPORT = 0x08000000;
enum DDSCAPS_LOCALVIDMEM = 0x10000000;
enum DDSCAPS_NONLOCALVIDMEM = 0x20000000;
enum DDSCAPS_STANDARDVGAMODE = 0x40000000;
enum DDSCAPS_OPTIMIZED = 0xffffffff80000000;
enum DDSCAPS2_RESERVED4 = 0x00000002;
enum DDSCAPS2_HARDWAREDEINTERLACE = 0x00000000;
enum DDSCAPS2_HINTDYNAMIC = 0x00000004;
enum DDSCAPS2_HINTSTATIC = 0x00000008;
enum DDSCAPS2_TEXTUREMANAGE = 0x00000010;
enum DDSCAPS2_RESERVED1 = 0x00000020;
enum DDSCAPS2_RESERVED2 = 0x00000040;
enum DDSCAPS2_OPAQUE = 0x00000080;
enum DDSCAPS2_HINTANTIALIASING = 0x00000100;
enum DDSCAPS2_CUBEMAP = 0x00000200;
enum DDSCAPS2_CUBEMAP_POSITIVEX = 0x00000400;
enum DDSCAPS2_CUBEMAP_NEGATIVEX = 0x00000800;
enum DDSCAPS2_CUBEMAP_POSITIVEY = 0x00001000;
enum DDSCAPS2_CUBEMAP_NEGATIVEY = 0x00002000;
enum DDSCAPS2_CUBEMAP_POSITIVEZ = 0x00004000;
enum DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x00008000;
enum DDSCAPS2_MIPMAPSUBLEVEL = 0x00010000;
enum DDSCAPS2_D3DTEXTUREMANAGE = 0x00020000;
enum DDSCAPS2_DONOTPERSIST = 0x00040000;
enum DDSCAPS2_STEREOSURFACELEFT = 0x00080000;
enum DDSCAPS2_VOLUME = 0x00200000;
enum DDSCAPS2_NOTUSERLOCKABLE = 0x00400000;
enum DDSCAPS2_POINTS = 0x00800000;
enum DDSCAPS2_RTPATCHES = 0x01000000;
enum DDSCAPS2_NPATCHES = 0x02000000;
enum DDSCAPS2_RESERVED3 = 0x04000000;
enum DDSCAPS2_DISCARDBACKBUFFER = 0x10000000;
enum DDSCAPS2_ENABLEALPHACHANNEL = 0x20000000;
enum DDSCAPS2_EXTENDEDFORMATPRIMARY = 0x40000000;
enum DDSCAPS2_ADDITIONALPRIMARY = 0xffffffff80000000;
enum DDSCAPS3_MULTISAMPLE_MASK = 0x0000001f;
enum DDSCAPS3_MULTISAMPLE_QUALITY_MASK = 0x000000e0;
enum DDSCAPS3_MULTISAMPLE_QUALITY_SHIFT = 0x00000005;
enum DDSCAPS3_RESERVED1 = 0x00000100;
enum DDSCAPS3_RESERVED2 = 0x00000200;
enum DDSCAPS3_LIGHTWEIGHTMIPMAP = 0x00000400;
enum DDSCAPS3_AUTOGENMIPMAP = 0x00000800;
enum DDSCAPS3_DMAP = 0x00001000;
enum DDSCAPS3_CREATESHAREDRESOURCE = 0x00002000;
enum DDSCAPS3_READONLYRESOURCE = 0x00004000;
enum DDSCAPS3_OPENSHAREDRESOURCE = 0x00008000;
enum DDCAPS_3D = 0x00000001;
enum DDCAPS_ALIGNBOUNDARYDEST = 0x00000002;
enum DDCAPS_ALIGNSIZEDEST = 0x00000004;
enum DDCAPS_ALIGNBOUNDARYSRC = 0x00000008;
enum DDCAPS_ALIGNSIZESRC = 0x00000010;
enum DDCAPS_ALIGNSTRIDE = 0x00000020;
enum DDCAPS_BLT = 0x00000040;
enum DDCAPS_BLTQUEUE = 0x00000080;
enum DDCAPS_BLTFOURCC = 0x00000100;
enum DDCAPS_BLTSTRETCH = 0x00000200;
enum DDCAPS_GDI = 0x00000400;
enum DDCAPS_OVERLAY = 0x00000800;
enum DDCAPS_OVERLAYCANTCLIP = 0x00001000;
enum DDCAPS_OVERLAYFOURCC = 0x00002000;
enum DDCAPS_OVERLAYSTRETCH = 0x00004000;
enum DDCAPS_PALETTE = 0x00008000;
enum DDCAPS_PALETTEVSYNC = 0x00010000;
enum DDCAPS_READSCANLINE = 0x00020000;
enum DDCAPS_RESERVED1 = 0x00040000;
enum DDCAPS_VBI = 0x00080000;
enum DDCAPS_ZBLTS = 0x00100000;
enum DDCAPS_ZOVERLAYS = 0x00200000;
enum DDCAPS_COLORKEY = 0x00400000;
enum DDCAPS_ALPHA = 0x00800000;
enum DDCAPS_COLORKEYHWASSIST = 0x01000000;
enum DDCAPS_NOHARDWARE = 0x02000000;
enum DDCAPS_BLTCOLORFILL = 0x04000000;
enum DDCAPS_BANKSWITCHED = 0x08000000;
enum DDCAPS_BLTDEPTHFILL = 0x10000000;
enum DDCAPS_CANCLIP = 0x20000000;
enum DDCAPS_CANCLIPSTRETCHED = 0x40000000;
enum DDCAPS_CANBLTSYSMEM = 0xffffffff80000000;
enum DDCAPS2_CERTIFIED = 0x00000001;
enum DDCAPS2_NO2DDURING3DSCENE = 0x00000002;
enum DDCAPS2_VIDEOPORT = 0x00000004;
enum DDCAPS2_AUTOFLIPOVERLAY = 0x00000008;
enum DDCAPS2_CANBOBINTERLEAVED = 0x00000010;
enum DDCAPS2_CANBOBNONINTERLEAVED = 0x00000020;
enum DDCAPS2_COLORCONTROLOVERLAY = 0x00000040;
enum DDCAPS2_COLORCONTROLPRIMARY = 0x00000080;
enum DDCAPS2_CANDROPZ16BIT = 0x00000100;
enum DDCAPS2_NONLOCALVIDMEM = 0x00000200;
enum DDCAPS2_NONLOCALVIDMEMCAPS = 0x00000400;
enum DDCAPS2_NOPAGELOCKREQUIRED = 0x00000800;
enum DDCAPS2_WIDESURFACES = 0x00001000;
enum DDCAPS2_CANFLIPODDEVEN = 0x00002000;
enum DDCAPS2_CANBOBHARDWARE = 0x00004000;
enum DDCAPS2_COPYFOURCC = 0x00008000;
enum DDCAPS2_PRIMARYGAMMA = 0x00020000;
enum DDCAPS2_CANRENDERWINDOWED = 0x00080000;
enum DDCAPS2_CANCALIBRATEGAMMA = 0x00100000;
enum DDCAPS2_FLIPINTERVAL = 0x00200000;
enum DDCAPS2_FLIPNOVSYNC = 0x00400000;
enum DDCAPS2_CANMANAGETEXTURE = 0x00800000;
enum DDCAPS2_TEXMANINNONLOCALVIDMEM = 0x01000000;
enum DDCAPS2_STEREO = 0x02000000;
enum DDCAPS2_SYSTONONLOCAL_AS_SYSTOLOCAL = 0x04000000;
enum DDCAPS2_RESERVED1 = 0x08000000;
enum DDCAPS2_CANMANAGERESOURCE = 0x10000000;
enum DDCAPS2_DYNAMICTEXTURES = 0x20000000;
enum DDCAPS2_CANAUTOGENMIPMAP = 0x40000000;
enum DDCAPS2_CANSHARERESOURCE = 0xffffffff80000000;
enum DDFXALPHACAPS_BLTALPHAEDGEBLEND = 0x00000001;
enum DDFXALPHACAPS_BLTALPHAPIXELS = 0x00000002;
enum DDFXALPHACAPS_BLTALPHAPIXELSNEG = 0x00000004;
enum DDFXALPHACAPS_BLTALPHASURFACES = 0x00000008;
enum DDFXALPHACAPS_BLTALPHASURFACESNEG = 0x00000010;
enum DDFXALPHACAPS_OVERLAYALPHAEDGEBLEND = 0x00000020;
enum DDFXALPHACAPS_OVERLAYALPHAPIXELS = 0x00000040;
enum DDFXALPHACAPS_OVERLAYALPHAPIXELSNEG = 0x00000080;
enum DDFXALPHACAPS_OVERLAYALPHASURFACES = 0x00000100;
enum DDFXALPHACAPS_OVERLAYALPHASURFACESNEG = 0x00000200;
enum DDFXCAPS_BLTARITHSTRETCHY = 0x00000020;
enum DDFXCAPS_BLTARITHSTRETCHYN = 0x00000010;
enum DDFXCAPS_BLTMIRRORLEFTRIGHT = 0x00000040;
enum DDFXCAPS_BLTMIRRORUPDOWN = 0x00000080;
enum DDFXCAPS_BLTROTATION = 0x00000100;
enum DDFXCAPS_BLTROTATION90 = 0x00000200;
enum DDFXCAPS_BLTSHRINKX = 0x00000400;
enum DDFXCAPS_BLTSHRINKXN = 0x00000800;
enum DDFXCAPS_BLTSHRINKY = 0x00001000;
enum DDFXCAPS_BLTSHRINKYN = 0x00002000;
enum DDFXCAPS_BLTSTRETCHX = 0x00004000;
enum DDFXCAPS_BLTSTRETCHXN = 0x00008000;
enum DDFXCAPS_BLTSTRETCHY = 0x00010000;
enum DDFXCAPS_BLTSTRETCHYN = 0x00020000;
enum DDFXCAPS_OVERLAYARITHSTRETCHY = 0x00040000;
enum DDFXCAPS_OVERLAYARITHSTRETCHYN = 0x00000008;
enum DDFXCAPS_OVERLAYSHRINKX = 0x00080000;
enum DDFXCAPS_OVERLAYSHRINKXN = 0x00100000;
enum DDFXCAPS_OVERLAYSHRINKY = 0x00200000;
enum DDFXCAPS_OVERLAYSHRINKYN = 0x00400000;
enum DDFXCAPS_OVERLAYSTRETCHX = 0x00800000;
enum DDFXCAPS_OVERLAYSTRETCHXN = 0x01000000;
enum DDFXCAPS_OVERLAYSTRETCHY = 0x02000000;
enum DDFXCAPS_OVERLAYSTRETCHYN = 0x04000000;
enum DDFXCAPS_OVERLAYMIRRORLEFTRIGHT = 0x08000000;
enum DDFXCAPS_OVERLAYMIRRORUPDOWN = 0x10000000;
enum DDFXCAPS_OVERLAYDEINTERLACE = 0x20000000;
enum DDFXCAPS_BLTALPHA = 0x00000001;
enum DDFXCAPS_BLTFILTER = 0x00000020;
enum DDFXCAPS_OVERLAYALPHA = 0x00000004;
enum DDFXCAPS_OVERLAYFILTER = 0x00040000;
enum DDSVCAPS_RESERVED1 = 0x00000001;
enum DDSVCAPS_RESERVED2 = 0x00000002;
enum DDSVCAPS_RESERVED3 = 0x00000004;
enum DDSVCAPS_RESERVED4 = 0x00000008;
enum DDSVCAPS_STEREOSEQUENTIAL = 0x00000010;
enum DDPCAPS_4BIT = 0x00000001;
enum DDPCAPS_8BITENTRIES = 0x00000002;
enum DDPCAPS_8BIT = 0x00000004;
enum DDPCAPS_INITIALIZE = 0x00000000;
enum DDPCAPS_PRIMARYSURFACE = 0x00000010;
enum DDPCAPS_PRIMARYSURFACELEFT = 0x00000020;
enum DDPCAPS_ALLOW256 = 0x00000040;
enum DDPCAPS_VSYNC = 0x00000080;
enum DDPCAPS_1BIT = 0x00000100;
enum DDPCAPS_2BIT = 0x00000200;
enum DDPCAPS_ALPHA = 0x00000400;
enum DDSPD_IUNKNOWNPOINTER = 0x00000001;
enum DDSPD_VOLATILE = 0x00000002;
enum DDBD_1 = 0x00004000;
enum DDBD_2 = 0x00002000;
enum DDBD_4 = 0x00001000;
enum DDBD_8 = 0x00000800;
enum DDBD_16 = 0x00000400;
enum DDBD_24 = 0x00000200;
enum DDBD_32 = 0x00000100;
enum DDCKEY_COLORSPACE = 0x00000001;
enum DDCKEY_DESTBLT = 0x00000002;
enum DDCKEY_DESTOVERLAY = 0x00000004;
enum DDCKEY_SRCBLT = 0x00000008;
enum DDCKEY_SRCOVERLAY = 0x00000010;
enum DDCKEYCAPS_DESTBLT = 0x00000001;
enum DDCKEYCAPS_DESTBLTCLRSPACE = 0x00000002;
enum DDCKEYCAPS_DESTBLTCLRSPACEYUV = 0x00000004;
enum DDCKEYCAPS_DESTBLTYUV = 0x00000008;
enum DDCKEYCAPS_DESTOVERLAY = 0x00000010;
enum DDCKEYCAPS_DESTOVERLAYCLRSPACE = 0x00000020;
enum DDCKEYCAPS_DESTOVERLAYCLRSPACEYUV = 0x00000040;
enum DDCKEYCAPS_DESTOVERLAYONEACTIVE = 0x00000080;
enum DDCKEYCAPS_DESTOVERLAYYUV = 0x00000100;
enum DDCKEYCAPS_SRCBLT = 0x00000200;
enum DDCKEYCAPS_SRCBLTCLRSPACE = 0x00000400;
enum DDCKEYCAPS_SRCBLTCLRSPACEYUV = 0x00000800;
enum DDCKEYCAPS_SRCBLTYUV = 0x00001000;
enum DDCKEYCAPS_SRCOVERLAY = 0x00002000;
enum DDCKEYCAPS_SRCOVERLAYCLRSPACE = 0x00004000;
enum DDCKEYCAPS_SRCOVERLAYCLRSPACEYUV = 0x00008000;
enum DDCKEYCAPS_SRCOVERLAYONEACTIVE = 0x00010000;
enum DDCKEYCAPS_SRCOVERLAYYUV = 0x00020000;
enum DDCKEYCAPS_NOCOSTOVERLAY = 0x00040000;
enum DDPF_ALPHAPIXELS = 0x00000001;
enum DDPF_ALPHA = 0x00000002;
enum DDPF_FOURCC = 0x00000004;
enum DDPF_PALETTEINDEXED4 = 0x00000008;
enum DDPF_PALETTEINDEXEDTO8 = 0x00000010;
enum DDPF_PALETTEINDEXED8 = 0x00000020;
enum DDPF_RGB = 0x00000040;
enum DDPF_COMPRESSED = 0x00000080;
enum DDPF_RGBTOYUV = 0x00000100;
enum DDPF_YUV = 0x00000200;
enum DDPF_ZBUFFER = 0x00000400;
enum DDPF_PALETTEINDEXED1 = 0x00000800;
enum DDPF_PALETTEINDEXED2 = 0x00001000;
enum DDPF_ZPIXELS = 0x00002000;
enum DDPF_STENCILBUFFER = 0x00004000;
enum DDPF_ALPHAPREMULT = 0x00008000;
enum DDPF_LUMINANCE = 0x00020000;
enum DDPF_BUMPLUMINANCE = 0x00040000;
enum DDPF_BUMPDUDV = 0x00080000;
enum DDENUMSURFACES_ALL = 0x00000001;
enum DDENUMSURFACES_MATCH = 0x00000002;
enum DDENUMSURFACES_NOMATCH = 0x00000004;
enum DDENUMSURFACES_CANBECREATED = 0x00000008;
enum DDENUMSURFACES_DOESEXIST = 0x00000010;
enum DDSDM_STANDARDVGAMODE = 0x00000001;
enum DDEDM_REFRESHRATES = 0x00000001;
enum DDEDM_STANDARDVGAMODES = 0x00000002;
enum DDSCL_FULLSCREEN = 0x00000001;
enum DDSCL_ALLOWREBOOT = 0x00000002;
enum DDSCL_NOWINDOWCHANGES = 0x00000004;
enum DDSCL_NORMAL = 0x00000008;
enum DDSCL_EXCLUSIVE = 0x00000010;
enum DDSCL_ALLOWMODEX = 0x00000040;
enum DDSCL_SETFOCUSWINDOW = 0x00000080;
enum DDSCL_SETDEVICEWINDOW = 0x00000100;
enum DDSCL_CREATEDEVICEWINDOW = 0x00000200;
enum DDSCL_MULTITHREADED = 0x00000400;
enum DDSCL_FPUSETUP = 0x00000800;
enum DDSCL_FPUPRESERVE = 0x00001000;
enum DDBLT_ALPHADEST = 0x00000001;
enum DDBLT_ALPHADESTCONSTOVERRIDE = 0x00000002;
enum DDBLT_ALPHADESTNEG = 0x00000004;
enum DDBLT_ALPHADESTSURFACEOVERRIDE = 0x00000008;
enum DDBLT_ALPHAEDGEBLEND = 0x00000010;
enum DDBLT_ALPHASRC = 0x00000020;
enum DDBLT_ALPHASRCCONSTOVERRIDE = 0x00000040;
enum DDBLT_ALPHASRCNEG = 0x00000080;
enum DDBLT_ALPHASRCSURFACEOVERRIDE = 0x00000100;
enum DDBLT_ASYNC = 0x00000200;
enum DDBLT_COLORFILL = 0x00000400;
enum DDBLT_DDFX = 0x00000800;
enum DDBLT_DDROPS = 0x00001000;
enum DDBLT_KEYDEST = 0x00002000;
enum DDBLT_KEYDESTOVERRIDE = 0x00004000;
enum DDBLT_KEYSRC = 0x00008000;
enum DDBLT_KEYSRCOVERRIDE = 0x00010000;
enum DDBLT_ROP = 0x00020000;
enum DDBLT_ROTATIONANGLE = 0x00040000;
enum DDBLT_ZBUFFER = 0x00080000;
enum DDBLT_ZBUFFERDESTCONSTOVERRIDE = 0x00100000;
enum DDBLT_ZBUFFERDESTOVERRIDE = 0x00200000;
enum DDBLT_ZBUFFERSRCCONSTOVERRIDE = 0x00400000;
enum DDBLT_ZBUFFERSRCOVERRIDE = 0x00800000;
enum DDBLT_WAIT = 0x01000000;
enum DDBLT_DEPTHFILL = 0x02000000;
enum DDBLT_DONOTWAIT = 0x08000000;
enum DDBLT_PRESENTATION = 0x10000000;
enum DDBLT_LAST_PRESENTATION = 0x20000000;
enum DDBLT_EXTENDED_FLAGS = 0x40000000;
enum DDBLT_EXTENDED_LINEAR_CONTENT = 0x00000004;
enum DDBLTFAST_NOCOLORKEY = 0x00000000;
enum DDBLTFAST_SRCCOLORKEY = 0x00000001;
enum DDBLTFAST_DESTCOLORKEY = 0x00000002;
enum DDBLTFAST_WAIT = 0x00000010;
enum DDBLTFAST_DONOTWAIT = 0x00000020;
enum DDFLIP_WAIT = 0x00000001;
enum DDFLIP_EVEN = 0x00000002;
enum DDFLIP_ODD = 0x00000004;
enum DDFLIP_NOVSYNC = 0x00000008;
enum DDFLIP_INTERVAL2 = 0x02000000;
enum DDFLIP_INTERVAL3 = 0x03000000;
enum DDFLIP_INTERVAL4 = 0x04000000;
enum DDFLIP_STEREO = 0x00000010;
enum DDFLIP_DONOTWAIT = 0x00000020;
enum DDOVER_ALPHADEST = 0x00000001;
enum DDOVER_ALPHADESTCONSTOVERRIDE = 0x00000002;
enum DDOVER_ALPHADESTNEG = 0x00000004;
enum DDOVER_ALPHADESTSURFACEOVERRIDE = 0x00000008;
enum DDOVER_ALPHAEDGEBLEND = 0x00000010;
enum DDOVER_ALPHASRC = 0x00000020;
enum DDOVER_ALPHASRCCONSTOVERRIDE = 0x00000040;
enum DDOVER_ALPHASRCNEG = 0x00000080;
enum DDOVER_ALPHASRCSURFACEOVERRIDE = 0x00000100;
enum DDOVER_HIDE = 0x00000200;
enum DDOVER_KEYDEST = 0x00000400;
enum DDOVER_KEYDESTOVERRIDE = 0x00000800;
enum DDOVER_KEYSRC = 0x00001000;
enum DDOVER_KEYSRCOVERRIDE = 0x00002000;
enum DDOVER_SHOW = 0x00004000;
enum DDOVER_ADDDIRTYRECT = 0x00008000;
enum DDOVER_REFRESHDIRTYRECTS = 0x00010000;
enum DDOVER_REFRESHALL = 0x00020000;
enum DDOVER_DDFX = 0x00080000;
enum DDOVER_AUTOFLIP = 0x00100000;
enum DDOVER_BOB = 0x00200000;
enum DDOVER_OVERRIDEBOBWEAVE = 0x00400000;
enum DDOVER_INTERLEAVED = 0x00800000;
enum DDOVER_BOBHARDWARE = 0x01000000;
enum DDOVER_ARGBSCALEFACTORS = 0x02000000;
enum DDOVER_DEGRADEARGBSCALING = 0x04000000;
enum DDSETSURFACEDESC_RECREATEDC = 0x00000000;
enum DDSETSURFACEDESC_PRESERVEDC = 0x00000001;
enum DDLOCK_SURFACEMEMORYPTR = 0x00000000;
enum DDLOCK_WAIT = 0x00000001;
enum DDLOCK_EVENT = 0x00000002;
enum DDLOCK_READONLY = 0x00000010;
enum DDLOCK_WRITEONLY = 0x00000020;
enum DDLOCK_NOSYSLOCK = 0x00000800;
enum DDLOCK_NOOVERWRITE = 0x00001000;
enum DDLOCK_DISCARDCONTENTS = 0x00002000;
enum DDLOCK_OKTOSWAP = 0x00002000;
enum DDLOCK_DONOTWAIT = 0x00004000;
enum DDLOCK_HASVOLUMETEXTUREBOXRECT = 0x00008000;
enum DDLOCK_NODIRTYUPDATE = 0x00010000;
enum DDBLTFX_ARITHSTRETCHY = 0x00000001;
enum DDBLTFX_MIRRORLEFTRIGHT = 0x00000002;
enum DDBLTFX_MIRRORUPDOWN = 0x00000004;
enum DDBLTFX_NOTEARING = 0x00000008;
enum DDBLTFX_ROTATE180 = 0x00000010;
enum DDBLTFX_ROTATE270 = 0x00000020;
enum DDBLTFX_ROTATE90 = 0x00000040;
enum DDBLTFX_ZBUFFERRANGE = 0x00000080;
enum DDBLTFX_ZBUFFERBASEDEST = 0x00000100;
enum DDOVERFX_ARITHSTRETCHY = 0x00000001;
enum DDOVERFX_MIRRORLEFTRIGHT = 0x00000002;
enum DDOVERFX_MIRRORUPDOWN = 0x00000004;
enum DDOVERFX_DEINTERLACE = 0x00000008;
enum DDWAITVB_BLOCKBEGIN = 0x00000001;
enum DDWAITVB_BLOCKBEGINEVENT = 0x00000002;
enum DDWAITVB_BLOCKEND = 0x00000004;
enum DDGFS_CANFLIP = 0x00000001;
enum DDGFS_ISFLIPDONE = 0x00000002;
enum DDGBS_CANBLT = 0x00000001;
enum DDGBS_ISBLTDONE = 0x00000002;
enum DDENUMOVERLAYZ_BACKTOFRONT = 0x00000000;
enum DDENUMOVERLAYZ_FRONTTOBACK = 0x00000001;
enum DDOVERZ_SENDTOFRONT = 0x00000000;
enum DDOVERZ_SENDTOBACK = 0x00000001;
enum DDOVERZ_MOVEFORWARD = 0x00000002;
enum DDOVERZ_MOVEBACKWARD = 0x00000003;
enum DDOVERZ_INSERTINFRONTOF = 0x00000004;
enum DDOVERZ_INSERTINBACKOF = 0x00000005;
enum DDSGR_CALIBRATE = 0x00000001;
enum DDSMT_ISTESTREQUIRED = 0x00000001;
enum DDEM_MODEPASSED = 0x00000001;
enum DDEM_MODEFAILED = 0x00000002;
enum DDENUMRET_CANCEL = 0x00000000;
enum DDENUMRET_OK = 0x00000001;
enum DDERR_NOTINITIALIZED = 0xffffffff800401f0;
enum OBJECT_ISROOT = 0xffffffff80000000;
enum DDUNSUPPORTEDMODE = 0xffffffff;
enum GUID_MiscellaneousCallbacks = GUID(0xefd60cc0, 0x49e7, 0x11d0, [0x88, 0x9d, 0x0, 0xaa, 0x0, 0xbb, 0xb7, 0x6a]);
enum GUID_VideoPortCallbacks = GUID(0xefd60cc1, 0x49e7, 0x11d0, [0x88, 0x9d, 0x0, 0xaa, 0x0, 0xbb, 0xb7, 0x6a]);
enum GUID_ColorControlCallbacks = GUID(0xefd60cc2, 0x49e7, 0x11d0, [0x88, 0x9d, 0x0, 0xaa, 0x0, 0xbb, 0xb7, 0x6a]);
enum GUID_VideoPortCaps = GUID(0xefd60cc3, 0x49e7, 0x11d0, [0x88, 0x9d, 0x0, 0xaa, 0x0, 0xbb, 0xb7, 0x6a]);
enum GUID_D3DCallbacks2 = GUID(0xba584e1, 0x70b6, 0x11d0, [0x88, 0x9d, 0x0, 0xaa, 0x0, 0xbb, 0xb7, 0x6a]);
enum GUID_D3DCallbacks3 = GUID(0xddf41230, 0xec0a, 0x11d0, [0xa9, 0xb6, 0x0, 0xaa, 0x0, 0xc0, 0x99, 0x3e]);
enum GUID_NonLocalVidMemCaps = GUID(0x86c4fa80, 0x8d84, 0x11d0, [0x94, 0xe8, 0x0, 0xc0, 0x4f, 0xc3, 0x41, 0x37]);
enum GUID_KernelCallbacks = GUID(0x80863800, 0x6b06, 0x11d0, [0x9b, 0x6, 0x0, 0xa0, 0xc9, 0x3, 0xa3, 0xb8]);
enum GUID_KernelCaps = GUID(0xffaa7540, 0x7aa8, 0x11d0, [0x9b, 0x6, 0x0, 0xa0, 0xc9, 0x3, 0xa3, 0xb8]);
enum GUID_D3DExtendedCaps = GUID(0x7de41f80, 0x9d93, 0x11d0, [0x89, 0xab, 0x0, 0xa0, 0xc9, 0x5, 0x41, 0x29]);
enum GUID_ZPixelFormats = GUID(0x93869880, 0x36cf, 0x11d1, [0x9b, 0x1b, 0x0, 0xaa, 0x0, 0xbb, 0xb8, 0xae]);
enum GUID_DDMoreSurfaceCaps = GUID(0x3b8a0466, 0xf269, 0x11d1, [0x88, 0xb, 0x0, 0xc0, 0x4f, 0xd9, 0x30, 0xc5]);
enum GUID_DDStereoMode = GUID(0xf828169c, 0xa8e8, 0x11d2, [0xa1, 0xf2, 0x0, 0xa0, 0xc9, 0x83, 0xea, 0xf6]);
enum GUID_OptSurfaceKmodeInfo = GUID(0xe05c8472, 0x51d4, 0x11d1, [0x8c, 0xce, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8]);
enum GUID_OptSurfaceUmodeInfo = GUID(0x9d792804, 0x5fa8, 0x11d1, [0x8c, 0xd0, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8]);
enum GUID_UserModeDriverInfo = GUID(0xf0b0e8e2, 0x5f97, 0x11d1, [0x8c, 0xd0, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8]);
enum GUID_UserModeDriverPassword = GUID(0x97f861b6, 0x60a1, 0x11d1, [0x8c, 0xd0, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8]);
enum GUID_D3DParseUnknownCommandCallback = GUID(0x2e04ffa0, 0x98e4, 0x11d1, [0x8c, 0xe1, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8]);
enum GUID_MotionCompCallbacks = GUID(0xb1122b40, 0x5da5, 0x11d1, [0x8f, 0xcf, 0x0, 0xc0, 0x4f, 0xc2, 0x9b, 0x4e]);
enum GUID_Miscellaneous2Callbacks = GUID(0x406b2f00, 0x3e5a, 0x11d1, [0xb6, 0x40, 0x0, 0xaa, 0x0, 0xa1, 0xf9, 0x6a]);
enum DDPF_NOVEL_TEXTURE_FORMAT = 0x00100000;
enum DDPF_D3DFORMAT = 0x00200000;
enum D3DFORMAT_OP_TEXTURE = 0x00000001;
enum D3DFORMAT_OP_VOLUMETEXTURE = 0x00000002;
enum D3DFORMAT_OP_CUBETEXTURE = 0x00000004;
enum D3DFORMAT_OP_OFFSCREEN_RENDERTARGET = 0x00000008;
enum D3DFORMAT_OP_SAME_FORMAT_RENDERTARGET = 0x00000010;
enum D3DFORMAT_OP_ZSTENCIL = 0x00000040;
enum D3DFORMAT_OP_ZSTENCIL_WITH_ARBITRARY_COLOR_DEPTH = 0x00000080;
enum D3DFORMAT_OP_SAME_FORMAT_UP_TO_ALPHA_RENDERTARGET = 0x00000100;
enum D3DFORMAT_OP_DISPLAYMODE = 0x00000400;
enum D3DFORMAT_OP_3DACCELERATION = 0x00000800;
enum D3DFORMAT_OP_PIXELSIZE = 0x00001000;
enum D3DFORMAT_OP_CONVERT_TO_ARGB = 0x00002000;
enum D3DFORMAT_OP_OFFSCREENPLAIN = 0x00004000;
enum D3DFORMAT_OP_SRGBREAD = 0x00008000;
enum D3DFORMAT_OP_BUMPMAP = 0x00010000;
enum D3DFORMAT_OP_DMAP = 0x00020000;
enum D3DFORMAT_OP_NOFILTER = 0x00040000;
enum D3DFORMAT_MEMBEROFGROUP_ARGB = 0x00080000;
enum D3DFORMAT_OP_SRGBWRITE = 0x00100000;
enum D3DFORMAT_OP_NOALPHABLEND = 0x00200000;
enum D3DFORMAT_OP_AUTOGENMIPMAP = 0x00400000;
enum D3DFORMAT_OP_VERTEXTEXTURE = 0x00800000;
enum D3DFORMAT_OP_NOTEXCOORDWRAPNORMIP = 0x01000000;
enum DELETED_OK = 0x00000000;
enum DELETED_LASTONE = 0x00000001;
enum DELETED_NOTFOUND = 0x00000002;
enum DCICOMMAND = 0x00000c03;
enum DD_VERSION = 0x00000200;
enum DD_RUNTIME_VERSION = 0x00000902;
enum DD_HAL_VERSION = 0x00000100;
enum DDCREATEDRIVEROBJECT = 0x0000000a;
enum DDGET32BITDRIVERNAME = 0x0000000b;
enum DDNEWCALLBACKFNS = 0x0000000c;
enum DDVERSIONINFO = 0x0000000d;
enum DDHAL_DRIVER_DLLNAME = "DDRAW16.DLL";
enum DDHAL_APP_DLLNAME = "DDRAW.DLL";
enum CCHDEVICENAME = 0x00000020;
enum MAX_DRIVER_NAME = 0x00000020;
enum MAX_PALETTE_SIZE = 0x00000100;
enum MAX_AUTOFLIP_BUFFERS = 0x0000000a;
enum DDSCAPS_EXECUTEBUFFER = 0x00800000;
enum DDSCAPS2_VERTEXBUFFER = 0x00000020;
enum DDSCAPS2_COMMANDBUFFER = 0x00000040;
enum DDSCAPS2_INDEXBUFFER = 0x04000000;
enum DDSCAPS3_VIDEO = 0x00000200;
enum D3DFMT_INTERNAL_D32 = 0x00000047;
enum D3DFMT_INTERNAL_S1D15 = 0x00000048;
enum D3DFMT_INTERNAL_D15S1 = 0x00000049;
enum D3DFMT_INTERNAL_S8D24 = 0x0000004a;
enum D3DFMT_INTERNAL_D24S8 = 0x0000004b;
enum D3DFMT_INTERNAL_X8D24 = 0x0000004c;
enum D3DFMT_INTERNAL_D24X8 = 0x0000004d;
enum DDHAL_PLEASEALLOC_BLOCKSIZE = 0x00000002;
enum DDHAL_PLEASEALLOC_LINEARSIZE = 0x00000003;
enum VIDMEM_ISLINEAR = 0x00000001;
enum VIDMEM_ISRECTANGULAR = 0x00000002;
enum VIDMEM_ISHEAP = 0x00000004;
enum VIDMEM_ISNONLOCAL = 0x00000008;
enum VIDMEM_ISWC = 0x00000010;
enum VIDMEM_HEAPDISABLED = 0x00000020;
enum HEAPALIASINFO_MAPPEDREAL = 0x00000001;
enum HEAPALIASINFO_MAPPEDDUMMY = 0x00000002;
enum DDHAL_CB32_DESTROYDRIVER = 0x00000001;
enum DDHAL_CB32_CREATESURFACE = 0x00000002;
enum DDHAL_CB32_SETCOLORKEY = 0x00000004;
enum DDHAL_CB32_SETMODE = 0x00000008;
enum DDHAL_CB32_WAITFORVERTICALBLANK = 0x00000010;
enum DDHAL_CB32_CANCREATESURFACE = 0x00000020;
enum DDHAL_CB32_CREATEPALETTE = 0x00000040;
enum DDHAL_CB32_GETSCANLINE = 0x00000080;
enum DDHAL_CB32_SETEXCLUSIVEMODE = 0x00000100;
enum DDHAL_CB32_FLIPTOGDISURFACE = 0x00000200;
enum DDHAL_PALCB32_DESTROYPALETTE = 0x00000001;
enum DDHAL_PALCB32_SETENTRIES = 0x00000002;
enum DDHAL_SURFCB32_DESTROYSURFACE = 0x00000001;
enum DDHAL_SURFCB32_FLIP = 0x00000002;
enum DDHAL_SURFCB32_SETCLIPLIST = 0x00000004;
enum DDHAL_SURFCB32_LOCK = 0x00000008;
enum DDHAL_SURFCB32_UNLOCK = 0x00000010;
enum DDHAL_SURFCB32_BLT = 0x00000020;
enum DDHAL_SURFCB32_SETCOLORKEY = 0x00000040;
enum DDHAL_SURFCB32_ADDATTACHEDSURFACE = 0x00000080;
enum DDHAL_SURFCB32_GETBLTSTATUS = 0x00000100;
enum DDHAL_SURFCB32_GETFLIPSTATUS = 0x00000200;
enum DDHAL_SURFCB32_UPDATEOVERLAY = 0x00000400;
enum DDHAL_SURFCB32_SETOVERLAYPOSITION = 0x00000800;
enum DDHAL_SURFCB32_RESERVED4 = 0x00001000;
enum DDHAL_SURFCB32_SETPALETTE = 0x00002000;
enum DDHAL_MISCCB32_GETAVAILDRIVERMEMORY = 0x00000001;
enum DDHAL_MISCCB32_UPDATENONLOCALHEAP = 0x00000002;
enum DDHAL_MISCCB32_GETHEAPALIGNMENT = 0x00000004;
enum DDHAL_MISCCB32_GETSYSMEMBLTSTATUS = 0x00000008;
enum DDHAL_MISC2CB32_CREATESURFACEEX = 0x00000002;
enum DDHAL_MISC2CB32_GETDRIVERSTATE = 0x00000004;
enum DDHAL_MISC2CB32_DESTROYDDLOCAL = 0x00000008;
enum DDHAL_EXEBUFCB32_CANCREATEEXEBUF = 0x00000001;
enum DDHAL_EXEBUFCB32_CREATEEXEBUF = 0x00000002;
enum DDHAL_EXEBUFCB32_DESTROYEXEBUF = 0x00000004;
enum DDHAL_EXEBUFCB32_LOCKEXEBUF = 0x00000008;
enum DDHAL_EXEBUFCB32_UNLOCKEXEBUF = 0x00000010;
enum DDHAL_VPORT32_CANCREATEVIDEOPORT = 0x00000001;
enum DDHAL_VPORT32_CREATEVIDEOPORT = 0x00000002;
enum DDHAL_VPORT32_FLIP = 0x00000004;
enum DDHAL_VPORT32_GETBANDWIDTH = 0x00000008;
enum DDHAL_VPORT32_GETINPUTFORMATS = 0x00000010;
enum DDHAL_VPORT32_GETOUTPUTFORMATS = 0x00000020;
enum DDHAL_VPORT32_GETFIELD = 0x00000080;
enum DDHAL_VPORT32_GETLINE = 0x00000100;
enum DDHAL_VPORT32_GETCONNECT = 0x00000200;
enum DDHAL_VPORT32_DESTROY = 0x00000400;
enum DDHAL_VPORT32_GETFLIPSTATUS = 0x00000800;
enum DDHAL_VPORT32_UPDATE = 0x00001000;
enum DDHAL_VPORT32_WAITFORSYNC = 0x00002000;
enum DDHAL_VPORT32_GETSIGNALSTATUS = 0x00004000;
enum DDHAL_VPORT32_COLORCONTROL = 0x00008000;
enum DDHAL_COLOR_COLORCONTROL = 0x00000001;
enum DDHAL_KERNEL_SYNCSURFACEDATA = 0x00000001;
enum DDHAL_KERNEL_SYNCVIDEOPORTDATA = 0x00000002;
enum DDHAL_MOCOMP32_GETGUIDS = 0x00000001;
enum DDHAL_MOCOMP32_GETFORMATS = 0x00000002;
enum DDHAL_MOCOMP32_CREATE = 0x00000004;
enum DDHAL_MOCOMP32_GETCOMPBUFFINFO = 0x00000008;
enum DDHAL_MOCOMP32_GETINTERNALINFO = 0x00000010;
enum DDHAL_MOCOMP32_BEGINFRAME = 0x00000020;
enum DDHAL_MOCOMP32_ENDFRAME = 0x00000040;
enum DDHAL_MOCOMP32_RENDER = 0x00000080;
enum DDHAL_MOCOMP32_QUERYSTATUS = 0x00000100;
enum DDHAL_MOCOMP32_DESTROY = 0x00000200;
enum DDHAL_DRIVER_NOTHANDLED = 0x00000000;
enum DDHAL_DRIVER_HANDLED = 0x00000001;
enum DDHAL_DRIVER_NOCKEYHW = 0x00000002;
enum DDRAWIPAL_256 = 0x00000001;
enum DDRAWIPAL_16 = 0x00000002;
enum DDRAWIPAL_GDI = 0x00000004;
enum DDRAWIPAL_STORED_8 = 0x00000008;
enum DDRAWIPAL_STORED_16 = 0x00000010;
enum DDRAWIPAL_STORED_24 = 0x00000020;
enum DDRAWIPAL_EXCLUSIVE = 0x00000040;
enum DDRAWIPAL_INHEL = 0x00000080;
enum DDRAWIPAL_DIRTY = 0x00000100;
enum DDRAWIPAL_ALLOW256 = 0x00000200;
enum DDRAWIPAL_4 = 0x00000400;
enum DDRAWIPAL_2 = 0x00000800;
enum DDRAWIPAL_STORED_8INDEX = 0x00001000;
enum DDRAWIPAL_ALPHA = 0x00002000;
enum DDRAWICLIP_WATCHWINDOW = 0x00000001;
enum DDRAWICLIP_ISINITIALIZED = 0x00000002;
enum DDRAWICLIP_INMASTERSPRITELIST = 0x00000004;
enum DDAL_IMPLICIT = 0x00000001;
enum ACCESSRECT_VRAMSTYLE = 0x00000001;
enum ACCESSRECT_NOTHOLDINGWIN16LOCK = 0x00000002;
enum ACCESSRECT_BROKEN = 0x00000004;
enum PFINDEX_UNINITIALIZED = 0x00000000;
enum DDRAWISURFGBL_MEMFREE = 0x00000001;
enum DDRAWISURFGBL_SYSMEMREQUESTED = 0x00000002;
enum DDRAWISURFGBL_ISGDISURFACE = 0x00000004;
enum DDRAWISURFGBL_SOFTWAREAUTOFLIP = 0x00000008;
enum DDRAWISURFGBL_LOCKNOTHOLDINGWIN16LOCK = 0x00000010;
enum DDRAWISURFGBL_LOCKVRAMSTYLE = 0x00000020;
enum DDRAWISURFGBL_LOCKBROKEN = 0x00000040;
enum DDRAWISURFGBL_IMPLICITHANDLE = 0x00000080;
enum DDRAWISURFGBL_ISCLIENTMEM = 0x00000100;
enum DDRAWISURFGBL_HARDWAREOPSOURCE = 0x00000200;
enum DDRAWISURFGBL_HARDWAREOPDEST = 0x00000400;
enum DDRAWISURFGBL_VPORTINTERLEAVED = 0x00000800;
enum DDRAWISURFGBL_VPORTDATA = 0x00001000;
enum DDRAWISURFGBL_LATEALLOCATELINEAR = 0x00002000;
enum DDRAWISURFGBL_SYSMEMEXECUTEBUFFER = 0x00004000;
enum DDRAWISURFGBL_FASTLOCKHELD = 0x00008000;
enum DDRAWISURFGBL_READONLYLOCKHELD = 0x00010000;
enum DDRAWISURFGBL_DX8SURFACE = 0x00080000;
enum DDRAWISURFGBL_DDHELDONTFREE = 0x00100000;
enum DDRAWISURFGBL_NOTIFYWHENUNLOCKED = 0x00200000;
enum DDRAWISURFGBL_RESERVED0 = 0xffffffff80000000;
enum DDRAWISURF_ATTACHED = 0x00000001;
enum DDRAWISURF_IMPLICITCREATE = 0x00000002;
enum DDRAWISURF_ISFREE = 0x00000004;
enum DDRAWISURF_ATTACHED_FROM = 0x00000008;
enum DDRAWISURF_IMPLICITROOT = 0x00000010;
enum DDRAWISURF_PARTOFPRIMARYCHAIN = 0x00000020;
enum DDRAWISURF_DATAISALIASED = 0x00000040;
enum DDRAWISURF_HASDC = 0x00000080;
enum DDRAWISURF_HASCKEYDESTOVERLAY = 0x00000100;
enum DDRAWISURF_HASCKEYDESTBLT = 0x00000200;
enum DDRAWISURF_HASCKEYSRCOVERLAY = 0x00000400;
enum DDRAWISURF_HASCKEYSRCBLT = 0x00000800;
enum DDRAWISURF_LOCKEXCLUDEDCURSOR = 0x00001000;
enum DDRAWISURF_HASPIXELFORMAT = 0x00002000;
enum DDRAWISURF_HASOVERLAYDATA = 0x00004000;
enum DDRAWISURF_SETGAMMA = 0x00008000;
enum DDRAWISURF_SW_CKEYDESTOVERLAY = 0x00010000;
enum DDRAWISURF_SW_CKEYDESTBLT = 0x00020000;
enum DDRAWISURF_SW_CKEYSRCOVERLAY = 0x00040000;
enum DDRAWISURF_SW_CKEYSRCBLT = 0x00080000;
enum DDRAWISURF_HW_CKEYDESTOVERLAY = 0x00100000;
enum DDRAWISURF_HW_CKEYDESTBLT = 0x00200000;
enum DDRAWISURF_HW_CKEYSRCOVERLAY = 0x00400000;
enum DDRAWISURF_HW_CKEYSRCBLT = 0x00800000;
enum DDRAWISURF_INMASTERSPRITELIST = 0x01000000;
enum DDRAWISURF_HELCB = 0x02000000;
enum DDRAWISURF_FRONTBUFFER = 0x04000000;
enum DDRAWISURF_BACKBUFFER = 0x08000000;
enum DDRAWISURF_INVALID = 0x10000000;
enum DDRAWISURF_DCIBUSY = 0x20000000;
enum DDRAWISURF_GETDCNULL = 0x40000000;
enum DDRAWISURF_STEREOSURFACELEFT = 0x20000000;
enum DDRAWISURF_DRIVERMANAGED = 0x40000000;
enum DDRAWISURF_DCILOCK = 0xffffffff80000000;
enum ROP_HAS_SOURCE = 0x00000001;
enum ROP_HAS_PATTERN = 0x00000002;
enum DDMODEINFO_PALETTIZED = 0x00000001;
enum DDMODEINFO_MODEX = 0x00000002;
enum DDMODEINFO_UNSUPPORTED = 0x00000004;
enum DDMODEINFO_STANDARDVGA = 0x00000008;
enum DDMODEINFO_MAXREFRESH = 0x00000010;
enum DDMODEINFO_STEREO = 0x00000020;
enum DDRAWILCL_HASEXCLUSIVEMODE = 0x00000001;
enum DDRAWILCL_ISFULLSCREEN = 0x00000002;
enum DDRAWILCL_SETCOOPCALLED = 0x00000004;
enum DDRAWILCL_ACTIVEYES = 0x00000008;
enum DDRAWILCL_ACTIVENO = 0x00000010;
enum DDRAWILCL_HOOKEDHWND = 0x00000020;
enum DDRAWILCL_ALLOWMODEX = 0x00000040;
enum DDRAWILCL_V1SCLBEHAVIOUR = 0x00000080;
enum DDRAWILCL_MODEHASBEENCHANGED = 0x00000100;
enum DDRAWILCL_CREATEDWINDOW = 0x00000200;
enum DDRAWILCL_DIRTYDC = 0x00000400;
enum DDRAWILCL_DISABLEINACTIVATE = 0x00000800;
enum DDRAWILCL_CURSORCLIPPED = 0x00001000;
enum DDRAWILCL_EXPLICITMONITOR = 0x00002000;
enum DDRAWILCL_MULTITHREADED = 0x00004000;
enum DDRAWILCL_FPUSETUP = 0x00008000;
enum DDRAWILCL_POWEREDDOWN = 0x00010000;
enum DDRAWILCL_DIRECTDRAW7 = 0x00020000;
enum DDRAWILCL_ATTEMPTEDD3DCONTEXT = 0x00040000;
enum DDRAWILCL_FPUPRESERVE = 0x00080000;
enum DDRAWILCL_DX8DRIVER = 0x00100000;
enum DDRAWILCL_DIRECTDRAW8 = 0x00200000;
enum DDRAWI_xxxxxxxxx1 = 0x00000001;
enum DDRAWI_xxxxxxxxx2 = 0x00000002;
enum DDRAWI_VIRTUALDESKTOP = 0x00000008;
enum DDRAWI_MODEX = 0x00000010;
enum DDRAWI_DISPLAYDRV = 0x00000020;
enum DDRAWI_FULLSCREEN = 0x00000040;
enum DDRAWI_MODECHANGED = 0x00000080;
enum DDRAWI_NOHARDWARE = 0x00000100;
enum DDRAWI_PALETTEINIT = 0x00000200;
enum DDRAWI_NOEMULATION = 0x00000400;
enum DDRAWI_HASCKEYDESTOVERLAY = 0x00000800;
enum DDRAWI_HASCKEYSRCOVERLAY = 0x00001000;
enum DDRAWI_HASGDIPALETTE = 0x00002000;
enum DDRAWI_EMULATIONINITIALIZED = 0x00004000;
enum DDRAWI_HASGDIPALETTE_EXCLUSIVE = 0x00008000;
enum DDRAWI_MODEXILLEGAL = 0x00010000;
enum DDRAWI_FLIPPEDTOGDI = 0x00020000;
enum DDRAWI_NEEDSWIN16FORVRAMLOCK = 0x00040000;
enum DDRAWI_PDEVICEVRAMBITCLEARED = 0x00080000;
enum DDRAWI_STANDARDVGA = 0x00100000;
enum DDRAWI_EXTENDEDALIGNMENT = 0x00200000;
enum DDRAWI_CHANGINGMODE = 0x00400000;
enum DDRAWI_GDIDRV = 0x00800000;
enum DDRAWI_ATTACHEDTODESKTOP = 0x01000000;
enum DDRAWI_UMODELOADED = 0x02000000;
enum DDRAWI_DDRAWDATANOTFETCHED = 0x04000000;
enum DDRAWI_SECONDARYDRIVERLOADED = 0x08000000;
enum DDRAWI_TESTINGMODES = 0x10000000;
enum DDRAWI_DRIVERINFO2 = 0x20000000;
enum DDRAWI_BADPDEV = 0x40000000;
enum DDRAWIVPORT_ON = 0x00000001;
enum DDRAWIVPORT_SOFTWARE_AUTOFLIP = 0x00000002;
enum DDRAWIVPORT_COLORKEYANDINTERP = 0x00000004;
enum DDRAWIVPORT_NOKERNELHANDLES = 0x00000008;
enum DDRAWIVPORT_SOFTWARE_BOB = 0x00000010;
enum DDRAWIVPORT_VBION = 0x00000020;
enum DDRAWIVPORT_VIDEOON = 0x00000040;
enum DDHALINFO_ISPRIMARYDISPLAY = 0x00000001;
enum DDHALINFO_MODEXILLEGAL = 0x00000002;
enum DDHALINFO_GETDRIVERINFOSET = 0x00000004;
enum DDHALINFO_GETDRIVERINFO2 = 0x00000008;
enum DDWAITVB_I_TESTVB = 0xffffffff80000006;
enum DDRAWI_VPORTSTART = 0x00000001;
enum DDRAWI_VPORTSTOP = 0x00000002;
enum DDRAWI_VPORTUPDATE = 0x00000003;
enum DDRAWI_VPORTGETCOLOR = 0x00000001;
enum DDRAWI_VPORTSETCOLOR = 0x00000002;
enum DDRAWI_GETCOLOR = 0x00000001;
enum DDRAWI_SETCOLOR = 0x00000002;
enum DDMCQUERY_READ = 0x00000001;
enum GUID_D3DCaps = GUID(0x7bf06991, 0x8794, 0x11d0, [0x91, 0x39, 0x8, 0x0, 0x36, 0xd2, 0xef, 0x2]);
enum GUID_D3DCallbacks = GUID(0x7bf06990, 0x8794, 0x11d0, [0x91, 0x39, 0x8, 0x0, 0x36, 0xd2, 0xef, 0x2]);
enum GUID_DDMoreCaps = GUID(0x880baf30, 0xb030, 0x11d0, [0x8e, 0xa7, 0x0, 0x60, 0x97, 0x97, 0xea, 0x5b]);
enum GUID_NTCallbacks = GUID(0x6fe9ecde, 0xdf89, 0x11d1, [0x9d, 0xb0, 0x0, 0x60, 0x8, 0x27, 0x71, 0xba]);
enum GUID_GetHeapAlignment = GUID(0x42e02f16, 0x7b41, 0x11d2, [0x8b, 0xff, 0x0, 0xa0, 0xc9, 0x83, 0xea, 0xf6]);
enum GUID_UpdateNonLocalHeap = GUID(0x42e02f17, 0x7b41, 0x11d2, [0x8b, 0xff, 0x0, 0xa0, 0xc9, 0x83, 0xea, 0xf6]);
enum GUID_NTPrivateDriverCaps = GUID(0xfad16a23, 0x7b66, 0x11d2, [0x83, 0xd7, 0x0, 0xc0, 0x4f, 0x7c, 0xe5, 0x8c]);
enum GUID_VPE2Callbacks = GUID(0x52882147, 0x2d47, 0x469a, [0xa0, 0xd1, 0x3, 0x45, 0x58, 0x90, 0xf6, 0xc8]);
enum DDSCAPS_COMMANDBUFFER = 0x00000400;
enum DDHAL_PLEASEALLOC_USERMEM = 0x00000004;
enum DDHAL_CB32_MAPMEMORY = 0xffffffff80000000;
enum DDHAL_MISC2CB32_ALPHABLT = 0x00000001;
enum DDHAL_CREATESURFACEEX_SWAPHANDLES = 0x00000001;
enum DDHAL_NTCB32_FREEDRIVERMEMORY = 0x00000001;
enum DDHAL_NTCB32_SETEXCLUSIVEMODE = 0x00000002;
enum DDHAL_NTCB32_FLIPTOGDISURFACE = 0x00000004;
enum DDHAL_VPORT32_GETAUTOFLIPSURF = 0x00000040;
enum DDHAL_D3DBUFCB32_CANCREATED3DBUF = 0x00000001;
enum DDHAL_D3DBUFCB32_CREATED3DBUF = 0x00000002;
enum DDHAL_D3DBUFCB32_DESTROYD3DBUF = 0x00000004;
enum DDHAL_D3DBUFCB32_LOCKD3DBUF = 0x00000008;
enum DDHAL_D3DBUFCB32_UNLOCKD3DBUF = 0x00000010;
enum DDHAL_PRIVATECAP_ATOMICSURFACECREATION = 0x00000001;
enum DDHAL_PRIVATECAP_NOTIFYPRIMARYCREATION = 0x00000002;
enum DDHAL_PRIVATECAP_RESERVED1 = 0x00000004;
enum DDBLT_AFLAGS = 0xffffffff80000000;
enum DDABLT_SRCOVERDEST = 0x00000001;
enum DDKERNELCAPS_SKIPFIELDS = 0x00000001;
enum DDKERNELCAPS_AUTOFLIP = 0x00000002;
enum DDKERNELCAPS_SETSTATE = 0x00000004;
enum DDKERNELCAPS_LOCK = 0x00000008;
enum DDKERNELCAPS_FLIPVIDEOPORT = 0x00000010;
enum DDKERNELCAPS_FLIPOVERLAY = 0x00000020;
enum DDKERNELCAPS_CAPTURE_SYSMEM = 0x00000040;
enum DDKERNELCAPS_CAPTURE_NONLOCALVIDMEM = 0x00000080;
enum DDKERNELCAPS_FIELDPOLARITY = 0x00000100;
enum DDKERNELCAPS_CAPTURE_INVERTED = 0x00000200;
enum DDIRQ_DISPLAY_VSYNC = 0x00000001;
enum DDIRQ_RESERVED1 = 0x00000002;
enum DDIRQ_VPORT0_VSYNC = 0x00000004;
enum DDIRQ_VPORT0_LINE = 0x00000008;
enum DDIRQ_VPORT1_VSYNC = 0x00000010;
enum DDIRQ_VPORT1_LINE = 0x00000020;
enum DDIRQ_VPORT2_VSYNC = 0x00000040;
enum DDIRQ_VPORT2_LINE = 0x00000080;
enum DDIRQ_VPORT3_VSYNC = 0x00000100;
enum DDIRQ_VPORT3_LINE = 0x00000200;
enum DDIRQ_VPORT4_VSYNC = 0x00000400;
enum DDIRQ_VPORT4_LINE = 0x00000800;
enum DDIRQ_VPORT5_VSYNC = 0x00001000;
enum DDIRQ_VPORT5_LINE = 0x00002000;
enum DDIRQ_VPORT6_VSYNC = 0x00004000;
enum DDIRQ_VPORT6_LINE = 0x00008000;
enum DDIRQ_VPORT7_VSYNC = 0x00010000;
enum DDIRQ_VPORT7_LINE = 0x00020000;
enum DDIRQ_VPORT8_VSYNC = 0x00040000;
enum DDIRQ_VPORT8_LINE = 0x00080000;
enum DDIRQ_VPORT9_VSYNC = 0x00010000;
enum DDIRQ_VPORT9_LINE = 0x00020000;
enum SURFACEALIGN_DISCARDABLE = 0x00000001;
enum VMEMHEAP_LINEAR = 0x00000001;
enum VMEMHEAP_RECTANGULAR = 0x00000002;
enum VMEMHEAP_ALIGNMENT = 0x00000004;
enum DDVPTYPE_E_HREFH_VREFH = GUID(0x54f39980, 0xda60, 0x11cf, [0x9b, 0x6, 0x0, 0xa0, 0xc9, 0x3, 0xa3, 0xb8]);
enum DDVPTYPE_E_HREFH_VREFL = GUID(0x92783220, 0xda60, 0x11cf, [0x9b, 0x6, 0x0, 0xa0, 0xc9, 0x3, 0xa3, 0xb8]);
enum DDVPTYPE_E_HREFL_VREFH = GUID(0xa07a02e0, 0xda60, 0x11cf, [0x9b, 0x6, 0x0, 0xa0, 0xc9, 0x3, 0xa3, 0xb8]);
enum DDVPTYPE_E_HREFL_VREFL = GUID(0xe09c77e0, 0xda60, 0x11cf, [0x9b, 0x6, 0x0, 0xa0, 0xc9, 0x3, 0xa3, 0xb8]);
enum DDVPTYPE_CCIR656 = GUID(0xfca326a0, 0xda60, 0x11cf, [0x9b, 0x6, 0x0, 0xa0, 0xc9, 0x3, 0xa3, 0xb8]);
enum DDVPTYPE_BROOKTREE = GUID(0x1352a560, 0xda61, 0x11cf, [0x9b, 0x6, 0x0, 0xa0, 0xc9, 0x3, 0xa3, 0xb8]);
enum DDVPTYPE_PHILIPS = GUID(0x332cf160, 0xda61, 0x11cf, [0x9b, 0x6, 0x0, 0xa0, 0xc9, 0x3, 0xa3, 0xb8]);
enum DDVPD_WIDTH = 0x00000001;
enum DDVPD_HEIGHT = 0x00000002;
enum DDVPD_ID = 0x00000004;
enum DDVPD_CAPS = 0x00000008;
enum DDVPD_FX = 0x00000010;
enum DDVPD_AUTOFLIP = 0x00000020;
enum DDVPD_ALIGN = 0x00000040;
enum DDVPD_PREFERREDAUTOFLIP = 0x00000080;
enum DDVPD_FILTERQUALITY = 0x00000100;
enum DDVPCONNECT_DOUBLECLOCK = 0x00000001;
enum DDVPCONNECT_VACT = 0x00000002;
enum DDVPCONNECT_INVERTPOLARITY = 0x00000004;
enum DDVPCONNECT_DISCARDSVREFDATA = 0x00000008;
enum DDVPCONNECT_HALFLINE = 0x00000010;
enum DDVPCONNECT_INTERLACED = 0x00000020;
enum DDVPCONNECT_SHAREEVEN = 0x00000040;
enum DDVPCONNECT_SHAREODD = 0x00000080;
enum DDVPCAPS_AUTOFLIP = 0x00000001;
enum DDVPCAPS_INTERLACED = 0x00000002;
enum DDVPCAPS_NONINTERLACED = 0x00000004;
enum DDVPCAPS_READBACKFIELD = 0x00000008;
enum DDVPCAPS_READBACKLINE = 0x00000010;
enum DDVPCAPS_SHAREABLE = 0x00000020;
enum DDVPCAPS_SKIPEVENFIELDS = 0x00000040;
enum DDVPCAPS_SKIPODDFIELDS = 0x00000080;
enum DDVPCAPS_SYNCMASTER = 0x00000100;
enum DDVPCAPS_VBISURFACE = 0x00000200;
enum DDVPCAPS_COLORCONTROL = 0x00000400;
enum DDVPCAPS_OVERSAMPLEDVBI = 0x00000800;
enum DDVPCAPS_SYSTEMMEMORY = 0x00001000;
enum DDVPCAPS_VBIANDVIDEOINDEPENDENT = 0x00002000;
enum DDVPCAPS_HARDWAREDEINTERLACE = 0x00004000;
enum DDVPFX_CROPTOPDATA = 0x00000001;
enum DDVPFX_CROPX = 0x00000002;
enum DDVPFX_CROPY = 0x00000004;
enum DDVPFX_INTERLEAVE = 0x00000008;
enum DDVPFX_MIRRORLEFTRIGHT = 0x00000010;
enum DDVPFX_MIRRORUPDOWN = 0x00000020;
enum DDVPFX_PRESHRINKX = 0x00000040;
enum DDVPFX_PRESHRINKY = 0x00000080;
enum DDVPFX_PRESHRINKXB = 0x00000100;
enum DDVPFX_PRESHRINKYB = 0x00000200;
enum DDVPFX_PRESHRINKXS = 0x00000400;
enum DDVPFX_PRESHRINKYS = 0x00000800;
enum DDVPFX_PRESTRETCHX = 0x00001000;
enum DDVPFX_PRESTRETCHY = 0x00002000;
enum DDVPFX_PRESTRETCHXN = 0x00004000;
enum DDVPFX_PRESTRETCHYN = 0x00008000;
enum DDVPFX_VBICONVERT = 0x00010000;
enum DDVPFX_VBINOSCALE = 0x00020000;
enum DDVPFX_IGNOREVBIXCROP = 0x00040000;
enum DDVPFX_VBINOINTERLEAVE = 0x00080000;
enum DDVP_AUTOFLIP = 0x00000001;
enum DDVP_CONVERT = 0x00000002;
enum DDVP_CROP = 0x00000004;
enum DDVP_INTERLEAVE = 0x00000008;
enum DDVP_MIRRORLEFTRIGHT = 0x00000010;
enum DDVP_MIRRORUPDOWN = 0x00000020;
enum DDVP_PRESCALE = 0x00000040;
enum DDVP_SKIPEVENFIELDS = 0x00000080;
enum DDVP_SKIPODDFIELDS = 0x00000100;
enum DDVP_SYNCMASTER = 0x00000200;
enum DDVP_VBICONVERT = 0x00000400;
enum DDVP_VBINOSCALE = 0x00000800;
enum DDVP_OVERRIDEBOBWEAVE = 0x00001000;
enum DDVP_IGNOREVBIXCROP = 0x00002000;
enum DDVP_VBINOINTERLEAVE = 0x00004000;
enum DDVP_HARDWAREDEINTERLACE = 0x00008000;
enum DDVPFORMAT_VIDEO = 0x00000001;
enum DDVPFORMAT_VBI = 0x00000002;
enum DDVPTARGET_VIDEO = 0x00000001;
enum DDVPTARGET_VBI = 0x00000002;
enum DDVPWAIT_BEGIN = 0x00000001;
enum DDVPWAIT_END = 0x00000002;
enum DDVPWAIT_LINE = 0x00000003;
enum DDVPFLIP_VIDEO = 0x00000001;
enum DDVPFLIP_VBI = 0x00000002;
enum DDVPSQ_NOSIGNAL = 0x00000001;
enum DDVPSQ_SIGNALOK = 0x00000002;
enum DDVPB_VIDEOPORT = 0x00000001;
enum DDVPB_OVERLAY = 0x00000002;
enum DDVPB_TYPE = 0x00000004;
enum DDVPBCAPS_SOURCE = 0x00000001;
enum DDVPBCAPS_DESTINATION = 0x00000002;
enum DDVPCREATE_VBIONLY = 0x00000001;
enum DDVPCREATE_VIDEOONLY = 0x00000002;
enum DDVPSTATUS_VBIONLY = 0x00000001;
enum DDVPSTATUS_VIDEOONLY = 0x00000002;
enum GUID_DxApi = GUID(0x8a79bef0, 0xb915, 0x11d0, [0x91, 0x44, 0x8, 0x0, 0x36, 0xd2, 0xef, 0x2]);
enum MDL_MAPPED_TO_SYSTEM_VA = 0x00000001;
enum MDL_PAGES_LOCKED = 0x00000002;
enum MDL_SOURCE_IS_NONPAGED_POOL = 0x00000004;
enum MDL_ALLOCATED_FIXED_SIZE = 0x00000008;
enum MDL_PARTIAL = 0x00000010;
enum MDL_PARTIAL_HAS_BEEN_MAPPED = 0x00000020;
enum MDL_IO_PAGE_READ = 0x00000040;
enum MDL_WRITE_OPERATION = 0x00000080;
enum MDL_PARENT_MAPPED_SYSTEM_VA = 0x00000100;
enum MDL_LOCK_HELD = 0x00000200;
enum MDL_SCATTER_GATHER_VA = 0x00000400;
enum MDL_IO_SPACE = 0x00000800;
enum MDL_NETWORK_HEADER = 0x00001000;
enum MDL_MAPPING_CAN_FAIL = 0x00002000;
enum MDL_ALLOCATED_MUST_SUCCEED = 0x00004000;
enum MDL_64_BIT_VA = 0x00008000;
enum DX_OK = 0x00000000;
enum DXERR_UNSUPPORTED = 0x80004001;
enum DXERR_GENERIC = 0x80004005;
enum DXERR_OUTOFCAPS = 0x88760168;
enum DDIRQ_BUSMASTER = 0x00000002;
enum IRQINFO_HANDLED = 0x00000001;
enum IRQINFO_NOTHANDLED = 0x00000002;
enum DDSKIP_SKIPNEXT = 0x00000001;
enum DDSKIP_ENABLENEXT = 0x00000002;
enum DDTRANSFER_SYSTEMMEMORY = 0x00000001;
enum DDTRANSFER_NONLOCALVIDMEM = 0x00000002;
enum DDTRANSFER_INVERT = 0x00000004;
enum DDTRANSFER_CANCEL = 0x00000080;
enum DDTRANSFER_HALFLINES = 0x00000100;
enum DXAPI_HALVERSION = 0x00000001;
alias PDD_DESTROYDRIVERDATA = long;
alias PDD_GETVPORTAUTOFLIPSURFACEDATA = long;
alias PDD_SETMODEDATA = long;
alias LPDDFXROP = long;
alias LPDDENUMCALLBACKA = BOOL function(GUID*, PSTR, PSTR, void*);
alias LPDDENUMCALLBACKW = BOOL function(GUID*, PWSTR, PWSTR, void*);
alias LPDDENUMCALLBACKEXA = BOOL function(GUID*, PSTR, PSTR, void*, HMONITOR);
alias LPDDENUMCALLBACKEXW = BOOL function(GUID*, PWSTR, PWSTR, void*, HMONITOR);
alias LPDIRECTDRAWENUMERATEEXA = HRESULT function(LPDDENUMCALLBACKEXA, void*, uint);
alias LPDIRECTDRAWENUMERATEEXW = HRESULT function(LPDDENUMCALLBACKEXW, void*, uint);
alias LPDDENUMMODESCALLBACK = HRESULT function(DDSURFACEDESC*, void*);
alias LPDDENUMMODESCALLBACK2 = HRESULT function(DDSURFACEDESC2*, void*);
alias LPDDENUMSURFACESCALLBACK = HRESULT function(IDirectDrawSurface, DDSURFACEDESC*, void*);
alias LPDDENUMSURFACESCALLBACK2 = HRESULT function(IDirectDrawSurface4, DDSURFACEDESC2*, void*);
alias LPDDENUMSURFACESCALLBACK7 = HRESULT function(IDirectDrawSurface7, DDSURFACEDESC2*, void*);
struct DDARGB
{
    ubyte blue;
    ubyte green;
    ubyte red;
    ubyte alpha;
}
struct DDRGBA
{
    ubyte red;
    ubyte green;
    ubyte blue;
    ubyte alpha;
}
struct DDCOLORKEY
{
    uint dwColorSpaceLowValue;
    uint dwColorSpaceHighValue;
}
struct DDBLTFX
{
    uint dwSize;
    uint dwDDFX;
    uint dwROP;
    uint dwDDROP;
    uint dwRotationAngle;
    uint dwZBufferOpCode;
    uint dwZBufferLow;
    uint dwZBufferHigh;
    uint dwZBufferBaseDest;
    uint dwZDestConstBitDepth;
    union
    {
        uint dwZDestConst;
        IDirectDrawSurface lpDDSZBufferDest;
    }
    uint dwZSrcConstBitDepth;
    union
    {
        uint dwZSrcConst;
        IDirectDrawSurface lpDDSZBufferSrc;
    }
    uint dwAlphaEdgeBlendBitDepth;
    uint dwAlphaEdgeBlend;
    uint dwReserved;
    uint dwAlphaDestConstBitDepth;
    union
    {
        uint dwAlphaDestConst;
        IDirectDrawSurface lpDDSAlphaDest;
    }
    uint dwAlphaSrcConstBitDepth;
    union
    {
        uint dwAlphaSrcConst;
        IDirectDrawSurface lpDDSAlphaSrc;
    }
    union
    {
        uint dwFillColor;
        uint dwFillDepth;
        uint dwFillPixel;
        IDirectDrawSurface lpDDSPattern;
    }
    DDCOLORKEY ddckDestColorkey;
    DDCOLORKEY ddckSrcColorkey;
}
struct DDSCAPS
{
    uint dwCaps;
}
struct DDOSCAPS
{
    uint dwCaps;
}
struct DDSCAPSEX
{
    uint dwCaps2;
    uint dwCaps3;
    union
    {
        uint dwCaps4;
        uint dwVolumeDepth;
    }
}
struct DDSCAPS2
{
    uint dwCaps;
    uint dwCaps2;
    uint dwCaps3;
    union
    {
        uint dwCaps4;
        uint dwVolumeDepth;
    }
}
struct DDCAPS_DX1
{
    uint dwSize;
    uint dwCaps;
    uint dwCaps2;
    uint dwCKeyCaps;
    uint dwFXCaps;
    uint dwFXAlphaCaps;
    uint dwPalCaps;
    uint dwSVCaps;
    uint dwAlphaBltConstBitDepths;
    uint dwAlphaBltPixelBitDepths;
    uint dwAlphaBltSurfaceBitDepths;
    uint dwAlphaOverlayConstBitDepths;
    uint dwAlphaOverlayPixelBitDepths;
    uint dwAlphaOverlaySurfaceBitDepths;
    uint dwZBufferBitDepths;
    uint dwVidMemTotal;
    uint dwVidMemFree;
    uint dwMaxVisibleOverlays;
    uint dwCurrVisibleOverlays;
    uint dwNumFourCCCodes;
    uint dwAlignBoundarySrc;
    uint dwAlignSizeSrc;
    uint dwAlignBoundaryDest;
    uint dwAlignSizeDest;
    uint dwAlignStrideAlign;
    uint[8] dwRops;
    DDSCAPS ddsCaps;
    uint dwMinOverlayStretch;
    uint dwMaxOverlayStretch;
    uint dwMinLiveVideoStretch;
    uint dwMaxLiveVideoStretch;
    uint dwMinHwCodecStretch;
    uint dwMaxHwCodecStretch;
    uint dwReserved1;
    uint dwReserved2;
    uint dwReserved3;
}
struct DDCAPS_DX3
{
    uint dwSize;
    uint dwCaps;
    uint dwCaps2;
    uint dwCKeyCaps;
    uint dwFXCaps;
    uint dwFXAlphaCaps;
    uint dwPalCaps;
    uint dwSVCaps;
    uint dwAlphaBltConstBitDepths;
    uint dwAlphaBltPixelBitDepths;
    uint dwAlphaBltSurfaceBitDepths;
    uint dwAlphaOverlayConstBitDepths;
    uint dwAlphaOverlayPixelBitDepths;
    uint dwAlphaOverlaySurfaceBitDepths;
    uint dwZBufferBitDepths;
    uint dwVidMemTotal;
    uint dwVidMemFree;
    uint dwMaxVisibleOverlays;
    uint dwCurrVisibleOverlays;
    uint dwNumFourCCCodes;
    uint dwAlignBoundarySrc;
    uint dwAlignSizeSrc;
    uint dwAlignBoundaryDest;
    uint dwAlignSizeDest;
    uint dwAlignStrideAlign;
    uint[8] dwRops;
    DDSCAPS ddsCaps;
    uint dwMinOverlayStretch;
    uint dwMaxOverlayStretch;
    uint dwMinLiveVideoStretch;
    uint dwMaxLiveVideoStretch;
    uint dwMinHwCodecStretch;
    uint dwMaxHwCodecStretch;
    uint dwReserved1;
    uint dwReserved2;
    uint dwReserved3;
    uint dwSVBCaps;
    uint dwSVBCKeyCaps;
    uint dwSVBFXCaps;
    uint[8] dwSVBRops;
    uint dwVSBCaps;
    uint dwVSBCKeyCaps;
    uint dwVSBFXCaps;
    uint[8] dwVSBRops;
    uint dwSSBCaps;
    uint dwSSBCKeyCaps;
    uint dwSSBFXCaps;
    uint[8] dwSSBRops;
    uint dwReserved4;
    uint dwReserved5;
    uint dwReserved6;
}
struct DDCAPS_DX5
{
    uint dwSize;
    uint dwCaps;
    uint dwCaps2;
    uint dwCKeyCaps;
    uint dwFXCaps;
    uint dwFXAlphaCaps;
    uint dwPalCaps;
    uint dwSVCaps;
    uint dwAlphaBltConstBitDepths;
    uint dwAlphaBltPixelBitDepths;
    uint dwAlphaBltSurfaceBitDepths;
    uint dwAlphaOverlayConstBitDepths;
    uint dwAlphaOverlayPixelBitDepths;
    uint dwAlphaOverlaySurfaceBitDepths;
    uint dwZBufferBitDepths;
    uint dwVidMemTotal;
    uint dwVidMemFree;
    uint dwMaxVisibleOverlays;
    uint dwCurrVisibleOverlays;
    uint dwNumFourCCCodes;
    uint dwAlignBoundarySrc;
    uint dwAlignSizeSrc;
    uint dwAlignBoundaryDest;
    uint dwAlignSizeDest;
    uint dwAlignStrideAlign;
    uint[8] dwRops;
    DDSCAPS ddsCaps;
    uint dwMinOverlayStretch;
    uint dwMaxOverlayStretch;
    uint dwMinLiveVideoStretch;
    uint dwMaxLiveVideoStretch;
    uint dwMinHwCodecStretch;
    uint dwMaxHwCodecStretch;
    uint dwReserved1;
    uint dwReserved2;
    uint dwReserved3;
    uint dwSVBCaps;
    uint dwSVBCKeyCaps;
    uint dwSVBFXCaps;
    uint[8] dwSVBRops;
    uint dwVSBCaps;
    uint dwVSBCKeyCaps;
    uint dwVSBFXCaps;
    uint[8] dwVSBRops;
    uint dwSSBCaps;
    uint dwSSBCKeyCaps;
    uint dwSSBFXCaps;
    uint[8] dwSSBRops;
    uint dwMaxVideoPorts;
    uint dwCurrVideoPorts;
    uint dwSVBCaps2;
    uint dwNLVBCaps;
    uint dwNLVBCaps2;
    uint dwNLVBCKeyCaps;
    uint dwNLVBFXCaps;
    uint[8] dwNLVBRops;
}
struct DDCAPS_DX6
{
    uint dwSize;
    uint dwCaps;
    uint dwCaps2;
    uint dwCKeyCaps;
    uint dwFXCaps;
    uint dwFXAlphaCaps;
    uint dwPalCaps;
    uint dwSVCaps;
    uint dwAlphaBltConstBitDepths;
    uint dwAlphaBltPixelBitDepths;
    uint dwAlphaBltSurfaceBitDepths;
    uint dwAlphaOverlayConstBitDepths;
    uint dwAlphaOverlayPixelBitDepths;
    uint dwAlphaOverlaySurfaceBitDepths;
    uint dwZBufferBitDepths;
    uint dwVidMemTotal;
    uint dwVidMemFree;
    uint dwMaxVisibleOverlays;
    uint dwCurrVisibleOverlays;
    uint dwNumFourCCCodes;
    uint dwAlignBoundarySrc;
    uint dwAlignSizeSrc;
    uint dwAlignBoundaryDest;
    uint dwAlignSizeDest;
    uint dwAlignStrideAlign;
    uint[8] dwRops;
    DDSCAPS ddsOldCaps;
    uint dwMinOverlayStretch;
    uint dwMaxOverlayStretch;
    uint dwMinLiveVideoStretch;
    uint dwMaxLiveVideoStretch;
    uint dwMinHwCodecStretch;
    uint dwMaxHwCodecStretch;
    uint dwReserved1;
    uint dwReserved2;
    uint dwReserved3;
    uint dwSVBCaps;
    uint dwSVBCKeyCaps;
    uint dwSVBFXCaps;
    uint[8] dwSVBRops;
    uint dwVSBCaps;
    uint dwVSBCKeyCaps;
    uint dwVSBFXCaps;
    uint[8] dwVSBRops;
    uint dwSSBCaps;
    uint dwSSBCKeyCaps;
    uint dwSSBFXCaps;
    uint[8] dwSSBRops;
    uint dwMaxVideoPorts;
    uint dwCurrVideoPorts;
    uint dwSVBCaps2;
    uint dwNLVBCaps;
    uint dwNLVBCaps2;
    uint dwNLVBCKeyCaps;
    uint dwNLVBFXCaps;
    uint[8] dwNLVBRops;
    DDSCAPS2 ddsCaps;
}
struct DDCAPS_DX7
{
    uint dwSize;
    uint dwCaps;
    uint dwCaps2;
    uint dwCKeyCaps;
    uint dwFXCaps;
    uint dwFXAlphaCaps;
    uint dwPalCaps;
    uint dwSVCaps;
    uint dwAlphaBltConstBitDepths;
    uint dwAlphaBltPixelBitDepths;
    uint dwAlphaBltSurfaceBitDepths;
    uint dwAlphaOverlayConstBitDepths;
    uint dwAlphaOverlayPixelBitDepths;
    uint dwAlphaOverlaySurfaceBitDepths;
    uint dwZBufferBitDepths;
    uint dwVidMemTotal;
    uint dwVidMemFree;
    uint dwMaxVisibleOverlays;
    uint dwCurrVisibleOverlays;
    uint dwNumFourCCCodes;
    uint dwAlignBoundarySrc;
    uint dwAlignSizeSrc;
    uint dwAlignBoundaryDest;
    uint dwAlignSizeDest;
    uint dwAlignStrideAlign;
    uint[8] dwRops;
    DDSCAPS ddsOldCaps;
    uint dwMinOverlayStretch;
    uint dwMaxOverlayStretch;
    uint dwMinLiveVideoStretch;
    uint dwMaxLiveVideoStretch;
    uint dwMinHwCodecStretch;
    uint dwMaxHwCodecStretch;
    uint dwReserved1;
    uint dwReserved2;
    uint dwReserved3;
    uint dwSVBCaps;
    uint dwSVBCKeyCaps;
    uint dwSVBFXCaps;
    uint[8] dwSVBRops;
    uint dwVSBCaps;
    uint dwVSBCKeyCaps;
    uint dwVSBFXCaps;
    uint[8] dwVSBRops;
    uint dwSSBCaps;
    uint dwSSBCKeyCaps;
    uint dwSSBFXCaps;
    uint[8] dwSSBRops;
    uint dwMaxVideoPorts;
    uint dwCurrVideoPorts;
    uint dwSVBCaps2;
    uint dwNLVBCaps;
    uint dwNLVBCaps2;
    uint dwNLVBCKeyCaps;
    uint dwNLVBFXCaps;
    uint[8] dwNLVBRops;
    DDSCAPS2 ddsCaps;
}
struct DDPIXELFORMAT
{
    uint dwSize;
    uint dwFlags;
    uint dwFourCC;
    union
    {
        uint dwRGBBitCount;
        uint dwYUVBitCount;
        uint dwZBufferBitDepth;
        uint dwAlphaBitDepth;
        uint dwLuminanceBitCount;
        uint dwBumpBitCount;
        uint dwPrivateFormatBitCount;
    }
    union
    {
        uint dwRBitMask;
        uint dwYBitMask;
        uint dwStencilBitDepth;
        uint dwLuminanceBitMask;
        uint dwBumpDuBitMask;
        uint dwOperations;
    }
    union
    {
        uint dwGBitMask;
        uint dwUBitMask;
        uint dwZBitMask;
        uint dwBumpDvBitMask;
        struct MultiSampleCaps
        {
            ushort wFlipMSTypes;
            ushort wBltMSTypes;
        }
    }
    union
    {
        uint dwBBitMask;
        uint dwVBitMask;
        uint dwStencilBitMask;
        uint dwBumpLuminanceBitMask;
    }
    union
    {
        uint dwRGBAlphaBitMask;
        uint dwYUVAlphaBitMask;
        uint dwLuminanceAlphaBitMask;
        uint dwRGBZBitMask;
        uint dwYUVZBitMask;
    }
}
struct DDOVERLAYFX
{
    uint dwSize;
    uint dwAlphaEdgeBlendBitDepth;
    uint dwAlphaEdgeBlend;
    uint dwReserved;
    uint dwAlphaDestConstBitDepth;
    union
    {
        uint dwAlphaDestConst;
        IDirectDrawSurface lpDDSAlphaDest;
    }
    uint dwAlphaSrcConstBitDepth;
    union
    {
        uint dwAlphaSrcConst;
        IDirectDrawSurface lpDDSAlphaSrc;
    }
    DDCOLORKEY dckDestColorkey;
    DDCOLORKEY dckSrcColorkey;
    uint dwDDFX;
    uint dwFlags;
}
struct DDBLTBATCH
{
    RECT* lprDest;
    IDirectDrawSurface lpDDSSrc;
    RECT* lprSrc;
    uint dwFlags;
    DDBLTFX* lpDDBltFx;
}
struct DDGAMMARAMP
{
    ushort[256] red;
    ushort[256] green;
    ushort[256] blue;
}
struct DDDEVICEIDENTIFIER
{
    CHAR[512] szDriver;
    CHAR[512] szDescription;
    long liDriverVersion;
    uint dwVendorId;
    uint dwDeviceId;
    uint dwSubSysId;
    uint dwRevision;
    GUID guidDeviceIdentifier;
}
struct DDDEVICEIDENTIFIER2
{
    CHAR[512] szDriver;
    CHAR[512] szDescription;
    long liDriverVersion;
    uint dwVendorId;
    uint dwDeviceId;
    uint dwSubSysId;
    uint dwRevision;
    GUID guidDeviceIdentifier;
    uint dwWHQLLevel;
}
alias LPCLIPPERCALLBACK = uint function(IDirectDrawClipper, HWND, uint, void*);
enum IID_IDirectDraw = GUID(0x6c14db80, 0xa733, 0x11ce, [0xa5, 0x21, 0x0, 0x20, 0xaf, 0xb, 0xe5, 0x60]);
interface IDirectDraw : IUnknown
{
    HRESULT Compact();
    HRESULT CreateClipper(uint, IDirectDrawClipper*, IUnknown);
    HRESULT CreatePalette(uint, PALETTEENTRY*, IDirectDrawPalette*, IUnknown);
    HRESULT CreateSurface(DDSURFACEDESC*, IDirectDrawSurface*, IUnknown);
    HRESULT DuplicateSurface(IDirectDrawSurface, IDirectDrawSurface*);
    HRESULT EnumDisplayModes(uint, DDSURFACEDESC*, void*, LPDDENUMMODESCALLBACK);
    HRESULT EnumSurfaces(uint, DDSURFACEDESC*, void*, LPDDENUMSURFACESCALLBACK);
    HRESULT FlipToGDISurface();
    HRESULT GetCaps(DDCAPS_DX7*, DDCAPS_DX7*);
    HRESULT GetDisplayMode(DDSURFACEDESC*);
    HRESULT GetFourCCCodes(uint*, uint*);
    HRESULT GetGDISurface(IDirectDrawSurface*);
    HRESULT GetMonitorFrequency(uint*);
    HRESULT GetScanLine(uint*);
    HRESULT GetVerticalBlankStatus(BOOL*);
    HRESULT Initialize(GUID*);
    HRESULT RestoreDisplayMode();
    HRESULT SetCooperativeLevel(HWND, uint);
    HRESULT SetDisplayMode(uint, uint, uint);
    HRESULT WaitForVerticalBlank(uint, HANDLE);
}
enum IID_IDirectDraw2 = GUID(0xb3a6f3e0, 0x2b43, 0x11cf, [0xa2, 0xde, 0x0, 0xaa, 0x0, 0xb9, 0x33, 0x56]);
interface IDirectDraw2 : IUnknown
{
    HRESULT Compact();
    HRESULT CreateClipper(uint, IDirectDrawClipper*, IUnknown);
    HRESULT CreatePalette(uint, PALETTEENTRY*, IDirectDrawPalette*, IUnknown);
    HRESULT CreateSurface(DDSURFACEDESC*, IDirectDrawSurface*, IUnknown);
    HRESULT DuplicateSurface(IDirectDrawSurface, IDirectDrawSurface*);
    HRESULT EnumDisplayModes(uint, DDSURFACEDESC*, void*, LPDDENUMMODESCALLBACK);
    HRESULT EnumSurfaces(uint, DDSURFACEDESC*, void*, LPDDENUMSURFACESCALLBACK);
    HRESULT FlipToGDISurface();
    HRESULT GetCaps(DDCAPS_DX7*, DDCAPS_DX7*);
    HRESULT GetDisplayMode(DDSURFACEDESC*);
    HRESULT GetFourCCCodes(uint*, uint*);
    HRESULT GetGDISurface(IDirectDrawSurface*);
    HRESULT GetMonitorFrequency(uint*);
    HRESULT GetScanLine(uint*);
    HRESULT GetVerticalBlankStatus(BOOL*);
    HRESULT Initialize(GUID*);
    HRESULT RestoreDisplayMode();
    HRESULT SetCooperativeLevel(HWND, uint);
    HRESULT SetDisplayMode(uint, uint, uint, uint, uint);
    HRESULT WaitForVerticalBlank(uint, HANDLE);
    HRESULT GetAvailableVidMem(DDSCAPS*, uint*, uint*);
}
enum IID_IDirectDraw4 = GUID(0x9c59509a, 0x39bd, 0x11d1, [0x8c, 0x4a, 0x0, 0xc0, 0x4f, 0xd9, 0x30, 0xc5]);
interface IDirectDraw4 : IUnknown
{
    HRESULT Compact();
    HRESULT CreateClipper(uint, IDirectDrawClipper*, IUnknown);
    HRESULT CreatePalette(uint, PALETTEENTRY*, IDirectDrawPalette*, IUnknown);
    HRESULT CreateSurface(DDSURFACEDESC2*, IDirectDrawSurface4*, IUnknown);
    HRESULT DuplicateSurface(IDirectDrawSurface4, IDirectDrawSurface4*);
    HRESULT EnumDisplayModes(uint, DDSURFACEDESC2*, void*, LPDDENUMMODESCALLBACK2);
    HRESULT EnumSurfaces(uint, DDSURFACEDESC2*, void*, LPDDENUMSURFACESCALLBACK2);
    HRESULT FlipToGDISurface();
    HRESULT GetCaps(DDCAPS_DX7*, DDCAPS_DX7*);
    HRESULT GetDisplayMode(DDSURFACEDESC2*);
    HRESULT GetFourCCCodes(uint*, uint*);
    HRESULT GetGDISurface(IDirectDrawSurface4*);
    HRESULT GetMonitorFrequency(uint*);
    HRESULT GetScanLine(uint*);
    HRESULT GetVerticalBlankStatus(BOOL*);
    HRESULT Initialize(GUID*);
    HRESULT RestoreDisplayMode();
    HRESULT SetCooperativeLevel(HWND, uint);
    HRESULT SetDisplayMode(uint, uint, uint, uint, uint);
    HRESULT WaitForVerticalBlank(uint, HANDLE);
    HRESULT GetAvailableVidMem(DDSCAPS2*, uint*, uint*);
    HRESULT GetSurfaceFromDC(HDC, IDirectDrawSurface4*);
    HRESULT RestoreAllSurfaces();
    HRESULT TestCooperativeLevel();
    HRESULT GetDeviceIdentifier(DDDEVICEIDENTIFIER*, uint);
}
enum IID_IDirectDraw7 = GUID(0x15e65ec0, 0x3b9c, 0x11d2, [0xb9, 0x2f, 0x0, 0x60, 0x97, 0x97, 0xea, 0x5b]);
interface IDirectDraw7 : IUnknown
{
    HRESULT Compact();
    HRESULT CreateClipper(uint, IDirectDrawClipper*, IUnknown);
    HRESULT CreatePalette(uint, PALETTEENTRY*, IDirectDrawPalette*, IUnknown);
    HRESULT CreateSurface(DDSURFACEDESC2*, IDirectDrawSurface7*, IUnknown);
    HRESULT DuplicateSurface(IDirectDrawSurface7, IDirectDrawSurface7*);
    HRESULT EnumDisplayModes(uint, DDSURFACEDESC2*, void*, LPDDENUMMODESCALLBACK2);
    HRESULT EnumSurfaces(uint, DDSURFACEDESC2*, void*, LPDDENUMSURFACESCALLBACK7);
    HRESULT FlipToGDISurface();
    HRESULT GetCaps(DDCAPS_DX7*, DDCAPS_DX7*);
    HRESULT GetDisplayMode(DDSURFACEDESC2*);
    HRESULT GetFourCCCodes(uint*, uint*);
    HRESULT GetGDISurface(IDirectDrawSurface7*);
    HRESULT GetMonitorFrequency(uint*);
    HRESULT GetScanLine(uint*);
    HRESULT GetVerticalBlankStatus(BOOL*);
    HRESULT Initialize(GUID*);
    HRESULT RestoreDisplayMode();
    HRESULT SetCooperativeLevel(HWND, uint);
    HRESULT SetDisplayMode(uint, uint, uint, uint, uint);
    HRESULT WaitForVerticalBlank(uint, HANDLE);
    HRESULT GetAvailableVidMem(DDSCAPS2*, uint*, uint*);
    HRESULT GetSurfaceFromDC(HDC, IDirectDrawSurface7*);
    HRESULT RestoreAllSurfaces();
    HRESULT TestCooperativeLevel();
    HRESULT GetDeviceIdentifier(DDDEVICEIDENTIFIER2*, uint);
    HRESULT StartModeTest(SIZE*, uint, uint);
    HRESULT EvaluateMode(uint, uint*);
}
enum IID_IDirectDrawPalette = GUID(0x6c14db84, 0xa733, 0x11ce, [0xa5, 0x21, 0x0, 0x20, 0xaf, 0xb, 0xe5, 0x60]);
interface IDirectDrawPalette : IUnknown
{
    HRESULT GetCaps(uint*);
    HRESULT GetEntries(uint, uint, uint, PALETTEENTRY*);
    HRESULT Initialize(IDirectDraw, uint, PALETTEENTRY*);
    HRESULT SetEntries(uint, uint, uint, PALETTEENTRY*);
}
enum IID_IDirectDrawClipper = GUID(0x6c14db85, 0xa733, 0x11ce, [0xa5, 0x21, 0x0, 0x20, 0xaf, 0xb, 0xe5, 0x60]);
interface IDirectDrawClipper : IUnknown
{
    HRESULT GetClipList(RECT*, RGNDATA*, uint*);
    HRESULT GetHWnd(HWND*);
    HRESULT Initialize(IDirectDraw, uint);
    HRESULT IsClipListChanged(BOOL*);
    HRESULT SetClipList(RGNDATA*, uint);
    HRESULT SetHWnd(uint, HWND);
}
enum IID_IDirectDrawSurface = GUID(0x6c14db81, 0xa733, 0x11ce, [0xa5, 0x21, 0x0, 0x20, 0xaf, 0xb, 0xe5, 0x60]);
interface IDirectDrawSurface : IUnknown
{
    HRESULT AddAttachedSurface(IDirectDrawSurface);
    HRESULT AddOverlayDirtyRect(RECT*);
    HRESULT Blt(RECT*, IDirectDrawSurface, RECT*, uint, DDBLTFX*);
    HRESULT BltBatch(DDBLTBATCH*, uint, uint);
    HRESULT BltFast(uint, uint, IDirectDrawSurface, RECT*, uint);
    HRESULT DeleteAttachedSurface(uint, IDirectDrawSurface);
    HRESULT EnumAttachedSurfaces(void*, LPDDENUMSURFACESCALLBACK);
    HRESULT EnumOverlayZOrders(uint, void*, LPDDENUMSURFACESCALLBACK);
    HRESULT Flip(IDirectDrawSurface, uint);
    HRESULT GetAttachedSurface(DDSCAPS*, IDirectDrawSurface*);
    HRESULT GetBltStatus(uint);
    HRESULT GetCaps(DDSCAPS*);
    HRESULT GetClipper(IDirectDrawClipper*);
    HRESULT GetColorKey(uint, DDCOLORKEY*);
    HRESULT GetDC(HDC*);
    HRESULT GetFlipStatus(uint);
    HRESULT GetOverlayPosition(int*, int*);
    HRESULT GetPalette(IDirectDrawPalette*);
    HRESULT GetPixelFormat(DDPIXELFORMAT*);
    HRESULT GetSurfaceDesc(DDSURFACEDESC*);
    HRESULT Initialize(IDirectDraw, DDSURFACEDESC*);
    HRESULT IsLost();
    HRESULT Lock(RECT*, DDSURFACEDESC*, uint, HANDLE);
    HRESULT ReleaseDC(HDC);
    HRESULT Restore();
    HRESULT SetClipper(IDirectDrawClipper);
    HRESULT SetColorKey(uint, DDCOLORKEY*);
    HRESULT SetOverlayPosition(int, int);
    HRESULT SetPalette(IDirectDrawPalette);
    HRESULT Unlock(void*);
    HRESULT UpdateOverlay(RECT*, IDirectDrawSurface, RECT*, uint, DDOVERLAYFX*);
    HRESULT UpdateOverlayDisplay(uint);
    HRESULT UpdateOverlayZOrder(uint, IDirectDrawSurface);
}
enum IID_IDirectDrawSurface2 = GUID(0x57805885, 0x6eec, 0x11cf, [0x94, 0x41, 0xa8, 0x23, 0x3, 0xc1, 0xe, 0x27]);
interface IDirectDrawSurface2 : IUnknown
{
    HRESULT AddAttachedSurface(IDirectDrawSurface2);
    HRESULT AddOverlayDirtyRect(RECT*);
    HRESULT Blt(RECT*, IDirectDrawSurface2, RECT*, uint, DDBLTFX*);
    HRESULT BltBatch(DDBLTBATCH*, uint, uint);
    HRESULT BltFast(uint, uint, IDirectDrawSurface2, RECT*, uint);
    HRESULT DeleteAttachedSurface(uint, IDirectDrawSurface2);
    HRESULT EnumAttachedSurfaces(void*, LPDDENUMSURFACESCALLBACK);
    HRESULT EnumOverlayZOrders(uint, void*, LPDDENUMSURFACESCALLBACK);
    HRESULT Flip(IDirectDrawSurface2, uint);
    HRESULT GetAttachedSurface(DDSCAPS*, IDirectDrawSurface2*);
    HRESULT GetBltStatus(uint);
    HRESULT GetCaps(DDSCAPS*);
    HRESULT GetClipper(IDirectDrawClipper*);
    HRESULT GetColorKey(uint, DDCOLORKEY*);
    HRESULT GetDC(HDC*);
    HRESULT GetFlipStatus(uint);
    HRESULT GetOverlayPosition(int*, int*);
    HRESULT GetPalette(IDirectDrawPalette*);
    HRESULT GetPixelFormat(DDPIXELFORMAT*);
    HRESULT GetSurfaceDesc(DDSURFACEDESC*);
    HRESULT Initialize(IDirectDraw, DDSURFACEDESC*);
    HRESULT IsLost();
    HRESULT Lock(RECT*, DDSURFACEDESC*, uint, HANDLE);
    HRESULT ReleaseDC(HDC);
    HRESULT Restore();
    HRESULT SetClipper(IDirectDrawClipper);
    HRESULT SetColorKey(uint, DDCOLORKEY*);
    HRESULT SetOverlayPosition(int, int);
    HRESULT SetPalette(IDirectDrawPalette);
    HRESULT Unlock(void*);
    HRESULT UpdateOverlay(RECT*, IDirectDrawSurface2, RECT*, uint, DDOVERLAYFX*);
    HRESULT UpdateOverlayDisplay(uint);
    HRESULT UpdateOverlayZOrder(uint, IDirectDrawSurface2);
    HRESULT GetDDInterface(void**);
    HRESULT PageLock(uint);
    HRESULT PageUnlock(uint);
}
enum IID_IDirectDrawSurface3 = GUID(0xda044e00, 0x69b2, 0x11d0, [0xa1, 0xd5, 0x0, 0xaa, 0x0, 0xb8, 0xdf, 0xbb]);
interface IDirectDrawSurface3 : IUnknown
{
    HRESULT AddAttachedSurface(IDirectDrawSurface3);
    HRESULT AddOverlayDirtyRect(RECT*);
    HRESULT Blt(RECT*, IDirectDrawSurface3, RECT*, uint, DDBLTFX*);
    HRESULT BltBatch(DDBLTBATCH*, uint, uint);
    HRESULT BltFast(uint, uint, IDirectDrawSurface3, RECT*, uint);
    HRESULT DeleteAttachedSurface(uint, IDirectDrawSurface3);
    HRESULT EnumAttachedSurfaces(void*, LPDDENUMSURFACESCALLBACK);
    HRESULT EnumOverlayZOrders(uint, void*, LPDDENUMSURFACESCALLBACK);
    HRESULT Flip(IDirectDrawSurface3, uint);
    HRESULT GetAttachedSurface(DDSCAPS*, IDirectDrawSurface3*);
    HRESULT GetBltStatus(uint);
    HRESULT GetCaps(DDSCAPS*);
    HRESULT GetClipper(IDirectDrawClipper*);
    HRESULT GetColorKey(uint, DDCOLORKEY*);
    HRESULT GetDC(HDC*);
    HRESULT GetFlipStatus(uint);
    HRESULT GetOverlayPosition(int*, int*);
    HRESULT GetPalette(IDirectDrawPalette*);
    HRESULT GetPixelFormat(DDPIXELFORMAT*);
    HRESULT GetSurfaceDesc(DDSURFACEDESC*);
    HRESULT Initialize(IDirectDraw, DDSURFACEDESC*);
    HRESULT IsLost();
    HRESULT Lock(RECT*, DDSURFACEDESC*, uint, HANDLE);
    HRESULT ReleaseDC(HDC);
    HRESULT Restore();
    HRESULT SetClipper(IDirectDrawClipper);
    HRESULT SetColorKey(uint, DDCOLORKEY*);
    HRESULT SetOverlayPosition(int, int);
    HRESULT SetPalette(IDirectDrawPalette);
    HRESULT Unlock(void*);
    HRESULT UpdateOverlay(RECT*, IDirectDrawSurface3, RECT*, uint, DDOVERLAYFX*);
    HRESULT UpdateOverlayDisplay(uint);
    HRESULT UpdateOverlayZOrder(uint, IDirectDrawSurface3);
    HRESULT GetDDInterface(void**);
    HRESULT PageLock(uint);
    HRESULT PageUnlock(uint);
    HRESULT SetSurfaceDesc(DDSURFACEDESC*, uint);
}
enum IID_IDirectDrawSurface4 = GUID(0xb2b8630, 0xad35, 0x11d0, [0x8e, 0xa6, 0x0, 0x60, 0x97, 0x97, 0xea, 0x5b]);
interface IDirectDrawSurface4 : IUnknown
{
    HRESULT AddAttachedSurface(IDirectDrawSurface4);
    HRESULT AddOverlayDirtyRect(RECT*);
    HRESULT Blt(RECT*, IDirectDrawSurface4, RECT*, uint, DDBLTFX*);
    HRESULT BltBatch(DDBLTBATCH*, uint, uint);
    HRESULT BltFast(uint, uint, IDirectDrawSurface4, RECT*, uint);
    HRESULT DeleteAttachedSurface(uint, IDirectDrawSurface4);
    HRESULT EnumAttachedSurfaces(void*, LPDDENUMSURFACESCALLBACK2);
    HRESULT EnumOverlayZOrders(uint, void*, LPDDENUMSURFACESCALLBACK2);
    HRESULT Flip(IDirectDrawSurface4, uint);
    HRESULT GetAttachedSurface(DDSCAPS2*, IDirectDrawSurface4*);
    HRESULT GetBltStatus(uint);
    HRESULT GetCaps(DDSCAPS2*);
    HRESULT GetClipper(IDirectDrawClipper*);
    HRESULT GetColorKey(uint, DDCOLORKEY*);
    HRESULT GetDC(HDC*);
    HRESULT GetFlipStatus(uint);
    HRESULT GetOverlayPosition(int*, int*);
    HRESULT GetPalette(IDirectDrawPalette*);
    HRESULT GetPixelFormat(DDPIXELFORMAT*);
    HRESULT GetSurfaceDesc(DDSURFACEDESC2*);
    HRESULT Initialize(IDirectDraw, DDSURFACEDESC2*);
    HRESULT IsLost();
    HRESULT Lock(RECT*, DDSURFACEDESC2*, uint, HANDLE);
    HRESULT ReleaseDC(HDC);
    HRESULT Restore();
    HRESULT SetClipper(IDirectDrawClipper);
    HRESULT SetColorKey(uint, DDCOLORKEY*);
    HRESULT SetOverlayPosition(int, int);
    HRESULT SetPalette(IDirectDrawPalette);
    HRESULT Unlock(RECT*);
    HRESULT UpdateOverlay(RECT*, IDirectDrawSurface4, RECT*, uint, DDOVERLAYFX*);
    HRESULT UpdateOverlayDisplay(uint);
    HRESULT UpdateOverlayZOrder(uint, IDirectDrawSurface4);
    HRESULT GetDDInterface(void**);
    HRESULT PageLock(uint);
    HRESULT PageUnlock(uint);
    HRESULT SetSurfaceDesc(DDSURFACEDESC2*, uint);
    HRESULT SetPrivateData(const(GUID)*, void*, uint, uint);
    HRESULT GetPrivateData(const(GUID)*, void*, uint*);
    HRESULT FreePrivateData(const(GUID)*);
    HRESULT GetUniquenessValue(uint*);
    HRESULT ChangeUniquenessValue();
}
enum IID_IDirectDrawSurface7 = GUID(0x6675a80, 0x3b9b, 0x11d2, [0xb9, 0x2f, 0x0, 0x60, 0x97, 0x97, 0xea, 0x5b]);
interface IDirectDrawSurface7 : IUnknown
{
    HRESULT AddAttachedSurface(IDirectDrawSurface7);
    HRESULT AddOverlayDirtyRect(RECT*);
    HRESULT Blt(RECT*, IDirectDrawSurface7, RECT*, uint, DDBLTFX*);
    HRESULT BltBatch(DDBLTBATCH*, uint, uint);
    HRESULT BltFast(uint, uint, IDirectDrawSurface7, RECT*, uint);
    HRESULT DeleteAttachedSurface(uint, IDirectDrawSurface7);
    HRESULT EnumAttachedSurfaces(void*, LPDDENUMSURFACESCALLBACK7);
    HRESULT EnumOverlayZOrders(uint, void*, LPDDENUMSURFACESCALLBACK7);
    HRESULT Flip(IDirectDrawSurface7, uint);
    HRESULT GetAttachedSurface(DDSCAPS2*, IDirectDrawSurface7*);
    HRESULT GetBltStatus(uint);
    HRESULT GetCaps(DDSCAPS2*);
    HRESULT GetClipper(IDirectDrawClipper*);
    HRESULT GetColorKey(uint, DDCOLORKEY*);
    HRESULT GetDC(HDC*);
    HRESULT GetFlipStatus(uint);
    HRESULT GetOverlayPosition(int*, int*);
    HRESULT GetPalette(IDirectDrawPalette*);
    HRESULT GetPixelFormat(DDPIXELFORMAT*);
    HRESULT GetSurfaceDesc(DDSURFACEDESC2*);
    HRESULT Initialize(IDirectDraw, DDSURFACEDESC2*);
    HRESULT IsLost();
    HRESULT Lock(RECT*, DDSURFACEDESC2*, uint, HANDLE);
    HRESULT ReleaseDC(HDC);
    HRESULT Restore();
    HRESULT SetClipper(IDirectDrawClipper);
    HRESULT SetColorKey(uint, DDCOLORKEY*);
    HRESULT SetOverlayPosition(int, int);
    HRESULT SetPalette(IDirectDrawPalette);
    HRESULT Unlock(RECT*);
    HRESULT UpdateOverlay(RECT*, IDirectDrawSurface7, RECT*, uint, DDOVERLAYFX*);
    HRESULT UpdateOverlayDisplay(uint);
    HRESULT UpdateOverlayZOrder(uint, IDirectDrawSurface7);
    HRESULT GetDDInterface(void**);
    HRESULT PageLock(uint);
    HRESULT PageUnlock(uint);
    HRESULT SetSurfaceDesc(DDSURFACEDESC2*, uint);
    HRESULT SetPrivateData(const(GUID)*, void*, uint, uint);
    HRESULT GetPrivateData(const(GUID)*, void*, uint*);
    HRESULT FreePrivateData(const(GUID)*);
    HRESULT GetUniquenessValue(uint*);
    HRESULT ChangeUniquenessValue();
    HRESULT SetPriority(uint);
    HRESULT GetPriority(uint*);
    HRESULT SetLOD(uint);
    HRESULT GetLOD(uint*);
}
enum IID_IDirectDrawColorControl = GUID(0x4b9f0ee0, 0xd7e, 0x11d0, [0x9b, 0x6, 0x0, 0xa0, 0xc9, 0x3, 0xa3, 0xb8]);
interface IDirectDrawColorControl : IUnknown
{
    HRESULT GetColorControls(DDCOLORCONTROL*);
    HRESULT SetColorControls(DDCOLORCONTROL*);
}
enum IID_IDirectDrawGammaControl = GUID(0x69c11c3e, 0xb46b, 0x11d1, [0xad, 0x7a, 0x0, 0xc0, 0x4f, 0xc2, 0x9b, 0x4e]);
interface IDirectDrawGammaControl : IUnknown
{
    HRESULT GetGammaRamp(uint, DDGAMMARAMP*);
    HRESULT SetGammaRamp(uint, DDGAMMARAMP*);
}
struct DDSURFACEDESC
{
    uint dwSize;
    uint dwFlags;
    uint dwHeight;
    uint dwWidth;
    union
    {
        int lPitch;
        uint dwLinearSize;
    }
    uint dwBackBufferCount;
    union
    {
        uint dwMipMapCount;
        uint dwZBufferBitDepth;
        uint dwRefreshRate;
    }
    uint dwAlphaBitDepth;
    uint dwReserved;
    void* lpSurface;
    DDCOLORKEY ddckCKDestOverlay;
    DDCOLORKEY ddckCKDestBlt;
    DDCOLORKEY ddckCKSrcOverlay;
    DDCOLORKEY ddckCKSrcBlt;
    DDPIXELFORMAT ddpfPixelFormat;
    DDSCAPS ddsCaps;
}
struct DDSURFACEDESC2
{
    uint dwSize;
    uint dwFlags;
    uint dwHeight;
    uint dwWidth;
    union
    {
        int lPitch;
        uint dwLinearSize;
    }
    union
    {
        uint dwBackBufferCount;
        uint dwDepth;
    }
    union
    {
        uint dwMipMapCount;
        uint dwRefreshRate;
        uint dwSrcVBHandle;
    }
    uint dwAlphaBitDepth;
    uint dwReserved;
    void* lpSurface;
    union
    {
        DDCOLORKEY ddckCKDestOverlay;
        uint dwEmptyFaceColor;
    }
    DDCOLORKEY ddckCKDestBlt;
    DDCOLORKEY ddckCKSrcOverlay;
    DDCOLORKEY ddckCKSrcBlt;
    union
    {
        DDPIXELFORMAT ddpfPixelFormat;
        uint dwFVF;
    }
    DDSCAPS2 ddsCaps;
    uint dwTextureStage;
}
struct DDOPTSURFACEDESC
{
    uint dwSize;
    uint dwFlags;
    DDSCAPS2 ddSCaps;
    DDOSCAPS ddOSCaps;
    GUID guid;
    uint dwCompressionRatio;
}
struct DDCOLORCONTROL
{
    uint dwSize;
    uint dwFlags;
    int lBrightness;
    int lContrast;
    int lHue;
    int lSaturation;
    int lSharpness;
    int lGamma;
    int lColorEnable;
    uint dwReserved1;
}
alias LPDDENUMVIDEOCALLBACK = HRESULT function(DDVIDEOPORTCAPS*, void*);
enum IID_IDDVideoPortContainer = GUID(0x6c142760, 0xa733, 0x11ce, [0xa5, 0x21, 0x0, 0x20, 0xaf, 0xb, 0xe5, 0x60]);
interface IDDVideoPortContainer : IUnknown
{
    HRESULT CreateVideoPort(uint, DDVIDEOPORTDESC*, IDirectDrawVideoPort*, IUnknown);
    HRESULT EnumVideoPorts(uint, DDVIDEOPORTCAPS*, void*, LPDDENUMVIDEOCALLBACK);
    HRESULT GetVideoPortConnectInfo(uint, uint*, DDVIDEOPORTCONNECT*);
    HRESULT QueryVideoPortStatus(uint, DDVIDEOPORTSTATUS*);
}
enum IID_IDirectDrawVideoPort = GUID(0xb36d93e0, 0x2b43, 0x11cf, [0xa2, 0xde, 0x0, 0xaa, 0x0, 0xb9, 0x33, 0x56]);
interface IDirectDrawVideoPort : IUnknown
{
    HRESULT Flip(IDirectDrawSurface, uint);
    HRESULT GetBandwidthInfo(DDPIXELFORMAT*, uint, uint, uint, DDVIDEOPORTBANDWIDTH*);
    HRESULT GetColorControls(DDCOLORCONTROL*);
    HRESULT GetInputFormats(uint*, DDPIXELFORMAT*, uint);
    HRESULT GetOutputFormats(DDPIXELFORMAT*, uint*, DDPIXELFORMAT*, uint);
    HRESULT GetFieldPolarity(BOOL*);
    HRESULT GetVideoLine(uint*);
    HRESULT GetVideoSignalStatus(uint*);
    HRESULT SetColorControls(DDCOLORCONTROL*);
    HRESULT SetTargetSurface(IDirectDrawSurface, uint);
    HRESULT StartVideo(DDVIDEOPORTINFO*);
    HRESULT StopVideo();
    HRESULT UpdateVideo(DDVIDEOPORTINFO*);
    HRESULT WaitForSync(uint, uint, uint);
}
enum IID_IDirectDrawVideoPortNotify = GUID(0xa655fb94, 0x589, 0x4e57, [0xb3, 0x33, 0x56, 0x7a, 0x89, 0x46, 0x8c, 0x88]);
interface IDirectDrawVideoPortNotify : IUnknown
{
    HRESULT AcquireNotification(HANDLE*, DDVIDEOPORTNOTIFY*);
    HRESULT ReleaseNotification(HANDLE);
}
struct DDVIDEOPORTCONNECT
{
    uint dwSize;
    uint dwPortWidth;
    GUID guidTypeID;
    uint dwFlags;
    ulong dwReserved1;
}
struct DDVIDEOPORTCAPS
{
    uint dwSize;
    uint dwFlags;
    uint dwMaxWidth;
    uint dwMaxVBIWidth;
    uint dwMaxHeight;
    uint dwVideoPortID;
    uint dwCaps;
    uint dwFX;
    uint dwNumAutoFlipSurfaces;
    uint dwAlignVideoPortBoundary;
    uint dwAlignVideoPortPrescaleWidth;
    uint dwAlignVideoPortCropBoundary;
    uint dwAlignVideoPortCropWidth;
    uint dwPreshrinkXStep;
    uint dwPreshrinkYStep;
    uint dwNumVBIAutoFlipSurfaces;
    uint dwNumPreferredAutoflip;
    ushort wNumFilterTapsX;
    ushort wNumFilterTapsY;
}
struct DDVIDEOPORTDESC
{
    uint dwSize;
    uint dwFieldWidth;
    uint dwVBIWidth;
    uint dwFieldHeight;
    uint dwMicrosecondsPerField;
    uint dwMaxPixelsPerSecond;
    uint dwVideoPortID;
    uint dwReserved1;
    DDVIDEOPORTCONNECT VideoPortType;
    ulong dwReserved2;
    ulong dwReserved3;
}
struct DDVIDEOPORTINFO
{
    uint dwSize;
    uint dwOriginX;
    uint dwOriginY;
    uint dwVPFlags;
    RECT rCrop;
    uint dwPrescaleWidth;
    uint dwPrescaleHeight;
    DDPIXELFORMAT* lpddpfInputFormat;
    DDPIXELFORMAT* lpddpfVBIInputFormat;
    DDPIXELFORMAT* lpddpfVBIOutputFormat;
    uint dwVBIHeight;
    ulong dwReserved1;
    ulong dwReserved2;
}
struct DDVIDEOPORTBANDWIDTH
{
    uint dwSize;
    uint dwCaps;
    uint dwOverlay;
    uint dwColorkey;
    uint dwYInterpolate;
    uint dwYInterpAndColorkey;
    ulong dwReserved1;
    ulong dwReserved2;
}
struct DDVIDEOPORTSTATUS
{
    uint dwSize;
    BOOL bInUse;
    uint dwFlags;
    uint dwReserved1;
    DDVIDEOPORTCONNECT VideoPortType;
    ulong dwReserved2;
    ulong dwReserved3;
}
struct DDVIDEOPORTNOTIFY
{
    long ApproximateTimeStamp;
    int lField;
    uint dwSurfaceIndex;
    int lDone;
}
enum IID_IDirectDrawKernel = GUID(0x8d56c120, 0x6a08, 0x11d0, [0x9b, 0x6, 0x0, 0xa0, 0xc9, 0x3, 0xa3, 0xb8]);
interface IDirectDrawKernel : IUnknown
{
    HRESULT GetCaps(DDKERNELCAPS*);
    HRESULT GetKernelHandle(ulong*);
    HRESULT ReleaseKernelHandle();
}
enum IID_IDirectDrawSurfaceKernel = GUID(0x60755da0, 0x6a40, 0x11d0, [0x9b, 0x6, 0x0, 0xa0, 0xc9, 0x3, 0xa3, 0xb8]);
interface IDirectDrawSurfaceKernel : IUnknown
{
    HRESULT GetKernelHandle(ulong*);
    HRESULT ReleaseKernelHandle();
}
struct DDKERNELCAPS
{
    uint dwSize;
    uint dwCaps;
    uint dwIRQCaps;
}
struct SURFACEALIGNMENT
{
    union
    {
        struct Linear
        {
            uint dwStartAlignment;
            uint dwPitchAlignment;
            uint dwFlags;
            uint dwReserved2;
        }
        struct Rectangular
        {
            uint dwXAlignment;
            uint dwYAlignment;
            uint dwFlags;
            uint dwReserved2;
        }
    }
}
struct HEAPALIGNMENT
{
    uint dwSize;
    DDSCAPS ddsCaps;
    uint dwReserved;
    SURFACEALIGNMENT ExecuteBuffer;
    SURFACEALIGNMENT Overlay;
    SURFACEALIGNMENT Texture;
    SURFACEALIGNMENT ZBuffer;
    SURFACEALIGNMENT AlphaBuffer;
    SURFACEALIGNMENT Offscreen;
    SURFACEALIGNMENT FlipTarget;
}
struct DD_GETHEAPALIGNMENTDATA
{
    ulong dwInstance;
    uint dwHeap;
    HRESULT ddRVal;
    void* GetHeapAlignment;
    HEAPALIGNMENT Alignment;
}
struct VMEML
{
    VMEML* next;
    ulong ptr;
    uint size;
    BOOL bDiscardable;
}
struct VMEMR
{
    VMEMR* next;
    VMEMR* prev;
    VMEMR* pUp;
    VMEMR* pDown;
    VMEMR* pLeft;
    VMEMR* pRight;
    ulong ptr;
    uint size;
    uint x;
    uint y;
    uint cx;
    uint cy;
    uint flags;
    ulong pBits;
    BOOL bDiscardable;
}
struct VMEMHEAP
{
    uint dwFlags;
    uint stride;
    void* freeList;
    void* allocList;
    uint dwTotalSize;
    ulong fpGARTLin;
    ulong fpGARTDev;
    uint dwCommitedSize;
    uint dwCoalesceCount;
    HEAPALIGNMENT Alignment;
    DDSCAPSEX ddsCapsEx;
    DDSCAPSEX ddsCapsExAlt;
    long liPhysAGPBase;
    HANDLE hdevAGP;
    void* pvPhysRsrv;
    ubyte* pAgpCommitMask;
    uint dwAgpCommitMaskSize;
}
struct PROCESS_LIST
{
    PROCESS_LIST* lpLink;
    uint dwProcessId;
    uint dwRefCnt;
    uint dwAlphaDepth;
    uint dwZDepth;
}
struct DDMONITORINFO
{
    ushort Manufacturer;
    ushort Product;
    uint SerialNumber;
    GUID DeviceIdentifier;
    int Mode640x480;
    int Mode800x600;
    int Mode1024x768;
    int Mode1280x1024;
    int Mode1600x1200;
    int ModeReserved1;
    int ModeReserved2;
    int ModeReserved3;
}
struct DD32BITDRIVERDATA
{
    CHAR[260] szName;
    CHAR[64] szEntryPoint;
    uint dwContext;
}
struct DDVERSIONDATA
{
    uint dwHALVersion;
    ulong dwReserved1;
    ulong dwReserved2;
}
alias LPDD32BITDRIVERINIT = uint function(uint);
struct VIDMEM
{
    uint dwFlags;
    ulong fpStart;
    union
    {
        ulong fpEnd;
        uint dwWidth;
    }
    DDSCAPS ddsCaps;
    DDSCAPS ddsCapsAlt;
    union
    {
        VMEMHEAP* lpHeap;
        uint dwHeight;
    }
}
struct VIDMEMINFO
{
    ulong fpPrimary;
    uint dwFlags;
    uint dwDisplayWidth;
    uint dwDisplayHeight;
    int lDisplayPitch;
    DDPIXELFORMAT ddpfDisplay;
    uint dwOffscreenAlign;
    uint dwOverlayAlign;
    uint dwTextureAlign;
    uint dwZBufferAlign;
    uint dwAlphaAlign;
    uint dwNumHeaps;
    VIDMEM* pvmList;
}
struct HEAPALIAS
{
    ulong fpVidMem;
    void* lpAlias;
    uint dwAliasSize;
}
struct HEAPALIASINFO
{
    uint dwRefCnt;
    uint dwFlags;
    uint dwNumHeaps;
    HEAPALIAS* lpAliases;
}
struct IUNKNOWN_LIST
{
    IUNKNOWN_LIST* lpLink;
    GUID* lpGuid;
    IUnknown lpIUnknown;
}
alias LPDDHEL_INIT = BOOL function(DDRAWI_DIRECTDRAW_GBL*, BOOL);
alias LPDDHAL_SETCOLORKEY = uint function(DDHAL_DRVSETCOLORKEYDATA*);
alias LPDDHAL_CANCREATESURFACE = uint function(DDHAL_CANCREATESURFACEDATA*);
alias LPDDHAL_WAITFORVERTICALBLANK = uint function(DDHAL_WAITFORVERTICALBLANKDATA*);
alias LPDDHAL_CREATESURFACE = uint function(DDHAL_CREATESURFACEDATA*);
alias LPDDHAL_DESTROYDRIVER = uint function(DDHAL_DESTROYDRIVERDATA*);
alias LPDDHAL_SETMODE = uint function(DDHAL_SETMODEDATA*);
alias LPDDHAL_CREATEPALETTE = uint function(DDHAL_CREATEPALETTEDATA*);
alias LPDDHAL_GETSCANLINE = uint function(DDHAL_GETSCANLINEDATA*);
alias LPDDHAL_SETEXCLUSIVEMODE = uint function(DDHAL_SETEXCLUSIVEMODEDATA*);
alias LPDDHAL_FLIPTOGDISURFACE = uint function(DDHAL_FLIPTOGDISURFACEDATA*);
alias LPDDHAL_GETDRIVERINFO = uint function(DDHAL_GETDRIVERINFODATA*);
struct DDHAL_DDCALLBACKS
{
    uint dwSize;
    uint dwFlags;
    LPDDHAL_DESTROYDRIVER DestroyDriver;
    LPDDHAL_CREATESURFACE CreateSurface;
    LPDDHAL_SETCOLORKEY SetColorKey;
    LPDDHAL_SETMODE SetMode;
    LPDDHAL_WAITFORVERTICALBLANK WaitForVerticalBlank;
    LPDDHAL_CANCREATESURFACE CanCreateSurface;
    LPDDHAL_CREATEPALETTE CreatePalette;
    LPDDHAL_GETSCANLINE GetScanLine;
    LPDDHAL_SETEXCLUSIVEMODE SetExclusiveMode;
    LPDDHAL_FLIPTOGDISURFACE FlipToGDISurface;
}
alias LPDDHALPALCB_DESTROYPALETTE = uint function(DDHAL_DESTROYPALETTEDATA*);
alias LPDDHALPALCB_SETENTRIES = uint function(DDHAL_SETENTRIESDATA*);
struct DDHAL_DDPALETTECALLBACKS
{
    uint dwSize;
    uint dwFlags;
    LPDDHALPALCB_DESTROYPALETTE DestroyPalette;
    LPDDHALPALCB_SETENTRIES SetEntries;
}
alias LPDDHALSURFCB_LOCK = uint function(DDHAL_LOCKDATA*);
alias LPDDHALSURFCB_UNLOCK = uint function(DDHAL_UNLOCKDATA*);
alias LPDDHALSURFCB_BLT = uint function(DDHAL_BLTDATA*);
alias LPDDHALSURFCB_UPDATEOVERLAY = uint function(DDHAL_UPDATEOVERLAYDATA*);
alias LPDDHALSURFCB_SETOVERLAYPOSITION = uint function(DDHAL_SETOVERLAYPOSITIONDATA*);
alias LPDDHALSURFCB_SETPALETTE = uint function(DDHAL_SETPALETTEDATA*);
alias LPDDHALSURFCB_FLIP = uint function(DDHAL_FLIPDATA*);
alias LPDDHALSURFCB_DESTROYSURFACE = uint function(DDHAL_DESTROYSURFACEDATA*);
alias LPDDHALSURFCB_SETCLIPLIST = uint function(DDHAL_SETCLIPLISTDATA*);
alias LPDDHALSURFCB_ADDATTACHEDSURFACE = uint function(DDHAL_ADDATTACHEDSURFACEDATA*);
alias LPDDHALSURFCB_SETCOLORKEY = uint function(DDHAL_SETCOLORKEYDATA*);
alias LPDDHALSURFCB_GETBLTSTATUS = uint function(DDHAL_GETBLTSTATUSDATA*);
alias LPDDHALSURFCB_GETFLIPSTATUS = uint function(DDHAL_GETFLIPSTATUSDATA*);
struct DDHAL_DDSURFACECALLBACKS
{
    uint dwSize;
    uint dwFlags;
    LPDDHALSURFCB_DESTROYSURFACE DestroySurface;
    LPDDHALSURFCB_FLIP Flip;
    LPDDHALSURFCB_SETCLIPLIST SetClipList;
    LPDDHALSURFCB_LOCK Lock;
    LPDDHALSURFCB_UNLOCK Unlock;
    LPDDHALSURFCB_BLT Blt;
    LPDDHALSURFCB_SETCOLORKEY SetColorKey;
    LPDDHALSURFCB_ADDATTACHEDSURFACE AddAttachedSurface;
    LPDDHALSURFCB_GETBLTSTATUS GetBltStatus;
    LPDDHALSURFCB_GETFLIPSTATUS GetFlipStatus;
    LPDDHALSURFCB_UPDATEOVERLAY UpdateOverlay;
    LPDDHALSURFCB_SETOVERLAYPOSITION SetOverlayPosition;
    void* reserved4;
    LPDDHALSURFCB_SETPALETTE SetPalette;
}
alias LPDDHAL_GETAVAILDRIVERMEMORY = uint function(DDHAL_GETAVAILDRIVERMEMORYDATA*);
alias LPDDHAL_UPDATENONLOCALHEAP = uint function(DDHAL_UPDATENONLOCALHEAPDATA*);
alias LPDDHAL_GETHEAPALIGNMENT = uint function(DDHAL_GETHEAPALIGNMENTDATA*);
struct DDHAL_DDMISCELLANEOUSCALLBACKS
{
    uint dwSize;
    uint dwFlags;
    LPDDHAL_GETAVAILDRIVERMEMORY GetAvailDriverMemory;
    LPDDHAL_UPDATENONLOCALHEAP UpdateNonLocalHeap;
    LPDDHAL_GETHEAPALIGNMENT GetHeapAlignment;
    LPDDHALSURFCB_GETBLTSTATUS GetSysmemBltStatus;
}
alias LPDDHAL_CREATESURFACEEX = uint function(DDHAL_CREATESURFACEEXDATA*);
alias LPDDHAL_GETDRIVERSTATE = uint function(DDHAL_GETDRIVERSTATEDATA*);
alias LPDDHAL_DESTROYDDLOCAL = uint function(DDHAL_DESTROYDDLOCALDATA*);
struct DDHAL_DDMISCELLANEOUS2CALLBACKS
{
    uint dwSize;
    uint dwFlags;
    void* Reserved;
    LPDDHAL_CREATESURFACEEX CreateSurfaceEx;
    LPDDHAL_GETDRIVERSTATE GetDriverState;
    LPDDHAL_DESTROYDDLOCAL DestroyDDLocal;
}
alias LPDDHALEXEBUFCB_CANCREATEEXEBUF = uint function(DDHAL_CANCREATESURFACEDATA*);
alias LPDDHALEXEBUFCB_CREATEEXEBUF = uint function(DDHAL_CREATESURFACEDATA*);
alias LPDDHALEXEBUFCB_DESTROYEXEBUF = uint function(DDHAL_DESTROYSURFACEDATA*);
alias LPDDHALEXEBUFCB_LOCKEXEBUF = uint function(DDHAL_LOCKDATA*);
alias LPDDHALEXEBUFCB_UNLOCKEXEBUF = uint function(DDHAL_UNLOCKDATA*);
struct DDHAL_DDEXEBUFCALLBACKS
{
    uint dwSize;
    uint dwFlags;
    LPDDHALEXEBUFCB_CANCREATEEXEBUF CanCreateExecuteBuffer;
    LPDDHALEXEBUFCB_CREATEEXEBUF CreateExecuteBuffer;
    LPDDHALEXEBUFCB_DESTROYEXEBUF DestroyExecuteBuffer;
    LPDDHALEXEBUFCB_LOCKEXEBUF LockExecuteBuffer;
    LPDDHALEXEBUFCB_UNLOCKEXEBUF UnlockExecuteBuffer;
}
alias LPDDHALVPORTCB_CANCREATEVIDEOPORT = uint function(DDHAL_CANCREATEVPORTDATA*);
alias LPDDHALVPORTCB_CREATEVIDEOPORT = uint function(DDHAL_CREATEVPORTDATA*);
alias LPDDHALVPORTCB_FLIP = uint function(DDHAL_FLIPVPORTDATA*);
alias LPDDHALVPORTCB_GETBANDWIDTH = uint function(DDHAL_GETVPORTBANDWIDTHDATA*);
alias LPDDHALVPORTCB_GETINPUTFORMATS = uint function(DDHAL_GETVPORTINPUTFORMATDATA*);
alias LPDDHALVPORTCB_GETOUTPUTFORMATS = uint function(DDHAL_GETVPORTOUTPUTFORMATDATA*);
alias LPDDHALVPORTCB_GETFIELD = uint function(DDHAL_GETVPORTFIELDDATA*);
alias LPDDHALVPORTCB_GETLINE = uint function(DDHAL_GETVPORTLINEDATA*);
alias LPDDHALVPORTCB_GETVPORTCONNECT = uint function(DDHAL_GETVPORTCONNECTDATA*);
alias LPDDHALVPORTCB_DESTROYVPORT = uint function(DDHAL_DESTROYVPORTDATA*);
alias LPDDHALVPORTCB_GETFLIPSTATUS = uint function(DDHAL_GETVPORTFLIPSTATUSDATA*);
alias LPDDHALVPORTCB_UPDATE = uint function(DDHAL_UPDATEVPORTDATA*);
alias LPDDHALVPORTCB_WAITFORSYNC = uint function(DDHAL_WAITFORVPORTSYNCDATA*);
alias LPDDHALVPORTCB_GETSIGNALSTATUS = uint function(DDHAL_GETVPORTSIGNALDATA*);
alias LPDDHALVPORTCB_COLORCONTROL = uint function(DDHAL_VPORTCOLORDATA*);
struct DDHAL_DDVIDEOPORTCALLBACKS
{
    uint dwSize;
    uint dwFlags;
    LPDDHALVPORTCB_CANCREATEVIDEOPORT CanCreateVideoPort;
    LPDDHALVPORTCB_CREATEVIDEOPORT CreateVideoPort;
    LPDDHALVPORTCB_FLIP FlipVideoPort;
    LPDDHALVPORTCB_GETBANDWIDTH GetVideoPortBandwidth;
    LPDDHALVPORTCB_GETINPUTFORMATS GetVideoPortInputFormats;
    LPDDHALVPORTCB_GETOUTPUTFORMATS GetVideoPortOutputFormats;
    void* lpReserved1;
    LPDDHALVPORTCB_GETFIELD GetVideoPortField;
    LPDDHALVPORTCB_GETLINE GetVideoPortLine;
    LPDDHALVPORTCB_GETVPORTCONNECT GetVideoPortConnectInfo;
    LPDDHALVPORTCB_DESTROYVPORT DestroyVideoPort;
    LPDDHALVPORTCB_GETFLIPSTATUS GetVideoPortFlipStatus;
    LPDDHALVPORTCB_UPDATE UpdateVideoPort;
    LPDDHALVPORTCB_WAITFORSYNC WaitForVideoPortSync;
    LPDDHALVPORTCB_GETSIGNALSTATUS GetVideoSignalStatus;
    LPDDHALVPORTCB_COLORCONTROL ColorControl;
}
alias LPDDHALCOLORCB_COLORCONTROL = uint function(DDHAL_COLORCONTROLDATA*);
struct DDHAL_DDCOLORCONTROLCALLBACKS
{
    uint dwSize;
    uint dwFlags;
    LPDDHALCOLORCB_COLORCONTROL ColorControl;
}
alias LPDDHALKERNELCB_SYNCSURFACE = uint function(DDHAL_SYNCSURFACEDATA*);
alias LPDDHALKERNELCB_SYNCVIDEOPORT = uint function(DDHAL_SYNCVIDEOPORTDATA*);
struct DDHAL_DDKERNELCALLBACKS
{
    uint dwSize;
    uint dwFlags;
    LPDDHALKERNELCB_SYNCSURFACE SyncSurfaceData;
    LPDDHALKERNELCB_SYNCVIDEOPORT SyncVideoPortData;
}
alias LPDDGAMMACALIBRATORPROC = HRESULT function(DDGAMMARAMP*, ubyte*);
alias LPDDHALMOCOMPCB_GETGUIDS = uint function(DDHAL_GETMOCOMPGUIDSDATA*);
alias LPDDHALMOCOMPCB_GETFORMATS = uint function(DDHAL_GETMOCOMPFORMATSDATA*);
alias LPDDHALMOCOMPCB_CREATE = uint function(DDHAL_CREATEMOCOMPDATA*);
alias LPDDHALMOCOMPCB_GETCOMPBUFFINFO = uint function(DDHAL_GETMOCOMPCOMPBUFFDATA*);
alias LPDDHALMOCOMPCB_GETINTERNALINFO = uint function(DDHAL_GETINTERNALMOCOMPDATA*);
alias LPDDHALMOCOMPCB_BEGINFRAME = uint function(DDHAL_BEGINMOCOMPFRAMEDATA*);
alias LPDDHALMOCOMPCB_ENDFRAME = uint function(DDHAL_ENDMOCOMPFRAMEDATA*);
alias LPDDHALMOCOMPCB_RENDER = uint function(DDHAL_RENDERMOCOMPDATA*);
alias LPDDHALMOCOMPCB_QUERYSTATUS = uint function(DDHAL_QUERYMOCOMPSTATUSDATA*);
alias LPDDHALMOCOMPCB_DESTROY = uint function(DDHAL_DESTROYMOCOMPDATA*);
struct DDHAL_DDMOTIONCOMPCALLBACKS
{
    uint dwSize;
    uint dwFlags;
    LPDDHALMOCOMPCB_GETGUIDS GetMoCompGuids;
    LPDDHALMOCOMPCB_GETFORMATS GetMoCompFormats;
    LPDDHALMOCOMPCB_CREATE CreateMoComp;
    LPDDHALMOCOMPCB_GETCOMPBUFFINFO GetMoCompBuffInfo;
    LPDDHALMOCOMPCB_GETINTERNALINFO GetInternalMoCompInfo;
    LPDDHALMOCOMPCB_BEGINFRAME BeginMoCompFrame;
    LPDDHALMOCOMPCB_ENDFRAME EndMoCompFrame;
    LPDDHALMOCOMPCB_RENDER RenderMoComp;
    LPDDHALMOCOMPCB_QUERYSTATUS QueryMoCompStatus;
    LPDDHALMOCOMPCB_DESTROY DestroyMoComp;
}
struct DDNONLOCALVIDMEMCAPS
{
    uint dwSize;
    uint dwNLVBCaps;
    uint dwNLVBCaps2;
    uint dwNLVBCKeyCaps;
    uint dwNLVBFXCaps;
    uint[8] dwNLVBRops;
}
struct DDMORESURFACECAPS
{
    uint dwSize;
    DDSCAPSEX ddsCapsMore;
    struct ExtendedHeapRestrictions
    {
        DDSCAPSEX ddsCapsEx;
        DDSCAPSEX ddsCapsExAlt;
    }
}
struct DDSTEREOMODE
{
    uint dwSize;
    uint dwHeight;
    uint dwWidth;
    uint dwBpp;
    uint dwRefreshRate;
    BOOL bSupported;
}
struct DDRAWI_DDRAWPALETTE_INT
{
    void* lpVtbl;
    DDRAWI_DDRAWPALETTE_LCL* lpLcl;
    DDRAWI_DDRAWPALETTE_INT* lpLink;
    uint dwIntRefCnt;
}
struct DDRAWI_DDRAWPALETTE_GBL
{
    uint dwRefCnt;
    uint dwFlags;
    DDRAWI_DIRECTDRAW_LCL* lpDD_lcl;
    uint dwProcessId;
    PALETTEENTRY* lpColorTable;
    union
    {
        ulong dwReserved1;
        HPALETTE hHELGDIPalette;
    }
    uint dwDriverReserved;
    uint dwContentsStamp;
    uint dwSaveStamp;
    uint dwHandle;
}
struct DDRAWI_DDRAWPALETTE_LCL
{
    uint lpPalMore;
    DDRAWI_DDRAWPALETTE_GBL* lpGbl;
    ulong dwUnused0;
    uint dwLocalRefCnt;
    IUnknown pUnkOuter;
    DDRAWI_DIRECTDRAW_LCL* lpDD_lcl;
    ulong dwReserved1;
    ulong dwDDRAWReserved1;
    ulong dwDDRAWReserved2;
    ulong dwDDRAWReserved3;
}
struct DDRAWI_DDRAWCLIPPER_INT
{
    void* lpVtbl;
    DDRAWI_DDRAWCLIPPER_LCL* lpLcl;
    DDRAWI_DDRAWCLIPPER_INT* lpLink;
    uint dwIntRefCnt;
}
struct DDRAWI_DDRAWCLIPPER_GBL
{
    uint dwRefCnt;
    uint dwFlags;
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    uint dwProcessId;
    ulong dwReserved1;
    ulong hWnd;
    RGNDATA* lpStaticClipList;
}
struct DDRAWI_DDRAWCLIPPER_LCL
{
    uint lpClipMore;
    DDRAWI_DDRAWCLIPPER_GBL* lpGbl;
    DDRAWI_DIRECTDRAW_LCL* lpDD_lcl;
    uint dwLocalRefCnt;
    IUnknown pUnkOuter;
    DDRAWI_DIRECTDRAW_INT* lpDD_int;
    ulong dwReserved1;
    IUnknown pAddrefedThisOwner;
}
struct ATTACHLIST
{
    uint dwFlags;
    ATTACHLIST* lpLink;
    DDRAWI_DDRAWSURFACE_LCL* lpAttached;
    DDRAWI_DDRAWSURFACE_INT* lpIAttached;
}
struct DBLNODE
{
    DBLNODE* next;
    DBLNODE* prev;
    DDRAWI_DDRAWSURFACE_LCL* object;
    DDRAWI_DDRAWSURFACE_INT* object_int;
}
struct ACCESSRECTLIST
{
    ACCESSRECTLIST* lpLink;
    RECT rDest;
    DDRAWI_DIRECTDRAW_LCL* lpOwner;
    void* lpSurfaceData;
    uint dwFlags;
    HEAPALIASINFO* lpHeapAliasInfo;
}
struct DDRAWI_DDRAWSURFACE_INT
{
    void* lpVtbl;
    DDRAWI_DDRAWSURFACE_LCL* lpLcl;
    DDRAWI_DDRAWSURFACE_INT* lpLink;
    uint dwIntRefCnt;
}
struct DDRAWI_DDRAWSURFACE_GBL
{
    uint dwRefCnt;
    uint dwGlobalFlags;
    union
    {
        ACCESSRECTLIST* lpRectList;
        uint dwBlockSizeY;
        int lSlicePitch;
    }
    union
    {
        VMEMHEAP* lpVidMemHeap;
        uint dwBlockSizeX;
    }
    union
    {
        DDRAWI_DIRECTDRAW_GBL* lpDD;
        void* lpDDHandle;
    }
    ulong fpVidMem;
    union
    {
        int lPitch;
        uint dwLinearSize;
    }
    ushort wHeight;
    ushort wWidth;
    uint dwUsageCount;
    ulong dwReserved1;
    DDPIXELFORMAT ddpfSurface;
}
struct DDRAWI_DDRAWSURFACE_GBL_MORE
{
    uint dwSize;
    union
    {
        uint dwPhysicalPageTable;
        ulong fpPhysicalVidMem;
    }
    uint* pPageTable;
    uint cPages;
    ulong dwSavedDCContext;
    ulong fpAliasedVidMem;
    ulong dwDriverReserved;
    ulong dwHELReserved;
    uint cPageUnlocks;
    ulong hKernelSurface;
    uint dwKernelRefCnt;
    DDCOLORCONTROL* lpColorInfo;
    ulong fpNTAlias;
    uint dwContentsStamp;
    void* lpvUnswappedDriverReserved;
    void* lpDDRAWReserved2;
    uint dwDDRAWReserved1;
    uint dwDDRAWReserved2;
    ulong fpAliasOfVidMem;
}
struct DDRAWI_DDRAWSURFACE_MORE
{
    uint dwSize;
    IUNKNOWN_LIST* lpIUnknowns;
    DDRAWI_DIRECTDRAW_LCL* lpDD_lcl;
    uint dwPageLockCount;
    uint dwBytesAllocated;
    DDRAWI_DIRECTDRAW_INT* lpDD_int;
    uint dwMipMapCount;
    DDRAWI_DDRAWCLIPPER_INT* lpDDIClipper;
    HEAPALIASINFO* lpHeapAliasInfo;
    uint dwOverlayFlags;
    void* rgjunc;
    DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
    DDOVERLAYFX* lpddOverlayFX;
    DDSCAPSEX ddsCapsEx;
    uint dwTextureStage;
    void* lpDDRAWReserved;
    void* lpDDRAWReserved2;
    void* lpDDrawReserved3;
    uint dwDDrawReserved4;
    void* lpDDrawReserved5;
    uint* lpGammaRamp;
    uint* lpOriginalGammaRamp;
    void* lpDDrawReserved6;
    uint dwSurfaceHandle;
    uint[2] qwDDrawReserved8;
    void* lpDDrawReserved9;
    uint cSurfaces;
    DDSURFACEDESC2* pCreatedDDSurfaceDesc2;
    DDRAWI_DDRAWSURFACE_LCL** slist;
    uint dwFVF;
    void* lpVB;
}
struct DDRAWI_DDRAWSURFACE_LCL
{
    DDRAWI_DDRAWSURFACE_MORE* lpSurfMore;
    DDRAWI_DDRAWSURFACE_GBL* lpGbl;
    ulong hDDSurface;
    ATTACHLIST* lpAttachList;
    ATTACHLIST* lpAttachListFrom;
    uint dwLocalRefCnt;
    uint dwProcessId;
    uint dwFlags;
    DDSCAPS ddsCaps;
    union
    {
        DDRAWI_DDRAWPALETTE_INT* lpDDPalette;
        DDRAWI_DDRAWPALETTE_INT* lp16DDPalette;
    }
    union
    {
        DDRAWI_DDRAWCLIPPER_LCL* lpDDClipper;
        DDRAWI_DDRAWCLIPPER_INT* lp16DDClipper;
    }
    uint dwModeCreatedIn;
    uint dwBackBufferCount;
    DDCOLORKEY ddckCKDestBlt;
    DDCOLORKEY ddckCKSrcBlt;
    ulong hDC;
    ulong dwReserved1;
    DDCOLORKEY ddckCKSrcOverlay;
    DDCOLORKEY ddckCKDestOverlay;
    DDRAWI_DDRAWSURFACE_INT* lpSurfaceOverlaying;
    DBLNODE dbnOverlayNode;
    RECT rcOverlaySrc;
    RECT rcOverlayDest;
    uint dwClrXparent;
    uint dwAlpha;
    int lOverlayX;
    int lOverlayY;
}
struct DDHALMODEINFO
{
    uint dwWidth;
    uint dwHeight;
    int lPitch;
    uint dwBPP;
    ushort wFlags;
    ushort wRefreshRate;
    uint dwRBitMask;
    uint dwGBitMask;
    uint dwBBitMask;
    uint dwAlphaBitMask;
}
struct DDRAWI_DIRECTDRAW_INT
{
    void* lpVtbl;
    DDRAWI_DIRECTDRAW_LCL* lpLcl;
    DDRAWI_DIRECTDRAW_INT* lpLink;
    uint dwIntRefCnt;
}
struct DDHAL_CALLBACKS
{
    DDHAL_DDCALLBACKS cbDDCallbacks;
    DDHAL_DDSURFACECALLBACKS cbDDSurfaceCallbacks;
    DDHAL_DDPALETTECALLBACKS cbDDPaletteCallbacks;
    DDHAL_DDCALLBACKS HALDD;
    DDHAL_DDSURFACECALLBACKS HALDDSurface;
    DDHAL_DDPALETTECALLBACKS HALDDPalette;
    DDHAL_DDCALLBACKS HELDD;
    DDHAL_DDSURFACECALLBACKS HELDDSurface;
    DDHAL_DDPALETTECALLBACKS HELDDPalette;
    DDHAL_DDEXEBUFCALLBACKS cbDDExeBufCallbacks;
    DDHAL_DDEXEBUFCALLBACKS HALDDExeBuf;
    DDHAL_DDEXEBUFCALLBACKS HELDDExeBuf;
    DDHAL_DDVIDEOPORTCALLBACKS cbDDVideoPortCallbacks;
    DDHAL_DDVIDEOPORTCALLBACKS HALDDVideoPort;
    DDHAL_DDCOLORCONTROLCALLBACKS cbDDColorControlCallbacks;
    DDHAL_DDCOLORCONTROLCALLBACKS HALDDColorControl;
    DDHAL_DDMISCELLANEOUSCALLBACKS cbDDMiscellaneousCallbacks;
    DDHAL_DDMISCELLANEOUSCALLBACKS HALDDMiscellaneous;
    DDHAL_DDKERNELCALLBACKS cbDDKernelCallbacks;
    DDHAL_DDKERNELCALLBACKS HALDDKernel;
    DDHAL_DDMOTIONCOMPCALLBACKS cbDDMotionCompCallbacks;
    DDHAL_DDMOTIONCOMPCALLBACKS HALDDMotionComp;
}
struct DDCORECAPS
{
    uint dwSize;
    uint dwCaps;
    uint dwCaps2;
    uint dwCKeyCaps;
    uint dwFXCaps;
    uint dwFXAlphaCaps;
    uint dwPalCaps;
    uint dwSVCaps;
    uint dwAlphaBltConstBitDepths;
    uint dwAlphaBltPixelBitDepths;
    uint dwAlphaBltSurfaceBitDepths;
    uint dwAlphaOverlayConstBitDepths;
    uint dwAlphaOverlayPixelBitDepths;
    uint dwAlphaOverlaySurfaceBitDepths;
    uint dwZBufferBitDepths;
    uint dwVidMemTotal;
    uint dwVidMemFree;
    uint dwMaxVisibleOverlays;
    uint dwCurrVisibleOverlays;
    uint dwNumFourCCCodes;
    uint dwAlignBoundarySrc;
    uint dwAlignSizeSrc;
    uint dwAlignBoundaryDest;
    uint dwAlignSizeDest;
    uint dwAlignStrideAlign;
    uint[8] dwRops;
    DDSCAPS ddsCaps;
    uint dwMinOverlayStretch;
    uint dwMaxOverlayStretch;
    uint dwMinLiveVideoStretch;
    uint dwMaxLiveVideoStretch;
    uint dwMinHwCodecStretch;
    uint dwMaxHwCodecStretch;
    uint dwReserved1;
    uint dwReserved2;
    uint dwReserved3;
    uint dwSVBCaps;
    uint dwSVBCKeyCaps;
    uint dwSVBFXCaps;
    uint[8] dwSVBRops;
    uint dwVSBCaps;
    uint dwVSBCKeyCaps;
    uint dwVSBFXCaps;
    uint[8] dwVSBRops;
    uint dwSSBCaps;
    uint dwSSBCKeyCaps;
    uint dwSSBFXCaps;
    uint[8] dwSSBRops;
    uint dwMaxVideoPorts;
    uint dwCurrVideoPorts;
    uint dwSVBCaps2;
}
struct DDRAWI_DIRECTDRAW_GBL
{
    uint dwRefCnt;
    uint dwFlags;
    ulong fpPrimaryOrig;
    DDCORECAPS ddCaps;
    uint dwInternal1;
    uint[9] dwUnused1;
    DDHAL_CALLBACKS* lpDDCBtmp;
    DDRAWI_DDRAWSURFACE_INT* dsList;
    DDRAWI_DDRAWPALETTE_INT* palList;
    DDRAWI_DDRAWCLIPPER_INT* clipperList;
    DDRAWI_DIRECTDRAW_GBL* lp16DD;
    uint dwMaxOverlays;
    uint dwCurrOverlays;
    uint dwMonitorFrequency;
    DDCORECAPS ddHELCaps;
    uint[50] dwUnused2;
    DDCOLORKEY ddckCKDestOverlay;
    DDCOLORKEY ddckCKSrcOverlay;
    VIDMEMINFO vmiData;
    void* lpDriverHandle;
    DDRAWI_DIRECTDRAW_LCL* lpExclusiveOwner;
    uint dwModeIndex;
    uint dwModeIndexOrig;
    uint dwNumFourCC;
    uint* lpdwFourCC;
    uint dwNumModes;
    DDHALMODEINFO* lpModeInfo;
    PROCESS_LIST plProcessList;
    uint dwSurfaceLockCount;
    uint dwAliasedLockCnt;
    ulong dwReserved3;
    ulong hDD;
    CHAR[12] cObsolete;
    uint dwReserved1;
    uint dwReserved2;
    DBLNODE dbnOverlayRoot;
    ushort* lpwPDeviceFlags;
    uint dwPDevice;
    uint dwWin16LockCnt;
    uint dwUnused3;
    uint hInstance;
    uint dwEvent16;
    uint dwSaveNumModes;
    ulong lpD3DGlobalDriverData;
    ulong lpD3DHALCallbacks;
    DDCORECAPS ddBothCaps;
    DDVIDEOPORTCAPS* lpDDVideoPortCaps;
    DDRAWI_DDVIDEOPORT_INT* dvpList;
    ulong lpD3DHALCallbacks2;
    RECT rectDevice;
    uint cMonitors;
    void* gpbmiSrc;
    void* gpbmiDest;
    HEAPALIASINFO* phaiHeapAliases;
    ulong hKernelHandle;
    ulong pfnNotifyProc;
    DDKERNELCAPS* lpDDKernelCaps;
    DDNONLOCALVIDMEMCAPS* lpddNLVCaps;
    DDNONLOCALVIDMEMCAPS* lpddNLVHELCaps;
    DDNONLOCALVIDMEMCAPS* lpddNLVBothCaps;
    ulong lpD3DExtendedCaps;
    uint dwDOSBoxEvent;
    RECT rectDesktop;
    CHAR[32] cDriverName;
    ulong lpD3DHALCallbacks3;
    uint dwNumZPixelFormats;
    DDPIXELFORMAT* lpZPixelFormats;
    DDRAWI_DDMOTIONCOMP_INT* mcList;
    uint hDDVxd;
    DDSCAPSEX ddsCapsMore;
}
struct DDRAWI_DIRECTDRAW_LCL
{
    uint lpDDMore;
    DDRAWI_DIRECTDRAW_GBL* lpGbl;
    uint dwUnused0;
    uint dwLocalFlags;
    uint dwLocalRefCnt;
    uint dwProcessId;
    IUnknown pUnkOuter;
    uint dwObsolete1;
    ulong hWnd;
    ulong hDC;
    uint dwErrorMode;
    DDRAWI_DDRAWSURFACE_INT* lpPrimary;
    DDRAWI_DDRAWSURFACE_INT* lpCB;
    uint dwPreferredMode;
    HINSTANCE hD3DInstance;
    IUnknown pD3DIUnknown;
    DDHAL_CALLBACKS* lpDDCB;
    ulong hDDVxd;
    uint dwAppHackFlags;
    ulong hFocusWnd;
    uint dwHotTracking;
    uint dwIMEState;
    ulong hWndPopup;
    ulong hDD;
    ulong hGammaCalibrator;
    LPDDGAMMACALIBRATORPROC lpGammaCalibrator;
}
struct DDRAWI_DDVIDEOPORT_INT
{
    void* lpVtbl;
    DDRAWI_DDVIDEOPORT_LCL* lpLcl;
    DDRAWI_DDVIDEOPORT_INT* lpLink;
    uint dwIntRefCnt;
    uint dwFlags;
}
struct DDRAWI_DDVIDEOPORT_LCL
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDVIDEOPORTDESC ddvpDesc;
    DDVIDEOPORTINFO ddvpInfo;
    DDRAWI_DDRAWSURFACE_INT* lpSurface;
    DDRAWI_DDRAWSURFACE_INT* lpVBISurface;
    DDRAWI_DDRAWSURFACE_INT** lpFlipInts;
    uint dwNumAutoflip;
    uint dwProcessID;
    uint dwStateFlags;
    uint dwFlags;
    uint dwRefCnt;
    ulong fpLastFlip;
    ulong dwReserved1;
    ulong dwReserved2;
    HANDLE hDDVideoPort;
    uint dwNumVBIAutoflip;
    DDVIDEOPORTDESC* lpVBIDesc;
    DDVIDEOPORTDESC* lpVideoDesc;
    DDVIDEOPORTINFO* lpVBIInfo;
    DDVIDEOPORTINFO* lpVideoInfo;
    uint dwVBIProcessID;
    DDRAWI_DDVIDEOPORT_INT* lpVPNotify;
}
struct DDRAWI_DDMOTIONCOMP_INT
{
    void* lpVtbl;
    DDRAWI_DDMOTIONCOMP_LCL* lpLcl;
    DDRAWI_DDMOTIONCOMP_INT* lpLink;
    uint dwIntRefCnt;
}
struct DDRAWI_DDMOTIONCOMP_LCL
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    GUID guid;
    uint dwUncompWidth;
    uint dwUncompHeight;
    DDPIXELFORMAT ddUncompPixelFormat;
    uint dwInternalFlags;
    uint dwRefCnt;
    uint dwProcessId;
    HANDLE hMoComp;
    uint dwDriverReserved1;
    uint dwDriverReserved2;
    uint dwDriverReserved3;
    void* lpDriverReserved1;
    void* lpDriverReserved2;
    void* lpDriverReserved3;
}
struct DDHALINFO
{
    uint dwSize;
    DDHAL_DDCALLBACKS* lpDDCallbacks;
    DDHAL_DDSURFACECALLBACKS* lpDDSurfaceCallbacks;
    DDHAL_DDPALETTECALLBACKS* lpDDPaletteCallbacks;
    VIDMEMINFO vmiData;
    DDCORECAPS ddCaps;
    uint dwMonitorFrequency;
    LPDDHAL_GETDRIVERINFO GetDriverInfo;
    uint dwModeIndex;
    uint* lpdwFourCC;
    uint dwNumModes;
    DDHALMODEINFO* lpModeInfo;
    uint dwFlags;
    void* lpPDevice;
    uint hInstance;
    ulong lpD3DGlobalDriverData;
    ulong lpD3DHALCallbacks;
    DDHAL_DDEXEBUFCALLBACKS* lpDDExeBufCallbacks;
}
alias LPDDHAL_SETINFO = BOOL function(DDHALINFO*, BOOL);
alias LPDDHAL_VIDMEMALLOC = ulong function(DDRAWI_DIRECTDRAW_GBL*, int, uint, uint);
alias LPDDHAL_VIDMEMFREE = void function(DDRAWI_DIRECTDRAW_GBL*, int, ulong);
struct DDHALDDRAWFNS
{
    uint dwSize;
    LPDDHAL_SETINFO lpSetInfo;
    LPDDHAL_VIDMEMALLOC lpVidMemAlloc;
    LPDDHAL_VIDMEMFREE lpVidMemFree;
}
struct DDHAL_BLTDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDRAWI_DDRAWSURFACE_LCL* lpDDDestSurface;
    RECTL rDest;
    DDRAWI_DDRAWSURFACE_LCL* lpDDSrcSurface;
    RECTL rSrc;
    uint dwFlags;
    uint dwROPFlags;
    DDBLTFX bltFX;
    HRESULT ddRVal;
    LPDDHALSURFCB_BLT Blt;
    BOOL IsClipped;
    RECTL rOrigDest;
    RECTL rOrigSrc;
    uint dwRectCnt;
    RECT* prDestRects;
}
struct DDHAL_LOCKDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
    uint bHasRect;
    RECTL rArea;
    void* lpSurfData;
    HRESULT ddRVal;
    LPDDHALSURFCB_LOCK Lock;
    uint dwFlags;
}
struct DDHAL_UNLOCKDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
    HRESULT ddRVal;
    LPDDHALSURFCB_UNLOCK Unlock;
}
struct DDHAL_UPDATEOVERLAYDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDRAWI_DDRAWSURFACE_LCL* lpDDDestSurface;
    RECTL rDest;
    DDRAWI_DDRAWSURFACE_LCL* lpDDSrcSurface;
    RECTL rSrc;
    uint dwFlags;
    DDOVERLAYFX overlayFX;
    HRESULT ddRVal;
    LPDDHALSURFCB_UPDATEOVERLAY UpdateOverlay;
}
struct DDHAL_SETOVERLAYPOSITIONDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDRAWI_DDRAWSURFACE_LCL* lpDDSrcSurface;
    DDRAWI_DDRAWSURFACE_LCL* lpDDDestSurface;
    int lXPos;
    int lYPos;
    HRESULT ddRVal;
    LPDDHALSURFCB_SETOVERLAYPOSITION SetOverlayPosition;
}
struct DDHAL_SETPALETTEDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
    DDRAWI_DDRAWPALETTE_GBL* lpDDPalette;
    HRESULT ddRVal;
    LPDDHALSURFCB_SETPALETTE SetPalette;
    BOOL Attach;
}
struct DDHAL_FLIPDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDRAWI_DDRAWSURFACE_LCL* lpSurfCurr;
    DDRAWI_DDRAWSURFACE_LCL* lpSurfTarg;
    uint dwFlags;
    HRESULT ddRVal;
    LPDDHALSURFCB_FLIP Flip;
    DDRAWI_DDRAWSURFACE_LCL* lpSurfCurrLeft;
    DDRAWI_DDRAWSURFACE_LCL* lpSurfTargLeft;
}
struct DDHAL_DESTROYSURFACEDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
    HRESULT ddRVal;
    LPDDHALSURFCB_DESTROYSURFACE DestroySurface;
}
struct DDHAL_SETCLIPLISTDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
    HRESULT ddRVal;
    LPDDHALSURFCB_SETCLIPLIST SetClipList;
}
struct DDHAL_ADDATTACHEDSURFACEDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
    DDRAWI_DDRAWSURFACE_LCL* lpSurfAttached;
    HRESULT ddRVal;
    LPDDHALSURFCB_ADDATTACHEDSURFACE AddAttachedSurface;
}
struct DDHAL_SETCOLORKEYDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
    uint dwFlags;
    DDCOLORKEY ckNew;
    HRESULT ddRVal;
    LPDDHALSURFCB_SETCOLORKEY SetColorKey;
}
struct DDHAL_GETBLTSTATUSDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
    uint dwFlags;
    HRESULT ddRVal;
    LPDDHALSURFCB_GETBLTSTATUS GetBltStatus;
}
struct DDHAL_GETFLIPSTATUSDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
    uint dwFlags;
    HRESULT ddRVal;
    LPDDHALSURFCB_GETFLIPSTATUS GetFlipStatus;
}
struct DDHAL_DESTROYPALETTEDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDRAWI_DDRAWPALETTE_GBL* lpDDPalette;
    HRESULT ddRVal;
    LPDDHALPALCB_DESTROYPALETTE DestroyPalette;
}
struct DDHAL_SETENTRIESDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDRAWI_DDRAWPALETTE_GBL* lpDDPalette;
    uint dwBase;
    uint dwNumEntries;
    PALETTEENTRY* lpEntries;
    HRESULT ddRVal;
    LPDDHALPALCB_SETENTRIES SetEntries;
}
struct DDHAL_CREATESURFACEDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDSURFACEDESC* lpDDSurfaceDesc;
    DDRAWI_DDRAWSURFACE_LCL** lplpSList;
    uint dwSCnt;
    HRESULT ddRVal;
    LPDDHAL_CREATESURFACE CreateSurface;
}
struct DDHAL_CANCREATESURFACEDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDSURFACEDESC* lpDDSurfaceDesc;
    uint bIsDifferentPixelFormat;
    HRESULT ddRVal;
    LPDDHAL_CANCREATESURFACE CanCreateSurface;
}
struct DDHAL_CREATEPALETTEDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDRAWI_DDRAWPALETTE_GBL* lpDDPalette;
    PALETTEENTRY* lpColorTable;
    HRESULT ddRVal;
    LPDDHAL_CREATEPALETTE CreatePalette;
    BOOL is_excl;
}
struct DDHAL_WAITFORVERTICALBLANKDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    uint dwFlags;
    uint bIsInVB;
    ulong hEvent;
    HRESULT ddRVal;
    LPDDHAL_WAITFORVERTICALBLANK WaitForVerticalBlank;
}
struct DDHAL_DESTROYDRIVERDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    HRESULT ddRVal;
    LPDDHAL_DESTROYDRIVER DestroyDriver;
}
struct DDHAL_SETMODEDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    uint dwModeIndex;
    HRESULT ddRVal;
    LPDDHAL_SETMODE SetMode;
    BOOL inexcl;
    BOOL useRefreshRate;
}
struct DDHAL_DRVSETCOLORKEYDATA
{
    DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
    uint dwFlags;
    DDCOLORKEY ckNew;
    HRESULT ddRVal;
    LPDDHAL_SETCOLORKEY SetColorKey;
}
struct DDHAL_GETSCANLINEDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    uint dwScanLine;
    HRESULT ddRVal;
    LPDDHAL_GETSCANLINE GetScanLine;
}
struct DDHAL_SETEXCLUSIVEMODEDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    uint dwEnterExcl;
    uint dwReserved;
    HRESULT ddRVal;
    LPDDHAL_SETEXCLUSIVEMODE SetExclusiveMode;
}
struct DDHAL_FLIPTOGDISURFACEDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    uint dwToGDI;
    uint dwReserved;
    HRESULT ddRVal;
    LPDDHAL_FLIPTOGDISURFACE FlipToGDISurface;
}
struct DDHAL_CANCREATEVPORTDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDVIDEOPORTDESC* lpDDVideoPortDesc;
    HRESULT ddRVal;
    LPDDHALVPORTCB_CANCREATEVIDEOPORT CanCreateVideoPort;
}
struct DDHAL_CREATEVPORTDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDVIDEOPORTDESC* lpDDVideoPortDesc;
    DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
    HRESULT ddRVal;
    LPDDHALVPORTCB_CREATEVIDEOPORT CreateVideoPort;
}
struct DDHAL_FLIPVPORTDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
    DDRAWI_DDRAWSURFACE_LCL* lpSurfCurr;
    DDRAWI_DDRAWSURFACE_LCL* lpSurfTarg;
    HRESULT ddRVal;
    LPDDHALVPORTCB_FLIP FlipVideoPort;
}
struct DDHAL_GETVPORTBANDWIDTHDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
    DDPIXELFORMAT* lpddpfFormat;
    uint dwWidth;
    uint dwHeight;
    uint dwFlags;
    DDVIDEOPORTBANDWIDTH* lpBandwidth;
    HRESULT ddRVal;
    LPDDHALVPORTCB_GETBANDWIDTH GetVideoPortBandwidth;
}
struct DDHAL_GETVPORTINPUTFORMATDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
    uint dwFlags;
    DDPIXELFORMAT* lpddpfFormat;
    uint dwNumFormats;
    HRESULT ddRVal;
    LPDDHALVPORTCB_GETINPUTFORMATS GetVideoPortInputFormats;
}
struct DDHAL_GETVPORTOUTPUTFORMATDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
    uint dwFlags;
    DDPIXELFORMAT* lpddpfInputFormat;
    DDPIXELFORMAT* lpddpfOutputFormats;
    uint dwNumFormats;
    HRESULT ddRVal;
    LPDDHALVPORTCB_GETOUTPUTFORMATS GetVideoPortOutputFormats;
}
struct DDHAL_GETVPORTFIELDDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
    BOOL bField;
    HRESULT ddRVal;
    LPDDHALVPORTCB_GETFIELD GetVideoPortField;
}
struct DDHAL_GETVPORTLINEDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
    uint dwLine;
    HRESULT ddRVal;
    LPDDHALVPORTCB_GETLINE GetVideoPortLine;
}
struct DDHAL_GETVPORTCONNECTDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    uint dwPortId;
    DDVIDEOPORTCONNECT* lpConnect;
    uint dwNumEntries;
    HRESULT ddRVal;
    LPDDHALVPORTCB_GETVPORTCONNECT GetVideoPortConnectInfo;
}
struct DDHAL_DESTROYVPORTDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
    HRESULT ddRVal;
    LPDDHALVPORTCB_DESTROYVPORT DestroyVideoPort;
}
struct DDHAL_GETVPORTFLIPSTATUSDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    ulong fpSurface;
    HRESULT ddRVal;
    LPDDHALVPORTCB_GETFLIPSTATUS GetVideoPortFlipStatus;
}
struct DDHAL_UPDATEVPORTDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
    DDRAWI_DDRAWSURFACE_INT** lplpDDSurface;
    DDRAWI_DDRAWSURFACE_INT** lplpDDVBISurface;
    DDVIDEOPORTINFO* lpVideoInfo;
    uint dwFlags;
    uint dwNumAutoflip;
    uint dwNumVBIAutoflip;
    HRESULT ddRVal;
    LPDDHALVPORTCB_UPDATE UpdateVideoPort;
}
struct DDHAL_WAITFORVPORTSYNCDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
    uint dwFlags;
    uint dwLine;
    uint dwTimeOut;
    HRESULT ddRVal;
    LPDDHALVPORTCB_WAITFORSYNC WaitForVideoPortSync;
}
struct DDHAL_GETVPORTSIGNALDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
    uint dwStatus;
    HRESULT ddRVal;
    LPDDHALVPORTCB_GETSIGNALSTATUS GetVideoSignalStatus;
}
struct DDHAL_VPORTCOLORDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
    uint dwFlags;
    DDCOLORCONTROL* lpColorData;
    HRESULT ddRVal;
    LPDDHALVPORTCB_COLORCONTROL ColorControl;
}
struct DDHAL_COLORCONTROLDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
    DDCOLORCONTROL* lpColorData;
    uint dwFlags;
    HRESULT ddRVal;
    LPDDHALCOLORCB_COLORCONTROL ColorControl;
}
struct DDHAL_GETDRIVERINFODATA
{
    uint dwSize;
    uint dwFlags;
    GUID guidInfo;
    uint dwExpectedSize;
    void* lpvData;
    uint dwActualSize;
    HRESULT ddRVal;
    ulong dwContext;
}
struct DDHAL_GETAVAILDRIVERMEMORYDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    DDSCAPS DDSCaps;
    uint dwTotal;
    uint dwFree;
    HRESULT ddRVal;
    LPDDHAL_GETAVAILDRIVERMEMORY GetAvailDriverMemory;
    DDSCAPSEX ddsCapsEx;
}
struct DDHAL_UPDATENONLOCALHEAPDATA
{
    DDRAWI_DIRECTDRAW_GBL* lpDD;
    uint dwHeap;
    ulong fpGARTLin;
    ulong fpGARTDev;
    ulong ulPolicyMaxBytes;
    HRESULT ddRVal;
    LPDDHAL_UPDATENONLOCALHEAP UpdateNonLocalHeap;
}
struct DDHAL_GETHEAPALIGNMENTDATA
{
    ulong dwInstance;
    uint dwHeap;
    HRESULT ddRVal;
    LPDDHAL_GETHEAPALIGNMENT GetHeapAlignment;
    HEAPALIGNMENT Alignment;
}
struct DDHAL_CREATESURFACEEXDATA
{
    uint dwFlags;
    DDRAWI_DIRECTDRAW_LCL* lpDDLcl;
    DDRAWI_DDRAWSURFACE_LCL* lpDDSLcl;
    HRESULT ddRVal;
}
struct DDHAL_GETDRIVERSTATEDATA
{
    uint dwFlags;
    union
    {
        ulong dwhContext;
    }
    uint* lpdwStates;
    uint dwLength;
    HRESULT ddRVal;
}
struct DDHAL_DESTROYDDLOCALDATA
{
    uint dwFlags;
    DDRAWI_DIRECTDRAW_LCL* pDDLcl;
    HRESULT ddRVal;
}
struct DDHAL_SYNCSURFACEDATA
{
    uint dwSize;
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDRAWSURFACE_LCL* lpDDSurface;
    uint dwSurfaceOffset;
    ulong fpLockPtr;
    int lPitch;
    uint dwOverlayOffset;
    uint dwOverlaySrcWidth;
    uint dwOverlaySrcHeight;
    uint dwOverlayDestWidth;
    uint dwOverlayDestHeight;
    ulong dwDriverReserved1;
    ulong dwDriverReserved2;
    ulong dwDriverReserved3;
    HRESULT ddRVal;
}
struct DDHAL_SYNCVIDEOPORTDATA
{
    uint dwSize;
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDVIDEOPORT_LCL* lpVideoPort;
    uint dwOriginOffset;
    uint dwHeight;
    uint dwVBIHeight;
    ulong dwDriverReserved1;
    ulong dwDriverReserved2;
    ulong dwDriverReserved3;
    HRESULT ddRVal;
}
struct DDHAL_GETMOCOMPGUIDSDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    uint dwNumGuids;
    GUID* lpGuids;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_GETGUIDS GetMoCompGuids;
}
struct DDHAL_GETMOCOMPFORMATSDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    GUID* lpGuid;
    uint dwNumFormats;
    DDPIXELFORMAT* lpFormats;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_GETFORMATS GetMoCompFormats;
}
struct DDHAL_CREATEMOCOMPDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDMOTIONCOMP_LCL* lpMoComp;
    GUID* lpGuid;
    uint dwUncompWidth;
    uint dwUncompHeight;
    DDPIXELFORMAT ddUncompPixelFormat;
    void* lpData;
    uint dwDataSize;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_CREATE CreateMoComp;
}
struct DDMCCOMPBUFFERINFO
{
    uint dwSize;
    uint dwNumCompBuffers;
    uint dwWidthToCreate;
    uint dwHeightToCreate;
    uint dwBytesToAllocate;
    DDSCAPS2 ddCompCaps;
    DDPIXELFORMAT ddPixelFormat;
}
struct DDHAL_GETMOCOMPCOMPBUFFDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    GUID* lpGuid;
    uint dwWidth;
    uint dwHeight;
    DDPIXELFORMAT ddPixelFormat;
    uint dwNumTypesCompBuffs;
    DDMCCOMPBUFFERINFO* lpCompBuffInfo;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_GETCOMPBUFFINFO GetMoCompBuffInfo;
}
struct DDHAL_GETINTERNALMOCOMPDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    GUID* lpGuid;
    uint dwWidth;
    uint dwHeight;
    DDPIXELFORMAT ddPixelFormat;
    uint dwScratchMemAlloc;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_GETINTERNALINFO GetInternalMoCompInfo;
}
struct DDHAL_BEGINMOCOMPFRAMEDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDMOTIONCOMP_LCL* lpMoComp;
    DDRAWI_DDRAWSURFACE_LCL* lpDestSurface;
    uint dwInputDataSize;
    void* lpInputData;
    uint dwOutputDataSize;
    void* lpOutputData;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_BEGINFRAME BeginMoCompFrame;
}
struct DDHAL_ENDMOCOMPFRAMEDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDMOTIONCOMP_LCL* lpMoComp;
    void* lpInputData;
    uint dwInputDataSize;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_ENDFRAME EndMoCompFrame;
}
struct DDMCBUFFERINFO
{
    uint dwSize;
    DDRAWI_DDRAWSURFACE_LCL* lpCompSurface;
    uint dwDataOffset;
    uint dwDataSize;
    void* lpPrivate;
}
struct DDHAL_RENDERMOCOMPDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDMOTIONCOMP_LCL* lpMoComp;
    uint dwNumBuffers;
    DDMCBUFFERINFO* lpBufferInfo;
    uint dwFunction;
    void* lpInputData;
    uint dwInputDataSize;
    void* lpOutputData;
    uint dwOutputDataSize;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_RENDER RenderMoComp;
}
struct DDHAL_QUERYMOCOMPSTATUSDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDMOTIONCOMP_LCL* lpMoComp;
    DDRAWI_DDRAWSURFACE_LCL* lpSurface;
    uint dwFlags;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_QUERYSTATUS QueryMoCompStatus;
}
struct DDHAL_DESTROYMOCOMPDATA
{
    DDRAWI_DIRECTDRAW_LCL* lpDD;
    DDRAWI_DDMOTIONCOMP_LCL* lpMoComp;
    HRESULT ddRVal;
    LPDDHALMOCOMPCB_DESTROY DestroyMoComp;
}
struct VIDEOMEMORY
{
    uint dwFlags;
    ulong fpStart;
    union
    {
        ulong fpEnd;
        uint dwWidth;
    }
    DDSCAPS ddsCaps;
    DDSCAPS ddsCapsAlt;
    union
    {
        VMEMHEAP* lpHeap;
        uint dwHeight;
    }
}
struct VIDEOMEMORYINFO
{
    ulong fpPrimary;
    uint dwFlags;
    uint dwDisplayWidth;
    uint dwDisplayHeight;
    int lDisplayPitch;
    DDPIXELFORMAT ddpfDisplay;
    uint dwOffscreenAlign;
    uint dwOverlayAlign;
    uint dwTextureAlign;
    uint dwZBufferAlign;
    uint dwAlphaAlign;
    void* pvPrimary;
}
alias PDD_SETCOLORKEY = uint function(DD_DRVSETCOLORKEYDATA*);
alias PDD_CANCREATESURFACE = uint function(DD_CANCREATESURFACEDATA*);
alias PDD_WAITFORVERTICALBLANK = uint function(DD_WAITFORVERTICALBLANKDATA*);
alias PDD_CREATESURFACE = uint function(DD_CREATESURFACEDATA*);
alias PDD_DESTROYDRIVER = uint function(PDD_DESTROYDRIVERDATA);
alias PDD_SETMODE = uint function(PDD_SETMODEDATA);
alias PDD_CREATEPALETTE = uint function(DD_CREATEPALETTEDATA*);
alias PDD_GETSCANLINE = uint function(DD_GETSCANLINEDATA*);
alias PDD_MAPMEMORY = uint function(DD_MAPMEMORYDATA*);
alias PDD_GETDRIVERINFO = uint function(DD_GETDRIVERINFODATA*);
struct DD_CALLBACKS
{
    uint dwSize;
    uint dwFlags;
    PDD_DESTROYDRIVER DestroyDriver;
    PDD_CREATESURFACE CreateSurface;
    PDD_SETCOLORKEY SetColorKey;
    PDD_SETMODE SetMode;
    PDD_WAITFORVERTICALBLANK WaitForVerticalBlank;
    PDD_CANCREATESURFACE CanCreateSurface;
    PDD_CREATEPALETTE CreatePalette;
    PDD_GETSCANLINE GetScanLine;
    PDD_MAPMEMORY MapMemory;
}
alias PDD_GETAVAILDRIVERMEMORY = uint function(DD_GETAVAILDRIVERMEMORYDATA*);
struct DD_MISCELLANEOUSCALLBACKS
{
    uint dwSize;
    uint dwFlags;
    PDD_GETAVAILDRIVERMEMORY GetAvailDriverMemory;
}
alias PDD_ALPHABLT = uint function(DD_BLTDATA*);
alias PDD_CREATESURFACEEX = uint function(DD_CREATESURFACEEXDATA*);
alias PDD_GETDRIVERSTATE = uint function(DD_GETDRIVERSTATEDATA*);
alias PDD_DESTROYDDLOCAL = uint function(DD_DESTROYDDLOCALDATA*);
struct DD_MISCELLANEOUS2CALLBACKS
{
    uint dwSize;
    uint dwFlags;
    PDD_ALPHABLT AlphaBlt;
    PDD_CREATESURFACEEX CreateSurfaceEx;
    PDD_GETDRIVERSTATE GetDriverState;
    PDD_DESTROYDDLOCAL DestroyDDLocal;
}
alias PDD_FREEDRIVERMEMORY = uint function(DD_FREEDRIVERMEMORYDATA*);
alias PDD_SETEXCLUSIVEMODE = uint function(DD_SETEXCLUSIVEMODEDATA*);
alias PDD_FLIPTOGDISURFACE = uint function(DD_FLIPTOGDISURFACEDATA*);
struct DD_NTCALLBACKS
{
    uint dwSize;
    uint dwFlags;
    PDD_FREEDRIVERMEMORY FreeDriverMemory;
    PDD_SETEXCLUSIVEMODE SetExclusiveMode;
    PDD_FLIPTOGDISURFACE FlipToGDISurface;
}
alias PDD_PALCB_DESTROYPALETTE = uint function(DD_DESTROYPALETTEDATA*);
alias PDD_PALCB_SETENTRIES = uint function(DD_SETENTRIESDATA*);
struct DD_PALETTECALLBACKS
{
    uint dwSize;
    uint dwFlags;
    PDD_PALCB_DESTROYPALETTE DestroyPalette;
    PDD_PALCB_SETENTRIES SetEntries;
}
alias PDD_SURFCB_LOCK = uint function(DD_LOCKDATA*);
alias PDD_SURFCB_UNLOCK = uint function(DD_UNLOCKDATA*);
alias PDD_SURFCB_BLT = uint function(DD_BLTDATA*);
alias PDD_SURFCB_UPDATEOVERLAY = uint function(DD_UPDATEOVERLAYDATA*);
alias PDD_SURFCB_SETOVERLAYPOSITION = uint function(DD_SETOVERLAYPOSITIONDATA*);
alias PDD_SURFCB_SETPALETTE = uint function(DD_SETPALETTEDATA*);
alias PDD_SURFCB_FLIP = uint function(DD_FLIPDATA*);
alias PDD_SURFCB_DESTROYSURFACE = uint function(DD_DESTROYSURFACEDATA*);
alias PDD_SURFCB_SETCLIPLIST = uint function(DD_SETCLIPLISTDATA*);
alias PDD_SURFCB_ADDATTACHEDSURFACE = uint function(DD_ADDATTACHEDSURFACEDATA*);
alias PDD_SURFCB_SETCOLORKEY = uint function(DD_SETCOLORKEYDATA*);
alias PDD_SURFCB_GETBLTSTATUS = uint function(DD_GETBLTSTATUSDATA*);
alias PDD_SURFCB_GETFLIPSTATUS = uint function(DD_GETFLIPSTATUSDATA*);
struct DD_SURFACECALLBACKS
{
    uint dwSize;
    uint dwFlags;
    PDD_SURFCB_DESTROYSURFACE DestroySurface;
    PDD_SURFCB_FLIP Flip;
    PDD_SURFCB_SETCLIPLIST SetClipList;
    PDD_SURFCB_LOCK Lock;
    PDD_SURFCB_UNLOCK Unlock;
    PDD_SURFCB_BLT Blt;
    PDD_SURFCB_SETCOLORKEY SetColorKey;
    PDD_SURFCB_ADDATTACHEDSURFACE AddAttachedSurface;
    PDD_SURFCB_GETBLTSTATUS GetBltStatus;
    PDD_SURFCB_GETFLIPSTATUS GetFlipStatus;
    PDD_SURFCB_UPDATEOVERLAY UpdateOverlay;
    PDD_SURFCB_SETOVERLAYPOSITION SetOverlayPosition;
    void* reserved4;
    PDD_SURFCB_SETPALETTE SetPalette;
}
alias PDD_VPORTCB_CANCREATEVIDEOPORT = uint function(DD_CANCREATEVPORTDATA*);
alias PDD_VPORTCB_CREATEVIDEOPORT = uint function(DD_CREATEVPORTDATA*);
alias PDD_VPORTCB_FLIP = uint function(DD_FLIPVPORTDATA*);
alias PDD_VPORTCB_GETBANDWIDTH = uint function(DD_GETVPORTBANDWIDTHDATA*);
alias PDD_VPORTCB_GETINPUTFORMATS = uint function(DD_GETVPORTINPUTFORMATDATA*);
alias PDD_VPORTCB_GETOUTPUTFORMATS = uint function(DD_GETVPORTOUTPUTFORMATDATA*);
alias PDD_VPORTCB_GETAUTOFLIPSURF = uint function(PDD_GETVPORTAUTOFLIPSURFACEDATA);
alias PDD_VPORTCB_GETFIELD = uint function(DD_GETVPORTFIELDDATA*);
alias PDD_VPORTCB_GETLINE = uint function(DD_GETVPORTLINEDATA*);
alias PDD_VPORTCB_GETVPORTCONNECT = uint function(DD_GETVPORTCONNECTDATA*);
alias PDD_VPORTCB_DESTROYVPORT = uint function(DD_DESTROYVPORTDATA*);
alias PDD_VPORTCB_GETFLIPSTATUS = uint function(DD_GETVPORTFLIPSTATUSDATA*);
alias PDD_VPORTCB_UPDATE = uint function(DD_UPDATEVPORTDATA*);
alias PDD_VPORTCB_WAITFORSYNC = uint function(DD_WAITFORVPORTSYNCDATA*);
alias PDD_VPORTCB_GETSIGNALSTATUS = uint function(DD_GETVPORTSIGNALDATA*);
alias PDD_VPORTCB_COLORCONTROL = uint function(DD_VPORTCOLORDATA*);
struct DD_VIDEOPORTCALLBACKS
{
    uint dwSize;
    uint dwFlags;
    PDD_VPORTCB_CANCREATEVIDEOPORT CanCreateVideoPort;
    PDD_VPORTCB_CREATEVIDEOPORT CreateVideoPort;
    PDD_VPORTCB_FLIP FlipVideoPort;
    PDD_VPORTCB_GETBANDWIDTH GetVideoPortBandwidth;
    PDD_VPORTCB_GETINPUTFORMATS GetVideoPortInputFormats;
    PDD_VPORTCB_GETOUTPUTFORMATS GetVideoPortOutputFormats;
    void* lpReserved1;
    PDD_VPORTCB_GETFIELD GetVideoPortField;
    PDD_VPORTCB_GETLINE GetVideoPortLine;
    PDD_VPORTCB_GETVPORTCONNECT GetVideoPortConnectInfo;
    PDD_VPORTCB_DESTROYVPORT DestroyVideoPort;
    PDD_VPORTCB_GETFLIPSTATUS GetVideoPortFlipStatus;
    PDD_VPORTCB_UPDATE UpdateVideoPort;
    PDD_VPORTCB_WAITFORSYNC WaitForVideoPortSync;
    PDD_VPORTCB_GETSIGNALSTATUS GetVideoSignalStatus;
    PDD_VPORTCB_COLORCONTROL ColorControl;
}
alias PDD_COLORCB_COLORCONTROL = uint function(DD_COLORCONTROLDATA*);
struct DD_COLORCONTROLCALLBACKS
{
    uint dwSize;
    uint dwFlags;
    PDD_COLORCB_COLORCONTROL ColorControl;
}
alias PDD_KERNELCB_SYNCSURFACE = uint function(DD_SYNCSURFACEDATA*);
alias PDD_KERNELCB_SYNCVIDEOPORT = uint function(DD_SYNCVIDEOPORTDATA*);
struct DD_KERNELCALLBACKS
{
    uint dwSize;
    uint dwFlags;
    PDD_KERNELCB_SYNCSURFACE SyncSurfaceData;
    PDD_KERNELCB_SYNCVIDEOPORT SyncVideoPortData;
}
alias PDD_MOCOMPCB_GETGUIDS = uint function(DD_GETMOCOMPGUIDSDATA*);
alias PDD_MOCOMPCB_GETFORMATS = uint function(DD_GETMOCOMPFORMATSDATA*);
alias PDD_MOCOMPCB_CREATE = uint function(DD_CREATEMOCOMPDATA*);
alias PDD_MOCOMPCB_GETCOMPBUFFINFO = uint function(DD_GETMOCOMPCOMPBUFFDATA*);
alias PDD_MOCOMPCB_GETINTERNALINFO = uint function(DD_GETINTERNALMOCOMPDATA*);
alias PDD_MOCOMPCB_BEGINFRAME = uint function(DD_BEGINMOCOMPFRAMEDATA*);
alias PDD_MOCOMPCB_ENDFRAME = uint function(DD_ENDMOCOMPFRAMEDATA*);
alias PDD_MOCOMPCB_RENDER = uint function(DD_RENDERMOCOMPDATA*);
alias PDD_MOCOMPCB_QUERYSTATUS = uint function(DD_QUERYMOCOMPSTATUSDATA*);
alias PDD_MOCOMPCB_DESTROY = uint function(DD_DESTROYMOCOMPDATA*);
struct DD_MOTIONCOMPCALLBACKS
{
    uint dwSize;
    uint dwFlags;
    PDD_MOCOMPCB_GETGUIDS GetMoCompGuids;
    PDD_MOCOMPCB_GETFORMATS GetMoCompFormats;
    PDD_MOCOMPCB_CREATE CreateMoComp;
    PDD_MOCOMPCB_GETCOMPBUFFINFO GetMoCompBuffInfo;
    PDD_MOCOMPCB_GETINTERNALINFO GetInternalMoCompInfo;
    PDD_MOCOMPCB_BEGINFRAME BeginMoCompFrame;
    PDD_MOCOMPCB_ENDFRAME EndMoCompFrame;
    PDD_MOCOMPCB_RENDER RenderMoComp;
    PDD_MOCOMPCB_QUERYSTATUS QueryMoCompStatus;
    PDD_MOCOMPCB_DESTROY DestroyMoComp;
}
struct DD_NONLOCALVIDMEMCAPS
{
    uint dwSize;
    uint dwNLVBCaps;
    uint dwNLVBCaps2;
    uint dwNLVBCKeyCaps;
    uint dwNLVBFXCaps;
    uint[8] dwNLVBRops;
}
struct DD_PALETTE_GLOBAL
{
    ulong dwReserved1;
}
struct DD_PALETTE_LOCAL
{
    uint dwReserved0;
    ulong dwReserved1;
}
struct DD_CLIPPER_GLOBAL
{
    ulong dwReserved1;
}
struct DD_CLIPPER_LOCAL
{
    ulong dwReserved1;
}
struct DD_ATTACHLIST
{
    DD_ATTACHLIST* lpLink;
    DD_SURFACE_LOCAL* lpAttached;
}
struct DD_SURFACE_INT
{
    DD_SURFACE_LOCAL* lpLcl;
}
struct DD_SURFACE_GLOBAL
{
    union
    {
        uint dwBlockSizeY;
        int lSlicePitch;
    }
    union
    {
        VIDEOMEMORY* lpVidMemHeap;
        uint dwBlockSizeX;
        uint dwUserMemSize;
    }
    ulong fpVidMem;
    union
    {
        int lPitch;
        uint dwLinearSize;
    }
    int yHint;
    int xHint;
    uint wHeight;
    uint wWidth;
    ulong dwReserved1;
    DDPIXELFORMAT ddpfSurface;
    ulong fpHeapOffset;
    HANDLE hCreatorProcess;
}
struct DD_SURFACE_MORE
{
    uint dwMipMapCount;
    DD_VIDEOPORT_LOCAL* lpVideoPort;
    uint dwOverlayFlags;
    DDSCAPSEX ddsCapsEx;
    uint dwSurfaceHandle;
}
struct DD_SURFACE_LOCAL
{
    DD_SURFACE_GLOBAL* lpGbl;
    uint dwFlags;
    DDSCAPS ddsCaps;
    ulong dwReserved1;
    union
    {
        DDCOLORKEY ddckCKSrcOverlay;
        DDCOLORKEY ddckCKSrcBlt;
    }
    union
    {
        DDCOLORKEY ddckCKDestOverlay;
        DDCOLORKEY ddckCKDestBlt;
    }
    DD_SURFACE_MORE* lpSurfMore;
    DD_ATTACHLIST* lpAttachList;
    DD_ATTACHLIST* lpAttachListFrom;
    RECT rcOverlaySrc;
}
struct DD_MORECAPS
{
    uint dwSize;
    uint dwAlphaCaps;
    uint dwSVBAlphaCaps;
    uint dwVSBAlphaCaps;
    uint dwSSBAlphaCaps;
    uint dwFilterCaps;
    uint dwSVBFilterCaps;
    uint dwVSBFilterCaps;
    uint dwSSBFilterCaps;
}
struct DDNTCORECAPS
{
    uint dwSize;
    uint dwCaps;
    uint dwCaps2;
    uint dwCKeyCaps;
    uint dwFXCaps;
    uint dwFXAlphaCaps;
    uint dwPalCaps;
    uint dwSVCaps;
    uint dwAlphaBltConstBitDepths;
    uint dwAlphaBltPixelBitDepths;
    uint dwAlphaBltSurfaceBitDepths;
    uint dwAlphaOverlayConstBitDepths;
    uint dwAlphaOverlayPixelBitDepths;
    uint dwAlphaOverlaySurfaceBitDepths;
    uint dwZBufferBitDepths;
    uint dwVidMemTotal;
    uint dwVidMemFree;
    uint dwMaxVisibleOverlays;
    uint dwCurrVisibleOverlays;
    uint dwNumFourCCCodes;
    uint dwAlignBoundarySrc;
    uint dwAlignSizeSrc;
    uint dwAlignBoundaryDest;
    uint dwAlignSizeDest;
    uint dwAlignStrideAlign;
    uint[8] dwRops;
    DDSCAPS ddsCaps;
    uint dwMinOverlayStretch;
    uint dwMaxOverlayStretch;
    uint dwMinLiveVideoStretch;
    uint dwMaxLiveVideoStretch;
    uint dwMinHwCodecStretch;
    uint dwMaxHwCodecStretch;
    uint dwReserved1;
    uint dwReserved2;
    uint dwReserved3;
    uint dwSVBCaps;
    uint dwSVBCKeyCaps;
    uint dwSVBFXCaps;
    uint[8] dwSVBRops;
    uint dwVSBCaps;
    uint dwVSBCKeyCaps;
    uint dwVSBFXCaps;
    uint[8] dwVSBRops;
    uint dwSSBCaps;
    uint dwSSBCKeyCaps;
    uint dwSSBFXCaps;
    uint[8] dwSSBRops;
    uint dwMaxVideoPorts;
    uint dwCurrVideoPorts;
    uint dwSVBCaps2;
}
struct DD_D3DBUFCALLBACKS
{
    uint dwSize;
    uint dwFlags;
    PDD_CANCREATESURFACE CanCreateD3DBuffer;
    PDD_CREATESURFACE CreateD3DBuffer;
    PDD_SURFCB_DESTROYSURFACE DestroyD3DBuffer;
    PDD_SURFCB_LOCK LockD3DBuffer;
    PDD_SURFCB_UNLOCK UnlockD3DBuffer;
}
struct DD_HALINFO_V4
{
    uint dwSize;
    VIDEOMEMORYINFO vmiData;
    DDNTCORECAPS ddCaps;
    PDD_GETDRIVERINFO GetDriverInfo;
    uint dwFlags;
}
struct DD_HALINFO
{
    uint dwSize;
    VIDEOMEMORYINFO vmiData;
    DDNTCORECAPS ddCaps;
    PDD_GETDRIVERINFO GetDriverInfo;
    uint dwFlags;
    void* lpD3DGlobalDriverData;
    void* lpD3DHALCallbacks;
    DD_D3DBUFCALLBACKS* lpD3DBufCallbacks;
}
struct DD_DIRECTDRAW_GLOBAL
{
    void* dhpdev;
    ulong dwReserved1;
    ulong dwReserved2;
    DDVIDEOPORTCAPS* lpDDVideoPortCaps;
}
struct DD_DIRECTDRAW_LOCAL
{
    DD_DIRECTDRAW_GLOBAL* lpGbl;
}
struct DD_VIDEOPORT_LOCAL
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DDVIDEOPORTDESC ddvpDesc;
    DDVIDEOPORTINFO ddvpInfo;
    DD_SURFACE_INT* lpSurface;
    DD_SURFACE_INT* lpVBISurface;
    uint dwNumAutoflip;
    uint dwNumVBIAutoflip;
    ulong dwReserved1;
    ulong dwReserved2;
    ulong dwReserved3;
}
struct DD_MOTIONCOMP_LOCAL
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    GUID guid;
    uint dwUncompWidth;
    uint dwUncompHeight;
    DDPIXELFORMAT ddUncompPixelFormat;
    uint dwDriverReserved1;
    uint dwDriverReserved2;
    uint dwDriverReserved3;
    void* lpDriverReserved1;
    void* lpDriverReserved2;
    void* lpDriverReserved3;
}
struct DD_MORESURFACECAPS
{
    uint dwSize;
    DDSCAPSEX ddsCapsMore;
    struct NTExtendedHeapRestrictions
    {
        DDSCAPSEX ddsCapsEx;
        DDSCAPSEX ddsCapsExAlt;
    }
}
struct DD_STEREOMODE
{
    uint dwSize;
    uint dwHeight;
    uint dwWidth;
    uint dwBpp;
    uint dwRefreshRate;
    BOOL bSupported;
}
struct DD_UPDATENONLOCALHEAPDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    uint dwHeap;
    ulong fpGARTLin;
    ulong fpGARTDev;
    ulong ulPolicyMaxBytes;
    HRESULT ddRVal;
    void* UpdateNonLocalHeap;
}
struct DD_NTPRIVATEDRIVERCAPS
{
    uint dwSize;
    uint dwPrivateCaps;
}
struct DD_BLTDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DD_SURFACE_LOCAL* lpDDDestSurface;
    RECTL rDest;
    DD_SURFACE_LOCAL* lpDDSrcSurface;
    RECTL rSrc;
    uint dwFlags;
    uint dwROPFlags;
    DDBLTFX bltFX;
    HRESULT ddRVal;
    void* Blt;
    BOOL IsClipped;
    RECTL rOrigDest;
    RECTL rOrigSrc;
    uint dwRectCnt;
    RECT* prDestRects;
    uint dwAFlags;
    DDARGB ddargbScaleFactors;
}
struct DD_LOCKDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DD_SURFACE_LOCAL* lpDDSurface;
    uint bHasRect;
    RECTL rArea;
    void* lpSurfData;
    HRESULT ddRVal;
    void* Lock;
    uint dwFlags;
    ulong fpProcess;
}
struct DD_UNLOCKDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DD_SURFACE_LOCAL* lpDDSurface;
    HRESULT ddRVal;
    void* Unlock;
}
struct DD_UPDATEOVERLAYDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DD_SURFACE_LOCAL* lpDDDestSurface;
    RECTL rDest;
    DD_SURFACE_LOCAL* lpDDSrcSurface;
    RECTL rSrc;
    uint dwFlags;
    DDOVERLAYFX overlayFX;
    HRESULT ddRVal;
    void* UpdateOverlay;
}
struct DD_SETOVERLAYPOSITIONDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DD_SURFACE_LOCAL* lpDDSrcSurface;
    DD_SURFACE_LOCAL* lpDDDestSurface;
    int lXPos;
    int lYPos;
    HRESULT ddRVal;
    void* SetOverlayPosition;
}
struct DD_SETPALETTEDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DD_SURFACE_LOCAL* lpDDSurface;
    DD_PALETTE_GLOBAL* lpDDPalette;
    HRESULT ddRVal;
    void* SetPalette;
    BOOL Attach;
}
struct DD_FLIPDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DD_SURFACE_LOCAL* lpSurfCurr;
    DD_SURFACE_LOCAL* lpSurfTarg;
    uint dwFlags;
    HRESULT ddRVal;
    void* Flip;
    DD_SURFACE_LOCAL* lpSurfCurrLeft;
    DD_SURFACE_LOCAL* lpSurfTargLeft;
}
struct DD_DESTROYSURFACEDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DD_SURFACE_LOCAL* lpDDSurface;
    HRESULT ddRVal;
    void* DestroySurface;
}
struct DD_SETCLIPLISTDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DD_SURFACE_LOCAL* lpDDSurface;
    HRESULT ddRVal;
    void* SetClipList;
}
struct DD_ADDATTACHEDSURFACEDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DD_SURFACE_LOCAL* lpDDSurface;
    DD_SURFACE_LOCAL* lpSurfAttached;
    HRESULT ddRVal;
    void* AddAttachedSurface;
}
struct DD_SETCOLORKEYDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DD_SURFACE_LOCAL* lpDDSurface;
    uint dwFlags;
    DDCOLORKEY ckNew;
    HRESULT ddRVal;
    void* SetColorKey;
}
struct DD_GETBLTSTATUSDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DD_SURFACE_LOCAL* lpDDSurface;
    uint dwFlags;
    HRESULT ddRVal;
    void* GetBltStatus;
}
struct DD_GETFLIPSTATUSDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DD_SURFACE_LOCAL* lpDDSurface;
    uint dwFlags;
    HRESULT ddRVal;
    void* GetFlipStatus;
}
struct DD_DESTROYPALETTEDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DD_PALETTE_GLOBAL* lpDDPalette;
    HRESULT ddRVal;
    void* DestroyPalette;
}
struct DD_SETENTRIESDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DD_PALETTE_GLOBAL* lpDDPalette;
    uint dwBase;
    uint dwNumEntries;
    PALETTEENTRY* lpEntries;
    HRESULT ddRVal;
    void* SetEntries;
}
struct DD_CREATESURFACEDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DDSURFACEDESC* lpDDSurfaceDesc;
    DD_SURFACE_LOCAL** lplpSList;
    uint dwSCnt;
    HRESULT ddRVal;
    void* CreateSurface;
}
struct DD_CANCREATESURFACEDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DDSURFACEDESC* lpDDSurfaceDesc;
    uint bIsDifferentPixelFormat;
    HRESULT ddRVal;
    void* CanCreateSurface;
}
struct DD_CREATEPALETTEDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DD_PALETTE_GLOBAL* lpDDPalette;
    PALETTEENTRY* lpColorTable;
    HRESULT ddRVal;
    void* CreatePalette;
    BOOL is_excl;
}
struct DD_WAITFORVERTICALBLANKDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    uint dwFlags;
    uint bIsInVB;
    ulong hEvent;
    HRESULT ddRVal;
    void* WaitForVerticalBlank;
}
struct DD_DRVSETCOLORKEYDATA
{
    DD_SURFACE_LOCAL* lpDDSurface;
    uint dwFlags;
    DDCOLORKEY ckNew;
    HRESULT ddRVal;
    void* SetColorKey;
}
struct DD_GETSCANLINEDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    uint dwScanLine;
    HRESULT ddRVal;
    void* GetScanLine;
}
struct DD_MAPMEMORYDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    BOOL bMap;
    HANDLE hProcess;
    ulong fpProcess;
    HRESULT ddRVal;
}
struct DD_CANCREATEVPORTDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DDVIDEOPORTDESC* lpDDVideoPortDesc;
    HRESULT ddRVal;
    void* CanCreateVideoPort;
}
struct DD_CREATEVPORTDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DDVIDEOPORTDESC* lpDDVideoPortDesc;
    DD_VIDEOPORT_LOCAL* lpVideoPort;
    HRESULT ddRVal;
    void* CreateVideoPort;
}
struct DD_FLIPVPORTDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_VIDEOPORT_LOCAL* lpVideoPort;
    DD_SURFACE_LOCAL* lpSurfCurr;
    DD_SURFACE_LOCAL* lpSurfTarg;
    HRESULT ddRVal;
    void* FlipVideoPort;
}
struct DD_GETVPORTBANDWIDTHDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_VIDEOPORT_LOCAL* lpVideoPort;
    DDPIXELFORMAT* lpddpfFormat;
    uint dwWidth;
    uint dwHeight;
    uint dwFlags;
    DDVIDEOPORTBANDWIDTH* lpBandwidth;
    HRESULT ddRVal;
    void* GetVideoPortBandwidth;
}
struct DD_GETVPORTINPUTFORMATDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_VIDEOPORT_LOCAL* lpVideoPort;
    uint dwFlags;
    DDPIXELFORMAT* lpddpfFormat;
    uint dwNumFormats;
    HRESULT ddRVal;
    void* GetVideoPortInputFormats;
}
struct DD_GETVPORTOUTPUTFORMATDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_VIDEOPORT_LOCAL* lpVideoPort;
    uint dwFlags;
    DDPIXELFORMAT* lpddpfInputFormat;
    DDPIXELFORMAT* lpddpfOutputFormats;
    uint dwNumFormats;
    HRESULT ddRVal;
    void* GetVideoPortInputFormats;
}
struct DD_GETVPORTFIELDDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_VIDEOPORT_LOCAL* lpVideoPort;
    BOOL bField;
    HRESULT ddRVal;
    void* GetVideoPortField;
}
struct DD_GETVPORTLINEDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_VIDEOPORT_LOCAL* lpVideoPort;
    uint dwLine;
    HRESULT ddRVal;
    void* GetVideoPortLine;
}
struct DD_GETVPORTCONNECTDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    uint dwPortId;
    DDVIDEOPORTCONNECT* lpConnect;
    uint dwNumEntries;
    HRESULT ddRVal;
    void* GetVideoPortConnectInfo;
}
struct DD_DESTROYVPORTDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_VIDEOPORT_LOCAL* lpVideoPort;
    HRESULT ddRVal;
    void* DestroyVideoPort;
}
struct DD_GETVPORTFLIPSTATUSDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    ulong fpSurface;
    HRESULT ddRVal;
    void* GetVideoPortFlipStatus;
}
struct DD_UPDATEVPORTDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_VIDEOPORT_LOCAL* lpVideoPort;
    DD_SURFACE_INT** lplpDDSurface;
    DD_SURFACE_INT** lplpDDVBISurface;
    DDVIDEOPORTINFO* lpVideoInfo;
    uint dwFlags;
    uint dwNumAutoflip;
    uint dwNumVBIAutoflip;
    HRESULT ddRVal;
    void* UpdateVideoPort;
}
struct DD_WAITFORVPORTSYNCDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_VIDEOPORT_LOCAL* lpVideoPort;
    uint dwFlags;
    uint dwLine;
    uint dwTimeOut;
    HRESULT ddRVal;
    void* UpdateVideoPort;
}
struct DD_GETVPORTSIGNALDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_VIDEOPORT_LOCAL* lpVideoPort;
    uint dwStatus;
    HRESULT ddRVal;
    void* GetVideoSignalStatus;
}
struct DD_VPORTCOLORDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_VIDEOPORT_LOCAL* lpVideoPort;
    uint dwFlags;
    DDCOLORCONTROL* lpColorData;
    HRESULT ddRVal;
    void* ColorControl;
}
struct DD_COLORCONTROLDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DD_SURFACE_LOCAL* lpDDSurface;
    DDCOLORCONTROL* lpColorData;
    uint dwFlags;
    HRESULT ddRVal;
    void* ColorControl;
}
struct DD_GETDRIVERINFODATA
{
    void* dhpdev;
    uint dwSize;
    uint dwFlags;
    GUID guidInfo;
    uint dwExpectedSize;
    void* lpvData;
    uint dwActualSize;
    HRESULT ddRVal;
}
struct DD_GETAVAILDRIVERMEMORYDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DDSCAPS DDSCaps;
    uint dwTotal;
    uint dwFree;
    HRESULT ddRVal;
    void* GetAvailDriverMemory;
}
struct DD_FREEDRIVERMEMORYDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    DD_SURFACE_LOCAL* lpDDSurface;
    HRESULT ddRVal;
    void* FreeDriverMemory;
}
struct DD_SETEXCLUSIVEMODEDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    uint dwEnterExcl;
    uint dwReserved;
    HRESULT ddRVal;
    void* SetExclusiveMode;
}
struct DD_FLIPTOGDISURFACEDATA
{
    DD_DIRECTDRAW_GLOBAL* lpDD;
    uint dwToGDI;
    uint dwReserved;
    HRESULT ddRVal;
    void* FlipToGDISurface;
}
struct DD_SYNCSURFACEDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_SURFACE_LOCAL* lpDDSurface;
    uint dwSurfaceOffset;
    ulong fpLockPtr;
    int lPitch;
    uint dwOverlayOffset;
    uint dwDriverReserved1;
    uint dwDriverReserved2;
    uint dwDriverReserved3;
    uint dwDriverReserved4;
    HRESULT ddRVal;
}
struct DD_SYNCVIDEOPORTDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_VIDEOPORT_LOCAL* lpVideoPort;
    uint dwOriginOffset;
    uint dwHeight;
    uint dwVBIHeight;
    uint dwDriverReserved1;
    uint dwDriverReserved2;
    uint dwDriverReserved3;
    HRESULT ddRVal;
}
struct DD_GETMOCOMPGUIDSDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    uint dwNumGuids;
    GUID* lpGuids;
    HRESULT ddRVal;
}
struct DD_GETMOCOMPFORMATSDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    GUID* lpGuid;
    uint dwNumFormats;
    DDPIXELFORMAT* lpFormats;
    HRESULT ddRVal;
}
struct DD_CREATEMOCOMPDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_MOTIONCOMP_LOCAL* lpMoComp;
    GUID* lpGuid;
    uint dwUncompWidth;
    uint dwUncompHeight;
    DDPIXELFORMAT ddUncompPixelFormat;
    void* lpData;
    uint dwDataSize;
    HRESULT ddRVal;
}
struct DDCOMPBUFFERINFO
{
    uint dwSize;
    uint dwNumCompBuffers;
    uint dwWidthToCreate;
    uint dwHeightToCreate;
    uint dwBytesToAllocate;
    DDSCAPS2 ddCompCaps;
    DDPIXELFORMAT ddPixelFormat;
}
struct DD_GETMOCOMPCOMPBUFFDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    GUID* lpGuid;
    uint dwWidth;
    uint dwHeight;
    DDPIXELFORMAT ddPixelFormat;
    uint dwNumTypesCompBuffs;
    DDCOMPBUFFERINFO* lpCompBuffInfo;
    HRESULT ddRVal;
}
struct DD_GETINTERNALMOCOMPDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    GUID* lpGuid;
    uint dwWidth;
    uint dwHeight;
    DDPIXELFORMAT ddPixelFormat;
    uint dwScratchMemAlloc;
    HRESULT ddRVal;
}
struct DD_BEGINMOCOMPFRAMEDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_MOTIONCOMP_LOCAL* lpMoComp;
    DD_SURFACE_LOCAL* lpDestSurface;
    uint dwInputDataSize;
    void* lpInputData;
    uint dwOutputDataSize;
    void* lpOutputData;
    HRESULT ddRVal;
}
struct DD_ENDMOCOMPFRAMEDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_MOTIONCOMP_LOCAL* lpMoComp;
    void* lpInputData;
    uint dwInputDataSize;
    HRESULT ddRVal;
}
struct DDMOCOMPBUFFERINFO
{
    uint dwSize;
    DD_SURFACE_LOCAL* lpCompSurface;
    uint dwDataOffset;
    uint dwDataSize;
    void* lpPrivate;
}
struct DD_RENDERMOCOMPDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_MOTIONCOMP_LOCAL* lpMoComp;
    uint dwNumBuffers;
    DDMOCOMPBUFFERINFO* lpBufferInfo;
    uint dwFunction;
    void* lpInputData;
    uint dwInputDataSize;
    void* lpOutputData;
    uint dwOutputDataSize;
    HRESULT ddRVal;
}
struct DD_QUERYMOCOMPSTATUSDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_MOTIONCOMP_LOCAL* lpMoComp;
    DD_SURFACE_LOCAL* lpSurface;
    uint dwFlags;
    HRESULT ddRVal;
}
struct DD_DESTROYMOCOMPDATA
{
    DD_DIRECTDRAW_LOCAL* lpDD;
    DD_MOTIONCOMP_LOCAL* lpMoComp;
    HRESULT ddRVal;
}
struct DD_CREATESURFACEEXDATA
{
    uint dwFlags;
    DD_DIRECTDRAW_LOCAL* lpDDLcl;
    DD_SURFACE_LOCAL* lpDDSLcl;
    HRESULT ddRVal;
}
struct DD_GETDRIVERSTATEDATA
{
    uint dwFlags;
    union
    {
        DD_DIRECTDRAW_GLOBAL* lpDD;
        ulong dwhContext;
    }
    uint* lpdwStates;
    uint dwLength;
    HRESULT ddRVal;
}
struct DD_DESTROYDDLOCALDATA
{
    uint dwFlags;
    DD_DIRECTDRAW_LOCAL* pDDLcl;
    HRESULT ddRVal;
}
struct DDMDL
{
    DDMDL* MdlNext;
    short MdlSize;
    short MdlFlags;
    long Process;
    uint* lpMappedSystemVa;
    uint* lpStartVa;
    uint ByteCount;
    uint ByteOffset;
}
struct DDSURFACEDATA
{
    uint ddsCaps;
    uint dwSurfaceOffset;
    ulong fpLockPtr;
    uint dwWidth;
    uint dwHeight;
    int lPitch;
    uint dwOverlayFlags;
    uint dwOverlayOffset;
    uint dwOverlaySrcWidth;
    uint dwOverlaySrcHeight;
    uint dwOverlayDestWidth;
    uint dwOverlayDestHeight;
    uint dwVideoPortId;
    uint dwFormatFlags;
    uint dwFormatFourCC;
    uint dwFormatBitCount;
    uint dwRBitMask;
    uint dwGBitMask;
    uint dwBBitMask;
    uint dwDriverReserved1;
    uint dwDriverReserved2;
    uint dwDriverReserved3;
    uint dwDriverReserved4;
}
struct DDVIDEOPORTDATA
{
    uint dwVideoPortId;
    uint dwVPFlags;
    uint dwOriginOffset;
    uint dwHeight;
    uint dwVBIHeight;
    uint dwDriverReserved1;
    uint dwDriverReserved2;
    uint dwDriverReserved3;
}
struct DX_IRQDATA
{
    uint dwIrqFlags;
}
alias PDX_IRQCALLBACK = void function(DX_IRQDATA*);
struct DDGETIRQINFO
{
    uint dwFlags;
}
struct DDENABLEIRQINFO
{
    uint dwIRQSources;
    uint dwLine;
    PDX_IRQCALLBACK IRQCallback;
    DX_IRQDATA* lpIRQData;
}
struct DDSKIPNEXTFIELDINFO
{
    DDVIDEOPORTDATA* lpVideoPortData;
    uint dwSkipFlags;
}
struct DDBOBNEXTFIELDINFO
{
    DDSURFACEDATA* lpSurface;
}
struct DDSETSTATEININFO
{
    DDSURFACEDATA* lpSurfaceData;
    DDVIDEOPORTDATA* lpVideoPortData;
}
struct DDSETSTATEOUTINFO
{
    BOOL bSoftwareAutoflip;
    uint dwSurfaceIndex;
    uint dwVBISurfaceIndex;
}
struct DDLOCKININFO
{
    DDSURFACEDATA* lpSurfaceData;
}
struct DDLOCKOUTINFO
{
    ulong dwSurfacePtr;
}
struct DDFLIPOVERLAYINFO
{
    DDSURFACEDATA* lpCurrentSurface;
    DDSURFACEDATA* lpTargetSurface;
    uint dwFlags;
}
struct DDFLIPVIDEOPORTINFO
{
    DDVIDEOPORTDATA* lpVideoPortData;
    DDSURFACEDATA* lpCurrentSurface;
    DDSURFACEDATA* lpTargetSurface;
    uint dwFlipVPFlags;
}
struct DDGETPOLARITYININFO
{
    DDVIDEOPORTDATA* lpVideoPortData;
}
struct DDGETPOLARITYOUTINFO
{
    uint bPolarity;
}
struct DDGETCURRENTAUTOFLIPININFO
{
    DDVIDEOPORTDATA* lpVideoPortData;
}
struct DDGETCURRENTAUTOFLIPOUTINFO
{
    uint dwSurfaceIndex;
    uint dwVBISurfaceIndex;
}
struct DDGETPREVIOUSAUTOFLIPININFO
{
    DDVIDEOPORTDATA* lpVideoPortData;
}
struct DDGETPREVIOUSAUTOFLIPOUTINFO
{
    uint dwSurfaceIndex;
    uint dwVBISurfaceIndex;
}
struct DDTRANSFERININFO
{
    DDSURFACEDATA* lpSurfaceData;
    uint dwStartLine;
    uint dwEndLine;
    ulong dwTransferID;
    uint dwTransferFlags;
    DDMDL* lpDestMDL;
}
struct DDTRANSFEROUTINFO
{
    uint dwBufferPolarity;
}
struct DDGETTRANSFERSTATUSOUTINFO
{
    ulong dwTransferID;
}
alias PDX_GETIRQINFO = uint function(void*, void*, DDGETIRQINFO*);
alias PDX_ENABLEIRQ = uint function(void*, DDENABLEIRQINFO*, void*);
alias PDX_SKIPNEXTFIELD = uint function(void*, DDSKIPNEXTFIELDINFO*, void*);
alias PDX_BOBNEXTFIELD = uint function(void*, DDBOBNEXTFIELDINFO*, void*);
alias PDX_SETSTATE = uint function(void*, DDSETSTATEININFO*, DDSETSTATEOUTINFO*);
alias PDX_LOCK = uint function(void*, DDLOCKININFO*, DDLOCKOUTINFO*);
alias PDX_FLIPOVERLAY = uint function(void*, DDFLIPOVERLAYINFO*, void*);
alias PDX_FLIPVIDEOPORT = uint function(void*, DDFLIPVIDEOPORTINFO*, void*);
alias PDX_GETPOLARITY = uint function(void*, DDGETPOLARITYININFO*, DDGETPOLARITYOUTINFO*);
alias PDX_GETCURRENTAUTOFLIP = uint function(void*, DDGETCURRENTAUTOFLIPININFO*, DDGETCURRENTAUTOFLIPOUTINFO*);
alias PDX_GETPREVIOUSAUTOFLIP = uint function(void*, DDGETPREVIOUSAUTOFLIPININFO*, DDGETPREVIOUSAUTOFLIPOUTINFO*);
alias PDX_TRANSFER = uint function(void*, DDTRANSFERININFO*, DDTRANSFEROUTINFO*);
alias PDX_GETTRANSFERSTATUS = uint function(void*, void*, DDGETTRANSFERSTATUSOUTINFO*);
struct DXAPI_INTERFACE
{
    ushort Size;
    ushort Version;
    void* Context;
    void* InterfaceReference;
    void* InterfaceDereference;
    PDX_GETIRQINFO DxGetIrqInfo;
    PDX_ENABLEIRQ DxEnableIrq;
    PDX_SKIPNEXTFIELD DxSkipNextField;
    PDX_BOBNEXTFIELD DxBobNextField;
    PDX_SETSTATE DxSetState;
    PDX_LOCK DxLock;
    PDX_FLIPOVERLAY DxFlipOverlay;
    PDX_FLIPVIDEOPORT DxFlipVideoPort;
    PDX_GETPOLARITY DxGetPolarity;
    PDX_GETCURRENTAUTOFLIP DxGetCurrentAutoflip;
    PDX_GETPREVIOUSAUTOFLIP DxGetPreviousAutoflip;
    PDX_TRANSFER DxTransfer;
    PDX_GETTRANSFERSTATUS DxGetTransferStatus;
}
