module windows.win32.graphics.opengl;

import windows.win32.foundation : BOOL, COLORREF, PROC, PSTR, PWSTR;
import windows.win32.graphics.gdi : EMR, HDC, HENHMETAFILE;

version (Windows):
extern (Windows):

alias PFD_PIXEL_TYPE = byte;
enum : byte
{
    PFD_TYPE_RGBA       = 0x00,
    PFD_TYPE_COLORINDEX = 0x01,
}

alias PFD_LAYER_TYPE = byte;
enum : byte
{
    PFD_UNDERLAY_PLANE = cast(byte)0xff,
    PFD_MAIN_PLANE     = 0x00,
    PFD_OVERLAY_PLANE  = 0x01,
}

alias PFD_FLAGS = uint;
enum : uint
{
    PFD_DOUBLEBUFFER          = 0x00000001,
    PFD_STEREO                = 0x00000002,
    PFD_DRAW_TO_WINDOW        = 0x00000004,
    PFD_DRAW_TO_BITMAP        = 0x00000008,
    PFD_SUPPORT_GDI           = 0x00000010,
    PFD_SUPPORT_OPENGL        = 0x00000020,
    PFD_GENERIC_FORMAT        = 0x00000040,
    PFD_NEED_PALETTE          = 0x00000080,
    PFD_NEED_SYSTEM_PALETTE   = 0x00000100,
    PFD_SWAP_EXCHANGE         = 0x00000200,
    PFD_SWAP_COPY             = 0x00000400,
    PFD_SWAP_LAYER_BUFFERS    = 0x00000800,
    PFD_GENERIC_ACCELERATED   = 0x00001000,
    PFD_SUPPORT_DIRECTDRAW    = 0x00002000,
    PFD_DIRECT3D_ACCELERATED  = 0x00004000,
    PFD_SUPPORT_COMPOSITION   = 0x00008000,
    PFD_DEPTH_DONTCARE        = 0x20000000,
    PFD_DOUBLEBUFFER_DONTCARE = 0x40000000,
    PFD_STEREO_DONTCARE       = 0x80000000,
}

int ChoosePixelFormat(HDC, const(PIXELFORMATDESCRIPTOR)*);
int DescribePixelFormat(HDC, PFD_PIXEL_TYPE, uint, PIXELFORMATDESCRIPTOR*);
int GetPixelFormat(HDC);
BOOL SetPixelFormat(HDC, int, const(PIXELFORMATDESCRIPTOR)*);
uint GetEnhMetaFilePixelFormat(HENHMETAFILE, uint, PIXELFORMATDESCRIPTOR*);
BOOL wglCopyContext(HGLRC, HGLRC, uint);
HGLRC wglCreateContext(HDC);
HGLRC wglCreateLayerContext(HDC, int);
BOOL wglDeleteContext(HGLRC);
HGLRC wglGetCurrentContext();
HDC wglGetCurrentDC();
PROC wglGetProcAddress(const(char)*);
BOOL wglMakeCurrent(HDC, HGLRC);
BOOL wglShareLists(HGLRC, HGLRC);
BOOL wglUseFontBitmapsA(HDC, uint, uint, uint);
BOOL wglUseFontBitmapsW(HDC, uint, uint, uint);
BOOL SwapBuffers(HDC);
BOOL wglUseFontOutlinesA(HDC, uint, uint, uint, float, float, int, GLYPHMETRICSFLOAT*);
BOOL wglUseFontOutlinesW(HDC, uint, uint, uint, float, float, int, GLYPHMETRICSFLOAT*);
BOOL wglDescribeLayerPlane(HDC, int, int, uint, LAYERPLANEDESCRIPTOR*);
int wglSetLayerPaletteEntries(HDC, int, int, int, const(COLORREF)*);
int wglGetLayerPaletteEntries(HDC, int, int, int, COLORREF*);
BOOL wglRealizeLayerPalette(HDC, int, BOOL);
BOOL wglSwapLayerBuffers(HDC, uint);
void glAccum(uint, float);
void glAlphaFunc(uint, float);
ubyte glAreTexturesResident(int, const(uint)*, ubyte*);
void glArrayElement(int);
void glBegin(uint);
void glBindTexture(uint, uint);
void glBitmap(int, int, float, float, float, float, const(ubyte)*);
void glBlendFunc(uint, uint);
void glCallList(uint);
void glCallLists(int, uint, const(void)*);
void glClear(uint);
void glClearAccum(float, float, float, float);
void glClearColor(float, float, float, float);
void glClearDepth(double);
void glClearIndex(float);
void glClearStencil(int);
void glClipPlane(uint, const(double)*);
void glColor3b(byte, byte, byte);
void glColor3bv(const(byte)*);
void glColor3d(double, double, double);
void glColor3dv(const(double)*);
void glColor3f(float, float, float);
void glColor3fv(const(float)*);
void glColor3i(int, int, int);
void glColor3iv(const(int)*);
void glColor3s(short, short, short);
void glColor3sv(const(short)*);
void glColor3ub(ubyte, ubyte, ubyte);
void glColor3ubv(const(ubyte)*);
void glColor3ui(uint, uint, uint);
void glColor3uiv(const(uint)*);
void glColor3us(ushort, ushort, ushort);
void glColor3usv(const(ushort)*);
void glColor4b(byte, byte, byte, byte);
void glColor4bv(const(byte)*);
void glColor4d(double, double, double, double);
void glColor4dv(const(double)*);
void glColor4f(float, float, float, float);
void glColor4fv(const(float)*);
void glColor4i(int, int, int, int);
void glColor4iv(const(int)*);
void glColor4s(short, short, short, short);
void glColor4sv(const(short)*);
void glColor4ub(ubyte, ubyte, ubyte, ubyte);
void glColor4ubv(const(ubyte)*);
void glColor4ui(uint, uint, uint, uint);
void glColor4uiv(const(uint)*);
void glColor4us(ushort, ushort, ushort, ushort);
void glColor4usv(const(ushort)*);
void glColorMask(ubyte, ubyte, ubyte, ubyte);
void glColorMaterial(uint, uint);
void glColorPointer(int, uint, int, const(void)*);
void glCopyPixels(int, int, int, int, uint);
void glCopyTexImage1D(uint, int, uint, int, int, int, int);
void glCopyTexImage2D(uint, int, uint, int, int, int, int, int);
void glCopyTexSubImage1D(uint, int, int, int, int, int);
void glCopyTexSubImage2D(uint, int, int, int, int, int, int, int);
void glCullFace(uint);
void glDeleteLists(uint, int);
void glDeleteTextures(int, const(uint)*);
void glDepthFunc(uint);
void glDepthMask(ubyte);
void glDepthRange(double, double);
void glDisable(uint);
void glDisableClientState(uint);
void glDrawArrays(uint, int, int);
void glDrawBuffer(uint);
void glDrawElements(uint, int, uint, const(void)*);
void glDrawPixels(int, int, uint, uint, const(void)*);
void glEdgeFlag(ubyte);
void glEdgeFlagPointer(int, const(void)*);
void glEdgeFlagv(const(ubyte)*);
void glEnable(uint);
void glEnableClientState(uint);
void glEnd();
void glEndList();
void glEvalCoord1d(double);
void glEvalCoord1dv(const(double)*);
void glEvalCoord1f(float);
void glEvalCoord1fv(const(float)*);
void glEvalCoord2d(double, double);
void glEvalCoord2dv(const(double)*);
void glEvalCoord2f(float, float);
void glEvalCoord2fv(const(float)*);
void glEvalMesh1(uint, int, int);
void glEvalMesh2(uint, int, int, int, int);
void glEvalPoint1(int);
void glEvalPoint2(int, int);
void glFeedbackBuffer(int, uint, float*);
void glFinish();
void glFlush();
void glFogf(uint, float);
void glFogfv(uint, const(float)*);
void glFogi(uint, int);
void glFogiv(uint, const(int)*);
void glFrontFace(uint);
void glFrustum(double, double, double, double, double, double);
uint glGenLists(int);
void glGenTextures(int, uint*);
void glGetBooleanv(uint, ubyte*);
void glGetClipPlane(uint, double*);
void glGetDoublev(uint, double*);
uint glGetError();
void glGetFloatv(uint, float*);
void glGetIntegerv(uint, int*);
void glGetLightfv(uint, uint, float*);
void glGetLightiv(uint, uint, int*);
void glGetMapdv(uint, uint, double*);
void glGetMapfv(uint, uint, float*);
void glGetMapiv(uint, uint, int*);
void glGetMaterialfv(uint, uint, float*);
void glGetMaterialiv(uint, uint, int*);
void glGetPixelMapfv(uint, float*);
void glGetPixelMapuiv(uint, uint*);
void glGetPixelMapusv(uint, ushort*);
void glGetPointerv(uint, void**);
void glGetPolygonStipple(ubyte*);
ubyte* glGetString(uint);
void glGetTexEnvfv(uint, uint, float*);
void glGetTexEnviv(uint, uint, int*);
void glGetTexGendv(uint, uint, double*);
void glGetTexGenfv(uint, uint, float*);
void glGetTexGeniv(uint, uint, int*);
void glGetTexImage(uint, int, uint, uint, void*);
void glGetTexLevelParameterfv(uint, int, uint, float*);
void glGetTexLevelParameteriv(uint, int, uint, int*);
void glGetTexParameterfv(uint, uint, float*);
void glGetTexParameteriv(uint, uint, int*);
void glHint(uint, uint);
void glIndexMask(uint);
void glIndexPointer(uint, int, const(void)*);
void glIndexd(double);
void glIndexdv(const(double)*);
void glIndexf(float);
void glIndexfv(const(float)*);
void glIndexi(int);
void glIndexiv(const(int)*);
void glIndexs(short);
void glIndexsv(const(short)*);
void glIndexub(ubyte);
void glIndexubv(const(ubyte)*);
void glInitNames();
void glInterleavedArrays(uint, int, const(void)*);
ubyte glIsEnabled(uint);
ubyte glIsList(uint);
ubyte glIsTexture(uint);
void glLightModelf(uint, float);
void glLightModelfv(uint, const(float)*);
void glLightModeli(uint, int);
void glLightModeliv(uint, const(int)*);
void glLightf(uint, uint, float);
void glLightfv(uint, uint, const(float)*);
void glLighti(uint, uint, int);
void glLightiv(uint, uint, const(int)*);
void glLineStipple(int, ushort);
void glLineWidth(float);
void glListBase(uint);
void glLoadIdentity();
void glLoadMatrixd(const(double)*);
void glLoadMatrixf(const(float)*);
void glLoadName(uint);
void glLogicOp(uint);
void glMap1d(uint, double, double, int, int, const(double)*);
void glMap1f(uint, float, float, int, int, const(float)*);
void glMap2d(uint, double, double, int, int, double, double, int, int, const(double)*);
void glMap2f(uint, float, float, int, int, float, float, int, int, const(float)*);
void glMapGrid1d(int, double, double);
void glMapGrid1f(int, float, float);
void glMapGrid2d(int, double, double, int, double, double);
void glMapGrid2f(int, float, float, int, float, float);
void glMaterialf(uint, uint, float);
void glMaterialfv(uint, uint, const(float)*);
void glMateriali(uint, uint, int);
void glMaterialiv(uint, uint, const(int)*);
void glMatrixMode(uint);
void glMultMatrixd(const(double)*);
void glMultMatrixf(const(float)*);
void glNewList(uint, uint);
void glNormal3b(byte, byte, byte);
void glNormal3bv(const(byte)*);
void glNormal3d(double, double, double);
void glNormal3dv(const(double)*);
void glNormal3f(float, float, float);
void glNormal3fv(const(float)*);
void glNormal3i(int, int, int);
void glNormal3iv(const(int)*);
void glNormal3s(short, short, short);
void glNormal3sv(const(short)*);
void glNormalPointer(uint, int, const(void)*);
void glOrtho(double, double, double, double, double, double);
void glPassThrough(float);
void glPixelMapfv(uint, int, const(float)*);
void glPixelMapuiv(uint, int, const(uint)*);
void glPixelMapusv(uint, int, const(ushort)*);
void glPixelStoref(uint, float);
void glPixelStorei(uint, int);
void glPixelTransferf(uint, float);
void glPixelTransferi(uint, int);
void glPixelZoom(float, float);
void glPointSize(float);
void glPolygonMode(uint, uint);
void glPolygonOffset(float, float);
void glPolygonStipple(const(ubyte)*);
void glPopAttrib();
void glPopClientAttrib();
void glPopMatrix();
void glPopName();
void glPrioritizeTextures(int, const(uint)*, const(float)*);
void glPushAttrib(uint);
void glPushClientAttrib(uint);
void glPushMatrix();
void glPushName(uint);
void glRasterPos2d(double, double);
void glRasterPos2dv(const(double)*);
void glRasterPos2f(float, float);
void glRasterPos2fv(const(float)*);
void glRasterPos2i(int, int);
void glRasterPos2iv(const(int)*);
void glRasterPos2s(short, short);
void glRasterPos2sv(const(short)*);
void glRasterPos3d(double, double, double);
void glRasterPos3dv(const(double)*);
void glRasterPos3f(float, float, float);
void glRasterPos3fv(const(float)*);
void glRasterPos3i(int, int, int);
void glRasterPos3iv(const(int)*);
void glRasterPos3s(short, short, short);
void glRasterPos3sv(const(short)*);
void glRasterPos4d(double, double, double, double);
void glRasterPos4dv(const(double)*);
void glRasterPos4f(float, float, float, float);
void glRasterPos4fv(const(float)*);
void glRasterPos4i(int, int, int, int);
void glRasterPos4iv(const(int)*);
void glRasterPos4s(short, short, short, short);
void glRasterPos4sv(const(short)*);
void glReadBuffer(uint);
void glReadPixels(int, int, int, int, uint, uint, void*);
void glRectd(double, double, double, double);
void glRectdv(const(double)*, const(double)*);
void glRectf(float, float, float, float);
void glRectfv(const(float)*, const(float)*);
void glRecti(int, int, int, int);
void glRectiv(const(int)*, const(int)*);
void glRects(short, short, short, short);
void glRectsv(const(short)*, const(short)*);
int glRenderMode(uint);
void glRotated(double, double, double, double);
void glRotatef(float, float, float, float);
void glScaled(double, double, double);
void glScalef(float, float, float);
void glScissor(int, int, int, int);
void glSelectBuffer(int, uint*);
void glShadeModel(uint);
void glStencilFunc(uint, int, uint);
void glStencilMask(uint);
void glStencilOp(uint, uint, uint);
void glTexCoord1d(double);
void glTexCoord1dv(const(double)*);
void glTexCoord1f(float);
void glTexCoord1fv(const(float)*);
void glTexCoord1i(int);
void glTexCoord1iv(const(int)*);
void glTexCoord1s(short);
void glTexCoord1sv(const(short)*);
void glTexCoord2d(double, double);
void glTexCoord2dv(const(double)*);
void glTexCoord2f(float, float);
void glTexCoord2fv(const(float)*);
void glTexCoord2i(int, int);
void glTexCoord2iv(const(int)*);
void glTexCoord2s(short, short);
void glTexCoord2sv(const(short)*);
void glTexCoord3d(double, double, double);
void glTexCoord3dv(const(double)*);
void glTexCoord3f(float, float, float);
void glTexCoord3fv(const(float)*);
void glTexCoord3i(int, int, int);
void glTexCoord3iv(const(int)*);
void glTexCoord3s(short, short, short);
void glTexCoord3sv(const(short)*);
void glTexCoord4d(double, double, double, double);
void glTexCoord4dv(const(double)*);
void glTexCoord4f(float, float, float, float);
void glTexCoord4fv(const(float)*);
void glTexCoord4i(int, int, int, int);
void glTexCoord4iv(const(int)*);
void glTexCoord4s(short, short, short, short);
void glTexCoord4sv(const(short)*);
void glTexCoordPointer(int, uint, int, const(void)*);
void glTexEnvf(uint, uint, float);
void glTexEnvfv(uint, uint, const(float)*);
void glTexEnvi(uint, uint, int);
void glTexEnviv(uint, uint, const(int)*);
void glTexGend(uint, uint, double);
void glTexGendv(uint, uint, const(double)*);
void glTexGenf(uint, uint, float);
void glTexGenfv(uint, uint, const(float)*);
void glTexGeni(uint, uint, int);
void glTexGeniv(uint, uint, const(int)*);
void glTexImage1D(uint, int, int, int, int, uint, uint, const(void)*);
void glTexImage2D(uint, int, int, int, int, int, uint, uint, const(void)*);
void glTexParameterf(uint, uint, float);
void glTexParameterfv(uint, uint, const(float)*);
void glTexParameteri(uint, uint, int);
void glTexParameteriv(uint, uint, const(int)*);
void glTexSubImage1D(uint, int, int, int, uint, uint, const(void)*);
void glTexSubImage2D(uint, int, int, int, int, int, uint, uint, const(void)*);
void glTranslated(double, double, double);
void glTranslatef(float, float, float);
void glVertex2d(double, double);
void glVertex2dv(const(double)*);
void glVertex2f(float, float);
void glVertex2fv(const(float)*);
void glVertex2i(int, int);
void glVertex2iv(const(int)*);
void glVertex2s(short, short);
void glVertex2sv(const(short)*);
void glVertex3d(double, double, double);
void glVertex3dv(const(double)*);
void glVertex3f(float, float, float);
void glVertex3fv(const(float)*);
void glVertex3i(int, int, int);
void glVertex3iv(const(int)*);
void glVertex3s(short, short, short);
void glVertex3sv(const(short)*);
void glVertex4d(double, double, double, double);
void glVertex4dv(const(double)*);
void glVertex4f(float, float, float, float);
void glVertex4fv(const(float)*);
void glVertex4i(int, int, int, int);
void glVertex4iv(const(int)*);
void glVertex4s(short, short, short, short);
void glVertex4sv(const(short)*);
void glVertexPointer(int, uint, int, const(void)*);
void glViewport(int, int, int, int);
ubyte* gluErrorString(uint);
PWSTR gluErrorUnicodeStringEXT(uint);
ubyte* gluGetString(uint);
void gluOrtho2D(double, double, double, double);
void gluPerspective(double, double, double, double);
void gluPickMatrix(double, double, double, double, int*);
void gluLookAt(double, double, double, double, double, double, double, double, double);
int gluProject(double, double, double, const(double)*, const(double)*, const(int)*, double*, double*, double*);
int gluUnProject(double, double, double, const(double)*, const(double)*, const(int)*, double*, double*, double*);
int gluScaleImage(uint, int, int, uint, const(void)*, int, int, uint, void*);
int gluBuild1DMipmaps(uint, int, int, uint, uint, const(void)*);
int gluBuild2DMipmaps(uint, int, int, int, uint, uint, const(void)*);
GLUquadric* gluNewQuadric();
void gluDeleteQuadric(GLUquadric*);
void gluQuadricNormals(GLUquadric*, uint);
void gluQuadricTexture(GLUquadric*, ubyte);
void gluQuadricOrientation(GLUquadric*, uint);
void gluQuadricDrawStyle(GLUquadric*, uint);
void gluCylinder(GLUquadric*, double, double, double, int, int);
void gluDisk(GLUquadric*, double, double, int, int);
void gluPartialDisk(GLUquadric*, double, double, int, int, double, double);
void gluSphere(GLUquadric*, double, int, int);
void gluQuadricCallback(GLUquadric*, uint, long);
GLUtesselator* gluNewTess();
void gluDeleteTess(GLUtesselator*);
void gluTessBeginPolygon(GLUtesselator*, void*);
void gluTessBeginContour(GLUtesselator*);
void gluTessVertex(GLUtesselator*, double*, void*);
void gluTessEndContour(GLUtesselator*);
void gluTessEndPolygon(GLUtesselator*);
void gluTessProperty(GLUtesselator*, uint, double);
void gluTessNormal(GLUtesselator*, double, double, double);
void gluTessCallback(GLUtesselator*, uint, long);
void gluGetTessProperty(GLUtesselator*, uint, double*);
GLUnurbs* gluNewNurbsRenderer();
void gluDeleteNurbsRenderer(GLUnurbs*);
void gluBeginSurface(GLUnurbs*);
void gluBeginCurve(GLUnurbs*);
void gluEndCurve(GLUnurbs*);
void gluEndSurface(GLUnurbs*);
void gluBeginTrim(GLUnurbs*);
void gluEndTrim(GLUnurbs*);
void gluPwlCurve(GLUnurbs*, int, float*, int, uint);
void gluNurbsCurve(GLUnurbs*, int, float*, int, float*, int, uint);
void gluNurbsSurface(GLUnurbs*, int, float*, int, float*, int, int, float*, int, int, uint);
void gluLoadSamplingMatrices(GLUnurbs*, const(float)*, const(float)*, const(int)*);
void gluNurbsProperty(GLUnurbs*, uint, float);
void gluGetNurbsProperty(GLUnurbs*, uint, float*);
void gluNurbsCallback(GLUnurbs*, uint, long);
void gluBeginPolygon(GLUtesselator*);
void gluNextContour(GLUtesselator*, uint);
void gluEndPolygon(GLUtesselator*);
enum GL_VERSION_1_1 = 0x00000001;
enum GL_ACCUM = 0x00000100;
enum GL_LOAD = 0x00000101;
enum GL_RETURN = 0x00000102;
enum GL_MULT = 0x00000103;
enum GL_ADD = 0x00000104;
enum GL_NEVER = 0x00000200;
enum GL_LESS = 0x00000201;
enum GL_EQUAL = 0x00000202;
enum GL_LEQUAL = 0x00000203;
enum GL_GREATER = 0x00000204;
enum GL_NOTEQUAL = 0x00000205;
enum GL_GEQUAL = 0x00000206;
enum GL_ALWAYS = 0x00000207;
enum GL_CURRENT_BIT = 0x00000001;
enum GL_POINT_BIT = 0x00000002;
enum GL_LINE_BIT = 0x00000004;
enum GL_POLYGON_BIT = 0x00000008;
enum GL_POLYGON_STIPPLE_BIT = 0x00000010;
enum GL_PIXEL_MODE_BIT = 0x00000020;
enum GL_LIGHTING_BIT = 0x00000040;
enum GL_FOG_BIT = 0x00000080;
enum GL_DEPTH_BUFFER_BIT = 0x00000100;
enum GL_ACCUM_BUFFER_BIT = 0x00000200;
enum GL_STENCIL_BUFFER_BIT = 0x00000400;
enum GL_VIEWPORT_BIT = 0x00000800;
enum GL_TRANSFORM_BIT = 0x00001000;
enum GL_ENABLE_BIT = 0x00002000;
enum GL_COLOR_BUFFER_BIT = 0x00004000;
enum GL_HINT_BIT = 0x00008000;
enum GL_EVAL_BIT = 0x00010000;
enum GL_LIST_BIT = 0x00020000;
enum GL_TEXTURE_BIT = 0x00040000;
enum GL_SCISSOR_BIT = 0x00080000;
enum GL_ALL_ATTRIB_BITS = 0x000fffff;
enum GL_POINTS = 0x00000000;
enum GL_LINES = 0x00000001;
enum GL_LINE_LOOP = 0x00000002;
enum GL_LINE_STRIP = 0x00000003;
enum GL_TRIANGLES = 0x00000004;
enum GL_TRIANGLE_STRIP = 0x00000005;
enum GL_TRIANGLE_FAN = 0x00000006;
enum GL_QUADS = 0x00000007;
enum GL_QUAD_STRIP = 0x00000008;
enum GL_POLYGON = 0x00000009;
enum GL_ZERO = 0x00000000;
enum GL_ONE = 0x00000001;
enum GL_SRC_COLOR = 0x00000300;
enum GL_ONE_MINUS_SRC_COLOR = 0x00000301;
enum GL_SRC_ALPHA = 0x00000302;
enum GL_ONE_MINUS_SRC_ALPHA = 0x00000303;
enum GL_DST_ALPHA = 0x00000304;
enum GL_ONE_MINUS_DST_ALPHA = 0x00000305;
enum GL_DST_COLOR = 0x00000306;
enum GL_ONE_MINUS_DST_COLOR = 0x00000307;
enum GL_SRC_ALPHA_SATURATE = 0x00000308;
enum GL_TRUE = 0x00000001;
enum GL_FALSE = 0x00000000;
enum GL_CLIP_PLANE0 = 0x00003000;
enum GL_CLIP_PLANE1 = 0x00003001;
enum GL_CLIP_PLANE2 = 0x00003002;
enum GL_CLIP_PLANE3 = 0x00003003;
enum GL_CLIP_PLANE4 = 0x00003004;
enum GL_CLIP_PLANE5 = 0x00003005;
enum GL_BYTE = 0x00001400;
enum GL_UNSIGNED_BYTE = 0x00001401;
enum GL_SHORT = 0x00001402;
enum GL_UNSIGNED_SHORT = 0x00001403;
enum GL_INT = 0x00001404;
enum GL_UNSIGNED_INT = 0x00001405;
enum GL_FLOAT = 0x00001406;
enum GL_2_BYTES = 0x00001407;
enum GL_3_BYTES = 0x00001408;
enum GL_4_BYTES = 0x00001409;
enum GL_DOUBLE = 0x0000140a;
enum GL_NONE = 0x00000000;
enum GL_FRONT_LEFT = 0x00000400;
enum GL_FRONT_RIGHT = 0x00000401;
enum GL_BACK_LEFT = 0x00000402;
enum GL_BACK_RIGHT = 0x00000403;
enum GL_FRONT = 0x00000404;
enum GL_BACK = 0x00000405;
enum GL_LEFT = 0x00000406;
enum GL_RIGHT = 0x00000407;
enum GL_FRONT_AND_BACK = 0x00000408;
enum GL_AUX0 = 0x00000409;
enum GL_AUX1 = 0x0000040a;
enum GL_AUX2 = 0x0000040b;
enum GL_AUX3 = 0x0000040c;
enum GL_NO_ERROR = 0x00000000;
enum GL_INVALID_ENUM = 0x00000500;
enum GL_INVALID_VALUE = 0x00000501;
enum GL_INVALID_OPERATION = 0x00000502;
enum GL_STACK_OVERFLOW = 0x00000503;
enum GL_STACK_UNDERFLOW = 0x00000504;
enum GL_OUT_OF_MEMORY = 0x00000505;
enum GL_2D = 0x00000600;
enum GL_3D = 0x00000601;
enum GL_3D_COLOR = 0x00000602;
enum GL_3D_COLOR_TEXTURE = 0x00000603;
enum GL_4D_COLOR_TEXTURE = 0x00000604;
enum GL_PASS_THROUGH_TOKEN = 0x00000700;
enum GL_POINT_TOKEN = 0x00000701;
enum GL_LINE_TOKEN = 0x00000702;
enum GL_POLYGON_TOKEN = 0x00000703;
enum GL_BITMAP_TOKEN = 0x00000704;
enum GL_DRAW_PIXEL_TOKEN = 0x00000705;
enum GL_COPY_PIXEL_TOKEN = 0x00000706;
enum GL_LINE_RESET_TOKEN = 0x00000707;
enum GL_EXP = 0x00000800;
enum GL_EXP2 = 0x00000801;
enum GL_CW = 0x00000900;
enum GL_CCW = 0x00000901;
enum GL_COEFF = 0x00000a00;
enum GL_ORDER = 0x00000a01;
enum GL_DOMAIN = 0x00000a02;
enum GL_CURRENT_COLOR = 0x00000b00;
enum GL_CURRENT_INDEX = 0x00000b01;
enum GL_CURRENT_NORMAL = 0x00000b02;
enum GL_CURRENT_TEXTURE_COORDS = 0x00000b03;
enum GL_CURRENT_RASTER_COLOR = 0x00000b04;
enum GL_CURRENT_RASTER_INDEX = 0x00000b05;
enum GL_CURRENT_RASTER_TEXTURE_COORDS = 0x00000b06;
enum GL_CURRENT_RASTER_POSITION = 0x00000b07;
enum GL_CURRENT_RASTER_POSITION_VALID = 0x00000b08;
enum GL_CURRENT_RASTER_DISTANCE = 0x00000b09;
enum GL_POINT_SMOOTH = 0x00000b10;
enum GL_POINT_SIZE = 0x00000b11;
enum GL_POINT_SIZE_RANGE = 0x00000b12;
enum GL_POINT_SIZE_GRANULARITY = 0x00000b13;
enum GL_LINE_SMOOTH = 0x00000b20;
enum GL_LINE_WIDTH = 0x00000b21;
enum GL_LINE_WIDTH_RANGE = 0x00000b22;
enum GL_LINE_WIDTH_GRANULARITY = 0x00000b23;
enum GL_LINE_STIPPLE = 0x00000b24;
enum GL_LINE_STIPPLE_PATTERN = 0x00000b25;
enum GL_LINE_STIPPLE_REPEAT = 0x00000b26;
enum GL_LIST_MODE = 0x00000b30;
enum GL_MAX_LIST_NESTING = 0x00000b31;
enum GL_LIST_BASE = 0x00000b32;
enum GL_LIST_INDEX = 0x00000b33;
enum GL_POLYGON_MODE = 0x00000b40;
enum GL_POLYGON_SMOOTH = 0x00000b41;
enum GL_POLYGON_STIPPLE = 0x00000b42;
enum GL_EDGE_FLAG = 0x00000b43;
enum GL_CULL_FACE = 0x00000b44;
enum GL_CULL_FACE_MODE = 0x00000b45;
enum GL_FRONT_FACE = 0x00000b46;
enum GL_LIGHTING = 0x00000b50;
enum GL_LIGHT_MODEL_LOCAL_VIEWER = 0x00000b51;
enum GL_LIGHT_MODEL_TWO_SIDE = 0x00000b52;
enum GL_LIGHT_MODEL_AMBIENT = 0x00000b53;
enum GL_SHADE_MODEL = 0x00000b54;
enum GL_COLOR_MATERIAL_FACE = 0x00000b55;
enum GL_COLOR_MATERIAL_PARAMETER = 0x00000b56;
enum GL_COLOR_MATERIAL = 0x00000b57;
enum GL_FOG = 0x00000b60;
enum GL_FOG_INDEX = 0x00000b61;
enum GL_FOG_DENSITY = 0x00000b62;
enum GL_FOG_START = 0x00000b63;
enum GL_FOG_END = 0x00000b64;
enum GL_FOG_MODE = 0x00000b65;
enum GL_FOG_COLOR = 0x00000b66;
enum GL_DEPTH_RANGE = 0x00000b70;
enum GL_DEPTH_TEST = 0x00000b71;
enum GL_DEPTH_WRITEMASK = 0x00000b72;
enum GL_DEPTH_CLEAR_VALUE = 0x00000b73;
enum GL_DEPTH_FUNC = 0x00000b74;
enum GL_ACCUM_CLEAR_VALUE = 0x00000b80;
enum GL_STENCIL_TEST = 0x00000b90;
enum GL_STENCIL_CLEAR_VALUE = 0x00000b91;
enum GL_STENCIL_FUNC = 0x00000b92;
enum GL_STENCIL_VALUE_MASK = 0x00000b93;
enum GL_STENCIL_FAIL = 0x00000b94;
enum GL_STENCIL_PASS_DEPTH_FAIL = 0x00000b95;
enum GL_STENCIL_PASS_DEPTH_PASS = 0x00000b96;
enum GL_STENCIL_REF = 0x00000b97;
enum GL_STENCIL_WRITEMASK = 0x00000b98;
enum GL_MATRIX_MODE = 0x00000ba0;
enum GL_NORMALIZE = 0x00000ba1;
enum GL_VIEWPORT = 0x00000ba2;
enum GL_MODELVIEW_STACK_DEPTH = 0x00000ba3;
enum GL_PROJECTION_STACK_DEPTH = 0x00000ba4;
enum GL_TEXTURE_STACK_DEPTH = 0x00000ba5;
enum GL_MODELVIEW_MATRIX = 0x00000ba6;
enum GL_PROJECTION_MATRIX = 0x00000ba7;
enum GL_TEXTURE_MATRIX = 0x00000ba8;
enum GL_ATTRIB_STACK_DEPTH = 0x00000bb0;
enum GL_CLIENT_ATTRIB_STACK_DEPTH = 0x00000bb1;
enum GL_ALPHA_TEST = 0x00000bc0;
enum GL_ALPHA_TEST_FUNC = 0x00000bc1;
enum GL_ALPHA_TEST_REF = 0x00000bc2;
enum GL_DITHER = 0x00000bd0;
enum GL_BLEND_DST = 0x00000be0;
enum GL_BLEND_SRC = 0x00000be1;
enum GL_BLEND = 0x00000be2;
enum GL_LOGIC_OP_MODE = 0x00000bf0;
enum GL_INDEX_LOGIC_OP = 0x00000bf1;
enum GL_COLOR_LOGIC_OP = 0x00000bf2;
enum GL_AUX_BUFFERS = 0x00000c00;
enum GL_DRAW_BUFFER = 0x00000c01;
enum GL_READ_BUFFER = 0x00000c02;
enum GL_SCISSOR_BOX = 0x00000c10;
enum GL_SCISSOR_TEST = 0x00000c11;
enum GL_INDEX_CLEAR_VALUE = 0x00000c20;
enum GL_INDEX_WRITEMASK = 0x00000c21;
enum GL_COLOR_CLEAR_VALUE = 0x00000c22;
enum GL_COLOR_WRITEMASK = 0x00000c23;
enum GL_INDEX_MODE = 0x00000c30;
enum GL_RGBA_MODE = 0x00000c31;
enum GL_DOUBLEBUFFER = 0x00000c32;
enum GL_STEREO = 0x00000c33;
enum GL_RENDER_MODE = 0x00000c40;
enum GL_PERSPECTIVE_CORRECTION_HINT = 0x00000c50;
enum GL_POINT_SMOOTH_HINT = 0x00000c51;
enum GL_LINE_SMOOTH_HINT = 0x00000c52;
enum GL_POLYGON_SMOOTH_HINT = 0x00000c53;
enum GL_FOG_HINT = 0x00000c54;
enum GL_TEXTURE_GEN_S = 0x00000c60;
enum GL_TEXTURE_GEN_T = 0x00000c61;
enum GL_TEXTURE_GEN_R = 0x00000c62;
enum GL_TEXTURE_GEN_Q = 0x00000c63;
enum GL_PIXEL_MAP_I_TO_I = 0x00000c70;
enum GL_PIXEL_MAP_S_TO_S = 0x00000c71;
enum GL_PIXEL_MAP_I_TO_R = 0x00000c72;
enum GL_PIXEL_MAP_I_TO_G = 0x00000c73;
enum GL_PIXEL_MAP_I_TO_B = 0x00000c74;
enum GL_PIXEL_MAP_I_TO_A = 0x00000c75;
enum GL_PIXEL_MAP_R_TO_R = 0x00000c76;
enum GL_PIXEL_MAP_G_TO_G = 0x00000c77;
enum GL_PIXEL_MAP_B_TO_B = 0x00000c78;
enum GL_PIXEL_MAP_A_TO_A = 0x00000c79;
enum GL_PIXEL_MAP_I_TO_I_SIZE = 0x00000cb0;
enum GL_PIXEL_MAP_S_TO_S_SIZE = 0x00000cb1;
enum GL_PIXEL_MAP_I_TO_R_SIZE = 0x00000cb2;
enum GL_PIXEL_MAP_I_TO_G_SIZE = 0x00000cb3;
enum GL_PIXEL_MAP_I_TO_B_SIZE = 0x00000cb4;
enum GL_PIXEL_MAP_I_TO_A_SIZE = 0x00000cb5;
enum GL_PIXEL_MAP_R_TO_R_SIZE = 0x00000cb6;
enum GL_PIXEL_MAP_G_TO_G_SIZE = 0x00000cb7;
enum GL_PIXEL_MAP_B_TO_B_SIZE = 0x00000cb8;
enum GL_PIXEL_MAP_A_TO_A_SIZE = 0x00000cb9;
enum GL_UNPACK_SWAP_BYTES = 0x00000cf0;
enum GL_UNPACK_LSB_FIRST = 0x00000cf1;
enum GL_UNPACK_ROW_LENGTH = 0x00000cf2;
enum GL_UNPACK_SKIP_ROWS = 0x00000cf3;
enum GL_UNPACK_SKIP_PIXELS = 0x00000cf4;
enum GL_UNPACK_ALIGNMENT = 0x00000cf5;
enum GL_PACK_SWAP_BYTES = 0x00000d00;
enum GL_PACK_LSB_FIRST = 0x00000d01;
enum GL_PACK_ROW_LENGTH = 0x00000d02;
enum GL_PACK_SKIP_ROWS = 0x00000d03;
enum GL_PACK_SKIP_PIXELS = 0x00000d04;
enum GL_PACK_ALIGNMENT = 0x00000d05;
enum GL_MAP_COLOR = 0x00000d10;
enum GL_MAP_STENCIL = 0x00000d11;
enum GL_INDEX_SHIFT = 0x00000d12;
enum GL_INDEX_OFFSET = 0x00000d13;
enum GL_RED_SCALE = 0x00000d14;
enum GL_RED_BIAS = 0x00000d15;
enum GL_ZOOM_X = 0x00000d16;
enum GL_ZOOM_Y = 0x00000d17;
enum GL_GREEN_SCALE = 0x00000d18;
enum GL_GREEN_BIAS = 0x00000d19;
enum GL_BLUE_SCALE = 0x00000d1a;
enum GL_BLUE_BIAS = 0x00000d1b;
enum GL_ALPHA_SCALE = 0x00000d1c;
enum GL_ALPHA_BIAS = 0x00000d1d;
enum GL_DEPTH_SCALE = 0x00000d1e;
enum GL_DEPTH_BIAS = 0x00000d1f;
enum GL_MAX_EVAL_ORDER = 0x00000d30;
enum GL_MAX_LIGHTS = 0x00000d31;
enum GL_MAX_CLIP_PLANES = 0x00000d32;
enum GL_MAX_TEXTURE_SIZE = 0x00000d33;
enum GL_MAX_PIXEL_MAP_TABLE = 0x00000d34;
enum GL_MAX_ATTRIB_STACK_DEPTH = 0x00000d35;
enum GL_MAX_MODELVIEW_STACK_DEPTH = 0x00000d36;
enum GL_MAX_NAME_STACK_DEPTH = 0x00000d37;
enum GL_MAX_PROJECTION_STACK_DEPTH = 0x00000d38;
enum GL_MAX_TEXTURE_STACK_DEPTH = 0x00000d39;
enum GL_MAX_VIEWPORT_DIMS = 0x00000d3a;
enum GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x00000d3b;
enum GL_SUBPIXEL_BITS = 0x00000d50;
enum GL_INDEX_BITS = 0x00000d51;
enum GL_RED_BITS = 0x00000d52;
enum GL_GREEN_BITS = 0x00000d53;
enum GL_BLUE_BITS = 0x00000d54;
enum GL_ALPHA_BITS = 0x00000d55;
enum GL_DEPTH_BITS = 0x00000d56;
enum GL_STENCIL_BITS = 0x00000d57;
enum GL_ACCUM_RED_BITS = 0x00000d58;
enum GL_ACCUM_GREEN_BITS = 0x00000d59;
enum GL_ACCUM_BLUE_BITS = 0x00000d5a;
enum GL_ACCUM_ALPHA_BITS = 0x00000d5b;
enum GL_NAME_STACK_DEPTH = 0x00000d70;
enum GL_AUTO_NORMAL = 0x00000d80;
enum GL_MAP1_COLOR_4 = 0x00000d90;
enum GL_MAP1_INDEX = 0x00000d91;
enum GL_MAP1_NORMAL = 0x00000d92;
enum GL_MAP1_TEXTURE_COORD_1 = 0x00000d93;
enum GL_MAP1_TEXTURE_COORD_2 = 0x00000d94;
enum GL_MAP1_TEXTURE_COORD_3 = 0x00000d95;
enum GL_MAP1_TEXTURE_COORD_4 = 0x00000d96;
enum GL_MAP1_VERTEX_3 = 0x00000d97;
enum GL_MAP1_VERTEX_4 = 0x00000d98;
enum GL_MAP2_COLOR_4 = 0x00000db0;
enum GL_MAP2_INDEX = 0x00000db1;
enum GL_MAP2_NORMAL = 0x00000db2;
enum GL_MAP2_TEXTURE_COORD_1 = 0x00000db3;
enum GL_MAP2_TEXTURE_COORD_2 = 0x00000db4;
enum GL_MAP2_TEXTURE_COORD_3 = 0x00000db5;
enum GL_MAP2_TEXTURE_COORD_4 = 0x00000db6;
enum GL_MAP2_VERTEX_3 = 0x00000db7;
enum GL_MAP2_VERTEX_4 = 0x00000db8;
enum GL_MAP1_GRID_DOMAIN = 0x00000dd0;
enum GL_MAP1_GRID_SEGMENTS = 0x00000dd1;
enum GL_MAP2_GRID_DOMAIN = 0x00000dd2;
enum GL_MAP2_GRID_SEGMENTS = 0x00000dd3;
enum GL_TEXTURE_1D = 0x00000de0;
enum GL_TEXTURE_2D = 0x00000de1;
enum GL_FEEDBACK_BUFFER_POINTER = 0x00000df0;
enum GL_FEEDBACK_BUFFER_SIZE = 0x00000df1;
enum GL_FEEDBACK_BUFFER_TYPE = 0x00000df2;
enum GL_SELECTION_BUFFER_POINTER = 0x00000df3;
enum GL_SELECTION_BUFFER_SIZE = 0x00000df4;
enum GL_TEXTURE_WIDTH = 0x00001000;
enum GL_TEXTURE_HEIGHT = 0x00001001;
enum GL_TEXTURE_INTERNAL_FORMAT = 0x00001003;
enum GL_TEXTURE_BORDER_COLOR = 0x00001004;
enum GL_TEXTURE_BORDER = 0x00001005;
enum GL_DONT_CARE = 0x00001100;
enum GL_FASTEST = 0x00001101;
enum GL_NICEST = 0x00001102;
enum GL_LIGHT0 = 0x00004000;
enum GL_LIGHT1 = 0x00004001;
enum GL_LIGHT2 = 0x00004002;
enum GL_LIGHT3 = 0x00004003;
enum GL_LIGHT4 = 0x00004004;
enum GL_LIGHT5 = 0x00004005;
enum GL_LIGHT6 = 0x00004006;
enum GL_LIGHT7 = 0x00004007;
enum GL_AMBIENT = 0x00001200;
enum GL_DIFFUSE = 0x00001201;
enum GL_SPECULAR = 0x00001202;
enum GL_POSITION = 0x00001203;
enum GL_SPOT_DIRECTION = 0x00001204;
enum GL_SPOT_EXPONENT = 0x00001205;
enum GL_SPOT_CUTOFF = 0x00001206;
enum GL_CONSTANT_ATTENUATION = 0x00001207;
enum GL_LINEAR_ATTENUATION = 0x00001208;
enum GL_QUADRATIC_ATTENUATION = 0x00001209;
enum GL_COMPILE = 0x00001300;
enum GL_COMPILE_AND_EXECUTE = 0x00001301;
enum GL_CLEAR = 0x00001500;
enum GL_AND = 0x00001501;
enum GL_AND_REVERSE = 0x00001502;
enum GL_COPY = 0x00001503;
enum GL_AND_INVERTED = 0x00001504;
enum GL_NOOP = 0x00001505;
enum GL_XOR = 0x00001506;
enum GL_OR = 0x00001507;
enum GL_NOR = 0x00001508;
enum GL_EQUIV = 0x00001509;
enum GL_INVERT = 0x0000150a;
enum GL_OR_REVERSE = 0x0000150b;
enum GL_COPY_INVERTED = 0x0000150c;
enum GL_OR_INVERTED = 0x0000150d;
enum GL_NAND = 0x0000150e;
enum GL_SET = 0x0000150f;
enum GL_EMISSION = 0x00001600;
enum GL_SHININESS = 0x00001601;
enum GL_AMBIENT_AND_DIFFUSE = 0x00001602;
enum GL_COLOR_INDEXES = 0x00001603;
enum GL_MODELVIEW = 0x00001700;
enum GL_PROJECTION = 0x00001701;
enum GL_TEXTURE = 0x00001702;
enum GL_COLOR = 0x00001800;
enum GL_DEPTH = 0x00001801;
enum GL_STENCIL = 0x00001802;
enum GL_COLOR_INDEX = 0x00001900;
enum GL_STENCIL_INDEX = 0x00001901;
enum GL_DEPTH_COMPONENT = 0x00001902;
enum GL_RED = 0x00001903;
enum GL_GREEN = 0x00001904;
enum GL_BLUE = 0x00001905;
enum GL_ALPHA = 0x00001906;
enum GL_RGB = 0x00001907;
enum GL_RGBA = 0x00001908;
enum GL_LUMINANCE = 0x00001909;
enum GL_LUMINANCE_ALPHA = 0x0000190a;
enum GL_BITMAP = 0x00001a00;
enum GL_POINT = 0x00001b00;
enum GL_LINE = 0x00001b01;
enum GL_FILL = 0x00001b02;
enum GL_RENDER = 0x00001c00;
enum GL_FEEDBACK = 0x00001c01;
enum GL_SELECT = 0x00001c02;
enum GL_FLAT = 0x00001d00;
enum GL_SMOOTH = 0x00001d01;
enum GL_KEEP = 0x00001e00;
enum GL_REPLACE = 0x00001e01;
enum GL_INCR = 0x00001e02;
enum GL_DECR = 0x00001e03;
enum GL_VENDOR = 0x00001f00;
enum GL_RENDERER = 0x00001f01;
enum GL_VERSION = 0x00001f02;
enum GL_EXTENSIONS = 0x00001f03;
enum GL_S = 0x00002000;
enum GL_T = 0x00002001;
enum GL_R = 0x00002002;
enum GL_Q = 0x00002003;
enum GL_MODULATE = 0x00002100;
enum GL_DECAL = 0x00002101;
enum GL_TEXTURE_ENV_MODE = 0x00002200;
enum GL_TEXTURE_ENV_COLOR = 0x00002201;
enum GL_TEXTURE_ENV = 0x00002300;
enum GL_EYE_LINEAR = 0x00002400;
enum GL_OBJECT_LINEAR = 0x00002401;
enum GL_SPHERE_MAP = 0x00002402;
enum GL_TEXTURE_GEN_MODE = 0x00002500;
enum GL_OBJECT_PLANE = 0x00002501;
enum GL_EYE_PLANE = 0x00002502;
enum GL_NEAREST = 0x00002600;
enum GL_LINEAR = 0x00002601;
enum GL_NEAREST_MIPMAP_NEAREST = 0x00002700;
enum GL_LINEAR_MIPMAP_NEAREST = 0x00002701;
enum GL_NEAREST_MIPMAP_LINEAR = 0x00002702;
enum GL_LINEAR_MIPMAP_LINEAR = 0x00002703;
enum GL_TEXTURE_MAG_FILTER = 0x00002800;
enum GL_TEXTURE_MIN_FILTER = 0x00002801;
enum GL_TEXTURE_WRAP_S = 0x00002802;
enum GL_TEXTURE_WRAP_T = 0x00002803;
enum GL_CLAMP = 0x00002900;
enum GL_REPEAT = 0x00002901;
enum GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
enum GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
enum GL_CLIENT_ALL_ATTRIB_BITS = 0xffffffff;
enum GL_POLYGON_OFFSET_FACTOR = 0x00008038;
enum GL_POLYGON_OFFSET_UNITS = 0x00002a00;
enum GL_POLYGON_OFFSET_POINT = 0x00002a01;
enum GL_POLYGON_OFFSET_LINE = 0x00002a02;
enum GL_POLYGON_OFFSET_FILL = 0x00008037;
enum GL_ALPHA4 = 0x0000803b;
enum GL_ALPHA8 = 0x0000803c;
enum GL_ALPHA12 = 0x0000803d;
enum GL_ALPHA16 = 0x0000803e;
enum GL_LUMINANCE4 = 0x0000803f;
enum GL_LUMINANCE8 = 0x00008040;
enum GL_LUMINANCE12 = 0x00008041;
enum GL_LUMINANCE16 = 0x00008042;
enum GL_LUMINANCE4_ALPHA4 = 0x00008043;
enum GL_LUMINANCE6_ALPHA2 = 0x00008044;
enum GL_LUMINANCE8_ALPHA8 = 0x00008045;
enum GL_LUMINANCE12_ALPHA4 = 0x00008046;
enum GL_LUMINANCE12_ALPHA12 = 0x00008047;
enum GL_LUMINANCE16_ALPHA16 = 0x00008048;
enum GL_INTENSITY = 0x00008049;
enum GL_INTENSITY4 = 0x0000804a;
enum GL_INTENSITY8 = 0x0000804b;
enum GL_INTENSITY12 = 0x0000804c;
enum GL_INTENSITY16 = 0x0000804d;
enum GL_R3_G3_B2 = 0x00002a10;
enum GL_RGB4 = 0x0000804f;
enum GL_RGB5 = 0x00008050;
enum GL_RGB8 = 0x00008051;
enum GL_RGB10 = 0x00008052;
enum GL_RGB12 = 0x00008053;
enum GL_RGB16 = 0x00008054;
enum GL_RGBA2 = 0x00008055;
enum GL_RGBA4 = 0x00008056;
enum GL_RGB5_A1 = 0x00008057;
enum GL_RGBA8 = 0x00008058;
enum GL_RGB10_A2 = 0x00008059;
enum GL_RGBA12 = 0x0000805a;
enum GL_RGBA16 = 0x0000805b;
enum GL_TEXTURE_RED_SIZE = 0x0000805c;
enum GL_TEXTURE_GREEN_SIZE = 0x0000805d;
enum GL_TEXTURE_BLUE_SIZE = 0x0000805e;
enum GL_TEXTURE_ALPHA_SIZE = 0x0000805f;
enum GL_TEXTURE_LUMINANCE_SIZE = 0x00008060;
enum GL_TEXTURE_INTENSITY_SIZE = 0x00008061;
enum GL_PROXY_TEXTURE_1D = 0x00008063;
enum GL_PROXY_TEXTURE_2D = 0x00008064;
enum GL_TEXTURE_PRIORITY = 0x00008066;
enum GL_TEXTURE_RESIDENT = 0x00008067;
enum GL_TEXTURE_BINDING_1D = 0x00008068;
enum GL_TEXTURE_BINDING_2D = 0x00008069;
enum GL_VERTEX_ARRAY = 0x00008074;
enum GL_NORMAL_ARRAY = 0x00008075;
enum GL_COLOR_ARRAY = 0x00008076;
enum GL_INDEX_ARRAY = 0x00008077;
enum GL_TEXTURE_COORD_ARRAY = 0x00008078;
enum GL_EDGE_FLAG_ARRAY = 0x00008079;
enum GL_VERTEX_ARRAY_SIZE = 0x0000807a;
enum GL_VERTEX_ARRAY_TYPE = 0x0000807b;
enum GL_VERTEX_ARRAY_STRIDE = 0x0000807c;
enum GL_NORMAL_ARRAY_TYPE = 0x0000807e;
enum GL_NORMAL_ARRAY_STRIDE = 0x0000807f;
enum GL_COLOR_ARRAY_SIZE = 0x00008081;
enum GL_COLOR_ARRAY_TYPE = 0x00008082;
enum GL_COLOR_ARRAY_STRIDE = 0x00008083;
enum GL_INDEX_ARRAY_TYPE = 0x00008085;
enum GL_INDEX_ARRAY_STRIDE = 0x00008086;
enum GL_TEXTURE_COORD_ARRAY_SIZE = 0x00008088;
enum GL_TEXTURE_COORD_ARRAY_TYPE = 0x00008089;
enum GL_TEXTURE_COORD_ARRAY_STRIDE = 0x0000808a;
enum GL_EDGE_FLAG_ARRAY_STRIDE = 0x0000808c;
enum GL_VERTEX_ARRAY_POINTER = 0x0000808e;
enum GL_NORMAL_ARRAY_POINTER = 0x0000808f;
enum GL_COLOR_ARRAY_POINTER = 0x00008090;
enum GL_INDEX_ARRAY_POINTER = 0x00008091;
enum GL_TEXTURE_COORD_ARRAY_POINTER = 0x00008092;
enum GL_EDGE_FLAG_ARRAY_POINTER = 0x00008093;
enum GL_V2F = 0x00002a20;
enum GL_V3F = 0x00002a21;
enum GL_C4UB_V2F = 0x00002a22;
enum GL_C4UB_V3F = 0x00002a23;
enum GL_C3F_V3F = 0x00002a24;
enum GL_N3F_V3F = 0x00002a25;
enum GL_C4F_N3F_V3F = 0x00002a26;
enum GL_T2F_V3F = 0x00002a27;
enum GL_T4F_V4F = 0x00002a28;
enum GL_T2F_C4UB_V3F = 0x00002a29;
enum GL_T2F_C3F_V3F = 0x00002a2a;
enum GL_T2F_N3F_V3F = 0x00002a2b;
enum GL_T2F_C4F_N3F_V3F = 0x00002a2c;
enum GL_T4F_C4F_N3F_V4F = 0x00002a2d;
enum GL_EXT_vertex_array = 0x00000001;
enum GL_EXT_bgra = 0x00000001;
enum GL_EXT_paletted_texture = 0x00000001;
enum GL_WIN_swap_hint = 0x00000001;
enum GL_WIN_draw_range_elements = 0x00000001;
enum GL_VERTEX_ARRAY_EXT = 0x00008074;
enum GL_NORMAL_ARRAY_EXT = 0x00008075;
enum GL_COLOR_ARRAY_EXT = 0x00008076;
enum GL_INDEX_ARRAY_EXT = 0x00008077;
enum GL_TEXTURE_COORD_ARRAY_EXT = 0x00008078;
enum GL_EDGE_FLAG_ARRAY_EXT = 0x00008079;
enum GL_VERTEX_ARRAY_SIZE_EXT = 0x0000807a;
enum GL_VERTEX_ARRAY_TYPE_EXT = 0x0000807b;
enum GL_VERTEX_ARRAY_STRIDE_EXT = 0x0000807c;
enum GL_VERTEX_ARRAY_COUNT_EXT = 0x0000807d;
enum GL_NORMAL_ARRAY_TYPE_EXT = 0x0000807e;
enum GL_NORMAL_ARRAY_STRIDE_EXT = 0x0000807f;
enum GL_NORMAL_ARRAY_COUNT_EXT = 0x00008080;
enum GL_COLOR_ARRAY_SIZE_EXT = 0x00008081;
enum GL_COLOR_ARRAY_TYPE_EXT = 0x00008082;
enum GL_COLOR_ARRAY_STRIDE_EXT = 0x00008083;
enum GL_COLOR_ARRAY_COUNT_EXT = 0x00008084;
enum GL_INDEX_ARRAY_TYPE_EXT = 0x00008085;
enum GL_INDEX_ARRAY_STRIDE_EXT = 0x00008086;
enum GL_INDEX_ARRAY_COUNT_EXT = 0x00008087;
enum GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x00008088;
enum GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x00008089;
enum GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x0000808a;
enum GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x0000808b;
enum GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x0000808c;
enum GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x0000808d;
enum GL_VERTEX_ARRAY_POINTER_EXT = 0x0000808e;
enum GL_NORMAL_ARRAY_POINTER_EXT = 0x0000808f;
enum GL_COLOR_ARRAY_POINTER_EXT = 0x00008090;
enum GL_INDEX_ARRAY_POINTER_EXT = 0x00008091;
enum GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x00008092;
enum GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x00008093;
enum GL_DOUBLE_EXT = 0x0000140a;
enum GL_BGR_EXT = 0x000080e0;
enum GL_BGRA_EXT = 0x000080e1;
enum GL_COLOR_TABLE_FORMAT_EXT = 0x000080d8;
enum GL_COLOR_TABLE_WIDTH_EXT = 0x000080d9;
enum GL_COLOR_TABLE_RED_SIZE_EXT = 0x000080da;
enum GL_COLOR_TABLE_GREEN_SIZE_EXT = 0x000080db;
enum GL_COLOR_TABLE_BLUE_SIZE_EXT = 0x000080dc;
enum GL_COLOR_TABLE_ALPHA_SIZE_EXT = 0x000080dd;
enum GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = 0x000080de;
enum GL_COLOR_TABLE_INTENSITY_SIZE_EXT = 0x000080df;
enum GL_COLOR_INDEX1_EXT = 0x000080e2;
enum GL_COLOR_INDEX2_EXT = 0x000080e3;
enum GL_COLOR_INDEX4_EXT = 0x000080e4;
enum GL_COLOR_INDEX8_EXT = 0x000080e5;
enum GL_COLOR_INDEX12_EXT = 0x000080e6;
enum GL_COLOR_INDEX16_EXT = 0x000080e7;
enum GL_MAX_ELEMENTS_VERTICES_WIN = 0x000080e8;
enum GL_MAX_ELEMENTS_INDICES_WIN = 0x000080e9;
enum GL_PHONG_WIN = 0x000080ea;
enum GL_PHONG_HINT_WIN = 0x000080eb;
enum GL_FOG_SPECULAR_TEXTURE_WIN = 0x000080ec;
enum GL_LOGIC_OP = 0x00000bf1;
enum GL_TEXTURE_COMPONENTS = 0x00001003;
enum GLU_VERSION_1_1 = 0x00000001;
enum GLU_VERSION_1_2 = 0x00000001;
enum GLU_INVALID_ENUM = 0x00018a24;
enum GLU_INVALID_VALUE = 0x00018a25;
enum GLU_OUT_OF_MEMORY = 0x00018a26;
enum GLU_INCOMPATIBLE_GL_VERSION = 0x00018a27;
enum GLU_VERSION = 0x000189c0;
enum GLU_EXTENSIONS = 0x000189c1;
enum GLU_TRUE = 0x00000001;
enum GLU_FALSE = 0x00000000;
enum GLU_SMOOTH = 0x000186a0;
enum GLU_FLAT = 0x000186a1;
enum GLU_NONE = 0x000186a2;
enum GLU_POINT = 0x000186aa;
enum GLU_LINE = 0x000186ab;
enum GLU_FILL = 0x000186ac;
enum GLU_SILHOUETTE = 0x000186ad;
enum GLU_OUTSIDE = 0x000186b4;
enum GLU_INSIDE = 0x000186b5;
enum GLU_TESS_WINDING_RULE = 0x0001872c;
enum GLU_TESS_BOUNDARY_ONLY = 0x0001872d;
enum GLU_TESS_TOLERANCE = 0x0001872e;
enum GLU_TESS_WINDING_ODD = 0x00018722;
enum GLU_TESS_WINDING_NONZERO = 0x00018723;
enum GLU_TESS_WINDING_POSITIVE = 0x00018724;
enum GLU_TESS_WINDING_NEGATIVE = 0x00018725;
enum GLU_TESS_WINDING_ABS_GEQ_TWO = 0x00018726;
enum GLU_TESS_BEGIN = 0x00018704;
enum GLU_TESS_VERTEX = 0x00018705;
enum GLU_TESS_END = 0x00018706;
enum GLU_TESS_ERROR = 0x00018707;
enum GLU_TESS_EDGE_FLAG = 0x00018708;
enum GLU_TESS_COMBINE = 0x00018709;
enum GLU_TESS_BEGIN_DATA = 0x0001870a;
enum GLU_TESS_VERTEX_DATA = 0x0001870b;
enum GLU_TESS_END_DATA = 0x0001870c;
enum GLU_TESS_ERROR_DATA = 0x0001870d;
enum GLU_TESS_EDGE_FLAG_DATA = 0x0001870e;
enum GLU_TESS_COMBINE_DATA = 0x0001870f;
enum GLU_TESS_ERROR1 = 0x00018737;
enum GLU_TESS_ERROR2 = 0x00018738;
enum GLU_TESS_ERROR3 = 0x00018739;
enum GLU_TESS_ERROR4 = 0x0001873a;
enum GLU_TESS_ERROR5 = 0x0001873b;
enum GLU_TESS_ERROR6 = 0x0001873c;
enum GLU_TESS_ERROR7 = 0x0001873d;
enum GLU_TESS_ERROR8 = 0x0001873e;
enum GLU_TESS_MISSING_BEGIN_POLYGON = 0x00018737;
enum GLU_TESS_MISSING_BEGIN_CONTOUR = 0x00018738;
enum GLU_TESS_MISSING_END_POLYGON = 0x00018739;
enum GLU_TESS_MISSING_END_CONTOUR = 0x0001873a;
enum GLU_TESS_COORD_TOO_LARGE = 0x0001873b;
enum GLU_TESS_NEED_COMBINE_CALLBACK = 0x0001873c;
enum GLU_AUTO_LOAD_MATRIX = 0x00018768;
enum GLU_CULLING = 0x00018769;
enum GLU_SAMPLING_TOLERANCE = 0x0001876b;
enum GLU_DISPLAY_MODE = 0x0001876c;
enum GLU_PARAMETRIC_TOLERANCE = 0x0001876a;
enum GLU_SAMPLING_METHOD = 0x0001876d;
enum GLU_U_STEP = 0x0001876e;
enum GLU_V_STEP = 0x0001876f;
enum GLU_PATH_LENGTH = 0x00018777;
enum GLU_PARAMETRIC_ERROR = 0x00018778;
enum GLU_DOMAIN_DISTANCE = 0x00018779;
enum GLU_MAP1_TRIM_2 = 0x00018772;
enum GLU_MAP1_TRIM_3 = 0x00018773;
enum GLU_OUTLINE_POLYGON = 0x00018790;
enum GLU_OUTLINE_PATCH = 0x00018791;
enum GLU_NURBS_ERROR1 = 0x0001879b;
enum GLU_NURBS_ERROR2 = 0x0001879c;
enum GLU_NURBS_ERROR3 = 0x0001879d;
enum GLU_NURBS_ERROR4 = 0x0001879e;
enum GLU_NURBS_ERROR5 = 0x0001879f;
enum GLU_NURBS_ERROR6 = 0x000187a0;
enum GLU_NURBS_ERROR7 = 0x000187a1;
enum GLU_NURBS_ERROR8 = 0x000187a2;
enum GLU_NURBS_ERROR9 = 0x000187a3;
enum GLU_NURBS_ERROR10 = 0x000187a4;
enum GLU_NURBS_ERROR11 = 0x000187a5;
enum GLU_NURBS_ERROR12 = 0x000187a6;
enum GLU_NURBS_ERROR13 = 0x000187a7;
enum GLU_NURBS_ERROR14 = 0x000187a8;
enum GLU_NURBS_ERROR15 = 0x000187a9;
enum GLU_NURBS_ERROR16 = 0x000187aa;
enum GLU_NURBS_ERROR17 = 0x000187ab;
enum GLU_NURBS_ERROR18 = 0x000187ac;
enum GLU_NURBS_ERROR19 = 0x000187ad;
enum GLU_NURBS_ERROR20 = 0x000187ae;
enum GLU_NURBS_ERROR21 = 0x000187af;
enum GLU_NURBS_ERROR22 = 0x000187b0;
enum GLU_NURBS_ERROR23 = 0x000187b1;
enum GLU_NURBS_ERROR24 = 0x000187b2;
enum GLU_NURBS_ERROR25 = 0x000187b3;
enum GLU_NURBS_ERROR26 = 0x000187b4;
enum GLU_NURBS_ERROR27 = 0x000187b5;
enum GLU_NURBS_ERROR28 = 0x000187b6;
enum GLU_NURBS_ERROR29 = 0x000187b7;
enum GLU_NURBS_ERROR30 = 0x000187b8;
enum GLU_NURBS_ERROR31 = 0x000187b9;
enum GLU_NURBS_ERROR32 = 0x000187ba;
enum GLU_NURBS_ERROR33 = 0x000187bb;
enum GLU_NURBS_ERROR34 = 0x000187bc;
enum GLU_NURBS_ERROR35 = 0x000187bd;
enum GLU_NURBS_ERROR36 = 0x000187be;
enum GLU_NURBS_ERROR37 = 0x000187bf;
enum GLU_CW = 0x00018718;
enum GLU_CCW = 0x00018719;
enum GLU_INTERIOR = 0x0001871a;
enum GLU_EXTERIOR = 0x0001871b;
enum GLU_UNKNOWN = 0x0001871c;
enum GLU_BEGIN = 0x00018704;
enum GLU_VERTEX = 0x00018705;
enum GLU_END = 0x00018706;
enum GLU_ERROR = 0x00018707;
enum GLU_EDGE_FLAG = 0x00018708;
alias HGLRC = void*;
struct PIXELFORMATDESCRIPTOR
{
    ushort nSize;
    ushort nVersion;
    PFD_FLAGS dwFlags;
    PFD_PIXEL_TYPE iPixelType;
    ubyte cColorBits;
    ubyte cRedBits;
    ubyte cRedShift;
    ubyte cGreenBits;
    ubyte cGreenShift;
    ubyte cBlueBits;
    ubyte cBlueShift;
    ubyte cAlphaBits;
    ubyte cAlphaShift;
    ubyte cAccumBits;
    ubyte cAccumRedBits;
    ubyte cAccumGreenBits;
    ubyte cAccumBlueBits;
    ubyte cAccumAlphaBits;
    ubyte cDepthBits;
    ubyte cStencilBits;
    ubyte cAuxBuffers;
    PFD_LAYER_TYPE iLayerType;
    ubyte bReserved;
    uint dwLayerMask;
    uint dwVisibleMask;
    uint dwDamageMask;
}
struct EMRPIXELFORMAT
{
    EMR emr;
    PIXELFORMATDESCRIPTOR pfd;
}
struct POINTFLOAT
{
    float x;
    float y;
}
struct GLYPHMETRICSFLOAT
{
    float gmfBlackBoxX;
    float gmfBlackBoxY;
    POINTFLOAT gmfptGlyphOrigin;
    float gmfCellIncX;
    float gmfCellIncY;
}
struct LAYERPLANEDESCRIPTOR
{
    ushort nSize;
    ushort nVersion;
    uint dwFlags;
    ubyte iPixelType;
    ubyte cColorBits;
    ubyte cRedBits;
    ubyte cRedShift;
    ubyte cGreenBits;
    ubyte cGreenShift;
    ubyte cBlueBits;
    ubyte cBlueShift;
    ubyte cAlphaBits;
    ubyte cAlphaShift;
    ubyte cAccumBits;
    ubyte cAccumRedBits;
    ubyte cAccumGreenBits;
    ubyte cAccumBlueBits;
    ubyte cAccumAlphaBits;
    ubyte cDepthBits;
    ubyte cStencilBits;
    ubyte cAuxBuffers;
    ubyte iLayerPlane;
    ubyte bReserved;
    COLORREF crTransparent;
}
alias PFNGLARRAYELEMENTEXTPROC = void function(int);
alias PFNGLDRAWARRAYSEXTPROC = void function(uint, int, int);
alias PFNGLVERTEXPOINTEREXTPROC = void function(int, uint, int, int, const(void)*);
alias PFNGLNORMALPOINTEREXTPROC = void function(uint, int, int, const(void)*);
alias PFNGLCOLORPOINTEREXTPROC = void function(int, uint, int, int, const(void)*);
alias PFNGLINDEXPOINTEREXTPROC = void function(uint, int, int, const(void)*);
alias PFNGLTEXCOORDPOINTEREXTPROC = void function(int, uint, int, int, const(void)*);
alias PFNGLEDGEFLAGPOINTEREXTPROC = void function(int, int, const(ubyte)*);
alias PFNGLGETPOINTERVEXTPROC = void function(uint, void**);
alias PFNGLARRAYELEMENTARRAYEXTPROC = void function(uint, int, const(void)*);
alias PFNGLDRAWRANGEELEMENTSWINPROC = void function(uint, uint, uint, int, uint, const(void)*);
alias PFNGLADDSWAPHINTRECTWINPROC = void function(int, int, int, int);
alias PFNGLCOLORTABLEEXTPROC = void function(uint, uint, int, uint, uint, const(void)*);
alias PFNGLCOLORSUBTABLEEXTPROC = void function(uint, int, int, uint, uint, const(void)*);
alias PFNGLGETCOLORTABLEEXTPROC = void function(uint, uint, uint, void*);
alias PFNGLGETCOLORTABLEPARAMETERIVEXTPROC = void function(uint, uint, int*);
alias PFNGLGETCOLORTABLEPARAMETERFVEXTPROC = void function(uint, uint, float*);
struct GLUnurbs
{
}
struct GLUquadric
{
}
struct GLUtesselator
{
}
alias GLUquadricErrorProc = void function(uint);
alias GLUtessBeginProc = void function(uint);
alias GLUtessEdgeFlagProc = void function(ubyte);
alias GLUtessVertexProc = void function(void*);
alias GLUtessEndProc = void function();
alias GLUtessErrorProc = void function(uint);
alias GLUtessCombineProc = void function(double*, void**, float*, void**);
alias GLUtessBeginDataProc = void function(uint, void*);
alias GLUtessEdgeFlagDataProc = void function(ubyte, void*);
alias GLUtessVertexDataProc = void function(void*, void*);
alias GLUtessEndDataProc = void function(void*);
alias GLUtessErrorDataProc = void function(uint, void*);
alias GLUtessCombineDataProc = void function(double*, void**, float*, void**, void*);
alias GLUnurbsErrorProc = void function(uint);
