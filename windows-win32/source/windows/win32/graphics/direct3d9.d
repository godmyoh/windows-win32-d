module windows.win32.graphics.direct3d9;

import windows.win32.guid : GUID;
import windows.win32.foundation : BOOL, CHAR, HANDLE, HRESULT, HWND, LUID, POINT, PWSTR, RECT;
import windows.win32.graphics.direct3d_ : D3DMATRIX, D3DVECTOR;
import windows.win32.graphics.gdi : HDC, HMONITOR, PALETTEENTRY, RGNDATA;
import windows.win32.system.com_ : IUnknown;

version (Windows):
extern (Windows):

IDirect3D9 Direct3DCreate9(uint);
int D3DPERF_BeginEvent(uint, const(wchar)*);
int D3DPERF_EndEvent();
void D3DPERF_SetMarker(uint, const(wchar)*);
void D3DPERF_SetRegion(uint, const(wchar)*);
BOOL D3DPERF_QueryRepeatFrame();
void D3DPERF_SetOptions(uint);
uint D3DPERF_GetStatus();
HRESULT Direct3DCreate9Ex(uint, IDirect3D9Ex*);
enum D3DRTYPECOUNT = 0x00000008;
enum D3DCS_LEFT = 0x00000001;
enum D3DCS_RIGHT = 0x00000002;
enum D3DCS_TOP = 0x00000004;
enum D3DCS_BOTTOM = 0x00000008;
enum D3DCS_FRONT = 0x00000010;
enum D3DCS_BACK = 0x00000020;
enum D3DCS_PLANE0 = 0x00000040;
enum D3DCS_PLANE1 = 0x00000080;
enum D3DCS_PLANE2 = 0x00000100;
enum D3DCS_PLANE3 = 0x00000200;
enum D3DCS_PLANE4 = 0x00000400;
enum D3DCS_PLANE5 = 0x00000800;
enum D3D_MAX_SIMULTANEOUS_RENDERTARGETS = 0x00000004;
enum D3DWRAP_W = 0x00000004;
enum D3DDMAPSAMPLER = 0x00000100;
enum D3DVERTEXTEXTURESAMPLER0 = 0x00000101;
enum D3DVERTEXTEXTURESAMPLER1 = 0x00000102;
enum D3DVERTEXTEXTURESAMPLER2 = 0x00000103;
enum D3DVERTEXTEXTURESAMPLER3 = 0x00000104;
enum D3DTSS_TCI_SPHEREMAP = 0x00040000;
enum D3DTA_TEMP = 0x00000005;
enum D3DTA_CONSTANT = 0x00000006;
enum D3DFVF_XYZW = 0x00004002;
enum D3DFVF_PSIZE = 0x00000020;
enum D3DFVF_LASTBETA_UBYTE4 = 0x00001000;
enum D3DFVF_LASTBETA_D3DCOLOR = 0x00008000;
enum MAXD3DDECLUSAGEINDEX = 0x0000000f;
enum MAXD3DDECLLENGTH = 0x00000040;
enum D3DSTREAMSOURCE_INDEXEDDATA = 0x40000000;
enum D3DSTREAMSOURCE_INSTANCEDATA = 0x80000000;
enum D3DSI_OPCODE_MASK = 0x0000ffff;
enum D3DSI_INSTLENGTH_MASK = 0x0f000000;
enum D3DSI_INSTLENGTH_SHIFT = 0x00000018;
enum D3DSI_COISSUE = 0x40000000;
enum D3DSP_OPCODESPECIFICCONTROL_MASK = 0x00ff0000;
enum D3DSP_OPCODESPECIFICCONTROL_SHIFT = 0x00000010;
enum D3DSHADER_COMPARISON_SHIFT = 0x00000010;
enum D3DSP_DCL_USAGE_SHIFT = 0x00000000;
enum D3DSP_DCL_USAGE_MASK = 0x0000000f;
enum D3DSP_DCL_USAGEINDEX_SHIFT = 0x00000010;
enum D3DSP_DCL_USAGEINDEX_MASK = 0x000f0000;
enum D3DSP_TEXTURETYPE_SHIFT = 0x0000001b;
enum D3DSP_TEXTURETYPE_MASK = 0x78000000;
enum D3DSP_REGNUM_MASK = 0x000007ff;
enum D3DSP_WRITEMASK_0 = 0x00010000;
enum D3DSP_WRITEMASK_1 = 0x00020000;
enum D3DSP_WRITEMASK_2 = 0x00040000;
enum D3DSP_WRITEMASK_3 = 0x00080000;
enum D3DSP_WRITEMASK_ALL = 0x000f0000;
enum D3DSP_DSTMOD_SHIFT = 0x00000014;
enum D3DSP_DSTMOD_MASK = 0x00f00000;
enum D3DSP_DSTSHIFT_SHIFT = 0x00000018;
enum D3DSP_DSTSHIFT_MASK = 0x0f000000;
enum D3DSP_REGTYPE_SHIFT = 0x0000001c;
enum D3DSP_REGTYPE_SHIFT2 = 0x00000008;
enum D3DSP_REGTYPE_MASK = 0x70000000;
enum D3DSP_REGTYPE_MASK2 = 0x00001800;
enum D3DVS_ADDRESSMODE_SHIFT = 0x0000000d;
enum D3DSHADER_ADDRESSMODE_SHIFT = 0x0000000d;
enum D3DVS_SWIZZLE_SHIFT = 0x00000010;
enum D3DVS_SWIZZLE_MASK = 0x00ff0000;
enum D3DSP_SWIZZLE_SHIFT = 0x00000010;
enum D3DSP_SWIZZLE_MASK = 0x00ff0000;
enum D3DSP_SRCMOD_SHIFT = 0x00000018;
enum D3DSP_SRCMOD_MASK = 0x0f000000;
enum D3DSP_MIN_PRECISION_SHIFT = 0x0000000e;
enum D3DSP_MIN_PRECISION_MASK = 0x0000c000;
enum D3DSI_COMMENTSIZE_SHIFT = 0x00000010;
enum D3DSI_COMMENTSIZE_MASK = 0x7fff0000;
enum D3DPRESENT_RATE_DEFAULT = 0x00000000;
enum D3DPRESENTFLAG_LOCKABLE_BACKBUFFER = 0x00000001;
enum D3DPRESENTFLAG_DISCARD_DEPTHSTENCIL = 0x00000002;
enum D3DPRESENTFLAG_DEVICECLIP = 0x00000004;
enum D3DPRESENTFLAG_VIDEO = 0x00000010;
enum D3DPRESENTFLAG_NOAUTOROTATE = 0x00000020;
enum D3DPRESENTFLAG_UNPRUNEDMODE = 0x00000040;
enum D3DPRESENTFLAG_OVERLAY_LIMITEDRGB = 0x00000080;
enum D3DPRESENTFLAG_OVERLAY_YCbCr_BT709 = 0x00000100;
enum D3DPRESENTFLAG_OVERLAY_YCbCr_xvYCC = 0x00000200;
enum D3DPRESENTFLAG_RESTRICTED_CONTENT = 0x00000400;
enum D3DPRESENTFLAG_RESTRICT_SHARED_RESOURCE_DRIVER = 0x00000800;
enum D3DUSAGE_RENDERTARGET = 0x00000001;
enum D3DUSAGE_DEPTHSTENCIL = 0x00000002;
enum D3DUSAGE_DYNAMIC = 0x00000200;
enum D3DUSAGE_NONSECURE = 0x00800000;
enum D3DUSAGE_AUTOGENMIPMAP = 0x00000400;
enum D3DUSAGE_DMAP = 0x00004000;
enum D3DUSAGE_QUERY_LEGACYBUMPMAP = 0x00008000;
enum D3DUSAGE_QUERY_SRGBREAD = 0x00010000;
enum D3DUSAGE_QUERY_FILTER = 0x00020000;
enum D3DUSAGE_QUERY_SRGBWRITE = 0x00040000;
enum D3DUSAGE_QUERY_POSTPIXELSHADER_BLENDING = 0x00080000;
enum D3DUSAGE_QUERY_VERTEXTEXTURE = 0x00100000;
enum D3DUSAGE_QUERY_WRAPANDMIP = 0x00200000;
enum D3DUSAGE_WRITEONLY = 0x00000008;
enum D3DUSAGE_SOFTWAREPROCESSING = 0x00000010;
enum D3DUSAGE_DONOTCLIP = 0x00000020;
enum D3DUSAGE_POINTS = 0x00000040;
enum D3DUSAGE_RTPATCHES = 0x00000080;
enum D3DUSAGE_NPATCHES = 0x00000100;
enum D3DUSAGE_TEXTAPI = 0x10000000;
enum D3DUSAGE_RESTRICTED_CONTENT = 0x00000800;
enum D3DUSAGE_RESTRICT_SHARED_RESOURCE = 0x00002000;
enum D3DUSAGE_RESTRICT_SHARED_RESOURCE_DRIVER = 0x00001000;
enum D3DLOCK_READONLY = 0x00000010;
enum D3DLOCK_DISCARD = 0x00002000;
enum D3DLOCK_NOOVERWRITE = 0x00001000;
enum D3DLOCK_NOSYSLOCK = 0x00000800;
enum D3DLOCK_DONOTWAIT = 0x00004000;
enum D3DLOCK_NO_DIRTY_UPDATE = 0x00008000;
enum MAX_DEVICE_IDENTIFIER_STRING = 0x00000200;
enum D3DISSUE_END = 0x00000001;
enum D3DISSUE_BEGIN = 0x00000002;
enum D3DGETDATA_FLUSH = 0x00000001;
enum D3DCOMPOSERECTS_MAXNUMRECTS = 0x0000ffff;
enum D3DCONVOLUTIONMONO_MAXWIDTH = 0x00000007;
enum D3DCONVOLUTIONMONO_MAXHEIGHT = 0x00000007;
enum D3DFMT_A1_SURFACE_MAXWIDTH = 0x00002000;
enum D3DFMT_A1_SURFACE_MAXHEIGHT = 0x00000800;
enum D3D9_RESOURCE_PRIORITY_MINIMUM = 0x28000000;
enum D3D9_RESOURCE_PRIORITY_LOW = 0x50000000;
enum D3D9_RESOURCE_PRIORITY_NORMAL = 0x78000000;
enum D3D9_RESOURCE_PRIORITY_HIGH = 0xa0000000;
enum D3D9_RESOURCE_PRIORITY_MAXIMUM = 0xc8000000;
enum D3D_OMAC_SIZE = 0x00000010;
enum D3DAUTHENTICATEDQUERY_PROTECTION = GUID(0xa84eb584, 0xc495, 0x48aa, [0xb9, 0x4d, 0x8b, 0xd2, 0xd6, 0xfb, 0xce, 0x5]);
enum D3DAUTHENTICATEDQUERY_CHANNELTYPE = GUID(0xbc1b18a5, 0xb1fb, 0x42ab, [0xbd, 0x94, 0xb5, 0x82, 0x8b, 0x4b, 0xf7, 0xbe]);
enum D3DAUTHENTICATEDQUERY_DEVICEHANDLE = GUID(0xec1c539d, 0x8cff, 0x4e2a, [0xbc, 0xc4, 0xf5, 0x69, 0x2f, 0x99, 0xf4, 0x80]);
enum D3DAUTHENTICATEDQUERY_CRYPTOSESSION = GUID(0x2634499e, 0xd018, 0x4d74, [0xac, 0x17, 0x7f, 0x72, 0x40, 0x59, 0x52, 0x8d]);
enum D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESSCOUNT = GUID(0xdb207b3, 0x9450, 0x46a6, [0x82, 0xde, 0x1b, 0x96, 0xd4, 0x4f, 0x9c, 0xf2]);
enum D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESS = GUID(0x649bbadb, 0xf0f4, 0x4639, [0xa1, 0x5b, 0x24, 0x39, 0x3f, 0xc3, 0xab, 0xac]);
enum D3DAUTHENTICATEDQUERY_UNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT = GUID(0x12f0bd6, 0xe662, 0x4474, [0xbe, 0xfd, 0xaa, 0x53, 0xe5, 0x14, 0x3c, 0x6d]);
enum D3DAUTHENTICATEDQUERY_OUTPUTIDCOUNT = GUID(0x2c042b5e, 0x8c07, 0x46d5, [0xaa, 0xbe, 0x8f, 0x75, 0xcb, 0xad, 0x4c, 0x31]);
enum D3DAUTHENTICATEDQUERY_OUTPUTID = GUID(0x839ddca3, 0x9b4e, 0x41e4, [0xb0, 0x53, 0x89, 0x2b, 0xd2, 0xa1, 0x1e, 0xe7]);
enum D3DAUTHENTICATEDQUERY_ACCESSIBILITYATTRIBUTES = GUID(0x6214d9d2, 0x432c, 0x4abb, [0x9f, 0xce, 0x21, 0x6e, 0xea, 0x26, 0x9e, 0x3b]);
enum D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUIDCOUNT = GUID(0xb30f7066, 0x203c, 0x4b07, [0x93, 0xfc, 0xce, 0xaa, 0xfd, 0x61, 0x24, 0x1e]);
enum D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUID = GUID(0xf83a5958, 0xe986, 0x4bda, [0xbe, 0xb0, 0x41, 0x1f, 0x6a, 0x7a, 0x1, 0xb7]);
enum D3DAUTHENTICATEDQUERY_CURRENTENCRYPTIONWHENACCESSIBLE = GUID(0xec1791c7, 0xdad3, 0x4f15, [0x9e, 0xc3, 0xfa, 0xa9, 0x3d, 0x60, 0xd4, 0xf0]);
enum D3DAUTHENTICATEDCONFIGURE_INITIALIZE = GUID(0x6114bdb, 0x3523, 0x470a, [0x8d, 0xca, 0xfb, 0xc2, 0x84, 0x51, 0x54, 0xf0]);
enum D3DAUTHENTICATEDCONFIGURE_PROTECTION = GUID(0x50455658, 0x3f47, 0x4362, [0xbf, 0x99, 0xbf, 0xdf, 0xcd, 0xe9, 0xed, 0x29]);
enum D3DAUTHENTICATEDCONFIGURE_CRYPTOSESSION = GUID(0x6346cc54, 0x2cfc, 0x4ad4, [0x82, 0x24, 0xd1, 0x58, 0x37, 0xde, 0x77, 0x0]);
enum D3DAUTHENTICATEDCONFIGURE_SHAREDRESOURCE = GUID(0x772d047, 0x1b40, 0x48e8, [0x9c, 0xa6, 0xb5, 0xf5, 0x10, 0xde, 0x9f, 0x1]);
enum D3DAUTHENTICATEDCONFIGURE_ENCRYPTIONWHENACCESSIBLE = GUID(0x41fff286, 0x6ae0, 0x4d43, [0x9d, 0x55, 0xa4, 0x6e, 0x9e, 0xfd, 0x15, 0x8a]);
enum D3DVS20CAPS_PREDICATION = 0x00000001;
enum D3DVS20_MAX_DYNAMICFLOWCONTROLDEPTH = 0x00000018;
enum D3DVS20_MIN_DYNAMICFLOWCONTROLDEPTH = 0x00000000;
enum D3DVS20_MAX_NUMTEMPS = 0x00000020;
enum D3DVS20_MIN_NUMTEMPS = 0x0000000c;
enum D3DVS20_MAX_STATICFLOWCONTROLDEPTH = 0x00000004;
enum D3DVS20_MIN_STATICFLOWCONTROLDEPTH = 0x00000001;
enum D3DPS20CAPS_ARBITRARYSWIZZLE = 0x00000001;
enum D3DPS20CAPS_GRADIENTINSTRUCTIONS = 0x00000002;
enum D3DPS20CAPS_PREDICATION = 0x00000004;
enum D3DPS20CAPS_NODEPENDENTREADLIMIT = 0x00000008;
enum D3DPS20CAPS_NOTEXINSTRUCTIONLIMIT = 0x00000010;
enum D3DPS20_MAX_DYNAMICFLOWCONTROLDEPTH = 0x00000018;
enum D3DPS20_MIN_DYNAMICFLOWCONTROLDEPTH = 0x00000000;
enum D3DPS20_MAX_NUMTEMPS = 0x00000020;
enum D3DPS20_MIN_NUMTEMPS = 0x0000000c;
enum D3DPS20_MAX_STATICFLOWCONTROLDEPTH = 0x00000004;
enum D3DPS20_MIN_STATICFLOWCONTROLDEPTH = 0x00000000;
enum D3DPS20_MAX_NUMINSTRUCTIONSLOTS = 0x00000200;
enum D3DPS20_MIN_NUMINSTRUCTIONSLOTS = 0x00000060;
enum D3DMIN30SHADERINSTRUCTIONS = 0x00000200;
enum D3DMAX30SHADERINSTRUCTIONS = 0x00008000;
enum D3DOVERLAYCAPS_FULLRANGERGB = 0x00000001;
enum D3DOVERLAYCAPS_LIMITEDRANGERGB = 0x00000002;
enum D3DOVERLAYCAPS_YCbCr_BT601 = 0x00000004;
enum D3DOVERLAYCAPS_YCbCr_BT709 = 0x00000008;
enum D3DOVERLAYCAPS_YCbCr_BT601_xvYCC = 0x00000010;
enum D3DOVERLAYCAPS_YCbCr_BT709_xvYCC = 0x00000020;
enum D3DOVERLAYCAPS_STRETCHX = 0x00000040;
enum D3DOVERLAYCAPS_STRETCHY = 0x00000080;
enum D3DCPCAPS_SOFTWARE = 0x00000001;
enum D3DCPCAPS_HARDWARE = 0x00000002;
enum D3DCPCAPS_PROTECTIONALWAYSON = 0x00000004;
enum D3DCPCAPS_PARTIALDECRYPTION = 0x00000008;
enum D3DCPCAPS_CONTENTKEY = 0x00000010;
enum D3DCPCAPS_FRESHENSESSIONKEY = 0x00000020;
enum D3DCPCAPS_ENCRYPTEDREADBACK = 0x00000040;
enum D3DCPCAPS_ENCRYPTEDREADBACKKEY = 0x00000080;
enum D3DCPCAPS_SEQUENTIAL_CTR_IV = 0x00000100;
enum D3DCPCAPS_ENCRYPTSLICEDATAONLY = 0x00000200;
enum D3DCRYPTOTYPE_AES128_CTR = GUID(0x9b6bd711, 0x4f74, 0x41c9, [0x9e, 0x7b, 0xb, 0xe2, 0xd7, 0xd9, 0x3b, 0x4f]);
enum D3DCRYPTOTYPE_PROPRIETARY = GUID(0xab4e9afd, 0x1d1c, 0x46e6, [0xa7, 0x2f, 0x8, 0x69, 0x91, 0x7b, 0xd, 0xe8]);
enum D3DKEYEXCHANGE_RSAES_OAEP = GUID(0xc1949895, 0xd72a, 0x4a1d, [0x8e, 0x5d, 0xed, 0x85, 0x7d, 0x17, 0x15, 0x20]);
enum D3DKEYEXCHANGE_DXVA = GUID(0x43d3775c, 0x38e5, 0x4924, [0x8d, 0x86, 0xd3, 0xfc, 0xcf, 0x15, 0x3e, 0x9b]);
enum D3DCAPS_OVERLAY = 0x00000800;
enum D3DCAPS_READ_SCANLINE = 0x00020000;
enum D3DCAPS2_FULLSCREENGAMMA = 0x00020000;
enum D3DCAPS2_CANCALIBRATEGAMMA = 0x00100000;
enum D3DCAPS2_RESERVED = 0x02000000;
enum D3DCAPS2_CANMANAGERESOURCE = 0x10000000;
enum D3DCAPS2_DYNAMICTEXTURES = 0x20000000;
enum D3DCAPS2_CANAUTOGENMIPMAP = 0x40000000;
enum D3DCAPS2_CANSHARERESOURCE = 0xffffffff80000000;
enum D3DCAPS3_RESERVED = 0xffffffff8000001f;
enum D3DCAPS3_ALPHA_FULLSCREEN_FLIP_OR_DISCARD = 0x00000020;
enum D3DCAPS3_LINEAR_TO_SRGB_PRESENTATION = 0x00000080;
enum D3DCAPS3_COPY_TO_VIDMEM = 0x00000100;
enum D3DCAPS3_COPY_TO_SYSTEMMEM = 0x00000200;
enum D3DCAPS3_DXVAHD = 0x00000400;
enum D3DCAPS3_DXVAHD_LIMITED = 0x00000800;
enum D3DPRESENT_INTERVAL_DEFAULT = 0x00000000;
enum D3DPRESENT_INTERVAL_ONE = 0x00000001;
enum D3DPRESENT_INTERVAL_TWO = 0x00000002;
enum D3DPRESENT_INTERVAL_THREE = 0x00000004;
enum D3DPRESENT_INTERVAL_FOUR = 0x00000008;
enum D3DPRESENT_INTERVAL_IMMEDIATE = 0xffffffff80000000;
enum D3DCURSORCAPS_COLOR = 0x00000001;
enum D3DCURSORCAPS_LOWRES = 0x00000002;
enum D3DDEVCAPS_PUREDEVICE = 0x00100000;
enum D3DDEVCAPS_QUINTICRTPATCHES = 0x00200000;
enum D3DDEVCAPS_RTPATCHES = 0x00400000;
enum D3DDEVCAPS_RTPATCHHANDLEZERO = 0x00800000;
enum D3DDEVCAPS_NPATCHES = 0x01000000;
enum D3DPMISCCAPS_COLORWRITEENABLE = 0x00000080;
enum D3DPMISCCAPS_CLIPPLANESCALEDPOINTS = 0x00000100;
enum D3DPMISCCAPS_CLIPTLVERTS = 0x00000200;
enum D3DPMISCCAPS_TSSARGTEMP = 0x00000400;
enum D3DPMISCCAPS_BLENDOP = 0x00000800;
enum D3DPMISCCAPS_NULLREFERENCE = 0x00001000;
enum D3DPMISCCAPS_INDEPENDENTWRITEMASKS = 0x00004000;
enum D3DPMISCCAPS_PERSTAGECONSTANT = 0x00008000;
enum D3DPMISCCAPS_FOGANDSPECULARALPHA = 0x00010000;
enum D3DPMISCCAPS_SEPARATEALPHABLEND = 0x00020000;
enum D3DPMISCCAPS_MRTINDEPENDENTBITDEPTHS = 0x00040000;
enum D3DPMISCCAPS_MRTPOSTPIXELSHADERBLENDING = 0x00080000;
enum D3DPMISCCAPS_FOGVERTEXCLAMPED = 0x00100000;
enum D3DPMISCCAPS_POSTBLENDSRGBCONVERT = 0x00200000;
enum D3DLINECAPS_TEXTURE = 0x00000001;
enum D3DLINECAPS_ZTEST = 0x00000002;
enum D3DLINECAPS_BLEND = 0x00000004;
enum D3DLINECAPS_ALPHACMP = 0x00000008;
enum D3DLINECAPS_FOG = 0x00000010;
enum D3DLINECAPS_ANTIALIAS = 0x00000020;
enum D3DPRASTERCAPS_COLORPERSPECTIVE = 0x00400000;
enum D3DPRASTERCAPS_SCISSORTEST = 0x01000000;
enum D3DPRASTERCAPS_SLOPESCALEDEPTHBIAS = 0x02000000;
enum D3DPRASTERCAPS_DEPTHBIAS = 0x04000000;
enum D3DPRASTERCAPS_MULTISAMPLE_TOGGLE = 0x08000000;
enum D3DPBLENDCAPS_BLENDFACTOR = 0x00002000;
enum D3DPBLENDCAPS_SRCCOLOR2 = 0x00004000;
enum D3DPBLENDCAPS_INVSRCCOLOR2 = 0x00008000;
enum D3DPTEXTURECAPS_VOLUMEMAP = 0x00002000;
enum D3DPTEXTURECAPS_MIPMAP = 0x00004000;
enum D3DPTEXTURECAPS_MIPVOLUMEMAP = 0x00008000;
enum D3DPTEXTURECAPS_MIPCUBEMAP = 0x00010000;
enum D3DPTEXTURECAPS_CUBEMAP_POW2 = 0x00020000;
enum D3DPTEXTURECAPS_VOLUMEMAP_POW2 = 0x00040000;
enum D3DPTEXTURECAPS_NOPROJECTEDBUMPENV = 0x00200000;
enum D3DPTFILTERCAPS_MINFPYRAMIDALQUAD = 0x00000800;
enum D3DPTFILTERCAPS_MINFGAUSSIANQUAD = 0x00001000;
enum D3DPTFILTERCAPS_CONVOLUTIONMONO = 0x00040000;
enum D3DPTFILTERCAPS_MAGFPYRAMIDALQUAD = 0x08000000;
enum D3DPTFILTERCAPS_MAGFGAUSSIANQUAD = 0x10000000;
enum D3DPTADDRESSCAPS_MIRRORONCE = 0x00000020;
enum D3DSTENCILCAPS_TWOSIDED = 0x00000100;
enum D3DTEXOPCAPS_MULTIPLYADD = 0x01000000;
enum D3DTEXOPCAPS_LERP = 0x02000000;
enum D3DFVFCAPS_PSIZE = 0x00100000;
enum D3DVTXPCAPS_TWEENING = 0x00000040;
enum D3DVTXPCAPS_TEXGEN_SPHEREMAP = 0x00000100;
enum D3DVTXPCAPS_NO_TEXGEN_NONLOCALVIEWER = 0x00000200;
enum D3DDEVCAPS2_STREAMOFFSET = 0x00000001;
enum D3DDEVCAPS2_DMAPNPATCH = 0x00000002;
enum D3DDEVCAPS2_ADAPTIVETESSRTPATCH = 0x00000004;
enum D3DDEVCAPS2_ADAPTIVETESSNPATCH = 0x00000008;
enum D3DDEVCAPS2_CAN_STRETCHRECT_FROM_TEXTURES = 0x00000010;
enum D3DDEVCAPS2_PRESAMPLEDDMAPNPATCH = 0x00000020;
enum D3DDEVCAPS2_VERTEXELEMENTSCANSHARESTREAMOFFSET = 0x00000040;
enum D3DDTCAPS_UBYTE4 = 0x00000001;
enum D3DDTCAPS_UBYTE4N = 0x00000002;
enum D3DDTCAPS_SHORT2N = 0x00000004;
enum D3DDTCAPS_SHORT4N = 0x00000008;
enum D3DDTCAPS_USHORT2N = 0x00000010;
enum D3DDTCAPS_USHORT4N = 0x00000020;
enum D3DDTCAPS_UDEC3 = 0x00000040;
enum D3DDTCAPS_DEC3N = 0x00000080;
enum D3DDTCAPS_FLOAT16_2 = 0x00000100;
enum D3DDTCAPS_FLOAT16_4 = 0x00000200;
enum D3DSPD_IUNKNOWN = 0x00000001;
enum D3DCREATE_FPU_PRESERVE = 0x00000002;
enum D3DCREATE_MULTITHREADED = 0x00000004;
enum D3DCREATE_PUREDEVICE = 0x00000010;
enum D3DCREATE_SOFTWARE_VERTEXPROCESSING = 0x00000020;
enum D3DCREATE_HARDWARE_VERTEXPROCESSING = 0x00000040;
enum D3DCREATE_MIXED_VERTEXPROCESSING = 0x00000080;
enum D3DCREATE_DISABLE_DRIVER_MANAGEMENT = 0x00000100;
enum D3DCREATE_ADAPTERGROUP_DEVICE = 0x00000200;
enum D3DADAPTER_DEFAULT = 0x00000000;
enum D3DENUM_NO_DRIVERVERSION = 0x00000004;
enum D3DPRESENT_BACK_BUFFERS_MAX = 0x00000003;
enum D3DSGR_NO_CALIBRATION = 0x00000000;
enum D3DSGR_CALIBRATE = 0x00000001;
enum D3DCURSOR_IMMEDIATE_UPDATE = 0x00000001;
enum D3DPRESENT_DONOTWAIT = 0x00000001;
enum D3DPRESENT_LINEAR_CONTENT = 0x00000002;
enum _FACD3D = 0x00000876;
enum D3D_SDK_VERSION = 0x00000020;
enum D3D9b_SDK_VERSION = 0x0000001f;
enum D3DCREATE_DISABLE_DRIVER_MANAGEMENT_EX = 0x00000400;
enum D3DCREATE_NOWINDOWCHANGES = 0x00000800;
enum D3DCREATE_DISABLE_PSGP_THREADING = 0x00002000;
enum D3DCREATE_ENABLE_PRESENTSTATS = 0x00004000;
enum D3DCREATE_DISABLE_PRINTSCREEN = 0x00008000;
enum D3DCREATE_SCREENSAVER = 0x10000000;
enum D3DENUM_WHQL_LEVEL = 0x00000002;
enum D3DPRESENT_BACK_BUFFERS_MAX_EX = 0x0000001e;
enum D3DPRESENT_DONOTFLIP = 0x00000004;
enum D3DPRESENT_FLIPRESTART = 0x00000008;
enum D3DPRESENT_VIDEO_RESTRICT_TO_MONITOR = 0x00000010;
enum D3DPRESENT_UPDATEOVERLAYONLY = 0x00000020;
enum D3DPRESENT_HIDEOVERLAY = 0x00000040;
enum D3DPRESENT_UPDATECOLORKEY = 0x00000080;
enum D3DPRESENT_FORCEIMMEDIATE = 0x00000100;
struct D3DADAPTER_IDENTIFIER9
{
    CHAR[512] Driver;
    CHAR[512] Description;
    CHAR[32] DeviceName;
    long DriverVersion;
    uint VendorId;
    uint DeviceId;
    uint SubSysId;
    uint Revision;
    GUID DeviceIdentifier;
    uint WHQLLevel;
}
struct D3DMEMORYPRESSURE
{
    ulong BytesEvictedFromProcess;
    ulong SizeOfInefficientAllocation;
    uint LevelOfEfficiency;
}
struct D3DPRESENTSTATS
{
    uint PresentCount;
    uint PresentRefreshCount;
    uint SyncRefreshCount;
    long SyncQPCTime;
    long SyncGPUTime;
}
struct D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT
{
    D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
    uint OutputIDIndex;
    ulong OutputID;
}
struct D3DAES_CTR_IV
{
    ulong IV;
    ulong Count;
}
struct D3DCOLORVALUE
{
    float r;
    float g;
    float b;
    float a;
}
struct D3DRECT
{
    int x1;
    int y1;
    int x2;
    int y2;
}
struct D3DVIEWPORT9
{
    uint X;
    uint Y;
    uint Width;
    uint Height;
    float MinZ;
    float MaxZ;
}
struct D3DCLIPSTATUS9
{
    uint ClipUnion;
    uint ClipIntersection;
}
struct D3DMATERIAL9
{
    D3DCOLORVALUE Diffuse;
    D3DCOLORVALUE Ambient;
    D3DCOLORVALUE Specular;
    D3DCOLORVALUE Emissive;
    float Power;
}
alias D3DLIGHTTYPE = int;
enum : int
{
    D3DLIGHT_POINT       = 0x00000001,
    D3DLIGHT_SPOT        = 0x00000002,
    D3DLIGHT_DIRECTIONAL = 0x00000003,
    D3DLIGHT_FORCE_DWORD = 0x7fffffff,
}

struct D3DLIGHT9
{
    D3DLIGHTTYPE Type;
    D3DCOLORVALUE Diffuse;
    D3DCOLORVALUE Specular;
    D3DCOLORVALUE Ambient;
    D3DVECTOR Position;
    D3DVECTOR Direction;
    float Range;
    float Falloff;
    float Attenuation0;
    float Attenuation1;
    float Attenuation2;
    float Theta;
    float Phi;
}
alias D3DSHADEMODE = int;
enum : int
{
    D3DSHADE_FLAT        = 0x00000001,
    D3DSHADE_GOURAUD     = 0x00000002,
    D3DSHADE_PHONG       = 0x00000003,
    D3DSHADE_FORCE_DWORD = 0x7fffffff,
}

alias D3DFILLMODE = int;
enum : int
{
    D3DFILL_POINT       = 0x00000001,
    D3DFILL_WIREFRAME   = 0x00000002,
    D3DFILL_SOLID       = 0x00000003,
    D3DFILL_FORCE_DWORD = 0x7fffffff,
}

alias D3DBLEND = uint;
enum : uint
{
    D3DBLEND_ZERO            = 0x00000001,
    D3DBLEND_ONE             = 0x00000002,
    D3DBLEND_SRCCOLOR        = 0x00000003,
    D3DBLEND_INVSRCCOLOR     = 0x00000004,
    D3DBLEND_SRCALPHA        = 0x00000005,
    D3DBLEND_INVSRCALPHA     = 0x00000006,
    D3DBLEND_DESTALPHA       = 0x00000007,
    D3DBLEND_INVDESTALPHA    = 0x00000008,
    D3DBLEND_DESTCOLOR       = 0x00000009,
    D3DBLEND_INVDESTCOLOR    = 0x0000000a,
    D3DBLEND_SRCALPHASAT     = 0x0000000b,
    D3DBLEND_BOTHSRCALPHA    = 0x0000000c,
    D3DBLEND_BOTHINVSRCALPHA = 0x0000000d,
    D3DBLEND_BLENDFACTOR     = 0x0000000e,
    D3DBLEND_INVBLENDFACTOR  = 0x0000000f,
    D3DBLEND_SRCCOLOR2       = 0x00000010,
    D3DBLEND_INVSRCCOLOR2    = 0x00000011,
    D3DBLEND_FORCE_DWORD     = 0x7fffffff,
}

alias D3DBLENDOP = uint;
enum : uint
{
    D3DBLENDOP_ADD         = 0x00000001,
    D3DBLENDOP_SUBTRACT    = 0x00000002,
    D3DBLENDOP_REVSUBTRACT = 0x00000003,
    D3DBLENDOP_MIN         = 0x00000004,
    D3DBLENDOP_MAX         = 0x00000005,
    D3DBLENDOP_FORCE_DWORD = 0x7fffffff,
}

alias D3DTEXTUREADDRESS = int;
enum : int
{
    D3DTADDRESS_WRAP        = 0x00000001,
    D3DTADDRESS_MIRROR      = 0x00000002,
    D3DTADDRESS_CLAMP       = 0x00000003,
    D3DTADDRESS_BORDER      = 0x00000004,
    D3DTADDRESS_MIRRORONCE  = 0x00000005,
    D3DTADDRESS_FORCE_DWORD = 0x7fffffff,
}

alias D3DCULL = uint;
enum : uint
{
    D3DCULL_NONE        = 0x00000001,
    D3DCULL_CW          = 0x00000002,
    D3DCULL_CCW         = 0x00000003,
    D3DCULL_FORCE_DWORD = 0x7fffffff,
}

alias D3DCMPFUNC = int;
enum : int
{
    D3DCMP_NEVER        = 0x00000001,
    D3DCMP_LESS         = 0x00000002,
    D3DCMP_EQUAL        = 0x00000003,
    D3DCMP_LESSEQUAL    = 0x00000004,
    D3DCMP_GREATER      = 0x00000005,
    D3DCMP_NOTEQUAL     = 0x00000006,
    D3DCMP_GREATEREQUAL = 0x00000007,
    D3DCMP_ALWAYS       = 0x00000008,
    D3DCMP_FORCE_DWORD  = 0x7fffffff,
}

alias D3DSTENCILOP = uint;
enum : uint
{
    D3DSTENCILOP_KEEP        = 0x00000001,
    D3DSTENCILOP_ZERO        = 0x00000002,
    D3DSTENCILOP_REPLACE     = 0x00000003,
    D3DSTENCILOP_INCRSAT     = 0x00000004,
    D3DSTENCILOP_DECRSAT     = 0x00000005,
    D3DSTENCILOP_INVERT      = 0x00000006,
    D3DSTENCILOP_INCR        = 0x00000007,
    D3DSTENCILOP_DECR        = 0x00000008,
    D3DSTENCILOP_FORCE_DWORD = 0x7fffffff,
}

alias D3DFOGMODE = int;
enum : int
{
    D3DFOG_NONE        = 0x00000000,
    D3DFOG_EXP         = 0x00000001,
    D3DFOG_EXP2        = 0x00000002,
    D3DFOG_LINEAR      = 0x00000003,
    D3DFOG_FORCE_DWORD = 0x7fffffff,
}

alias D3DZBUFFERTYPE = int;
enum : int
{
    D3DZB_FALSE       = 0x00000000,
    D3DZB_TRUE        = 0x00000001,
    D3DZB_USEW        = 0x00000002,
    D3DZB_FORCE_DWORD = 0x7fffffff,
}

alias D3DPRIMITIVETYPE = int;
enum : int
{
    D3DPT_POINTLIST     = 0x00000001,
    D3DPT_LINELIST      = 0x00000002,
    D3DPT_LINESTRIP     = 0x00000003,
    D3DPT_TRIANGLELIST  = 0x00000004,
    D3DPT_TRIANGLESTRIP = 0x00000005,
    D3DPT_TRIANGLEFAN   = 0x00000006,
    D3DPT_FORCE_DWORD   = 0x7fffffff,
}

alias D3DTRANSFORMSTATETYPE = int;
enum : int
{
    D3DTS_VIEW        = 0x00000002,
    D3DTS_PROJECTION  = 0x00000003,
    D3DTS_TEXTURE0    = 0x00000010,
    D3DTS_TEXTURE1    = 0x00000011,
    D3DTS_TEXTURE2    = 0x00000012,
    D3DTS_TEXTURE3    = 0x00000013,
    D3DTS_TEXTURE4    = 0x00000014,
    D3DTS_TEXTURE5    = 0x00000015,
    D3DTS_TEXTURE6    = 0x00000016,
    D3DTS_TEXTURE7    = 0x00000017,
    D3DTS_FORCE_DWORD = 0x7fffffff,
    D3DTS_WORLD       = 0x00000100,
    D3DTS_WORLD1      = 0x00000101,
    D3DTS_WORLD2      = 0x00000102,
    D3DTS_WORLD3      = 0x00000103,
}

alias D3DRENDERSTATETYPE = int;
enum : int
{
    D3DRS_ZENABLE                    = 0x00000007,
    D3DRS_FILLMODE                   = 0x00000008,
    D3DRS_SHADEMODE                  = 0x00000009,
    D3DRS_ZWRITEENABLE               = 0x0000000e,
    D3DRS_ALPHATESTENABLE            = 0x0000000f,
    D3DRS_LASTPIXEL                  = 0x00000010,
    D3DRS_SRCBLEND                   = 0x00000013,
    D3DRS_DESTBLEND                  = 0x00000014,
    D3DRS_CULLMODE                   = 0x00000016,
    D3DRS_ZFUNC                      = 0x00000017,
    D3DRS_ALPHAREF                   = 0x00000018,
    D3DRS_ALPHAFUNC                  = 0x00000019,
    D3DRS_DITHERENABLE               = 0x0000001a,
    D3DRS_ALPHABLENDENABLE           = 0x0000001b,
    D3DRS_FOGENABLE                  = 0x0000001c,
    D3DRS_SPECULARENABLE             = 0x0000001d,
    D3DRS_FOGCOLOR                   = 0x00000022,
    D3DRS_FOGTABLEMODE               = 0x00000023,
    D3DRS_FOGSTART                   = 0x00000024,
    D3DRS_FOGEND                     = 0x00000025,
    D3DRS_FOGDENSITY                 = 0x00000026,
    D3DRS_RANGEFOGENABLE             = 0x00000030,
    D3DRS_STENCILENABLE              = 0x00000034,
    D3DRS_STENCILFAIL                = 0x00000035,
    D3DRS_STENCILZFAIL               = 0x00000036,
    D3DRS_STENCILPASS                = 0x00000037,
    D3DRS_STENCILFUNC                = 0x00000038,
    D3DRS_STENCILREF                 = 0x00000039,
    D3DRS_STENCILMASK                = 0x0000003a,
    D3DRS_STENCILWRITEMASK           = 0x0000003b,
    D3DRS_TEXTUREFACTOR              = 0x0000003c,
    D3DRS_WRAP0                      = 0x00000080,
    D3DRS_WRAP1                      = 0x00000081,
    D3DRS_WRAP2                      = 0x00000082,
    D3DRS_WRAP3                      = 0x00000083,
    D3DRS_WRAP4                      = 0x00000084,
    D3DRS_WRAP5                      = 0x00000085,
    D3DRS_WRAP6                      = 0x00000086,
    D3DRS_WRAP7                      = 0x00000087,
    D3DRS_CLIPPING                   = 0x00000088,
    D3DRS_LIGHTING                   = 0x00000089,
    D3DRS_AMBIENT                    = 0x0000008b,
    D3DRS_FOGVERTEXMODE              = 0x0000008c,
    D3DRS_COLORVERTEX                = 0x0000008d,
    D3DRS_LOCALVIEWER                = 0x0000008e,
    D3DRS_NORMALIZENORMALS           = 0x0000008f,
    D3DRS_DIFFUSEMATERIALSOURCE      = 0x00000091,
    D3DRS_SPECULARMATERIALSOURCE     = 0x00000092,
    D3DRS_AMBIENTMATERIALSOURCE      = 0x00000093,
    D3DRS_EMISSIVEMATERIALSOURCE     = 0x00000094,
    D3DRS_VERTEXBLEND                = 0x00000097,
    D3DRS_CLIPPLANEENABLE            = 0x00000098,
    D3DRS_POINTSIZE                  = 0x0000009a,
    D3DRS_POINTSIZE_MIN              = 0x0000009b,
    D3DRS_POINTSPRITEENABLE          = 0x0000009c,
    D3DRS_POINTSCALEENABLE           = 0x0000009d,
    D3DRS_POINTSCALE_A               = 0x0000009e,
    D3DRS_POINTSCALE_B               = 0x0000009f,
    D3DRS_POINTSCALE_C               = 0x000000a0,
    D3DRS_MULTISAMPLEANTIALIAS       = 0x000000a1,
    D3DRS_MULTISAMPLEMASK            = 0x000000a2,
    D3DRS_PATCHEDGESTYLE             = 0x000000a3,
    D3DRS_DEBUGMONITORTOKEN          = 0x000000a5,
    D3DRS_POINTSIZE_MAX              = 0x000000a6,
    D3DRS_INDEXEDVERTEXBLENDENABLE   = 0x000000a7,
    D3DRS_COLORWRITEENABLE           = 0x000000a8,
    D3DRS_TWEENFACTOR                = 0x000000aa,
    D3DRS_BLENDOP                    = 0x000000ab,
    D3DRS_POSITIONDEGREE             = 0x000000ac,
    D3DRS_NORMALDEGREE               = 0x000000ad,
    D3DRS_SCISSORTESTENABLE          = 0x000000ae,
    D3DRS_SLOPESCALEDEPTHBIAS        = 0x000000af,
    D3DRS_ANTIALIASEDLINEENABLE      = 0x000000b0,
    D3DRS_MINTESSELLATIONLEVEL       = 0x000000b2,
    D3DRS_MAXTESSELLATIONLEVEL       = 0x000000b3,
    D3DRS_ADAPTIVETESS_X             = 0x000000b4,
    D3DRS_ADAPTIVETESS_Y             = 0x000000b5,
    D3DRS_ADAPTIVETESS_Z             = 0x000000b6,
    D3DRS_ADAPTIVETESS_W             = 0x000000b7,
    D3DRS_ENABLEADAPTIVETESSELLATION = 0x000000b8,
    D3DRS_TWOSIDEDSTENCILMODE        = 0x000000b9,
    D3DRS_CCW_STENCILFAIL            = 0x000000ba,
    D3DRS_CCW_STENCILZFAIL           = 0x000000bb,
    D3DRS_CCW_STENCILPASS            = 0x000000bc,
    D3DRS_CCW_STENCILFUNC            = 0x000000bd,
    D3DRS_COLORWRITEENABLE1          = 0x000000be,
    D3DRS_COLORWRITEENABLE2          = 0x000000bf,
    D3DRS_COLORWRITEENABLE3          = 0x000000c0,
    D3DRS_BLENDFACTOR                = 0x000000c1,
    D3DRS_SRGBWRITEENABLE            = 0x000000c2,
    D3DRS_DEPTHBIAS                  = 0x000000c3,
    D3DRS_WRAP8                      = 0x000000c6,
    D3DRS_WRAP9                      = 0x000000c7,
    D3DRS_WRAP10                     = 0x000000c8,
    D3DRS_WRAP11                     = 0x000000c9,
    D3DRS_WRAP12                     = 0x000000ca,
    D3DRS_WRAP13                     = 0x000000cb,
    D3DRS_WRAP14                     = 0x000000cc,
    D3DRS_WRAP15                     = 0x000000cd,
    D3DRS_SEPARATEALPHABLENDENABLE   = 0x000000ce,
    D3DRS_SRCBLENDALPHA              = 0x000000cf,
    D3DRS_DESTBLENDALPHA             = 0x000000d0,
    D3DRS_BLENDOPALPHA               = 0x000000d1,
    D3DRS_FORCE_DWORD                = 0x7fffffff,
}

alias D3DMATERIALCOLORSOURCE = int;
enum : int
{
    D3DMCS_MATERIAL    = 0x00000000,
    D3DMCS_COLOR1      = 0x00000001,
    D3DMCS_COLOR2      = 0x00000002,
    D3DMCS_FORCE_DWORD = 0x7fffffff,
}

alias D3DTEXTURESTAGESTATETYPE = int;
enum : int
{
    D3DTSS_COLOROP               = 0x00000001,
    D3DTSS_COLORARG1             = 0x00000002,
    D3DTSS_COLORARG2             = 0x00000003,
    D3DTSS_ALPHAOP               = 0x00000004,
    D3DTSS_ALPHAARG1             = 0x00000005,
    D3DTSS_ALPHAARG2             = 0x00000006,
    D3DTSS_BUMPENVMAT00          = 0x00000007,
    D3DTSS_BUMPENVMAT01          = 0x00000008,
    D3DTSS_BUMPENVMAT10          = 0x00000009,
    D3DTSS_BUMPENVMAT11          = 0x0000000a,
    D3DTSS_TEXCOORDINDEX         = 0x0000000b,
    D3DTSS_BUMPENVLSCALE         = 0x00000016,
    D3DTSS_BUMPENVLOFFSET        = 0x00000017,
    D3DTSS_TEXTURETRANSFORMFLAGS = 0x00000018,
    D3DTSS_COLORARG0             = 0x0000001a,
    D3DTSS_ALPHAARG0             = 0x0000001b,
    D3DTSS_RESULTARG             = 0x0000001c,
    D3DTSS_CONSTANT              = 0x00000020,
    D3DTSS_FORCE_DWORD           = 0x7fffffff,
}

alias D3DSAMPLERSTATETYPE = int;
enum : int
{
    D3DSAMP_ADDRESSU      = 0x00000001,
    D3DSAMP_ADDRESSV      = 0x00000002,
    D3DSAMP_ADDRESSW      = 0x00000003,
    D3DSAMP_BORDERCOLOR   = 0x00000004,
    D3DSAMP_MAGFILTER     = 0x00000005,
    D3DSAMP_MINFILTER     = 0x00000006,
    D3DSAMP_MIPFILTER     = 0x00000007,
    D3DSAMP_MIPMAPLODBIAS = 0x00000008,
    D3DSAMP_MAXMIPLEVEL   = 0x00000009,
    D3DSAMP_MAXANISOTROPY = 0x0000000a,
    D3DSAMP_SRGBTEXTURE   = 0x0000000b,
    D3DSAMP_ELEMENTINDEX  = 0x0000000c,
    D3DSAMP_DMAPOFFSET    = 0x0000000d,
    D3DSAMP_FORCE_DWORD   = 0x7fffffff,
}

alias D3DTEXTUREOP = int;
enum : int
{
    D3DTOP_DISABLE                   = 0x00000001,
    D3DTOP_SELECTARG1                = 0x00000002,
    D3DTOP_SELECTARG2                = 0x00000003,
    D3DTOP_MODULATE                  = 0x00000004,
    D3DTOP_MODULATE2X                = 0x00000005,
    D3DTOP_MODULATE4X                = 0x00000006,
    D3DTOP_ADD                       = 0x00000007,
    D3DTOP_ADDSIGNED                 = 0x00000008,
    D3DTOP_ADDSIGNED2X               = 0x00000009,
    D3DTOP_SUBTRACT                  = 0x0000000a,
    D3DTOP_ADDSMOOTH                 = 0x0000000b,
    D3DTOP_BLENDDIFFUSEALPHA         = 0x0000000c,
    D3DTOP_BLENDTEXTUREALPHA         = 0x0000000d,
    D3DTOP_BLENDFACTORALPHA          = 0x0000000e,
    D3DTOP_BLENDTEXTUREALPHAPM       = 0x0000000f,
    D3DTOP_BLENDCURRENTALPHA         = 0x00000010,
    D3DTOP_PREMODULATE               = 0x00000011,
    D3DTOP_MODULATEALPHA_ADDCOLOR    = 0x00000012,
    D3DTOP_MODULATECOLOR_ADDALPHA    = 0x00000013,
    D3DTOP_MODULATEINVALPHA_ADDCOLOR = 0x00000014,
    D3DTOP_MODULATEINVCOLOR_ADDALPHA = 0x00000015,
    D3DTOP_BUMPENVMAP                = 0x00000016,
    D3DTOP_BUMPENVMAPLUMINANCE       = 0x00000017,
    D3DTOP_DOTPRODUCT3               = 0x00000018,
    D3DTOP_MULTIPLYADD               = 0x00000019,
    D3DTOP_LERP                      = 0x0000001a,
    D3DTOP_FORCE_DWORD               = 0x7fffffff,
}

alias D3DTEXTUREFILTERTYPE = int;
enum : int
{
    D3DTEXF_NONE            = 0x00000000,
    D3DTEXF_POINT           = 0x00000001,
    D3DTEXF_LINEAR          = 0x00000002,
    D3DTEXF_ANISOTROPIC     = 0x00000003,
    D3DTEXF_PYRAMIDALQUAD   = 0x00000006,
    D3DTEXF_GAUSSIANQUAD    = 0x00000007,
    D3DTEXF_CONVOLUTIONMONO = 0x00000008,
    D3DTEXF_FORCE_DWORD     = 0x7fffffff,
}

alias D3DDECLUSAGE = int;
enum : int
{
    D3DDECLUSAGE_POSITION     = 0x00000000,
    D3DDECLUSAGE_BLENDWEIGHT  = 0x00000001,
    D3DDECLUSAGE_BLENDINDICES = 0x00000002,
    D3DDECLUSAGE_NORMAL       = 0x00000003,
    D3DDECLUSAGE_PSIZE        = 0x00000004,
    D3DDECLUSAGE_TEXCOORD     = 0x00000005,
    D3DDECLUSAGE_TANGENT      = 0x00000006,
    D3DDECLUSAGE_BINORMAL     = 0x00000007,
    D3DDECLUSAGE_TESSFACTOR   = 0x00000008,
    D3DDECLUSAGE_POSITIONT    = 0x00000009,
    D3DDECLUSAGE_COLOR        = 0x0000000a,
    D3DDECLUSAGE_FOG          = 0x0000000b,
    D3DDECLUSAGE_DEPTH        = 0x0000000c,
    D3DDECLUSAGE_SAMPLE       = 0x0000000d,
}

alias D3DDECLMETHOD = int;
enum : int
{
    D3DDECLMETHOD_DEFAULT          = 0x00000000,
    D3DDECLMETHOD_PARTIALU         = 0x00000001,
    D3DDECLMETHOD_PARTIALV         = 0x00000002,
    D3DDECLMETHOD_CROSSUV          = 0x00000003,
    D3DDECLMETHOD_UV               = 0x00000004,
    D3DDECLMETHOD_LOOKUP           = 0x00000005,
    D3DDECLMETHOD_LOOKUPPRESAMPLED = 0x00000006,
}

alias D3DDECLTYPE = int;
enum : int
{
    D3DDECLTYPE_FLOAT1    = 0x00000000,
    D3DDECLTYPE_FLOAT2    = 0x00000001,
    D3DDECLTYPE_FLOAT3    = 0x00000002,
    D3DDECLTYPE_FLOAT4    = 0x00000003,
    D3DDECLTYPE_D3DCOLOR  = 0x00000004,
    D3DDECLTYPE_UBYTE4    = 0x00000005,
    D3DDECLTYPE_SHORT2    = 0x00000006,
    D3DDECLTYPE_SHORT4    = 0x00000007,
    D3DDECLTYPE_UBYTE4N   = 0x00000008,
    D3DDECLTYPE_SHORT2N   = 0x00000009,
    D3DDECLTYPE_SHORT4N   = 0x0000000a,
    D3DDECLTYPE_USHORT2N  = 0x0000000b,
    D3DDECLTYPE_USHORT4N  = 0x0000000c,
    D3DDECLTYPE_UDEC3     = 0x0000000d,
    D3DDECLTYPE_DEC3N     = 0x0000000e,
    D3DDECLTYPE_FLOAT16_2 = 0x0000000f,
    D3DDECLTYPE_FLOAT16_4 = 0x00000010,
    D3DDECLTYPE_UNUSED    = 0x00000011,
}

struct D3DVERTEXELEMENT9
{
    ushort Stream;
    ushort Offset;
    ubyte Type;
    ubyte Method;
    ubyte Usage;
    ubyte UsageIndex;
}
alias D3DSHADER_INSTRUCTION_OPCODE_TYPE = int;
enum : int
{
    D3DSIO_NOP          = 0x00000000,
    D3DSIO_MOV          = 0x00000001,
    D3DSIO_ADD          = 0x00000002,
    D3DSIO_SUB          = 0x00000003,
    D3DSIO_MAD          = 0x00000004,
    D3DSIO_MUL          = 0x00000005,
    D3DSIO_RCP          = 0x00000006,
    D3DSIO_RSQ          = 0x00000007,
    D3DSIO_DP3          = 0x00000008,
    D3DSIO_DP4          = 0x00000009,
    D3DSIO_MIN          = 0x0000000a,
    D3DSIO_MAX          = 0x0000000b,
    D3DSIO_SLT          = 0x0000000c,
    D3DSIO_SGE          = 0x0000000d,
    D3DSIO_EXP          = 0x0000000e,
    D3DSIO_LOG          = 0x0000000f,
    D3DSIO_LIT          = 0x00000010,
    D3DSIO_DST          = 0x00000011,
    D3DSIO_LRP          = 0x00000012,
    D3DSIO_FRC          = 0x00000013,
    D3DSIO_M4x4         = 0x00000014,
    D3DSIO_M4x3         = 0x00000015,
    D3DSIO_M3x4         = 0x00000016,
    D3DSIO_M3x3         = 0x00000017,
    D3DSIO_M3x2         = 0x00000018,
    D3DSIO_CALL         = 0x00000019,
    D3DSIO_CALLNZ       = 0x0000001a,
    D3DSIO_LOOP         = 0x0000001b,
    D3DSIO_RET          = 0x0000001c,
    D3DSIO_ENDLOOP      = 0x0000001d,
    D3DSIO_LABEL        = 0x0000001e,
    D3DSIO_DCL          = 0x0000001f,
    D3DSIO_POW          = 0x00000020,
    D3DSIO_CRS          = 0x00000021,
    D3DSIO_SGN          = 0x00000022,
    D3DSIO_ABS          = 0x00000023,
    D3DSIO_NRM          = 0x00000024,
    D3DSIO_SINCOS       = 0x00000025,
    D3DSIO_REP          = 0x00000026,
    D3DSIO_ENDREP       = 0x00000027,
    D3DSIO_IF           = 0x00000028,
    D3DSIO_IFC          = 0x00000029,
    D3DSIO_ELSE         = 0x0000002a,
    D3DSIO_ENDIF        = 0x0000002b,
    D3DSIO_BREAK        = 0x0000002c,
    D3DSIO_BREAKC       = 0x0000002d,
    D3DSIO_MOVA         = 0x0000002e,
    D3DSIO_DEFB         = 0x0000002f,
    D3DSIO_DEFI         = 0x00000030,
    D3DSIO_TEXCOORD     = 0x00000040,
    D3DSIO_TEXKILL      = 0x00000041,
    D3DSIO_TEX          = 0x00000042,
    D3DSIO_TEXBEM       = 0x00000043,
    D3DSIO_TEXBEML      = 0x00000044,
    D3DSIO_TEXREG2AR    = 0x00000045,
    D3DSIO_TEXREG2GB    = 0x00000046,
    D3DSIO_TEXM3x2PAD   = 0x00000047,
    D3DSIO_TEXM3x2TEX   = 0x00000048,
    D3DSIO_TEXM3x3PAD   = 0x00000049,
    D3DSIO_TEXM3x3TEX   = 0x0000004a,
    D3DSIO_RESERVED0    = 0x0000004b,
    D3DSIO_TEXM3x3SPEC  = 0x0000004c,
    D3DSIO_TEXM3x3VSPEC = 0x0000004d,
    D3DSIO_EXPP         = 0x0000004e,
    D3DSIO_LOGP         = 0x0000004f,
    D3DSIO_CND          = 0x00000050,
    D3DSIO_DEF          = 0x00000051,
    D3DSIO_TEXREG2RGB   = 0x00000052,
    D3DSIO_TEXDP3TEX    = 0x00000053,
    D3DSIO_TEXM3x2DEPTH = 0x00000054,
    D3DSIO_TEXDP3       = 0x00000055,
    D3DSIO_TEXM3x3      = 0x00000056,
    D3DSIO_TEXDEPTH     = 0x00000057,
    D3DSIO_CMP          = 0x00000058,
    D3DSIO_BEM          = 0x00000059,
    D3DSIO_DP2ADD       = 0x0000005a,
    D3DSIO_DSX          = 0x0000005b,
    D3DSIO_DSY          = 0x0000005c,
    D3DSIO_TEXLDD       = 0x0000005d,
    D3DSIO_SETP         = 0x0000005e,
    D3DSIO_TEXLDL       = 0x0000005f,
    D3DSIO_BREAKP       = 0x00000060,
    D3DSIO_PHASE        = 0x0000fffd,
    D3DSIO_COMMENT      = 0x0000fffe,
    D3DSIO_END          = 0x0000ffff,
    D3DSIO_FORCE_DWORD  = 0x7fffffff,
}

alias D3DSHADER_COMPARISON = int;
enum : int
{
    D3DSPC_RESERVED0 = 0x00000000,
    D3DSPC_GT        = 0x00000001,
    D3DSPC_EQ        = 0x00000002,
    D3DSPC_GE        = 0x00000003,
    D3DSPC_LT        = 0x00000004,
    D3DSPC_NE        = 0x00000005,
    D3DSPC_LE        = 0x00000006,
    D3DSPC_RESERVED1 = 0x00000007,
}

alias D3DSAMPLER_TEXTURE_TYPE = int;
enum : int
{
    D3DSTT_UNKNOWN     = 0x00000000,
    D3DSTT_2D          = 0x10000000,
    D3DSTT_CUBE        = 0x18000000,
    D3DSTT_VOLUME      = 0x20000000,
    D3DSTT_FORCE_DWORD = 0x7fffffff,
}

alias D3DSHADER_PARAM_REGISTER_TYPE = int;
enum : int
{
    D3DSPR_TEMP        = 0x00000000,
    D3DSPR_INPUT       = 0x00000001,
    D3DSPR_CONST       = 0x00000002,
    D3DSPR_ADDR        = 0x00000003,
    D3DSPR_TEXTURE     = 0x00000003,
    D3DSPR_RASTOUT     = 0x00000004,
    D3DSPR_ATTROUT     = 0x00000005,
    D3DSPR_TEXCRDOUT   = 0x00000006,
    D3DSPR_OUTPUT      = 0x00000006,
    D3DSPR_CONSTINT    = 0x00000007,
    D3DSPR_COLOROUT    = 0x00000008,
    D3DSPR_DEPTHOUT    = 0x00000009,
    D3DSPR_SAMPLER     = 0x0000000a,
    D3DSPR_CONST2      = 0x0000000b,
    D3DSPR_CONST3      = 0x0000000c,
    D3DSPR_CONST4      = 0x0000000d,
    D3DSPR_CONSTBOOL   = 0x0000000e,
    D3DSPR_LOOP        = 0x0000000f,
    D3DSPR_TEMPFLOAT16 = 0x00000010,
    D3DSPR_MISCTYPE    = 0x00000011,
    D3DSPR_LABEL       = 0x00000012,
    D3DSPR_PREDICATE   = 0x00000013,
    D3DSPR_FORCE_DWORD = 0x7fffffff,
}

alias D3DSHADER_MISCTYPE_OFFSETS = int;
enum : int
{
    D3DSMO_POSITION = 0x00000000,
    D3DSMO_FACE     = 0x00000001,
}

alias D3DVS_RASTOUT_OFFSETS = int;
enum : int
{
    D3DSRO_POSITION    = 0x00000000,
    D3DSRO_FOG         = 0x00000001,
    D3DSRO_POINT_SIZE  = 0x00000002,
    D3DSRO_FORCE_DWORD = 0x7fffffff,
}

alias D3DVS_ADDRESSMODE_TYPE = int;
enum : int
{
    D3DVS_ADDRMODE_ABSOLUTE    = 0x00000000,
    D3DVS_ADDRMODE_RELATIVE    = 0x00002000,
    D3DVS_ADDRMODE_FORCE_DWORD = 0x7fffffff,
}

alias D3DSHADER_ADDRESSMODE_TYPE = int;
enum : int
{
    D3DSHADER_ADDRMODE_ABSOLUTE    = 0x00000000,
    D3DSHADER_ADDRMODE_RELATIVE    = 0x00002000,
    D3DSHADER_ADDRMODE_FORCE_DWORD = 0x7fffffff,
}

alias D3DSHADER_PARAM_SRCMOD_TYPE = int;
enum : int
{
    D3DSPSM_NONE        = 0x00000000,
    D3DSPSM_NEG         = 0x01000000,
    D3DSPSM_BIAS        = 0x02000000,
    D3DSPSM_BIASNEG     = 0x03000000,
    D3DSPSM_SIGN        = 0x04000000,
    D3DSPSM_SIGNNEG     = 0x05000000,
    D3DSPSM_COMP        = 0x06000000,
    D3DSPSM_X2          = 0x07000000,
    D3DSPSM_X2NEG       = 0x08000000,
    D3DSPSM_DZ          = 0x09000000,
    D3DSPSM_DW          = 0x0a000000,
    D3DSPSM_ABS         = 0x0b000000,
    D3DSPSM_ABSNEG      = 0x0c000000,
    D3DSPSM_NOT         = 0x0d000000,
    D3DSPSM_FORCE_DWORD = 0x7fffffff,
}

alias D3DSHADER_MIN_PRECISION = int;
enum : int
{
    D3DMP_DEFAULT = 0x00000000,
    D3DMP_16      = 0x00000001,
    D3DMP_2_8     = 0x00000002,
}

alias D3DBASISTYPE = int;
enum : int
{
    D3DBASIS_BEZIER      = 0x00000000,
    D3DBASIS_BSPLINE     = 0x00000001,
    D3DBASIS_CATMULL_ROM = 0x00000002,
    D3DBASIS_FORCE_DWORD = 0x7fffffff,
}

alias D3DDEGREETYPE = int;
enum : int
{
    D3DDEGREE_LINEAR      = 0x00000001,
    D3DDEGREE_QUADRATIC   = 0x00000002,
    D3DDEGREE_CUBIC       = 0x00000003,
    D3DDEGREE_QUINTIC     = 0x00000005,
    D3DDEGREE_FORCE_DWORD = 0x7fffffff,
}

alias D3DPATCHEDGESTYLE = int;
enum : int
{
    D3DPATCHEDGE_DISCRETE    = 0x00000000,
    D3DPATCHEDGE_CONTINUOUS  = 0x00000001,
    D3DPATCHEDGE_FORCE_DWORD = 0x7fffffff,
}

alias D3DSTATEBLOCKTYPE = int;
enum : int
{
    D3DSBT_ALL         = 0x00000001,
    D3DSBT_PIXELSTATE  = 0x00000002,
    D3DSBT_VERTEXSTATE = 0x00000003,
    D3DSBT_FORCE_DWORD = 0x7fffffff,
}

alias D3DVERTEXBLENDFLAGS = int;
enum : int
{
    D3DVBF_DISABLE     = 0x00000000,
    D3DVBF_1WEIGHTS    = 0x00000001,
    D3DVBF_2WEIGHTS    = 0x00000002,
    D3DVBF_3WEIGHTS    = 0x00000003,
    D3DVBF_TWEENING    = 0x000000ff,
    D3DVBF_0WEIGHTS    = 0x00000100,
    D3DVBF_FORCE_DWORD = 0x7fffffff,
}

alias D3DTEXTURETRANSFORMFLAGS = int;
enum : int
{
    D3DTTFF_DISABLE     = 0x00000000,
    D3DTTFF_COUNT1      = 0x00000001,
    D3DTTFF_COUNT2      = 0x00000002,
    D3DTTFF_COUNT3      = 0x00000003,
    D3DTTFF_COUNT4      = 0x00000004,
    D3DTTFF_PROJECTED   = 0x00000100,
    D3DTTFF_FORCE_DWORD = 0x7fffffff,
}

alias D3DDEVTYPE = uint;
enum : uint
{
    D3DDEVTYPE_HAL         = 0x00000001,
    D3DDEVTYPE_REF         = 0x00000002,
    D3DDEVTYPE_SW          = 0x00000003,
    D3DDEVTYPE_NULLREF     = 0x00000004,
    D3DDEVTYPE_FORCE_DWORD = 0x7fffffff,
}

alias D3DMULTISAMPLE_TYPE = int;
enum : int
{
    D3DMULTISAMPLE_NONE        = 0x00000000,
    D3DMULTISAMPLE_NONMASKABLE = 0x00000001,
    D3DMULTISAMPLE_2_SAMPLES   = 0x00000002,
    D3DMULTISAMPLE_3_SAMPLES   = 0x00000003,
    D3DMULTISAMPLE_4_SAMPLES   = 0x00000004,
    D3DMULTISAMPLE_5_SAMPLES   = 0x00000005,
    D3DMULTISAMPLE_6_SAMPLES   = 0x00000006,
    D3DMULTISAMPLE_7_SAMPLES   = 0x00000007,
    D3DMULTISAMPLE_8_SAMPLES   = 0x00000008,
    D3DMULTISAMPLE_9_SAMPLES   = 0x00000009,
    D3DMULTISAMPLE_10_SAMPLES  = 0x0000000a,
    D3DMULTISAMPLE_11_SAMPLES  = 0x0000000b,
    D3DMULTISAMPLE_12_SAMPLES  = 0x0000000c,
    D3DMULTISAMPLE_13_SAMPLES  = 0x0000000d,
    D3DMULTISAMPLE_14_SAMPLES  = 0x0000000e,
    D3DMULTISAMPLE_15_SAMPLES  = 0x0000000f,
    D3DMULTISAMPLE_16_SAMPLES  = 0x00000010,
    D3DMULTISAMPLE_FORCE_DWORD = 0x7fffffff,
}

alias D3DFORMAT = uint;
enum : uint
{
    D3DFMT_UNKNOWN             = 0x00000000,
    D3DFMT_R8G8B8              = 0x00000014,
    D3DFMT_A8R8G8B8            = 0x00000015,
    D3DFMT_X8R8G8B8            = 0x00000016,
    D3DFMT_R5G6B5              = 0x00000017,
    D3DFMT_X1R5G5B5            = 0x00000018,
    D3DFMT_A1R5G5B5            = 0x00000019,
    D3DFMT_A4R4G4B4            = 0x0000001a,
    D3DFMT_R3G3B2              = 0x0000001b,
    D3DFMT_A8                  = 0x0000001c,
    D3DFMT_A8R3G3B2            = 0x0000001d,
    D3DFMT_X4R4G4B4            = 0x0000001e,
    D3DFMT_A2B10G10R10         = 0x0000001f,
    D3DFMT_A8B8G8R8            = 0x00000020,
    D3DFMT_X8B8G8R8            = 0x00000021,
    D3DFMT_G16R16              = 0x00000022,
    D3DFMT_A2R10G10B10         = 0x00000023,
    D3DFMT_A16B16G16R16        = 0x00000024,
    D3DFMT_A8P8                = 0x00000028,
    D3DFMT_P8                  = 0x00000029,
    D3DFMT_L8                  = 0x00000032,
    D3DFMT_A8L8                = 0x00000033,
    D3DFMT_A4L4                = 0x00000034,
    D3DFMT_V8U8                = 0x0000003c,
    D3DFMT_L6V5U5              = 0x0000003d,
    D3DFMT_X8L8V8U8            = 0x0000003e,
    D3DFMT_Q8W8V8U8            = 0x0000003f,
    D3DFMT_V16U16              = 0x00000040,
    D3DFMT_A2W10V10U10         = 0x00000043,
    D3DFMT_UYVY                = 0x59565955,
    D3DFMT_R8G8_B8G8           = 0x47424752,
    D3DFMT_YUY2                = 0x32595559,
    D3DFMT_G8R8_G8B8           = 0x42475247,
    D3DFMT_DXT1                = 0x31545844,
    D3DFMT_DXT2                = 0x32545844,
    D3DFMT_DXT3                = 0x33545844,
    D3DFMT_DXT4                = 0x34545844,
    D3DFMT_DXT5                = 0x35545844,
    D3DFMT_D16_LOCKABLE        = 0x00000046,
    D3DFMT_D32                 = 0x00000047,
    D3DFMT_D15S1               = 0x00000049,
    D3DFMT_D24S8               = 0x0000004b,
    D3DFMT_D24X8               = 0x0000004d,
    D3DFMT_D24X4S4             = 0x0000004f,
    D3DFMT_D16                 = 0x00000050,
    D3DFMT_D32F_LOCKABLE       = 0x00000052,
    D3DFMT_D24FS8              = 0x00000053,
    D3DFMT_D32_LOCKABLE        = 0x00000054,
    D3DFMT_S8_LOCKABLE         = 0x00000055,
    D3DFMT_L16                 = 0x00000051,
    D3DFMT_VERTEXDATA          = 0x00000064,
    D3DFMT_INDEX16             = 0x00000065,
    D3DFMT_INDEX32             = 0x00000066,
    D3DFMT_Q16W16V16U16        = 0x0000006e,
    D3DFMT_MULTI2_ARGB8        = 0x3154454d,
    D3DFMT_R16F                = 0x0000006f,
    D3DFMT_G16R16F             = 0x00000070,
    D3DFMT_A16B16G16R16F       = 0x00000071,
    D3DFMT_R32F                = 0x00000072,
    D3DFMT_G32R32F             = 0x00000073,
    D3DFMT_A32B32G32R32F       = 0x00000074,
    D3DFMT_CxV8U8              = 0x00000075,
    D3DFMT_A1                  = 0x00000076,
    D3DFMT_A2B10G10R10_XR_BIAS = 0x00000077,
    D3DFMT_BINARYBUFFER        = 0x000000c7,
    D3DFMT_FORCE_DWORD         = 0x7fffffff,
}

struct D3DDISPLAYMODE
{
    uint Width;
    uint Height;
    uint RefreshRate;
    D3DFORMAT Format;
}
struct D3DDEVICE_CREATION_PARAMETERS
{
    uint AdapterOrdinal;
    D3DDEVTYPE DeviceType;
    HWND hFocusWindow;
    uint BehaviorFlags;
}
alias D3DSWAPEFFECT = uint;
enum : uint
{
    D3DSWAPEFFECT_DISCARD     = 0x00000001,
    D3DSWAPEFFECT_FLIP        = 0x00000002,
    D3DSWAPEFFECT_COPY        = 0x00000003,
    D3DSWAPEFFECT_OVERLAY     = 0x00000004,
    D3DSWAPEFFECT_FLIPEX      = 0x00000005,
    D3DSWAPEFFECT_FORCE_DWORD = 0x7fffffff,
}

alias D3DPOOL = uint;
enum : uint
{
    D3DPOOL_DEFAULT     = 0x00000000,
    D3DPOOL_MANAGED     = 0x00000001,
    D3DPOOL_SYSTEMMEM   = 0x00000002,
    D3DPOOL_SCRATCH     = 0x00000003,
    D3DPOOL_FORCE_DWORD = 0x7fffffff,
}

struct D3DPRESENT_PARAMETERS
{
    uint BackBufferWidth;
    uint BackBufferHeight;
    D3DFORMAT BackBufferFormat;
    uint BackBufferCount;
    D3DMULTISAMPLE_TYPE MultiSampleType;
    uint MultiSampleQuality;
    D3DSWAPEFFECT SwapEffect;
    HWND hDeviceWindow;
    BOOL Windowed;
    BOOL EnableAutoDepthStencil;
    D3DFORMAT AutoDepthStencilFormat;
    uint Flags;
    uint FullScreen_RefreshRateInHz;
    uint PresentationInterval;
}
struct D3DGAMMARAMP
{
    ushort[256] red;
    ushort[256] green;
    ushort[256] blue;
}
alias D3DBACKBUFFER_TYPE = uint;
enum : uint
{
    D3DBACKBUFFER_TYPE_MONO        = 0x00000000,
    D3DBACKBUFFER_TYPE_LEFT        = 0x00000001,
    D3DBACKBUFFER_TYPE_RIGHT       = 0x00000002,
    D3DBACKBUFFER_TYPE_FORCE_DWORD = 0x7fffffff,
}

alias D3DRESOURCETYPE = int;
enum : int
{
    D3DRTYPE_SURFACE       = 0x00000001,
    D3DRTYPE_VOLUME        = 0x00000002,
    D3DRTYPE_TEXTURE       = 0x00000003,
    D3DRTYPE_VOLUMETEXTURE = 0x00000004,
    D3DRTYPE_CUBETEXTURE   = 0x00000005,
    D3DRTYPE_VERTEXBUFFER  = 0x00000006,
    D3DRTYPE_INDEXBUFFER   = 0x00000007,
    D3DRTYPE_FORCE_DWORD   = 0x7fffffff,
}

alias D3DCUBEMAP_FACES = int;
enum : int
{
    D3DCUBEMAP_FACE_POSITIVE_X  = 0x00000000,
    D3DCUBEMAP_FACE_NEGATIVE_X  = 0x00000001,
    D3DCUBEMAP_FACE_POSITIVE_Y  = 0x00000002,
    D3DCUBEMAP_FACE_NEGATIVE_Y  = 0x00000003,
    D3DCUBEMAP_FACE_POSITIVE_Z  = 0x00000004,
    D3DCUBEMAP_FACE_NEGATIVE_Z  = 0x00000005,
    D3DCUBEMAP_FACE_FORCE_DWORD = 0x7fffffff,
}

struct D3DVERTEXBUFFER_DESC
{
    D3DFORMAT Format;
    D3DRESOURCETYPE Type;
    uint Usage;
    D3DPOOL Pool;
    uint Size;
    uint FVF;
}
struct D3DINDEXBUFFER_DESC
{
    D3DFORMAT Format;
    D3DRESOURCETYPE Type;
    uint Usage;
    D3DPOOL Pool;
    uint Size;
}
struct D3DSURFACE_DESC
{
    D3DFORMAT Format;
    D3DRESOURCETYPE Type;
    uint Usage;
    D3DPOOL Pool;
    D3DMULTISAMPLE_TYPE MultiSampleType;
    uint MultiSampleQuality;
    uint Width;
    uint Height;
}
struct D3DVOLUME_DESC
{
    D3DFORMAT Format;
    D3DRESOURCETYPE Type;
    uint Usage;
    D3DPOOL Pool;
    uint Width;
    uint Height;
    uint Depth;
}
struct D3DLOCKED_RECT
{
    int Pitch;
    void* pBits;
}
struct D3DBOX
{
    uint Left;
    uint Top;
    uint Right;
    uint Bottom;
    uint Front;
    uint Back;
}
struct D3DLOCKED_BOX
{
    int RowPitch;
    int SlicePitch;
    void* pBits;
}
struct D3DRANGE
{
    uint Offset;
    uint Size;
}
struct D3DRECTPATCH_INFO
{
    uint StartVertexOffsetWidth;
    uint StartVertexOffsetHeight;
    uint Width;
    uint Height;
    uint Stride;
    D3DBASISTYPE Basis;
    D3DDEGREETYPE Degree;
}
struct D3DTRIPATCH_INFO
{
    uint StartVertexOffset;
    uint NumVertices;
    D3DBASISTYPE Basis;
    D3DDEGREETYPE Degree;
}
/+ [CONFLICTED] struct D3DADAPTER_IDENTIFIER9
{
    align (4):
    CHAR[512] Driver;
    CHAR[512] Description;
    CHAR[32] DeviceName;
    long DriverVersion;
    uint VendorId;
    uint DeviceId;
    uint SubSysId;
    uint Revision;
    GUID DeviceIdentifier;
    uint WHQLLevel;
}
+/
struct D3DRASTER_STATUS
{
    BOOL InVBlank;
    uint ScanLine;
}
alias D3DDEBUGMONITORTOKENS = int;
enum : int
{
    D3DDMT_ENABLE      = 0x00000000,
    D3DDMT_DISABLE     = 0x00000001,
    D3DDMT_FORCE_DWORD = 0x7fffffff,
}

alias D3DQUERYTYPE = int;
enum : int
{
    D3DQUERYTYPE_VCACHE            = 0x00000004,
    D3DQUERYTYPE_RESOURCEMANAGER   = 0x00000005,
    D3DQUERYTYPE_VERTEXSTATS       = 0x00000006,
    D3DQUERYTYPE_EVENT             = 0x00000008,
    D3DQUERYTYPE_OCCLUSION         = 0x00000009,
    D3DQUERYTYPE_TIMESTAMP         = 0x0000000a,
    D3DQUERYTYPE_TIMESTAMPDISJOINT = 0x0000000b,
    D3DQUERYTYPE_TIMESTAMPFREQ     = 0x0000000c,
    D3DQUERYTYPE_PIPELINETIMINGS   = 0x0000000d,
    D3DQUERYTYPE_INTERFACETIMINGS  = 0x0000000e,
    D3DQUERYTYPE_VERTEXTIMINGS     = 0x0000000f,
    D3DQUERYTYPE_PIXELTIMINGS      = 0x00000010,
    D3DQUERYTYPE_BANDWIDTHTIMINGS  = 0x00000011,
    D3DQUERYTYPE_CACHEUTILIZATION  = 0x00000012,
    D3DQUERYTYPE_MEMORYPRESSURE    = 0x00000013,
}

struct D3DRESOURCESTATS
{
    BOOL bThrashing;
    uint ApproxBytesDownloaded;
    uint NumEvicts;
    uint NumVidCreates;
    uint LastPri;
    uint NumUsed;
    uint NumUsedInVidMem;
    uint WorkingSet;
    uint WorkingSetBytes;
    uint TotalManaged;
    uint TotalBytes;
}
struct D3DDEVINFO_RESOURCEMANAGER
{
    D3DRESOURCESTATS[8] stats;
}
struct D3DDEVINFO_D3DVERTEXSTATS
{
    uint NumRenderedTriangles;
    uint NumExtraClippingTriangles;
}
struct D3DDEVINFO_VCACHE
{
    uint Pattern;
    uint OptMethod;
    uint CacheSize;
    uint MagicNumber;
}
struct D3DDEVINFO_D3D9PIPELINETIMINGS
{
    float VertexProcessingTimePercent;
    float PixelProcessingTimePercent;
    float OtherGPUProcessingTimePercent;
    float GPUIdleTimePercent;
}
struct D3DDEVINFO_D3D9INTERFACETIMINGS
{
    float WaitingForGPUToUseApplicationResourceTimePercent;
    float WaitingForGPUToAcceptMoreCommandsTimePercent;
    float WaitingForGPUToStayWithinLatencyTimePercent;
    float WaitingForGPUExclusiveResourceTimePercent;
    float WaitingForGPUOtherTimePercent;
}
struct D3DDEVINFO_D3D9STAGETIMINGS
{
    float MemoryProcessingPercent;
    float ComputationProcessingPercent;
}
struct D3DDEVINFO_D3D9BANDWIDTHTIMINGS
{
    float MaxBandwidthUtilized;
    float FrontEndUploadMemoryUtilizedPercent;
    float VertexRateUtilizedPercent;
    float TriangleSetupRateUtilizedPercent;
    float FillRateUtilizedPercent;
}
struct D3DDEVINFO_D3D9CACHEUTILIZATION
{
    float TextureCacheHitRate;
    float PostTransformVertexCacheHitRate;
}
/+ [CONFLICTED] struct D3DMEMORYPRESSURE
{
    align (4):
    ulong BytesEvictedFromProcess;
    ulong SizeOfInefficientAllocation;
    uint LevelOfEfficiency;
}
+/
alias D3DCOMPOSERECTSOP = int;
enum : int
{
    D3DCOMPOSERECTS_COPY        = 0x00000001,
    D3DCOMPOSERECTS_OR          = 0x00000002,
    D3DCOMPOSERECTS_AND         = 0x00000003,
    D3DCOMPOSERECTS_NEG         = 0x00000004,
    D3DCOMPOSERECTS_FORCE_DWORD = 0x7fffffff,
}

struct D3DCOMPOSERECTDESC
{
    ushort X;
    ushort Y;
    ushort Width;
    ushort Height;
}
struct D3DCOMPOSERECTDESTINATION
{
    ushort SrcRectIndex;
    ushort Reserved;
    short X;
    short Y;
}
/+ [CONFLICTED] struct D3DPRESENTSTATS
{
    align (4):
    uint PresentCount;
    uint PresentRefreshCount;
    uint SyncRefreshCount;
    long SyncQPCTime;
    long SyncGPUTime;
}
+/
alias D3DSCANLINEORDERING = int;
enum : int
{
    D3DSCANLINEORDERING_UNKNOWN     = 0x00000000,
    D3DSCANLINEORDERING_PROGRESSIVE = 0x00000001,
    D3DSCANLINEORDERING_INTERLACED  = 0x00000002,
}

struct D3DDISPLAYMODEEX
{
    uint Size;
    uint Width;
    uint Height;
    uint RefreshRate;
    D3DFORMAT Format;
    D3DSCANLINEORDERING ScanLineOrdering;
}
struct D3DDISPLAYMODEFILTER
{
    uint Size;
    D3DFORMAT Format;
    D3DSCANLINEORDERING ScanLineOrdering;
}
alias D3DDISPLAYROTATION = int;
enum : int
{
    D3DDISPLAYROTATION_IDENTITY = 0x00000001,
    D3DDISPLAYROTATION_90       = 0x00000002,
    D3DDISPLAYROTATION_180      = 0x00000003,
    D3DDISPLAYROTATION_270      = 0x00000004,
}

struct D3D_OMAC
{
    ubyte[16] Omac;
}
alias D3DAUTHENTICATEDCHANNELTYPE = int;
enum : int
{
    D3DAUTHENTICATEDCHANNEL_D3D9            = 0x00000001,
    D3DAUTHENTICATEDCHANNEL_DRIVER_SOFTWARE = 0x00000002,
    D3DAUTHENTICATEDCHANNEL_DRIVER_HARDWARE = 0x00000003,
}

struct D3DAUTHENTICATEDCHANNEL_QUERY_INPUT
{
    GUID QueryType;
    HANDLE hChannel;
    uint SequenceNumber;
}
struct D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT
{
    D3D_OMAC omac;
    GUID QueryType;
    HANDLE hChannel;
    uint SequenceNumber;
    HRESULT ReturnCode;
}
struct D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS
{
    union
    {
        struct
        {
            uint _bitfield0;
        }
        uint Value;
    }
}
struct D3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT
{
    D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
    D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS ProtectionFlags;
}
struct D3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT
{
    D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
    D3DAUTHENTICATEDCHANNELTYPE ChannelType;
}
struct D3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT
{
    D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
    HANDLE DeviceHandle;
}
struct D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT
{
    D3DAUTHENTICATEDCHANNEL_QUERY_INPUT Input;
    HANDLE DXVA2DecodeHandle;
}
struct D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT
{
    D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
    HANDLE DXVA2DecodeHandle;
    HANDLE CryptoSessionHandle;
    HANDLE DeviceHandle;
}
struct D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT
{
    D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
    uint NumRestrictedSharedResourceProcesses;
}
struct D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT
{
    D3DAUTHENTICATEDCHANNEL_QUERY_INPUT Input;
    uint ProcessIndex;
}
alias D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE = int;
enum : int
{
    PROCESSIDTYPE_UNKNOWN = 0x00000000,
    PROCESSIDTYPE_DWM     = 0x00000001,
    PROCESSIDTYPE_HANDLE  = 0x00000002,
}

struct D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT
{
    D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
    uint ProcessIndex;
    D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE ProcessIdentifer;
    HANDLE ProcessHandle;
}
struct D3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT
{
    D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
    uint NumUnrestrictedProtectedSharedResources;
}
struct D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT
{
    D3DAUTHENTICATEDCHANNEL_QUERY_INPUT Input;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
}
struct D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT
{
    D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
    uint NumOutputIDs;
}
struct D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT
{
    D3DAUTHENTICATEDCHANNEL_QUERY_INPUT Input;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
    uint OutputIDIndex;
}
/+ [CONFLICTED] struct D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT
{
    align (4):
    D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
    uint OutputIDIndex;
    ulong OutputID;
}
+/
alias D3DBUSTYPE = int;
enum : int
{
    D3DBUSTYPE_OTHER                                            = 0x00000000,
    D3DBUSTYPE_PCI                                              = 0x00000001,
    D3DBUSTYPE_PCIX                                             = 0x00000002,
    D3DBUSTYPE_PCIEXPRESS                                       = 0x00000003,
    D3DBUSTYPE_AGP                                              = 0x00000004,
    D3DBUSIMPL_MODIFIER_INSIDE_OF_CHIPSET                       = 0x00010000,
    D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP          = 0x00020000,
    D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET        = 0x00030000,
    D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR                = 0x00040000,
    D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 0x00050000,
    D3DBUSIMPL_MODIFIER_NON_STANDARD                            = 0x80000000,
}

struct D3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT
{
    D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
    D3DBUSTYPE BusType;
    BOOL bAccessibleInContiguousBlocks;
    BOOL bAccessibleInNonContiguousBlocks;
}
struct D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT
{
    D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
    uint NumEncryptionGuids;
}
struct D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT
{
    D3DAUTHENTICATEDCHANNEL_QUERY_INPUT Input;
    uint EncryptionGuidIndex;
}
struct D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT
{
    D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
    uint EncryptionGuidIndex;
    GUID EncryptionGuid;
}
struct D3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT
{
    D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT Output;
    GUID EncryptionGuid;
}
struct D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT
{
    D3D_OMAC omac;
    GUID ConfigureType;
    HANDLE hChannel;
    uint SequenceNumber;
}
struct D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT
{
    D3D_OMAC omac;
    GUID ConfigureType;
    HANDLE hChannel;
    uint SequenceNumber;
    HRESULT ReturnCode;
}
struct D3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE
{
    D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT Parameters;
    uint StartSequenceQuery;
    uint StartSequenceConfigure;
}
struct D3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION
{
    D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT Parameters;
    D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS Protections;
}
struct D3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION
{
    D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT Parameters;
    HANDLE DXVA2DecodeHandle;
    HANDLE CryptoSessionHandle;
    HANDLE DeviceHandle;
}
struct D3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE
{
    D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT Parameters;
    D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE ProcessIdentiferType;
    HANDLE ProcessHandle;
    BOOL AllowAccess;
}
struct D3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION
{
    D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT Parameters;
    GUID EncryptionGuid;
}
struct D3DENCRYPTED_BLOCK_INFO
{
    uint NumEncryptedBytesAtBeginning;
    uint NumBytesInSkipPattern;
    uint NumBytesInEncryptPattern;
}
/+ [CONFLICTED] struct D3DAES_CTR_IV
{
    align (4):
    ulong IV;
    ulong Count;
}
+/
struct D3DVSHADERCAPS2_0
{
    uint Caps;
    int DynamicFlowControlDepth;
    int NumTemps;
    int StaticFlowControlDepth;
}
struct D3DPSHADERCAPS2_0
{
    uint Caps;
    int DynamicFlowControlDepth;
    int NumTemps;
    int StaticFlowControlDepth;
    int NumInstructionSlots;
}
struct D3DCAPS9
{
    D3DDEVTYPE DeviceType;
    uint AdapterOrdinal;
    uint Caps;
    uint Caps2;
    uint Caps3;
    uint PresentationIntervals;
    uint CursorCaps;
    uint DevCaps;
    uint PrimitiveMiscCaps;
    uint RasterCaps;
    uint ZCmpCaps;
    uint SrcBlendCaps;
    uint DestBlendCaps;
    uint AlphaCmpCaps;
    uint ShadeCaps;
    uint TextureCaps;
    uint TextureFilterCaps;
    uint CubeTextureFilterCaps;
    uint VolumeTextureFilterCaps;
    uint TextureAddressCaps;
    uint VolumeTextureAddressCaps;
    uint LineCaps;
    uint MaxTextureWidth;
    uint MaxTextureHeight;
    uint MaxVolumeExtent;
    uint MaxTextureRepeat;
    uint MaxTextureAspectRatio;
    uint MaxAnisotropy;
    float MaxVertexW;
    float GuardBandLeft;
    float GuardBandTop;
    float GuardBandRight;
    float GuardBandBottom;
    float ExtentsAdjust;
    uint StencilCaps;
    uint FVFCaps;
    uint TextureOpCaps;
    uint MaxTextureBlendStages;
    uint MaxSimultaneousTextures;
    uint VertexProcessingCaps;
    uint MaxActiveLights;
    uint MaxUserClipPlanes;
    uint MaxVertexBlendMatrices;
    uint MaxVertexBlendMatrixIndex;
    float MaxPointSize;
    uint MaxPrimitiveCount;
    uint MaxVertexIndex;
    uint MaxStreams;
    uint MaxStreamStride;
    uint VertexShaderVersion;
    uint MaxVertexShaderConst;
    uint PixelShaderVersion;
    float PixelShader1xMaxValue;
    uint DevCaps2;
    float MaxNpatchTessellationLevel;
    uint Reserved5;
    uint MasterAdapterOrdinal;
    uint AdapterOrdinalInGroup;
    uint NumberOfAdaptersInGroup;
    uint DeclTypes;
    uint NumSimultaneousRTs;
    uint StretchRectFilterCaps;
    D3DVSHADERCAPS2_0 VS20Caps;
    D3DPSHADERCAPS2_0 PS20Caps;
    uint VertexTextureFilterCaps;
    uint MaxVShaderInstructionsExecuted;
    uint MaxPShaderInstructionsExecuted;
    uint MaxVertexShader30InstructionSlots;
    uint MaxPixelShader30InstructionSlots;
}
enum IID_IDirect3D9 = GUID(0x81bdcbca, 0x64d4, 0x426d, [0xae, 0x8d, 0xad, 0x1, 0x47, 0xf4, 0x27, 0x5c]);
interface IDirect3D9 : IUnknown
{
    HRESULT RegisterSoftwareDevice(void*);
    uint GetAdapterCount();
    HRESULT GetAdapterIdentifier(uint, uint, D3DADAPTER_IDENTIFIER9*);
    uint GetAdapterModeCount(uint, D3DFORMAT);
    HRESULT EnumAdapterModes(uint, D3DFORMAT, uint, D3DDISPLAYMODE*);
    HRESULT GetAdapterDisplayMode(uint, D3DDISPLAYMODE*);
    HRESULT CheckDeviceType(uint, D3DDEVTYPE, D3DFORMAT, D3DFORMAT, BOOL);
    HRESULT CheckDeviceFormat(uint, D3DDEVTYPE, D3DFORMAT, uint, D3DRESOURCETYPE, D3DFORMAT);
    HRESULT CheckDeviceMultiSampleType(uint, D3DDEVTYPE, D3DFORMAT, BOOL, D3DMULTISAMPLE_TYPE, uint*);
    HRESULT CheckDepthStencilMatch(uint, D3DDEVTYPE, D3DFORMAT, D3DFORMAT, D3DFORMAT);
    HRESULT CheckDeviceFormatConversion(uint, D3DDEVTYPE, D3DFORMAT, D3DFORMAT);
    HRESULT GetDeviceCaps(uint, D3DDEVTYPE, D3DCAPS9*);
    HMONITOR GetAdapterMonitor(uint);
    HRESULT CreateDevice(uint, D3DDEVTYPE, HWND, uint, D3DPRESENT_PARAMETERS*, IDirect3DDevice9*);
}
enum IID_IDirect3DDevice9 = GUID(0xd0223b96, 0xbf7a, 0x43fd, [0x92, 0xbd, 0xa4, 0x3b, 0xd, 0x82, 0xb9, 0xeb]);
interface IDirect3DDevice9 : IUnknown
{
    HRESULT TestCooperativeLevel();
    uint GetAvailableTextureMem();
    HRESULT EvictManagedResources();
    HRESULT GetDirect3D(IDirect3D9*);
    HRESULT GetDeviceCaps(D3DCAPS9*);
    HRESULT GetDisplayMode(uint, D3DDISPLAYMODE*);
    HRESULT GetCreationParameters(D3DDEVICE_CREATION_PARAMETERS*);
    HRESULT SetCursorProperties(uint, uint, IDirect3DSurface9);
    void SetCursorPosition(int, int, uint);
    BOOL ShowCursor(BOOL);
    HRESULT CreateAdditionalSwapChain(D3DPRESENT_PARAMETERS*, IDirect3DSwapChain9*);
    HRESULT GetSwapChain(uint, IDirect3DSwapChain9*);
    uint GetNumberOfSwapChains();
    HRESULT Reset(D3DPRESENT_PARAMETERS*);
    HRESULT Present(const(RECT)*, const(RECT)*, HWND, const(RGNDATA)*);
    HRESULT GetBackBuffer(uint, uint, D3DBACKBUFFER_TYPE, IDirect3DSurface9*);
    HRESULT GetRasterStatus(uint, D3DRASTER_STATUS*);
    HRESULT SetDialogBoxMode(BOOL);
    void SetGammaRamp(uint, uint, const(D3DGAMMARAMP)*);
    void GetGammaRamp(uint, D3DGAMMARAMP*);
    HRESULT CreateTexture(uint, uint, uint, uint, D3DFORMAT, D3DPOOL, IDirect3DTexture9*, HANDLE*);
    HRESULT CreateVolumeTexture(uint, uint, uint, uint, uint, D3DFORMAT, D3DPOOL, IDirect3DVolumeTexture9*, HANDLE*);
    HRESULT CreateCubeTexture(uint, uint, uint, D3DFORMAT, D3DPOOL, IDirect3DCubeTexture9*, HANDLE*);
    HRESULT CreateVertexBuffer(uint, uint, uint, D3DPOOL, IDirect3DVertexBuffer9*, HANDLE*);
    HRESULT CreateIndexBuffer(uint, uint, D3DFORMAT, D3DPOOL, IDirect3DIndexBuffer9*, HANDLE*);
    HRESULT CreateRenderTarget(uint, uint, D3DFORMAT, D3DMULTISAMPLE_TYPE, uint, BOOL, IDirect3DSurface9*, HANDLE*);
    HRESULT CreateDepthStencilSurface(uint, uint, D3DFORMAT, D3DMULTISAMPLE_TYPE, uint, BOOL, IDirect3DSurface9*, HANDLE*);
    HRESULT UpdateSurface(IDirect3DSurface9, const(RECT)*, IDirect3DSurface9, const(POINT)*);
    HRESULT UpdateTexture(IDirect3DBaseTexture9, IDirect3DBaseTexture9);
    HRESULT GetRenderTargetData(IDirect3DSurface9, IDirect3DSurface9);
    HRESULT GetFrontBufferData(uint, IDirect3DSurface9);
    HRESULT StretchRect(IDirect3DSurface9, const(RECT)*, IDirect3DSurface9, const(RECT)*, D3DTEXTUREFILTERTYPE);
    HRESULT ColorFill(IDirect3DSurface9, const(RECT)*, uint);
    HRESULT CreateOffscreenPlainSurface(uint, uint, D3DFORMAT, D3DPOOL, IDirect3DSurface9*, HANDLE*);
    HRESULT SetRenderTarget(uint, IDirect3DSurface9);
    HRESULT GetRenderTarget(uint, IDirect3DSurface9*);
    HRESULT SetDepthStencilSurface(IDirect3DSurface9);
    HRESULT GetDepthStencilSurface(IDirect3DSurface9*);
    HRESULT BeginScene();
    HRESULT EndScene();
    HRESULT Clear(uint, const(D3DRECT)*, uint, uint, float, uint);
    HRESULT SetTransform(D3DTRANSFORMSTATETYPE, const(D3DMATRIX)*);
    HRESULT GetTransform(D3DTRANSFORMSTATETYPE, D3DMATRIX*);
    HRESULT MultiplyTransform(D3DTRANSFORMSTATETYPE, const(D3DMATRIX)*);
    HRESULT SetViewport(const(D3DVIEWPORT9)*);
    HRESULT GetViewport(D3DVIEWPORT9*);
    HRESULT SetMaterial(const(D3DMATERIAL9)*);
    HRESULT GetMaterial(D3DMATERIAL9*);
    HRESULT SetLight(uint, const(D3DLIGHT9)*);
    HRESULT GetLight(uint, D3DLIGHT9*);
    HRESULT LightEnable(uint, BOOL);
    HRESULT GetLightEnable(uint, BOOL*);
    HRESULT SetClipPlane(uint, const(float)*);
    HRESULT GetClipPlane(uint, float*);
    HRESULT SetRenderState(D3DRENDERSTATETYPE, uint);
    HRESULT GetRenderState(D3DRENDERSTATETYPE, uint*);
    HRESULT CreateStateBlock(D3DSTATEBLOCKTYPE, IDirect3DStateBlock9*);
    HRESULT BeginStateBlock();
    HRESULT EndStateBlock(IDirect3DStateBlock9*);
    HRESULT SetClipStatus(const(D3DCLIPSTATUS9)*);
    HRESULT GetClipStatus(D3DCLIPSTATUS9*);
    HRESULT GetTexture(uint, IDirect3DBaseTexture9*);
    HRESULT SetTexture(uint, IDirect3DBaseTexture9);
    HRESULT GetTextureStageState(uint, D3DTEXTURESTAGESTATETYPE, uint*);
    HRESULT SetTextureStageState(uint, D3DTEXTURESTAGESTATETYPE, uint);
    HRESULT GetSamplerState(uint, D3DSAMPLERSTATETYPE, uint*);
    HRESULT SetSamplerState(uint, D3DSAMPLERSTATETYPE, uint);
    HRESULT ValidateDevice(uint*);
    HRESULT SetPaletteEntries(uint, const(PALETTEENTRY)*);
    HRESULT GetPaletteEntries(uint, PALETTEENTRY*);
    HRESULT SetCurrentTexturePalette(uint);
    HRESULT GetCurrentTexturePalette(uint*);
    HRESULT SetScissorRect(const(RECT)*);
    HRESULT GetScissorRect(RECT*);
    HRESULT SetSoftwareVertexProcessing(BOOL);
    BOOL GetSoftwareVertexProcessing();
    HRESULT SetNPatchMode(float);
    float GetNPatchMode();
    HRESULT DrawPrimitive(D3DPRIMITIVETYPE, uint, uint);
    HRESULT DrawIndexedPrimitive(D3DPRIMITIVETYPE, int, uint, uint, uint, uint);
    HRESULT DrawPrimitiveUP(D3DPRIMITIVETYPE, uint, const(void)*, uint);
    HRESULT DrawIndexedPrimitiveUP(D3DPRIMITIVETYPE, uint, uint, uint, const(void)*, D3DFORMAT, const(void)*, uint);
    HRESULT ProcessVertices(uint, uint, uint, IDirect3DVertexBuffer9, IDirect3DVertexDeclaration9, uint);
    HRESULT CreateVertexDeclaration(const(D3DVERTEXELEMENT9)*, IDirect3DVertexDeclaration9*);
    HRESULT SetVertexDeclaration(IDirect3DVertexDeclaration9);
    HRESULT GetVertexDeclaration(IDirect3DVertexDeclaration9*);
    HRESULT SetFVF(uint);
    HRESULT GetFVF(uint*);
    HRESULT CreateVertexShader(const(uint)*, IDirect3DVertexShader9*);
    HRESULT SetVertexShader(IDirect3DVertexShader9);
    HRESULT GetVertexShader(IDirect3DVertexShader9*);
    HRESULT SetVertexShaderConstantF(uint, const(float)*, uint);
    HRESULT GetVertexShaderConstantF(uint, float*, uint);
    HRESULT SetVertexShaderConstantI(uint, const(int)*, uint);
    HRESULT GetVertexShaderConstantI(uint, int*, uint);
    HRESULT SetVertexShaderConstantB(uint, const(BOOL)*, uint);
    HRESULT GetVertexShaderConstantB(uint, BOOL*, uint);
    HRESULT SetStreamSource(uint, IDirect3DVertexBuffer9, uint, uint);
    HRESULT GetStreamSource(uint, IDirect3DVertexBuffer9*, uint*, uint*);
    HRESULT SetStreamSourceFreq(uint, uint);
    HRESULT GetStreamSourceFreq(uint, uint*);
    HRESULT SetIndices(IDirect3DIndexBuffer9);
    HRESULT GetIndices(IDirect3DIndexBuffer9*);
    HRESULT CreatePixelShader(const(uint)*, IDirect3DPixelShader9*);
    HRESULT SetPixelShader(IDirect3DPixelShader9);
    HRESULT GetPixelShader(IDirect3DPixelShader9*);
    HRESULT SetPixelShaderConstantF(uint, const(float)*, uint);
    HRESULT GetPixelShaderConstantF(uint, float*, uint);
    HRESULT SetPixelShaderConstantI(uint, const(int)*, uint);
    HRESULT GetPixelShaderConstantI(uint, int*, uint);
    HRESULT SetPixelShaderConstantB(uint, const(BOOL)*, uint);
    HRESULT GetPixelShaderConstantB(uint, BOOL*, uint);
    HRESULT DrawRectPatch(uint, const(float)*, const(D3DRECTPATCH_INFO)*);
    HRESULT DrawTriPatch(uint, const(float)*, const(D3DTRIPATCH_INFO)*);
    HRESULT DeletePatch(uint);
    HRESULT CreateQuery(D3DQUERYTYPE, IDirect3DQuery9*);
}
enum IID_IDirect3DStateBlock9 = GUID(0xb07c4fe5, 0x310d, 0x4ba8, [0xa2, 0x3c, 0x4f, 0xf, 0x20, 0x6f, 0x21, 0x8b]);
interface IDirect3DStateBlock9 : IUnknown
{
    HRESULT GetDevice(IDirect3DDevice9*);
    HRESULT Capture();
    HRESULT Apply();
}
enum IID_IDirect3DSwapChain9 = GUID(0x794950f2, 0xadfc, 0x458a, [0x90, 0x5e, 0x10, 0xa1, 0xb, 0xb, 0x50, 0x3b]);
interface IDirect3DSwapChain9 : IUnknown
{
    HRESULT Present(const(RECT)*, const(RECT)*, HWND, const(RGNDATA)*, uint);
    HRESULT GetFrontBufferData(IDirect3DSurface9);
    HRESULT GetBackBuffer(uint, D3DBACKBUFFER_TYPE, IDirect3DSurface9*);
    HRESULT GetRasterStatus(D3DRASTER_STATUS*);
    HRESULT GetDisplayMode(D3DDISPLAYMODE*);
    HRESULT GetDevice(IDirect3DDevice9*);
    HRESULT GetPresentParameters(D3DPRESENT_PARAMETERS*);
}
enum IID_IDirect3DResource9 = GUID(0x5eec05d, 0x8f7d, 0x4362, [0xb9, 0x99, 0xd1, 0xba, 0xf3, 0x57, 0xc7, 0x4]);
interface IDirect3DResource9 : IUnknown
{
    HRESULT GetDevice(IDirect3DDevice9*);
    HRESULT SetPrivateData(const(GUID)*, const(void)*, uint, uint);
    HRESULT GetPrivateData(const(GUID)*, void*, uint*);
    HRESULT FreePrivateData(const(GUID)*);
    uint SetPriority(uint);
    uint GetPriority();
    void PreLoad();
    D3DRESOURCETYPE GetType();
}
enum IID_IDirect3DVertexDeclaration9 = GUID(0xdd13c59c, 0x36fa, 0x4098, [0xa8, 0xfb, 0xc7, 0xed, 0x39, 0xdc, 0x85, 0x46]);
interface IDirect3DVertexDeclaration9 : IUnknown
{
    HRESULT GetDevice(IDirect3DDevice9*);
    HRESULT GetDeclaration(D3DVERTEXELEMENT9*, uint*);
}
enum IID_IDirect3DVertexShader9 = GUID(0xefc5557e, 0x6265, 0x4613, [0x8a, 0x94, 0x43, 0x85, 0x78, 0x89, 0xeb, 0x36]);
interface IDirect3DVertexShader9 : IUnknown
{
    HRESULT GetDevice(IDirect3DDevice9*);
    HRESULT GetFunction(void*, uint*);
}
enum IID_IDirect3DPixelShader9 = GUID(0x6d3bdbdc, 0x5b02, 0x4415, [0xb8, 0x52, 0xce, 0x5e, 0x8b, 0xcc, 0xb2, 0x89]);
interface IDirect3DPixelShader9 : IUnknown
{
    HRESULT GetDevice(IDirect3DDevice9*);
    HRESULT GetFunction(void*, uint*);
}
enum IID_IDirect3DBaseTexture9 = GUID(0x580ca87e, 0x1d3c, 0x4d54, [0x99, 0x1d, 0xb7, 0xd3, 0xe3, 0xc2, 0x98, 0xce]);
interface IDirect3DBaseTexture9 : IDirect3DResource9
{
    uint SetLOD(uint);
    uint GetLOD();
    uint GetLevelCount();
    HRESULT SetAutoGenFilterType(D3DTEXTUREFILTERTYPE);
    D3DTEXTUREFILTERTYPE GetAutoGenFilterType();
    void GenerateMipSubLevels();
}
enum IID_IDirect3DTexture9 = GUID(0x85c31227, 0x3de5, 0x4f00, [0x9b, 0x3a, 0xf1, 0x1a, 0xc3, 0x8c, 0x18, 0xb5]);
interface IDirect3DTexture9 : IDirect3DBaseTexture9
{
    HRESULT GetLevelDesc(uint, D3DSURFACE_DESC*);
    HRESULT GetSurfaceLevel(uint, IDirect3DSurface9*);
    HRESULT LockRect(uint, D3DLOCKED_RECT*, const(RECT)*, uint);
    HRESULT UnlockRect(uint);
    HRESULT AddDirtyRect(const(RECT)*);
}
enum IID_IDirect3DVolumeTexture9 = GUID(0x2518526c, 0xe789, 0x4111, [0xa7, 0xb9, 0x47, 0xef, 0x32, 0x8d, 0x13, 0xe6]);
interface IDirect3DVolumeTexture9 : IDirect3DBaseTexture9
{
    HRESULT GetLevelDesc(uint, D3DVOLUME_DESC*);
    HRESULT GetVolumeLevel(uint, IDirect3DVolume9*);
    HRESULT LockBox(uint, D3DLOCKED_BOX*, const(D3DBOX)*, uint);
    HRESULT UnlockBox(uint);
    HRESULT AddDirtyBox(const(D3DBOX)*);
}
enum IID_IDirect3DCubeTexture9 = GUID(0xfff32f81, 0xd953, 0x473a, [0x92, 0x23, 0x93, 0xd6, 0x52, 0xab, 0xa9, 0x3f]);
interface IDirect3DCubeTexture9 : IDirect3DBaseTexture9
{
    HRESULT GetLevelDesc(uint, D3DSURFACE_DESC*);
    HRESULT GetCubeMapSurface(D3DCUBEMAP_FACES, uint, IDirect3DSurface9*);
    HRESULT LockRect(D3DCUBEMAP_FACES, uint, D3DLOCKED_RECT*, const(RECT)*, uint);
    HRESULT UnlockRect(D3DCUBEMAP_FACES, uint);
    HRESULT AddDirtyRect(D3DCUBEMAP_FACES, const(RECT)*);
}
enum IID_IDirect3DVertexBuffer9 = GUID(0xb64bb1b5, 0xfd70, 0x4df6, [0xbf, 0x91, 0x19, 0xd0, 0xa1, 0x24, 0x55, 0xe3]);
interface IDirect3DVertexBuffer9 : IDirect3DResource9
{
    HRESULT Lock(uint, uint, void**, uint);
    HRESULT Unlock();
    HRESULT GetDesc(D3DVERTEXBUFFER_DESC*);
}
enum IID_IDirect3DIndexBuffer9 = GUID(0x7c9dd65e, 0xd3f7, 0x4529, [0xac, 0xee, 0x78, 0x58, 0x30, 0xac, 0xde, 0x35]);
interface IDirect3DIndexBuffer9 : IDirect3DResource9
{
    HRESULT Lock(uint, uint, void**, uint);
    HRESULT Unlock();
    HRESULT GetDesc(D3DINDEXBUFFER_DESC*);
}
enum IID_IDirect3DSurface9 = GUID(0xcfbaf3a, 0x9ff6, 0x429a, [0x99, 0xb3, 0xa2, 0x79, 0x6a, 0xf8, 0xb8, 0x9b]);
interface IDirect3DSurface9 : IDirect3DResource9
{
    HRESULT GetContainer(const(GUID)*, void**);
    HRESULT GetDesc(D3DSURFACE_DESC*);
    HRESULT LockRect(D3DLOCKED_RECT*, const(RECT)*, uint);
    HRESULT UnlockRect();
    HRESULT GetDC(HDC*);
    HRESULT ReleaseDC(HDC);
}
enum IID_IDirect3DVolume9 = GUID(0x24f416e6, 0x1f67, 0x4aa7, [0xb8, 0x8e, 0xd3, 0x3f, 0x6f, 0x31, 0x28, 0xa1]);
interface IDirect3DVolume9 : IUnknown
{
    HRESULT GetDevice(IDirect3DDevice9*);
    HRESULT SetPrivateData(const(GUID)*, const(void)*, uint, uint);
    HRESULT GetPrivateData(const(GUID)*, void*, uint*);
    HRESULT FreePrivateData(const(GUID)*);
    HRESULT GetContainer(const(GUID)*, void**);
    HRESULT GetDesc(D3DVOLUME_DESC*);
    HRESULT LockBox(D3DLOCKED_BOX*, const(D3DBOX)*, uint);
    HRESULT UnlockBox();
}
enum IID_IDirect3DQuery9 = GUID(0xd9771460, 0xa695, 0x4f26, [0xbb, 0xd3, 0x27, 0xb8, 0x40, 0xb5, 0x41, 0xcc]);
interface IDirect3DQuery9 : IUnknown
{
    HRESULT GetDevice(IDirect3DDevice9*);
    D3DQUERYTYPE GetType();
    uint GetDataSize();
    HRESULT Issue(uint);
    HRESULT GetData(void*, uint, uint);
}
enum IID_IDirect3D9Ex = GUID(0x2177241, 0x69fc, 0x400c, [0x8f, 0xf1, 0x93, 0xa4, 0x4d, 0xf6, 0x86, 0x1d]);
interface IDirect3D9Ex : IDirect3D9
{
    uint GetAdapterModeCountEx(uint, const(D3DDISPLAYMODEFILTER)*);
    HRESULT EnumAdapterModesEx(uint, const(D3DDISPLAYMODEFILTER)*, uint, D3DDISPLAYMODEEX*);
    HRESULT GetAdapterDisplayModeEx(uint, D3DDISPLAYMODEEX*, D3DDISPLAYROTATION*);
    HRESULT CreateDeviceEx(uint, D3DDEVTYPE, HWND, uint, D3DPRESENT_PARAMETERS*, D3DDISPLAYMODEEX*, IDirect3DDevice9Ex*);
    HRESULT GetAdapterLUID(uint, LUID*);
}
enum IID_IDirect3DDevice9Ex = GUID(0xb18b10ce, 0x2649, 0x405a, [0x87, 0xf, 0x95, 0xf7, 0x77, 0xd4, 0x31, 0x3a]);
interface IDirect3DDevice9Ex : IDirect3DDevice9
{
    HRESULT SetConvolutionMonoKernel(uint, uint, float*, float*);
    HRESULT ComposeRects(IDirect3DSurface9, IDirect3DSurface9, IDirect3DVertexBuffer9, uint, IDirect3DVertexBuffer9, D3DCOMPOSERECTSOP, int, int);
    HRESULT PresentEx(const(RECT)*, const(RECT)*, HWND, const(RGNDATA)*, uint);
    HRESULT GetGPUThreadPriority(int*);
    HRESULT SetGPUThreadPriority(int);
    HRESULT WaitForVBlank(uint);
    HRESULT CheckResourceResidency(IDirect3DResource9*, uint);
    HRESULT SetMaximumFrameLatency(uint);
    HRESULT GetMaximumFrameLatency(uint*);
    HRESULT CheckDeviceState(HWND);
    HRESULT CreateRenderTargetEx(uint, uint, D3DFORMAT, D3DMULTISAMPLE_TYPE, uint, BOOL, IDirect3DSurface9*, HANDLE*, uint);
    HRESULT CreateOffscreenPlainSurfaceEx(uint, uint, D3DFORMAT, D3DPOOL, IDirect3DSurface9*, HANDLE*, uint);
    HRESULT CreateDepthStencilSurfaceEx(uint, uint, D3DFORMAT, D3DMULTISAMPLE_TYPE, uint, BOOL, IDirect3DSurface9*, HANDLE*, uint);
    HRESULT ResetEx(D3DPRESENT_PARAMETERS*, D3DDISPLAYMODEEX*);
    HRESULT GetDisplayModeEx(uint, D3DDISPLAYMODEEX*, D3DDISPLAYROTATION*);
}
enum IID_IDirect3DSwapChain9Ex = GUID(0x91886caf, 0x1c3d, 0x4d2e, [0xa0, 0xab, 0x3e, 0x4c, 0x7d, 0x8d, 0x33, 0x3]);
interface IDirect3DSwapChain9Ex : IDirect3DSwapChain9
{
    HRESULT GetLastPresentCount(uint*);
    HRESULT GetPresentStats(D3DPRESENTSTATS*);
    HRESULT GetDisplayModeEx(D3DDISPLAYMODEEX*, D3DDISPLAYROTATION*);
}
