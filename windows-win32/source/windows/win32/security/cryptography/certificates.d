module windows.win32.security.cryptography.certificates;

import windows.win32.guid : GUID;
import windows.win32.foundation : BOOL, BSTR, HRESULT, HWND, NTSTATUS, PWSTR, UNICODE_STRING, VARIANT_BOOL;
import windows.win32.security.authentication.identity : LSA_TOKEN_INFORMATION_TYPE, SecPkgContext_IssuerListInfoEx;
import windows.win32.security.cryptography : CERT_CHAIN_CONTEXT, CERT_CONTEXT, CERT_EXTENSIONS, CERT_RDN_ATTR_VALUE_TYPE, CERT_SELECT_CRITERIA, CERT_USAGE_MATCH, CRYPT_ATTRIBUTES, CRYPT_INTEGER_BLOB, HCERTSTORE;
import windows.win32.system.com : IDispatch, IUnknown;
import windows.win32.system.variant : VARIANT;

version (Windows):
extern (Windows):

HRESULT CertSrvIsServerOnlineW(const(wchar)*, BOOL*);
HRESULT CertSrvBackupGetDynamicFileListW(void*, PWSTR*, uint*);
HRESULT CertSrvBackupPrepareW(const(wchar)*, uint, CSBACKUP_TYPE, void**);
HRESULT CertSrvBackupGetDatabaseNamesW(void*, PWSTR*, uint*);
HRESULT CertSrvBackupOpenFileW(void*, const(wchar)*, uint, long*);
HRESULT CertSrvBackupRead(void*, void*, uint, uint*);
HRESULT CertSrvBackupClose(void*);
HRESULT CertSrvBackupGetBackupLogsW(void*, PWSTR*, uint*);
HRESULT CertSrvBackupTruncateLogs(void*);
HRESULT CertSrvBackupEnd(void*);
void CertSrvBackupFree(void*);
HRESULT CertSrvRestoreGetDatabaseLocationsW(void*, PWSTR*, uint*);
HRESULT CertSrvRestorePrepareW(const(wchar)*, uint, void**);
HRESULT CertSrvRestoreRegisterW(void*, const(wchar)*, const(wchar)*, CSEDB_RSTMAPW*, int, const(wchar)*, uint, uint);
HRESULT CertSrvRestoreRegisterThroughFile(void*, const(wchar)*, const(wchar)*, CSEDB_RSTMAPW*, int, const(wchar)*, uint, uint);
HRESULT CertSrvRestoreRegisterComplete(void*, HRESULT);
HRESULT CertSrvRestoreEnd(void*);
HRESULT CertSrvServerControlW(const(wchar)*, uint, uint*, ubyte**);
NTSTATUS PstGetTrustAnchors(UNICODE_STRING*, uint, CERT_SELECT_CRITERIA*, SecPkgContext_IssuerListInfoEx**);
NTSTATUS PstGetTrustAnchorsEx(UNICODE_STRING*, uint, CERT_SELECT_CRITERIA*, const(CERT_CONTEXT)*, SecPkgContext_IssuerListInfoEx**);
NTSTATUS PstGetCertificateChain(const(CERT_CONTEXT)*, SecPkgContext_IssuerListInfoEx*, CERT_CHAIN_CONTEXT**);
NTSTATUS PstGetCertificates(UNICODE_STRING*, uint, CERT_SELECT_CRITERIA*, BOOL, uint*, CERT_CHAIN_CONTEXT***);
NTSTATUS PstAcquirePrivateKey(const(CERT_CONTEXT)*);
NTSTATUS PstValidate(UNICODE_STRING*, BOOL, CERT_USAGE_MATCH*, HCERTSTORE*, const(CERT_CONTEXT)*, GUID*);
NTSTATUS PstMapCertificate(const(CERT_CONTEXT)*, LSA_TOKEN_INFORMATION_TYPE*, void**);
NTSTATUS PstGetUserNameForCertificate(const(CERT_CONTEXT)*, UNICODE_STRING*);
enum wszREGKEYNOSYSTEMCERTSVCPATH = "CurrentControlSet\\Services\\CertSvc";
enum wszREGKEYCERTSVCPATH = "SYSTEM\\CurrentControlSet\\Services\\CertSvc";
enum CA_DISP_INCOMPLETE = 0x00000000;
enum CA_DISP_ERROR = 0x00000001;
enum CA_DISP_REVOKED = 0x00000002;
enum CA_DISP_VALID = 0x00000003;
enum CA_DISP_INVALID = 0x00000004;
enum CA_DISP_UNDER_SUBMISSION = 0x00000005;
enum KRA_DISP_EXPIRED = 0x00000000;
enum KRA_DISP_NOTFOUND = 0x00000001;
enum KRA_DISP_REVOKED = 0x00000002;
enum KRA_DISP_VALID = 0x00000003;
enum KRA_DISP_INVALID = 0x00000004;
enum KRA_DISP_UNTRUSTED = 0x00000005;
enum KRA_DISP_NOTLOADED = 0x00000006;
enum CA_ACCESS_MASKROLES = 0x000000ff;
enum CA_CRL_BASE = 0x00000001;
enum CA_CRL_DELTA = 0x00000002;
enum CA_CRL_REPUBLISH = 0x00000010;
enum ICF_ALLOWFOREIGN = 0x00010000;
enum ICF_EXISTINGROW = 0x00020000;
enum IKF_OVERWRITE = 0x00010000;
enum wszOCSPCAPROP_CACERTIFICATE = "CACertificate";
enum wszOCSPCAPROP_HASHALGORITHMID = "HashAlgorithmId";
enum wszOCSPCAPROP_SIGNINGFLAGS = "SigningFlags";
enum wszOCSPCAPROP_REMINDERDURATION = "ReminderDuration";
enum wszOCSPCAPROP_SIGNINGCERTIFICATE = "SigningCertificate";
enum wszOCSPCAPROP_CSPNAME = "CSPName";
enum wszOCSPCAPROP_KEYSPEC = "KeySpec";
enum wszOCSPCAPROP_ERRORCODE = "ErrorCode";
enum wszOCSPCAPROP_PROVIDERCLSID = "ProviderCLSID";
enum wszOCSPCAPROP_PROVIDERPROPERTIES = "Provider";
enum wszOCSPCAPROP_LOCALREVOCATIONINFORMATION = "LocalRevocationInformation";
enum wszOCSPCAPROP_SIGNINGCERTIFICATETEMPLATE = "SigningCertificateTemplate";
enum wszOCSPCAPROP_CACONFIG = "CAConfig";
enum wszOCSPPROP_LOGLEVEL = "LogLevel";
enum wszOCSPPROP_DEBUG = "Debug";
enum wszOCSPPROP_AUDITFILTER = "AuditFilter";
enum wszOCSPPROP_ARRAYCONTROLLER = "ArrayController";
enum wszOCSPPROP_ARRAYMEMBERS = "ArrayMembers";
enum wszOCSPPROP_ENROLLPOLLINTERVAL = "EnrollPollInterval";
enum wszOCSPISAPIPROP_VIRTUALROOTNAME = "VirtualRootName";
enum wszOCSPISAPIPROP_NUMOFTHREADS = "NumOfThreads";
enum wszOCSPISAPIPROP_NUMOFBACKENDCONNECTIONS = "NumOfBackendConnections";
enum wszOCSPISAPIPROP_REFRESHRATE = "RefreshRate";
enum wszOCSPISAPIPROP_MAXNUMOFCACHEENTRIES = "MaxNumOfCacheEntries";
enum wszOCSPISAPIPROP_MAXAGE = "MaxAge";
enum wszOCSPISAPIPROP_DEBUG = "ISAPIDebug";
enum wszOCSPCOMMONPROP_REQFLAGS = "RequestFlags";
enum wszOCSPCOMMONPROP_MAXINCOMINGMESSAGESIZE = "MaxIncomingMessageSize";
enum wszOCSPCOMMONPROP_MAXNUMOFREQUESTENTRIES = "MaxNumOfRequestEntries";
enum wszOCSPREVPROP_CRLURLTIMEOUT = "CrlUrlTimeOut";
enum wszOCSPREVPROP_BASECRLURLS = "BaseCrlUrls";
enum wszOCSPREVPROP_SERIALNUMBERSDIRS = "IssuedSerialNumbersDirectories";
enum wszOCSPREVPROP_BASECRL = "BaseCrl";
enum wszOCSPREVPROP_DELTACRLURLS = "DeltaCrlUrls";
enum wszOCSPREVPROP_DELTACRL = "DeltaCrl";
enum wszOCSPREVPROP_REFRESHTIMEOUT = "RefreshTimeOut";
enum wszOCSPREVPROP_ERRORCODE = "RevocationErrorCode";
enum szBACKUPANNOTATION = "Cert Server Backup Interface";
enum szRESTOREANNOTATION = "Cert Server Restore Interface";
enum CSBACKUP_TYPE_MASK = 0x00000003;
enum CSRESTORE_TYPE_FULL = 0x00000001;
enum CSRESTORE_TYPE_ONLINE = 0x00000002;
enum CSRESTORE_TYPE_CATCHUP = 0x00000004;
enum CSRESTORE_TYPE_MASK = 0x00000005;
enum CSBACKUP_DISABLE_INCREMENTAL = 0xffffffff;
enum CSBFT_DIRECTORY = 0x00000080;
enum CSBFT_DATABASE_DIRECTORY = 0x00000040;
enum CSBFT_LOG_DIRECTORY = 0x00000020;
enum CSCONTROL_SHUTDOWN = 0x0000000000000001;
enum CSCONTROL_SUSPEND = 0x0000000000000002;
enum CSCONTROL_RESTART = 0x0000000000000003;
enum wszCONFIG_COMMONNAME = "CommonName";
enum wszCONFIG_ORGUNIT = "OrgUnit";
enum wszCONFIG_ORGANIZATION = "Organization";
enum wszCONFIG_LOCALITY = "Locality";
enum wszCONFIG_STATE = "State";
enum wszCONFIG_COUNTRY = "Country";
enum wszCONFIG_CONFIG = "Config";
enum wszCONFIG_EXCHANGECERTIFICATE = "ExchangeCertificate";
enum wszCONFIG_SIGNATURECERTIFICATE = "SignatureCertificate";
enum wszCONFIG_DESCRIPTION = "Description";
enum wszCONFIG_COMMENT = "Comment";
enum wszCONFIG_SERVER = "Server";
enum wszCONFIG_AUTHORITY = "Authority";
enum wszCONFIG_SANITIZEDNAME = "SanitizedName";
enum wszCONFIG_SHORTNAME = "ShortName";
enum wszCONFIG_SANITIZEDSHORTNAME = "SanitizedShortName";
enum wszCONFIG_FLAGS = "Flags";
enum wszCONFIG_WEBENROLLMENTSERVERS = "WebEnrollmentServers";
enum CAIF_DSENTRY = 0x00000001;
enum CAIF_SHAREDFOLDERENTRY = 0x00000002;
enum CAIF_REGISTRY = 0x00000004;
enum CAIF_LOCAL = 0x00000008;
enum CAIF_REGISTRYPARENT = 0x00000010;
enum CR_IN_ENCODEANY = 0x000000ff;
enum CR_IN_ENCODEMASK = 0x000000ff;
enum CR_IN_FORMATANY = 0x00000000;
enum CR_IN_PKCS10 = 0x00000100;
enum CR_IN_KEYGEN = 0x00000200;
enum CR_IN_PKCS7 = 0x00000300;
enum CR_IN_CMC = 0x00000400;
enum CR_IN_CHALLENGERESPONSE = 0x00000500;
enum CR_IN_SIGNEDCERTIFICATETIMESTAMPLIST = 0x00000600;
enum CR_IN_FORMATMASK = 0x0000ff00;
enum CR_IN_SCEP = 0x00010000;
enum CR_IN_RPC = 0x00020000;
enum CR_IN_HTTP = 0x00030000;
enum CR_IN_FULLRESPONSE = 0x00040000;
enum CR_IN_CRLS = 0x00080000;
enum CR_IN_MACHINE = 0x00100000;
enum CR_IN_ROBO = 0x00200000;
enum CR_IN_CLIENTIDNONE = 0x00400000;
enum CR_IN_CONNECTONLY = 0x00800000;
enum CR_IN_RETURNCHALLENGE = 0x01000000;
enum CR_IN_SCEPPOST = 0x02000000;
enum CR_IN_CERTIFICATETRANSPARENCY = 0x04000000;
enum CR_DISP_REVOKED = 0x00000006;
enum CR_OUT_BASE64REQUESTHEADER = 0x00000003;
enum CR_OUT_HEX = 0x00000004;
enum CR_OUT_HEXASCII = 0x00000005;
enum CR_OUT_BASE64X509CRLHEADER = 0x00000009;
enum CR_OUT_HEXADDR = 0x0000000a;
enum CR_OUT_HEXASCIIADDR = 0x0000000b;
enum CR_OUT_HEXRAW = 0x0000000c;
enum CR_OUT_ENCODEMASK = 0x000000ff;
enum CR_OUT_CHAIN = 0x00000100;
enum CR_OUT_CRLS = 0x00000200;
enum CR_OUT_NOCRLF = 0x40000000;
enum CR_OUT_NOCR = 0x80000000;
enum CR_GEMT_DEFAULT = 0x00000000;
enum CR_GEMT_HRESULT_STRING = 0x00000001;
enum CR_GEMT_HTTP_ERROR = 0x00000002;
enum CR_PROP_NONE = 0x00000000;
enum CR_PROP_FILEVERSION = 0x00000001;
enum CR_PROP_PRODUCTVERSION = 0x00000002;
enum CR_PROP_EXITCOUNT = 0x00000003;
enum CR_PROP_EXITDESCRIPTION = 0x00000004;
enum CR_PROP_POLICYDESCRIPTION = 0x00000005;
enum CR_PROP_CANAME = 0x00000006;
enum CR_PROP_SANITIZEDCANAME = 0x00000007;
enum CR_PROP_SHAREDFOLDER = 0x00000008;
enum CR_PROP_PARENTCA = 0x00000009;
enum CR_PROP_CATYPE = 0x0000000a;
enum CR_PROP_CASIGCERTCOUNT = 0x0000000b;
enum CR_PROP_CASIGCERT = 0x0000000c;
enum CR_PROP_CASIGCERTCHAIN = 0x0000000d;
enum CR_PROP_CAXCHGCERTCOUNT = 0x0000000e;
enum CR_PROP_CAXCHGCERT = 0x0000000f;
enum CR_PROP_CAXCHGCERTCHAIN = 0x00000010;
enum CR_PROP_BASECRL = 0x00000011;
enum CR_PROP_DELTACRL = 0x00000012;
enum CR_PROP_CACERTSTATE = 0x00000013;
enum CR_PROP_CRLSTATE = 0x00000014;
enum CR_PROP_CAPROPIDMAX = 0x00000015;
enum CR_PROP_DNSNAME = 0x00000016;
enum CR_PROP_ROLESEPARATIONENABLED = 0x00000017;
enum CR_PROP_KRACERTUSEDCOUNT = 0x00000018;
enum CR_PROP_KRACERTCOUNT = 0x00000019;
enum CR_PROP_KRACERT = 0x0000001a;
enum CR_PROP_KRACERTSTATE = 0x0000001b;
enum CR_PROP_ADVANCEDSERVER = 0x0000001c;
enum CR_PROP_TEMPLATES = 0x0000001d;
enum CR_PROP_BASECRLPUBLISHSTATUS = 0x0000001e;
enum CR_PROP_DELTACRLPUBLISHSTATUS = 0x0000001f;
enum CR_PROP_CASIGCERTCRLCHAIN = 0x00000020;
enum CR_PROP_CAXCHGCERTCRLCHAIN = 0x00000021;
enum CR_PROP_CACERTSTATUSCODE = 0x00000022;
enum CR_PROP_CAFORWARDCROSSCERT = 0x00000023;
enum CR_PROP_CABACKWARDCROSSCERT = 0x00000024;
enum CR_PROP_CAFORWARDCROSSCERTSTATE = 0x00000025;
enum CR_PROP_CABACKWARDCROSSCERTSTATE = 0x00000026;
enum CR_PROP_CACERTVERSION = 0x00000027;
enum CR_PROP_SANITIZEDCASHORTNAME = 0x00000028;
enum CR_PROP_CERTCDPURLS = 0x00000029;
enum CR_PROP_CERTAIAURLS = 0x0000002a;
enum CR_PROP_CERTAIAOCSPURLS = 0x0000002b;
enum CR_PROP_LOCALENAME = 0x0000002c;
enum CR_PROP_SUBJECTTEMPLATE_OIDS = 0x0000002d;
enum CR_PROP_SCEPSERVERCERTS = 0x000003e8;
enum CR_PROP_SCEPSERVERCAPABILITIES = 0x000003e9;
enum CR_PROP_SCEPSERVERCERTSCHAIN = 0x000003ea;
enum CR_PROP_SCEPMIN = 0x000003e8;
enum CR_PROP_SCEPMAX = 0x000003ea;
enum FR_PROP_CLAIMCHALLENGE = 0x00000016;
enum EAN_NAMEOBJECTID = 0x80000000;
enum EANR_SUPPRESS_IA5CONVERSION = 0x80000000;
enum CERTENROLL_INDEX_BASE = 0x00000000;
enum EXITEVENT_INVALID = 0x00000000;
enum EXITEVENT_STARTUP = 0x00000080;
enum EXITEVENT_CERTIMPORTED = 0x00000200;
enum ENUMEXT_OBJECTID = 0x00000001;
enum CMM_REFRESHONLY = 0x00000001;
enum CMM_READONLY = 0x00000002;
enum DBG_CERTSRV = 0x00000001;
enum wszSERVICE_NAME = "CertSvc";
enum wszREGKEYBASE = "SYSTEM\\CurrentControlSet\\Services\\CertSvc";
enum wszREGKEYCONFIG = "Configuration";
enum wszREGACTIVE = "Active";
enum wszREGDIRECTORY = "ConfigurationDirectory";
enum wszREGDBDIRECTORY = "DBDirectory";
enum wszREGDBLOGDIRECTORY = "DBLogDirectory";
enum wszREGDBSYSDIRECTORY = "DBSystemDirectory";
enum wszREGDBTEMPDIRECTORY = "DBTempDirectory";
enum wszREGDBSESSIONCOUNT = "DBSessionCount";
enum wszREGDBMAXREADSESSIONCOUNT = "DBMaxReadSessionCount";
enum wszREGDBFLAGS = "DBFlags";
enum wszREGDBLASTFULLBACKUP = "DBLastFullBackup";
enum wszREGDBLASTINCREMENTALBACKUP = "DBLastIncrementalBackup";
enum wszREGDBLASTRECOVERY = "DBLastRecovery";
enum wszREGWEBCLIENTCAMACHINE = "WebClientCAMachine";
enum wszREGVERSION = "Version";
enum wszREGWEBCLIENTCANAME = "WebClientCAName";
enum wszREGWEBCLIENTCATYPE = "WebClientCAType";
enum wszREGLDAPFLAGS = "LDAPFlags";
enum wszREGCERTSRVDEBUG = "Debug";
enum DBSESSIONCOUNTDEFAULT = 0x00000064;
enum DBFLAGS_READONLY = 0x00000001;
enum DBFLAGS_CREATEIFNEEDED = 0x00000002;
enum DBFLAGS_CIRCULARLOGGING = 0x00000004;
enum DBFLAGS_LAZYFLUSH = 0x00000008;
enum DBFLAGS_MAXCACHESIZEX100 = 0x00000010;
enum DBFLAGS_CHECKPOINTDEPTH60MB = 0x00000020;
enum DBFLAGS_LOGBUFFERSLARGE = 0x00000040;
enum DBFLAGS_LOGBUFFERSHUGE = 0x00000080;
enum DBFLAGS_LOGFILESIZE16MB = 0x00000100;
enum DBFLAGS_MULTITHREADTRANSACTIONS = 0x00000200;
enum DBFLAGS_DISABLESNAPSHOTBACKUP = 0x00000400;
enum DBFLAGS_ENABLEVOLATILEREQUESTS = 0x00000800;
enum LDAPF_SSLENABLE = 0x00000001;
enum LDAPF_SIGNDISABLE = 0x00000002;
enum CSVER_MAJOR_WIN2K = 0x00000001;
enum CSVER_MINOR_WIN2K = 0x00000001;
enum CSVER_MAJOR_WHISTLER = 0x00000002;
enum CSVER_MINOR_WHISTLER_BETA2 = 0x00000001;
enum CSVER_MINOR_WHISTLER_BETA3 = 0x00000002;
enum CSVER_MAJOR_LONGHORN = 0x00000003;
enum CSVER_MINOR_LONGHORN_BETA1 = 0x00000001;
enum CSVER_MAJOR_WIN7 = 0x00000004;
enum CSVER_MINOR_WIN7 = 0x00000001;
enum CSVER_MAJOR_WIN8 = 0x00000005;
enum CSVER_MINOR_WIN8 = 0x00000001;
enum CSVER_MAJOR_WINBLUE = 0x00000006;
enum CSVER_MINOR_WINBLUE = 0x00000001;
enum CSVER_MAJOR_THRESHOLD = 0x00000007;
enum CSVER_MINOR_THRESHOLD = 0x00000001;
enum CSVER_MAJOR = 0x00000007;
enum CSVER_MINOR = 0x00000001;
enum wszREGKEYRESTOREINPROGRESS = "RestoreInProgress";
enum wszREGKEYDBPARAMETERS = "DBParameters";
enum wszREGCADESCRIPTION = "CADescription";
enum wszREGCACERTHASH = "CACertHash";
enum wszREGCASERIALNUMBER = "CACertSerialNumber";
enum wszREGCAXCHGCERTHASH = "CAXchgCertHash";
enum wszREGKRACERTHASH = "KRACertHash";
enum wszREGKRACERTCOUNT = "KRACertCount";
enum wszREGKRAFLAGS = "KRAFlags";
enum wszREGCATYPE = "CAType";
enum wszREGCERTENROLLCOMPATIBLE = "CertEnrollCompatible";
enum wszREGENFORCEX500NAMELENGTHS = "EnforceX500NameLengths";
enum wszREGCOMMONNAME = "CommonName";
enum wszREGCLOCKSKEWMINUTES = "ClockSkewMinutes";
enum wszREGCRLNEXTPUBLISH = "CRLNextPublish";
enum wszREGCRLPERIODSTRING = "CRLPeriod";
enum wszREGCRLPERIODCOUNT = "CRLPeriodUnits";
enum wszREGCRLOVERLAPPERIODSTRING = "CRLOverlapPeriod";
enum wszREGCRLOVERLAPPERIODCOUNT = "CRLOverlapUnits";
enum wszREGCRLDELTANEXTPUBLISH = "CRLDeltaNextPublish";
enum wszREGCRLDELTAPERIODSTRING = "CRLDeltaPeriod";
enum wszREGCRLDELTAPERIODCOUNT = "CRLDeltaPeriodUnits";
enum wszREGCRLDELTAOVERLAPPERIODSTRING = "CRLDeltaOverlapPeriod";
enum wszREGCRLDELTAOVERLAPPERIODCOUNT = "CRLDeltaOverlapUnits";
enum wszREGCRLPUBLICATIONURLS = "CRLPublicationURLs";
enum wszREGCACERTPUBLICATIONURLS = "CACertPublicationURLs";
enum wszREGCAXCHGVALIDITYPERIODSTRING = "CAXchgValidityPeriod";
enum wszREGCAXCHGVALIDITYPERIODCOUNT = "CAXchgValidityPeriodUnits";
enum wszREGCAXCHGOVERLAPPERIODSTRING = "CAXchgOverlapPeriod";
enum wszREGCAXCHGOVERLAPPERIODCOUNT = "CAXchgOverlapPeriodUnits";
enum wszREGCRLPATH_OLD = "CRLPath";
enum wszREGCRLEDITFLAGS = "CRLEditFlags";
enum wszREGCRLFLAGS = "CRLFlags";
enum wszREGCRLATTEMPTREPUBLISH = "CRLAttemptRepublish";
enum wszREGENABLED = "Enabled";
enum wszREGFORCETELETEX = "ForceTeletex";
enum wszREGLOGLEVEL = "LogLevel";
enum wszREGHIGHSERIAL = "HighSerial";
enum wszREGPOLICYFLAGS = "PolicyFlags";
enum wszREGNAMESEPARATOR = "SubjectNameSeparator";
enum wszREGSUBJECTTEMPLATE = "SubjectTemplate";
enum wszREGCAUSEDS = "UseDS";
enum wszREGVALIDITYPERIODSTRING = "ValidityPeriod";
enum wszREGVALIDITYPERIODCOUNT = "ValidityPeriodUnits";
enum wszREGPARENTCAMACHINE = "ParentCAMachine";
enum wszREGPARENTCANAME = "ParentCAName";
enum wszREGREQUESTFILENAME = "RequestFileName";
enum wszREGREQUESTID = "RequestId";
enum wszREGREQUESTKEYCONTAINER = "RequestKeyContainer";
enum wszREGREQUESTKEYINDEX = "RequestKeyIndex";
enum wszREGCASERVERNAME = "CAServerName";
enum wszREGCACERTFILENAME = "CACertFileName";
enum wszREGCASECURITY = "Security";
enum wszREGAUDITFILTER = "AuditFilter";
enum wszREGOFFICERRIGHTS = "OfficerRights";
enum wszENROLLMENTAGENTRIGHTS = "EnrollmentAgentRights";
enum wszREGMAXINCOMINGMESSAGESIZE = "MaxIncomingMessageSize";
enum wszREGMAXINCOMINGALLOCSIZE = "MaxIncomingAllocSize";
enum wszREGROLESEPARATIONENABLED = "RoleSeparationEnabled";
enum wszREGALTERNATEPUBLISHDOMAINS = "AlternatePublishDomains";
enum wszREGSETUPSTATUS = "SetupStatus";
enum wszREGINTERFACEFLAGS = "InterfaceFlags";
enum wszREGDSCONFIGDN = "DSConfigDN";
enum wszREGDSDOMAINDN = "DSDomainDN";
enum wszREGVIEWAGEMINUTES = "ViewAgeMinutes";
enum wszREGVIEWIDLEMINUTES = "ViewIdleMinutes";
enum wszREGEKPUBLISTDIRECTORIES = "EndorsementKeyListDirectories";
enum wszCERTIFICATETRANSPARENCYFLAGS = "CertificateTransparencyFlags";
enum wszREGMAXSCTLISTSIZE = "MaxSCTListSize";
enum wszREGCERTIFICATETRANSPARENCYINFOOID = "CTInformationExtensionOid";
enum wszREGPROCESSINGFLAGS = "ProcessingFlags";
enum wszREGUSEDEFINEDCACERTINREQ = "UseDefinedCACertInRequest";
enum wszREGENABLEDEKUFORDEFINEDCACERT = "EnabledEKUForDefinedCACert";
enum wszREGEKUOIDSFORPUBLISHEXPIREDCERTINCRL = "EKUOIDsForPublishExpiredCertInCRL";
enum wszCRTFILENAMEEXT = ".crt";
enum wszPFXFILENAMEEXT = ".p12";
enum wszDATFILENAMEEXT = ".dat";
enum wszLOGFILENAMEEXT = ".log";
enum wszDBFILENAMEEXT = ".edb";
enum szDBBASENAMEPARM = "edb";
enum wszLOGPATH = "CertLog";
enum wszDBBACKUPSUBDIR = "DataBase";
enum wszDBBACKUPCERTBACKDAT = "certbkxp.dat";
enum CCLOCKSKEWMINUTESDEFAULT = 0x0000000a;
enum CVIEWAGEMINUTESDEFAULT = 0x00000010;
enum dwVALIDITYPERIODCOUNTDEFAULT_ROOT = 0x00000005;
enum dwVALIDITYPERIODCOUNTDEFAULT_ENTERPRISE = 0x00000002;
enum dwVALIDITYPERIODCOUNTDEFAULT_STANDALONE = 0x00000001;
enum dwCAXCHGVALIDITYPERIODCOUNTDEFAULT = 0x00000001;
enum dwCAXCHGOVERLAPPERIODCOUNTDEFAULT = 0x00000001;
enum dwCRLPERIODCOUNTDEFAULT = 0x00000001;
enum dwCRLOVERLAPPERIODCOUNTDEFAULT = 0x00000000;
enum dwCRLDELTAPERIODCOUNTDEFAULT = 0x00000001;
enum dwCRLDELTAOVERLAPPERIODCOUNTDEFAULT = 0x00000000;
enum SETUP_SERVER_FLAG = 0x00000001;
enum SETUP_CLIENT_FLAG = 0x00000002;
enum SETUP_SUSPEND_FLAG = 0x00000004;
enum SETUP_REQUEST_FLAG = 0x00000008;
enum SETUP_ONLINE_FLAG = 0x00000010;
enum SETUP_DENIED_FLAG = 0x00000020;
enum SETUP_CREATEDB_FLAG = 0x00000040;
enum SETUP_ATTEMPT_VROOT_CREATE = 0x00000080;
enum SETUP_FORCECRL_FLAG = 0x00000100;
enum SETUP_UPDATE_CAOBJECT_SVRTYPE = 0x00000200;
enum SETUP_SERVER_UPGRADED_FLAG = 0x00000400;
enum SETUP_W2K_SECURITY_NOT_UPGRADED_FLAG = 0x00000800;
enum SETUP_SECURITY_CHANGED = 0x00001000;
enum SETUP_DCOM_SECURITY_UPDATED_FLAG = 0x00002000;
enum SETUP_SERVER_IS_UP_TO_DATE_FLAG = 0x00004000;
enum CRLF_DELTA_USE_OLDEST_UNEXPIRED_BASE = 0x00000001;
enum CRLF_DELETE_EXPIRED_CRLS = 0x00000002;
enum CRLF_CRLNUMBER_CRITICAL = 0x00000004;
enum CRLF_REVCHECK_IGNORE_OFFLINE = 0x00000008;
enum CRLF_IGNORE_INVALID_POLICIES = 0x00000010;
enum CRLF_REBUILD_MODIFIED_SUBJECT_ONLY = 0x00000020;
enum CRLF_SAVE_FAILED_CERTS = 0x00000040;
enum CRLF_IGNORE_UNKNOWN_CMC_ATTRIBUTES = 0x00000080;
enum CRLF_IGNORE_CROSS_CERT_TRUST_ERROR = 0x00000100;
enum CRLF_PUBLISH_EXPIRED_CERT_CRLS = 0x00000200;
enum CRLF_ENFORCE_ENROLLMENT_AGENT = 0x00000400;
enum CRLF_DISABLE_RDN_REORDER = 0x00000800;
enum CRLF_DISABLE_ROOT_CROSS_CERTS = 0x00001000;
enum CRLF_LOG_FULL_RESPONSE = 0x00002000;
enum CRLF_USE_XCHG_CERT_TEMPLATE = 0x00004000;
enum CRLF_USE_CROSS_CERT_TEMPLATE = 0x00008000;
enum CRLF_ALLOW_REQUEST_ATTRIBUTE_SUBJECT = 0x00010000;
enum CRLF_REVCHECK_IGNORE_NOREVCHECK = 0x00020000;
enum CRLF_PRESERVE_EXPIRED_CA_CERTS = 0x00040000;
enum CRLF_PRESERVE_REVOKED_CA_CERTS = 0x00080000;
enum CRLF_DISABLE_CHAIN_VERIFICATION = 0x00100000;
enum CRLF_BUILD_ROOTCA_CRLENTRIES_BASEDONKEY = 0x00200000;
enum KRAF_ENABLEFOREIGN = 0x00000001;
enum KRAF_SAVEBADREQUESTKEY = 0x00000002;
enum KRAF_ENABLEARCHIVEALL = 0x00000004;
enum KRAF_DISABLEUSEDEFAULTPROVIDER = 0x00000008;
enum IF_LOCKICERTREQUEST = 0x00000001;
enum IF_NOREMOTEICERTREQUEST = 0x00000002;
enum IF_NOLOCALICERTREQUEST = 0x00000004;
enum IF_NORPCICERTREQUEST = 0x00000008;
enum IF_NOREMOTEICERTADMIN = 0x00000010;
enum IF_NOLOCALICERTADMIN = 0x00000020;
enum IF_NOREMOTEICERTADMINBACKUP = 0x00000040;
enum IF_NOLOCALICERTADMINBACKUP = 0x00000080;
enum IF_NOSNAPSHOTBACKUP = 0x00000100;
enum IF_ENFORCEENCRYPTICERTREQUEST = 0x00000200;
enum IF_ENFORCEENCRYPTICERTADMIN = 0x00000400;
enum IF_ENABLEEXITKEYRETRIEVAL = 0x00000800;
enum IF_ENABLEADMINASAUDITOR = 0x00001000;
enum PROCFLG_NONE = 0x00000000;
enum PROCFLG_ENFORCEGOODKEYS = 0x00000001;
enum CSURL_SERVERPUBLISH = 0x00000001;
enum CSURL_ADDTOCERTCDP = 0x00000002;
enum CSURL_ADDTOFRESHESTCRL = 0x00000004;
enum CSURL_ADDTOCRLCDP = 0x00000008;
enum CSURL_PUBLISHRETRY = 0x00000010;
enum CSURL_ADDTOCERTOCSP = 0x00000020;
enum CSURL_SERVERPUBLISHDELTA = 0x00000040;
enum CSURL_ADDTOIDP = 0x00000080;
enum wszREGKEYCSP = "CSP";
enum wszREGKEYENCRYPTIONCSP = "EncryptionCSP";
enum wszREGKEYEXITMODULES = "ExitModules";
enum wszREGKEYPOLICYMODULES = "PolicyModules";
enum wszSECUREDATTRIBUTES = "SignedAttributes";
enum wszzDEFAULTSIGNEDATTRIBUTES = "RequesterName\0";
enum wszREGBACKUPLOGDIRECTORY = "BackupLogDirectory";
enum wszREGCHECKPOINTFILE = "CheckPointFile";
enum wszREGHIGHLOGNUMBER = "HighLogNumber";
enum wszREGLOWLOGNUMBER = "LowLogNumber";
enum wszREGLOGPATH = "LogPath";
enum wszREGRESTOREMAPCOUNT = "RestoreMapCount";
enum wszREGRESTOREMAP = "RestoreMap";
enum wszREGDATABASERECOVERED = "DatabaseRecovered";
enum wszREGRESTORESTATUS = "RestoreStatus";
enum wszREGB2ICERTMANAGEMODULE = "ICertManageModule";
enum wszREGSP4DEFAULTCONFIGURATION = "DefaultConfiguration";
enum wszREGSP4KEYSETNAME = "KeySetName";
enum wszREGSP4SUBJECTNAMESEPARATOR = "SubjectNameSeparator";
enum wszREGSP4NAMES = "Names";
enum wszREGSP4QUERIES = "Queries";
enum wszREGNETSCAPECERTTYPE = "NetscapeCertType";
enum wszNETSCAPEREVOCATIONTYPE = "Netscape";
enum wszREGPROVIDERTYPE = "ProviderType";
enum wszREGPROVIDER = "Provider";
enum wszHASHALGORITHM = "HashAlgorithm";
enum wszENCRYPTIONALGORITHM = "EncryptionAlgorithm";
enum wszMACHINEKEYSET = "MachineKeyset";
enum wszREGKEYSIZE = "KeySize";
enum wszREGSYMMETRICKEYSIZE = "SymmetricKeySize";
enum wszCNGPUBLICKEYALGORITHM = "CNGPublicKeyAlgorithm";
enum wszCNGHASHALGORITHM = "CNGHashAlgorithm";
enum wszCNGENCRYPTIONALGORITHM = "CNGEncryptionAlgorithm";
enum wszREGALTERNATESIGNATUREALGORITHM = "AlternateSignatureAlgorithm";
enum szNAMESEPARATORDEFAULT = "
";
enum wszPERIODYEARS = "Years";
enum wszPERIODMONTHS = "Months";
enum wszPERIODWEEKS = "Weeks";
enum wszPERIODDAYS = "Days";
enum wszPERIODHOURS = "Hours";
enum wszPERIODMINUTES = "Minutes";
enum wszPERIODSECONDS = "Seconds";
enum wszREGISSUERCERTURLFLAGS = "IssuerCertURLFlags";
enum wszREGEDITFLAGS = "EditFlags";
enum wszREGUPNMAP = "UPNMap";
enum wszREGSUBJECTALTNAME = "SubjectAltName";
enum wszREGSUBJECTALTNAME2 = "SubjectAltName2";
enum wszREGREQUESTDISPOSITION = "RequestDisposition";
enum wszREGCAPATHLENGTH = "CAPathLength";
enum wszREGREVOCATIONTYPE = "RevocationType";
enum wszREGLDAPREVOCATIONCRLURL_OLD = "LDAPRevocationCRLURL";
enum wszREGREVOCATIONCRLURL_OLD = "RevocationCRLURL";
enum wszREGFTPREVOCATIONCRLURL_OLD = "FTPRevocationCRLURL";
enum wszREGFILEREVOCATIONCRLURL_OLD = "FileRevocationCRLURL";
enum wszREGREVOCATIONURL = "RevocationURL";
enum wszREGLDAPISSUERCERTURL_OLD = "LDAPIssuerCertURL";
enum wszREGISSUERCERTURL_OLD = "IssuerCertURL";
enum wszREGFTPISSUERCERTURL_OLD = "FTPIssuerCertURL";
enum wszREGFILEISSUERCERTURL_OLD = "FileIssuerCertURL";
enum wszREGENABLEREQUESTEXTENSIONLIST = "EnableRequestExtensionList";
enum wszREGENABLEENROLLEEREQUESTEXTENSIONLIST = "EnableEnrolleeRequestExtensionList";
enum wszREGDISABLEEXTENSIONLIST = "DisableExtensionList";
enum wszREGEKUOIDSFORVOLATILEREQUESTS = "EKUOIDsforVolatileRequests";
enum wszREGLDAPSESSIONOPTIONS = "LDAPSessionOptions";
enum wszLDAPSESSIONOPTIONVALUE = "LDAPSessionOptionValue";
enum wszREGDEFAULTSMIME = "DefaultSMIME";
enum CAPATHLENGTH_INFINITE = 0xffffffff;
enum REQDISP_PENDING = 0x00000000;
enum REQDISP_ISSUE = 0x00000001;
enum REQDISP_DENY = 0x00000002;
enum REQDISP_USEREQUESTATTRIBUTE = 0x00000003;
enum REQDISP_MASK = 0x000000ff;
enum REQDISP_PENDINGFIRST = 0x00000100;
enum REQDISP_DEFAULT_ENTERPRISE = 0x00000001;
enum REVEXT_CDPLDAPURL_OLD = 0x00000001;
enum REVEXT_CDPHTTPURL_OLD = 0x00000002;
enum REVEXT_CDPFTPURL_OLD = 0x00000004;
enum REVEXT_CDPFILEURL_OLD = 0x00000008;
enum REVEXT_CDPURLMASK_OLD = 0x000000ff;
enum REVEXT_CDPENABLE = 0x00000100;
enum REVEXT_ASPENABLE = 0x00000200;
enum REVEXT_DEFAULT_NODS = 0x00000100;
enum REVEXT_DEFAULT_DS = 0x00000100;
enum ISSCERT_LDAPURL_OLD = 0x00000001;
enum ISSCERT_HTTPURL_OLD = 0x00000002;
enum ISSCERT_FTPURL_OLD = 0x00000004;
enum ISSCERT_FILEURL_OLD = 0x00000008;
enum ISSCERT_URLMASK_OLD = 0x000000ff;
enum ISSCERT_ENABLE = 0x00000100;
enum ISSCERT_DEFAULT_NODS = 0x00000100;
enum ISSCERT_DEFAULT_DS = 0x00000100;
enum EDITF_ENABLEREQUESTEXTENSIONS = 0x00000001;
enum EDITF_REQUESTEXTENSIONLIST = 0x00000002;
enum EDITF_DISABLEEXTENSIONLIST = 0x00000004;
enum EDITF_ADDOLDKEYUSAGE = 0x00000008;
enum EDITF_ADDOLDCERTTYPE = 0x00000010;
enum EDITF_ATTRIBUTEENDDATE = 0x00000020;
enum EDITF_BASICCONSTRAINTSCRITICAL = 0x00000040;
enum EDITF_BASICCONSTRAINTSCA = 0x00000080;
enum EDITF_ENABLEAKIKEYID = 0x00000100;
enum EDITF_ATTRIBUTECA = 0x00000200;
enum EDITF_IGNOREREQUESTERGROUP = 0x00000400;
enum EDITF_ENABLEAKIISSUERNAME = 0x00000800;
enum EDITF_ENABLEAKIISSUERSERIAL = 0x00001000;
enum EDITF_ENABLEAKICRITICAL = 0x00002000;
enum EDITF_SERVERUPGRADED = 0x00004000;
enum EDITF_ATTRIBUTEEKU = 0x00008000;
enum EDITF_ENABLEDEFAULTSMIME = 0x00010000;
enum EDITF_EMAILOPTIONAL = 0x00020000;
enum EDITF_ATTRIBUTESUBJECTALTNAME2 = 0x00040000;
enum EDITF_ENABLELDAPREFERRALS = 0x00080000;
enum EDITF_ENABLECHASECLIENTDC = 0x00100000;
enum EDITF_AUDITCERTTEMPLATELOAD = 0x00200000;
enum EDITF_DISABLEOLDOSCNUPN = 0x00400000;
enum EDITF_DISABLELDAPPACKAGELIST = 0x00800000;
enum EDITF_ENABLEUPNMAP = 0x01000000;
enum EDITF_ENABLEOCSPREVNOCHECK = 0x02000000;
enum EDITF_ENABLERENEWONBEHALFOF = 0x04000000;
enum EDITF_ENABLEKEYENCIPHERMENTCACERT = 0x08000000;
enum wszREGLDAPREVOCATIONDN_OLD = "LDAPRevocationDN";
enum wszREGLDAPREVOCATIONDNTEMPLATE_OLD = "LDAPRevocationDNTemplate";
enum wszCRLPUBLISHRETRYCOUNT = "CRLPublishRetryCount";
enum wszREGCERTPUBLISHFLAGS = "PublishCertFlags";
enum EXITPUB_FILE = 0x00000001;
enum EXITPUB_ACTIVEDIRECTORY = 0x00000002;
enum EXITPUB_REMOVEOLDCERTS = 0x00000010;
enum EXITPUB_DEFAULT_ENTERPRISE = 0x00000002;
enum EXITPUB_DEFAULT_STANDALONE = 0x00000001;
enum wszCLASS_CERTADMIN = "CertificateAuthority.Admin";
enum wszCLASS_CERTCONFIG = "CertificateAuthority.Config";
enum wszCLASS_CERTGETCONFIG = "CertificateAuthority.GetConfig";
enum wszCLASS_CERTENCODE = "CertificateAuthority.Encode";
enum wszCLASS_CERTDBMEM = "CertificateAuthority.DBMem";
enum wszCLASS_CERTREQUEST = "CertificateAuthority.Request";
enum wszCLASS_CERTSERVEREXIT = "CertificateAuthority.ServerExit";
enum wszCLASS_CERTSERVERPOLICY = "CertificateAuthority.ServerPolicy";
enum wszCLASS_CERTVIEW = "CertificateAuthority.View";
enum wszMICROSOFTCERTMODULE_PREFIX = "CertificateAuthority_MicrosoftDefault";
enum wszCERTMANAGE_SUFFIX = "Manage";
enum wszCERTEXITMODULE_POSTFIX = ".Exit";
enum wszCERTPOLICYMODULE_POSTFIX = ".Policy";
enum wszCAPOLICYFILE = "CAPolicy.inf";
enum wszINFSECTION_CDP = "CRLDistributionPoint";
enum wszINFSECTION_AIA = "AuthorityInformationAccess";
enum wszINFSECTION_EKU = "EnhancedKeyUsageExtension";
enum wszINFSECTION_CCDP = "CrossCertificateDistributionPointsExtension";
enum wszINFSECTION_CERTSERVER = "certsrv_server";
enum wszINFKEY_RENEWALKEYLENGTH = "RenewalKeyLength";
enum wszINFKEY_RENEWALVALIDITYPERIODSTRING = "RenewalValidityPeriod";
enum wszINFKEY_RENEWALVALIDITYPERIODCOUNT = "RenewalValidityPeriodUnits";
enum wszINFKEY_UTF8 = "UTF8";
enum wszINFKEY_CRLPERIODSTRING = "CRLPeriod";
enum wszINFKEY_CRLPERIODCOUNT = "CRLPeriodUnits";
enum wszINFKEY_CRLDELTAPERIODSTRING = "CRLDeltaPeriod";
enum wszINFKEY_CRLDELTAPERIODCOUNT = "CRLDeltaPeriodUnits";
enum wszINFKEY_LOADDEFAULTTEMPLATES = "LoadDefaultTemplates";
enum wszINFKEY_ENABLEKEYCOUNTING = "EnableKeyCounting";
enum wszINFKEY_FORCEUTF8 = "ForceUTF8";
enum wszINFKEY_ALTERNATESIGNATUREALGORITHM = "AlternateSignatureAlgorithm";
enum wszINFKEY_SHOWALLCSPS = "ShowAllCSPs";
enum wszINFKEY_CRITICAL = "Critical";
enum wszINFKEY_EMPTY = "Empty";
enum wszINFKEY_CCDPSYNCDELTATIME = "SyncDeltaTime";
enum wszINFSECTION_CAPOLICY = "CAPolicy";
enum wszINFSECTION_POLICYSTATEMENT = "PolicyStatementExtension";
enum wszINFSECTION_APPLICATIONPOLICYSTATEMENT = "ApplicationPolicyStatementExtension";
enum wszINFKEY_POLICIES = "Policies";
enum wszINFKEY_OID = "OID";
enum wszINFKEY_NOTICE = "Notice";
enum wszINFKEY_FLAGS = "Flags";
enum wszINFSECTION_REQUESTATTRIBUTES = "RequestAttributes";
enum wszINFSECTION_NAMECONSTRAINTS = "NameConstraintsExtension";
enum wszINFKEY_INCLUDE = "Include";
enum wszINFKEY_EXCLUDE = "Exclude";
enum wszINFKEY_SUBTREE = "SubTree";
enum wszINFKEY_UPN = "UPN";
enum wszINFKEY_EMAIL = "EMail";
enum wszINFKEY_DNS = "DNS";
enum wszINFKEY_DIRECTORYNAME = "DirectoryName";
enum wszINFKEY_URL = "URL";
enum wszINFKEY_IPADDRESS = "IPAddress";
enum wszINFKEY_REGISTEREDID = "RegisteredId";
enum wszINFKEY_OTHERNAME = "OtherName";
enum wszINFSECTION_POLICYMAPPINGS = "PolicyMappingsExtension";
enum wszINFSECTION_APPLICATIONPOLICYMAPPINGS = "ApplicationPolicyMappingsExtension";
enum wszINFSECTION_POLICYCONSTRAINTS = "PolicyConstraintsExtension";
enum wszINFSECTION_APPLICATIONPOLICYCONSTRAINTS = "ApplicationPolicyConstraintsExtension";
enum wszINFKEY_REQUIREEXPLICITPOLICY = "RequireExplicitPolicy";
enum wszINFKEY_INHIBITPOLICYMAPPING = "InhibitPolicyMapping";
enum wszINFSECTION_BASICCONSTRAINTS = "BasicConstraintsExtension";
enum wszINFKEY_PATHLENGTH = "PathLength";
enum wszINFSECTION_EXTENSIONS = "Extensions";
enum wszINFSECTION_PROPERTIES = "Properties";
enum wszINFKEY_CONTINUE = "_continue_";
enum wszINFSECTION_NEWREQUEST = "NewRequest";
enum wszINFKEY_SUBJECT = "Subject";
enum wszINFKEY_SUBJECTNAMEFLAGS = "SubjectNameFlags";
enum wszINFKEY_X500NAMEFLAGS = "X500NameFlags";
enum wszINFKEY_EXPORTABLE = "Exportable";
enum wszINFKEY_EXPORTABLEENCRYPTED = "ExportableEncrypted";
enum wszINFKEY_HASHALGORITHM = "HashAlgorithm";
enum wszINFKEY_KEYALGORITHM = "KeyAlgorithm";
enum wszINFKEY_KEYALGORITHMPARMETERS = "KeyAlgorithmParameters";
enum wszINFKEY_KEYCONTAINER = "KeyContainer";
enum wszINFKEY_READERNAME = "ReaderName";
enum wszINFKEY_KEYLENGTH = "KeyLength";
enum wszINFKEY_LEGACYKEYSPEC = "KeySpec";
enum wszINFKEY_KEYUSAGEEXTENSION = "KeyUsage";
enum wszINFKEY_KEYUSAGEPROPERTY = "KeyUsageProperty";
enum wszINFKEY_MACHINEKEYSET = "MachineKeySet";
enum wszINFKEY_PRIVATEKEYARCHIVE = "PrivateKeyArchive";
enum wszINFKEY_ENCRYPTIONALGORITHM = "EncryptionAlgorithm";
enum wszINFKEY_ENCRYPTIONLENGTH = "EncryptionLength";
enum wszINFKEY_PROVIDERNAME = "ProviderName";
enum wszINFKEY_PROVIDERTYPE = "ProviderType";
enum wszINFKEY_RENEWALCERT = "RenewalCert";
enum wszINFKEY_REQUESTTYPE = "RequestType";
enum wszINFKEY_SECURITYDESCRIPTOR = "SecurityDescriptor";
enum wszINFKEY_SILENT = "Silent";
enum wszINFKEY_SMIME = "SMIME";
enum wszINFKEY_SUPPRESSDEFAULTS = "SuppressDefaults";
enum wszINFKEY_USEEXISTINGKEY = "UseExistingKeySet";
enum wszINFKEY_USERPROTECTED = "UserProtected";
enum wszINFKEY_KEYPROTECTION = "KeyProtection";
enum wszINFKEY_UICONTEXTMESSAGE = "UIContextMessage";
enum wszINFKEY_FRIENDLYNAME = "FriendlyName";
enum wszINFKEY_NOTBEFORE = "NotBefore";
enum wszINFKEY_NOTAFTER = "NotAfter";
enum wszINFKEY_ATTESTPRIVATEKEY = "AttestPrivateKey";
enum wszINFKEY_PUBLICKEY = "PublicKey";
enum wszINFKEY_PUBLICKEYPARAMETERS = "PublicKeyParameters";
enum wszINFKEY_ECCKEYPARAMETERS = "EccKeyParameters";
enum wszINFKEY_ECCKEYPARAMETERS_P = "EccKeyParameters_P";
enum wszINFKEY_ECCKEYPARAMETERS_A = "EccKeyParameters_A";
enum wszINFKEY_ECCKEYPARAMETERS_B = "EccKeyParameters_B";
enum wszINFKEY_ECCKEYPARAMETERS_SEED = "EccKeyParameters_Seed";
enum wszINFKEY_ECCKEYPARAMETERS_BASE = "EccKeyParameters_Base";
enum wszINFKEY_ECCKEYPARAMETERS_ORDER = "EccKeyParameters_Order";
enum wszINFKEY_ECCKEYPARAMETERS_COFACTOR = "EccKeyParameters_Cofactor";
enum wszINFKEY_ECCKEYPARAMETERSTYPE = "EccKeyParametersType";
enum wszINFKEY_SERIALNUMBER = "SerialNumber";
enum wszINFKEY_CATHUMBPRINT = "CAThumbprint";
enum wszINFKEY_CACERTS = "CACerts";
enum wszINFKEY_CACAPABILITIES = "CACapabilities";
enum wszINFKEY_CHALLENGEPASSWORD = "ChallengePassword";
enum wszINFVALUE_REQUESTTYPE_PKCS10 = "PKCS10";
enum wszINFVALUE_REQUESTTYPE_PKCS7 = "PKCS7";
enum wszINFVALUE_REQUESTTYPE_CMC = "CMC";
enum wszINFVALUE_REQUESTTYPE_CERT = "Cert";
enum wszINFVALUE_REQUESTTYPE_SCEP = "SCEP";
enum wszINFVALUE_ENDORSEMENTKEY = "EndorsementKey";
enum wszREGEXITSMTPKEY = "SMTP";
enum wszREGEXITSMTPTEMPLATES = "Templates";
enum wszREGEXITSMTPEVENTFILTER = "EventFilter";
enum wszREGEXITSMTPSERVER = "SMTPServer";
enum wszREGEXITSMTPAUTHENTICATE = "SMTPAuthenticate";
enum wszREGEXITDENIEDKEY = "Denied";
enum wszREGEXITISSUEDKEY = "Issued";
enum wszREGEXITPENDINGKEY = "Pending";
enum wszREGEXITREVOKEDKEY = "Revoked";
enum wszREGEXITCRLISSUEDKEY = "CRLIssued";
enum wszREGEXITSHUTDOWNKEY = "Shutdown";
enum wszREGEXITSTARTUPKEY = "Startup";
enum wszREGEXITIMPORTEDKEY = "Imported";
enum wszREGEXITSMTPFROM = "From";
enum wszREGEXITSMTPTO = "To";
enum wszREGEXITSMTPCC = "Cc";
enum wszREGEXITTITLEFORMAT = "TitleFormat";
enum wszREGEXITTITLEARG = "TitleArg";
enum wszREGEXITBODYFORMAT = "BodyFormat";
enum wszREGEXITBODYARG = "BodyArg";
enum wszREGEXITPROPNOTFOUND = "???";
enum wszREGKEYENROLLMENT = "Software\\Microsoft\\Cryptography\\AutoEnrollment";
enum wszREGKEYGROUPPOLICYENROLLMENT = "Software\\Policies\\Microsoft\\Cryptography\\AutoEnrollment";
enum wszREGMAXPENDINGREQUESTDAYS = "MaxPendingRequestDays";
enum wszREGAELOGLEVEL_OLD = "AEEventLogLevel";
enum wszREGENROLLFLAGS = "EnrollFlags";
enum wszREGVERIFYFLAGS = "VerifyFlags";
enum wszREGUNICODE = "Unicode";
enum wszREGAIKCLOUDCAURL = "AIKCloudCAURL";
enum wszREGAIKKEYALGORITHM = "AIKKeyAlgorithm";
enum wszREGAIKKEYLENGTH = "AIKKeyLength";
enum wszREGPRESERVESCEPDUMMYCERTS = "PreserveSCEPDummyCerts";
enum wszREGALLPROVIDERS = "All";
enum TP_MACHINEPOLICY = 0x00000001;
enum wszREGKEYREPAIR = "KeyRepair";
enum KR_ENABLE_MACHINE = 0x00000001;
enum KR_ENABLE_USER = 0x00000002;
enum wszPROPDISTINGUISHEDNAME = "DistinguishedName";
enum wszPROPRAWNAME = "RawName";
enum wszPROPCOUNTRY = "Country";
enum wszPROPORGANIZATION = "Organization";
enum wszPROPORGUNIT = "OrgUnit";
enum wszPROPCOMMONNAME = "CommonName";
enum wszPROPLOCALITY = "Locality";
enum wszPROPSTATE = "State";
enum wszPROPTITLE = "Title";
enum wszPROPGIVENNAME = "GivenName";
enum wszPROPINITIALS = "Initials";
enum wszPROPSURNAME = "SurName";
enum wszPROPDOMAINCOMPONENT = "DomainComponent";
enum wszPROPEMAIL = "EMail";
enum wszPROPSTREETADDRESS = "StreetAddress";
enum wszPROPUNSTRUCTUREDNAME = "UnstructuredName";
enum wszPROPUNSTRUCTUREDADDRESS = "UnstructuredAddress";
enum wszPROPDEVICESERIALNUMBER = "DeviceSerialNumber";
enum wszPROPSUBJECTDOT = "Subject.";
enum wszPROPREQUESTDOT = "Request.";
enum wszPROPREQUESTREQUESTID = "RequestID";
enum wszPROPREQUESTRAWREQUEST = "RawRequest";
enum wszPROPREQUESTRAWARCHIVEDKEY = "RawArchivedKey";
enum wszPROPREQUESTARCHIVEDKEY = "ArchivedKey";
enum wszPROPREQUESTKEYRECOVERYHASHES = "KeyRecoveryHashes";
enum wszPROPREQUESTRAWOLDCERTIFICATE = "RawOldCertificate";
enum wszPROPREQUESTATTRIBUTES = "RequestAttributes";
enum wszPROPREQUESTTYPE = "RequestType";
enum wszPROPREQUESTFLAGS = "RequestFlags";
enum wszPROPREQUESTSTATUSCODE = "StatusCode";
enum wszPROPREQUESTDISPOSITION = "Disposition";
enum wszPROPREQUESTDISPOSITIONMESSAGE = "DispositionMessage";
enum wszPROPREQUESTSUBMITTEDWHEN = "SubmittedWhen";
enum wszPROPREQUESTRESOLVEDWHEN = "ResolvedWhen";
enum wszPROPREQUESTREVOKEDWHEN = "RevokedWhen";
enum wszPROPREQUESTREVOKEDEFFECTIVEWHEN = "RevokedEffectiveWhen";
enum wszPROPREQUESTREVOKEDREASON = "RevokedReason";
enum wszPROPREQUESTERNAME = "RequesterName";
enum wszPROPCALLERNAME = "CallerName";
enum wszPROPSIGNERPOLICIES = "SignerPolicies";
enum wszPROPSIGNERAPPLICATIONPOLICIES = "SignerApplicationPolicies";
enum wszPROPOFFICER = "Officer";
enum wszPROPPUBLISHEXPIREDCERTINCRL = "PublishExpiredCertInCRL";
enum wszPROPREQUESTERNAMEFROMOLDCERTIFICATE = "RequesterNameFromOldCertificate";
enum wszPROPATTESTATIONCHALLENGE = "AttestationChallenge";
enum wszPROPENDORSEMENTKEYHASH = "EndorsementKeyHash";
enum wszPROPENDORSEMENTCERTIFICATEHASH = "EndorsementCertificateHash";
enum wszPROPRAWPRECERTIFICATE = "RawPrecertificate";
enum wszPROPCHALLENGE = "Challenge";
enum wszPROPEXPECTEDCHALLENGE = "ExpectedChallenge";
enum wszPROPDISPOSITION = "Disposition";
enum wszPROPDISPOSITIONDENY = "Deny";
enum wszPROPDISPOSITIONPENDING = "Pending";
enum wszPROPVALIDITYPERIODSTRING = "ValidityPeriod";
enum wszPROPVALIDITYPERIODCOUNT = "ValidityPeriodUnits";
enum wszPROPEXPIRATIONDATE = "ExpirationDate";
enum wszPROPCERTTYPE = "CertType";
enum wszPROPCERTTEMPLATE = "CertificateTemplate";
enum wszPROPCERTUSAGE = "CertificateUsage";
enum wszPROPREQUESTOSVERSION = "RequestOSVersion";
enum wszPROPREQUESTCSPPROVIDER = "RequestCSPProvider";
enum wszPROPEXITCERTFILE = "CertFile";
enum wszPROPCLIENTBROWSERMACHINE = "cbm";
enum wszPROPCERTCLIENTMACHINE = "ccm";
enum wszPROPCLIENTDCDNS = "cdc";
enum wszPROPREQUESTMACHINEDNS = "rmd";
enum wszPROPSUBJECTALTNAME2 = "san";
enum wszPROPDNS = "dns";
enum wszPROPDN = "dn";
enum wszPROPURL = "url";
enum wszPROPIPADDRESS = "ipaddress";
enum wszPROPGUID = "guid";
enum wszPROPOID = "oid";
enum wszPROPUPN = "upn";
enum szPROPASNTAG = "{asn}";
enum wszPROPCRITICALTAG = "{critical}";
enum wszPROPUTF8TAG = "{utf8}";
enum wszPROPOCTETTAG = "{octet}";
enum wszPROPHEXTAG = "{hex}";
enum wszPROPTEXTTAG = "{text}";
enum wszPROPDECIMALTAG = "{decimal}";
enum wszPROPFILETAG = "{file}";
enum wszAT_EKCERTINF = "@EKCert";
enum wszAT_TESTROOT = "@TestRoot";
enum wszPROPCATYPE = "CAType";
enum wszPROPSANITIZEDCANAME = "SanitizedCAName";
enum wszPROPSANITIZEDSHORTNAME = "SanitizedShortName";
enum wszPROPMACHINEDNSNAME = "MachineDNSName";
enum wszPROPMODULEREGLOC = "ModuleRegistryLocation";
enum wszPROPUSEDS = "fUseDS";
enum wszPROPDELTACRLSDISABLED = "fDeltaCRLsDisabled";
enum wszPROPSERVERUPGRADED = "fServerUpgraded";
enum wszPROPCONFIGDN = "ConfigDN";
enum wszPROPDOMAINDN = "DomainDN";
enum wszPROPLOGLEVEL = "LogLevel";
enum wszPROPSESSIONCOUNT = "SessionCount";
enum wszPROPTEMPLATECHANGESEQUENCENUMBER = "TemplateChangeSequenceNumber";
enum wszPROPVOLATILEMODE = "VolatileMode";
enum wszLOCALIZEDTIMEPERIODUNITS = "LocalizedTimePeriodUnits";
enum wszPROPREQUESTERCAACCESS = "RequesterCAAccess";
enum wszPROPUSERDN = "UserDN";
enum wszPROPKEYARCHIVED = "KeyArchived";
enum wszPROPCERTCOUNT = "CertCount";
enum wszPROPRAWCACERTIFICATE = "RawCACertificate";
enum wszPROPCERTSTATE = "CertState";
enum wszPROPCERTSUFFIX = "CertSuffix";
enum wszPROPRAWCRL = "RawCRL";
enum wszPROPRAWDELTACRL = "RawDeltaCRL";
enum wszPROPCRLINDEX = "CRLIndex";
enum wszPROPCRLSTATE = "CRLState";
enum wszPROPCRLSUFFIX = "CRLSuffix";
enum wszPROPEVENTLOGTERSE = "EventLogTerse";
enum wszPROPEVENTLOGERROR = "EventLogError";
enum wszPROPEVENTLOGWARNING = "EventLogWarning";
enum wszPROPEVENTLOGVERBOSE = "EventLogVerbose";
enum wszPROPEVENTLOGEXHAUSTIVE = "EventLogExhaustive";
enum wszPROPDCNAME = "DCName";
enum wszPROPCROSSFOREST = "CrossForest";
enum wszPROPREQUESTERSAMNAME = "RequesterSAMName";
enum wszPROPREQUESTERUPN = "RequesterUPN";
enum wszPROPREQUESTERDN = "RequesterDN";
enum wszPROPSEAUDITID = "SEAuditId";
enum wszPROPSEAUDITFILTER = "SEAuditFilter";
enum wszPROPCERTIFICATEREQUESTID = "RequestID";
enum wszPROPRAWCERTIFICATE = "RawCertificate";
enum wszPROPCERTIFICATEHASH = "CertificateHash";
enum wszPROPCERTIFICATETEMPLATE = "CertificateTemplate";
enum wszPROPCERTIFICATEENROLLMENTFLAGS = "EnrollmentFlags";
enum wszPROPCERTIFICATEGENERALFLAGS = "GeneralFlags";
enum wszPROPCERTIFICATEPRIVATEKEYFLAGS = "PrivatekeyFlags";
enum wszPROPCERTIFICATESERIALNUMBER = "SerialNumber";
enum wszPROPCERTIFICATENOTBEFOREDATE = "NotBefore";
enum wszPROPCERTIFICATENOTAFTERDATE = "NotAfter";
enum wszPROPCERTIFICATESUBJECTKEYIDENTIFIER = "SubjectKeyIdentifier";
enum wszPROPCERTIFICATERAWPUBLICKEY = "RawPublicKey";
enum wszPROPCERTIFICATEPUBLICKEYLENGTH = "PublicKeyLength";
enum wszPROPCERTIFICATEPUBLICKEYALGORITHM = "PublicKeyAlgorithm";
enum wszPROPCERTIFICATERAWPUBLICKEYALGORITHMPARAMETERS = "RawPublicKeyAlgorithmParameters";
enum wszPROPCERTIFICATEUPN = "UPN";
enum wszPROPCERTIFICATETYPE = "CertificateType";
enum wszPROPCERTIFICATERAWSMIMECAPABILITIES = "RawSMIMECapabilities";
enum wszPROPNAMETYPE = "NameType";
enum EXTENSION_CRITICAL_FLAG = 0x00000001;
enum EXTENSION_DISABLE_FLAG = 0x00000002;
enum EXTENSION_DELETE_FLAG = 0x00000004;
enum EXTENSION_POLICY_MASK = 0x0000ffff;
enum EXTENSION_ORIGIN_REQUEST = 0x00010000;
enum EXTENSION_ORIGIN_POLICY = 0x00020000;
enum EXTENSION_ORIGIN_ADMIN = 0x00030000;
enum EXTENSION_ORIGIN_SERVER = 0x00040000;
enum EXTENSION_ORIGIN_RENEWALCERT = 0x00050000;
enum EXTENSION_ORIGIN_IMPORTEDCERT = 0x00060000;
enum EXTENSION_ORIGIN_PKCS7 = 0x00070000;
enum EXTENSION_ORIGIN_CMC = 0x00080000;
enum EXTENSION_ORIGIN_CACERT = 0x00090000;
enum EXTENSION_ORIGIN_MASK = 0x000f0000;
enum wszPROPEXTREQUESTID = "ExtensionRequestId";
enum wszPROPEXTNAME = "ExtensionName";
enum wszPROPEXTFLAGS = "ExtensionFlags";
enum wszPROPEXTRAWVALUE = "ExtensionRawValue";
enum wszPROPATTRIBREQUESTID = "AttributeRequestId";
enum wszPROPATTRIBNAME = "AttributeName";
enum wszPROPATTRIBVALUE = "AttributeValue";
enum wszPROPCRLROWID = "CRLRowId";
enum wszPROPCRLNUMBER = "CRLNumber";
enum wszPROPCRLMINBASE = "CRLMinBase";
enum wszPROPCRLNAMEID = "CRLNameId";
enum wszPROPCRLCOUNT = "CRLCount";
enum wszPROPCRLTHISUPDATE = "CRLThisUpdate";
enum wszPROPCRLNEXTUPDATE = "CRLNextUpdate";
enum wszPROPCRLTHISPUBLISH = "CRLThisPublish";
enum wszPROPCRLNEXTPUBLISH = "CRLNextPublish";
enum wszPROPCRLEFFECTIVE = "CRLEffective";
enum wszPROPCRLPROPAGATIONCOMPLETE = "CRLPropagationComplete";
enum wszPROPCRLLASTPUBLISHED = "CRLLastPublished";
enum wszPROPCRLPUBLISHATTEMPTS = "CRLPublishAttempts";
enum wszPROPCRLPUBLISHFLAGS = "CRLPublishFlags";
enum wszPROPCRLPUBLISHSTATUSCODE = "CRLPublishStatusCode";
enum wszPROPCRLPUBLISHERROR = "CRLPublishError";
enum wszPROPCRLRAWCRL = "CRLRawCRL";
enum CPF_BASE = 0x00000001;
enum CPF_DELTA = 0x00000002;
enum CPF_COMPLETE = 0x00000004;
enum CPF_SHADOW = 0x00000008;
enum CPF_CASTORE_ERROR = 0x00000010;
enum CPF_BADURL_ERROR = 0x00000020;
enum CPF_MANUAL = 0x00000040;
enum CPF_SIGNATURE_ERROR = 0x00000080;
enum CPF_LDAP_ERROR = 0x00000100;
enum CPF_FILE_ERROR = 0x00000200;
enum CPF_FTP_ERROR = 0x00000400;
enum CPF_HTTP_ERROR = 0x00000800;
enum CPF_POSTPONED_BASE_LDAP_ERROR = 0x00001000;
enum CPF_POSTPONED_BASE_FILE_ERROR = 0x00002000;
enum PROPTYPE_MASK = 0x000000ff;
enum PROPCALLER_SERVER = 0x00000100;
enum PROPCALLER_POLICY = 0x00000200;
enum PROPCALLER_EXIT = 0x00000300;
enum PROPCALLER_ADMIN = 0x00000400;
enum PROPCALLER_REQUEST = 0x00000500;
enum PROPCALLER_MASK = 0x00000f00;
enum PROPFLAGS_INDEXED = 0x00010000;
enum CR_FLG_FORCETELETEX = 0x00000001;
enum CR_FLG_RENEWAL = 0x00000002;
enum CR_FLG_FORCEUTF8 = 0x00000004;
enum CR_FLG_CAXCHGCERT = 0x00000008;
enum CR_FLG_ENROLLONBEHALFOF = 0x00000010;
enum CR_FLG_SUBJECTUNMODIFIED = 0x00000020;
enum CR_FLG_VALIDENCRYPTEDKEYHASH = 0x00000040;
enum CR_FLG_CACROSSCERT = 0x00000080;
enum CR_FLG_ENFORCEUTF8 = 0x00000100;
enum CR_FLG_DEFINEDCACERT = 0x00000200;
enum CR_FLG_CHALLENGEPENDING = 0x00000400;
enum CR_FLG_CHALLENGESATISFIED = 0x00000800;
enum CR_FLG_TRUSTONUSE = 0x00001000;
enum CR_FLG_TRUSTEKCERT = 0x00002000;
enum CR_FLG_TRUSTEKKEY = 0x00004000;
enum CR_FLG_PUBLISHERROR = 0x80000000;
enum DB_DISP_ACTIVE = 0x00000008;
enum DB_DISP_PENDING = 0x00000009;
enum DB_DISP_QUEUE_MAX = 0x00000009;
enum DB_DISP_FOREIGN = 0x0000000c;
enum DB_DISP_CA_CERT = 0x0000000f;
enum DB_DISP_CA_CERT_CHAIN = 0x00000010;
enum DB_DISP_KRA_CERT = 0x00000011;
enum DB_DISP_LOG_MIN = 0x00000014;
enum DB_DISP_ISSUED = 0x00000014;
enum DB_DISP_REVOKED = 0x00000015;
enum DB_DISP_LOG_FAILED_MIN = 0x0000001e;
enum DB_DISP_ERROR = 0x0000001e;
enum DB_DISP_DENIED = 0x0000001f;
enum VR_PENDING = 0x00000000;
enum VR_INSTANT_OK = 0x00000001;
enum VR_INSTANT_BAD = 0x00000002;
enum wszCERT_TYPE = "RequestType";
enum wszCERT_TYPE_CLIENT = "Client";
enum wszCERT_TYPE_SERVER = "Server";
enum wszCERT_TYPE_CODESIGN = "CodeSign";
enum wszCERT_TYPE_CUSTOMER = "SetCustomer";
enum wszCERT_TYPE_MERCHANT = "SetMerchant";
enum wszCERT_TYPE_PAYMENT = "SetPayment";
enum wszCERT_VERSION = "Version";
enum wszCERT_VERSION_1 = "1";
enum wszCERT_VERSION_2 = "2";
enum wszCERT_VERSION_3 = "3";
enum CV_OUT_HEXRAW = 0x0000000c;
enum CV_OUT_ENCODEMASK = 0x000000ff;
enum CV_OUT_NOCRLF = 0x40000000;
enum CV_OUT_NOCR = 0x80000000;
enum CVR_SEEK_NONE = 0x00000000;
enum CVR_SEEK_MASK = 0x000000ff;
enum CVR_SEEK_NODELTA = 0x00001000;
enum CVR_SORT_NONE = 0x00000000;
enum CVR_SORT_ASCEND = 0x00000001;
enum CVR_SORT_DESCEND = 0x00000002;
enum CV_COLUMN_EXTENSION_DEFAULT = 0xfffffffffffffffc;
enum CV_COLUMN_ATTRIBUTE_DEFAULT = 0xfffffffffffffffb;
enum CV_COLUMN_CRL_DEFAULT = 0xfffffffffffffffa;
enum CV_COLUMN_LOG_REVOKED_DEFAULT = 0xfffffffffffffff9;
enum CVRC_TABLE_MASK = 0x0000f000;
enum CVRC_TABLE_SHIFT = 0x0000000c;
enum CRYPT_ENUM_ALL_PROVIDERS = 0x00000001;
enum XEPR_ENUM_FIRST = 0xffffffffffffffff;
enum XEPR_DATE = 0x00000005;
enum XEPR_TEMPLATENAME = 0x00000006;
enum XEPR_VERSION = 0x00000007;
enum XEPR_V1TEMPLATENAME = 0x00000009;
enum XEPR_V2TEMPLATEOID = 0x00000010;
enum XEKL_KEYSIZE_DEFAULT = 0x00000004;
enum XECP_STRING_PROPERTY = 0x00000001;
enum XECI_DISABLE = 0x00000000;
enum XECI_XENROLL = 0x00000001;
enum XECI_AUTOENROLL = 0x00000002;
enum XECI_REQWIZARD = 0x00000003;
enum XECI_CERTREQ = 0x00000004;
enum wszCMM_PROP_NAME = "Name";
enum wszCMM_PROP_DESCRIPTION = "Description";
enum wszCMM_PROP_COPYRIGHT = "Copyright";
enum wszCMM_PROP_FILEVER = "File Version";
enum wszCMM_PROP_PRODUCTVER = "Product Version";
enum wszCMM_PROP_DISPLAY_HWND = "HWND";
enum wszCMM_PROP_ISMULTITHREADED = "IsMultiThreaded";
alias CERT_VIEW_COLUMN_INDEX = int;
enum : int
{
    CV_COLUMN_LOG_DEFAULT        = 0xfffffffe,
    CV_COLUMN_LOG_FAILED_DEFAULT = 0xfffffffd,
    CV_COLUMN_QUEUE_DEFAULT      = 0xffffffff,
}

alias CERT_DELETE_ROW_FLAGS = int;
enum : int
{
    CDR_EXPIRED              = 0x00000001,
    CDR_REQUEST_LAST_CHANGED = 0x00000002,
}

alias FULL_RESPONSE_PROPERTY_ID = int;
enum : int
{
    FR_PROP_NONE                          = 0x00000000,
    FR_PROP_FULLRESPONSE                  = 0x00000001,
    FR_PROP_STATUSINFOCOUNT               = 0x00000002,
    FR_PROP_BODYPARTSTRING                = 0x00000003,
    FR_PROP_STATUS                        = 0x00000004,
    FR_PROP_STATUSSTRING                  = 0x00000005,
    FR_PROP_OTHERINFOCHOICE               = 0x00000006,
    FR_PROP_FAILINFO                      = 0x00000007,
    FR_PROP_PENDINFOTOKEN                 = 0x00000008,
    FR_PROP_PENDINFOTIME                  = 0x00000009,
    FR_PROP_ISSUEDCERTIFICATEHASH         = 0x0000000a,
    FR_PROP_ISSUEDCERTIFICATE             = 0x0000000b,
    FR_PROP_ISSUEDCERTIFICATECHAIN        = 0x0000000c,
    FR_PROP_ISSUEDCERTIFICATECRLCHAIN     = 0x0000000d,
    FR_PROP_ENCRYPTEDKEYHASH              = 0x0000000e,
    FR_PROP_FULLRESPONSENOPKCS7           = 0x0000000f,
    FR_PROP_CAEXCHANGECERTIFICATEHASH     = 0x00000010,
    FR_PROP_CAEXCHANGECERTIFICATE         = 0x00000011,
    FR_PROP_CAEXCHANGECERTIFICATECHAIN    = 0x00000012,
    FR_PROP_CAEXCHANGECERTIFICATECRLCHAIN = 0x00000013,
    FR_PROP_ATTESTATIONCHALLENGE          = 0x00000014,
    FR_PROP_ATTESTATIONPROVIDERNAME       = 0x00000015,
}

alias CVRC_COLUMN = int;
enum : int
{
    CVRC_COLUMN_SCHEMA = 0x00000000,
    CVRC_COLUMN_RESULT = 0x00000001,
    CVRC_COLUMN_VALUE  = 0x00000002,
    CVRC_COLUMN_MASK   = 0x00000fff,
}

alias CERT_IMPORT_FLAGS = int;
enum : int
{
    CR_IN_BASE64HEADER = 0x00000000,
    CR_IN_BASE64       = 0x00000001,
    CR_IN_BINARY       = 0x00000002,
}

alias CERT_GET_CONFIG_FLAGS = int;
enum : int
{
    CC_DEFAULTCONFIG           = 0x00000000,
    CC_FIRSTCONFIG             = 0x00000002,
    CC_LOCALACTIVECONFIG       = 0x00000004,
    CC_LOCALCONFIG             = 0x00000003,
    CC_UIPICKCONFIG            = 0x00000001,
    CC_UIPICKCONFIGSKIPLOCALCA = 0x00000005,
}

alias ENUM_CERT_COLUMN_VALUE_FLAGS = int;
enum : int
{
    CV_OUT_BASE64              = 0x00000001,
    CV_OUT_BASE64HEADER        = 0x00000000,
    CV_OUT_BASE64REQUESTHEADER = 0x00000003,
    CV_OUT_BASE64X509CRLHEADER = 0x00000009,
    CV_OUT_BINARY              = 0x00000002,
    CV_OUT_HEX                 = 0x00000004,
    CV_OUT_HEXADDR             = 0x0000000a,
    CV_OUT_HEXASCII            = 0x00000005,
    CV_OUT_HEXASCIIADDR        = 0x0000000b,
}

alias PENDING_REQUEST_DESIRED_PROPERTY = int;
enum : int
{
    XEPR_CADNS          = 0x00000001,
    XEPR_CAFRIENDLYNAME = 0x00000003,
    XEPR_CANAME         = 0x00000002,
    XEPR_HASH           = 0x00000008,
    XEPR_REQUESTID      = 0x00000004,
}

alias CERTADMIN_GET_ROLES_FLAGS = uint;
enum : uint
{
    CA_ACCESS_ADMIN    = 0x00000001,
    CA_ACCESS_AUDITOR  = 0x00000004,
    CA_ACCESS_ENROLL   = 0x00000200,
    CA_ACCESS_OFFICER  = 0x00000002,
    CA_ACCESS_OPERATOR = 0x00000008,
    CA_ACCESS_READ     = 0x00000100,
}

alias CR_DISP = uint;
enum : uint
{
    CR_DISP_DENIED             = 0x00000002,
    CR_DISP_ERROR              = 0x00000001,
    CR_DISP_INCOMPLETE         = 0x00000000,
    CR_DISP_ISSUED             = 0x00000003,
    CR_DISP_ISSUED_OUT_OF_BAND = 0x00000004,
    CR_DISP_UNDER_SUBMISSION   = 0x00000005,
}

alias XEKL_KEYSIZE = int;
enum : int
{
    XEKL_KEYSIZE_MIN = 0x00000001,
    XEKL_KEYSIZE_MAX = 0x00000002,
    XEKL_KEYSIZE_INC = 0x00000003,
}

alias CERT_CREATE_REQUEST_FLAGS = int;
enum : int
{
    XECR_CMC         = 0x00000003,
    XECR_PKCS10_V1_5 = 0x00000004,
    XECR_PKCS10_V2_0 = 0x00000001,
    XECR_PKCS7       = 0x00000002,
}

alias CERT_EXIT_EVENT_MASK = uint;
enum : uint
{
    EXITEVENT_CERTDENIED          = 0x00000004,
    EXITEVENT_CERTISSUED          = 0x00000001,
    EXITEVENT_CERTPENDING         = 0x00000002,
    EXITEVENT_CERTRETRIEVEPENDING = 0x00000010,
    EXITEVENT_CERTREVOKED         = 0x00000008,
    EXITEVENT_CRLISSUED           = 0x00000020,
    EXITEVENT_SHUTDOWN            = 0x00000040,
}

alias ADDED_CERT_TYPE = int;
enum : int
{
    XECT_EXTENSION_V1 = 0x00000001,
    XECT_EXTENSION_V2 = 0x00000002,
}

alias CVRC_TABLE = int;
enum : int
{
    CVRC_TABLE_ATTRIBUTES = 0x00004000,
    CVRC_TABLE_CRL        = 0x00005000,
    CVRC_TABLE_EXTENSIONS = 0x00003000,
    CVRC_TABLE_REQCERT    = 0x00000000,
}

alias CERT_PROPERTY_TYPE = int;
enum : int
{
    PROPTYPE_BINARY = 0x00000003,
    PROPTYPE_DATE   = 0x00000002,
    PROPTYPE_LONG   = 0x00000001,
    PROPTYPE_STRING = 0x00000004,
}

alias CERT_ALT_NAME = int;
enum : int
{
    CERT_ALT_NAME_RFC822_NAME    = 0x00000002,
    CERT_ALT_NAME_DNS_NAME       = 0x00000003,
    CERT_ALT_NAME_URL            = 0x00000007,
    CERT_ALT_NAME_REGISTERED_ID  = 0x00000009,
    CERT_ALT_NAME_DIRECTORY_NAME = 0x00000005,
    CERT_ALT_NAME_IP_ADDRESS     = 0x00000008,
    CERT_ALT_NAME_OTHER_NAME     = 0x00000001,
}

alias CSBACKUP_TYPE = uint;
enum : uint
{
    CSBACKUP_TYPE_FULL      = 0x00000001,
    CSBACKUP_TYPE_LOGS_ONLY = 0x00000002,
}

alias XEKL_KEYSPEC = int;
enum : int
{
    XEKL_KEYSPEC_KEYX = 0x00000001,
    XEKL_KEYSPEC_SIG  = 0x00000002,
}

alias CERT_REQUEST_OUT_TYPE = int;
enum : int
{
    CR_OUT_BASE64HEADER = 0x00000000,
    CR_OUT_BASE64       = 0x00000001,
    CR_OUT_BINARY       = 0x00000002,
}

alias CERT_VIEW_SEEK_OPERATOR_FLAGS = int;
enum : int
{
    CVR_SEEK_EQ = 0x00000001,
    CVR_SEEK_LE = 0x00000004,
    CVR_SEEK_LT = 0x00000002,
    CVR_SEEK_GE = 0x00000008,
    CVR_SEEK_GT = 0x00000010,
}

enum IID_IEnumCERTVIEWCOLUMN = GUID(0x9c735be2, 0x57a5, 0x11d1, [0x9b, 0xdb, 0x0, 0xc0, 0x4f, 0xb6, 0x83, 0xfa]);
interface IEnumCERTVIEWCOLUMN : IDispatch
{
    HRESULT Next(int*);
    HRESULT GetName(BSTR*);
    HRESULT GetDisplayName(BSTR*);
    HRESULT GetType(int*);
    HRESULT IsIndexed(int*);
    HRESULT GetMaxLength(int*);
    HRESULT GetValue(ENUM_CERT_COLUMN_VALUE_FLAGS, VARIANT*);
    HRESULT Skip(int);
    HRESULT Reset();
    HRESULT Clone(IEnumCERTVIEWCOLUMN*);
}
enum IID_IEnumCERTVIEWATTRIBUTE = GUID(0xe77db656, 0x7653, 0x11d1, [0x9b, 0xde, 0x0, 0xc0, 0x4f, 0xb6, 0x83, 0xfa]);
interface IEnumCERTVIEWATTRIBUTE : IDispatch
{
    HRESULT Next(int*);
    HRESULT GetName(BSTR*);
    HRESULT GetValue(BSTR*);
    HRESULT Skip(int);
    HRESULT Reset();
    HRESULT Clone(IEnumCERTVIEWATTRIBUTE*);
}
enum IID_IEnumCERTVIEWEXTENSION = GUID(0xe7dd1466, 0x7653, 0x11d1, [0x9b, 0xde, 0x0, 0xc0, 0x4f, 0xb6, 0x83, 0xfa]);
interface IEnumCERTVIEWEXTENSION : IDispatch
{
    HRESULT Next(int*);
    HRESULT GetName(BSTR*);
    HRESULT GetFlags(int*);
    HRESULT GetValue(CERT_PROPERTY_TYPE, ENUM_CERT_COLUMN_VALUE_FLAGS, VARIANT*);
    HRESULT Skip(int);
    HRESULT Reset();
    HRESULT Clone(IEnumCERTVIEWEXTENSION*);
}
enum IID_IEnumCERTVIEWROW = GUID(0xd1157f4c, 0x5af2, 0x11d1, [0x9b, 0xdc, 0x0, 0xc0, 0x4f, 0xb6, 0x83, 0xfa]);
interface IEnumCERTVIEWROW : IDispatch
{
    HRESULT Next(int*);
    HRESULT EnumCertViewColumn(IEnumCERTVIEWCOLUMN*);
    HRESULT EnumCertViewAttribute(int, IEnumCERTVIEWATTRIBUTE*);
    HRESULT EnumCertViewExtension(int, IEnumCERTVIEWEXTENSION*);
    HRESULT Skip(int);
    HRESULT Reset();
    HRESULT Clone(IEnumCERTVIEWROW*);
    HRESULT GetMaxIndex(int*);
}
enum IID_ICertView = GUID(0xc3fac344, 0x1e84, 0x11d1, [0x9b, 0xd6, 0x0, 0xc0, 0x4f, 0xb6, 0x83, 0xfa]);
interface ICertView : IDispatch
{
    HRESULT OpenConnection(const(BSTR));
    HRESULT EnumCertViewColumn(CVRC_COLUMN, IEnumCERTVIEWCOLUMN*);
    HRESULT GetColumnCount(CVRC_COLUMN, int*);
    HRESULT GetColumnIndex(CVRC_COLUMN, const(BSTR), int*);
    HRESULT SetResultColumnCount(int);
    HRESULT SetResultColumn(int);
    HRESULT SetRestriction(CERT_VIEW_COLUMN_INDEX, CERT_VIEW_SEEK_OPERATOR_FLAGS, int, const(VARIANT)*);
    HRESULT OpenView(IEnumCERTVIEWROW*);
}
enum IID_ICertView2 = GUID(0xd594b282, 0x8851, 0x4b61, [0x9c, 0x66, 0x3e, 0xda, 0xdf, 0x84, 0x88, 0x63]);
interface ICertView2 : ICertView
{
    HRESULT SetTable(CVRC_TABLE);
}
enum IID_ICertAdmin = GUID(0x34df6950, 0x7fb6, 0x11d0, [0x88, 0x17, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
interface ICertAdmin : IDispatch
{
    HRESULT IsValidCertificate(const(BSTR), const(BSTR), int*);
    HRESULT GetRevocationReason(int*);
    HRESULT RevokeCertificate(const(BSTR), const(BSTR), int, double);
    HRESULT SetRequestAttributes(const(BSTR), int, const(BSTR));
    HRESULT SetCertificateExtension(const(BSTR), int, const(BSTR), CERT_PROPERTY_TYPE, int, const(VARIANT)*);
    HRESULT DenyRequest(const(BSTR), int);
    HRESULT ResubmitRequest(const(BSTR), int, int*);
    HRESULT PublishCRL(const(BSTR), double);
    HRESULT GetCRL(const(BSTR), int, BSTR*);
    HRESULT ImportCertificate(const(BSTR), const(BSTR), CERT_IMPORT_FLAGS, int*);
}
enum IID_ICertAdmin2 = GUID(0xf7c3ac41, 0xb8ce, 0x4fb4, [0xaa, 0x58, 0x3d, 0x1d, 0xc0, 0xe3, 0x6b, 0x39]);
interface ICertAdmin2 : ICertAdmin
{
    HRESULT PublishCRLs(const(BSTR), double, int);
    HRESULT GetCAProperty(const(BSTR), int, int, int, int, VARIANT*);
    HRESULT SetCAProperty(const(BSTR), int, int, CERT_PROPERTY_TYPE, VARIANT*);
    HRESULT GetCAPropertyFlags(const(BSTR), int, int*);
    HRESULT GetCAPropertyDisplayName(const(BSTR), int, BSTR*);
    HRESULT GetArchivedKey(const(BSTR), int, int, BSTR*);
    HRESULT GetConfigEntry(const(BSTR), const(BSTR), const(BSTR), VARIANT*);
    HRESULT SetConfigEntry(const(BSTR), const(BSTR), const(BSTR), VARIANT*);
    HRESULT ImportKey(const(BSTR), int, const(BSTR), CERT_IMPORT_FLAGS, const(BSTR));
    HRESULT GetMyRoles(const(BSTR), CERTADMIN_GET_ROLES_FLAGS*);
    HRESULT DeleteRow(const(BSTR), CERT_DELETE_ROW_FLAGS, double, CVRC_TABLE, int, int*);
}
enum IID_IOCSPProperty = GUID(0x66fb7839, 0x5f04, 0x4c25, [0xad, 0x18, 0x9f, 0xf1, 0xa8, 0x37, 0x6e, 0xe0]);
interface IOCSPProperty : IDispatch
{
    HRESULT get_Name(BSTR*);
    HRESULT get_Value(VARIANT*);
    HRESULT put_Value(VARIANT);
    HRESULT get_Modified(VARIANT_BOOL*);
}
enum IID_IOCSPPropertyCollection = GUID(0x2597c18d, 0x54e6, 0x4b74, [0x9f, 0xa9, 0xa6, 0xbf, 0xda, 0x99, 0xcb, 0xbe]);
interface IOCSPPropertyCollection : IDispatch
{
    HRESULT get__NewEnum(IUnknown*);
    HRESULT get_Item(int, VARIANT*);
    HRESULT get_Count(int*);
    HRESULT get_ItemByName(const(BSTR), VARIANT*);
    HRESULT CreateProperty(const(BSTR), const(VARIANT)*, IOCSPProperty*);
    HRESULT DeleteProperty(const(BSTR));
    HRESULT InitializeFromProperties(const(VARIANT)*);
    HRESULT GetAllProperties(VARIANT*);
}
enum IID_IOCSPCAConfiguration = GUID(0xaec92b40, 0x3d46, 0x433f, [0x87, 0xd1, 0xb8, 0x4d, 0x5c, 0x1e, 0x79, 0xd]);
interface IOCSPCAConfiguration : IDispatch
{
    HRESULT get_Identifier(BSTR*);
    HRESULT get_CACertificate(VARIANT*);
    HRESULT get_HashAlgorithm(BSTR*);
    HRESULT put_HashAlgorithm(const(BSTR));
    HRESULT get_SigningFlags(uint*);
    HRESULT put_SigningFlags(uint);
    HRESULT get_SigningCertificate(VARIANT*);
    HRESULT put_SigningCertificate(VARIANT);
    HRESULT get_ReminderDuration(uint*);
    HRESULT put_ReminderDuration(uint);
    HRESULT get_ErrorCode(uint*);
    HRESULT get_CSPName(BSTR*);
    HRESULT get_KeySpec(uint*);
    HRESULT get_ProviderCLSID(BSTR*);
    HRESULT put_ProviderCLSID(const(BSTR));
    HRESULT get_ProviderProperties(VARIANT*);
    HRESULT put_ProviderProperties(VARIANT);
    HRESULT get_Modified(VARIANT_BOOL*);
    HRESULT get_LocalRevocationInformation(VARIANT*);
    HRESULT put_LocalRevocationInformation(VARIANT);
    HRESULT get_SigningCertificateTemplate(BSTR*);
    HRESULT put_SigningCertificateTemplate(const(BSTR));
    HRESULT get_CAConfig(BSTR*);
    HRESULT put_CAConfig(const(BSTR));
}
enum IID_IOCSPCAConfigurationCollection = GUID(0x2bebea0b, 0x5ece, 0x4f28, [0xa9, 0x1c, 0x86, 0xb4, 0xbb, 0x20, 0xf0, 0xd3]);
interface IOCSPCAConfigurationCollection : IDispatch
{
    HRESULT get__NewEnum(IUnknown*);
    HRESULT get_Item(int, VARIANT*);
    HRESULT get_Count(int*);
    HRESULT get_ItemByName(const(BSTR), VARIANT*);
    HRESULT CreateCAConfiguration(const(BSTR), VARIANT, IOCSPCAConfiguration*);
    HRESULT DeleteCAConfiguration(const(BSTR));
}
enum IID_IOCSPAdmin = GUID(0x322e830d, 0x67db, 0x4fe9, [0x95, 0x77, 0x45, 0x96, 0xd9, 0xf0, 0x92, 0x94]);
interface IOCSPAdmin : IDispatch
{
    HRESULT get_OCSPServiceProperties(IOCSPPropertyCollection*);
    HRESULT get_OCSPCAConfigurationCollection(IOCSPCAConfigurationCollection*);
    HRESULT GetConfiguration(const(BSTR), VARIANT_BOOL);
    HRESULT SetConfiguration(const(BSTR), VARIANT_BOOL);
    HRESULT GetMyRoles(const(BSTR), int*);
    HRESULT Ping(const(BSTR));
    HRESULT SetSecurity(const(BSTR), const(BSTR));
    HRESULT GetSecurity(const(BSTR), BSTR*);
    HRESULT GetSigningCertificates(const(BSTR), const(VARIANT)*, VARIANT*);
    HRESULT GetHashAlgorithms(const(BSTR), const(BSTR), VARIANT*);
}
alias OCSPSigningFlag = int;
enum : int
{
    OCSP_SF_SILENT                           = 0x00000001,
    OCSP_SF_USE_CACERT                       = 0x00000002,
    OCSP_SF_ALLOW_SIGNINGCERT_AUTORENEWAL    = 0x00000004,
    OCSP_SF_FORCE_SIGNINGCERT_ISSUER_ISCA    = 0x00000008,
    OCSP_SF_AUTODISCOVER_SIGNINGCERT         = 0x00000010,
    OCSP_SF_MANUAL_ASSIGN_SIGNINGCERT        = 0x00000020,
    OCSP_SF_RESPONDER_ID_KEYHASH             = 0x00000040,
    OCSP_SF_RESPONDER_ID_NAME                = 0x00000080,
    OCSP_SF_ALLOW_NONCE_EXTENSION            = 0x00000100,
    OCSP_SF_ALLOW_SIGNINGCERT_AUTOENROLLMENT = 0x00000200,
}

alias OCSPRequestFlag = int;
enum : int
{
    OCSP_RF_REJECT_SIGNED_REQUESTS = 0x00000001,
}

enum CLSID_CCertAdmin = GUID(0x37eabaf0, 0x7fb6, 0x11d0, [0x88, 0x17, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
struct CCertAdmin
{
}
enum CLSID_CCertView = GUID(0xa12d0f7a, 0x1e84, 0x11d1, [0x9b, 0xd6, 0x0, 0xc0, 0x4f, 0xb6, 0x83, 0xfa]);
struct CCertView
{
}
enum CLSID_OCSPPropertyCollection = GUID(0xf935a528, 0xba8a, 0x4dd9, [0xba, 0x79, 0xf2, 0x83, 0x27, 0x5c, 0xb2, 0xde]);
struct OCSPPropertyCollection
{
}
enum CLSID_OCSPAdmin = GUID(0xd3f73511, 0x92c9, 0x47cb, [0x8f, 0xf2, 0x8d, 0x89, 0x1a, 0x7c, 0x4d, 0xe4]);
struct OCSPAdmin
{
}
struct CSEDB_RSTMAPW
{
    PWSTR pwszDatabaseName;
    PWSTR pwszNewDatabaseName;
}
alias FNCERTSRVISSERVERONLINEW = HRESULT function(const(wchar)*, BOOL*);
alias FNCERTSRVBACKUPGETDYNAMICFILELISTW = HRESULT function(void*, ushort**, uint*);
alias FNCERTSRVBACKUPPREPAREW = HRESULT function(const(wchar)*, uint, uint, void**);
alias FNCERTSRVBACKUPGETDATABASENAMESW = HRESULT function(void*, ushort**, uint*);
alias FNCERTSRVBACKUPOPENFILEW = HRESULT function(void*, const(wchar)*, uint, long*);
alias FNCERTSRVBACKUPREAD = HRESULT function(void*, void*, uint, uint*);
alias FNCERTSRVBACKUPCLOSE = HRESULT function(void*);
alias FNCERTSRVBACKUPGETBACKUPLOGSW = HRESULT function(void*, ushort**, uint*);
alias FNCERTSRVBACKUPTRUNCATELOGS = HRESULT function(void*);
alias FNCERTSRVBACKUPEND = HRESULT function(void*);
alias FNCERTSRVBACKUPFREE = void function(void*);
alias FNCERTSRVRESTOREGETDATABASELOCATIONSW = HRESULT function(void*, ushort**, uint*);
alias FNCERTSRVRESTOREPREPAREW = HRESULT function(const(wchar)*, uint, void**);
alias FNCERTSRVRESTOREREGISTERW = HRESULT function(void*, const(wchar)*, const(wchar)*, CSEDB_RSTMAPW*, int, const(wchar)*, uint, uint);
alias FNCERTSRVRESTOREREGISTERCOMPLETE = HRESULT function(void*, HRESULT);
alias FNCERTSRVRESTOREEND = HRESULT function(void*);
alias FNCERTSRVSERVERCONTROLW = HRESULT function(const(wchar)*, uint, uint*, ubyte**);
enum IID_ICertServerPolicy = GUID(0xaa000922, 0xffbe, 0x11cf, [0x88, 0x0, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
interface ICertServerPolicy : IDispatch
{
    HRESULT SetContext(int);
    HRESULT GetRequestProperty(const(BSTR), int, VARIANT*);
    HRESULT GetRequestAttribute(const(BSTR), BSTR*);
    HRESULT GetCertificateProperty(const(BSTR), CERT_PROPERTY_TYPE, VARIANT*);
    HRESULT SetCertificateProperty(const(BSTR), int, const(VARIANT)*);
    HRESULT GetCertificateExtension(const(BSTR), CERT_PROPERTY_TYPE, VARIANT*);
    HRESULT GetCertificateExtensionFlags(int*);
    HRESULT SetCertificateExtension(const(BSTR), int, int, const(VARIANT)*);
    HRESULT EnumerateExtensionsSetup(int);
    HRESULT EnumerateExtensions(BSTR*);
    HRESULT EnumerateExtensionsClose();
    HRESULT EnumerateAttributesSetup(int);
    HRESULT EnumerateAttributes(BSTR*);
    HRESULT EnumerateAttributesClose();
}
enum IID_ICertServerExit = GUID(0x4ba9eb90, 0x732c, 0x11d0, [0x88, 0x16, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
interface ICertServerExit : IDispatch
{
    HRESULT SetContext(int);
    HRESULT GetRequestProperty(const(BSTR), int, VARIANT*);
    HRESULT GetRequestAttribute(const(BSTR), BSTR*);
    HRESULT GetCertificateProperty(const(BSTR), int, VARIANT*);
    HRESULT GetCertificateExtension(const(BSTR), int, VARIANT*);
    HRESULT GetCertificateExtensionFlags(int*);
    HRESULT EnumerateExtensionsSetup(int);
    HRESULT EnumerateExtensions(BSTR*);
    HRESULT EnumerateExtensionsClose();
    HRESULT EnumerateAttributesSetup(int);
    HRESULT EnumerateAttributes(BSTR*);
    HRESULT EnumerateAttributesClose();
}
enum IID_ICertGetConfig = GUID(0xc7ea09c0, 0xce17, 0x11d0, [0x88, 0x33, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
interface ICertGetConfig : IDispatch
{
    HRESULT GetConfig(CERT_GET_CONFIG_FLAGS, BSTR*);
}
enum IID_ICertConfig = GUID(0x372fce34, 0x4324, 0x11d0, [0x88, 0x10, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
interface ICertConfig : IDispatch
{
    HRESULT Reset(int, int*);
    HRESULT Next(int*);
    HRESULT GetField(const(BSTR), BSTR*);
    HRESULT GetConfig(int, BSTR*);
}
enum IID_ICertConfig2 = GUID(0x7a18edde, 0x7e78, 0x4163, [0x8d, 0xed, 0x78, 0xe2, 0xc9, 0xce, 0xe9, 0x24]);
interface ICertConfig2 : ICertConfig
{
    HRESULT SetSharedFolder(const(BSTR));
}
enum IID_ICertRequest = GUID(0x14e4840, 0x5523, 0x11d0, [0x88, 0x12, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
interface ICertRequest : IDispatch
{
    HRESULT Submit(int, const(BSTR), const(BSTR), const(BSTR), int*);
    HRESULT RetrievePending(int, const(BSTR), int*);
    HRESULT GetLastStatus(int*);
    HRESULT GetRequestId(int*);
    HRESULT GetDispositionMessage(BSTR*);
    HRESULT GetCACertificate(int, const(BSTR), int, BSTR*);
    HRESULT GetCertificate(int, BSTR*);
}
enum IID_ICertRequest2 = GUID(0xa4772988, 0x4a85, 0x4fa9, [0x82, 0x4e, 0xb5, 0xcf, 0x5c, 0x16, 0x40, 0x5a]);
interface ICertRequest2 : ICertRequest
{
    HRESULT GetIssuedCertificate(const(BSTR), int, const(BSTR), CR_DISP*);
    HRESULT GetErrorMessageText(int, int, BSTR*);
    HRESULT GetCAProperty(const(BSTR), int, int, int, int, VARIANT*);
    HRESULT GetCAPropertyFlags(const(BSTR), int, int*);
    HRESULT GetCAPropertyDisplayName(const(BSTR), int, BSTR*);
    HRESULT GetFullResponseProperty(FULL_RESPONSE_PROPERTY_ID, int, CERT_PROPERTY_TYPE, CERT_REQUEST_OUT_TYPE, VARIANT*);
}
alias X509EnrollmentAuthFlags = int;
enum : int
{
    X509AuthNone        = 0x00000000,
    X509AuthAnonymous   = 0x00000001,
    X509AuthKerberos    = 0x00000002,
    X509AuthUsername    = 0x00000004,
    X509AuthCertificate = 0x00000008,
}

enum IID_ICertRequest3 = GUID(0xafc8f92b, 0x33a2, 0x4861, [0xbf, 0x36, 0x29, 0x33, 0xb7, 0xcd, 0x67, 0xb3]);
interface ICertRequest3 : ICertRequest2
{
    HRESULT SetCredential(int, X509EnrollmentAuthFlags, BSTR, BSTR);
    HRESULT GetRequestIdString(BSTR*);
    HRESULT GetIssuedCertificate2(BSTR, BSTR, BSTR, CR_DISP*);
    HRESULT GetRefreshPolicy(VARIANT_BOOL*);
}
enum CLSID_CCertGetConfig = GUID(0xc6cc49b0, 0xce17, 0x11d0, [0x88, 0x33, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
struct CCertGetConfig
{
}
enum CLSID_CCertConfig = GUID(0x372fce38, 0x4324, 0x11d0, [0x88, 0x10, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
struct CCertConfig
{
}
enum CLSID_CCertRequest = GUID(0x98aff3f0, 0x5524, 0x11d0, [0x88, 0x12, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
struct CCertRequest
{
}
enum CLSID_CCertServerPolicy = GUID(0xaa000926, 0xffbe, 0x11cf, [0x88, 0x0, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
struct CCertServerPolicy
{
}
enum CLSID_CCertServerExit = GUID(0x4c4a5e40, 0x732c, 0x11d0, [0x88, 0x16, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
struct CCertServerExit
{
}
enum IID_ICertManageModule = GUID(0xe7d7ad42, 0xbd3d, 0x11d1, [0x9a, 0x4d, 0x0, 0xc0, 0x4f, 0xc2, 0x97, 0xeb]);
interface ICertManageModule : IDispatch
{
    HRESULT GetProperty(const(BSTR), BSTR, BSTR, int, VARIANT*);
    HRESULT SetProperty(const(BSTR), BSTR, BSTR, int, const(VARIANT)*);
    HRESULT Configure(const(BSTR), BSTR, int);
}
struct CERTTRANSBLOB
{
    uint cb;
    ubyte* pb;
}
struct CERTVIEWRESTRICTION
{
    uint ColumnIndex;
    int SeekOperator;
    int SortOrder;
    ubyte* pbValue;
    uint cbValue;
}
enum IID_ICertPolicy = GUID(0x38bb5a00, 0x7636, 0x11d0, [0xb4, 0x13, 0x0, 0xa0, 0xc9, 0x1b, 0xbf, 0x8c]);
interface ICertPolicy : IDispatch
{
    HRESULT Initialize(const(BSTR));
    HRESULT VerifyRequest(const(BSTR), int, int, int, int*);
    HRESULT GetDescription(BSTR*);
    HRESULT ShutDown();
}
enum IID_ICertPolicy2 = GUID(0x3db4910e, 0x8001, 0x4bf1, [0xaa, 0x1b, 0xf4, 0x3a, 0x80, 0x83, 0x17, 0xa0]);
interface ICertPolicy2 : ICertPolicy
{
    HRESULT GetManageModule(ICertManageModule*);
}
alias X509SCEPMessageType = int;
enum : int
{
    SCEPMessageUnknown              = 0xffffffff,
    SCEPMessageCertResponse         = 0x00000003,
    SCEPMessagePKCSRequest          = 0x00000013,
    SCEPMessageGetCertInitial       = 0x00000014,
    SCEPMessageGetCert              = 0x00000015,
    SCEPMessageGetCRL               = 0x00000016,
    SCEPMessageClaimChallengeAnswer = 0x00000029,
}

alias X509SCEPDisposition = int;
enum : int
{
    SCEPDispositionUnknown          = 0xffffffff,
    SCEPDispositionSuccess          = 0x00000000,
    SCEPDispositionFailure          = 0x00000002,
    SCEPDispositionPending          = 0x00000003,
    SCEPDispositionPendingChallenge = 0x0000000b,
}

alias X509SCEPFailInfo = int;
enum : int
{
    SCEPFailUnknown         = 0xffffffff,
    SCEPFailBadAlgorithm    = 0x00000000,
    SCEPFailBadMessageCheck = 0x00000001,
    SCEPFailBadRequest      = 0x00000002,
    SCEPFailBadTime         = 0x00000003,
    SCEPFailBadCertId       = 0x00000004,
}

enum IID_INDESPolicy = GUID(0x13ca515d, 0x431d, 0x46cc, [0x8c, 0x2e, 0x1d, 0xa2, 0x69, 0xbb, 0xd6, 0x25]);
interface INDESPolicy : IUnknown
{
    HRESULT Initialize();
    HRESULT Uninitialize();
    HRESULT GenerateChallenge(const(wchar)*, const(wchar)*, PWSTR*);
    HRESULT VerifyRequest(CERTTRANSBLOB*, CERTTRANSBLOB*, const(wchar)*, const(wchar)*, BOOL*);
    HRESULT Notify(const(wchar)*, const(wchar)*, X509SCEPDisposition, int, CERTTRANSBLOB*);
}
alias CERTENROLL_OBJECTID = int;
enum : int
{
    XCN_OID_NONE                                          = 0x00000000,
    XCN_OID_RSA                                           = 0x00000001,
    XCN_OID_PKCS                                          = 0x00000002,
    XCN_OID_RSA_HASH                                      = 0x00000003,
    XCN_OID_RSA_ENCRYPT                                   = 0x00000004,
    XCN_OID_PKCS_1                                        = 0x00000005,
    XCN_OID_PKCS_2                                        = 0x00000006,
    XCN_OID_PKCS_3                                        = 0x00000007,
    XCN_OID_PKCS_4                                        = 0x00000008,
    XCN_OID_PKCS_5                                        = 0x00000009,
    XCN_OID_PKCS_6                                        = 0x0000000a,
    XCN_OID_PKCS_7                                        = 0x0000000b,
    XCN_OID_PKCS_8                                        = 0x0000000c,
    XCN_OID_PKCS_9                                        = 0x0000000d,
    XCN_OID_PKCS_10                                       = 0x0000000e,
    XCN_OID_PKCS_12                                       = 0x0000000f,
    XCN_OID_RSA_RSA                                       = 0x00000010,
    XCN_OID_RSA_MD2RSA                                    = 0x00000011,
    XCN_OID_RSA_MD4RSA                                    = 0x00000012,
    XCN_OID_RSA_MD5RSA                                    = 0x00000013,
    XCN_OID_RSA_SHA1RSA                                   = 0x00000014,
    XCN_OID_RSA_SETOAEP_RSA                               = 0x00000015,
    XCN_OID_RSA_DH                                        = 0x00000016,
    XCN_OID_RSA_data                                      = 0x00000017,
    XCN_OID_RSA_signedData                                = 0x00000018,
    XCN_OID_RSA_envelopedData                             = 0x00000019,
    XCN_OID_RSA_signEnvData                               = 0x0000001a,
    XCN_OID_RSA_digestedData                              = 0x0000001b,
    XCN_OID_RSA_hashedData                                = 0x0000001c,
    XCN_OID_RSA_encryptedData                             = 0x0000001d,
    XCN_OID_RSA_emailAddr                                 = 0x0000001e,
    XCN_OID_RSA_unstructName                              = 0x0000001f,
    XCN_OID_RSA_contentType                               = 0x00000020,
    XCN_OID_RSA_messageDigest                             = 0x00000021,
    XCN_OID_RSA_signingTime                               = 0x00000022,
    XCN_OID_RSA_counterSign                               = 0x00000023,
    XCN_OID_RSA_challengePwd                              = 0x00000024,
    XCN_OID_RSA_unstructAddr                              = 0x00000025,
    XCN_OID_RSA_extCertAttrs                              = 0x00000026,
    XCN_OID_RSA_certExtensions                            = 0x00000027,
    XCN_OID_RSA_SMIMECapabilities                         = 0x00000028,
    XCN_OID_RSA_preferSignedData                          = 0x00000029,
    XCN_OID_RSA_SMIMEalg                                  = 0x0000002a,
    XCN_OID_RSA_SMIMEalgESDH                              = 0x0000002b,
    XCN_OID_RSA_SMIMEalgCMS3DESwrap                       = 0x0000002c,
    XCN_OID_RSA_SMIMEalgCMSRC2wrap                        = 0x0000002d,
    XCN_OID_RSA_MD2                                       = 0x0000002e,
    XCN_OID_RSA_MD4                                       = 0x0000002f,
    XCN_OID_RSA_MD5                                       = 0x00000030,
    XCN_OID_RSA_RC2CBC                                    = 0x00000031,
    XCN_OID_RSA_RC4                                       = 0x00000032,
    XCN_OID_RSA_DES_EDE3_CBC                              = 0x00000033,
    XCN_OID_RSA_RC5_CBCPad                                = 0x00000034,
    XCN_OID_ANSI_X942                                     = 0x00000035,
    XCN_OID_ANSI_X942_DH                                  = 0x00000036,
    XCN_OID_X957                                          = 0x00000037,
    XCN_OID_X957_DSA                                      = 0x00000038,
    XCN_OID_X957_SHA1DSA                                  = 0x00000039,
    XCN_OID_DS                                            = 0x0000003a,
    XCN_OID_DSALG                                         = 0x0000003b,
    XCN_OID_DSALG_CRPT                                    = 0x0000003c,
    XCN_OID_DSALG_HASH                                    = 0x0000003d,
    XCN_OID_DSALG_SIGN                                    = 0x0000003e,
    XCN_OID_DSALG_RSA                                     = 0x0000003f,
    XCN_OID_OIW                                           = 0x00000040,
    XCN_OID_OIWSEC                                        = 0x00000041,
    XCN_OID_OIWSEC_md4RSA                                 = 0x00000042,
    XCN_OID_OIWSEC_md5RSA                                 = 0x00000043,
    XCN_OID_OIWSEC_md4RSA2                                = 0x00000044,
    XCN_OID_OIWSEC_desECB                                 = 0x00000045,
    XCN_OID_OIWSEC_desCBC                                 = 0x00000046,
    XCN_OID_OIWSEC_desOFB                                 = 0x00000047,
    XCN_OID_OIWSEC_desCFB                                 = 0x00000048,
    XCN_OID_OIWSEC_desMAC                                 = 0x00000049,
    XCN_OID_OIWSEC_rsaSign                                = 0x0000004a,
    XCN_OID_OIWSEC_dsa                                    = 0x0000004b,
    XCN_OID_OIWSEC_shaDSA                                 = 0x0000004c,
    XCN_OID_OIWSEC_mdc2RSA                                = 0x0000004d,
    XCN_OID_OIWSEC_shaRSA                                 = 0x0000004e,
    XCN_OID_OIWSEC_dhCommMod                              = 0x0000004f,
    XCN_OID_OIWSEC_desEDE                                 = 0x00000050,
    XCN_OID_OIWSEC_sha                                    = 0x00000051,
    XCN_OID_OIWSEC_mdc2                                   = 0x00000052,
    XCN_OID_OIWSEC_dsaComm                                = 0x00000053,
    XCN_OID_OIWSEC_dsaCommSHA                             = 0x00000054,
    XCN_OID_OIWSEC_rsaXchg                                = 0x00000055,
    XCN_OID_OIWSEC_keyHashSeal                            = 0x00000056,
    XCN_OID_OIWSEC_md2RSASign                             = 0x00000057,
    XCN_OID_OIWSEC_md5RSASign                             = 0x00000058,
    XCN_OID_OIWSEC_sha1                                   = 0x00000059,
    XCN_OID_OIWSEC_dsaSHA1                                = 0x0000005a,
    XCN_OID_OIWSEC_dsaCommSHA1                            = 0x0000005b,
    XCN_OID_OIWSEC_sha1RSASign                            = 0x0000005c,
    XCN_OID_OIWDIR                                        = 0x0000005d,
    XCN_OID_OIWDIR_CRPT                                   = 0x0000005e,
    XCN_OID_OIWDIR_HASH                                   = 0x0000005f,
    XCN_OID_OIWDIR_SIGN                                   = 0x00000060,
    XCN_OID_OIWDIR_md2                                    = 0x00000061,
    XCN_OID_OIWDIR_md2RSA                                 = 0x00000062,
    XCN_OID_INFOSEC                                       = 0x00000063,
    XCN_OID_INFOSEC_sdnsSignature                         = 0x00000064,
    XCN_OID_INFOSEC_mosaicSignature                       = 0x00000065,
    XCN_OID_INFOSEC_sdnsConfidentiality                   = 0x00000066,
    XCN_OID_INFOSEC_mosaicConfidentiality                 = 0x00000067,
    XCN_OID_INFOSEC_sdnsIntegrity                         = 0x00000068,
    XCN_OID_INFOSEC_mosaicIntegrity                       = 0x00000069,
    XCN_OID_INFOSEC_sdnsTokenProtection                   = 0x0000006a,
    XCN_OID_INFOSEC_mosaicTokenProtection                 = 0x0000006b,
    XCN_OID_INFOSEC_sdnsKeyManagement                     = 0x0000006c,
    XCN_OID_INFOSEC_mosaicKeyManagement                   = 0x0000006d,
    XCN_OID_INFOSEC_sdnsKMandSig                          = 0x0000006e,
    XCN_OID_INFOSEC_mosaicKMandSig                        = 0x0000006f,
    XCN_OID_INFOSEC_SuiteASignature                       = 0x00000070,
    XCN_OID_INFOSEC_SuiteAConfidentiality                 = 0x00000071,
    XCN_OID_INFOSEC_SuiteAIntegrity                       = 0x00000072,
    XCN_OID_INFOSEC_SuiteATokenProtection                 = 0x00000073,
    XCN_OID_INFOSEC_SuiteAKeyManagement                   = 0x00000074,
    XCN_OID_INFOSEC_SuiteAKMandSig                        = 0x00000075,
    XCN_OID_INFOSEC_mosaicUpdatedSig                      = 0x00000076,
    XCN_OID_INFOSEC_mosaicKMandUpdSig                     = 0x00000077,
    XCN_OID_INFOSEC_mosaicUpdatedInteg                    = 0x00000078,
    XCN_OID_COMMON_NAME                                   = 0x00000079,
    XCN_OID_SUR_NAME                                      = 0x0000007a,
    XCN_OID_DEVICE_SERIAL_NUMBER                          = 0x0000007b,
    XCN_OID_COUNTRY_NAME                                  = 0x0000007c,
    XCN_OID_LOCALITY_NAME                                 = 0x0000007d,
    XCN_OID_STATE_OR_PROVINCE_NAME                        = 0x0000007e,
    XCN_OID_STREET_ADDRESS                                = 0x0000007f,
    XCN_OID_ORGANIZATION_NAME                             = 0x00000080,
    XCN_OID_ORGANIZATIONAL_UNIT_NAME                      = 0x00000081,
    XCN_OID_TITLE                                         = 0x00000082,
    XCN_OID_DESCRIPTION                                   = 0x00000083,
    XCN_OID_SEARCH_GUIDE                                  = 0x00000084,
    XCN_OID_BUSINESS_CATEGORY                             = 0x00000085,
    XCN_OID_POSTAL_ADDRESS                                = 0x00000086,
    XCN_OID_POSTAL_CODE                                   = 0x00000087,
    XCN_OID_POST_OFFICE_BOX                               = 0x00000088,
    XCN_OID_PHYSICAL_DELIVERY_OFFICE_NAME                 = 0x00000089,
    XCN_OID_TELEPHONE_NUMBER                              = 0x0000008a,
    XCN_OID_TELEX_NUMBER                                  = 0x0000008b,
    XCN_OID_TELETEXT_TERMINAL_IDENTIFIER                  = 0x0000008c,
    XCN_OID_FACSIMILE_TELEPHONE_NUMBER                    = 0x0000008d,
    XCN_OID_X21_ADDRESS                                   = 0x0000008e,
    XCN_OID_INTERNATIONAL_ISDN_NUMBER                     = 0x0000008f,
    XCN_OID_REGISTERED_ADDRESS                            = 0x00000090,
    XCN_OID_DESTINATION_INDICATOR                         = 0x00000091,
    XCN_OID_PREFERRED_DELIVERY_METHOD                     = 0x00000092,
    XCN_OID_PRESENTATION_ADDRESS                          = 0x00000093,
    XCN_OID_SUPPORTED_APPLICATION_CONTEXT                 = 0x00000094,
    XCN_OID_MEMBER                                        = 0x00000095,
    XCN_OID_OWNER                                         = 0x00000096,
    XCN_OID_ROLE_OCCUPANT                                 = 0x00000097,
    XCN_OID_SEE_ALSO                                      = 0x00000098,
    XCN_OID_USER_PASSWORD                                 = 0x00000099,
    XCN_OID_USER_CERTIFICATE                              = 0x0000009a,
    XCN_OID_CA_CERTIFICATE                                = 0x0000009b,
    XCN_OID_AUTHORITY_REVOCATION_LIST                     = 0x0000009c,
    XCN_OID_CERTIFICATE_REVOCATION_LIST                   = 0x0000009d,
    XCN_OID_CROSS_CERTIFICATE_PAIR                        = 0x0000009e,
    XCN_OID_GIVEN_NAME                                    = 0x0000009f,
    XCN_OID_INITIALS                                      = 0x000000a0,
    XCN_OID_DN_QUALIFIER                                  = 0x000000a1,
    XCN_OID_DOMAIN_COMPONENT                              = 0x000000a2,
    XCN_OID_PKCS_12_FRIENDLY_NAME_ATTR                    = 0x000000a3,
    XCN_OID_PKCS_12_LOCAL_KEY_ID                          = 0x000000a4,
    XCN_OID_PKCS_12_KEY_PROVIDER_NAME_ATTR                = 0x000000a5,
    XCN_OID_LOCAL_MACHINE_KEYSET                          = 0x000000a6,
    XCN_OID_PKCS_12_EXTENDED_ATTRIBUTES                   = 0x000000a7,
    XCN_OID_KEYID_RDN                                     = 0x000000a8,
    XCN_OID_AUTHORITY_KEY_IDENTIFIER                      = 0x000000a9,
    XCN_OID_KEY_ATTRIBUTES                                = 0x000000aa,
    XCN_OID_CERT_POLICIES_95                              = 0x000000ab,
    XCN_OID_KEY_USAGE_RESTRICTION                         = 0x000000ac,
    XCN_OID_SUBJECT_ALT_NAME                              = 0x000000ad,
    XCN_OID_ISSUER_ALT_NAME                               = 0x000000ae,
    XCN_OID_BASIC_CONSTRAINTS                             = 0x000000af,
    XCN_OID_KEY_USAGE                                     = 0x000000b0,
    XCN_OID_PRIVATEKEY_USAGE_PERIOD                       = 0x000000b1,
    XCN_OID_BASIC_CONSTRAINTS2                            = 0x000000b2,
    XCN_OID_CERT_POLICIES                                 = 0x000000b3,
    XCN_OID_ANY_CERT_POLICY                               = 0x000000b4,
    XCN_OID_AUTHORITY_KEY_IDENTIFIER2                     = 0x000000b5,
    XCN_OID_SUBJECT_KEY_IDENTIFIER                        = 0x000000b6,
    XCN_OID_SUBJECT_ALT_NAME2                             = 0x000000b7,
    XCN_OID_ISSUER_ALT_NAME2                              = 0x000000b8,
    XCN_OID_CRL_REASON_CODE                               = 0x000000b9,
    XCN_OID_REASON_CODE_HOLD                              = 0x000000ba,
    XCN_OID_CRL_DIST_POINTS                               = 0x000000bb,
    XCN_OID_ENHANCED_KEY_USAGE                            = 0x000000bc,
    XCN_OID_CRL_NUMBER                                    = 0x000000bd,
    XCN_OID_DELTA_CRL_INDICATOR                           = 0x000000be,
    XCN_OID_ISSUING_DIST_POINT                            = 0x000000bf,
    XCN_OID_FRESHEST_CRL                                  = 0x000000c0,
    XCN_OID_NAME_CONSTRAINTS                              = 0x000000c1,
    XCN_OID_POLICY_MAPPINGS                               = 0x000000c2,
    XCN_OID_LEGACY_POLICY_MAPPINGS                        = 0x000000c3,
    XCN_OID_POLICY_CONSTRAINTS                            = 0x000000c4,
    XCN_OID_RENEWAL_CERTIFICATE                           = 0x000000c5,
    XCN_OID_ENROLLMENT_NAME_VALUE_PAIR                    = 0x000000c6,
    XCN_OID_ENROLLMENT_CSP_PROVIDER                       = 0x000000c7,
    XCN_OID_OS_VERSION                                    = 0x000000c8,
    XCN_OID_ENROLLMENT_AGENT                              = 0x000000c9,
    XCN_OID_PKIX                                          = 0x000000ca,
    XCN_OID_PKIX_PE                                       = 0x000000cb,
    XCN_OID_AUTHORITY_INFO_ACCESS                         = 0x000000cc,
    XCN_OID_BIOMETRIC_EXT                                 = 0x000000cd,
    XCN_OID_LOGOTYPE_EXT                                  = 0x000000ce,
    XCN_OID_CERT_EXTENSIONS                               = 0x000000cf,
    XCN_OID_NEXT_UPDATE_LOCATION                          = 0x000000d0,
    XCN_OID_REMOVE_CERTIFICATE                            = 0x000000d1,
    XCN_OID_CROSS_CERT_DIST_POINTS                        = 0x000000d2,
    XCN_OID_CTL                                           = 0x000000d3,
    XCN_OID_SORTED_CTL                                    = 0x000000d4,
    XCN_OID_SERIALIZED                                    = 0x000000d5,
    XCN_OID_NT_PRINCIPAL_NAME                             = 0x000000d6,
    XCN_OID_PRODUCT_UPDATE                                = 0x000000d7,
    XCN_OID_ANY_APPLICATION_POLICY                        = 0x000000d8,
    XCN_OID_AUTO_ENROLL_CTL_USAGE                         = 0x000000d9,
    XCN_OID_ENROLL_CERTTYPE_EXTENSION                     = 0x000000da,
    XCN_OID_CERT_MANIFOLD                                 = 0x000000db,
    XCN_OID_CERTSRV_CA_VERSION                            = 0x000000dc,
    XCN_OID_CERTSRV_PREVIOUS_CERT_HASH                    = 0x000000dd,
    XCN_OID_CRL_VIRTUAL_BASE                              = 0x000000de,
    XCN_OID_CRL_NEXT_PUBLISH                              = 0x000000df,
    XCN_OID_KP_CA_EXCHANGE                                = 0x000000e0,
    XCN_OID_KP_KEY_RECOVERY_AGENT                         = 0x000000e1,
    XCN_OID_CERTIFICATE_TEMPLATE                          = 0x000000e2,
    XCN_OID_ENTERPRISE_OID_ROOT                           = 0x000000e3,
    XCN_OID_RDN_DUMMY_SIGNER                              = 0x000000e4,
    XCN_OID_APPLICATION_CERT_POLICIES                     = 0x000000e5,
    XCN_OID_APPLICATION_POLICY_MAPPINGS                   = 0x000000e6,
    XCN_OID_APPLICATION_POLICY_CONSTRAINTS                = 0x000000e7,
    XCN_OID_ARCHIVED_KEY_ATTR                             = 0x000000e8,
    XCN_OID_CRL_SELF_CDP                                  = 0x000000e9,
    XCN_OID_REQUIRE_CERT_CHAIN_POLICY                     = 0x000000ea,
    XCN_OID_ARCHIVED_KEY_CERT_HASH                        = 0x000000eb,
    XCN_OID_ISSUED_CERT_HASH                              = 0x000000ec,
    XCN_OID_DS_EMAIL_REPLICATION                          = 0x000000ed,
    XCN_OID_REQUEST_CLIENT_INFO                           = 0x000000ee,
    XCN_OID_ENCRYPTED_KEY_HASH                            = 0x000000ef,
    XCN_OID_CERTSRV_CROSSCA_VERSION                       = 0x000000f0,
    XCN_OID_NTDS_REPLICATION                              = 0x000000f1,
    XCN_OID_SUBJECT_DIR_ATTRS                             = 0x000000f2,
    XCN_OID_PKIX_KP                                       = 0x000000f3,
    XCN_OID_PKIX_KP_SERVER_AUTH                           = 0x000000f4,
    XCN_OID_PKIX_KP_CLIENT_AUTH                           = 0x000000f5,
    XCN_OID_PKIX_KP_CODE_SIGNING                          = 0x000000f6,
    XCN_OID_PKIX_KP_EMAIL_PROTECTION                      = 0x000000f7,
    XCN_OID_PKIX_KP_IPSEC_END_SYSTEM                      = 0x000000f8,
    XCN_OID_PKIX_KP_IPSEC_TUNNEL                          = 0x000000f9,
    XCN_OID_PKIX_KP_IPSEC_USER                            = 0x000000fa,
    XCN_OID_PKIX_KP_TIMESTAMP_SIGNING                     = 0x000000fb,
    XCN_OID_PKIX_KP_OCSP_SIGNING                          = 0x000000fc,
    XCN_OID_PKIX_OCSP_NOCHECK                             = 0x000000fd,
    XCN_OID_IPSEC_KP_IKE_INTERMEDIATE                     = 0x000000fe,
    XCN_OID_KP_CTL_USAGE_SIGNING                          = 0x000000ff,
    XCN_OID_KP_TIME_STAMP_SIGNING                         = 0x00000100,
    XCN_OID_SERVER_GATED_CRYPTO                           = 0x00000101,
    XCN_OID_SGC_NETSCAPE                                  = 0x00000102,
    XCN_OID_KP_EFS                                        = 0x00000103,
    XCN_OID_EFS_RECOVERY                                  = 0x00000104,
    XCN_OID_WHQL_CRYPTO                                   = 0x00000105,
    XCN_OID_NT5_CRYPTO                                    = 0x00000106,
    XCN_OID_OEM_WHQL_CRYPTO                               = 0x00000107,
    XCN_OID_EMBEDDED_NT_CRYPTO                            = 0x00000108,
    XCN_OID_ROOT_LIST_SIGNER                              = 0x00000109,
    XCN_OID_KP_QUALIFIED_SUBORDINATION                    = 0x0000010a,
    XCN_OID_KP_KEY_RECOVERY                               = 0x0000010b,
    XCN_OID_KP_DOCUMENT_SIGNING                           = 0x0000010c,
    XCN_OID_KP_LIFETIME_SIGNING                           = 0x0000010d,
    XCN_OID_KP_MOBILE_DEVICE_SOFTWARE                     = 0x0000010e,
    XCN_OID_KP_SMART_DISPLAY                              = 0x0000010f,
    XCN_OID_KP_CSP_SIGNATURE                              = 0x00000110,
    XCN_OID_DRM                                           = 0x00000111,
    XCN_OID_DRM_INDIVIDUALIZATION                         = 0x00000112,
    XCN_OID_LICENSES                                      = 0x00000113,
    XCN_OID_LICENSE_SERVER                                = 0x00000114,
    XCN_OID_KP_SMARTCARD_LOGON                            = 0x00000115,
    XCN_OID_YESNO_TRUST_ATTR                              = 0x00000116,
    XCN_OID_PKIX_POLICY_QUALIFIER_CPS                     = 0x00000117,
    XCN_OID_PKIX_POLICY_QUALIFIER_USERNOTICE              = 0x00000118,
    XCN_OID_CERT_POLICIES_95_QUALIFIER1                   = 0x00000119,
    XCN_OID_PKIX_ACC_DESCR                                = 0x0000011a,
    XCN_OID_PKIX_OCSP                                     = 0x0000011b,
    XCN_OID_PKIX_CA_ISSUERS                               = 0x0000011c,
    XCN_OID_VERISIGN_PRIVATE_6_9                          = 0x0000011d,
    XCN_OID_VERISIGN_ONSITE_JURISDICTION_HASH             = 0x0000011e,
    XCN_OID_VERISIGN_BITSTRING_6_13                       = 0x0000011f,
    XCN_OID_VERISIGN_ISS_STRONG_CRYPTO                    = 0x00000120,
    XCN_OID_NETSCAPE                                      = 0x00000121,
    XCN_OID_NETSCAPE_CERT_EXTENSION                       = 0x00000122,
    XCN_OID_NETSCAPE_CERT_TYPE                            = 0x00000123,
    XCN_OID_NETSCAPE_BASE_URL                             = 0x00000124,
    XCN_OID_NETSCAPE_REVOCATION_URL                       = 0x00000125,
    XCN_OID_NETSCAPE_CA_REVOCATION_URL                    = 0x00000126,
    XCN_OID_NETSCAPE_CERT_RENEWAL_URL                     = 0x00000127,
    XCN_OID_NETSCAPE_CA_POLICY_URL                        = 0x00000128,
    XCN_OID_NETSCAPE_SSL_SERVER_NAME                      = 0x00000129,
    XCN_OID_NETSCAPE_COMMENT                              = 0x0000012a,
    XCN_OID_NETSCAPE_DATA_TYPE                            = 0x0000012b,
    XCN_OID_NETSCAPE_CERT_SEQUENCE                        = 0x0000012c,
    XCN_OID_CT_PKI_DATA                                   = 0x0000012d,
    XCN_OID_CT_PKI_RESPONSE                               = 0x0000012e,
    XCN_OID_PKIX_NO_SIGNATURE                             = 0x0000012f,
    XCN_OID_CMC                                           = 0x00000130,
    XCN_OID_CMC_STATUS_INFO                               = 0x00000131,
    XCN_OID_CMC_IDENTIFICATION                            = 0x00000132,
    XCN_OID_CMC_IDENTITY_PROOF                            = 0x00000133,
    XCN_OID_CMC_DATA_RETURN                               = 0x00000134,
    XCN_OID_CMC_TRANSACTION_ID                            = 0x00000135,
    XCN_OID_CMC_SENDER_NONCE                              = 0x00000136,
    XCN_OID_CMC_RECIPIENT_NONCE                           = 0x00000137,
    XCN_OID_CMC_ADD_EXTENSIONS                            = 0x00000138,
    XCN_OID_CMC_ENCRYPTED_POP                             = 0x00000139,
    XCN_OID_CMC_DECRYPTED_POP                             = 0x0000013a,
    XCN_OID_CMC_LRA_POP_WITNESS                           = 0x0000013b,
    XCN_OID_CMC_GET_CERT                                  = 0x0000013c,
    XCN_OID_CMC_GET_CRL                                   = 0x0000013d,
    XCN_OID_CMC_REVOKE_REQUEST                            = 0x0000013e,
    XCN_OID_CMC_REG_INFO                                  = 0x0000013f,
    XCN_OID_CMC_RESPONSE_INFO                             = 0x00000140,
    XCN_OID_CMC_QUERY_PENDING                             = 0x00000141,
    XCN_OID_CMC_ID_POP_LINK_RANDOM                        = 0x00000142,
    XCN_OID_CMC_ID_POP_LINK_WITNESS                       = 0x00000143,
    XCN_OID_CMC_ID_CONFIRM_CERT_ACCEPTANCE                = 0x00000144,
    XCN_OID_CMC_ADD_ATTRIBUTES                            = 0x00000145,
    XCN_OID_LOYALTY_OTHER_LOGOTYPE                        = 0x00000146,
    XCN_OID_BACKGROUND_OTHER_LOGOTYPE                     = 0x00000147,
    XCN_OID_PKIX_OCSP_BASIC_SIGNED_RESPONSE               = 0x00000148,
    XCN_OID_PKCS_7_DATA                                   = 0x00000149,
    XCN_OID_PKCS_7_SIGNED                                 = 0x0000014a,
    XCN_OID_PKCS_7_ENVELOPED                              = 0x0000014b,
    XCN_OID_PKCS_7_SIGNEDANDENVELOPED                     = 0x0000014c,
    XCN_OID_PKCS_7_DIGESTED                               = 0x0000014d,
    XCN_OID_PKCS_7_ENCRYPTED                              = 0x0000014e,
    XCN_OID_PKCS_9_CONTENT_TYPE                           = 0x0000014f,
    XCN_OID_PKCS_9_MESSAGE_DIGEST                         = 0x00000150,
    XCN_OID_CERT_PROP_ID_PREFIX                           = 0x00000151,
    XCN_OID_CERT_KEY_IDENTIFIER_PROP_ID                   = 0x00000152,
    XCN_OID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID    = 0x00000153,
    XCN_OID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID            = 0x00000154,
    XCN_OID_CERT_MD5_HASH_PROP_ID                         = 0x00000155,
    XCN_OID_RSA_SHA256RSA                                 = 0x00000156,
    XCN_OID_RSA_SHA384RSA                                 = 0x00000157,
    XCN_OID_RSA_SHA512RSA                                 = 0x00000158,
    XCN_OID_NIST_sha256                                   = 0x00000159,
    XCN_OID_NIST_sha384                                   = 0x0000015a,
    XCN_OID_NIST_sha512                                   = 0x0000015b,
    XCN_OID_RSA_MGF1                                      = 0x0000015c,
    XCN_OID_ECC_PUBLIC_KEY                                = 0x0000015d,
    XCN_OID_ECDSA_SHA1                                    = 0x0000015e,
    XCN_OID_ECDSA_SPECIFIED                               = 0x0000015f,
    XCN_OID_ANY_ENHANCED_KEY_USAGE                        = 0x00000160,
    XCN_OID_RSA_SSA_PSS                                   = 0x00000161,
    XCN_OID_ATTR_SUPPORTED_ALGORITHMS                     = 0x00000163,
    XCN_OID_ATTR_TPM_SECURITY_ASSERTIONS                  = 0x00000164,
    XCN_OID_ATTR_TPM_SPECIFICATION                        = 0x00000165,
    XCN_OID_CERT_DISALLOWED_FILETIME_PROP_ID              = 0x00000166,
    XCN_OID_CERT_SIGNATURE_HASH_PROP_ID                   = 0x00000167,
    XCN_OID_CERT_STRONG_KEY_OS_1                          = 0x00000168,
    XCN_OID_CERT_STRONG_KEY_OS_CURRENT                    = 0x00000169,
    XCN_OID_CERT_STRONG_KEY_OS_PREFIX                     = 0x0000016a,
    XCN_OID_CERT_STRONG_SIGN_OS_1                         = 0x0000016b,
    XCN_OID_CERT_STRONG_SIGN_OS_CURRENT                   = 0x0000016c,
    XCN_OID_CERT_STRONG_SIGN_OS_PREFIX                    = 0x0000016d,
    XCN_OID_DH_SINGLE_PASS_STDDH_SHA1_KDF                 = 0x0000016e,
    XCN_OID_DH_SINGLE_PASS_STDDH_SHA256_KDF               = 0x0000016f,
    XCN_OID_DH_SINGLE_PASS_STDDH_SHA384_KDF               = 0x00000170,
    XCN_OID_DISALLOWED_HASH                               = 0x00000171,
    XCN_OID_DISALLOWED_LIST                               = 0x00000172,
    XCN_OID_ECC_CURVE_P256                                = 0x00000173,
    XCN_OID_ECC_CURVE_P384                                = 0x00000174,
    XCN_OID_ECC_CURVE_P521                                = 0x00000175,
    XCN_OID_ECDSA_SHA256                                  = 0x00000176,
    XCN_OID_ECDSA_SHA384                                  = 0x00000177,
    XCN_OID_ECDSA_SHA512                                  = 0x00000178,
    XCN_OID_ENROLL_CAXCHGCERT_HASH                        = 0x00000179,
    XCN_OID_ENROLL_EK_INFO                                = 0x0000017a,
    XCN_OID_ENROLL_EKPUB_CHALLENGE                        = 0x0000017b,
    XCN_OID_ENROLL_EKVERIFYCERT                           = 0x0000017c,
    XCN_OID_ENROLL_EKVERIFYCREDS                          = 0x0000017d,
    XCN_OID_ENROLL_EKVERIFYKEY                            = 0x0000017e,
    XCN_OID_EV_RDN_COUNTRY                                = 0x0000017f,
    XCN_OID_EV_RDN_LOCALE                                 = 0x00000180,
    XCN_OID_EV_RDN_STATE_OR_PROVINCE                      = 0x00000181,
    XCN_OID_INHIBIT_ANY_POLICY                            = 0x00000182,
    XCN_OID_INTERNATIONALIZED_EMAIL_ADDRESS               = 0x00000183,
    XCN_OID_KP_KERNEL_MODE_CODE_SIGNING                   = 0x00000184,
    XCN_OID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING          = 0x00000185,
    XCN_OID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING           = 0x00000186,
    XCN_OID_KP_TPM_AIK_CERTIFICATE                        = 0x00000187,
    XCN_OID_KP_TPM_EK_CERTIFICATE                         = 0x00000188,
    XCN_OID_KP_TPM_PLATFORM_CERTIFICATE                   = 0x00000189,
    XCN_OID_NIST_AES128_CBC                               = 0x0000018a,
    XCN_OID_NIST_AES128_WRAP                              = 0x0000018b,
    XCN_OID_NIST_AES192_CBC                               = 0x0000018c,
    XCN_OID_NIST_AES192_WRAP                              = 0x0000018d,
    XCN_OID_NIST_AES256_CBC                               = 0x0000018e,
    XCN_OID_NIST_AES256_WRAP                              = 0x0000018f,
    XCN_OID_PKCS_12_PbeIds                                = 0x00000190,
    XCN_OID_PKCS_12_pbeWithSHA1And128BitRC2               = 0x00000191,
    XCN_OID_PKCS_12_pbeWithSHA1And128BitRC4               = 0x00000192,
    XCN_OID_PKCS_12_pbeWithSHA1And2KeyTripleDES           = 0x00000193,
    XCN_OID_PKCS_12_pbeWithSHA1And3KeyTripleDES           = 0x00000194,
    XCN_OID_PKCS_12_pbeWithSHA1And40BitRC2                = 0x00000195,
    XCN_OID_PKCS_12_pbeWithSHA1And40BitRC4                = 0x00000196,
    XCN_OID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID = 0x00000197,
    XCN_OID_PKINIT_KP_KDC                                 = 0x00000198,
    XCN_OID_PKIX_CA_REPOSITORY                            = 0x00000199,
    XCN_OID_PKIX_OCSP_NONCE                               = 0x0000019a,
    XCN_OID_PKIX_TIME_STAMPING                            = 0x0000019b,
    XCN_OID_QC_EU_COMPLIANCE                              = 0x0000019c,
    XCN_OID_QC_SSCD                                       = 0x0000019d,
    XCN_OID_QC_STATEMENTS_EXT                             = 0x0000019e,
    XCN_OID_RDN_TPM_MANUFACTURER                          = 0x0000019f,
    XCN_OID_RDN_TPM_MODEL                                 = 0x000001a0,
    XCN_OID_RDN_TPM_VERSION                               = 0x000001a1,
    XCN_OID_REVOKED_LIST_SIGNER                           = 0x000001a2,
    XCN_OID_RFC3161_counterSign                           = 0x000001a3,
    XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION        = 0x000001a4,
    XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION       = 0x000001a5,
    XCN_OID_ROOT_PROGRAM_FLAGS                            = 0x000001a6,
    XCN_OID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL          = 0x000001a7,
    XCN_OID_RSA_PSPECIFIED                                = 0x000001a8,
    XCN_OID_RSAES_OAEP                                    = 0x000001a9,
    XCN_OID_SUBJECT_INFO_ACCESS                           = 0x000001aa,
    XCN_OID_TIMESTAMP_TOKEN                               = 0x000001ab,
    XCN_OID_ENROLL_SCEP_ERROR                             = 0x000001ac,
    XCN_OIDVerisign_MessageType                           = 0x000001ad,
    XCN_OIDVerisign_PkiStatus                             = 0x000001ae,
    XCN_OIDVerisign_FailInfo                              = 0x000001af,
    XCN_OIDVerisign_SenderNonce                           = 0x000001b0,
    XCN_OIDVerisign_RecipientNonce                        = 0x000001b1,
    XCN_OIDVerisign_TransactionID                         = 0x000001b2,
    XCN_OID_ENROLL_ATTESTATION_CHALLENGE                  = 0x000001b3,
    XCN_OID_ENROLL_ATTESTATION_STATEMENT                  = 0x000001b4,
    XCN_OID_ENROLL_ENCRYPTION_ALGORITHM                   = 0x000001b5,
    XCN_OID_ENROLL_KSP_NAME                               = 0x000001b6,
}

alias WebSecurityLevel = int;
enum : int
{
    LevelUnsafe = 0x00000000,
    LevelSafe   = 0x00000001,
}

alias EncodingType = int;
enum : int
{
    XCN_CRYPT_STRING_BASE64HEADER        = 0x00000000,
    XCN_CRYPT_STRING_BASE64              = 0x00000001,
    XCN_CRYPT_STRING_BINARY              = 0x00000002,
    XCN_CRYPT_STRING_BASE64REQUESTHEADER = 0x00000003,
    XCN_CRYPT_STRING_HEX                 = 0x00000004,
    XCN_CRYPT_STRING_HEXASCII            = 0x00000005,
    XCN_CRYPT_STRING_BASE64_ANY          = 0x00000006,
    XCN_CRYPT_STRING_ANY                 = 0x00000007,
    XCN_CRYPT_STRING_HEX_ANY             = 0x00000008,
    XCN_CRYPT_STRING_BASE64X509CRLHEADER = 0x00000009,
    XCN_CRYPT_STRING_HEXADDR             = 0x0000000a,
    XCN_CRYPT_STRING_HEXASCIIADDR        = 0x0000000b,
    XCN_CRYPT_STRING_HEXRAW              = 0x0000000c,
    XCN_CRYPT_STRING_BASE64URI           = 0x0000000d,
    XCN_CRYPT_STRING_ENCODEMASK          = 0x000000ff,
    XCN_CRYPT_STRING_CHAIN               = 0x00000100,
    XCN_CRYPT_STRING_TEXT                = 0x00000200,
    XCN_CRYPT_STRING_PERCENTESCAPE       = 0x08000000,
    XCN_CRYPT_STRING_HASHDATA            = 0x10000000,
    XCN_CRYPT_STRING_STRICT              = 0x20000000,
    XCN_CRYPT_STRING_NOCRLF              = 0x40000000,
    XCN_CRYPT_STRING_NOCR                = 0x80000000,
}

alias PFXExportOptions = int;
enum : int
{
    PFXExportEEOnly        = 0x00000000,
    PFXExportChainNoRoot   = 0x00000001,
    PFXExportChainWithRoot = 0x00000002,
}

alias ObjectIdGroupId = int;
enum : int
{
    XCN_CRYPT_ANY_GROUP_ID                     = 0x00000000,
    XCN_CRYPT_HASH_ALG_OID_GROUP_ID            = 0x00000001,
    XCN_CRYPT_ENCRYPT_ALG_OID_GROUP_ID         = 0x00000002,
    XCN_CRYPT_PUBKEY_ALG_OID_GROUP_ID          = 0x00000003,
    XCN_CRYPT_SIGN_ALG_OID_GROUP_ID            = 0x00000004,
    XCN_CRYPT_RDN_ATTR_OID_GROUP_ID            = 0x00000005,
    XCN_CRYPT_EXT_OR_ATTR_OID_GROUP_ID         = 0x00000006,
    XCN_CRYPT_ENHKEY_USAGE_OID_GROUP_ID        = 0x00000007,
    XCN_CRYPT_POLICY_OID_GROUP_ID              = 0x00000008,
    XCN_CRYPT_TEMPLATE_OID_GROUP_ID            = 0x00000009,
    XCN_CRYPT_KDF_OID_GROUP_ID                 = 0x0000000a,
    XCN_CRYPT_LAST_OID_GROUP_ID                = 0x0000000a,
    XCN_CRYPT_FIRST_ALG_OID_GROUP_ID           = 0x00000001,
    XCN_CRYPT_LAST_ALG_OID_GROUP_ID            = 0x00000004,
    XCN_CRYPT_GROUP_ID_MASK                    = 0x0000ffff,
    XCN_CRYPT_OID_PREFER_CNG_ALGID_FLAG        = 0x40000000,
    XCN_CRYPT_OID_DISABLE_SEARCH_DS_FLAG       = 0x80000000,
    XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK  = 0x0fff0000,
    XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT = 0x00000010,
    XCN_CRYPT_KEY_LENGTH_MASK                  = 0x0fff0000,
}

alias ObjectIdPublicKeyFlags = int;
enum : int
{
    XCN_CRYPT_OID_INFO_PUBKEY_ANY              = 0x00000000,
    XCN_CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG    = 0x80000000,
    XCN_CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = 0x40000000,
}

alias AlgorithmFlags = int;
enum : int
{
    AlgorithmFlagsNone = 0x00000000,
    AlgorithmFlagsWrap = 0x00000001,
}

enum IID_IObjectId = GUID(0x728ab300, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IObjectId : IDispatch
{
    HRESULT InitializeFromName(CERTENROLL_OBJECTID);
    HRESULT InitializeFromValue(BSTR);
    HRESULT InitializeFromAlgorithmName(ObjectIdGroupId, ObjectIdPublicKeyFlags, AlgorithmFlags, BSTR);
    HRESULT get_Name(CERTENROLL_OBJECTID*);
    HRESULT get_FriendlyName(BSTR*);
    HRESULT put_FriendlyName(BSTR);
    HRESULT get_Value(BSTR*);
    HRESULT GetAlgorithmName(ObjectIdGroupId, ObjectIdPublicKeyFlags, BSTR*);
}
enum IID_IObjectIds = GUID(0x728ab301, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IObjectIds : IDispatch
{
    HRESULT get_ItemByIndex(int, IObjectId*);
    HRESULT get_Count(int*);
    HRESULT get__NewEnum(IUnknown*);
    HRESULT Add(IObjectId);
    HRESULT Remove(int);
    HRESULT Clear();
    HRESULT AddRange(IObjectIds);
}
enum IID_IBinaryConverter = GUID(0x728ab302, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IBinaryConverter : IDispatch
{
    HRESULT StringToString(BSTR, EncodingType, EncodingType, BSTR*);
    HRESULT VariantByteArrayToString(VARIANT*, EncodingType, BSTR*);
    HRESULT StringToVariantByteArray(BSTR, EncodingType, VARIANT*);
}
enum IID_IBinaryConverter2 = GUID(0x8d7928b4, 0x4e17, 0x428d, [0x9a, 0x17, 0x72, 0x8d, 0xf0, 0xd, 0x1b, 0x2b]);
interface IBinaryConverter2 : IBinaryConverter
{
    HRESULT StringArrayToVariantArray(VARIANT*, VARIANT*);
    HRESULT VariantArrayToStringArray(VARIANT*, VARIANT*);
}
alias X500NameFlags = int;
enum : int
{
    XCN_CERT_NAME_STR_NONE                      = 0x00000000,
    XCN_CERT_SIMPLE_NAME_STR                    = 0x00000001,
    XCN_CERT_OID_NAME_STR                       = 0x00000002,
    XCN_CERT_X500_NAME_STR                      = 0x00000003,
    XCN_CERT_XML_NAME_STR                       = 0x00000004,
    XCN_CERT_NAME_STR_SEMICOLON_FLAG            = 0x40000000,
    XCN_CERT_NAME_STR_NO_PLUS_FLAG              = 0x20000000,
    XCN_CERT_NAME_STR_NO_QUOTING_FLAG           = 0x10000000,
    XCN_CERT_NAME_STR_CRLF_FLAG                 = 0x08000000,
    XCN_CERT_NAME_STR_COMMA_FLAG                = 0x04000000,
    XCN_CERT_NAME_STR_REVERSE_FLAG              = 0x02000000,
    XCN_CERT_NAME_STR_FORWARD_FLAG              = 0x01000000,
    XCN_CERT_NAME_STR_AMBIGUOUS_SEPARATOR_FLAGS = 0x4c000000,
    XCN_CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG     = 0x00010000,
    XCN_CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG   = 0x00020000,
    XCN_CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG  = 0x00040000,
    XCN_CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG   = 0x00080000,
    XCN_CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = 0x00100000,
    XCN_CERT_NAME_STR_ENABLE_PUNYCODE_FLAG      = 0x00200000,
    XCN_CERT_NAME_STR_DS_ESCAPED                = 0x00800000,
}

enum IID_IX500DistinguishedName = GUID(0x728ab303, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX500DistinguishedName : IDispatch
{
    HRESULT Decode(BSTR, EncodingType, X500NameFlags);
    HRESULT Encode(BSTR, X500NameFlags);
    HRESULT get_Name(BSTR*);
    HRESULT get_EncodedName(EncodingType, BSTR*);
}
alias X509CertificateEnrollmentContext = int;
enum : int
{
    ContextNone                      = 0x00000000,
    ContextUser                      = 0x00000001,
    ContextMachine                   = 0x00000002,
    ContextAdministratorForceMachine = 0x00000003,
}

alias EnrollmentEnrollStatus = int;
enum : int
{
    Enrolled                           = 0x00000001,
    EnrollPended                       = 0x00000002,
    EnrollUIDeferredEnrollmentRequired = 0x00000004,
    EnrollError                        = 0x00000010,
    EnrollUnknown                      = 0x00000020,
    EnrollSkipped                      = 0x00000040,
    EnrollDenied                       = 0x00000100,
}

alias EnrollmentSelectionStatus = int;
enum : int
{
    SelectedNo  = 0x00000000,
    SelectedYes = 0x00000001,
}

alias EnrollmentDisplayStatus = int;
enum : int
{
    DisplayNo  = 0x00000000,
    DisplayYes = 0x00000001,
}

enum IID_IX509EnrollmentStatus = GUID(0x728ab304, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509EnrollmentStatus : IDispatch
{
    HRESULT AppendText(BSTR);
    HRESULT get_Text(BSTR*);
    HRESULT put_Text(BSTR);
    HRESULT get_Selected(EnrollmentSelectionStatus*);
    HRESULT put_Selected(EnrollmentSelectionStatus);
    HRESULT get_Display(EnrollmentDisplayStatus*);
    HRESULT put_Display(EnrollmentDisplayStatus);
    HRESULT get_Status(EnrollmentEnrollStatus*);
    HRESULT put_Status(EnrollmentEnrollStatus);
    HRESULT get_Error(HRESULT*);
    HRESULT put_Error(HRESULT);
    HRESULT get_ErrorText(BSTR*);
}
alias X509ProviderType = int;
enum : int
{
    XCN_PROV_NONE          = 0x00000000,
    XCN_PROV_RSA_FULL      = 0x00000001,
    XCN_PROV_RSA_SIG       = 0x00000002,
    XCN_PROV_DSS           = 0x00000003,
    XCN_PROV_FORTEZZA      = 0x00000004,
    XCN_PROV_MS_EXCHANGE   = 0x00000005,
    XCN_PROV_SSL           = 0x00000006,
    XCN_PROV_RSA_SCHANNEL  = 0x0000000c,
    XCN_PROV_DSS_DH        = 0x0000000d,
    XCN_PROV_EC_ECDSA_SIG  = 0x0000000e,
    XCN_PROV_EC_ECNRA_SIG  = 0x0000000f,
    XCN_PROV_EC_ECDSA_FULL = 0x00000010,
    XCN_PROV_EC_ECNRA_FULL = 0x00000011,
    XCN_PROV_DH_SCHANNEL   = 0x00000012,
    XCN_PROV_SPYRUS_LYNKS  = 0x00000014,
    XCN_PROV_RNG           = 0x00000015,
    XCN_PROV_INTEL_SEC     = 0x00000016,
    XCN_PROV_REPLACE_OWF   = 0x00000017,
    XCN_PROV_RSA_AES       = 0x00000018,
}

alias AlgorithmType = int;
enum : int
{
    XCN_BCRYPT_UNKNOWN_INTERFACE               = 0x00000000,
    XCN_BCRYPT_CIPHER_INTERFACE                = 0x00000001,
    XCN_BCRYPT_HASH_INTERFACE                  = 0x00000002,
    XCN_BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 0x00000003,
    XCN_BCRYPT_SIGNATURE_INTERFACE             = 0x00000005,
    XCN_BCRYPT_SECRET_AGREEMENT_INTERFACE      = 0x00000004,
    XCN_BCRYPT_RNG_INTERFACE                   = 0x00000006,
    XCN_BCRYPT_KEY_DERIVATION_INTERFACE        = 0x00000007,
}

alias AlgorithmOperationFlags = int;
enum : int
{
    XCN_NCRYPT_NO_OPERATION                    = 0x00000000,
    XCN_NCRYPT_CIPHER_OPERATION                = 0x00000001,
    XCN_NCRYPT_HASH_OPERATION                  = 0x00000002,
    XCN_NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 0x00000004,
    XCN_NCRYPT_SECRET_AGREEMENT_OPERATION      = 0x00000008,
    XCN_NCRYPT_SIGNATURE_OPERATION             = 0x00000010,
    XCN_NCRYPT_RNG_OPERATION                   = 0x00000020,
    XCN_NCRYPT_KEY_DERIVATION_OPERATION        = 0x00000040,
    XCN_NCRYPT_ANY_ASYMMETRIC_OPERATION        = 0x0000001c,
    XCN_NCRYPT_PREFER_SIGNATURE_ONLY_OPERATION = 0x00200000,
    XCN_NCRYPT_PREFER_NON_SIGNATURE_OPERATION  = 0x00400000,
    XCN_NCRYPT_EXACT_MATCH_OPERATION           = 0x00800000,
    XCN_NCRYPT_PREFERENCE_MASK_OPERATION       = 0x00e00000,
}

enum IID_ICspAlgorithm = GUID(0x728ab305, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICspAlgorithm : IDispatch
{
    HRESULT GetAlgorithmOid(int, AlgorithmFlags, IObjectId*);
    HRESULT get_DefaultLength(int*);
    HRESULT get_IncrementLength(int*);
    HRESULT get_LongName(BSTR*);
    HRESULT get_Valid(VARIANT_BOOL*);
    HRESULT get_MaxLength(int*);
    HRESULT get_MinLength(int*);
    HRESULT get_Name(BSTR*);
    HRESULT get_Type(AlgorithmType*);
    HRESULT get_Operations(AlgorithmOperationFlags*);
}
enum IID_ICspAlgorithms = GUID(0x728ab306, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICspAlgorithms : IDispatch
{
    HRESULT get_ItemByIndex(int, ICspAlgorithm*);
    HRESULT get_Count(int*);
    HRESULT get__NewEnum(IUnknown*);
    HRESULT Add(ICspAlgorithm);
    HRESULT Remove(int);
    HRESULT Clear();
    HRESULT get_ItemByName(BSTR, ICspAlgorithm*);
    HRESULT get_IndexByObjectId(IObjectId, int*);
}
alias X509KeySpec = int;
enum : int
{
    XCN_AT_NONE        = 0x00000000,
    XCN_AT_KEYEXCHANGE = 0x00000001,
    XCN_AT_SIGNATURE   = 0x00000002,
}

enum IID_ICspInformation = GUID(0x728ab307, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICspInformation : IDispatch
{
    HRESULT InitializeFromName(BSTR);
    HRESULT InitializeFromType(X509ProviderType, IObjectId, VARIANT_BOOL);
    HRESULT get_CspAlgorithms(ICspAlgorithms*);
    HRESULT get_HasHardwareRandomNumberGenerator(VARIANT_BOOL*);
    HRESULT get_IsHardwareDevice(VARIANT_BOOL*);
    HRESULT get_IsRemovable(VARIANT_BOOL*);
    HRESULT get_IsSoftwareDevice(VARIANT_BOOL*);
    HRESULT get_Valid(VARIANT_BOOL*);
    HRESULT get_MaxKeyContainerNameLength(int*);
    HRESULT get_Name(BSTR*);
    HRESULT get_Type(X509ProviderType*);
    HRESULT get_Version(int*);
    HRESULT get_KeySpec(X509KeySpec*);
    HRESULT get_IsSmartCard(VARIANT_BOOL*);
    HRESULT GetDefaultSecurityDescriptor(VARIANT_BOOL, BSTR*);
    HRESULT get_LegacyCsp(VARIANT_BOOL*);
    HRESULT GetCspStatusFromOperations(IObjectId, AlgorithmOperationFlags, ICspStatus*);
}
enum IID_ICspInformations = GUID(0x728ab308, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICspInformations : IDispatch
{
    HRESULT get_ItemByIndex(int, ICspInformation*);
    HRESULT get_Count(int*);
    HRESULT get__NewEnum(IUnknown*);
    HRESULT Add(ICspInformation);
    HRESULT Remove(int);
    HRESULT Clear();
    HRESULT AddAvailableCsps();
    HRESULT get_ItemByName(BSTR, ICspInformation*);
    HRESULT GetCspStatusFromProviderName(BSTR, X509KeySpec, ICspStatus*);
    HRESULT GetCspStatusesFromOperations(AlgorithmOperationFlags, ICspInformation, ICspStatuses*);
    HRESULT GetEncryptionCspAlgorithms(ICspInformation, ICspAlgorithms*);
    HRESULT GetHashAlgorithms(ICspInformation, IObjectIds*);
}
enum IID_ICspStatus = GUID(0x728ab309, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICspStatus : IDispatch
{
    HRESULT Initialize(ICspInformation, ICspAlgorithm);
    HRESULT get_Ordinal(int*);
    HRESULT put_Ordinal(int);
    HRESULT get_CspAlgorithm(ICspAlgorithm*);
    HRESULT get_CspInformation(ICspInformation*);
    HRESULT get_EnrollmentStatus(IX509EnrollmentStatus*);
    HRESULT get_DisplayName(BSTR*);
}
enum IID_ICspStatuses = GUID(0x728ab30a, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICspStatuses : IDispatch
{
    HRESULT get_ItemByIndex(int, ICspStatus*);
    HRESULT get_Count(int*);
    HRESULT get__NewEnum(IUnknown*);
    HRESULT Add(ICspStatus);
    HRESULT Remove(int);
    HRESULT Clear();
    HRESULT get_ItemByName(BSTR, BSTR, ICspStatus*);
    HRESULT get_ItemByOrdinal(int, ICspStatus*);
    HRESULT get_ItemByOperations(BSTR, BSTR, AlgorithmOperationFlags, ICspStatus*);
    HRESULT get_ItemByProvider(ICspStatus, ICspStatus*);
}
alias KeyIdentifierHashAlgorithm = int;
enum : int
{
    SKIHashDefault  = 0x00000000,
    SKIHashSha1     = 0x00000001,
    SKIHashCapiSha1 = 0x00000002,
    SKIHashSha256   = 0x00000003,
    SKIHashHPKP     = 0x00000005,
}

enum IID_IX509PublicKey = GUID(0x728ab30b, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509PublicKey : IDispatch
{
    HRESULT Initialize(IObjectId, BSTR, BSTR, EncodingType);
    HRESULT InitializeFromEncodedPublicKeyInfo(BSTR, EncodingType);
    HRESULT get_Algorithm(IObjectId*);
    HRESULT get_Length(int*);
    HRESULT get_EncodedKey(EncodingType, BSTR*);
    HRESULT get_EncodedParameters(EncodingType, BSTR*);
    HRESULT ComputeKeyIdentifier(KeyIdentifierHashAlgorithm, EncodingType, BSTR*);
}
alias X509PrivateKeyExportFlags = int;
enum : int
{
    XCN_NCRYPT_ALLOW_EXPORT_NONE              = 0x00000000,
    XCN_NCRYPT_ALLOW_EXPORT_FLAG              = 0x00000001,
    XCN_NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG    = 0x00000002,
    XCN_NCRYPT_ALLOW_ARCHIVING_FLAG           = 0x00000004,
    XCN_NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG = 0x00000008,
}

alias X509PrivateKeyUsageFlags = int;
enum : int
{
    XCN_NCRYPT_ALLOW_USAGES_NONE        = 0x00000000,
    XCN_NCRYPT_ALLOW_DECRYPT_FLAG       = 0x00000001,
    XCN_NCRYPT_ALLOW_SIGNING_FLAG       = 0x00000002,
    XCN_NCRYPT_ALLOW_KEY_AGREEMENT_FLAG = 0x00000004,
    XCN_NCRYPT_ALLOW_KEY_IMPORT_FLAG    = 0x00000008,
    XCN_NCRYPT_ALLOW_ALL_USAGES         = 0x00ffffff,
}

alias X509PrivateKeyProtection = int;
enum : int
{
    XCN_NCRYPT_UI_NO_PROTECTION_FLAG              = 0x00000000,
    XCN_NCRYPT_UI_PROTECT_KEY_FLAG                = 0x00000001,
    XCN_NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG      = 0x00000002,
    XCN_NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG     = 0x00000004,
    XCN_NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG = 0x00000008,
}

alias X509PrivateKeyVerify = int;
enum : int
{
    VerifyNone            = 0x00000000,
    VerifySilent          = 0x00000001,
    VerifySmartCardNone   = 0x00000002,
    VerifySmartCardSilent = 0x00000003,
    VerifyAllowUI         = 0x00000004,
}

enum IID_IX509PrivateKey = GUID(0x728ab30c, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509PrivateKey : IDispatch
{
    HRESULT Open();
    HRESULT Create();
    HRESULT Close();
    HRESULT Delete();
    HRESULT Verify(X509PrivateKeyVerify);
    HRESULT Import(BSTR, BSTR, EncodingType);
    HRESULT Export(BSTR, EncodingType, BSTR*);
    HRESULT ExportPublicKey(IX509PublicKey*);
    HRESULT get_ContainerName(BSTR*);
    HRESULT put_ContainerName(BSTR);
    HRESULT get_ContainerNamePrefix(BSTR*);
    HRESULT put_ContainerNamePrefix(BSTR);
    HRESULT get_ReaderName(BSTR*);
    HRESULT put_ReaderName(BSTR);
    HRESULT get_CspInformations(ICspInformations*);
    HRESULT put_CspInformations(ICspInformations);
    HRESULT get_CspStatus(ICspStatus*);
    HRESULT put_CspStatus(ICspStatus);
    HRESULT get_ProviderName(BSTR*);
    HRESULT put_ProviderName(BSTR);
    HRESULT get_ProviderType(X509ProviderType*);
    HRESULT put_ProviderType(X509ProviderType);
    HRESULT get_LegacyCsp(VARIANT_BOOL*);
    HRESULT put_LegacyCsp(VARIANT_BOOL);
    HRESULT get_Algorithm(IObjectId*);
    HRESULT put_Algorithm(IObjectId);
    HRESULT get_KeySpec(X509KeySpec*);
    HRESULT put_KeySpec(X509KeySpec);
    HRESULT get_Length(int*);
    HRESULT put_Length(int);
    HRESULT get_ExportPolicy(X509PrivateKeyExportFlags*);
    HRESULT put_ExportPolicy(X509PrivateKeyExportFlags);
    HRESULT get_KeyUsage(X509PrivateKeyUsageFlags*);
    HRESULT put_KeyUsage(X509PrivateKeyUsageFlags);
    HRESULT get_KeyProtection(X509PrivateKeyProtection*);
    HRESULT put_KeyProtection(X509PrivateKeyProtection);
    HRESULT get_MachineContext(VARIANT_BOOL*);
    HRESULT put_MachineContext(VARIANT_BOOL);
    HRESULT get_SecurityDescriptor(BSTR*);
    HRESULT put_SecurityDescriptor(BSTR);
    HRESULT get_Certificate(EncodingType, BSTR*);
    HRESULT put_Certificate(EncodingType, BSTR);
    HRESULT get_UniqueContainerName(BSTR*);
    HRESULT get_Opened(VARIANT_BOOL*);
    HRESULT get_DefaultContainer(VARIANT_BOOL*);
    HRESULT get_Existing(VARIANT_BOOL*);
    HRESULT put_Existing(VARIANT_BOOL);
    HRESULT get_Silent(VARIANT_BOOL*);
    HRESULT put_Silent(VARIANT_BOOL);
    HRESULT get_ParentWindow(int*);
    HRESULT put_ParentWindow(int);
    HRESULT get_UIContextMessage(BSTR*);
    HRESULT put_UIContextMessage(BSTR);
    HRESULT put_Pin(BSTR);
    HRESULT get_FriendlyName(BSTR*);
    HRESULT put_FriendlyName(BSTR);
    HRESULT get_Description(BSTR*);
    HRESULT put_Description(BSTR);
}
alias X509HardwareKeyUsageFlags = int;
enum : int
{
    XCN_NCRYPT_PCP_NONE           = 0x00000000,
    XCN_NCRYPT_TPM12_PROVIDER     = 0x00010000,
    XCN_NCRYPT_PCP_SIGNATURE_KEY  = 0x00000001,
    XCN_NCRYPT_PCP_ENCRYPTION_KEY = 0x00000002,
    XCN_NCRYPT_PCP_GENERIC_KEY    = 0x00000003,
    XCN_NCRYPT_PCP_STORAGE_KEY    = 0x00000004,
    XCN_NCRYPT_PCP_IDENTITY_KEY   = 0x00000008,
}

alias X509KeyParametersExportType = int;
enum : int
{
    XCN_CRYPT_OID_USE_CURVE_NONE                       = 0x00000000,
    XCN_CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG       = 0x20000000,
    XCN_CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG = 0x10000000,
}

enum IID_IX509PrivateKey2 = GUID(0x728ab362, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509PrivateKey2 : IX509PrivateKey
{
    HRESULT get_HardwareKeyUsage(X509HardwareKeyUsageFlags*);
    HRESULT put_HardwareKeyUsage(X509HardwareKeyUsageFlags);
    HRESULT get_AlternateStorageLocation(BSTR*);
    HRESULT put_AlternateStorageLocation(BSTR);
    HRESULT get_AlgorithmName(BSTR*);
    HRESULT put_AlgorithmName(BSTR);
    HRESULT get_AlgorithmParameters(EncodingType, BSTR*);
    HRESULT put_AlgorithmParameters(EncodingType, BSTR);
    HRESULT get_ParametersExportType(X509KeyParametersExportType*);
    HRESULT put_ParametersExportType(X509KeyParametersExportType);
}
enum IID_IX509EndorsementKey = GUID(0xb11cd855, 0xf4c4, 0x4fc6, [0xb7, 0x10, 0x44, 0x22, 0x23, 0x7f, 0x9, 0xe9]);
interface IX509EndorsementKey : IDispatch
{
    HRESULT get_ProviderName(BSTR*);
    HRESULT put_ProviderName(BSTR);
    HRESULT get_Length(int*);
    HRESULT get_Opened(VARIANT_BOOL*);
    HRESULT AddCertificate(EncodingType, BSTR);
    HRESULT RemoveCertificate(EncodingType, BSTR);
    HRESULT GetCertificateByIndex(VARIANT_BOOL, int, EncodingType, BSTR*);
    HRESULT GetCertificateCount(VARIANT_BOOL, int*);
    HRESULT ExportPublicKey(IX509PublicKey*);
    HRESULT Open();
    HRESULT Close();
}
enum IID_IX509Extension = GUID(0x728ab30d, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509Extension : IDispatch
{
    HRESULT Initialize(IObjectId, EncodingType, BSTR);
    HRESULT get_ObjectId(IObjectId*);
    HRESULT get_RawData(EncodingType, BSTR*);
    HRESULT get_Critical(VARIANT_BOOL*);
    HRESULT put_Critical(VARIANT_BOOL);
}
enum IID_IX509Extensions = GUID(0x728ab30e, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509Extensions : IDispatch
{
    HRESULT get_ItemByIndex(int, IX509Extension*);
    HRESULT get_Count(int*);
    HRESULT get__NewEnum(IUnknown*);
    HRESULT Add(IX509Extension);
    HRESULT Remove(int);
    HRESULT Clear();
    HRESULT get_IndexByObjectId(IObjectId, int*);
    HRESULT AddRange(IX509Extensions);
}
alias X509KeyUsageFlags = int;
enum : int
{
    XCN_CERT_NO_KEY_USAGE                = 0x00000000,
    XCN_CERT_DIGITAL_SIGNATURE_KEY_USAGE = 0x00000080,
    XCN_CERT_NON_REPUDIATION_KEY_USAGE   = 0x00000040,
    XCN_CERT_KEY_ENCIPHERMENT_KEY_USAGE  = 0x00000020,
    XCN_CERT_DATA_ENCIPHERMENT_KEY_USAGE = 0x00000010,
    XCN_CERT_KEY_AGREEMENT_KEY_USAGE     = 0x00000008,
    XCN_CERT_KEY_CERT_SIGN_KEY_USAGE     = 0x00000004,
    XCN_CERT_OFFLINE_CRL_SIGN_KEY_USAGE  = 0x00000002,
    XCN_CERT_CRL_SIGN_KEY_USAGE          = 0x00000002,
    XCN_CERT_ENCIPHER_ONLY_KEY_USAGE     = 0x00000001,
    XCN_CERT_DECIPHER_ONLY_KEY_USAGE     = 0x00008000,
}

enum IID_IX509ExtensionKeyUsage = GUID(0x728ab30f, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509ExtensionKeyUsage : IX509Extension
{
    HRESULT InitializeEncode(X509KeyUsageFlags);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_KeyUsage(X509KeyUsageFlags*);
}
enum IID_IX509ExtensionEnhancedKeyUsage = GUID(0x728ab310, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509ExtensionEnhancedKeyUsage : IX509Extension
{
    HRESULT InitializeEncode(IObjectIds);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_EnhancedKeyUsage(IObjectIds*);
}
enum IID_IX509ExtensionTemplateName = GUID(0x728ab311, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509ExtensionTemplateName : IX509Extension
{
    HRESULT InitializeEncode(BSTR);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_TemplateName(BSTR*);
}
enum IID_IX509ExtensionTemplate = GUID(0x728ab312, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509ExtensionTemplate : IX509Extension
{
    HRESULT InitializeEncode(IObjectId, int, int);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_TemplateOid(IObjectId*);
    HRESULT get_MajorVersion(int*);
    HRESULT get_MinorVersion(int*);
}
alias AlternativeNameType = int;
enum : int
{
    XCN_CERT_ALT_NAME_UNKNOWN             = 0x00000000,
    XCN_CERT_ALT_NAME_OTHER_NAME          = 0x00000001,
    XCN_CERT_ALT_NAME_RFC822_NAME         = 0x00000002,
    XCN_CERT_ALT_NAME_DNS_NAME            = 0x00000003,
    XCN_CERT_ALT_NAME_X400_ADDRESS        = 0x00000004,
    XCN_CERT_ALT_NAME_DIRECTORY_NAME      = 0x00000005,
    XCN_CERT_ALT_NAME_EDI_PARTY_NAME      = 0x00000006,
    XCN_CERT_ALT_NAME_URL                 = 0x00000007,
    XCN_CERT_ALT_NAME_IP_ADDRESS          = 0x00000008,
    XCN_CERT_ALT_NAME_REGISTERED_ID       = 0x00000009,
    XCN_CERT_ALT_NAME_GUID                = 0x0000000a,
    XCN_CERT_ALT_NAME_USER_PRINCIPLE_NAME = 0x0000000b,
}

enum IID_IAlternativeName = GUID(0x728ab313, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IAlternativeName : IDispatch
{
    HRESULT InitializeFromString(AlternativeNameType, BSTR);
    HRESULT InitializeFromRawData(AlternativeNameType, EncodingType, BSTR);
    HRESULT InitializeFromOtherName(IObjectId, EncodingType, BSTR, VARIANT_BOOL);
    HRESULT get_Type(AlternativeNameType*);
    HRESULT get_StrValue(BSTR*);
    HRESULT get_ObjectId(IObjectId*);
    HRESULT get_RawData(EncodingType, BSTR*);
}
enum IID_IAlternativeNames = GUID(0x728ab314, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IAlternativeNames : IDispatch
{
    HRESULT get_ItemByIndex(int, IAlternativeName*);
    HRESULT get_Count(int*);
    HRESULT get__NewEnum(IUnknown*);
    HRESULT Add(IAlternativeName);
    HRESULT Remove(int);
    HRESULT Clear();
}
enum IID_IX509ExtensionAlternativeNames = GUID(0x728ab315, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509ExtensionAlternativeNames : IX509Extension
{
    HRESULT InitializeEncode(IAlternativeNames);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_AlternativeNames(IAlternativeNames*);
}
enum IID_IX509ExtensionBasicConstraints = GUID(0x728ab316, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509ExtensionBasicConstraints : IX509Extension
{
    HRESULT InitializeEncode(VARIANT_BOOL, int);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_IsCA(VARIANT_BOOL*);
    HRESULT get_PathLenConstraint(int*);
}
enum IID_IX509ExtensionSubjectKeyIdentifier = GUID(0x728ab317, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509ExtensionSubjectKeyIdentifier : IX509Extension
{
    HRESULT InitializeEncode(EncodingType, BSTR);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_SubjectKeyIdentifier(EncodingType, BSTR*);
}
enum IID_IX509ExtensionAuthorityKeyIdentifier = GUID(0x728ab318, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509ExtensionAuthorityKeyIdentifier : IX509Extension
{
    HRESULT InitializeEncode(EncodingType, BSTR);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_AuthorityKeyIdentifier(EncodingType, BSTR*);
}
enum IID_ISmimeCapability = GUID(0x728ab319, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ISmimeCapability : IDispatch
{
    HRESULT Initialize(IObjectId, int);
    HRESULT get_ObjectId(IObjectId*);
    HRESULT get_BitCount(int*);
}
enum IID_ISmimeCapabilities = GUID(0x728ab31a, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ISmimeCapabilities : IDispatch
{
    HRESULT get_ItemByIndex(int, ISmimeCapability*);
    HRESULT get_Count(int*);
    HRESULT get__NewEnum(IUnknown*);
    HRESULT Add(ISmimeCapability);
    HRESULT Remove(int);
    HRESULT Clear();
    HRESULT AddFromCsp(ICspInformation);
    HRESULT AddAvailableSmimeCapabilities(VARIANT_BOOL);
}
enum IID_IX509ExtensionSmimeCapabilities = GUID(0x728ab31b, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509ExtensionSmimeCapabilities : IX509Extension
{
    HRESULT InitializeEncode(ISmimeCapabilities);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_SmimeCapabilities(ISmimeCapabilities*);
}
alias PolicyQualifierType = int;
enum : int
{
    PolicyQualifierTypeUnknown    = 0x00000000,
    PolicyQualifierTypeUrl        = 0x00000001,
    PolicyQualifierTypeUserNotice = 0x00000002,
    PolicyQualifierTypeFlags      = 0x00000003,
}

enum IID_IPolicyQualifier = GUID(0x728ab31c, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IPolicyQualifier : IDispatch
{
    HRESULT InitializeEncode(BSTR, PolicyQualifierType);
    HRESULT get_ObjectId(IObjectId*);
    HRESULT get_Qualifier(BSTR*);
    HRESULT get_Type(PolicyQualifierType*);
    HRESULT get_RawData(EncodingType, BSTR*);
}
enum IID_IPolicyQualifiers = GUID(0x728ab31d, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IPolicyQualifiers : IDispatch
{
    HRESULT get_ItemByIndex(int, IPolicyQualifier*);
    HRESULT get_Count(int*);
    HRESULT get__NewEnum(IUnknown*);
    HRESULT Add(IPolicyQualifier);
    HRESULT Remove(int);
    HRESULT Clear();
}
enum IID_ICertificatePolicy = GUID(0x728ab31e, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICertificatePolicy : IDispatch
{
    HRESULT Initialize(IObjectId);
    HRESULT get_ObjectId(IObjectId*);
    HRESULT get_PolicyQualifiers(IPolicyQualifiers*);
}
enum IID_ICertificatePolicies = GUID(0x728ab31f, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICertificatePolicies : IDispatch
{
    HRESULT get_ItemByIndex(int, ICertificatePolicy*);
    HRESULT get_Count(int*);
    HRESULT get__NewEnum(IUnknown*);
    HRESULT Add(ICertificatePolicy);
    HRESULT Remove(int);
    HRESULT Clear();
}
enum IID_IX509ExtensionCertificatePolicies = GUID(0x728ab320, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509ExtensionCertificatePolicies : IX509Extension
{
    HRESULT InitializeEncode(ICertificatePolicies);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_Policies(ICertificatePolicies*);
}
enum IID_IX509ExtensionMSApplicationPolicies = GUID(0x728ab321, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509ExtensionMSApplicationPolicies : IX509Extension
{
    HRESULT InitializeEncode(ICertificatePolicies);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_Policies(ICertificatePolicies*);
}
enum IID_IX509Attribute = GUID(0x728ab322, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509Attribute : IDispatch
{
    HRESULT Initialize(IObjectId, EncodingType, BSTR);
    HRESULT get_ObjectId(IObjectId*);
    HRESULT get_RawData(EncodingType, BSTR*);
}
enum IID_IX509Attributes = GUID(0x728ab323, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509Attributes : IDispatch
{
    HRESULT get_ItemByIndex(int, IX509Attribute*);
    HRESULT get_Count(int*);
    HRESULT get__NewEnum(IUnknown*);
    HRESULT Add(IX509Attribute);
    HRESULT Remove(int);
    HRESULT Clear();
}
enum IID_IX509AttributeExtensions = GUID(0x728ab324, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509AttributeExtensions : IX509Attribute
{
    HRESULT InitializeEncode(IX509Extensions);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_X509Extensions(IX509Extensions*);
}
alias RequestClientInfoClientId = int;
enum : int
{
    ClientIdNone           = 0x00000000,
    ClientIdXEnroll2003    = 0x00000001,
    ClientIdAutoEnroll2003 = 0x00000002,
    ClientIdWizard2003     = 0x00000003,
    ClientIdCertReq2003    = 0x00000004,
    ClientIdDefaultRequest = 0x00000005,
    ClientIdAutoEnroll     = 0x00000006,
    ClientIdRequestWizard  = 0x00000007,
    ClientIdEOBO           = 0x00000008,
    ClientIdCertReq        = 0x00000009,
    ClientIdTest           = 0x0000000a,
    ClientIdWinRT          = 0x0000000b,
    ClientIdUserStart      = 0x000003e8,
}

enum IID_IX509AttributeClientId = GUID(0x728ab325, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509AttributeClientId : IX509Attribute
{
    HRESULT InitializeEncode(RequestClientInfoClientId, BSTR, BSTR, BSTR);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_ClientId(RequestClientInfoClientId*);
    HRESULT get_MachineDnsName(BSTR*);
    HRESULT get_UserSamName(BSTR*);
    HRESULT get_ProcessName(BSTR*);
}
enum IID_IX509AttributeRenewalCertificate = GUID(0x728ab326, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509AttributeRenewalCertificate : IX509Attribute
{
    HRESULT InitializeEncode(EncodingType, BSTR);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_RenewalCertificate(EncodingType, BSTR*);
}
enum IID_IX509AttributeArchiveKey = GUID(0x728ab327, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509AttributeArchiveKey : IX509Attribute
{
    HRESULT InitializeEncode(IX509PrivateKey, EncodingType, BSTR, IObjectId, int);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_EncryptedKeyBlob(EncodingType, BSTR*);
    HRESULT get_EncryptionAlgorithm(IObjectId*);
    HRESULT get_EncryptionStrength(int*);
}
enum IID_IX509AttributeArchiveKeyHash = GUID(0x728ab328, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509AttributeArchiveKeyHash : IX509Attribute
{
    HRESULT InitializeEncodeFromEncryptedKeyBlob(EncodingType, BSTR);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_EncryptedKeyHashBlob(EncodingType, BSTR*);
}
enum IID_IX509AttributeOSVersion = GUID(0x728ab32a, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509AttributeOSVersion : IX509Attribute
{
    HRESULT InitializeEncode(BSTR);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_OSVersion(BSTR*);
}
enum IID_IX509AttributeCspProvider = GUID(0x728ab32b, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509AttributeCspProvider : IX509Attribute
{
    HRESULT InitializeEncode(X509KeySpec, BSTR, EncodingType, BSTR);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_KeySpec(X509KeySpec*);
    HRESULT get_ProviderName(BSTR*);
    HRESULT get_Signature(EncodingType, BSTR*);
}
enum IID_ICryptAttribute = GUID(0x728ab32c, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICryptAttribute : IDispatch
{
    HRESULT InitializeFromObjectId(IObjectId);
    HRESULT InitializeFromValues(IX509Attributes);
    HRESULT get_ObjectId(IObjectId*);
    HRESULT get_Values(IX509Attributes*);
}
enum IID_ICryptAttributes = GUID(0x728ab32d, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICryptAttributes : IDispatch
{
    HRESULT get_ItemByIndex(int, ICryptAttribute*);
    HRESULT get_Count(int*);
    HRESULT get__NewEnum(IUnknown*);
    HRESULT Add(ICryptAttribute);
    HRESULT Remove(int);
    HRESULT Clear();
    HRESULT get_IndexByObjectId(IObjectId, int*);
    HRESULT AddRange(ICryptAttributes);
}
alias CERTENROLL_PROPERTYID = int;
enum : int
{
    XCN_PROPERTYID_NONE                                      = 0x00000000,
    XCN_CERT_KEY_PROV_HANDLE_PROP_ID                         = 0x00000001,
    XCN_CERT_KEY_PROV_INFO_PROP_ID                           = 0x00000002,
    XCN_CERT_SHA1_HASH_PROP_ID                               = 0x00000003,
    XCN_CERT_MD5_HASH_PROP_ID                                = 0x00000004,
    XCN_CERT_HASH_PROP_ID                                    = 0x00000003,
    XCN_CERT_KEY_CONTEXT_PROP_ID                             = 0x00000005,
    XCN_CERT_KEY_SPEC_PROP_ID                                = 0x00000006,
    XCN_CERT_IE30_RESERVED_PROP_ID                           = 0x00000007,
    XCN_CERT_PUBKEY_HASH_RESERVED_PROP_ID                    = 0x00000008,
    XCN_CERT_ENHKEY_USAGE_PROP_ID                            = 0x00000009,
    XCN_CERT_CTL_USAGE_PROP_ID                               = 0x00000009,
    XCN_CERT_NEXT_UPDATE_LOCATION_PROP_ID                    = 0x0000000a,
    XCN_CERT_FRIENDLY_NAME_PROP_ID                           = 0x0000000b,
    XCN_CERT_PVK_FILE_PROP_ID                                = 0x0000000c,
    XCN_CERT_DESCRIPTION_PROP_ID                             = 0x0000000d,
    XCN_CERT_ACCESS_STATE_PROP_ID                            = 0x0000000e,
    XCN_CERT_SIGNATURE_HASH_PROP_ID                          = 0x0000000f,
    XCN_CERT_SMART_CARD_DATA_PROP_ID                         = 0x00000010,
    XCN_CERT_EFS_PROP_ID                                     = 0x00000011,
    XCN_CERT_FORTEZZA_DATA_PROP_ID                           = 0x00000012,
    XCN_CERT_ARCHIVED_PROP_ID                                = 0x00000013,
    XCN_CERT_KEY_IDENTIFIER_PROP_ID                          = 0x00000014,
    XCN_CERT_AUTO_ENROLL_PROP_ID                             = 0x00000015,
    XCN_CERT_PUBKEY_ALG_PARA_PROP_ID                         = 0x00000016,
    XCN_CERT_CROSS_CERT_DIST_POINTS_PROP_ID                  = 0x00000017,
    XCN_CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID              = 0x00000018,
    XCN_CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID             = 0x00000019,
    XCN_CERT_ENROLLMENT_PROP_ID                              = 0x0000001a,
    XCN_CERT_DATE_STAMP_PROP_ID                              = 0x0000001b,
    XCN_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID           = 0x0000001c,
    XCN_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID                   = 0x0000001d,
    XCN_CERT_EXTENDED_ERROR_INFO_PROP_ID                     = 0x0000001e,
    XCN_CERT_RENEWAL_PROP_ID                                 = 0x00000040,
    XCN_CERT_ARCHIVED_KEY_HASH_PROP_ID                       = 0x00000041,
    XCN_CERT_AUTO_ENROLL_RETRY_PROP_ID                       = 0x00000042,
    XCN_CERT_AIA_URL_RETRIEVED_PROP_ID                       = 0x00000043,
    XCN_CERT_AUTHORITY_INFO_ACCESS_PROP_ID                   = 0x00000044,
    XCN_CERT_BACKED_UP_PROP_ID                               = 0x00000045,
    XCN_CERT_OCSP_RESPONSE_PROP_ID                           = 0x00000046,
    XCN_CERT_REQUEST_ORIGINATOR_PROP_ID                      = 0x00000047,
    XCN_CERT_SOURCE_LOCATION_PROP_ID                         = 0x00000048,
    XCN_CERT_SOURCE_URL_PROP_ID                              = 0x00000049,
    XCN_CERT_NEW_KEY_PROP_ID                                 = 0x0000004a,
    XCN_CERT_OCSP_CACHE_PREFIX_PROP_ID                       = 0x0000004b,
    XCN_CERT_SMART_CARD_ROOT_INFO_PROP_ID                    = 0x0000004c,
    XCN_CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID                    = 0x0000004d,
    XCN_CERT_NCRYPT_KEY_HANDLE_PROP_ID                       = 0x0000004e,
    XCN_CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID         = 0x0000004f,
    XCN_CERT_SUBJECT_INFO_ACCESS_PROP_ID                     = 0x00000050,
    XCN_CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID           = 0x00000051,
    XCN_CERT_CA_DISABLE_CRL_PROP_ID                          = 0x00000052,
    XCN_CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID              = 0x00000053,
    XCN_CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID           = 0x00000054,
    XCN_CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID      = 0x00000055,
    XCN_CERT_SUBJECT_DISABLE_CRL_PROP_ID                     = 0x00000056,
    XCN_CERT_CEP_PROP_ID                                     = 0x00000057,
    XCN_CERT_SIGN_HASH_CNG_ALG_PROP_ID                       = 0x00000059,
    XCN_CERT_SCARD_PIN_ID_PROP_ID                            = 0x0000005a,
    XCN_CERT_SCARD_PIN_INFO_PROP_ID                          = 0x0000005b,
    XCN_CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID              = 0x0000005c,
    XCN_CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID              = 0x0000005d,
    XCN_CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID               = 0x0000005e,
    XCN_CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID          = 0x0000005f,
    XCN_CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 0x00000060,
    XCN_CERT_NO_EXPIRE_NOTIFICATION_PROP_ID                  = 0x00000061,
    XCN_CERT_AUTH_ROOT_SHA256_HASH_PROP_ID                   = 0x00000062,
    XCN_CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID              = 0x00000063,
    XCN_CERT_HCRYPTPROV_TRANSFER_PROP_ID                     = 0x00000064,
    XCN_CERT_SMART_CARD_READER_PROP_ID                       = 0x00000065,
    XCN_CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID                  = 0x00000066,
    XCN_CERT_KEY_REPAIR_ATTEMPTED_PROP_ID                    = 0x00000067,
    XCN_CERT_DISALLOWED_FILETIME_PROP_ID                     = 0x00000068,
    XCN_CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID             = 0x00000069,
    XCN_CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID         = 0x0000006a,
    XCN_CERT_SHA256_HASH_PROP_ID                             = 0x0000006b,
    XCN_CERT_SCEP_SERVER_CERTS_PROP_ID                       = 0x0000006c,
    XCN_CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID                  = 0x0000006d,
    XCN_CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID                 = 0x0000006e,
    XCN_CERT_SCEP_CA_CERT_PROP_ID                            = 0x0000006f,
    XCN_CERT_SCEP_SIGNER_CERT_PROP_ID                        = 0x00000070,
    XCN_CERT_SCEP_NONCE_PROP_ID                              = 0x00000071,
    XCN_CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID               = 0x00000072,
    XCN_CERT_SCEP_FLAGS_PROP_ID                              = 0x00000073,
    XCN_CERT_SCEP_GUID_PROP_ID                               = 0x00000074,
    XCN_CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID                = 0x00000075,
    XCN_CERT_ISOLATED_KEY_PROP_ID                            = 0x00000076,
    XCN_CERT_SERIAL_CHAIN_PROP_ID                            = 0x00000077,
    XCN_CERT_KEY_CLASSIFICATION_PROP_ID                      = 0x00000078,
    XCN_CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID                 = 0x0000007a,
    XCN_CERT_NONCOMPLIANT_ROOT_URL_PROP_ID                   = 0x0000007b,
    XCN_CERT_PIN_SHA256_HASH_PROP_ID                         = 0x0000007c,
    XCN_CERT_CLR_DELETE_KEY_PROP_ID                          = 0x0000007d,
    XCN_CERT_NOT_BEFORE_FILETIME_PROP_ID                     = 0x0000007e,
    XCN_CERT_CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID            = 0x0000007f,
    XCN_CERT_FIRST_RESERVED_PROP_ID                          = 0x00000081,
    XCN_CERT_LAST_RESERVED_PROP_ID                           = 0x00007fff,
    XCN_CERT_FIRST_USER_PROP_ID                              = 0x00008000,
    XCN_CERT_LAST_USER_PROP_ID                               = 0x0000ffff,
    XCN_CERT_STORE_LOCALIZED_NAME_PROP_ID                    = 0x00001000,
}

enum IID_ICertProperty = GUID(0x728ab32e, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICertProperty : IDispatch
{
    HRESULT InitializeFromCertificate(VARIANT_BOOL, EncodingType, BSTR);
    HRESULT InitializeDecode(EncodingType, BSTR);
    HRESULT get_PropertyId(CERTENROLL_PROPERTYID*);
    HRESULT put_PropertyId(CERTENROLL_PROPERTYID);
    HRESULT get_RawData(EncodingType, BSTR*);
    HRESULT RemoveFromCertificate(VARIANT_BOOL, EncodingType, BSTR);
    HRESULT SetValueOnCertificate(VARIANT_BOOL, EncodingType, BSTR);
}
enum IID_ICertProperties = GUID(0x728ab32f, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICertProperties : IDispatch
{
    HRESULT get_ItemByIndex(int, ICertProperty*);
    HRESULT get_Count(int*);
    HRESULT get__NewEnum(IUnknown*);
    HRESULT Add(ICertProperty);
    HRESULT Remove(int);
    HRESULT Clear();
    HRESULT InitializeFromCertificate(VARIANT_BOOL, EncodingType, BSTR);
}
enum IID_ICertPropertyFriendlyName = GUID(0x728ab330, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICertPropertyFriendlyName : ICertProperty
{
    HRESULT Initialize(BSTR);
    HRESULT get_FriendlyName(BSTR*);
}
enum IID_ICertPropertyDescription = GUID(0x728ab331, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICertPropertyDescription : ICertProperty
{
    HRESULT Initialize(BSTR);
    HRESULT get_Description(BSTR*);
}
enum IID_ICertPropertyAutoEnroll = GUID(0x728ab332, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICertPropertyAutoEnroll : ICertProperty
{
    HRESULT Initialize(BSTR);
    HRESULT get_TemplateName(BSTR*);
}
enum IID_ICertPropertyRequestOriginator = GUID(0x728ab333, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICertPropertyRequestOriginator : ICertProperty
{
    HRESULT Initialize(BSTR);
    HRESULT InitializeFromLocalRequestOriginator();
    HRESULT get_RequestOriginator(BSTR*);
}
enum IID_ICertPropertySHA1Hash = GUID(0x728ab334, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICertPropertySHA1Hash : ICertProperty
{
    HRESULT Initialize(EncodingType, BSTR);
    HRESULT get_SHA1Hash(EncodingType, BSTR*);
}
enum IID_ICertPropertyKeyProvInfo = GUID(0x728ab336, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICertPropertyKeyProvInfo : ICertProperty
{
    HRESULT Initialize(IX509PrivateKey);
    HRESULT get_PrivateKey(IX509PrivateKey*);
}
enum IID_ICertPropertyArchived = GUID(0x728ab337, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICertPropertyArchived : ICertProperty
{
    HRESULT Initialize(VARIANT_BOOL);
    HRESULT get_Archived(VARIANT_BOOL*);
}
enum IID_ICertPropertyBackedUp = GUID(0x728ab338, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICertPropertyBackedUp : ICertProperty
{
    HRESULT InitializeFromCurrentTime(VARIANT_BOOL);
    HRESULT Initialize(VARIANT_BOOL, double);
    HRESULT get_BackedUpValue(VARIANT_BOOL*);
    HRESULT get_BackedUpTime(double*);
}
enum IID_ICertPropertyEnrollment = GUID(0x728ab339, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICertPropertyEnrollment : ICertProperty
{
    HRESULT Initialize(int, BSTR, BSTR, BSTR);
    HRESULT get_RequestId(int*);
    HRESULT get_CADnsName(BSTR*);
    HRESULT get_CAName(BSTR*);
    HRESULT get_FriendlyName(BSTR*);
}
enum IID_ICertPropertyRenewal = GUID(0x728ab33a, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICertPropertyRenewal : ICertProperty
{
    HRESULT Initialize(EncodingType, BSTR);
    HRESULT InitializeFromCertificateHash(VARIANT_BOOL, EncodingType, BSTR);
    HRESULT get_Renewal(EncodingType, BSTR*);
}
enum IID_ICertPropertyArchivedKeyHash = GUID(0x728ab33b, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICertPropertyArchivedKeyHash : ICertProperty
{
    HRESULT Initialize(EncodingType, BSTR);
    HRESULT get_ArchivedKeyHash(EncodingType, BSTR*);
}
alias EnrollmentPolicyServerPropertyFlags = int;
enum : int
{
    DefaultNone         = 0x00000000,
    DefaultPolicyServer = 0x00000001,
}

alias PolicyServerUrlFlags = int;
enum : int
{
    PsfNone                  = 0x00000000,
    PsfLocationGroupPolicy   = 0x00000001,
    PsfLocationRegistry      = 0x00000002,
    PsfUseClientId           = 0x00000004,
    PsfAutoEnrollmentEnabled = 0x00000010,
    PsfAllowUnTrustedCA      = 0x00000020,
}

enum IID_ICertPropertyEnrollmentPolicyServer = GUID(0x728ab34a, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICertPropertyEnrollmentPolicyServer : ICertProperty
{
    HRESULT Initialize(EnrollmentPolicyServerPropertyFlags, X509EnrollmentAuthFlags, X509EnrollmentAuthFlags, PolicyServerUrlFlags, BSTR, BSTR, BSTR, BSTR);
    HRESULT GetPolicyServerUrl(BSTR*);
    HRESULT GetPolicyServerId(BSTR*);
    HRESULT GetEnrollmentServerUrl(BSTR*);
    HRESULT GetRequestIdString(BSTR*);
    HRESULT GetPropertyFlags(EnrollmentPolicyServerPropertyFlags*);
    HRESULT GetUrlFlags(PolicyServerUrlFlags*);
    HRESULT GetAuthentication(X509EnrollmentAuthFlags*);
    HRESULT GetEnrollmentServerAuthentication(X509EnrollmentAuthFlags*);
}
enum IID_IX509SignatureInformation = GUID(0x728ab33c, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509SignatureInformation : IDispatch
{
    HRESULT get_HashAlgorithm(IObjectId*);
    HRESULT put_HashAlgorithm(IObjectId);
    HRESULT get_PublicKeyAlgorithm(IObjectId*);
    HRESULT put_PublicKeyAlgorithm(IObjectId);
    HRESULT get_Parameters(EncodingType, BSTR*);
    HRESULT put_Parameters(EncodingType, BSTR);
    HRESULT get_AlternateSignatureAlgorithm(VARIANT_BOOL*);
    HRESULT put_AlternateSignatureAlgorithm(VARIANT_BOOL);
    HRESULT get_AlternateSignatureAlgorithmSet(VARIANT_BOOL*);
    HRESULT get_NullSigned(VARIANT_BOOL*);
    HRESULT put_NullSigned(VARIANT_BOOL);
    HRESULT GetSignatureAlgorithm(VARIANT_BOOL, VARIANT_BOOL, IObjectId*);
    HRESULT SetDefaultValues();
}
enum IID_ISignerCertificate = GUID(0x728ab33d, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ISignerCertificate : IDispatch
{
    HRESULT Initialize(VARIANT_BOOL, X509PrivateKeyVerify, EncodingType, BSTR);
    HRESULT get_Certificate(EncodingType, BSTR*);
    HRESULT get_PrivateKey(IX509PrivateKey*);
    HRESULT get_Silent(VARIANT_BOOL*);
    HRESULT put_Silent(VARIANT_BOOL);
    HRESULT get_ParentWindow(int*);
    HRESULT put_ParentWindow(int);
    HRESULT get_UIContextMessage(BSTR*);
    HRESULT put_UIContextMessage(BSTR);
    HRESULT put_Pin(BSTR);
    HRESULT get_SignatureInformation(IX509SignatureInformation*);
}
enum IID_ISignerCertificates = GUID(0x728ab33e, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ISignerCertificates : IDispatch
{
    HRESULT get_ItemByIndex(int, ISignerCertificate*);
    HRESULT get_Count(int*);
    HRESULT get__NewEnum(IUnknown*);
    HRESULT Add(ISignerCertificate);
    HRESULT Remove(int);
    HRESULT Clear();
    HRESULT Find(ISignerCertificate, int*);
}
enum IID_IX509NameValuePair = GUID(0x728ab33f, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509NameValuePair : IDispatch
{
    HRESULT Initialize(BSTR, BSTR);
    HRESULT get_Value(BSTR*);
    HRESULT get_Name(BSTR*);
}
enum IID_IX509NameValuePairs = GUID(0x728ab340, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509NameValuePairs : IDispatch
{
    HRESULT get_ItemByIndex(int, IX509NameValuePair*);
    HRESULT get_Count(int*);
    HRESULT get__NewEnum(IUnknown*);
    HRESULT Add(IX509NameValuePair);
    HRESULT Remove(int);
    HRESULT Clear();
}
alias EnrollmentTemplateProperty = int;
enum : int
{
    TemplatePropCommonName            = 0x00000001,
    TemplatePropFriendlyName          = 0x00000002,
    TemplatePropEKUs                  = 0x00000003,
    TemplatePropCryptoProviders       = 0x00000004,
    TemplatePropMajorRevision         = 0x00000005,
    TemplatePropDescription           = 0x00000006,
    TemplatePropKeySpec               = 0x00000007,
    TemplatePropSchemaVersion         = 0x00000008,
    TemplatePropMinorRevision         = 0x00000009,
    TemplatePropRASignatureCount      = 0x0000000a,
    TemplatePropMinimumKeySize        = 0x0000000b,
    TemplatePropOID                   = 0x0000000c,
    TemplatePropSupersede             = 0x0000000d,
    TemplatePropRACertificatePolicies = 0x0000000e,
    TemplatePropRAEKUs                = 0x0000000f,
    TemplatePropCertificatePolicies   = 0x00000010,
    TemplatePropV1ApplicationPolicy   = 0x00000011,
    TemplatePropAsymmetricAlgorithm   = 0x00000012,
    TemplatePropKeySecurityDescriptor = 0x00000013,
    TemplatePropSymmetricAlgorithm    = 0x00000014,
    TemplatePropSymmetricKeyLength    = 0x00000015,
    TemplatePropHashAlgorithm         = 0x00000016,
    TemplatePropKeyUsage              = 0x00000017,
    TemplatePropEnrollmentFlags       = 0x00000018,
    TemplatePropSubjectNameFlags      = 0x00000019,
    TemplatePropPrivateKeyFlags       = 0x0000001a,
    TemplatePropGeneralFlags          = 0x0000001b,
    TemplatePropSecurityDescriptor    = 0x0000001c,
    TemplatePropExtensions            = 0x0000001d,
    TemplatePropValidityPeriod        = 0x0000001e,
    TemplatePropRenewalPeriod         = 0x0000001f,
}

enum IID_IX509CertificateTemplate = GUID(0x54244a13, 0x555a, 0x4e22, [0x89, 0x6d, 0x1b, 0xe, 0x52, 0xf7, 0x64, 0x6]);
interface IX509CertificateTemplate : IDispatch
{
    HRESULT get_Property(EnrollmentTemplateProperty, VARIANT*);
}
enum IID_IX509CertificateTemplates = GUID(0x13b79003, 0x2181, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509CertificateTemplates : IDispatch
{
    HRESULT get_ItemByIndex(int, IX509CertificateTemplate*);
    HRESULT get_Count(int*);
    HRESULT get__NewEnum(IUnknown*);
    HRESULT Add(IX509CertificateTemplate);
    HRESULT Remove(int);
    HRESULT Clear();
    HRESULT get_ItemByName(BSTR, IX509CertificateTemplate*);
    HRESULT get_ItemByOid(IObjectId, IX509CertificateTemplate*);
}
alias CommitTemplateFlags = int;
enum : int
{
    CommitFlagSaveTemplateGenerateOID   = 0x00000001,
    CommitFlagSaveTemplateUseCurrentOID = 0x00000002,
    CommitFlagSaveTemplateOverwrite     = 0x00000003,
    CommitFlagDeleteTemplate            = 0x00000004,
}

enum IID_IX509CertificateTemplateWritable = GUID(0xf49466a7, 0x395a, 0x4e9e, [0xb6, 0xe7, 0x32, 0xb3, 0x31, 0x60, 0xd, 0xc0]);
interface IX509CertificateTemplateWritable : IDispatch
{
    HRESULT Initialize(IX509CertificateTemplate);
    HRESULT Commit(CommitTemplateFlags, BSTR);
    HRESULT get_Property(EnrollmentTemplateProperty, VARIANT*);
    HRESULT put_Property(EnrollmentTemplateProperty, VARIANT);
    HRESULT get_Template(IX509CertificateTemplate*);
}
alias EnrollmentCAProperty = int;
enum : int
{
    CAPropCommonName         = 0x00000001,
    CAPropDistinguishedName  = 0x00000002,
    CAPropSanitizedName      = 0x00000003,
    CAPropSanitizedShortName = 0x00000004,
    CAPropDNSName            = 0x00000005,
    CAPropCertificateTypes   = 0x00000006,
    CAPropCertificate        = 0x00000007,
    CAPropDescription        = 0x00000008,
    CAPropWebServers         = 0x00000009,
    CAPropSiteName           = 0x0000000a,
    CAPropSecurity           = 0x0000000b,
    CAPropRenewalOnly        = 0x0000000c,
}

enum IID_ICertificationAuthority = GUID(0x835d1f61, 0x1e95, 0x4bc8, [0xb4, 0xd3, 0x97, 0x6c, 0x42, 0xb9, 0x68, 0xf7]);
interface ICertificationAuthority : IDispatch
{
    HRESULT get_Property(EnrollmentCAProperty, VARIANT*);
}
enum IID_ICertificationAuthorities = GUID(0x13b79005, 0x2181, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface ICertificationAuthorities : IDispatch
{
    HRESULT get_ItemByIndex(int, ICertificationAuthority*);
    HRESULT get_Count(int*);
    HRESULT get__NewEnum(IUnknown*);
    HRESULT Add(ICertificationAuthority);
    HRESULT Remove(int);
    HRESULT Clear();
    HRESULT ComputeSiteCosts();
    HRESULT get_ItemByName(BSTR, ICertificationAuthority*);
}
alias X509EnrollmentPolicyLoadOption = int;
enum : int
{
    LoadOptionDefault              = 0x00000000,
    LoadOptionCacheOnly            = 0x00000001,
    LoadOptionReload               = 0x00000002,
    LoadOptionRegisterForADChanges = 0x00000004,
}

alias EnrollmentPolicyFlags = int;
enum : int
{
    DisableGroupPolicyList = 0x00000002,
    DisableUserServerList  = 0x00000004,
}

alias PolicyServerUrlPropertyID = int;
enum : int
{
    PsPolicyID     = 0x00000000,
    PsFriendlyName = 0x00000001,
}

alias X509EnrollmentPolicyExportFlags = int;
enum : int
{
    ExportTemplates = 0x00000001,
    ExportOIDs      = 0x00000002,
    ExportCAs       = 0x00000004,
}

enum IID_IX509EnrollmentPolicyServer = GUID(0x13b79026, 0x2181, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509EnrollmentPolicyServer : IDispatch
{
    HRESULT Initialize(BSTR, BSTR, X509EnrollmentAuthFlags, VARIANT_BOOL, X509CertificateEnrollmentContext);
    HRESULT LoadPolicy(X509EnrollmentPolicyLoadOption);
    HRESULT GetTemplates(IX509CertificateTemplates*);
    HRESULT GetCAsForTemplate(IX509CertificateTemplate, ICertificationAuthorities*);
    HRESULT GetCAs(ICertificationAuthorities*);
    HRESULT Validate();
    HRESULT GetCustomOids(IObjectIds*);
    HRESULT GetNextUpdateTime(double*);
    HRESULT GetLastUpdateTime(double*);
    HRESULT GetPolicyServerUrl(BSTR*);
    HRESULT GetPolicyServerId(BSTR*);
    HRESULT GetFriendlyName(BSTR*);
    HRESULT GetIsDefaultCEP(VARIANT_BOOL*);
    HRESULT GetUseClientId(VARIANT_BOOL*);
    HRESULT GetAllowUnTrustedCA(VARIANT_BOOL*);
    HRESULT GetCachePath(BSTR*);
    HRESULT GetCacheDir(BSTR*);
    HRESULT GetAuthFlags(X509EnrollmentAuthFlags*);
    HRESULT SetCredential(int, X509EnrollmentAuthFlags, BSTR, BSTR);
    HRESULT QueryChanges(VARIANT_BOOL*);
    HRESULT InitializeImport(VARIANT);
    HRESULT Export(X509EnrollmentPolicyExportFlags, VARIANT*);
    HRESULT get_Cost(uint*);
    HRESULT put_Cost(uint);
}
enum IID_IX509PolicyServerUrl = GUID(0x884e204a, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509PolicyServerUrl : IDispatch
{
    HRESULT Initialize(X509CertificateEnrollmentContext);
    HRESULT get_Url(BSTR*);
    HRESULT put_Url(BSTR);
    HRESULT get_Default(VARIANT_BOOL*);
    HRESULT put_Default(VARIANT_BOOL);
    HRESULT get_Flags(PolicyServerUrlFlags*);
    HRESULT put_Flags(PolicyServerUrlFlags);
    HRESULT get_AuthFlags(X509EnrollmentAuthFlags*);
    HRESULT put_AuthFlags(X509EnrollmentAuthFlags);
    HRESULT get_Cost(uint*);
    HRESULT put_Cost(uint);
    HRESULT GetStringProperty(PolicyServerUrlPropertyID, BSTR*);
    HRESULT SetStringProperty(PolicyServerUrlPropertyID, BSTR);
    HRESULT UpdateRegistry(X509CertificateEnrollmentContext);
    HRESULT RemoveFromRegistry(X509CertificateEnrollmentContext);
}
enum IID_IX509PolicyServerListManager = GUID(0x884e204b, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509PolicyServerListManager : IDispatch
{
    HRESULT get_ItemByIndex(int, IX509PolicyServerUrl*);
    HRESULT get_Count(int*);
    HRESULT get__NewEnum(IUnknown*);
    HRESULT Add(IX509PolicyServerUrl);
    HRESULT Remove(int);
    HRESULT Clear();
    HRESULT Initialize(X509CertificateEnrollmentContext, PolicyServerUrlFlags);
}
alias X509RequestType = int;
enum : int
{
    TypeAny         = 0x00000000,
    TypePkcs10      = 0x00000001,
    TypePkcs7       = 0x00000002,
    TypeCmc         = 0x00000003,
    TypeCertificate = 0x00000004,
}

alias X509RequestInheritOptions = int;
enum : int
{
    InheritDefault                = 0x00000000,
    InheritNewDefaultKey          = 0x00000001,
    InheritNewSimilarKey          = 0x00000002,
    InheritPrivateKey             = 0x00000003,
    InheritPublicKey              = 0x00000004,
    InheritKeyMask                = 0x0000000f,
    InheritNone                   = 0x00000010,
    InheritRenewalCertificateFlag = 0x00000020,
    InheritTemplateFlag           = 0x00000040,
    InheritSubjectFlag            = 0x00000080,
    InheritExtensionsFlag         = 0x00000100,
    InheritSubjectAltNameFlag     = 0x00000200,
    InheritValidityPeriodFlag     = 0x00000400,
    InheritReserved80000000       = 0x80000000,
}

alias InnerRequestLevel = int;
enum : int
{
    LevelInnermost = 0x00000000,
    LevelNext      = 0x00000001,
}

enum IID_IX509CertificateRequest = GUID(0x728ab341, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509CertificateRequest : IDispatch
{
    HRESULT Initialize(X509CertificateEnrollmentContext);
    HRESULT Encode();
    HRESULT ResetForEncode();
    HRESULT GetInnerRequest(InnerRequestLevel, IX509CertificateRequest*);
    HRESULT get_Type(X509RequestType*);
    HRESULT get_EnrollmentContext(X509CertificateEnrollmentContext*);
    HRESULT get_Silent(VARIANT_BOOL*);
    HRESULT put_Silent(VARIANT_BOOL);
    HRESULT get_ParentWindow(int*);
    HRESULT put_ParentWindow(int);
    HRESULT get_UIContextMessage(BSTR*);
    HRESULT put_UIContextMessage(BSTR);
    HRESULT get_SuppressDefaults(VARIANT_BOOL*);
    HRESULT put_SuppressDefaults(VARIANT_BOOL);
    HRESULT get_RenewalCertificate(EncodingType, BSTR*);
    HRESULT put_RenewalCertificate(EncodingType, BSTR);
    HRESULT get_ClientId(RequestClientInfoClientId*);
    HRESULT put_ClientId(RequestClientInfoClientId);
    HRESULT get_CspInformations(ICspInformations*);
    HRESULT put_CspInformations(ICspInformations);
    HRESULT get_HashAlgorithm(IObjectId*);
    HRESULT put_HashAlgorithm(IObjectId);
    HRESULT get_AlternateSignatureAlgorithm(VARIANT_BOOL*);
    HRESULT put_AlternateSignatureAlgorithm(VARIANT_BOOL);
    HRESULT get_RawData(EncodingType, BSTR*);
}
alias Pkcs10AllowedSignatureTypes = int;
enum : int
{
    AllowedKeySignature  = 0x00000001,
    AllowedNullSignature = 0x00000002,
}

enum IID_IX509CertificateRequestPkcs10 = GUID(0x728ab342, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509CertificateRequestPkcs10 : IX509CertificateRequest
{
    HRESULT InitializeFromTemplateName(X509CertificateEnrollmentContext, BSTR);
    HRESULT InitializeFromPrivateKey(X509CertificateEnrollmentContext, IX509PrivateKey, BSTR);
    HRESULT InitializeFromPublicKey(X509CertificateEnrollmentContext, IX509PublicKey, BSTR);
    HRESULT InitializeFromCertificate(X509CertificateEnrollmentContext, BSTR, EncodingType, X509RequestInheritOptions);
    HRESULT InitializeDecode(BSTR, EncodingType);
    HRESULT CheckSignature(Pkcs10AllowedSignatureTypes);
    HRESULT IsSmartCard(VARIANT_BOOL*);
    HRESULT get_TemplateObjectId(IObjectId*);
    HRESULT get_PublicKey(IX509PublicKey*);
    HRESULT get_PrivateKey(IX509PrivateKey*);
    HRESULT get_NullSigned(VARIANT_BOOL*);
    HRESULT get_ReuseKey(VARIANT_BOOL*);
    HRESULT get_OldCertificate(EncodingType, BSTR*);
    HRESULT get_Subject(IX500DistinguishedName*);
    HRESULT put_Subject(IX500DistinguishedName);
    HRESULT get_CspStatuses(ICspStatuses*);
    HRESULT get_SmimeCapabilities(VARIANT_BOOL*);
    HRESULT put_SmimeCapabilities(VARIANT_BOOL);
    HRESULT get_SignatureInformation(IX509SignatureInformation*);
    HRESULT get_KeyContainerNamePrefix(BSTR*);
    HRESULT put_KeyContainerNamePrefix(BSTR);
    HRESULT get_CryptAttributes(ICryptAttributes*);
    HRESULT get_X509Extensions(IX509Extensions*);
    HRESULT get_CriticalExtensions(IObjectIds*);
    HRESULT get_SuppressOids(IObjectIds*);
    HRESULT get_RawDataToBeSigned(EncodingType, BSTR*);
    HRESULT get_Signature(EncodingType, BSTR*);
    HRESULT GetCspStatuses(X509KeySpec, ICspStatuses*);
}
enum IID_IX509CertificateRequestPkcs10V2 = GUID(0x728ab35b, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509CertificateRequestPkcs10V2 : IX509CertificateRequestPkcs10
{
    HRESULT InitializeFromTemplate(X509CertificateEnrollmentContext, IX509EnrollmentPolicyServer, IX509CertificateTemplate);
    HRESULT InitializeFromPrivateKeyTemplate(X509CertificateEnrollmentContext, IX509PrivateKey, IX509EnrollmentPolicyServer, IX509CertificateTemplate);
    HRESULT InitializeFromPublicKeyTemplate(X509CertificateEnrollmentContext, IX509PublicKey, IX509EnrollmentPolicyServer, IX509CertificateTemplate);
    HRESULT get_PolicyServer(IX509EnrollmentPolicyServer*);
    HRESULT get_Template(IX509CertificateTemplate*);
}
enum IID_IX509CertificateRequestPkcs10V3 = GUID(0x54ea9942, 0x3d66, 0x4530, [0xb7, 0x6e, 0x7c, 0x91, 0x70, 0xd3, 0xec, 0x52]);
interface IX509CertificateRequestPkcs10V3 : IX509CertificateRequestPkcs10V2
{
    HRESULT get_AttestPrivateKey(VARIANT_BOOL*);
    HRESULT put_AttestPrivateKey(VARIANT_BOOL);
    HRESULT get_AttestationEncryptionCertificate(EncodingType, BSTR*);
    HRESULT put_AttestationEncryptionCertificate(EncodingType, BSTR);
    HRESULT get_EncryptionAlgorithm(IObjectId*);
    HRESULT put_EncryptionAlgorithm(IObjectId);
    HRESULT get_EncryptionStrength(int*);
    HRESULT put_EncryptionStrength(int);
    HRESULT get_ChallengePassword(BSTR*);
    HRESULT put_ChallengePassword(BSTR);
    HRESULT get_NameValuePairs(IX509NameValuePairs*);
}
alias KeyAttestationClaimType = int;
enum : int
{
    XCN_NCRYPT_CLAIM_NONE                  = 0x00000000,
    XCN_NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT = 0x00000003,
    XCN_NCRYPT_CLAIM_AUTHORITY_ONLY        = 0x00000001,
    XCN_NCRYPT_CLAIM_SUBJECT_ONLY          = 0x00000002,
    XCN_NCRYPT_CLAIM_UNKNOWN               = 0x00001000,
}

enum IID_IX509CertificateRequestPkcs10V4 = GUID(0x728ab363, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509CertificateRequestPkcs10V4 : IX509CertificateRequestPkcs10V3
{
    HRESULT get_ClaimType(KeyAttestationClaimType*);
    HRESULT put_ClaimType(KeyAttestationClaimType);
    HRESULT get_AttestPrivateKeyPreferred(VARIANT_BOOL*);
    HRESULT put_AttestPrivateKeyPreferred(VARIANT_BOOL);
}
enum IID_IX509CertificateRequestCertificate = GUID(0x728ab343, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509CertificateRequestCertificate : IX509CertificateRequestPkcs10
{
    HRESULT CheckPublicKeySignature(IX509PublicKey);
    HRESULT get_Issuer(IX500DistinguishedName*);
    HRESULT put_Issuer(IX500DistinguishedName);
    HRESULT get_NotBefore(double*);
    HRESULT put_NotBefore(double);
    HRESULT get_NotAfter(double*);
    HRESULT put_NotAfter(double);
    HRESULT get_SerialNumber(EncodingType, BSTR*);
    HRESULT put_SerialNumber(EncodingType, BSTR);
    HRESULT get_SignerCertificate(ISignerCertificate*);
    HRESULT put_SignerCertificate(ISignerCertificate);
}
enum IID_IX509CertificateRequestCertificate2 = GUID(0x728ab35a, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509CertificateRequestCertificate2 : IX509CertificateRequestCertificate
{
    HRESULT InitializeFromTemplate(X509CertificateEnrollmentContext, IX509EnrollmentPolicyServer, IX509CertificateTemplate);
    HRESULT InitializeFromPrivateKeyTemplate(X509CertificateEnrollmentContext, IX509PrivateKey, IX509EnrollmentPolicyServer, IX509CertificateTemplate);
    HRESULT get_PolicyServer(IX509EnrollmentPolicyServer*);
    HRESULT get_Template(IX509CertificateTemplate*);
}
enum IID_IX509CertificateRequestPkcs7 = GUID(0x728ab344, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509CertificateRequestPkcs7 : IX509CertificateRequest
{
    HRESULT InitializeFromTemplateName(X509CertificateEnrollmentContext, BSTR);
    HRESULT InitializeFromCertificate(X509CertificateEnrollmentContext, VARIANT_BOOL, BSTR, EncodingType, X509RequestInheritOptions);
    HRESULT InitializeFromInnerRequest(IX509CertificateRequest);
    HRESULT InitializeDecode(BSTR, EncodingType);
    HRESULT get_RequesterName(BSTR*);
    HRESULT put_RequesterName(BSTR);
    HRESULT get_SignerCertificate(ISignerCertificate*);
    HRESULT put_SignerCertificate(ISignerCertificate);
}
enum IID_IX509CertificateRequestPkcs7V2 = GUID(0x728ab35c, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509CertificateRequestPkcs7V2 : IX509CertificateRequestPkcs7
{
    HRESULT InitializeFromTemplate(X509CertificateEnrollmentContext, IX509EnrollmentPolicyServer, IX509CertificateTemplate);
    HRESULT get_PolicyServer(IX509EnrollmentPolicyServer*);
    HRESULT get_Template(IX509CertificateTemplate*);
    HRESULT CheckCertificateSignature(VARIANT_BOOL);
}
enum IID_IX509CertificateRequestCmc = GUID(0x728ab345, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509CertificateRequestCmc : IX509CertificateRequestPkcs7
{
    HRESULT InitializeFromInnerRequestTemplateName(IX509CertificateRequest, BSTR);
    HRESULT get_TemplateObjectId(IObjectId*);
    HRESULT get_NullSigned(VARIANT_BOOL*);
    HRESULT get_CryptAttributes(ICryptAttributes*);
    HRESULT get_NameValuePairs(IX509NameValuePairs*);
    HRESULT get_X509Extensions(IX509Extensions*);
    HRESULT get_CriticalExtensions(IObjectIds*);
    HRESULT get_SuppressOids(IObjectIds*);
    HRESULT get_TransactionId(int*);
    HRESULT put_TransactionId(int);
    HRESULT get_SenderNonce(EncodingType, BSTR*);
    HRESULT put_SenderNonce(EncodingType, BSTR);
    HRESULT get_SignatureInformation(IX509SignatureInformation*);
    HRESULT get_ArchivePrivateKey(VARIANT_BOOL*);
    HRESULT put_ArchivePrivateKey(VARIANT_BOOL);
    HRESULT get_KeyArchivalCertificate(EncodingType, BSTR*);
    HRESULT put_KeyArchivalCertificate(EncodingType, BSTR);
    HRESULT get_EncryptionAlgorithm(IObjectId*);
    HRESULT put_EncryptionAlgorithm(IObjectId);
    HRESULT get_EncryptionStrength(int*);
    HRESULT put_EncryptionStrength(int);
    HRESULT get_EncryptedKeyHash(EncodingType, BSTR*);
    HRESULT get_SignerCertificates(ISignerCertificates*);
}
enum IID_IX509CertificateRequestCmc2 = GUID(0x728ab35d, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509CertificateRequestCmc2 : IX509CertificateRequestCmc
{
    HRESULT InitializeFromTemplate(X509CertificateEnrollmentContext, IX509EnrollmentPolicyServer, IX509CertificateTemplate);
    HRESULT InitializeFromInnerRequestTemplate(IX509CertificateRequest, IX509EnrollmentPolicyServer, IX509CertificateTemplate);
    HRESULT get_PolicyServer(IX509EnrollmentPolicyServer*);
    HRESULT get_Template(IX509CertificateTemplate*);
    HRESULT CheckSignature(Pkcs10AllowedSignatureTypes);
    HRESULT CheckCertificateSignature(ISignerCertificate, VARIANT_BOOL);
}
alias InstallResponseRestrictionFlags = int;
enum : int
{
    AllowNone                 = 0x00000000,
    AllowNoOutstandingRequest = 0x00000001,
    AllowUntrustedCertificate = 0x00000002,
    AllowUntrustedRoot        = 0x00000004,
}

enum IID_IX509Enrollment = GUID(0x728ab346, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509Enrollment : IDispatch
{
    HRESULT Initialize(X509CertificateEnrollmentContext);
    HRESULT InitializeFromTemplateName(X509CertificateEnrollmentContext, BSTR);
    HRESULT InitializeFromRequest(IX509CertificateRequest);
    HRESULT CreateRequest(EncodingType, BSTR*);
    HRESULT Enroll();
    HRESULT InstallResponse(InstallResponseRestrictionFlags, BSTR, EncodingType, BSTR);
    HRESULT CreatePFX(BSTR, PFXExportOptions, EncodingType, BSTR*);
    HRESULT get_Request(IX509CertificateRequest*);
    HRESULT get_Silent(VARIANT_BOOL*);
    HRESULT put_Silent(VARIANT_BOOL);
    HRESULT get_ParentWindow(int*);
    HRESULT put_ParentWindow(int);
    HRESULT get_NameValuePairs(IX509NameValuePairs*);
    HRESULT get_EnrollmentContext(X509CertificateEnrollmentContext*);
    HRESULT get_Status(IX509EnrollmentStatus*);
    HRESULT get_Certificate(EncodingType, BSTR*);
    HRESULT get_Response(EncodingType, BSTR*);
    HRESULT get_CertificateFriendlyName(BSTR*);
    HRESULT put_CertificateFriendlyName(BSTR);
    HRESULT get_CertificateDescription(BSTR*);
    HRESULT put_CertificateDescription(BSTR);
    HRESULT get_RequestId(int*);
    HRESULT get_CAConfigString(BSTR*);
}
enum IID_IX509Enrollment2 = GUID(0x728ab350, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509Enrollment2 : IX509Enrollment
{
    HRESULT InitializeFromTemplate(X509CertificateEnrollmentContext, IX509EnrollmentPolicyServer, IX509CertificateTemplate);
    HRESULT InstallResponse2(InstallResponseRestrictionFlags, BSTR, EncodingType, BSTR, BSTR, BSTR, PolicyServerUrlFlags, X509EnrollmentAuthFlags);
    HRESULT get_PolicyServer(IX509EnrollmentPolicyServer*);
    HRESULT get_Template(IX509CertificateTemplate*);
    HRESULT get_RequestIdString(BSTR*);
}
alias WebEnrollmentFlags = int;
enum : int
{
    EnrollPrompt = 0x00000001,
}

enum IID_IX509EnrollmentHelper = GUID(0x728ab351, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509EnrollmentHelper : IDispatch
{
    HRESULT AddPolicyServer(BSTR, BSTR, PolicyServerUrlFlags, X509EnrollmentAuthFlags, BSTR, BSTR);
    HRESULT AddEnrollmentServer(BSTR, X509EnrollmentAuthFlags, BSTR, BSTR);
    HRESULT Enroll(BSTR, BSTR, EncodingType, WebEnrollmentFlags, BSTR*);
    HRESULT Initialize(X509CertificateEnrollmentContext);
}
enum IID_IX509EnrollmentWebClassFactory = GUID(0x728ab349, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509EnrollmentWebClassFactory : IDispatch
{
    HRESULT CreateObject(BSTR, IUnknown*);
}
enum IID_IX509MachineEnrollmentFactory = GUID(0x728ab352, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509MachineEnrollmentFactory : IDispatch
{
    HRESULT CreateObject(BSTR, IX509EnrollmentHelper*);
}
alias CRLRevocationReason = int;
enum : int
{
    XCN_CRL_REASON_UNSPECIFIED            = 0x00000000,
    XCN_CRL_REASON_KEY_COMPROMISE         = 0x00000001,
    XCN_CRL_REASON_CA_COMPROMISE          = 0x00000002,
    XCN_CRL_REASON_AFFILIATION_CHANGED    = 0x00000003,
    XCN_CRL_REASON_SUPERSEDED             = 0x00000004,
    XCN_CRL_REASON_CESSATION_OF_OPERATION = 0x00000005,
    XCN_CRL_REASON_CERTIFICATE_HOLD       = 0x00000006,
    XCN_CRL_REASON_REMOVE_FROM_CRL        = 0x00000008,
    XCN_CRL_REASON_PRIVILEGE_WITHDRAWN    = 0x00000009,
    XCN_CRL_REASON_AA_COMPROMISE          = 0x0000000a,
}

enum IID_IX509CertificateRevocationListEntry = GUID(0x728ab35e, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509CertificateRevocationListEntry : IDispatch
{
    HRESULT Initialize(EncodingType, BSTR, double);
    HRESULT get_SerialNumber(EncodingType, BSTR*);
    HRESULT get_RevocationDate(double*);
    HRESULT get_RevocationReason(CRLRevocationReason*);
    HRESULT put_RevocationReason(CRLRevocationReason);
    HRESULT get_X509Extensions(IX509Extensions*);
    HRESULT get_CriticalExtensions(IObjectIds*);
}
enum IID_IX509CertificateRevocationListEntries = GUID(0x728ab35f, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509CertificateRevocationListEntries : IDispatch
{
    HRESULT get_ItemByIndex(int, IX509CertificateRevocationListEntry*);
    HRESULT get_Count(int*);
    HRESULT get__NewEnum(IUnknown*);
    HRESULT Add(IX509CertificateRevocationListEntry);
    HRESULT Remove(int);
    HRESULT Clear();
    HRESULT get_IndexBySerialNumber(EncodingType, BSTR, int*);
    HRESULT AddRange(IX509CertificateRevocationListEntries);
}
enum IID_IX509CertificateRevocationList = GUID(0x728ab360, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509CertificateRevocationList : IDispatch
{
    HRESULT Initialize();
    HRESULT InitializeDecode(BSTR, EncodingType);
    HRESULT Encode();
    HRESULT ResetForEncode();
    HRESULT CheckPublicKeySignature(IX509PublicKey);
    HRESULT CheckSignature();
    HRESULT get_Issuer(IX500DistinguishedName*);
    HRESULT put_Issuer(IX500DistinguishedName);
    HRESULT get_ThisUpdate(double*);
    HRESULT put_ThisUpdate(double);
    HRESULT get_NextUpdate(double*);
    HRESULT put_NextUpdate(double);
    HRESULT get_X509CRLEntries(IX509CertificateRevocationListEntries*);
    HRESULT get_X509Extensions(IX509Extensions*);
    HRESULT get_CriticalExtensions(IObjectIds*);
    HRESULT get_SignerCertificate(ISignerCertificate*);
    HRESULT put_SignerCertificate(ISignerCertificate);
    HRESULT get_CRLNumber(EncodingType, BSTR*);
    HRESULT put_CRLNumber(EncodingType, BSTR);
    HRESULT get_CAVersion(int*);
    HRESULT put_CAVersion(int);
    HRESULT get_BaseCRL(VARIANT_BOOL*);
    HRESULT get_NullSigned(VARIANT_BOOL*);
    HRESULT get_HashAlgorithm(IObjectId*);
    HRESULT put_HashAlgorithm(IObjectId);
    HRESULT get_AlternateSignatureAlgorithm(VARIANT_BOOL*);
    HRESULT put_AlternateSignatureAlgorithm(VARIANT_BOOL);
    HRESULT get_SignatureInformation(IX509SignatureInformation*);
    HRESULT get_RawData(EncodingType, BSTR*);
    HRESULT get_RawDataToBeSigned(EncodingType, BSTR*);
    HRESULT get_Signature(EncodingType, BSTR*);
}
enum IID_ICertificateAttestationChallenge = GUID(0x6f175a7c, 0x4a3a, 0x40ae, [0x9d, 0xba, 0x59, 0x2f, 0xd6, 0xbb, 0xf9, 0xb8]);
interface ICertificateAttestationChallenge : IDispatch
{
    HRESULT Initialize(EncodingType, BSTR);
    HRESULT DecryptChallenge(EncodingType, BSTR*);
    HRESULT get_RequestID(BSTR*);
}
enum IID_ICertificateAttestationChallenge2 = GUID(0x4631334d, 0xe266, 0x47d6, [0xbd, 0x79, 0xbe, 0x53, 0xcb, 0x2e, 0x27, 0x53]);
interface ICertificateAttestationChallenge2 : ICertificateAttestationChallenge
{
    HRESULT put_KeyContainerName(BSTR);
    HRESULT put_KeyBlob(EncodingType, BSTR);
}
enum IID_IX509SCEPEnrollment = GUID(0x728ab361, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509SCEPEnrollment : IDispatch
{
    HRESULT Initialize(IX509CertificateRequestPkcs10, BSTR, EncodingType, BSTR, EncodingType);
    HRESULT InitializeForPending(X509CertificateEnrollmentContext);
    HRESULT CreateRequestMessage(EncodingType, BSTR*);
    HRESULT CreateRetrievePendingMessage(EncodingType, BSTR*);
    HRESULT CreateRetrieveCertificateMessage(X509CertificateEnrollmentContext, BSTR, EncodingType, BSTR, EncodingType, EncodingType, BSTR*);
    HRESULT ProcessResponseMessage(BSTR, EncodingType, X509SCEPDisposition*);
    HRESULT put_ServerCapabilities(BSTR);
    HRESULT get_FailInfo(X509SCEPFailInfo*);
    HRESULT get_SignerCertificate(ISignerCertificate*);
    HRESULT put_SignerCertificate(ISignerCertificate);
    HRESULT get_OldCertificate(ISignerCertificate*);
    HRESULT put_OldCertificate(ISignerCertificate);
    HRESULT get_TransactionId(EncodingType, BSTR*);
    HRESULT put_TransactionId(EncodingType, BSTR);
    HRESULT get_Request(IX509CertificateRequestPkcs10*);
    HRESULT get_CertificateFriendlyName(BSTR*);
    HRESULT put_CertificateFriendlyName(BSTR);
    HRESULT get_Status(IX509EnrollmentStatus*);
    HRESULT get_Certificate(EncodingType, BSTR*);
    HRESULT get_Silent(VARIANT_BOOL*);
    HRESULT put_Silent(VARIANT_BOOL);
    HRESULT DeleteRequest();
}
alias X509SCEPProcessMessageFlags = int;
enum : int
{
    SCEPProcessDefault         = 0x00000000,
    SCEPProcessSkipCertInstall = 0x00000001,
}

alias DelayRetryAction = int;
enum : int
{
    DelayRetryUnknown     = 0x00000000,
    DelayRetryNone        = 0x00000001,
    DelayRetryShort       = 0x00000002,
    DelayRetryLong        = 0x00000003,
    DelayRetrySuccess     = 0x00000004,
    DelayRetryPastSuccess = 0x00000005,
}

enum IID_IX509SCEPEnrollment2 = GUID(0x728ab364, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509SCEPEnrollment2 : IX509SCEPEnrollment
{
    HRESULT CreateChallengeAnswerMessage(EncodingType, BSTR*);
    HRESULT ProcessResponseMessage2(X509SCEPProcessMessageFlags, BSTR, EncodingType, X509SCEPDisposition*);
    HRESULT get_ResultMessageText(BSTR*);
    HRESULT get_DelayRetry(DelayRetryAction*);
    HRESULT get_ActivityId(BSTR*);
    HRESULT put_ActivityId(BSTR);
}
enum IID_IX509SCEPEnrollmentHelper = GUID(0x728ab365, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
interface IX509SCEPEnrollmentHelper : IDispatch
{
    HRESULT Initialize(BSTR, BSTR, IX509CertificateRequestPkcs10, BSTR);
    HRESULT InitializeForPending(BSTR, BSTR, X509CertificateEnrollmentContext, BSTR);
    HRESULT Enroll(X509SCEPProcessMessageFlags, X509SCEPDisposition*);
    HRESULT FetchPending(X509SCEPProcessMessageFlags, X509SCEPDisposition*);
    HRESULT get_X509SCEPEnrollment(IX509SCEPEnrollment*);
    HRESULT get_ResultMessageText(BSTR*);
}
alias X509CertificateTemplateGeneralFlag = int;
enum : int
{
    GeneralMachineType  = 0x00000040,
    GeneralCA           = 0x00000080,
    GeneralCrossCA      = 0x00000800,
    GeneralDefault      = 0x00010000,
    GeneralModified     = 0x00020000,
    GeneralDonotPersist = 0x00001000,
}

alias X509CertificateTemplateEnrollmentFlag = int;
enum : int
{
    EnrollmentIncludeSymmetricAlgorithms                   = 0x00000001,
    EnrollmentPendAllRequests                              = 0x00000002,
    EnrollmentPublishToKRAContainer                        = 0x00000004,
    EnrollmentPublishToDS                                  = 0x00000008,
    EnrollmentAutoEnrollmentCheckUserDSCertificate         = 0x00000010,
    EnrollmentAutoEnrollment                               = 0x00000020,
    EnrollmentDomainAuthenticationNotRequired              = 0x00000080,
    EnrollmentPreviousApprovalValidateReenrollment         = 0x00000040,
    EnrollmentUserInteractionRequired                      = 0x00000100,
    EnrollmentAddTemplateName                              = 0x00000200,
    EnrollmentRemoveInvalidCertificateFromPersonalStore    = 0x00000400,
    EnrollmentAllowEnrollOnBehalfOf                        = 0x00000800,
    EnrollmentAddOCSPNoCheck                               = 0x00001000,
    EnrollmentReuseKeyOnFullSmartCard                      = 0x00002000,
    EnrollmentNoRevocationInfoInCerts                      = 0x00004000,
    EnrollmentIncludeBasicConstraintsForEECerts            = 0x00008000,
    EnrollmentPreviousApprovalKeyBasedValidateReenrollment = 0x00010000,
    EnrollmentCertificateIssuancePoliciesFromRequest       = 0x00020000,
    EnrollmentSkipAutoRenewal                              = 0x00040000,
}

alias X509CertificateTemplateSubjectNameFlag = int;
enum : int
{
    SubjectNameEnrolleeSupplies                  = 0x00000001,
    SubjectNameRequireDirectoryPath              = 0x80000000,
    SubjectNameRequireCommonName                 = 0x40000000,
    SubjectNameRequireEmail                      = 0x20000000,
    SubjectNameRequireDNS                        = 0x10000000,
    SubjectNameAndAlternativeNameOldCertSupplies = 0x00000008,
    SubjectAlternativeNameEnrolleeSupplies       = 0x00010000,
    SubjectAlternativeNameRequireDirectoryGUID   = 0x01000000,
    SubjectAlternativeNameRequireUPN             = 0x02000000,
    SubjectAlternativeNameRequireEmail           = 0x04000000,
    SubjectAlternativeNameRequireSPN             = 0x00800000,
    SubjectAlternativeNameRequireDNS             = 0x08000000,
    SubjectAlternativeNameRequireDomainDNS       = 0x00400000,
}

alias X509CertificateTemplatePrivateKeyFlag = int;
enum : int
{
    PrivateKeyRequireArchival                    = 0x00000001,
    PrivateKeyExportable                         = 0x00000010,
    PrivateKeyRequireStrongKeyProtection         = 0x00000020,
    PrivateKeyRequireAlternateSignatureAlgorithm = 0x00000040,
    PrivateKeyRequireSameKeyRenewal              = 0x00000080,
    PrivateKeyUseLegacyProvider                  = 0x00000100,
    PrivateKeyEKTrustOnUse                       = 0x00000200,
    PrivateKeyEKValidateCert                     = 0x00000400,
    PrivateKeyEKValidateKey                      = 0x00000800,
    PrivateKeyAttestNone                         = 0x00000000,
    PrivateKeyAttestPreferred                    = 0x00001000,
    PrivateKeyAttestRequired                     = 0x00002000,
    PrivateKeyAttestMask                         = 0x00003000,
    PrivateKeyAttestWithoutPolicy                = 0x00004000,
    PrivateKeyServerVersionMask                  = 0x000f0000,
    PrivateKeyServerVersionShift                 = 0x00000010,
    PrivateKeyHelloKspKey                        = 0x00100000,
    PrivateKeyHelloLogonKey                      = 0x00200000,
    PrivateKeyClientVersionMask                  = 0x0f000000,
    PrivateKeyClientVersionShift                 = 0x00000018,
}

enum CLSID_CObjectId = GUID(0x884e2000, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CObjectId
{
}
enum CLSID_CObjectIds = GUID(0x884e2001, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CObjectIds
{
}
enum CLSID_CBinaryConverter = GUID(0x884e2002, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CBinaryConverter
{
}
enum CLSID_CX500DistinguishedName = GUID(0x884e2003, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX500DistinguishedName
{
}
enum CLSID_CCspInformation = GUID(0x884e2007, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCspInformation
{
}
enum CLSID_CCspInformations = GUID(0x884e2008, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCspInformations
{
}
enum CLSID_CCspStatus = GUID(0x884e2009, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCspStatus
{
}
enum CLSID_CX509PublicKey = GUID(0x884e200b, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509PublicKey
{
}
enum CLSID_CX509PrivateKey = GUID(0x884e200c, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509PrivateKey
{
}
enum CLSID_CX509EndorsementKey = GUID(0x11a25a1d, 0xb9a3, 0x4edd, [0xaf, 0x83, 0x3b, 0x59, 0xad, 0xbe, 0xd3, 0x61]);
struct CX509EndorsementKey
{
}
enum CLSID_CX509Extension = GUID(0x884e200d, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509Extension
{
}
enum CLSID_CX509Extensions = GUID(0x884e200e, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509Extensions
{
}
enum CLSID_CX509ExtensionKeyUsage = GUID(0x884e200f, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509ExtensionKeyUsage
{
}
enum CLSID_CX509ExtensionEnhancedKeyUsage = GUID(0x884e2010, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509ExtensionEnhancedKeyUsage
{
}
enum CLSID_CX509ExtensionTemplateName = GUID(0x884e2011, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509ExtensionTemplateName
{
}
enum CLSID_CX509ExtensionTemplate = GUID(0x884e2012, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509ExtensionTemplate
{
}
enum CLSID_CAlternativeName = GUID(0x884e2013, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CAlternativeName
{
}
enum CLSID_CAlternativeNames = GUID(0x884e2014, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CAlternativeNames
{
}
enum CLSID_CX509ExtensionAlternativeNames = GUID(0x884e2015, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509ExtensionAlternativeNames
{
}
enum CLSID_CX509ExtensionBasicConstraints = GUID(0x884e2016, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509ExtensionBasicConstraints
{
}
enum CLSID_CX509ExtensionSubjectKeyIdentifier = GUID(0x884e2017, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509ExtensionSubjectKeyIdentifier
{
}
enum CLSID_CX509ExtensionAuthorityKeyIdentifier = GUID(0x884e2018, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509ExtensionAuthorityKeyIdentifier
{
}
enum CLSID_CSmimeCapability = GUID(0x884e2019, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CSmimeCapability
{
}
enum CLSID_CSmimeCapabilities = GUID(0x884e201a, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CSmimeCapabilities
{
}
enum CLSID_CX509ExtensionSmimeCapabilities = GUID(0x884e201b, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509ExtensionSmimeCapabilities
{
}
enum CLSID_CPolicyQualifier = GUID(0x884e201c, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CPolicyQualifier
{
}
enum CLSID_CPolicyQualifiers = GUID(0x884e201d, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CPolicyQualifiers
{
}
enum CLSID_CCertificatePolicy = GUID(0x884e201e, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCertificatePolicy
{
}
enum CLSID_CCertificatePolicies = GUID(0x884e201f, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCertificatePolicies
{
}
enum CLSID_CX509ExtensionCertificatePolicies = GUID(0x884e2020, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509ExtensionCertificatePolicies
{
}
enum CLSID_CX509ExtensionMSApplicationPolicies = GUID(0x884e2021, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509ExtensionMSApplicationPolicies
{
}
enum CLSID_CX509Attribute = GUID(0x884e2022, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509Attribute
{
}
enum CLSID_CX509Attributes = GUID(0x884e2023, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509Attributes
{
}
enum CLSID_CX509AttributeExtensions = GUID(0x884e2024, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509AttributeExtensions
{
}
enum CLSID_CX509AttributeClientId = GUID(0x884e2025, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509AttributeClientId
{
}
enum CLSID_CX509AttributeRenewalCertificate = GUID(0x884e2026, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509AttributeRenewalCertificate
{
}
enum CLSID_CX509AttributeArchiveKey = GUID(0x884e2027, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509AttributeArchiveKey
{
}
enum CLSID_CX509AttributeArchiveKeyHash = GUID(0x884e2028, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509AttributeArchiveKeyHash
{
}
enum CLSID_CX509AttributeOSVersion = GUID(0x884e202a, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509AttributeOSVersion
{
}
enum CLSID_CX509AttributeCspProvider = GUID(0x884e202b, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509AttributeCspProvider
{
}
enum CLSID_CCryptAttribute = GUID(0x884e202c, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCryptAttribute
{
}
enum CLSID_CCryptAttributes = GUID(0x884e202d, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCryptAttributes
{
}
enum CLSID_CCertProperty = GUID(0x884e202e, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCertProperty
{
}
enum CLSID_CCertProperties = GUID(0x884e202f, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCertProperties
{
}
enum CLSID_CCertPropertyFriendlyName = GUID(0x884e2030, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCertPropertyFriendlyName
{
}
enum CLSID_CCertPropertyDescription = GUID(0x884e2031, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCertPropertyDescription
{
}
enum CLSID_CCertPropertyAutoEnroll = GUID(0x884e2032, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCertPropertyAutoEnroll
{
}
enum CLSID_CCertPropertyRequestOriginator = GUID(0x884e2033, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCertPropertyRequestOriginator
{
}
enum CLSID_CCertPropertySHA1Hash = GUID(0x884e2034, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCertPropertySHA1Hash
{
}
enum CLSID_CCertPropertyKeyProvInfo = GUID(0x884e2036, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCertPropertyKeyProvInfo
{
}
enum CLSID_CCertPropertyArchived = GUID(0x884e2037, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCertPropertyArchived
{
}
enum CLSID_CCertPropertyBackedUp = GUID(0x884e2038, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCertPropertyBackedUp
{
}
enum CLSID_CCertPropertyEnrollment = GUID(0x884e2039, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCertPropertyEnrollment
{
}
enum CLSID_CCertPropertyRenewal = GUID(0x884e203a, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCertPropertyRenewal
{
}
enum CLSID_CCertPropertyArchivedKeyHash = GUID(0x884e203b, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCertPropertyArchivedKeyHash
{
}
enum CLSID_CCertPropertyEnrollmentPolicyServer = GUID(0x884e204c, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CCertPropertyEnrollmentPolicyServer
{
}
enum CLSID_CSignerCertificate = GUID(0x884e203d, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CSignerCertificate
{
}
enum CLSID_CX509NameValuePair = GUID(0x884e203f, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509NameValuePair
{
}
enum CLSID_CCertificateAttestationChallenge = GUID(0x1362ada1, 0xeb60, 0x456a, [0xb6, 0xe1, 0x11, 0x80, 0x50, 0xdb, 0x74, 0x1b]);
struct CCertificateAttestationChallenge
{
}
enum CLSID_CX509CertificateRequestPkcs10 = GUID(0x884e2042, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509CertificateRequestPkcs10
{
}
enum CLSID_CX509CertificateRequestCertificate = GUID(0x884e2043, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509CertificateRequestCertificate
{
}
enum CLSID_CX509CertificateRequestPkcs7 = GUID(0x884e2044, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509CertificateRequestPkcs7
{
}
enum CLSID_CX509CertificateRequestCmc = GUID(0x884e2045, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509CertificateRequestCmc
{
}
enum CLSID_CX509Enrollment = GUID(0x884e2046, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509Enrollment
{
}
enum CLSID_CX509EnrollmentWebClassFactory = GUID(0x884e2049, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509EnrollmentWebClassFactory
{
}
enum CLSID_CX509EnrollmentHelper = GUID(0x884e2050, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509EnrollmentHelper
{
}
enum CLSID_CX509MachineEnrollmentFactory = GUID(0x884e2051, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509MachineEnrollmentFactory
{
}
enum CLSID_CX509EnrollmentPolicyActiveDirectory = GUID(0x91f39027, 0x217f, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509EnrollmentPolicyActiveDirectory
{
}
enum CLSID_CX509EnrollmentPolicyWebService = GUID(0x91f39028, 0x217f, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509EnrollmentPolicyWebService
{
}
enum CLSID_CX509PolicyServerListManager = GUID(0x91f39029, 0x217f, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509PolicyServerListManager
{
}
enum CLSID_CX509PolicyServerUrl = GUID(0x91f3902a, 0x217f, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509PolicyServerUrl
{
}
enum CLSID_CX509CertificateTemplateADWritable = GUID(0x8336e323, 0x2e6a, 0x4a04, [0x93, 0x7c, 0x54, 0x8f, 0x68, 0x18, 0x39, 0xb3]);
struct CX509CertificateTemplateADWritable
{
}
enum CLSID_CX509CertificateRevocationListEntry = GUID(0x884e205e, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509CertificateRevocationListEntry
{
}
enum CLSID_CX509CertificateRevocationListEntries = GUID(0x884e205f, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509CertificateRevocationListEntries
{
}
enum CLSID_CX509CertificateRevocationList = GUID(0x884e2060, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509CertificateRevocationList
{
}
enum CLSID_CX509SCEPEnrollment = GUID(0x884e2061, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509SCEPEnrollment
{
}
enum CLSID_CX509SCEPEnrollmentHelper = GUID(0x884e2062, 0x217d, 0x11da, [0xb2, 0xa4, 0x0, 0xe, 0x7b, 0xbb, 0x2b, 0x9]);
struct CX509SCEPEnrollmentHelper
{
}
alias ImportPFXFlags = int;
enum : int
{
    ImportNone                = 0x00000000,
    ImportMachineContext      = 0x00000001,
    ImportForceOverwrite      = 0x00000002,
    ImportSilent              = 0x00000004,
    ImportSaveProperties      = 0x00000008,
    ImportExportable          = 0x00000010,
    ImportExportableEncrypted = 0x00000020,
    ImportNoUserProtected     = 0x00000040,
    ImportUserProtected       = 0x00000080,
    ImportUserProtectedHigh   = 0x00000100,
    ImportInstallCertificate  = 0x00000200,
    ImportInstallChain        = 0x00000400,
    ImportInstallChainAndRoot = 0x00000800,
}

alias FNIMPORTPFXTOPROVIDER = HRESULT function(HWND, const(ubyte)*, uint, ImportPFXFlags, const(wchar)*, const(wchar)*, const(wchar)*, const(wchar)*, const(wchar)*, const(wchar)*, uint*, CERT_CONTEXT***);
alias FNIMPORTPFXTOPROVIDERFREEDATA = void function(uint, CERT_CONTEXT**);
enum IID_ICertEncodeStringArray = GUID(0x12a88820, 0x7494, 0x11d0, [0x88, 0x16, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
interface ICertEncodeStringArray : IDispatch
{
    HRESULT Decode(const(BSTR));
    HRESULT GetStringType(int*);
    HRESULT GetCount(int*);
    HRESULT GetValue(int, BSTR*);
    HRESULT Reset(int, CERT_RDN_ATTR_VALUE_TYPE);
    HRESULT SetValue(int, const(BSTR));
    HRESULT Encode(BSTR*);
}
enum IID_ICertEncodeStringArray2 = GUID(0x9c680d93, 0x9b7d, 0x4e95, [0x90, 0x18, 0x4f, 0xfe, 0x10, 0xba, 0x5a, 0xda]);
interface ICertEncodeStringArray2 : ICertEncodeStringArray
{
    HRESULT DecodeBlob(const(BSTR), EncodingType);
    HRESULT EncodeBlob(EncodingType, BSTR*);
}
enum IID_ICertEncodeLongArray = GUID(0x15e2f230, 0xa0a2, 0x11d0, [0x88, 0x21, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
interface ICertEncodeLongArray : IDispatch
{
    HRESULT Decode(const(BSTR));
    HRESULT GetCount(int*);
    HRESULT GetValue(int, int*);
    HRESULT Reset(int);
    HRESULT SetValue(int, int);
    HRESULT Encode(BSTR*);
}
enum IID_ICertEncodeLongArray2 = GUID(0x4efde84a, 0xbd9b, 0x4fc2, [0xa1, 0x8, 0xc3, 0x47, 0xd4, 0x78, 0x84, 0xf]);
interface ICertEncodeLongArray2 : ICertEncodeLongArray
{
    HRESULT DecodeBlob(const(BSTR), EncodingType);
    HRESULT EncodeBlob(EncodingType, BSTR*);
}
enum IID_ICertEncodeDateArray = GUID(0x2f9469a0, 0xa470, 0x11d0, [0x88, 0x21, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
interface ICertEncodeDateArray : IDispatch
{
    HRESULT Decode(const(BSTR));
    HRESULT GetCount(int*);
    HRESULT GetValue(int, double*);
    HRESULT Reset(int);
    HRESULT SetValue(int, double);
    HRESULT Encode(BSTR*);
}
enum IID_ICertEncodeDateArray2 = GUID(0x99a4edb5, 0x2b8e, 0x448d, [0xbf, 0x95, 0xbb, 0xa8, 0xd7, 0x78, 0x9d, 0xc8]);
interface ICertEncodeDateArray2 : ICertEncodeDateArray
{
    HRESULT DecodeBlob(const(BSTR), EncodingType);
    HRESULT EncodeBlob(EncodingType, BSTR*);
}
enum IID_ICertEncodeCRLDistInfo = GUID(0x1958640, 0xbbff, 0x11d0, [0x88, 0x25, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
interface ICertEncodeCRLDistInfo : IDispatch
{
    HRESULT Decode(const(BSTR));
    HRESULT GetDistPointCount(int*);
    HRESULT GetNameCount(int, int*);
    HRESULT GetNameChoice(int, int, int*);
    HRESULT GetName(int, int, BSTR*);
    HRESULT Reset(int);
    HRESULT SetNameCount(int, int);
    HRESULT SetNameEntry(int, int, CERT_ALT_NAME, const(BSTR));
    HRESULT Encode(BSTR*);
}
enum IID_ICertEncodeCRLDistInfo2 = GUID(0xb4275d4b, 0x3e30, 0x446f, [0xad, 0x36, 0x9, 0xd0, 0x31, 0x20, 0xb0, 0x78]);
interface ICertEncodeCRLDistInfo2 : ICertEncodeCRLDistInfo
{
    HRESULT DecodeBlob(const(BSTR), EncodingType);
    HRESULT EncodeBlob(EncodingType, BSTR*);
}
enum IID_ICertEncodeAltName = GUID(0x1c9a8c70, 0x1271, 0x11d1, [0x9b, 0xd4, 0x0, 0xc0, 0x4f, 0xb6, 0x83, 0xfa]);
interface ICertEncodeAltName : IDispatch
{
    HRESULT Decode(const(BSTR));
    HRESULT GetNameCount(int*);
    HRESULT GetNameChoice(int, int*);
    HRESULT GetName(int, BSTR*);
    HRESULT Reset(int);
    HRESULT SetNameEntry(int, CERT_ALT_NAME, const(BSTR));
    HRESULT Encode(BSTR*);
}
enum IID_ICertEncodeAltName2 = GUID(0xf67fe177, 0x5ef1, 0x4535, [0xb4, 0xce, 0x29, 0xdf, 0x15, 0xe2, 0xe0, 0xc3]);
interface ICertEncodeAltName2 : ICertEncodeAltName
{
    HRESULT DecodeBlob(const(BSTR), EncodingType);
    HRESULT EncodeBlob(EncodingType, BSTR*);
    HRESULT GetNameBlob(int, EncodingType, BSTR*);
    HRESULT SetNameEntryBlob(int, int, const(BSTR), EncodingType);
}
enum IID_ICertEncodeBitString = GUID(0x6db525be, 0x1278, 0x11d1, [0x9b, 0xd4, 0x0, 0xc0, 0x4f, 0xb6, 0x83, 0xfa]);
interface ICertEncodeBitString : IDispatch
{
    HRESULT Decode(const(BSTR));
    HRESULT GetBitCount(int*);
    HRESULT GetBitString(BSTR*);
    HRESULT Encode(int, BSTR, BSTR*);
}
enum IID_ICertEncodeBitString2 = GUID(0xe070d6e7, 0x23ef, 0x4dd2, [0x82, 0x42, 0xeb, 0xd9, 0xc9, 0x28, 0xcb, 0x30]);
interface ICertEncodeBitString2 : ICertEncodeBitString
{
    HRESULT DecodeBlob(const(BSTR), EncodingType);
    HRESULT EncodeBlob(int, const(BSTR), EncodingType, EncodingType, BSTR*);
    HRESULT GetBitStringBlob(EncodingType, BSTR*);
}
enum CLSID_CCertEncodeStringArray = GUID(0x19a76fe0, 0x7494, 0x11d0, [0x88, 0x16, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
struct CCertEncodeStringArray
{
}
enum CLSID_CCertEncodeLongArray = GUID(0x4e0680a0, 0xa0a2, 0x11d0, [0x88, 0x21, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
struct CCertEncodeLongArray
{
}
enum CLSID_CCertEncodeDateArray = GUID(0x301f77b0, 0xa470, 0x11d0, [0x88, 0x21, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
struct CCertEncodeDateArray
{
}
enum CLSID_CCertEncodeCRLDistInfo = GUID(0x1fa60a0, 0xbbff, 0x11d0, [0x88, 0x25, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
struct CCertEncodeCRLDistInfo
{
}
enum CLSID_CCertEncodeAltName = GUID(0x1cfc4cda, 0x1271, 0x11d1, [0x9b, 0xd4, 0x0, 0xc0, 0x4f, 0xb6, 0x83, 0xfa]);
struct CCertEncodeAltName
{
}
enum CLSID_CCertEncodeBitString = GUID(0x6d6b3cd8, 0x1278, 0x11d1, [0x9b, 0xd4, 0x0, 0xc0, 0x4f, 0xb6, 0x83, 0xfa]);
struct CCertEncodeBitString
{
}
enum IID_ICertExit = GUID(0xe19ae1a0, 0x7364, 0x11d0, [0x88, 0x16, 0x0, 0xa0, 0xc9, 0x3, 0xb8, 0x3c]);
interface ICertExit : IDispatch
{
    HRESULT Initialize(const(BSTR), CERT_EXIT_EVENT_MASK*);
    HRESULT Notify(int, int);
    HRESULT GetDescription(BSTR*);
}
enum IID_ICertExit2 = GUID(0xabf484b, 0xd049, 0x464d, [0xa7, 0xed, 0x55, 0x2e, 0x75, 0x29, 0xb0, 0xff]);
interface ICertExit2 : ICertExit
{
    HRESULT GetManageModule(ICertManageModule*);
}
alias ENUM_CATYPES = int;
enum : int
{
    ENUM_ENTERPRISE_ROOTCA = 0x00000000,
    ENUM_ENTERPRISE_SUBCA  = 0x00000001,
    ENUM_STANDALONE_ROOTCA = 0x00000003,
    ENUM_STANDALONE_SUBCA  = 0x00000004,
    ENUM_UNKNOWN_CA        = 0x00000005,
}

struct CAINFO
{
    uint cbSize;
    ENUM_CATYPES CAType;
    uint cCASignatureCerts;
    uint cCAExchangeCerts;
    uint cExitModules;
    int lPropIdMax;
    int lRoleSeparationEnabled;
    uint cKRACertUsedCount;
    uint cKRACertCount;
    uint fAdvancedServer;
}
enum IID_ICEnroll = GUID(0x43f8f288, 0x7a20, 0x11d0, [0x8f, 0x6, 0x0, 0xc0, 0x4f, 0xc2, 0x95, 0xe1]);
interface ICEnroll : IDispatch
{
    HRESULT createFilePKCS10(BSTR, BSTR, BSTR);
    HRESULT acceptFilePKCS7(BSTR);
    HRESULT createPKCS10(BSTR, BSTR, BSTR*);
    HRESULT acceptPKCS7(BSTR);
    HRESULT getCertFromPKCS7(BSTR, BSTR*);
    HRESULT enumProviders(int, int, BSTR*);
    HRESULT enumContainers(int, BSTR*);
    HRESULT freeRequestInfo(BSTR);
    HRESULT get_MyStoreName(BSTR*);
    HRESULT put_MyStoreName(BSTR);
    HRESULT get_MyStoreType(BSTR*);
    HRESULT put_MyStoreType(BSTR);
    HRESULT get_MyStoreFlags(int*);
    HRESULT put_MyStoreFlags(int);
    HRESULT get_CAStoreName(BSTR*);
    HRESULT put_CAStoreName(BSTR);
    HRESULT get_CAStoreType(BSTR*);
    HRESULT put_CAStoreType(BSTR);
    HRESULT get_CAStoreFlags(int*);
    HRESULT put_CAStoreFlags(int);
    HRESULT get_RootStoreName(BSTR*);
    HRESULT put_RootStoreName(BSTR);
    HRESULT get_RootStoreType(BSTR*);
    HRESULT put_RootStoreType(BSTR);
    HRESULT get_RootStoreFlags(int*);
    HRESULT put_RootStoreFlags(int);
    HRESULT get_RequestStoreName(BSTR*);
    HRESULT put_RequestStoreName(BSTR);
    HRESULT get_RequestStoreType(BSTR*);
    HRESULT put_RequestStoreType(BSTR);
    HRESULT get_RequestStoreFlags(int*);
    HRESULT put_RequestStoreFlags(int);
    HRESULT get_ContainerName(BSTR*);
    HRESULT put_ContainerName(BSTR);
    HRESULT get_ProviderName(BSTR*);
    HRESULT put_ProviderName(BSTR);
    HRESULT get_ProviderType(int*);
    HRESULT put_ProviderType(int);
    HRESULT get_KeySpec(int*);
    HRESULT put_KeySpec(int);
    HRESULT get_ProviderFlags(int*);
    HRESULT put_ProviderFlags(int);
    HRESULT get_UseExistingKeySet(BOOL*);
    HRESULT put_UseExistingKeySet(BOOL);
    HRESULT get_GenKeyFlags(int*);
    HRESULT put_GenKeyFlags(int);
    HRESULT get_DeleteRequestCert(BOOL*);
    HRESULT put_DeleteRequestCert(BOOL);
    HRESULT get_WriteCertToCSP(BOOL*);
    HRESULT put_WriteCertToCSP(BOOL);
    HRESULT get_SPCFileName(BSTR*);
    HRESULT put_SPCFileName(BSTR);
    HRESULT get_PVKFileName(BSTR*);
    HRESULT put_PVKFileName(BSTR);
    HRESULT get_HashAlgorithm(BSTR*);
    HRESULT put_HashAlgorithm(BSTR);
}
enum IID_ICEnroll2 = GUID(0x704ca730, 0xc90b, 0x11d1, [0x9b, 0xec, 0x0, 0xc0, 0x4f, 0xc2, 0x95, 0xe1]);
interface ICEnroll2 : ICEnroll
{
    HRESULT addCertTypeToRequest(BSTR);
    HRESULT addNameValuePairToSignature(BSTR, BSTR);
    HRESULT get_WriteCertToUserDS(BOOL*);
    HRESULT put_WriteCertToUserDS(BOOL);
    HRESULT get_EnableT61DNEncoding(BOOL*);
    HRESULT put_EnableT61DNEncoding(BOOL);
}
enum IID_ICEnroll3 = GUID(0xc28c2d95, 0xb7de, 0x11d2, [0xa4, 0x21, 0x0, 0xc0, 0x4f, 0x79, 0xfe, 0x8e]);
interface ICEnroll3 : ICEnroll2
{
    HRESULT InstallPKCS7(BSTR);
    HRESULT Reset();
    HRESULT GetSupportedKeySpec(int*);
    HRESULT GetKeyLen(BOOL, BOOL, int*);
    HRESULT EnumAlgs(int, int, int*);
    HRESULT GetAlgName(int, BSTR*);
    HRESULT put_ReuseHardwareKeyIfUnableToGenNew(BOOL);
    HRESULT get_ReuseHardwareKeyIfUnableToGenNew(BOOL*);
    HRESULT put_HashAlgID(int);
    HRESULT get_HashAlgID(int*);
    HRESULT put_LimitExchangeKeyToEncipherment(BOOL);
    HRESULT get_LimitExchangeKeyToEncipherment(BOOL*);
    HRESULT put_EnableSMIMECapabilities(BOOL);
    HRESULT get_EnableSMIMECapabilities(BOOL*);
}
enum IID_ICEnroll4 = GUID(0xc1f1188a, 0x2eb5, 0x4a80, [0x84, 0x1b, 0x7e, 0x72, 0x9a, 0x35, 0x6d, 0x90]);
interface ICEnroll4 : ICEnroll3
{
    HRESULT put_PrivateKeyArchiveCertificate(BSTR);
    HRESULT get_PrivateKeyArchiveCertificate(BSTR*);
    HRESULT put_ThumbPrint(BSTR);
    HRESULT get_ThumbPrint(BSTR*);
    HRESULT binaryToString(int, BSTR, BSTR*);
    HRESULT stringToBinary(int, BSTR, BSTR*);
    HRESULT addExtensionToRequest(int, BSTR, BSTR);
    HRESULT addAttributeToRequest(int, BSTR, BSTR);
    HRESULT addNameValuePairToRequest(int, BSTR, BSTR);
    HRESULT resetExtensions();
    HRESULT resetAttributes();
    HRESULT createRequest(CERT_CREATE_REQUEST_FLAGS, BSTR, BSTR, BSTR*);
    HRESULT createFileRequest(CERT_CREATE_REQUEST_FLAGS, BSTR, BSTR, BSTR);
    HRESULT acceptResponse(BSTR);
    HRESULT acceptFileResponse(BSTR);
    HRESULT getCertFromResponse(BSTR, BSTR*);
    HRESULT getCertFromFileResponse(BSTR, BSTR*);
    HRESULT createPFX(BSTR, BSTR*);
    HRESULT createFilePFX(BSTR, BSTR);
    HRESULT setPendingRequestInfo(int, BSTR, BSTR, BSTR);
    HRESULT enumPendingRequest(int, PENDING_REQUEST_DESIRED_PROPERTY, VARIANT*);
    HRESULT removePendingRequest(BSTR);
    HRESULT GetKeyLenEx(XEKL_KEYSIZE, XEKL_KEYSPEC, int*);
    HRESULT InstallPKCS7Ex(BSTR, int*);
    HRESULT addCertTypeToRequestEx(ADDED_CERT_TYPE, BSTR, int, BOOL, int);
    HRESULT getProviderType(BSTR, int*);
    HRESULT put_SignerCertificate(BSTR);
    HRESULT put_ClientId(int);
    HRESULT get_ClientId(int*);
    HRESULT addBlobPropertyToCertificate(int, int, BSTR);
    HRESULT resetBlobProperties();
    HRESULT put_IncludeSubjectKeyID(BOOL);
    HRESULT get_IncludeSubjectKeyID(BOOL*);
}
enum IID_IEnroll = GUID(0xacaa7838, 0x4585, 0x11d1, [0xab, 0x57, 0x0, 0xc0, 0x4f, 0xc2, 0x95, 0xe1]);
interface IEnroll : IUnknown
{
    HRESULT createFilePKCS10WStr(const(wchar)*, const(wchar)*, const(wchar)*);
    HRESULT acceptFilePKCS7WStr(const(wchar)*);
    HRESULT createPKCS10WStr(const(wchar)*, const(wchar)*, CRYPT_INTEGER_BLOB*);
    HRESULT acceptPKCS7Blob(CRYPT_INTEGER_BLOB*);
    CERT_CONTEXT* getCertContextFromPKCS7(CRYPT_INTEGER_BLOB*);
    HCERTSTORE getMyStore();
    HCERTSTORE getCAStore();
    HCERTSTORE getROOTHStore();
    HRESULT enumProvidersWStr(int, int, PWSTR*);
    HRESULT enumContainersWStr(int, PWSTR*);
    HRESULT freeRequestInfoBlob(CRYPT_INTEGER_BLOB);
    HRESULT get_MyStoreNameWStr(PWSTR*);
    HRESULT put_MyStoreNameWStr(PWSTR);
    HRESULT get_MyStoreTypeWStr(PWSTR*);
    HRESULT put_MyStoreTypeWStr(PWSTR);
    HRESULT get_MyStoreFlags(int*);
    HRESULT put_MyStoreFlags(int);
    HRESULT get_CAStoreNameWStr(PWSTR*);
    HRESULT put_CAStoreNameWStr(PWSTR);
    HRESULT get_CAStoreTypeWStr(PWSTR*);
    HRESULT put_CAStoreTypeWStr(PWSTR);
    HRESULT get_CAStoreFlags(int*);
    HRESULT put_CAStoreFlags(int);
    HRESULT get_RootStoreNameWStr(PWSTR*);
    HRESULT put_RootStoreNameWStr(PWSTR);
    HRESULT get_RootStoreTypeWStr(PWSTR*);
    HRESULT put_RootStoreTypeWStr(PWSTR);
    HRESULT get_RootStoreFlags(int*);
    HRESULT put_RootStoreFlags(int);
    HRESULT get_RequestStoreNameWStr(PWSTR*);
    HRESULT put_RequestStoreNameWStr(PWSTR);
    HRESULT get_RequestStoreTypeWStr(PWSTR*);
    HRESULT put_RequestStoreTypeWStr(PWSTR);
    HRESULT get_RequestStoreFlags(int*);
    HRESULT put_RequestStoreFlags(int);
    HRESULT get_ContainerNameWStr(PWSTR*);
    HRESULT put_ContainerNameWStr(PWSTR);
    HRESULT get_ProviderNameWStr(PWSTR*);
    HRESULT put_ProviderNameWStr(PWSTR);
    HRESULT get_ProviderType(int*);
    HRESULT put_ProviderType(int);
    HRESULT get_KeySpec(int*);
    HRESULT put_KeySpec(int);
    HRESULT get_ProviderFlags(int*);
    HRESULT put_ProviderFlags(int);
    HRESULT get_UseExistingKeySet(BOOL*);
    HRESULT put_UseExistingKeySet(BOOL);
    HRESULT get_GenKeyFlags(int*);
    HRESULT put_GenKeyFlags(int);
    HRESULT get_DeleteRequestCert(BOOL*);
    HRESULT put_DeleteRequestCert(BOOL);
    HRESULT get_WriteCertToUserDS(BOOL*);
    HRESULT put_WriteCertToUserDS(BOOL);
    HRESULT get_EnableT61DNEncoding(BOOL*);
    HRESULT put_EnableT61DNEncoding(BOOL);
    HRESULT get_WriteCertToCSP(BOOL*);
    HRESULT put_WriteCertToCSP(BOOL);
    HRESULT get_SPCFileNameWStr(PWSTR*);
    HRESULT put_SPCFileNameWStr(PWSTR);
    HRESULT get_PVKFileNameWStr(PWSTR*);
    HRESULT put_PVKFileNameWStr(PWSTR);
    HRESULT get_HashAlgorithmWStr(PWSTR*);
    HRESULT put_HashAlgorithmWStr(PWSTR);
    HRESULT get_RenewalCertificate(CERT_CONTEXT**);
    HRESULT put_RenewalCertificate(const(CERT_CONTEXT)*);
    HRESULT AddCertTypeToRequestWStr(PWSTR);
    HRESULT AddNameValuePairToSignatureWStr(PWSTR, PWSTR);
    HRESULT AddExtensionsToRequest(CERT_EXTENSIONS*);
    HRESULT AddAuthenticatedAttributesToPKCS7Request(CRYPT_ATTRIBUTES*);
    HRESULT CreatePKCS7RequestFromRequest(CRYPT_INTEGER_BLOB*, const(CERT_CONTEXT)*, CRYPT_INTEGER_BLOB*);
}
enum IID_IEnroll2 = GUID(0xc080e199, 0xb7df, 0x11d2, [0xa4, 0x21, 0x0, 0xc0, 0x4f, 0x79, 0xfe, 0x8e]);
interface IEnroll2 : IEnroll
{
    HRESULT InstallPKCS7Blob(CRYPT_INTEGER_BLOB*);
    HRESULT Reset();
    HRESULT GetSupportedKeySpec(int*);
    HRESULT GetKeyLen(BOOL, BOOL, int*);
    HRESULT EnumAlgs(int, int, int*);
    HRESULT GetAlgNameWStr(int, PWSTR*);
    HRESULT put_ReuseHardwareKeyIfUnableToGenNew(BOOL);
    HRESULT get_ReuseHardwareKeyIfUnableToGenNew(BOOL*);
    HRESULT put_HashAlgID(int);
    HRESULT get_HashAlgID(int*);
    HRESULT SetHStoreMy(HCERTSTORE);
    HRESULT SetHStoreCA(HCERTSTORE);
    HRESULT SetHStoreROOT(HCERTSTORE);
    HRESULT SetHStoreRequest(HCERTSTORE);
    HRESULT put_LimitExchangeKeyToEncipherment(BOOL);
    HRESULT get_LimitExchangeKeyToEncipherment(BOOL*);
    HRESULT put_EnableSMIMECapabilities(BOOL);
    HRESULT get_EnableSMIMECapabilities(BOOL*);
}
enum IID_IEnroll4 = GUID(0xf8053fe5, 0x78f4, 0x448f, [0xa0, 0xdb, 0x41, 0xd6, 0x1b, 0x73, 0x44, 0x6b]);
interface IEnroll4 : IEnroll2
{
    HRESULT put_ThumbPrintWStr(CRYPT_INTEGER_BLOB);
    HRESULT get_ThumbPrintWStr(CRYPT_INTEGER_BLOB*);
    HRESULT SetPrivateKeyArchiveCertificate(const(CERT_CONTEXT)*);
    CERT_CONTEXT* GetPrivateKeyArchiveCertificate();
    HRESULT binaryBlobToString(int, CRYPT_INTEGER_BLOB*, PWSTR*);
    HRESULT stringToBinaryBlob(int, const(wchar)*, CRYPT_INTEGER_BLOB*, int*, int*);
    HRESULT addExtensionToRequestWStr(int, const(wchar)*, CRYPT_INTEGER_BLOB*);
    HRESULT addAttributeToRequestWStr(int, const(wchar)*, CRYPT_INTEGER_BLOB*);
    HRESULT addNameValuePairToRequestWStr(int, const(wchar)*, const(wchar)*);
    HRESULT resetExtensions();
    HRESULT resetAttributes();
    HRESULT createRequestWStr(CERT_CREATE_REQUEST_FLAGS, const(wchar)*, const(wchar)*, CRYPT_INTEGER_BLOB*);
    HRESULT createFileRequestWStr(CERT_CREATE_REQUEST_FLAGS, const(wchar)*, const(wchar)*, const(wchar)*);
    HRESULT acceptResponseBlob(CRYPT_INTEGER_BLOB*);
    HRESULT acceptFileResponseWStr(const(wchar)*);
    HRESULT getCertContextFromResponseBlob(CRYPT_INTEGER_BLOB*, CERT_CONTEXT**);
    HRESULT getCertContextFromFileResponseWStr(const(wchar)*, CERT_CONTEXT**);
    HRESULT createPFXWStr(const(wchar)*, CRYPT_INTEGER_BLOB*);
    HRESULT createFilePFXWStr(const(wchar)*, const(wchar)*);
    HRESULT setPendingRequestInfoWStr(int, const(wchar)*, const(wchar)*, const(wchar)*);
    HRESULT enumPendingRequestWStr(int, PENDING_REQUEST_DESIRED_PROPERTY, void*);
    HRESULT removePendingRequestWStr(CRYPT_INTEGER_BLOB);
    HRESULT GetKeyLenEx(XEKL_KEYSIZE, XEKL_KEYSPEC, int*);
    HRESULT InstallPKCS7BlobEx(CRYPT_INTEGER_BLOB*, int*);
    HRESULT AddCertTypeToRequestWStrEx(ADDED_CERT_TYPE, const(wchar)*, int, BOOL, int);
    HRESULT getProviderTypeWStr(const(wchar)*, int*);
    HRESULT addBlobPropertyToCertificateWStr(int, int, CRYPT_INTEGER_BLOB*);
    HRESULT SetSignerCertificate(const(CERT_CONTEXT)*);
    HRESULT put_ClientId(int);
    HRESULT get_ClientId(int*);
    HRESULT put_IncludeSubjectKeyID(BOOL);
    HRESULT get_IncludeSubjectKeyID(BOOL*);
}
enum CLSID_CEnroll2 = GUID(0x127698e4, 0xe730, 0x4e5c, [0xa2, 0xb1, 0x21, 0x49, 0xa, 0x70, 0xc8, 0xa1]);
struct CEnroll2
{
}
enum CLSID_CEnroll = GUID(0x43f8f289, 0x7a20, 0x11d0, [0x8f, 0x6, 0x0, 0xc0, 0x4f, 0xc2, 0x95, 0xe1]);
struct CEnroll
{
}
enum IID_ICertRequestD = GUID(0xd99e6e70, 0xfc88, 0x11d0, [0xb4, 0x98, 0x0, 0xa0, 0xc9, 0x3, 0x12, 0xf3]);
interface ICertRequestD : IUnknown
{
    HRESULT Request(uint, const(wchar)*, uint*, uint*, const(wchar)*, const(CERTTRANSBLOB)*, CERTTRANSBLOB*, CERTTRANSBLOB*, CERTTRANSBLOB*);
    HRESULT GetCACert(uint, const(wchar)*, CERTTRANSBLOB*);
    HRESULT Ping(const(wchar)*);
}
enum IID_ICertRequestD2 = GUID(0x5422fd3a, 0xd4b8, 0x4cef, [0xa1, 0x2e, 0xe8, 0x7d, 0x4c, 0xa2, 0x2e, 0x90]);
interface ICertRequestD2 : ICertRequestD
{
    HRESULT Request2(const(wchar)*, uint, const(wchar)*, uint*, uint*, const(wchar)*, const(CERTTRANSBLOB)*, CERTTRANSBLOB*, CERTTRANSBLOB*, CERTTRANSBLOB*);
    HRESULT GetCAProperty(const(wchar)*, int, int, int, CERTTRANSBLOB*);
    HRESULT GetCAPropertyInfo(const(wchar)*, int*, CERTTRANSBLOB*);
    HRESULT Ping2(const(wchar)*);
}
