module windows.win32.storage.imapi;

import windows.win32.guid : GUID;
import windows.win32.foundation : BOOLEAN, BSTR, HRESULT, VARIANT_BOOL;
import windows.win32.system.addressbook : IMessage, LPALLOCATEBUFFER, LPALLOCATEMORE, LPFREEBUFFER, SPropProblemArray, SPropTagArray;
import windows.win32.system.com : IDispatch, IMalloc, IStream, IUnknown, SAFEARRAY;
import windows.win32.system.com.structuredstorage : IPropertyStorage, IStorage;
import windows.win32.system.ole : IEnumVARIANT;

version (Windows):
extern (Windows):

alias DISC_RECORDER_STATE_FLAGS = uint;
enum : uint
{
    RECORDER_BURNING       = 0x00000002,
    RECORDER_DOING_NOTHING = 0x00000000,
    RECORDER_OPENED        = 0x00000001,
}

int OpenIMsgSession(IMalloc, uint, LPMSGSESS*);
void CloseIMsgSession(LPMSGSESS);
int OpenIMsgOnIStg(LPMSGSESS, LPALLOCATEBUFFER, LPALLOCATEMORE, LPFREEBUFFER, IMalloc, void*, IStorage, MSGCALLRELEASE*, uint, uint, IMessage*);
HRESULT GetAttribIMsgOnIStg(void*, SPropTagArray*, SPropAttrArray**);
HRESULT SetAttribIMsgOnIStg(void*, SPropTagArray*, SPropAttrArray*, SPropProblemArray**);
int MapStorageSCode(int);
enum IMAPI_SECTOR_SIZE = 0x00000800;
enum IMAPI2_DEFAULT_COMMAND_TIMEOUT = 0x0000000a;
enum DISPID_DDISCMASTER2EVENTS_DEVICEADDED = 0x00000100;
enum DISPID_DDISCMASTER2EVENTS_DEVICEREMOVED = 0x00000101;
enum DISPID_IDISCRECORDER2_EJECTMEDIA = 0x00000100;
enum DISPID_IDISCRECORDER2_CLOSETRAY = 0x00000101;
enum DISPID_IDISCRECORDER2_ACQUIREEXCLUSIVEACCESS = 0x00000102;
enum DISPID_IDISCRECORDER2_RELEASEEXCLUSIVEACCESS = 0x00000103;
enum DISPID_IDISCRECORDER2_DISABLEMCN = 0x00000104;
enum DISPID_IDISCRECORDER2_ENABLEMCN = 0x00000105;
enum DISPID_IDISCRECORDER2_INITIALIZEDISCRECORDER = 0x00000106;
enum DISPID_IDISCRECORDER2_ACTIVEDISCRECORDER = 0x00000000;
enum DISPID_IDISCRECORDER2_VENDORID = 0x00000201;
enum DISPID_IDISCRECORDER2_PRODUCTID = 0x00000202;
enum DISPID_IDISCRECORDER2_PRODUCTREVISION = 0x00000203;
enum DISPID_IDISCRECORDER2_VOLUMENAME = 0x00000204;
enum DISPID_IDISCRECORDER2_VOLUMEPATHNAMES = 0x00000205;
enum DISPID_IDISCRECORDER2_DEVICECANLOADMEDIA = 0x00000206;
enum DISPID_IDISCRECORDER2_LEGACYDEVICENUMBER = 0x00000207;
enum DISPID_IDISCRECORDER2_SUPPORTEDFEATUREPAGES = 0x00000208;
enum DISPID_IDISCRECORDER2_CURRENTFEATUREPAGES = 0x00000209;
enum DISPID_IDISCRECORDER2_SUPPORTEDPROFILES = 0x0000020a;
enum DISPID_IDISCRECORDER2_CURRENTPROFILES = 0x0000020b;
enum DISPID_IDISCRECORDER2_SUPPORTEDMODEPAGES = 0x0000020c;
enum DISPID_IDISCRECORDER2_EXCLUSIVEACCESSOWNER = 0x0000020d;
enum DISPID_IWRITEENGINE2_WRITESECTION = 0x00000200;
enum DISPID_IWRITEENGINE2_CANCELWRITE = 0x00000201;
enum DISPID_IWRITEENGINE2_DISCRECORDER = 0x00000100;
enum DISPID_IWRITEENGINE2_USESTREAMINGWRITE12 = 0x00000101;
enum DISPID_IWRITEENGINE2_STARTINGSECTORSPERSECOND = 0x00000102;
enum DISPID_IWRITEENGINE2_ENDINGSECTORSPERSECOND = 0x00000103;
enum DISPID_IWRITEENGINE2_BYTESPERSECTOR = 0x00000104;
enum DISPID_IWRITEENGINE2_WRITEINPROGRESS = 0x00000105;
enum DISPID_IWRITEENGINE2EVENTARGS_STARTLBA = 0x00000100;
enum DISPID_IWRITEENGINE2EVENTARGS_SECTORCOUNT = 0x00000101;
enum DISPID_IWRITEENGINE2EVENTARGS_LASTREADLBA = 0x00000102;
enum DISPID_IWRITEENGINE2EVENTARGS_LASTWRITTENLBA = 0x00000103;
enum DISPID_IWRITEENGINE2EVENTARGS_TOTALDEVICEBUFFER = 0x00000104;
enum DISPID_IWRITEENGINE2EVENTARGS_USEDDEVICEBUFFER = 0x00000105;
enum DISPID_IWRITEENGINE2EVENTARGS_TOTALSYSTEMBUFFER = 0x00000106;
enum DISPID_IWRITEENGINE2EVENTARGS_USEDSYSTEMBUFFER = 0x00000107;
enum DISPID_IWRITEENGINE2EVENTARGS_FREESYSTEMBUFFER = 0x00000108;
enum DISPID_DWRITEENGINE2EVENTS_UPDATE = 0x00000100;
enum DISPID_IDISCFORMAT2_RECORDERSUPPORTED = 0x00000800;
enum DISPID_IDISCFORMAT2_MEDIASUPPORTED = 0x00000801;
enum DISPID_IDISCFORMAT2_MEDIAPHYSICALLYBLANK = 0x00000700;
enum DISPID_IDISCFORMAT2_MEDIAHEURISTICALLYBLANK = 0x00000701;
enum DISPID_IDISCFORMAT2_SUPPORTEDMEDIATYPES = 0x00000702;
enum DISPID_IDISCFORMAT2ERASE_RECORDER = 0x00000100;
enum DISPID_IDISCFORMAT2ERASE_FULLERASE = 0x00000101;
enum DISPID_IDISCFORMAT2ERASE_MEDIATYPE = 0x00000102;
enum DISPID_IDISCFORMAT2ERASE_CLIENTNAME = 0x00000103;
enum DISPID_IDISCFORMAT2ERASE_ERASEMEDIA = 0x00000201;
enum DISPID_IDISCFORMAT2ERASEEVENTS_UPDATE = 0x00000200;
enum DISPID_IDISCFORMAT2DATA_RECORDER = 0x00000100;
enum DISPID_IDISCFORMAT2DATA_BUFFERUNDERRUNFREEDISABLED = 0x00000101;
enum DISPID_IDISCFORMAT2DATA_POSTGAPALREADYINIMAGE = 0x00000104;
enum DISPID_IDISCFORMAT2DATA_CURRENTMEDIASTATUS = 0x00000106;
enum DISPID_IDISCFORMAT2DATA_WRITEPROTECTSTATUS = 0x00000107;
enum DISPID_IDISCFORMAT2DATA_TOTALSECTORS = 0x00000108;
enum DISPID_IDISCFORMAT2DATA_FREESECTORS = 0x00000109;
enum DISPID_IDISCFORMAT2DATA_NEXTWRITABLEADDRESS = 0x0000010a;
enum DISPID_IDISCFORMAT2DATA_STARTSECTOROFPREVIOUSSESSION = 0x0000010b;
enum DISPID_IDISCFORMAT2DATA_LASTSECTOROFPREVIOUSSESSION = 0x0000010c;
enum DISPID_IDISCFORMAT2DATA_FORCEMEDIATOBECLOSED = 0x0000010d;
enum DISPID_IDISCFORMAT2DATA_DISABLEDVDCOMPATIBILITYMODE = 0x0000010e;
enum DISPID_IDISCFORMAT2DATA_CURRENTMEDIATYPE = 0x0000010f;
enum DISPID_IDISCFORMAT2DATA_CLIENTNAME = 0x00000110;
enum DISPID_IDISCFORMAT2DATA_REQUESTEDWRITESPEED = 0x00000111;
enum DISPID_IDISCFORMAT2DATA_REQUESTEDROTATIONTYPEISPURECAV = 0x00000112;
enum DISPID_IDISCFORMAT2DATA_CURRENTWRITESPEED = 0x00000113;
enum DISPID_IDISCFORMAT2DATA_CURRENTROTATIONTYPEISPURECAV = 0x00000114;
enum DISPID_IDISCFORMAT2DATA_SUPPORTEDWRITESPEEDS = 0x00000115;
enum DISPID_IDISCFORMAT2DATA_SUPPORTEDWRITESPEEDDESCRIPTORS = 0x00000116;
enum DISPID_IDISCFORMAT2DATA_FORCEOVERWRITE = 0x00000117;
enum DISPID_IDISCFORMAT2DATA_MUTLISESSIONINTERFACES = 0x00000118;
enum DISPID_IDISCFORMAT2DATA_WRITE = 0x00000200;
enum DISPID_IDISCFORMAT2DATA_CANCELWRITE = 0x00000201;
enum DISPID_IDISCFORMAT2DATA_SETWRITESPEED = 0x00000202;
enum DISPID_DDISCFORMAT2DATAEVENTS_UPDATE = 0x00000200;
enum DISPID_IDISCFORMAT2DATAEVENTARGS_ELAPSEDTIME = 0x00000300;
enum DISPID_IDISCFORMAT2DATAEVENTARGS_ESTIMATEDREMAININGTIME = 0x00000301;
enum DISPID_IDISCFORMAT2DATAEVENTARGS_ESTIMATEDTOTALTIME = 0x00000302;
enum DISPID_IDISCFORMAT2DATAEVENTARGS_CURRENTACTION = 0x00000303;
enum DISPID_IDISCFORMAT2TAO_RECORDER = 0x00000100;
enum DISPID_IDISCFORMAT2TAO_BUFFERUNDERRUNFREEDISABLED = 0x00000102;
enum DISPID_IDISCFORMAT2TAO_NUMBEROFEXISTINGTRACKS = 0x00000103;
enum DISPID_IDISCFORMAT2TAO_TOTALSECTORSONMEDIA = 0x00000104;
enum DISPID_IDISCFORMAT2TAO_FREESECTORSONMEDIA = 0x00000105;
enum DISPID_IDISCFORMAT2TAO_USEDSECTORSONMEDIA = 0x00000106;
enum DISPID_IDISCFORMAT2TAO_DONOTFINALIZEMEDIA = 0x00000107;
enum DISPID_IDISCFORMAT2TAO_EXPECTEDTABLEOFCONTENTS = 0x0000010a;
enum DISPID_IDISCFORMAT2TAO_CURRENTMEDIATYPE = 0x0000010b;
enum DISPID_IDISCFORMAT2TAO_CLIENTNAME = 0x0000010e;
enum DISPID_IDISCFORMAT2TAO_REQUESTEDWRITESPEED = 0x0000010f;
enum DISPID_IDISCFORMAT2TAO_REQUESTEDROTATIONTYPEISPURECAV = 0x00000110;
enum DISPID_IDISCFORMAT2TAO_CURRENTWRITESPEED = 0x00000111;
enum DISPID_IDISCFORMAT2TAO_CURRENTROTATIONTYPEISPURECAV = 0x00000112;
enum DISPID_IDISCFORMAT2TAO_SUPPORTEDWRITESPEEDS = 0x00000113;
enum DISPID_IDISCFORMAT2TAO_SUPPORTEDWRITESPEEDDESCRIPTORS = 0x00000114;
enum DISPID_IDISCFORMAT2TAO_PREPAREMEDIA = 0x00000200;
enum DISPID_IDISCFORMAT2TAO_ADDAUDIOTRACK = 0x00000201;
enum DISPID_IDISCFORMAT2TAO_CANCELADDTRACK = 0x00000202;
enum DISPID_IDISCFORMAT2TAO_FINISHMEDIA = 0x00000203;
enum DISPID_IDISCFORMAT2TAO_SETWRITESPEED = 0x00000204;
enum DISPID_DDISCFORMAT2TAOEVENTS_UPDATE = 0x00000200;
enum DISPID_IDISCFORMAT2TAOEVENTARGS_CURRENTTRACKNUMBER = 0x00000300;
enum DISPID_IDISCFORMAT2TAOEVENTARGS_CURRENTACTION = 0x00000301;
enum DISPID_IDISCFORMAT2TAOEVENTARGS_ELAPSEDTIME = 0x00000302;
enum DISPID_IDISCFORMAT2TAOEVENTARGS_ESTIMATEDREMAININGTIME = 0x00000303;
enum DISPID_IDISCFORMAT2TAOEVENTARGS_ESTIMATEDTOTALTIME = 0x00000304;
enum DISPID_IDISCFORMAT2RAWCD_RECORDER = 0x00000100;
enum DISPID_IDISCFORMAT2RAWCD_BUFFERUNDERRUNFREEDISABLED = 0x00000102;
enum DISPID_IDISCFORMAT2RAWCD_STARTOFNEXTSESSION = 0x00000103;
enum DISPID_IDISCFORMAT2RAWCD_LASTPOSSIBLESTARTOFLEADOUT = 0x00000104;
enum DISPID_IDISCFORMAT2RAWCD_CURRENTMEDIATYPE = 0x00000105;
enum DISPID_IDISCFORMAT2RAWCD_SUPPORTEDDATASECTORTYPES = 0x00000108;
enum DISPID_IDISCFORMAT2RAWCD_REQUESTEDDATASECTORTYPE = 0x00000109;
enum DISPID_IDISCFORMAT2RAWCD_CLIENTNAME = 0x0000010a;
enum DISPID_IDISCFORMAT2RAWCD_REQUESTEDWRITESPEED = 0x0000010b;
enum DISPID_IDISCFORMAT2RAWCD_REQUESTEDROTATIONTYPEISPURECAV = 0x0000010c;
enum DISPID_IDISCFORMAT2RAWCD_CURRENTWRITESPEED = 0x0000010d;
enum DISPID_IDISCFORMAT2RAWCD_CURRENTROTATIONTYPEISPURECAV = 0x0000010e;
enum DISPID_IDISCFORMAT2RAWCD_SUPPORTEDWRITESPEEDS = 0x0000010f;
enum DISPID_IDISCFORMAT2RAWCD_SUPPORTEDWRITESPEEDDESCRIPTORS = 0x00000110;
enum DISPID_IDISCFORMAT2RAWCD_PREPAREMEDIA = 0x00000200;
enum DISPID_IDISCFORMAT2RAWCD_WRITEMEDIA = 0x00000201;
enum DISPID_IDISCFORMAT2RAWCD_WRITEMEDIAWITHVALIDATION = 0x00000202;
enum DISPID_IDISCFORMAT2RAWCD_CANCELWRITE = 0x00000203;
enum DISPID_IDISCFORMAT2RAWCD_RELEASEMEDIA = 0x00000204;
enum DISPID_IDISCFORMAT2RAWCD_SETWRITESPEED = 0x00000205;
enum DISPID_DDISCFORMAT2RAWCDEVENTS_UPDATE = 0x00000200;
enum DISPID_IDISCFORMAT2RAWCDEVENTARGS_CURRENTTRACKNUMBER = 0x00000300;
enum DISPID_IDISCFORMAT2RAWCDEVENTARGS_CURRENTACTION = 0x00000301;
enum DISPID_IDISCFORMAT2RAWCDEVENTARGS_ELAPSEDTIME = 0x00000300;
enum DISPID_IDISCFORMAT2RAWCDEVENTARGS_ESTIMATEDREMAININGTIME = 0x00000301;
enum DISPID_IDISCFORMAT2RAWCDEVENTARGS_ESTIMATEDTOTALTIME = 0x00000302;
enum IMAPI_SECTORS_PER_SECOND_AT_1X_CD = 0x0000004b;
enum IMAPI_SECTORS_PER_SECOND_AT_1X_DVD = 0x000002a8;
enum IMAPI_SECTORS_PER_SECOND_AT_1X_BD = 0x00000893;
enum IMAPI_SECTORS_PER_SECOND_AT_1X_HD_DVD = 0x000011d8;
enum DISPID_IMULTISESSION_SUPPORTEDONCURRENTMEDIA = 0x00000100;
enum DISPID_IMULTISESSION_INUSE = 0x00000101;
enum DISPID_IMULTISESSION_IMPORTRECORDER = 0x00000102;
enum DISPID_IMULTISESSION_FIRSTDATASESSION = 0x00000200;
enum DISPID_IMULTISESSION_STARTSECTOROFPREVIOUSSESSION = 0x00000201;
enum DISPID_IMULTISESSION_LASTSECTOROFPREVIOUSSESSION = 0x00000202;
enum DISPID_IMULTISESSION_NEXTWRITABLEADDRESS = 0x00000203;
enum DISPID_IMULTISESSION_FREESECTORS = 0x00000204;
enum DISPID_IMULTISESSION_WRITEUNITSIZE = 0x00000205;
enum DISPID_IMULTISESSION_LASTWRITTENADDRESS = 0x00000206;
enum DISPID_IMULTISESSION_SECTORSONMEDIA = 0x00000207;
enum DISPID_IRAWCDIMAGECREATOR_CREATERESULTIMAGE = 0x00000200;
enum DISPID_IRAWCDIMAGECREATOR_ADDTRACK = 0x00000201;
enum DISPID_IRAWCDIMAGECREATOR_ADDSPECIALPREGAP = 0x00000202;
enum DISPID_IRAWCDIMAGECREATOR_ADDSUBCODERWGENERATOR = 0x00000203;
enum DISPID_IRAWCDIMAGECREATOR_RESULTINGIMAGETYPE = 0x00000100;
enum DISPID_IRAWCDIMAGECREATOR_STARTOFLEADOUT = 0x00000101;
enum DISPID_IRAWCDIMAGECREATOR_STARTOFLEADOUTLIMIT = 0x00000102;
enum DISPID_IRAWCDIMAGECREATOR_DISABLEGAPLESSAUDIO = 0x00000103;
enum DISPID_IRAWCDIMAGECREATOR_MEDIACATALOGNUMBER = 0x00000104;
enum DISPID_IRAWCDIMAGECREATOR_STARTINGTRACKNUMBER = 0x00000105;
enum DISPID_IRAWCDIMAGECREATOR_TRACKINFO = 0x00000106;
enum DISPID_IRAWCDIMAGECREATOR_NUMBEROFEXISTINGTRACKS = 0x00000107;
enum DISPID_IRAWCDIMAGECREATOR_USEDSECTORSONDISC = 0x00000108;
enum DISPID_IRAWCDIMAGECREATOR_EXPECTEDTABLEOFCONTENTS = 0x00000109;
enum DISPID_IRAWCDTRACKINFO_STARTINGLBA = 0x00000100;
enum DISPID_IRAWCDTRACKINFO_SECTORCOUNT = 0x00000101;
enum DISPID_IRAWCDTRACKINFO_TRACKNUMBER = 0x00000102;
enum DISPID_IRAWCDTRACKINFO_SECTORTYPE = 0x00000103;
enum DISPID_IRAWCDTRACKINFO_ISRC = 0x00000104;
enum DISPID_IRAWCDTRACKINFO_DIGITALAUDIOCOPYSETTING = 0x00000105;
enum DISPID_IRAWCDTRACKINFO_AUDIOHASPREEMPHASIS = 0x00000106;
enum DISPID_IBLOCKRANGE_STARTLBA = 0x00000100;
enum DISPID_IBLOCKRANGE_ENDLBA = 0x00000101;
enum DISPID_IBLOCKRANGELIST_BLOCKRANGES = 0x00000100;
enum IMAPILib2_MajorVersion = 0x00000001;
enum IMAPILib2_MinorVersion = 0x00000000;
enum IMAPI2FS_BOOT_ENTRY_COUNT_MAX = 0x00000020;
enum DISPID_DFILESYSTEMIMAGEEVENTS_UPDATE = 0x00000100;
enum DISPID_DFILESYSTEMIMAGEIMPORTEVENTS_UPDATEIMPORT = 0x00000101;
enum IMAPI2FS_MajorVersion = 0x00000001;
enum IMAPI2FS_MinorVersion = 0x00000000;
enum IMAPI2FS_FullVersion_STR = "1.0";
enum IMAPI2FS_FullVersion_WSTR = "1.0";
enum MP_MSGCLASS_SYSTEM = 0x00000001;
enum MP_MSGCLASS_REPLICATION = 0x00000002;
enum MP_MSGCLASS_DELIVERY_REPORT = 0x00000003;
enum MP_MSGCLASS_NONDELIVERY_REPORT = 0x00000004;
enum MP_STATUS_SUCCESS = 0x00000000;
enum MP_STATUS_RETRY = 0x00000001;
enum MP_STATUS_ABORT_DELIVERY = 0x00000002;
enum MP_STATUS_BAD_MAIL = 0x00000003;
enum MP_STATUS_SUBMITTED = 0x00000004;
enum MP_STATUS_CATEGORIZED = 0x00000005;
enum MP_STATUS_ABANDON_DELIVERY = 0x00000006;
enum RP_RECIP_FLAGS_RESERVED = 0x0000000f;
enum RP_DSN_NOTIFY_SUCCESS = 0x01000000;
enum RP_DSN_NOTIFY_FAILURE = 0x02000000;
enum RP_DSN_NOTIFY_DELAY = 0x04000000;
enum RP_DSN_NOTIFY_NEVER = 0x08000000;
enum RP_DSN_NOTIFY_MASK = 0x0f000000;
enum RP_HANDLED = 0x00000010;
enum RP_GENERAL_FAILURE = 0x00000020;
enum RP_DSN_HANDLED = 0x00000040;
enum RP_DELIVERED = 0x00000110;
enum RP_DSN_SENT_NDR = 0x00000450;
enum RP_FAILED = 0x00000830;
enum RP_UNRESOLVED = 0x00001030;
enum RP_ENPANDED = 0x00002010;
enum RP_EXPANDED = 0x00002010;
enum RP_DSN_SENT_DELAYED = 0x00004000;
enum RP_DSN_SENT_EXPANDED = 0x00008040;
enum RP_DSN_SENT_RELAYED = 0x00010040;
enum RP_DSN_SENT_DELIVERED = 0x00020040;
enum RP_REMOTE_MTA_NO_DSN = 0x00080000;
enum RP_ERROR_CONTEXT_STORE = 0x00100000;
enum RP_ERROR_CONTEXT_CAT = 0x00200000;
enum RP_ERROR_CONTEXT_MTA = 0x00400000;
enum RP_VOLATILE_FLAGS_MASK = 0xf0000000;
enum RP_DSN_NOTIFY_INVALID = 0x00000000;
enum MPV_INBOUND_CUTOFF_EXCEEDED = 0x00000001;
enum MPV_WRITE_CONTENT = 0x00000002;
enum NMP_PROCESS_POST = 0x00000001;
enum NMP_PROCESS_CONTROL = 0x00000002;
enum NMP_PROCESS_MODERATOR = 0x00000004;
enum GUID_SMTP_SOURCE_TYPE = GUID(0xfb65c4dc, 0xe468, 0x11d1, [0xaa, 0x67, 0x0, 0xc0, 0x4f, 0xa3, 0x45, 0xf6]);
enum GUID_SMTPSVC_SOURCE = GUID(0x1b3c0666, 0xe470, 0x11d1, [0xaa, 0x67, 0x0, 0xc0, 0x4f, 0xa3, 0x45, 0xf6]);
enum CATID_SMTP_ON_INBOUND_COMMAND = GUID(0xf6628c8d, 0xd5e, 0x11d2, [0xaa, 0x68, 0x0, 0xc0, 0x4f, 0xa3, 0x5b, 0x82]);
enum CATID_SMTP_ON_SERVER_RESPONSE = GUID(0xf6628c8e, 0xd5e, 0x11d2, [0xaa, 0x68, 0x0, 0xc0, 0x4f, 0xa3, 0x5b, 0x82]);
enum CATID_SMTP_ON_SESSION_START = GUID(0xf6628c8f, 0xd5e, 0x11d2, [0xaa, 0x68, 0x0, 0xc0, 0x4f, 0xa3, 0x5b, 0x82]);
enum CATID_SMTP_ON_MESSAGE_START = GUID(0xf6628c90, 0xd5e, 0x11d2, [0xaa, 0x68, 0x0, 0xc0, 0x4f, 0xa3, 0x5b, 0x82]);
enum CATID_SMTP_ON_PER_RECIPIENT = GUID(0xf6628c91, 0xd5e, 0x11d2, [0xaa, 0x68, 0x0, 0xc0, 0x4f, 0xa3, 0x5b, 0x82]);
enum CATID_SMTP_ON_BEFORE_DATA = GUID(0xf6628c92, 0xd5e, 0x11d2, [0xaa, 0x68, 0x0, 0xc0, 0x4f, 0xa3, 0x5b, 0x82]);
enum CATID_SMTP_ON_SESSION_END = GUID(0xf6628c93, 0xd5e, 0x11d2, [0xaa, 0x68, 0x0, 0xc0, 0x4f, 0xa3, 0x5b, 0x82]);
enum CATID_SMTP_STORE_DRIVER = GUID(0x59175850, 0xe533, 0x11d1, [0xaa, 0x67, 0x0, 0xc0, 0x4f, 0xa3, 0x45, 0xf6]);
enum CATID_SMTP_TRANSPORT_SUBMISSION = GUID(0xff3caa23, 0xb9, 0x11d2, [0x9d, 0xfb, 0x0, 0xc0, 0x4f, 0xa3, 0x22, 0xba]);
enum CATID_SMTP_TRANSPORT_PRECATEGORIZE = GUID(0xa3acfb0d, 0x83ff, 0x11d2, [0x9e, 0x14, 0x0, 0xc0, 0x4f, 0xa3, 0x22, 0xba]);
enum CATID_SMTP_TRANSPORT_CATEGORIZE = GUID(0x960252a3, 0xa3a, 0x11d2, [0x9e, 0x0, 0x0, 0xc0, 0x4f, 0xa3, 0x22, 0xba]);
enum CATID_SMTP_TRANSPORT_POSTCATEGORIZE = GUID(0x76719654, 0x5a6, 0x11d2, [0x9d, 0xfd, 0x0, 0xc0, 0x4f, 0xa3, 0x22, 0xba]);
enum CATID_SMTP_TRANSPORT_ROUTER = GUID(0x283430c9, 0x1850, 0x11d2, [0x9e, 0x3, 0x0, 0xc0, 0x4f, 0xa3, 0x22, 0xba]);
enum CATID_SMTP_MSGTRACKLOG = GUID(0xc6df52aa, 0x7db0, 0x11d2, [0x94, 0xf4, 0x0, 0xc0, 0x4f, 0x79, 0xf1, 0xd6]);
enum CATID_SMTP_DNSRESOLVERRECORDSINK = GUID(0xbd0b4366, 0x8e03, 0x11d2, [0x94, 0xf6, 0x0, 0xc0, 0x4f, 0x79, 0xf1, 0xd6]);
enum CATID_SMTP_MAXMSGSIZE = GUID(0xebf159de, 0xa67e, 0x11d2, [0x94, 0xf7, 0x0, 0xc0, 0x4f, 0x79, 0xf1, 0xd6]);
enum CATID_SMTP_LOG = GUID(0x93d0a538, 0x2c1e, 0x4b68, [0xa7, 0xc9, 0xd7, 0x3a, 0x8a, 0xa6, 0xee, 0x97]);
enum CATID_SMTP_GET_AUX_DOMAIN_INFO_FLAGS = GUID(0x84ff368a, 0xfab3, 0x43d7, [0xbc, 0xdf, 0x69, 0x2c, 0x5b, 0x46, 0xe6, 0xb1]);
enum CLSID_SmtpCat = GUID(0xb23c35b7, 0x9219, 0x11d2, [0x9e, 0x17, 0x0, 0xc0, 0x4f, 0xa3, 0x22, 0xba]);
enum CATID_SMTP_DSN = GUID(0x22b55731, 0xf5f8, 0x4d23, [0xbd, 0x8f, 0x87, 0xb5, 0x23, 0x71, 0xa7, 0x3a]);
enum SZ_PROGID_SMTPCAT = "Smtp.Cat";
enum IMAPI_S_PROPERTIESIGNORED = 0x00040200;
enum IMAPI_S_BUFFER_TO_SMALL = 0x00040201;
enum IMAPI_E_NOTOPENED = 0xffffffff8004020b;
enum IMAPI_E_NOTINITIALIZED = 0xffffffff8004020c;
enum IMAPI_E_USERABORT = 0xffffffff8004020d;
enum IMAPI_E_GENERIC = 0xffffffff8004020e;
enum IMAPI_E_MEDIUM_NOTPRESENT = 0xffffffff8004020f;
enum IMAPI_E_MEDIUM_INVALIDTYPE = 0xffffffff80040210;
enum IMAPI_E_DEVICE_NOPROPERTIES = 0xffffffff80040211;
enum IMAPI_E_DEVICE_NOTACCESSIBLE = 0xffffffff80040212;
enum IMAPI_E_DEVICE_NOTPRESENT = 0xffffffff80040213;
enum IMAPI_E_DEVICE_INVALIDTYPE = 0xffffffff80040214;
enum IMAPI_E_INITIALIZE_WRITE = 0xffffffff80040215;
enum IMAPI_E_INITIALIZE_ENDWRITE = 0xffffffff80040216;
enum IMAPI_E_FILESYSTEM = 0xffffffff80040217;
enum IMAPI_E_FILEACCESS = 0xffffffff80040218;
enum IMAPI_E_DISCINFO = 0xffffffff80040219;
enum IMAPI_E_TRACKNOTOPEN = 0xffffffff8004021a;
enum IMAPI_E_TRACKOPEN = 0xffffffff8004021b;
enum IMAPI_E_DISCFULL = 0xffffffff8004021c;
enum IMAPI_E_BADJOLIETNAME = 0xffffffff8004021d;
enum IMAPI_E_INVALIDIMAGE = 0xffffffff8004021e;
enum IMAPI_E_NOACTIVEFORMAT = 0xffffffff8004021f;
enum IMAPI_E_NOACTIVERECORDER = 0xffffffff80040220;
enum IMAPI_E_WRONGFORMAT = 0xffffffff80040221;
enum IMAPI_E_ALREADYOPEN = 0xffffffff80040222;
enum IMAPI_E_WRONGDISC = 0xffffffff80040223;
enum IMAPI_E_FILEEXISTS = 0xffffffff80040224;
enum IMAPI_E_STASHINUSE = 0xffffffff80040225;
enum IMAPI_E_DEVICE_STILL_IN_USE = 0xffffffff80040226;
enum IMAPI_E_LOSS_OF_STREAMING = 0xffffffff80040227;
enum IMAPI_E_COMPRESSEDSTASH = 0xffffffff80040228;
enum IMAPI_E_ENCRYPTEDSTASH = 0xffffffff80040229;
enum IMAPI_E_NOTENOUGHDISKFORSTASH = 0xffffffff8004022a;
enum IMAPI_E_REMOVABLESTASH = 0xffffffff8004022b;
enum IMAPI_E_CANNOT_WRITE_TO_MEDIA = 0xffffffff8004022c;
enum IMAPI_E_TRACK_NOT_BIG_ENOUGH = 0xffffffff8004022d;
enum IMAPI_E_BOOTIMAGE_AND_NONBLANK_DISC = 0xffffffff8004022e;
alias LPMSGSESS = long;
alias IMAPI_MEDIA_PHYSICAL_TYPE = int;
enum : int
{
    IMAPI_MEDIA_TYPE_UNKNOWN             = 0x00000000,
    IMAPI_MEDIA_TYPE_CDROM               = 0x00000001,
    IMAPI_MEDIA_TYPE_CDR                 = 0x00000002,
    IMAPI_MEDIA_TYPE_CDRW                = 0x00000003,
    IMAPI_MEDIA_TYPE_DVDROM              = 0x00000004,
    IMAPI_MEDIA_TYPE_DVDRAM              = 0x00000005,
    IMAPI_MEDIA_TYPE_DVDPLUSR            = 0x00000006,
    IMAPI_MEDIA_TYPE_DVDPLUSRW           = 0x00000007,
    IMAPI_MEDIA_TYPE_DVDPLUSR_DUALLAYER  = 0x00000008,
    IMAPI_MEDIA_TYPE_DVDDASHR            = 0x00000009,
    IMAPI_MEDIA_TYPE_DVDDASHRW           = 0x0000000a,
    IMAPI_MEDIA_TYPE_DVDDASHR_DUALLAYER  = 0x0000000b,
    IMAPI_MEDIA_TYPE_DISK                = 0x0000000c,
    IMAPI_MEDIA_TYPE_DVDPLUSRW_DUALLAYER = 0x0000000d,
    IMAPI_MEDIA_TYPE_HDDVDROM            = 0x0000000e,
    IMAPI_MEDIA_TYPE_HDDVDR              = 0x0000000f,
    IMAPI_MEDIA_TYPE_HDDVDRAM            = 0x00000010,
    IMAPI_MEDIA_TYPE_BDROM               = 0x00000011,
    IMAPI_MEDIA_TYPE_BDR                 = 0x00000012,
    IMAPI_MEDIA_TYPE_BDRE                = 0x00000013,
    IMAPI_MEDIA_TYPE_MAX                 = 0x00000013,
}

alias IMAPI_MEDIA_WRITE_PROTECT_STATE = int;
enum : int
{
    IMAPI_WRITEPROTECTED_UNTIL_POWERDOWN           = 0x00000001,
    IMAPI_WRITEPROTECTED_BY_CARTRIDGE              = 0x00000002,
    IMAPI_WRITEPROTECTED_BY_MEDIA_SPECIFIC_REASON  = 0x00000004,
    IMAPI_WRITEPROTECTED_BY_SOFTWARE_WRITE_PROTECT = 0x00000008,
    IMAPI_WRITEPROTECTED_BY_DISC_CONTROL_BLOCK     = 0x00000010,
    IMAPI_WRITEPROTECTED_READ_ONLY_MEDIA           = 0x00004000,
}

alias IMAPI_READ_TRACK_ADDRESS_TYPE = int;
enum : int
{
    IMAPI_READ_TRACK_ADDRESS_TYPE_LBA     = 0x00000000,
    IMAPI_READ_TRACK_ADDRESS_TYPE_TRACK   = 0x00000001,
    IMAPI_READ_TRACK_ADDRESS_TYPE_SESSION = 0x00000002,
}

alias IMAPI_MODE_PAGE_REQUEST_TYPE = int;
enum : int
{
    IMAPI_MODE_PAGE_REQUEST_TYPE_CURRENT_VALUES    = 0x00000000,
    IMAPI_MODE_PAGE_REQUEST_TYPE_CHANGEABLE_VALUES = 0x00000001,
    IMAPI_MODE_PAGE_REQUEST_TYPE_DEFAULT_VALUES    = 0x00000002,
    IMAPI_MODE_PAGE_REQUEST_TYPE_SAVED_VALUES      = 0x00000003,
}

alias IMAPI_MODE_PAGE_TYPE = int;
enum : int
{
    IMAPI_MODE_PAGE_TYPE_READ_WRITE_ERROR_RECOVERY = 0x00000001,
    IMAPI_MODE_PAGE_TYPE_MRW                       = 0x00000003,
    IMAPI_MODE_PAGE_TYPE_WRITE_PARAMETERS          = 0x00000005,
    IMAPI_MODE_PAGE_TYPE_CACHING                   = 0x00000008,
    IMAPI_MODE_PAGE_TYPE_INFORMATIONAL_EXCEPTIONS  = 0x0000001c,
    IMAPI_MODE_PAGE_TYPE_TIMEOUT_AND_PROTECT       = 0x0000001d,
    IMAPI_MODE_PAGE_TYPE_POWER_CONDITION           = 0x0000001a,
    IMAPI_MODE_PAGE_TYPE_LEGACY_CAPABILITIES       = 0x0000002a,
}

alias IMAPI_FEATURE_PAGE_TYPE = int;
enum : int
{
    IMAPI_FEATURE_PAGE_TYPE_PROFILE_LIST                   = 0x00000000,
    IMAPI_FEATURE_PAGE_TYPE_CORE                           = 0x00000001,
    IMAPI_FEATURE_PAGE_TYPE_MORPHING                       = 0x00000002,
    IMAPI_FEATURE_PAGE_TYPE_REMOVABLE_MEDIUM               = 0x00000003,
    IMAPI_FEATURE_PAGE_TYPE_WRITE_PROTECT                  = 0x00000004,
    IMAPI_FEATURE_PAGE_TYPE_RANDOMLY_READABLE              = 0x00000010,
    IMAPI_FEATURE_PAGE_TYPE_CD_MULTIREAD                   = 0x0000001d,
    IMAPI_FEATURE_PAGE_TYPE_CD_READ                        = 0x0000001e,
    IMAPI_FEATURE_PAGE_TYPE_DVD_READ                       = 0x0000001f,
    IMAPI_FEATURE_PAGE_TYPE_RANDOMLY_WRITABLE              = 0x00000020,
    IMAPI_FEATURE_PAGE_TYPE_INCREMENTAL_STREAMING_WRITABLE = 0x00000021,
    IMAPI_FEATURE_PAGE_TYPE_SECTOR_ERASABLE                = 0x00000022,
    IMAPI_FEATURE_PAGE_TYPE_FORMATTABLE                    = 0x00000023,
    IMAPI_FEATURE_PAGE_TYPE_HARDWARE_DEFECT_MANAGEMENT     = 0x00000024,
    IMAPI_FEATURE_PAGE_TYPE_WRITE_ONCE                     = 0x00000025,
    IMAPI_FEATURE_PAGE_TYPE_RESTRICTED_OVERWRITE           = 0x00000026,
    IMAPI_FEATURE_PAGE_TYPE_CDRW_CAV_WRITE                 = 0x00000027,
    IMAPI_FEATURE_PAGE_TYPE_MRW                            = 0x00000028,
    IMAPI_FEATURE_PAGE_TYPE_ENHANCED_DEFECT_REPORTING      = 0x00000029,
    IMAPI_FEATURE_PAGE_TYPE_DVD_PLUS_RW                    = 0x0000002a,
    IMAPI_FEATURE_PAGE_TYPE_DVD_PLUS_R                     = 0x0000002b,
    IMAPI_FEATURE_PAGE_TYPE_RIGID_RESTRICTED_OVERWRITE     = 0x0000002c,
    IMAPI_FEATURE_PAGE_TYPE_CD_TRACK_AT_ONCE               = 0x0000002d,
    IMAPI_FEATURE_PAGE_TYPE_CD_MASTERING                   = 0x0000002e,
    IMAPI_FEATURE_PAGE_TYPE_DVD_DASH_WRITE                 = 0x0000002f,
    IMAPI_FEATURE_PAGE_TYPE_DOUBLE_DENSITY_CD_READ         = 0x00000030,
    IMAPI_FEATURE_PAGE_TYPE_DOUBLE_DENSITY_CD_R_WRITE      = 0x00000031,
    IMAPI_FEATURE_PAGE_TYPE_DOUBLE_DENSITY_CD_RW_WRITE     = 0x00000032,
    IMAPI_FEATURE_PAGE_TYPE_LAYER_JUMP_RECORDING           = 0x00000033,
    IMAPI_FEATURE_PAGE_TYPE_CD_RW_MEDIA_WRITE_SUPPORT      = 0x00000037,
    IMAPI_FEATURE_PAGE_TYPE_BD_PSEUDO_OVERWRITE            = 0x00000038,
    IMAPI_FEATURE_PAGE_TYPE_DVD_PLUS_R_DUAL_LAYER          = 0x0000003b,
    IMAPI_FEATURE_PAGE_TYPE_BD_READ                        = 0x00000040,
    IMAPI_FEATURE_PAGE_TYPE_BD_WRITE                       = 0x00000041,
    IMAPI_FEATURE_PAGE_TYPE_HD_DVD_READ                    = 0x00000050,
    IMAPI_FEATURE_PAGE_TYPE_HD_DVD_WRITE                   = 0x00000051,
    IMAPI_FEATURE_PAGE_TYPE_POWER_MANAGEMENT               = 0x00000100,
    IMAPI_FEATURE_PAGE_TYPE_SMART                          = 0x00000101,
    IMAPI_FEATURE_PAGE_TYPE_EMBEDDED_CHANGER               = 0x00000102,
    IMAPI_FEATURE_PAGE_TYPE_CD_ANALOG_PLAY                 = 0x00000103,
    IMAPI_FEATURE_PAGE_TYPE_MICROCODE_UPDATE               = 0x00000104,
    IMAPI_FEATURE_PAGE_TYPE_TIMEOUT                        = 0x00000105,
    IMAPI_FEATURE_PAGE_TYPE_DVD_CSS                        = 0x00000106,
    IMAPI_FEATURE_PAGE_TYPE_REAL_TIME_STREAMING            = 0x00000107,
    IMAPI_FEATURE_PAGE_TYPE_LOGICAL_UNIT_SERIAL_NUMBER     = 0x00000108,
    IMAPI_FEATURE_PAGE_TYPE_MEDIA_SERIAL_NUMBER            = 0x00000109,
    IMAPI_FEATURE_PAGE_TYPE_DISC_CONTROL_BLOCKS            = 0x0000010a,
    IMAPI_FEATURE_PAGE_TYPE_DVD_CPRM                       = 0x0000010b,
    IMAPI_FEATURE_PAGE_TYPE_FIRMWARE_INFORMATION           = 0x0000010c,
    IMAPI_FEATURE_PAGE_TYPE_AACS                           = 0x0000010d,
    IMAPI_FEATURE_PAGE_TYPE_VCPS                           = 0x00000110,
}

alias IMAPI_PROFILE_TYPE = int;
enum : int
{
    IMAPI_PROFILE_TYPE_INVALID                    = 0x00000000,
    IMAPI_PROFILE_TYPE_NON_REMOVABLE_DISK         = 0x00000001,
    IMAPI_PROFILE_TYPE_REMOVABLE_DISK             = 0x00000002,
    IMAPI_PROFILE_TYPE_MO_ERASABLE                = 0x00000003,
    IMAPI_PROFILE_TYPE_MO_WRITE_ONCE              = 0x00000004,
    IMAPI_PROFILE_TYPE_AS_MO                      = 0x00000005,
    IMAPI_PROFILE_TYPE_CDROM                      = 0x00000008,
    IMAPI_PROFILE_TYPE_CD_RECORDABLE              = 0x00000009,
    IMAPI_PROFILE_TYPE_CD_REWRITABLE              = 0x0000000a,
    IMAPI_PROFILE_TYPE_DVDROM                     = 0x00000010,
    IMAPI_PROFILE_TYPE_DVD_DASH_RECORDABLE        = 0x00000011,
    IMAPI_PROFILE_TYPE_DVD_RAM                    = 0x00000012,
    IMAPI_PROFILE_TYPE_DVD_DASH_REWRITABLE        = 0x00000013,
    IMAPI_PROFILE_TYPE_DVD_DASH_RW_SEQUENTIAL     = 0x00000014,
    IMAPI_PROFILE_TYPE_DVD_DASH_R_DUAL_SEQUENTIAL = 0x00000015,
    IMAPI_PROFILE_TYPE_DVD_DASH_R_DUAL_LAYER_JUMP = 0x00000016,
    IMAPI_PROFILE_TYPE_DVD_PLUS_RW                = 0x0000001a,
    IMAPI_PROFILE_TYPE_DVD_PLUS_R                 = 0x0000001b,
    IMAPI_PROFILE_TYPE_DDCDROM                    = 0x00000020,
    IMAPI_PROFILE_TYPE_DDCD_RECORDABLE            = 0x00000021,
    IMAPI_PROFILE_TYPE_DDCD_REWRITABLE            = 0x00000022,
    IMAPI_PROFILE_TYPE_DVD_PLUS_RW_DUAL           = 0x0000002a,
    IMAPI_PROFILE_TYPE_DVD_PLUS_R_DUAL            = 0x0000002b,
    IMAPI_PROFILE_TYPE_BD_ROM                     = 0x00000040,
    IMAPI_PROFILE_TYPE_BD_R_SEQUENTIAL            = 0x00000041,
    IMAPI_PROFILE_TYPE_BD_R_RANDOM_RECORDING      = 0x00000042,
    IMAPI_PROFILE_TYPE_BD_REWRITABLE              = 0x00000043,
    IMAPI_PROFILE_TYPE_HD_DVD_ROM                 = 0x00000050,
    IMAPI_PROFILE_TYPE_HD_DVD_RECORDABLE          = 0x00000051,
    IMAPI_PROFILE_TYPE_HD_DVD_RAM                 = 0x00000052,
    IMAPI_PROFILE_TYPE_NON_STANDARD               = 0x0000ffff,
}

alias IMAPI_FORMAT2_DATA_WRITE_ACTION = int;
enum : int
{
    IMAPI_FORMAT2_DATA_WRITE_ACTION_VALIDATING_MEDIA      = 0x00000000,
    IMAPI_FORMAT2_DATA_WRITE_ACTION_FORMATTING_MEDIA      = 0x00000001,
    IMAPI_FORMAT2_DATA_WRITE_ACTION_INITIALIZING_HARDWARE = 0x00000002,
    IMAPI_FORMAT2_DATA_WRITE_ACTION_CALIBRATING_POWER     = 0x00000003,
    IMAPI_FORMAT2_DATA_WRITE_ACTION_WRITING_DATA          = 0x00000004,
    IMAPI_FORMAT2_DATA_WRITE_ACTION_FINALIZATION          = 0x00000005,
    IMAPI_FORMAT2_DATA_WRITE_ACTION_COMPLETED             = 0x00000006,
    IMAPI_FORMAT2_DATA_WRITE_ACTION_VERIFYING             = 0x00000007,
}

alias IMAPI_FORMAT2_DATA_MEDIA_STATE = int;
enum : int
{
    IMAPI_FORMAT2_DATA_MEDIA_STATE_UNKNOWN            = 0x00000000,
    IMAPI_FORMAT2_DATA_MEDIA_STATE_INFORMATIONAL_MASK = 0x0000000f,
    IMAPI_FORMAT2_DATA_MEDIA_STATE_UNSUPPORTED_MASK   = 0x0000fc00,
    IMAPI_FORMAT2_DATA_MEDIA_STATE_OVERWRITE_ONLY     = 0x00000001,
    IMAPI_FORMAT2_DATA_MEDIA_STATE_RANDOMLY_WRITABLE  = 0x00000001,
    IMAPI_FORMAT2_DATA_MEDIA_STATE_BLANK              = 0x00000002,
    IMAPI_FORMAT2_DATA_MEDIA_STATE_APPENDABLE         = 0x00000004,
    IMAPI_FORMAT2_DATA_MEDIA_STATE_FINAL_SESSION      = 0x00000008,
    IMAPI_FORMAT2_DATA_MEDIA_STATE_DAMAGED            = 0x00000400,
    IMAPI_FORMAT2_DATA_MEDIA_STATE_ERASE_REQUIRED     = 0x00000800,
    IMAPI_FORMAT2_DATA_MEDIA_STATE_NON_EMPTY_SESSION  = 0x00001000,
    IMAPI_FORMAT2_DATA_MEDIA_STATE_WRITE_PROTECTED    = 0x00002000,
    IMAPI_FORMAT2_DATA_MEDIA_STATE_FINALIZED          = 0x00004000,
    IMAPI_FORMAT2_DATA_MEDIA_STATE_UNSUPPORTED_MEDIA  = 0x00008000,
}

alias IMAPI_FORMAT2_TAO_WRITE_ACTION = int;
enum : int
{
    IMAPI_FORMAT2_TAO_WRITE_ACTION_UNKNOWN   = 0x00000000,
    IMAPI_FORMAT2_TAO_WRITE_ACTION_PREPARING = 0x00000001,
    IMAPI_FORMAT2_TAO_WRITE_ACTION_WRITING   = 0x00000002,
    IMAPI_FORMAT2_TAO_WRITE_ACTION_FINISHING = 0x00000003,
    IMAPI_FORMAT2_TAO_WRITE_ACTION_VERIFYING = 0x00000004,
}

alias IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE = int;
enum : int
{
    IMAPI_FORMAT2_RAW_CD_SUBCODE_PQ_ONLY   = 0x00000001,
    IMAPI_FORMAT2_RAW_CD_SUBCODE_IS_COOKED = 0x00000002,
    IMAPI_FORMAT2_RAW_CD_SUBCODE_IS_RAW    = 0x00000003,
}

alias IMAPI_FORMAT2_RAW_CD_WRITE_ACTION = int;
enum : int
{
    IMAPI_FORMAT2_RAW_CD_WRITE_ACTION_UNKNOWN   = 0x00000000,
    IMAPI_FORMAT2_RAW_CD_WRITE_ACTION_PREPARING = 0x00000001,
    IMAPI_FORMAT2_RAW_CD_WRITE_ACTION_WRITING   = 0x00000002,
    IMAPI_FORMAT2_RAW_CD_WRITE_ACTION_FINISHING = 0x00000003,
}

alias IMAPI_CD_SECTOR_TYPE = int;
enum : int
{
    IMAPI_CD_SECTOR_AUDIO         = 0x00000000,
    IMAPI_CD_SECTOR_MODE_ZERO     = 0x00000001,
    IMAPI_CD_SECTOR_MODE1         = 0x00000002,
    IMAPI_CD_SECTOR_MODE2FORM0    = 0x00000003,
    IMAPI_CD_SECTOR_MODE2FORM1    = 0x00000004,
    IMAPI_CD_SECTOR_MODE2FORM2    = 0x00000005,
    IMAPI_CD_SECTOR_MODE1RAW      = 0x00000006,
    IMAPI_CD_SECTOR_MODE2FORM0RAW = 0x00000007,
    IMAPI_CD_SECTOR_MODE2FORM1RAW = 0x00000008,
    IMAPI_CD_SECTOR_MODE2FORM2RAW = 0x00000009,
}

alias IMAPI_CD_TRACK_DIGITAL_COPY_SETTING = int;
enum : int
{
    IMAPI_CD_TRACK_DIGITAL_COPY_PERMITTED  = 0x00000000,
    IMAPI_CD_TRACK_DIGITAL_COPY_PROHIBITED = 0x00000001,
    IMAPI_CD_TRACK_DIGITAL_COPY_SCMS       = 0x00000002,
}

alias IMAPI_BURN_VERIFICATION_LEVEL = int;
enum : int
{
    IMAPI_BURN_VERIFICATION_NONE  = 0x00000000,
    IMAPI_BURN_VERIFICATION_QUICK = 0x00000001,
    IMAPI_BURN_VERIFICATION_FULL  = 0x00000002,
}

enum IID_IDiscMaster2 = GUID(0x27354130, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IDiscMaster2 : IDispatch
{
    HRESULT get__NewEnum(IEnumVARIANT*);
    HRESULT get_Item(int, BSTR*);
    HRESULT get_Count(int*);
    HRESULT get_IsSupportedEnvironment(VARIANT_BOOL*);
}
enum IID_DDiscMaster2Events = GUID(0x27354131, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface DDiscMaster2Events : IDispatch
{
    HRESULT NotifyDeviceAdded(IDispatch, BSTR);
    HRESULT NotifyDeviceRemoved(IDispatch, BSTR);
}
enum IID_IDiscRecorder2Ex = GUID(0x27354132, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IDiscRecorder2Ex : IUnknown
{
    HRESULT SendCommandNoData(ubyte*, uint, ubyte*, uint);
    HRESULT SendCommandSendDataToDevice(ubyte*, uint, ubyte*, uint, ubyte*, uint);
    HRESULT SendCommandGetDataFromDevice(ubyte*, uint, ubyte*, uint, ubyte*, uint, uint*);
    HRESULT ReadDvdStructure(uint, uint, uint, uint, ubyte**, uint*);
    HRESULT SendDvdStructure(uint, ubyte*, uint);
    HRESULT GetAdapterDescriptor(ubyte**, uint*);
    HRESULT GetDeviceDescriptor(ubyte**, uint*);
    HRESULT GetDiscInformation(ubyte**, uint*);
    HRESULT GetTrackInformation(uint, IMAPI_READ_TRACK_ADDRESS_TYPE, ubyte**, uint*);
    HRESULT GetFeaturePage(IMAPI_FEATURE_PAGE_TYPE, BOOLEAN, ubyte**, uint*);
    HRESULT GetModePage(IMAPI_MODE_PAGE_TYPE, IMAPI_MODE_PAGE_REQUEST_TYPE, ubyte**, uint*);
    HRESULT SetModePage(IMAPI_MODE_PAGE_REQUEST_TYPE, ubyte*, uint);
    HRESULT GetSupportedFeaturePages(BOOLEAN, IMAPI_FEATURE_PAGE_TYPE**, uint*);
    HRESULT GetSupportedProfiles(BOOLEAN, IMAPI_PROFILE_TYPE**, uint*);
    HRESULT GetSupportedModePages(IMAPI_MODE_PAGE_REQUEST_TYPE, IMAPI_MODE_PAGE_TYPE**, uint*);
    HRESULT GetByteAlignmentMask(uint*);
    HRESULT GetMaximumNonPageAlignedTransferSize(uint*);
    HRESULT GetMaximumPageAlignedTransferSize(uint*);
}
enum IID_IDiscRecorder2 = GUID(0x27354133, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IDiscRecorder2 : IDispatch
{
    HRESULT EjectMedia();
    HRESULT CloseTray();
    HRESULT AcquireExclusiveAccess(VARIANT_BOOL, BSTR);
    HRESULT ReleaseExclusiveAccess();
    HRESULT DisableMcn();
    HRESULT EnableMcn();
    HRESULT InitializeDiscRecorder(BSTR);
    HRESULT get_ActiveDiscRecorder(BSTR*);
    HRESULT get_VendorId(BSTR*);
    HRESULT get_ProductId(BSTR*);
    HRESULT get_ProductRevision(BSTR*);
    HRESULT get_VolumeName(BSTR*);
    HRESULT get_VolumePathNames(SAFEARRAY**);
    HRESULT get_DeviceCanLoadMedia(VARIANT_BOOL*);
    HRESULT get_LegacyDeviceNumber(int*);
    HRESULT get_SupportedFeaturePages(SAFEARRAY**);
    HRESULT get_CurrentFeaturePages(SAFEARRAY**);
    HRESULT get_SupportedProfiles(SAFEARRAY**);
    HRESULT get_CurrentProfiles(SAFEARRAY**);
    HRESULT get_SupportedModePages(SAFEARRAY**);
    HRESULT get_ExclusiveAccessOwner(BSTR*);
}
enum IID_IWriteEngine2 = GUID(0x27354135, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IWriteEngine2 : IDispatch
{
    HRESULT WriteSection(IStream, int, int);
    HRESULT CancelWrite();
    HRESULT put_Recorder(IDiscRecorder2Ex);
    HRESULT get_Recorder(IDiscRecorder2Ex*);
    HRESULT put_UseStreamingWrite12(VARIANT_BOOL);
    HRESULT get_UseStreamingWrite12(VARIANT_BOOL*);
    HRESULT put_StartingSectorsPerSecond(int);
    HRESULT get_StartingSectorsPerSecond(int*);
    HRESULT put_EndingSectorsPerSecond(int);
    HRESULT get_EndingSectorsPerSecond(int*);
    HRESULT put_BytesPerSector(int);
    HRESULT get_BytesPerSector(int*);
    HRESULT get_WriteInProgress(VARIANT_BOOL*);
}
enum IID_IWriteEngine2EventArgs = GUID(0x27354136, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IWriteEngine2EventArgs : IDispatch
{
    HRESULT get_StartLba(int*);
    HRESULT get_SectorCount(int*);
    HRESULT get_LastReadLba(int*);
    HRESULT get_LastWrittenLba(int*);
    HRESULT get_TotalSystemBuffer(int*);
    HRESULT get_UsedSystemBuffer(int*);
    HRESULT get_FreeSystemBuffer(int*);
}
enum IID_DWriteEngine2Events = GUID(0x27354137, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface DWriteEngine2Events : IDispatch
{
    HRESULT Update(IDispatch, IDispatch);
}
enum IID_IDiscFormat2 = GUID(0x27354152, 0x8f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IDiscFormat2 : IDispatch
{
    HRESULT IsRecorderSupported(IDiscRecorder2, VARIANT_BOOL*);
    HRESULT IsCurrentMediaSupported(IDiscRecorder2, VARIANT_BOOL*);
    HRESULT get_MediaPhysicallyBlank(VARIANT_BOOL*);
    HRESULT get_MediaHeuristicallyBlank(VARIANT_BOOL*);
    HRESULT get_SupportedMediaTypes(SAFEARRAY**);
}
enum IID_IDiscFormat2Erase = GUID(0x27354156, 0x8f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IDiscFormat2Erase : IDiscFormat2
{
    HRESULT put_Recorder(IDiscRecorder2);
    HRESULT get_Recorder(IDiscRecorder2*);
    HRESULT put_FullErase(VARIANT_BOOL);
    HRESULT get_FullErase(VARIANT_BOOL*);
    HRESULT get_CurrentPhysicalMediaType(IMAPI_MEDIA_PHYSICAL_TYPE*);
    HRESULT put_ClientName(BSTR);
    HRESULT get_ClientName(BSTR*);
    HRESULT EraseMedia();
}
enum IID_DDiscFormat2EraseEvents = GUID(0x2735413a, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface DDiscFormat2EraseEvents : IDispatch
{
    HRESULT Update(IDispatch, int, int);
}
enum IID_IDiscFormat2Data = GUID(0x27354153, 0x9f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IDiscFormat2Data : IDiscFormat2
{
    HRESULT put_Recorder(IDiscRecorder2);
    HRESULT get_Recorder(IDiscRecorder2*);
    HRESULT put_BufferUnderrunFreeDisabled(VARIANT_BOOL);
    HRESULT get_BufferUnderrunFreeDisabled(VARIANT_BOOL*);
    HRESULT put_PostgapAlreadyInImage(VARIANT_BOOL);
    HRESULT get_PostgapAlreadyInImage(VARIANT_BOOL*);
    HRESULT get_CurrentMediaStatus(IMAPI_FORMAT2_DATA_MEDIA_STATE*);
    HRESULT get_WriteProtectStatus(IMAPI_MEDIA_WRITE_PROTECT_STATE*);
    HRESULT get_TotalSectorsOnMedia(int*);
    HRESULT get_FreeSectorsOnMedia(int*);
    HRESULT get_NextWritableAddress(int*);
    HRESULT get_StartAddressOfPreviousSession(int*);
    HRESULT get_LastWrittenAddressOfPreviousSession(int*);
    HRESULT put_ForceMediaToBeClosed(VARIANT_BOOL);
    HRESULT get_ForceMediaToBeClosed(VARIANT_BOOL*);
    HRESULT put_DisableConsumerDvdCompatibilityMode(VARIANT_BOOL);
    HRESULT get_DisableConsumerDvdCompatibilityMode(VARIANT_BOOL*);
    HRESULT get_CurrentPhysicalMediaType(IMAPI_MEDIA_PHYSICAL_TYPE*);
    HRESULT put_ClientName(BSTR);
    HRESULT get_ClientName(BSTR*);
    HRESULT get_RequestedWriteSpeed(int*);
    HRESULT get_RequestedRotationTypeIsPureCAV(VARIANT_BOOL*);
    HRESULT get_CurrentWriteSpeed(int*);
    HRESULT get_CurrentRotationTypeIsPureCAV(VARIANT_BOOL*);
    HRESULT get_SupportedWriteSpeeds(SAFEARRAY**);
    HRESULT get_SupportedWriteSpeedDescriptors(SAFEARRAY**);
    HRESULT put_ForceOverwrite(VARIANT_BOOL);
    HRESULT get_ForceOverwrite(VARIANT_BOOL*);
    HRESULT get_MultisessionInterfaces(SAFEARRAY**);
    HRESULT Write(IStream);
    HRESULT CancelWrite();
    HRESULT SetWriteSpeed(int, VARIANT_BOOL);
}
enum IID_DDiscFormat2DataEvents = GUID(0x2735413c, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface DDiscFormat2DataEvents : IDispatch
{
    HRESULT Update(IDispatch, IDispatch);
}
enum IID_IDiscFormat2DataEventArgs = GUID(0x2735413d, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IDiscFormat2DataEventArgs : IWriteEngine2EventArgs
{
    HRESULT get_ElapsedTime(int*);
    HRESULT get_RemainingTime(int*);
    HRESULT get_TotalTime(int*);
    HRESULT get_CurrentAction(IMAPI_FORMAT2_DATA_WRITE_ACTION*);
}
enum IID_IDiscFormat2TrackAtOnce = GUID(0x27354154, 0x8f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IDiscFormat2TrackAtOnce : IDiscFormat2
{
    HRESULT PrepareMedia();
    HRESULT AddAudioTrack(IStream);
    HRESULT CancelAddTrack();
    HRESULT ReleaseMedia();
    HRESULT SetWriteSpeed(int, VARIANT_BOOL);
    HRESULT put_Recorder(IDiscRecorder2);
    HRESULT get_Recorder(IDiscRecorder2*);
    HRESULT put_BufferUnderrunFreeDisabled(VARIANT_BOOL);
    HRESULT get_BufferUnderrunFreeDisabled(VARIANT_BOOL*);
    HRESULT get_NumberOfExistingTracks(int*);
    HRESULT get_TotalSectorsOnMedia(int*);
    HRESULT get_FreeSectorsOnMedia(int*);
    HRESULT get_UsedSectorsOnMedia(int*);
    HRESULT put_DoNotFinalizeMedia(VARIANT_BOOL);
    HRESULT get_DoNotFinalizeMedia(VARIANT_BOOL*);
    HRESULT get_ExpectedTableOfContents(SAFEARRAY**);
    HRESULT get_CurrentPhysicalMediaType(IMAPI_MEDIA_PHYSICAL_TYPE*);
    HRESULT put_ClientName(BSTR);
    HRESULT get_ClientName(BSTR*);
    HRESULT get_RequestedWriteSpeed(int*);
    HRESULT get_RequestedRotationTypeIsPureCAV(VARIANT_BOOL*);
    HRESULT get_CurrentWriteSpeed(int*);
    HRESULT get_CurrentRotationTypeIsPureCAV(VARIANT_BOOL*);
    HRESULT get_SupportedWriteSpeeds(SAFEARRAY**);
    HRESULT get_SupportedWriteSpeedDescriptors(SAFEARRAY**);
}
enum IID_DDiscFormat2TrackAtOnceEvents = GUID(0x2735413f, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface DDiscFormat2TrackAtOnceEvents : IDispatch
{
    HRESULT Update(IDispatch, IDispatch);
}
enum IID_IDiscFormat2TrackAtOnceEventArgs = GUID(0x27354140, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IDiscFormat2TrackAtOnceEventArgs : IWriteEngine2EventArgs
{
    HRESULT get_CurrentTrackNumber(int*);
    HRESULT get_CurrentAction(IMAPI_FORMAT2_TAO_WRITE_ACTION*);
    HRESULT get_ElapsedTime(int*);
    HRESULT get_RemainingTime(int*);
}
enum IID_IDiscFormat2RawCD = GUID(0x27354155, 0x8f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IDiscFormat2RawCD : IDiscFormat2
{
    HRESULT PrepareMedia();
    HRESULT WriteMedia(IStream);
    HRESULT WriteMedia2(IStream, int);
    HRESULT CancelWrite();
    HRESULT ReleaseMedia();
    HRESULT SetWriteSpeed(int, VARIANT_BOOL);
    HRESULT put_Recorder(IDiscRecorder2);
    HRESULT get_Recorder(IDiscRecorder2*);
    HRESULT put_BufferUnderrunFreeDisabled(VARIANT_BOOL);
    HRESULT get_BufferUnderrunFreeDisabled(VARIANT_BOOL*);
    HRESULT get_StartOfNextSession(int*);
    HRESULT get_LastPossibleStartOfLeadout(int*);
    HRESULT get_CurrentPhysicalMediaType(IMAPI_MEDIA_PHYSICAL_TYPE*);
    HRESULT get_SupportedSectorTypes(SAFEARRAY**);
    HRESULT put_RequestedSectorType(IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE);
    HRESULT get_RequestedSectorType(IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE*);
    HRESULT put_ClientName(BSTR);
    HRESULT get_ClientName(BSTR*);
    HRESULT get_RequestedWriteSpeed(int*);
    HRESULT get_RequestedRotationTypeIsPureCAV(VARIANT_BOOL*);
    HRESULT get_CurrentWriteSpeed(int*);
    HRESULT get_CurrentRotationTypeIsPureCAV(VARIANT_BOOL*);
    HRESULT get_SupportedWriteSpeeds(SAFEARRAY**);
    HRESULT get_SupportedWriteSpeedDescriptors(SAFEARRAY**);
}
enum IID_DDiscFormat2RawCDEvents = GUID(0x27354142, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface DDiscFormat2RawCDEvents : IDispatch
{
    HRESULT Update(IDispatch, IDispatch);
}
enum IID_IDiscFormat2RawCDEventArgs = GUID(0x27354143, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IDiscFormat2RawCDEventArgs : IWriteEngine2EventArgs
{
    HRESULT get_CurrentAction(IMAPI_FORMAT2_RAW_CD_WRITE_ACTION*);
    HRESULT get_ElapsedTime(int*);
    HRESULT get_RemainingTime(int*);
}
enum IID_IBurnVerification = GUID(0xd2ffd834, 0x958b, 0x426d, [0x84, 0x70, 0x2a, 0x13, 0x87, 0x9c, 0x6a, 0x91]);
interface IBurnVerification : IUnknown
{
    HRESULT put_BurnVerificationLevel(IMAPI_BURN_VERIFICATION_LEVEL);
    HRESULT get_BurnVerificationLevel(IMAPI_BURN_VERIFICATION_LEVEL*);
}
enum IID_IWriteSpeedDescriptor = GUID(0x27354144, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IWriteSpeedDescriptor : IDispatch
{
    HRESULT get_MediaType(IMAPI_MEDIA_PHYSICAL_TYPE*);
    HRESULT get_RotationTypeIsPureCAV(VARIANT_BOOL*);
    HRESULT get_WriteSpeed(int*);
}
enum IID_IMultisession = GUID(0x27354150, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IMultisession : IDispatch
{
    HRESULT get_IsSupportedOnCurrentMediaState(VARIANT_BOOL*);
    HRESULT put_InUse(VARIANT_BOOL);
    HRESULT get_InUse(VARIANT_BOOL*);
    HRESULT get_ImportRecorder(IDiscRecorder2*);
}
enum IID_IMultisessionSequential = GUID(0x27354151, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IMultisessionSequential : IMultisession
{
    HRESULT get_IsFirstDataSession(VARIANT_BOOL*);
    HRESULT get_StartAddressOfPreviousSession(int*);
    HRESULT get_LastWrittenAddressOfPreviousSession(int*);
    HRESULT get_NextWritableAddress(int*);
    HRESULT get_FreeSectorsOnMedia(int*);
}
enum IID_IMultisessionSequential2 = GUID(0xb507ca22, 0x2204, 0x11dd, [0x96, 0x6a, 0x0, 0x1a, 0xa0, 0x1b, 0xbc, 0x58]);
interface IMultisessionSequential2 : IMultisessionSequential
{
    HRESULT get_WriteUnitSize(int*);
}
enum IID_IMultisessionRandomWrite = GUID(0xb507ca23, 0x2204, 0x11dd, [0x96, 0x6a, 0x0, 0x1a, 0xa0, 0x1b, 0xbc, 0x58]);
interface IMultisessionRandomWrite : IMultisession
{
    HRESULT get_WriteUnitSize(int*);
    HRESULT get_LastWrittenAddress(int*);
    HRESULT get_TotalSectorsOnMedia(int*);
}
enum IID_IStreamPseudoRandomBased = GUID(0x27354145, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IStreamPseudoRandomBased : IStream
{
    HRESULT put_Seed(uint);
    HRESULT get_Seed(uint*);
    HRESULT put_ExtendedSeed(uint*, uint);
    HRESULT get_ExtendedSeed(uint**, uint*);
}
enum IID_IStreamConcatenate = GUID(0x27354146, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IStreamConcatenate : IStream
{
    HRESULT Initialize(IStream, IStream);
    HRESULT Initialize2(IStream*, uint);
    HRESULT Append(IStream);
    HRESULT Append2(IStream*, uint);
}
enum IID_IStreamInterleave = GUID(0x27354147, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
interface IStreamInterleave : IStream
{
    HRESULT Initialize(IStream*, uint*, uint);
}
enum IID_IRawCDImageCreator = GUID(0x25983550, 0x9d65, 0x49ce, [0xb3, 0x35, 0x40, 0x63, 0xd, 0x90, 0x12, 0x27]);
interface IRawCDImageCreator : IDispatch
{
    HRESULT CreateResultImage(IStream*);
    HRESULT AddTrack(IMAPI_CD_SECTOR_TYPE, IStream, int*);
    HRESULT AddSpecialPregap(IStream);
    HRESULT AddSubcodeRWGenerator(IStream);
    HRESULT put_ResultingImageType(IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE);
    HRESULT get_ResultingImageType(IMAPI_FORMAT2_RAW_CD_DATA_SECTOR_TYPE*);
    HRESULT get_StartOfLeadout(int*);
    HRESULT put_StartOfLeadoutLimit(int);
    HRESULT get_StartOfLeadoutLimit(int*);
    HRESULT put_DisableGaplessAudio(VARIANT_BOOL);
    HRESULT get_DisableGaplessAudio(VARIANT_BOOL*);
    HRESULT put_MediaCatalogNumber(BSTR);
    HRESULT get_MediaCatalogNumber(BSTR*);
    HRESULT put_StartingTrackNumber(int);
    HRESULT get_StartingTrackNumber(int*);
    HRESULT get_TrackInfo(int, IRawCDImageTrackInfo*);
    HRESULT get_NumberOfExistingTracks(int*);
    HRESULT get_LastUsedUserSectorInImage(int*);
    HRESULT get_ExpectedTableOfContents(SAFEARRAY**);
}
enum IID_IRawCDImageTrackInfo = GUID(0x25983551, 0x9d65, 0x49ce, [0xb3, 0x35, 0x40, 0x63, 0xd, 0x90, 0x12, 0x27]);
interface IRawCDImageTrackInfo : IDispatch
{
    HRESULT get_StartingLba(int*);
    HRESULT get_SectorCount(int*);
    HRESULT get_TrackNumber(int*);
    HRESULT get_SectorType(IMAPI_CD_SECTOR_TYPE*);
    HRESULT get_ISRC(BSTR*);
    HRESULT put_ISRC(BSTR);
    HRESULT get_DigitalAudioCopySetting(IMAPI_CD_TRACK_DIGITAL_COPY_SETTING*);
    HRESULT put_DigitalAudioCopySetting(IMAPI_CD_TRACK_DIGITAL_COPY_SETTING);
    HRESULT get_AudioHasPreemphasis(VARIANT_BOOL*);
    HRESULT put_AudioHasPreemphasis(VARIANT_BOOL);
    HRESULT get_TrackIndexes(SAFEARRAY**);
    HRESULT AddTrackIndex(int);
    HRESULT ClearTrackIndex(int);
}
enum IID_IBlockRange = GUID(0xb507ca25, 0x2204, 0x11dd, [0x96, 0x6a, 0x0, 0x1a, 0xa0, 0x1b, 0xbc, 0x58]);
interface IBlockRange : IDispatch
{
    HRESULT get_StartLba(int*);
    HRESULT get_EndLba(int*);
}
enum IID_IBlockRangeList = GUID(0xb507ca26, 0x2204, 0x11dd, [0x96, 0x6a, 0x0, 0x1a, 0xa0, 0x1b, 0xbc, 0x58]);
interface IBlockRangeList : IDispatch
{
    HRESULT get_BlockRanges(SAFEARRAY**);
}
enum CLSID_MsftDiscMaster2 = GUID(0x2735412e, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
struct MsftDiscMaster2
{
}
enum CLSID_MsftDiscRecorder2 = GUID(0x2735412d, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
struct MsftDiscRecorder2
{
}
enum CLSID_MsftWriteEngine2 = GUID(0x2735412c, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
struct MsftWriteEngine2
{
}
enum CLSID_MsftDiscFormat2Erase = GUID(0x2735412b, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
struct MsftDiscFormat2Erase
{
}
enum CLSID_MsftDiscFormat2Data = GUID(0x2735412a, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
struct MsftDiscFormat2Data
{
}
enum CLSID_MsftDiscFormat2TrackAtOnce = GUID(0x27354129, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
struct MsftDiscFormat2TrackAtOnce
{
}
enum CLSID_MsftDiscFormat2RawCD = GUID(0x27354128, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
struct MsftDiscFormat2RawCD
{
}
enum CLSID_MsftStreamZero = GUID(0x27354127, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
struct MsftStreamZero
{
}
enum CLSID_MsftStreamPrng001 = GUID(0x27354126, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
struct MsftStreamPrng001
{
}
enum CLSID_MsftStreamConcatenate = GUID(0x27354125, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
struct MsftStreamConcatenate
{
}
enum CLSID_MsftStreamInterleave = GUID(0x27354124, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
struct MsftStreamInterleave
{
}
enum CLSID_MsftWriteSpeedDescriptor = GUID(0x27354123, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
struct MsftWriteSpeedDescriptor
{
}
enum CLSID_MsftMultisessionSequential = GUID(0x27354122, 0x7f64, 0x5b0f, [0x8f, 0x0, 0x5d, 0x77, 0xaf, 0xbe, 0x26, 0x1e]);
struct MsftMultisessionSequential
{
}
enum CLSID_MsftMultisessionRandomWrite = GUID(0xb507ca24, 0x2204, 0x11dd, [0x96, 0x6a, 0x0, 0x1a, 0xa0, 0x1b, 0xbc, 0x58]);
struct MsftMultisessionRandomWrite
{
}
enum CLSID_MsftRawCDImageCreator = GUID(0x25983561, 0x9d65, 0x49ce, [0xb3, 0x35, 0x40, 0x63, 0xd, 0x90, 0x12, 0x27]);
struct MsftRawCDImageCreator
{
}
alias FsiItemType = int;
enum : int
{
    FsiItemNotFound  = 0x00000000,
    FsiItemDirectory = 0x00000001,
    FsiItemFile      = 0x00000002,
}

alias FsiFileSystems = int;
enum : int
{
    FsiFileSystemNone    = 0x00000000,
    FsiFileSystemISO9660 = 0x00000001,
    FsiFileSystemJoliet  = 0x00000002,
    FsiFileSystemUDF     = 0x00000004,
    FsiFileSystemUnknown = 0x40000000,
}

alias EmulationType = int;
enum : int
{
    EmulationNone       = 0x00000000,
    Emulation12MFloppy  = 0x00000001,
    Emulation144MFloppy = 0x00000002,
    Emulation288MFloppy = 0x00000003,
    EmulationHardDisk   = 0x00000004,
}

alias PlatformId = int;
enum : int
{
    PlatformX86     = 0x00000000,
    PlatformPowerPC = 0x00000001,
    PlatformMac     = 0x00000002,
    PlatformEFI     = 0x000000ef,
}

enum IID_IBootOptions = GUID(0x2c941fd4, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
interface IBootOptions : IDispatch
{
    HRESULT get_BootImage(IStream*);
    HRESULT get_Manufacturer(BSTR*);
    HRESULT put_Manufacturer(BSTR);
    HRESULT get_PlatformId(PlatformId*);
    HRESULT put_PlatformId(PlatformId);
    HRESULT get_Emulation(EmulationType*);
    HRESULT put_Emulation(EmulationType);
    HRESULT get_ImageSize(uint*);
    HRESULT AssignBootImage(IStream);
}
enum IID_IProgressItem = GUID(0x2c941fd5, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
interface IProgressItem : IDispatch
{
    HRESULT get_Description(BSTR*);
    HRESULT get_FirstBlock(uint*);
    HRESULT get_LastBlock(uint*);
    HRESULT get_BlockCount(uint*);
}
enum IID_IEnumProgressItems = GUID(0x2c941fd6, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
interface IEnumProgressItems : IUnknown
{
    HRESULT Next(uint, IProgressItem*, uint*);
    HRESULT Skip(uint);
    HRESULT Reset();
    HRESULT Clone(IEnumProgressItems*);
}
enum IID_IProgressItems = GUID(0x2c941fd7, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
interface IProgressItems : IDispatch
{
    HRESULT get__NewEnum(IEnumVARIANT*);
    HRESULT get_Item(int, IProgressItem*);
    HRESULT get_Count(int*);
    HRESULT ProgressItemFromBlock(uint, IProgressItem*);
    HRESULT ProgressItemFromDescription(BSTR, IProgressItem*);
    HRESULT get_EnumProgressItems(IEnumProgressItems*);
}
enum IID_IFileSystemImageResult = GUID(0x2c941fd8, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
interface IFileSystemImageResult : IDispatch
{
    HRESULT get_ImageStream(IStream*);
    HRESULT get_ProgressItems(IProgressItems*);
    HRESULT get_TotalBlocks(int*);
    HRESULT get_BlockSize(int*);
    HRESULT get_DiscId(BSTR*);
}
enum IID_IFileSystemImageResult2 = GUID(0xb507ca29, 0x2204, 0x11dd, [0x96, 0x6a, 0x0, 0x1a, 0xa0, 0x1b, 0xbc, 0x58]);
interface IFileSystemImageResult2 : IFileSystemImageResult
{
    HRESULT get_ModifiedBlocks(IBlockRangeList*);
}
enum IID_IFsiItem = GUID(0x2c941fd9, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
interface IFsiItem : IDispatch
{
    HRESULT get_Name(BSTR*);
    HRESULT get_FullPath(BSTR*);
    HRESULT get_CreationTime(double*);
    HRESULT put_CreationTime(double);
    HRESULT get_LastAccessedTime(double*);
    HRESULT put_LastAccessedTime(double);
    HRESULT get_LastModifiedTime(double*);
    HRESULT put_LastModifiedTime(double);
    HRESULT get_IsHidden(VARIANT_BOOL*);
    HRESULT put_IsHidden(VARIANT_BOOL);
    HRESULT FileSystemName(FsiFileSystems, BSTR*);
    HRESULT FileSystemPath(FsiFileSystems, BSTR*);
}
enum IID_IEnumFsiItems = GUID(0x2c941fda, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
interface IEnumFsiItems : IUnknown
{
    HRESULT Next(uint, IFsiItem*, uint*);
    HRESULT Skip(uint);
    HRESULT Reset();
    HRESULT Clone(IEnumFsiItems*);
}
enum IID_IFsiFileItem = GUID(0x2c941fdb, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
interface IFsiFileItem : IFsiItem
{
    HRESULT get_DataSize(long*);
    HRESULT get_DataSize32BitLow(int*);
    HRESULT get_DataSize32BitHigh(int*);
    HRESULT get_Data(IStream*);
    HRESULT put_Data(IStream);
}
enum IID_IFsiFileItem2 = GUID(0x199d0c19, 0x11e1, 0x40eb, [0x8e, 0xc2, 0xc8, 0xc8, 0x22, 0xa0, 0x77, 0x92]);
interface IFsiFileItem2 : IFsiFileItem
{
    HRESULT get_FsiNamedStreams(IFsiNamedStreams*);
    HRESULT get_IsNamedStream(VARIANT_BOOL*);
    HRESULT AddStream(BSTR, IStream);
    HRESULT RemoveStream(BSTR);
    HRESULT get_IsRealTime(VARIANT_BOOL*);
    HRESULT put_IsRealTime(VARIANT_BOOL);
}
enum IID_IFsiNamedStreams = GUID(0xed79ba56, 0x5294, 0x4250, [0x8d, 0x46, 0xf9, 0xae, 0xce, 0xe2, 0x34, 0x59]);
interface IFsiNamedStreams : IDispatch
{
    HRESULT get__NewEnum(IEnumVARIANT*);
    HRESULT get_Item(int, IFsiFileItem2*);
    HRESULT get_Count(int*);
    HRESULT get_EnumNamedStreams(IEnumFsiItems*);
}
enum IID_IFsiDirectoryItem = GUID(0x2c941fdc, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
interface IFsiDirectoryItem : IFsiItem
{
    HRESULT get__NewEnum(IEnumVARIANT*);
    HRESULT get_Item(BSTR, IFsiItem*);
    HRESULT get_Count(int*);
    HRESULT get_EnumFsiItems(IEnumFsiItems*);
    HRESULT AddDirectory(BSTR);
    HRESULT AddFile(BSTR, IStream);
    HRESULT AddTree(BSTR, VARIANT_BOOL);
    HRESULT Add(IFsiItem);
    HRESULT Remove(BSTR);
    HRESULT RemoveTree(BSTR);
}
enum IID_IFsiDirectoryItem2 = GUID(0xf7fb4b9b, 0x6d96, 0x4d7b, [0x91, 0x15, 0x20, 0x1b, 0x14, 0x48, 0x11, 0xef]);
interface IFsiDirectoryItem2 : IFsiDirectoryItem
{
    HRESULT AddTreeWithNamedStreams(BSTR, VARIANT_BOOL);
}
enum IID_IFileSystemImage = GUID(0x2c941fe1, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
interface IFileSystemImage : IDispatch
{
    HRESULT get_Root(IFsiDirectoryItem*);
    HRESULT get_SessionStartBlock(int*);
    HRESULT put_SessionStartBlock(int);
    HRESULT get_FreeMediaBlocks(int*);
    HRESULT put_FreeMediaBlocks(int);
    HRESULT SetMaxMediaBlocksFromDevice(IDiscRecorder2);
    HRESULT get_UsedBlocks(int*);
    HRESULT get_VolumeName(BSTR*);
    HRESULT put_VolumeName(BSTR);
    HRESULT get_ImportedVolumeName(BSTR*);
    HRESULT get_BootImageOptions(IBootOptions*);
    HRESULT put_BootImageOptions(IBootOptions);
    HRESULT get_FileCount(int*);
    HRESULT get_DirectoryCount(int*);
    HRESULT get_WorkingDirectory(BSTR*);
    HRESULT put_WorkingDirectory(BSTR);
    HRESULT get_ChangePoint(int*);
    HRESULT get_StrictFileSystemCompliance(VARIANT_BOOL*);
    HRESULT put_StrictFileSystemCompliance(VARIANT_BOOL);
    HRESULT get_UseRestrictedCharacterSet(VARIANT_BOOL*);
    HRESULT put_UseRestrictedCharacterSet(VARIANT_BOOL);
    HRESULT get_FileSystemsToCreate(FsiFileSystems*);
    HRESULT put_FileSystemsToCreate(FsiFileSystems);
    HRESULT get_FileSystemsSupported(FsiFileSystems*);
    HRESULT put_UDFRevision(int);
    HRESULT get_UDFRevision(int*);
    HRESULT get_UDFRevisionsSupported(SAFEARRAY**);
    HRESULT ChooseImageDefaults(IDiscRecorder2);
    HRESULT ChooseImageDefaultsForMediaType(IMAPI_MEDIA_PHYSICAL_TYPE);
    HRESULT put_ISO9660InterchangeLevel(int);
    HRESULT get_ISO9660InterchangeLevel(int*);
    HRESULT get_ISO9660InterchangeLevelsSupported(SAFEARRAY**);
    HRESULT CreateResultImage(IFileSystemImageResult*);
    HRESULT Exists(BSTR, FsiItemType*);
    HRESULT CalculateDiscIdentifier(BSTR*);
    HRESULT IdentifyFileSystemsOnDisc(IDiscRecorder2, FsiFileSystems*);
    HRESULT GetDefaultFileSystemForImport(FsiFileSystems, FsiFileSystems*);
    HRESULT ImportFileSystem(FsiFileSystems*);
    HRESULT ImportSpecificFileSystem(FsiFileSystems);
    HRESULT RollbackToChangePoint(int);
    HRESULT LockInChangePoint();
    HRESULT CreateDirectoryItem(BSTR, IFsiDirectoryItem*);
    HRESULT CreateFileItem(BSTR, IFsiFileItem*);
    HRESULT get_VolumeNameUDF(BSTR*);
    HRESULT get_VolumeNameJoliet(BSTR*);
    HRESULT get_VolumeNameISO9660(BSTR*);
    HRESULT get_StageFiles(VARIANT_BOOL*);
    HRESULT put_StageFiles(VARIANT_BOOL);
    HRESULT get_MultisessionInterfaces(SAFEARRAY**);
    HRESULT put_MultisessionInterfaces(SAFEARRAY*);
}
enum IID_IFileSystemImage2 = GUID(0xd7644b2c, 0x1537, 0x4767, [0xb6, 0x2f, 0xf1, 0x38, 0x7b, 0x2, 0xdd, 0xfd]);
interface IFileSystemImage2 : IFileSystemImage
{
    HRESULT get_BootImageOptionsArray(SAFEARRAY**);
    HRESULT put_BootImageOptionsArray(SAFEARRAY*);
}
enum IID_IFileSystemImage3 = GUID(0x7cff842c, 0x7e97, 0x4807, [0x83, 0x4, 0x91, 0xd, 0xd8, 0xf7, 0xc0, 0x51]);
interface IFileSystemImage3 : IFileSystemImage2
{
    HRESULT get_CreateRedundantUdfMetadataFiles(VARIANT_BOOL*);
    HRESULT put_CreateRedundantUdfMetadataFiles(VARIANT_BOOL);
    HRESULT ProbeSpecificFileSystem(FsiFileSystems, VARIANT_BOOL*);
}
enum IID_DFileSystemImageEvents = GUID(0x2c941fdf, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
interface DFileSystemImageEvents : IDispatch
{
    HRESULT Update(IDispatch, BSTR, int, int);
}
enum IID_DFileSystemImageImportEvents = GUID(0xd25c30f9, 0x4087, 0x4366, [0x9e, 0x24, 0xe5, 0x5b, 0xe2, 0x86, 0x42, 0x4b]);
interface DFileSystemImageImportEvents : IDispatch
{
    HRESULT UpdateImport(IDispatch, FsiFileSystems, BSTR, int, int, int, int);
}
enum IID_IIsoImageManager = GUID(0x6ca38be5, 0xfbbb, 0x4800, [0x95, 0xa1, 0xa4, 0x38, 0x86, 0x5e, 0xb0, 0xd4]);
interface IIsoImageManager : IDispatch
{
    HRESULT get_Path(BSTR*);
    HRESULT get_Stream(IStream*);
    HRESULT SetPath(BSTR);
    HRESULT SetStream(IStream);
    HRESULT Validate();
}
enum CLSID_BootOptions = GUID(0x2c941fce, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
struct BootOptions
{
}
enum CLSID_FsiStream = GUID(0x2c941fcd, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
struct FsiStream
{
}
enum CLSID_FileSystemImageResult = GUID(0x2c941fcc, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
struct FileSystemImageResult
{
}
enum CLSID_ProgressItem = GUID(0x2c941fcb, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
struct ProgressItem
{
}
enum CLSID_EnumProgressItems = GUID(0x2c941fca, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
struct EnumProgressItems
{
}
enum CLSID_ProgressItems = GUID(0x2c941fc9, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
struct ProgressItems
{
}
enum CLSID_FsiDirectoryItem = GUID(0x2c941fc8, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
struct FsiDirectoryItem
{
}
enum CLSID_FsiFileItem = GUID(0x2c941fc7, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
struct FsiFileItem
{
}
enum CLSID_EnumFsiItems = GUID(0x2c941fc6, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
struct EnumFsiItems
{
}
enum CLSID_FsiNamedStreams = GUID(0xc6b6f8ed, 0x6d19, 0x44b4, [0xb5, 0x39, 0xb1, 0x59, 0xb7, 0x93, 0xa3, 0x2d]);
struct FsiNamedStreams
{
}
enum CLSID_MsftFileSystemImage = GUID(0x2c941fc5, 0x975b, 0x59be, [0xa9, 0x60, 0x9a, 0x2a, 0x26, 0x28, 0x53, 0xa5]);
struct MsftFileSystemImage
{
}
enum CLSID_MsftIsoImageManager = GUID(0xceee3b62, 0x8f56, 0x4056, [0x86, 0x9b, 0xef, 0x16, 0x91, 0x7e, 0x3e, 0xfc]);
struct MsftIsoImageManager
{
}
enum CLSID_BlockRange = GUID(0xb507ca27, 0x2204, 0x11dd, [0x96, 0x6a, 0x0, 0x1a, 0xa0, 0x1b, 0xbc, 0x58]);
struct BlockRange
{
}
enum CLSID_BlockRangeList = GUID(0xb507ca28, 0x2204, 0x11dd, [0x96, 0x6a, 0x0, 0x1a, 0xa0, 0x1b, 0xbc, 0x58]);
struct BlockRangeList
{
}
alias MEDIA_TYPES = int;
enum : int
{
    MEDIA_CDDA_CDROM = 0x00000001,
    MEDIA_CD_ROM_XA  = 0x00000002,
    MEDIA_CD_I       = 0x00000003,
    MEDIA_CD_EXTRA   = 0x00000004,
    MEDIA_CD_OTHER   = 0x00000005,
    MEDIA_SPECIAL    = 0x00000006,
}

alias MEDIA_FLAGS = int;
enum : int
{
    MEDIA_BLANK                    = 0x00000001,
    MEDIA_RW                       = 0x00000002,
    MEDIA_WRITABLE                 = 0x00000004,
    MEDIA_FORMAT_UNUSABLE_BY_IMAPI = 0x00000008,
}

alias RECORDER_TYPES = int;
enum : int
{
    RECORDER_CDR  = 0x00000001,
    RECORDER_CDRW = 0x00000002,
}

enum IID_IDiscRecorder = GUID(0x85ac9776, 0xca88, 0x4cf2, [0x89, 0x4e, 0x9, 0x59, 0x8c, 0x7, 0x8a, 0x41]);
interface IDiscRecorder : IUnknown
{
    HRESULT Init(ubyte*, uint, uint);
    HRESULT GetRecorderGUID(ubyte*, uint, uint*);
    HRESULT GetRecorderType(RECORDER_TYPES*);
    HRESULT GetDisplayNames(BSTR*, BSTR*, BSTR*);
    HRESULT GetBasePnPID(BSTR*);
    HRESULT GetPath(BSTR*);
    HRESULT GetRecorderProperties(IPropertyStorage*);
    HRESULT SetRecorderProperties(IPropertyStorage);
    HRESULT GetRecorderState(DISC_RECORDER_STATE_FLAGS*);
    HRESULT OpenExclusive();
    HRESULT QueryMediaType(MEDIA_TYPES*, MEDIA_FLAGS*);
    HRESULT QueryMediaInfo(ubyte*, ubyte*, uint*, uint*, uint*);
    HRESULT Eject();
    HRESULT Erase(ubyte);
    HRESULT Close();
}
enum IID_IEnumDiscRecorders = GUID(0x9b1921e1, 0x54ac, 0x11d3, [0x91, 0x44, 0x0, 0x10, 0x4b, 0xa1, 0x1c, 0x5e]);
interface IEnumDiscRecorders : IUnknown
{
    HRESULT Next(uint, IDiscRecorder*, uint*);
    HRESULT Skip(uint);
    HRESULT Reset();
    HRESULT Clone(IEnumDiscRecorders*);
}
enum IID_IEnumDiscMasterFormats = GUID(0xddf445e1, 0x54ba, 0x11d3, [0x91, 0x44, 0x0, 0x10, 0x4b, 0xa1, 0x1c, 0x5e]);
interface IEnumDiscMasterFormats : IUnknown
{
    HRESULT Next(uint, GUID*, uint*);
    HRESULT Skip(uint);
    HRESULT Reset();
    HRESULT Clone(IEnumDiscMasterFormats*);
}
enum IID_IRedbookDiscMaster = GUID(0xe3bc42cd, 0x4e5c, 0x11d3, [0x91, 0x44, 0x0, 0x10, 0x4b, 0xa1, 0x1c, 0x5e]);
interface IRedbookDiscMaster : IUnknown
{
    HRESULT GetTotalAudioTracks(int*);
    HRESULT GetTotalAudioBlocks(int*);
    HRESULT GetUsedAudioBlocks(int*);
    HRESULT GetAvailableAudioTrackBlocks(int*);
    HRESULT GetAudioBlockSize(int*);
    HRESULT CreateAudioTrack(int);
    HRESULT AddAudioTrackBlocks(ubyte*, int);
    HRESULT CloseAudioTrack();
}
enum IID_IJolietDiscMaster = GUID(0xe3bc42ce, 0x4e5c, 0x11d3, [0x91, 0x44, 0x0, 0x10, 0x4b, 0xa1, 0x1c, 0x5e]);
interface IJolietDiscMaster : IUnknown
{
    HRESULT GetTotalDataBlocks(int*);
    HRESULT GetUsedDataBlocks(int*);
    HRESULT GetDataBlockSize(int*);
    HRESULT AddData(IStorage, int);
    HRESULT GetJolietProperties(IPropertyStorage*);
    HRESULT SetJolietProperties(IPropertyStorage);
}
enum IID_IDiscMasterProgressEvents = GUID(0xec9e51c1, 0x4e5d, 0x11d3, [0x91, 0x44, 0x0, 0x10, 0x4b, 0xa1, 0x1c, 0x5e]);
interface IDiscMasterProgressEvents : IUnknown
{
    HRESULT QueryCancel(ubyte*);
    HRESULT NotifyPnPActivity();
    HRESULT NotifyAddProgress(int, int);
    HRESULT NotifyBlockProgress(int, int);
    HRESULT NotifyTrackProgress(int, int);
    HRESULT NotifyPreparingBurn(int);
    HRESULT NotifyClosingDisc(int);
    HRESULT NotifyBurnComplete(HRESULT);
    HRESULT NotifyEraseComplete(HRESULT);
}
enum IID_IDiscMaster = GUID(0x520cca62, 0x51a5, 0x11d3, [0x91, 0x44, 0x0, 0x10, 0x4b, 0xa1, 0x1c, 0x5e]);
interface IDiscMaster : IUnknown
{
    HRESULT Open();
    HRESULT EnumDiscMasterFormats(IEnumDiscMasterFormats*);
    HRESULT GetActiveDiscMasterFormat(GUID*);
    HRESULT SetActiveDiscMasterFormat(const(GUID)*, void**);
    HRESULT EnumDiscRecorders(IEnumDiscRecorders*);
    HRESULT GetActiveDiscRecorder(IDiscRecorder*);
    HRESULT SetActiveDiscRecorder(IDiscRecorder);
    HRESULT ClearFormatContent();
    HRESULT ProgressAdvise(IDiscMasterProgressEvents, ulong*);
    HRESULT ProgressUnadvise(ulong);
    HRESULT RecordDisc(ubyte, ubyte);
    HRESULT Close();
}
enum CLSID_MSDiscRecorderObj = GUID(0x520cca61, 0x51a5, 0x11d3, [0x91, 0x44, 0x0, 0x10, 0x4b, 0xa1, 0x1c, 0x5e]);
struct MSDiscRecorderObj
{
}
enum CLSID_MSDiscMasterObj = GUID(0x520cca63, 0x51a5, 0x11d3, [0x91, 0x44, 0x0, 0x10, 0x4b, 0xa1, 0x1c, 0x5e]);
struct MSDiscMasterObj
{
}
enum CLSID_MSEnumDiscRecordersObj = GUID(0x8a03567a, 0x63cb, 0x4ba8, [0xba, 0xf6, 0x52, 0x11, 0x98, 0x16, 0xd1, 0xef]);
struct MSEnumDiscRecordersObj
{
}
alias MSGCALLRELEASE = void function(uint, IMessage);
struct SPropAttrArray
{
    uint cValues;
    uint[1] aPropAttr;
}
enum CLSID_tagIMMPID_MP_STRUCT = GUID(0x13384cf0, 0xb3c4, 0x11d1, [0xaa, 0x92, 0x0, 0xaa, 0x0, 0x6b, 0xc8, 0xb]);
struct tagIMMPID_MP_STRUCT
{
}
alias IMMPID_MP_ENUM = int;
enum : int
{
    IMMPID_MP_BEFORE__                     = 0x00000fff,
    IMMPID_MP_RECIPIENT_LIST               = 0x00001000,
    IMMPID_MP_CONTENT_FILE_NAME            = 0x00001001,
    IMMPID_MP_SENDER_ADDRESS_SMTP          = 0x00001002,
    IMMPID_MP_SENDER_ADDRESS_X500          = 0x00001003,
    IMMPID_MP_SENDER_ADDRESS_X400          = 0x00001004,
    IMMPID_MP_SENDER_ADDRESS_LEGACY_EX_DN  = 0x00001005,
    IMMPID_MP_DOMAIN_LIST                  = 0x00001006,
    IMMPID_MP_PICKUP_FILE_NAME             = 0x00001007,
    IMMPID_MP_AUTHENTICATED_USER_NAME      = 0x00001008,
    IMMPID_MP_CONNECTION_IP_ADDRESS        = 0x00001009,
    IMMPID_MP_HELO_DOMAIN                  = 0x0000100a,
    IMMPID_MP_EIGHTBIT_MIME_OPTION         = 0x0000100b,
    IMMPID_MP_CHUNKING_OPTION              = 0x0000100c,
    IMMPID_MP_BINARYMIME_OPTION            = 0x0000100d,
    IMMPID_MP_REMOTE_AUTHENTICATION_TYPE   = 0x0000100e,
    IMMPID_MP_ERROR_CODE                   = 0x0000100f,
    IMMPID_MP_DSN_ENVID_VALUE              = 0x00001010,
    IMMPID_MP_DSN_RET_VALUE                = 0x00001011,
    IMMPID_MP_REMOTE_SERVER_DSN_CAPABLE    = 0x00001012,
    IMMPID_MP_ARRIVAL_TIME                 = 0x00001013,
    IMMPID_MP_MESSAGE_STATUS               = 0x00001014,
    IMMPID_MP_EXPIRE_DELAY                 = 0x00001015,
    IMMPID_MP_EXPIRE_NDR                   = 0x00001016,
    IMMPID_MP_LOCAL_EXPIRE_DELAY           = 0x00001017,
    IMMPID_MP_LOCAL_EXPIRE_NDR             = 0x00001018,
    IMMPID_MP_ARRIVAL_FILETIME             = 0x00001019,
    IMMPID_MP_HR_CAT_STATUS                = 0x0000101a,
    IMMPID_MP_MSG_GUID                     = 0x0000101b,
    IMMPID_MP_SUPERSEDES_MSG_GUID          = 0x0000101c,
    IMMPID_MP_SCANNED_FOR_CRLF_DOT_CRLF    = 0x0000101d,
    IMMPID_MP_FOUND_EMBEDDED_CRLF_DOT_CRLF = 0x0000101e,
    IMMPID_MP_MSG_SIZE_HINT                = 0x0000101f,
    IMMPID_MP_RFC822_MSG_ID                = 0x00001020,
    IMMPID_MP_RFC822_MSG_SUBJECT           = 0x00001021,
    IMMPID_MP_RFC822_FROM_ADDRESS          = 0x00001022,
    IMMPID_MP_RFC822_TO_ADDRESS            = 0x00001023,
    IMMPID_MP_RFC822_CC_ADDRESS            = 0x00001024,
    IMMPID_MP_RFC822_BCC_ADDRESS           = 0x00001025,
    IMMPID_MP_CONNECTION_SERVER_IP_ADDRESS = 0x00001026,
    IMMPID_MP_SERVER_NAME                  = 0x00001027,
    IMMPID_MP_SERVER_VERSION               = 0x00001028,
    IMMPID_MP_NUM_RECIPIENTS               = 0x00001029,
    IMMPID_MP_X_PRIORITY                   = 0x0000102a,
    IMMPID_MP_FROM_ADDRESS                 = 0x0000102b,
    IMMPID_MP_SENDER_ADDRESS               = 0x0000102c,
    IMMPID_MP_DEFERRED_DELIVERY_FILETIME   = 0x0000102d,
    IMMPID_MP_SENDER_ADDRESS_OTHER         = 0x0000102e,
    IMMPID_MP_ORIGINAL_ARRIVAL_TIME        = 0x0000102f,
    IMMPID_MP_MSGCLASS                     = 0x00001030,
    IMMPID_MP_CONTENT_TYPE                 = 0x00001031,
    IMMPID_MP_ENCRYPTION_TYPE              = 0x00001032,
    IMMPID_MP_CONNECTION_SERVER_PORT       = 0x00001033,
    IMMPID_MP_CLIENT_AUTH_USER             = 0x00001034,
    IMMPID_MP_CLIENT_AUTH_TYPE             = 0x00001035,
    IMMPID_MP_CRC_GLOBAL                   = 0x00001036,
    IMMPID_MP_CRC_RECIPS                   = 0x00001037,
    IMMPID_MP_INBOUND_MAIL_FROM_AUTH       = 0x00001038,
    IMMPID_MP_AFTER__                      = 0x00001039,
}

enum CLSID_tagIMMPID_RP_STRUCT = GUID(0x79e82048, 0xd320, 0x11d1, [0x9f, 0xf4, 0x0, 0xc0, 0x4f, 0xa3, 0x73, 0x48]);
struct tagIMMPID_RP_STRUCT
{
}
alias IMMPID_RP_ENUM = int;
enum : int
{
    IMMPID_RP_BEFORE__            = 0x00001fff,
    IMMPID_RP_DSN_NOTIFY_SUCCESS  = 0x00002000,
    IMMPID_RP_DSN_NOTIFY_INVALID  = 0x00002001,
    IMMPID_RP_ADDRESS_TYPE        = 0x00002002,
    IMMPID_RP_ADDRESS             = 0x00002003,
    IMMPID_RP_ADDRESS_TYPE_SMTP   = 0x00002004,
    IMMPID_RP_ERROR_CODE          = 0x00002005,
    IMMPID_RP_ERROR_STRING        = 0x00002006,
    IMMPID_RP_DSN_NOTIFY_VALUE    = 0x00002007,
    IMMPID_RP_DSN_ORCPT_VALUE     = 0x00002008,
    IMMPID_RP_ADDRESS_SMTP        = 0x00002009,
    IMMPID_RP_ADDRESS_X400        = 0x0000200a,
    IMMPID_RP_ADDRESS_X500        = 0x0000200b,
    IMMPID_RP_LEGACY_EX_DN        = 0x0000200c,
    IMMPID_RP_RECIPIENT_FLAGS     = 0x0000200d,
    IMMPID_RP_SMTP_STATUS_STRING  = 0x0000200e,
    IMMPID_RP_DSN_PRE_CAT_ADDRESS = 0x0000200f,
    IMMPID_RP_MDB_GUID            = 0x00002010,
    IMMPID_RP_USER_GUID           = 0x00002011,
    IMMPID_RP_DOMAIN              = 0x00002012,
    IMMPID_RP_ADDRESS_OTHER       = 0x00002013,
    IMMPID_RP_DISPLAY_NAME        = 0x00002014,
    IMMPID_RP_AFTER__             = 0x00002015,
}

enum CLSID_tagIMMPID_MPV_STRUCT = GUID(0xcbe69706, 0xc9bd, 0x11d1, [0x9f, 0xf2, 0x0, 0xc0, 0x4f, 0xa3, 0x73, 0x48]);
struct tagIMMPID_MPV_STRUCT
{
}
alias IMMPID_MPV_ENUM = int;
enum : int
{
    IMMPID_MPV_BEFORE__                           = 0x00002fff,
    IMMPID_MPV_STORE_DRIVER_HANDLE                = 0x00003000,
    IMMPID_MPV_MESSAGE_CREATION_FLAGS             = 0x00003001,
    IMMPID_MPV_MESSAGE_OPEN_HANDLES               = 0x00003002,
    IMMPID_MPV_TOTAL_OPEN_HANDLES                 = 0x00003003,
    IMMPID_MPV_TOTAL_OPEN_PROPERTY_STREAM_HANDLES = 0x00003004,
    IMMPID_MPV_TOTAL_OPEN_CONTENT_HANDLES         = 0x00003005,
    IMMPID_MPV_AFTER__                            = 0x00003006,
}

struct IMMP_MPV_STORE_DRIVER_HANDLE
{
    GUID guidSignature;
}
enum CLSID_tagIMMPID_RPV_STRUCT = GUID(0x79e82049, 0xd320, 0x11d1, [0x9f, 0xf4, 0x0, 0xc0, 0x4f, 0xa3, 0x73, 0x48]);
struct tagIMMPID_RPV_STRUCT
{
}
alias IMMPID_RPV_ENUM = int;
enum : int
{
    IMMPID_RPV_BEFORE__           = 0x00003fff,
    IMMPID_RPV_DONT_DELIVER       = 0x00004000,
    IMMPID_RPV_NO_NAME_COLLISIONS = 0x00004001,
    IMMPID_RPV_AFTER__            = 0x00004002,
}

enum CLSID_tagIMMPID_NMP_STRUCT = GUID(0x7433a9aa, 0x20e2, 0x11d2, [0x94, 0xd6, 0x0, 0xc0, 0x4f, 0xa3, 0x79, 0xf1]);
struct tagIMMPID_NMP_STRUCT
{
}
alias IMMPID_NMP_ENUM = int;
enum : int
{
    IMMPID_NMP_BEFORE__             = 0x00005fff,
    IMMPID_NMP_SECONDARY_GROUPS     = 0x00006000,
    IMMPID_NMP_SECONDARY_ARTNUM     = 0x00006001,
    IMMPID_NMP_PRIMARY_GROUP        = 0x00006002,
    IMMPID_NMP_PRIMARY_ARTID        = 0x00006003,
    IMMPID_NMP_POST_TOKEN           = 0x00006004,
    IMMPID_NMP_NEWSGROUP_LIST       = 0x00006005,
    IMMPID_NMP_HEADERS              = 0x00006006,
    IMMPID_NMP_NNTP_PROCESSING      = 0x00006007,
    IMMPID_NMP_NNTP_APPROVED_HEADER = 0x00006008,
    IMMPID_NMP_AFTER__              = 0x00006009,
}

enum CLSID_tagIMMPID_CPV_STRUCT = GUID(0xa2a76b2a, 0xe52d, 0x11d1, [0xaa, 0x64, 0x0, 0xc0, 0x4f, 0xa3, 0x5b, 0x82]);
struct tagIMMPID_CPV_STRUCT
{
}
alias IMMPID_CPV_ENUM = int;
enum : int
{
    IMMPID_CPV_BEFORE__ = 0x00007fff,
    IMMPID_CP_START     = 0x00008000,
    IMMPID_CPV_AFTER__  = 0x00008001,
}

struct tagIMMPID_GUIDLIST_ITEM
{
    const(GUID)* pguid;
    uint dwStart;
    uint dwLast;
}
