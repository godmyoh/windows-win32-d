module windows.win32.storage.virtualdiskservice;

import windows.win32.guid : GUID;
import windows.win32.foundation : BOOL, BOOLEAN, HRESULT, PWSTR;
import windows.win32.storage.vhd : ATTACH_VIRTUAL_DISK_FLAG, COMPACT_VIRTUAL_DISK_FLAG, CREATE_VIRTUAL_DISK_FLAG, DEPENDENT_DISK_FLAG, DETACH_VIRTUAL_DISK_FLAG, EXPAND_VIRTUAL_DISK_FLAG, MERGE_VIRTUAL_DISK_FLAG, OPEN_VIRTUAL_DISK_FLAG, VIRTUAL_DISK_ACCESS_MASK, VIRTUAL_STORAGE_TYPE;
import windows.win32.system.com : IUnknown;

version (Windows):
extern (Windows):

alias VDS_NF_PACK = uint;
enum : uint
{
    VDS_NF_PACK_ARRIVE = 0x00000001,
    VDS_NF_PACK_DEPART = 0x00000002,
    VDS_NF_PACK_MODIFY = 0x00000003,
}

alias VDS_NF_FILE_SYSTEM = uint;
enum : uint
{
    VDS_NF_FILE_SYSTEM_MODIFY          = 0x000000cb,
    VDS_NF_FILE_SYSTEM_FORMAT_PROGRESS = 0x000000cc,
}

alias VDS_NF_CONTROLLER = uint;
enum : uint
{
    VDS_NF_CONTROLLER_ARRIVE  = 0x00000067,
    VDS_NF_CONTROLLER_DEPART  = 0x00000068,
    VDS_NF_CONTROLLER_MODIFY  = 0x0000015e,
    VDS_NF_CONTROLLER_REMOVED = 0x0000015f,
}

alias VDS_NF_DRIVE = uint;
enum : uint
{
    VDS_NF_DRIVE_ARRIVE  = 0x00000069,
    VDS_NF_DRIVE_DEPART  = 0x0000006a,
    VDS_NF_DRIVE_MODIFY  = 0x0000006b,
    VDS_NF_DRIVE_REMOVED = 0x00000162,
}

alias VDS_NF_PORT = uint;
enum : uint
{
    VDS_NF_PORT_ARRIVE  = 0x00000079,
    VDS_NF_PORT_DEPART  = 0x0000007a,
    VDS_NF_PORT_MODIFY  = 0x00000160,
    VDS_NF_PORT_REMOVED = 0x00000161,
}

alias VDS_NF_LUN = uint;
enum : uint
{
    VDS_NF_LUN_ARRIVE = 0x0000006c,
    VDS_NF_LUN_DEPART = 0x0000006d,
    VDS_NF_LUN_MODIFY = 0x0000006e,
}

alias VDS_NF_DISK = uint;
enum : uint
{
    VDS_NF_DISK_ARRIVE = 0x00000008,
    VDS_NF_DISK_DEPART = 0x00000009,
    VDS_NF_DISK_MODIFY = 0x0000000a,
}

enum IID_IVdsProviderPrivate = GUID(0x11f3cd41, 0xb7e8, 0x48ff, [0x94, 0x72, 0x9d, 0xff, 0x1, 0x8a, 0xa2, 0x92]);
interface IVdsProviderPrivate : IUnknown
{
    HRESULT GetObject(GUID, VDS_OBJECT_TYPE, IUnknown*);
    HRESULT OnLoad(PWSTR, IUnknown);
    HRESULT OnUnload(BOOL);
}
enum IID_IVdsHwProviderPrivate = GUID(0x98f17bf3, 0x9f33, 0x4f12, [0x87, 0x14, 0x8b, 0x40, 0x75, 0x9, 0x2c, 0x2e]);
interface IVdsHwProviderPrivate : IUnknown
{
    HRESULT QueryIfCreatedLun(PWSTR, VDS_LUN_INFORMATION*, GUID*);
}
enum IID_IVdsHwProviderPrivateMpio = GUID(0x310a7715, 0xac2b, 0x4c6f, [0x98, 0x27, 0x3d, 0x74, 0x2f, 0x35, 0x16, 0x76]);
interface IVdsHwProviderPrivateMpio : IUnknown
{
    HRESULT SetAllPathStatusesFromHbaPort(VDS_HBAPORT_PROP, VDS_PATH_STATUS);
}
enum IID_IVdsAdmin = GUID(0xd188e97d, 0x85aa, 0x4d33, [0xab, 0xc6, 0x26, 0x29, 0x9a, 0x10, 0xff, 0xc1]);
interface IVdsAdmin : IUnknown
{
    HRESULT RegisterProvider(GUID, GUID, PWSTR, VDS_PROVIDER_TYPE, PWSTR, PWSTR, GUID);
    HRESULT UnregisterProvider(GUID);
}
enum VDS_NF_VOLUME_ARRIVE = 0x00000004;
enum VDS_NF_VOLUME_DEPART = 0x00000005;
enum VDS_NF_VOLUME_MODIFY = 0x00000006;
enum VDS_NF_VOLUME_REBUILDING_PROGRESS = 0x00000007;
enum VDS_NF_PARTITION_ARRIVE = 0x0000000b;
enum VDS_NF_PARTITION_DEPART = 0x0000000c;
enum VDS_NF_PARTITION_MODIFY = 0x0000000d;
enum VDS_NF_SUB_SYSTEM_ARRIVE = 0x00000065;
enum VDS_NF_SUB_SYSTEM_DEPART = 0x00000066;
enum VDS_NF_PORTAL_ARRIVE = 0x0000007b;
enum VDS_NF_PORTAL_DEPART = 0x0000007c;
enum VDS_NF_PORTAL_MODIFY = 0x0000007d;
enum VDS_NF_TARGET_ARRIVE = 0x0000007e;
enum VDS_NF_TARGET_DEPART = 0x0000007f;
enum VDS_NF_TARGET_MODIFY = 0x00000080;
enum VDS_NF_PORTAL_GROUP_ARRIVE = 0x00000081;
enum VDS_NF_PORTAL_GROUP_DEPART = 0x00000082;
enum VDS_NF_PORTAL_GROUP_MODIFY = 0x00000083;
enum VDS_NF_SUB_SYSTEM_MODIFY = 0x00000097;
enum VDS_NF_DRIVE_LETTER_FREE = 0x000000c9;
enum VDS_NF_DRIVE_LETTER_ASSIGN = 0x000000ca;
enum VDS_NF_MOUNT_POINTS_CHANGE = 0x000000cd;
enum VDS_NF_FILE_SYSTEM_SHRINKING_PROGRESS = 0x000000ce;
enum VDS_NF_SERVICE_OUT_OF_SYNC = 0x0000012d;
enum GPT_PARTITION_NAME_LENGTH = 0x00000024;
enum VDS_HINT_FASTCRASHRECOVERYREQUIRED = 0x00000001;
enum VDS_HINT_MOSTLYREADS = 0x00000002;
enum VDS_HINT_OPTIMIZEFORSEQUENTIALREADS = 0x00000004;
enum VDS_HINT_OPTIMIZEFORSEQUENTIALWRITES = 0x00000008;
enum VDS_HINT_READBACKVERIFYENABLED = 0x00000010;
enum VDS_HINT_REMAPENABLED = 0x00000020;
enum VDS_HINT_WRITETHROUGHCACHINGENABLED = 0x00000040;
enum VDS_HINT_HARDWARECHECKSUMENABLED = 0x00000080;
enum VDS_HINT_ISYANKABLE = 0x00000100;
enum VDS_HINT_ALLOCATEHOTSPARE = 0x00000200;
enum VDS_HINT_BUSTYPE = 0x00000400;
enum VDS_HINT_USEMIRROREDCACHE = 0x00000800;
enum VDS_HINT_READCACHINGENABLED = 0x00001000;
enum VDS_HINT_WRITECACHINGENABLED = 0x00002000;
enum VDS_HINT_MEDIASCANENABLED = 0x00004000;
enum VDS_HINT_CONSISTENCYCHECKENABLED = 0x00008000;
enum VDS_REBUILD_PRIORITY_MIN = 0x00000000;
enum VDS_REBUILD_PRIORITY_MAX = 0x00000010;
enum VDS_POOL_ATTRIB_RAIDTYPE = 0x00000001;
enum VDS_POOL_ATTRIB_BUSTYPE = 0x00000002;
enum VDS_POOL_ATTRIB_ALLOW_SPINDOWN = 0x00000004;
enum VDS_POOL_ATTRIB_THIN_PROVISION = 0x00000008;
enum VDS_POOL_ATTRIB_NO_SINGLE_POF = 0x00000010;
enum VDS_POOL_ATTRIB_DATA_RDNCY_MAX = 0x00000020;
enum VDS_POOL_ATTRIB_DATA_RDNCY_MIN = 0x00000040;
enum VDS_POOL_ATTRIB_DATA_RDNCY_DEF = 0x00000080;
enum VDS_POOL_ATTRIB_PKG_RDNCY_MAX = 0x00000100;
enum VDS_POOL_ATTRIB_PKG_RDNCY_MIN = 0x00000200;
enum VDS_POOL_ATTRIB_PKG_RDNCY_DEF = 0x00000400;
enum VDS_POOL_ATTRIB_STRIPE_SIZE = 0x00000800;
enum VDS_POOL_ATTRIB_STRIPE_SIZE_MAX = 0x00001000;
enum VDS_POOL_ATTRIB_STRIPE_SIZE_MIN = 0x00002000;
enum VDS_POOL_ATTRIB_STRIPE_SIZE_DEF = 0x00004000;
enum VDS_POOL_ATTRIB_NUM_CLMNS = 0x00008000;
enum VDS_POOL_ATTRIB_NUM_CLMNS_MAX = 0x00010000;
enum VDS_POOL_ATTRIB_NUM_CLMNS_MIN = 0x00020000;
enum VDS_POOL_ATTRIB_NUM_CLMNS_DEF = 0x00040000;
enum VDS_POOL_ATTRIB_DATA_AVL_HINT = 0x00080000;
enum VDS_POOL_ATTRIB_ACCS_RNDM_HINT = 0x00100000;
enum VDS_POOL_ATTRIB_ACCS_DIR_HINT = 0x00200000;
enum VDS_POOL_ATTRIB_ACCS_SIZE_HINT = 0x00400000;
enum VDS_POOL_ATTRIB_ACCS_LTNCY_HINT = 0x00800000;
enum VDS_POOL_ATTRIB_ACCS_BDW_WT_HINT = 0x01000000;
enum VDS_POOL_ATTRIB_STOR_COST_HINT = 0x02000000;
enum VDS_POOL_ATTRIB_STOR_EFFCY_HINT = 0x04000000;
enum VDS_POOL_ATTRIB_CUSTOM_ATTRIB = 0x08000000;
enum VDS_ATTACH_VIRTUAL_DISK_FLAG_USE_FILE_ACL = 0x00000001;
enum CLSID_VdsLoader = GUID(0x9c38ed61, 0xd565, 0x4728, [0xae, 0xee, 0xc8, 0x9, 0x52, 0xf0, 0xec, 0xde]);
enum CLSID_VdsService = GUID(0x7d1933cb, 0x86f6, 0x4a98, [0x86, 0x28, 0x1, 0xbe, 0x94, 0xc9, 0xa5, 0x75]);
enum MAX_FS_NAME_SIZE = 0x00000008;
enum MAX_FS_FORMAT_SUPPORT_NAME_SIZE = 0x00000020;
enum MAX_FS_ALLOWED_CLUSTER_SIZES_SIZE = 0x00000020;
enum VER_VDS_LUN_INFORMATION = 0x00000001;
enum VDS_E_NOT_SUPPORTED = 0xffffffff80042400;
enum VDS_E_INITIALIZED_FAILED = 0xffffffff80042401;
enum VDS_E_INITIALIZE_NOT_CALLED = 0xffffffff80042402;
enum VDS_E_ALREADY_REGISTERED = 0xffffffff80042403;
enum VDS_E_ANOTHER_CALL_IN_PROGRESS = 0xffffffff80042404;
enum VDS_E_OBJECT_NOT_FOUND = 0xffffffff80042405;
enum VDS_E_INVALID_SPACE = 0xffffffff80042406;
enum VDS_E_PARTITION_LIMIT_REACHED = 0xffffffff80042407;
enum VDS_E_PARTITION_NOT_EMPTY = 0xffffffff80042408;
enum VDS_E_OPERATION_PENDING = 0xffffffff80042409;
enum VDS_E_OPERATION_DENIED = 0xffffffff8004240a;
enum VDS_E_OBJECT_DELETED = 0xffffffff8004240b;
enum VDS_E_CANCEL_TOO_LATE = 0xffffffff8004240c;
enum VDS_E_OPERATION_CANCELED = 0xffffffff8004240d;
enum VDS_E_CANNOT_EXTEND = 0xffffffff8004240e;
enum VDS_E_NOT_ENOUGH_SPACE = 0xffffffff8004240f;
enum VDS_E_NOT_ENOUGH_DRIVE = 0xffffffff80042410;
enum VDS_E_BAD_COOKIE = 0xffffffff80042411;
enum VDS_E_NO_MEDIA = 0xffffffff80042412;
enum VDS_E_DEVICE_IN_USE = 0xffffffff80042413;
enum VDS_E_DISK_NOT_EMPTY = 0xffffffff80042414;
enum VDS_E_INVALID_OPERATION = 0xffffffff80042415;
enum VDS_E_PATH_NOT_FOUND = 0xffffffff80042416;
enum VDS_E_DISK_NOT_INITIALIZED = 0xffffffff80042417;
enum VDS_E_NOT_AN_UNALLOCATED_DISK = 0xffffffff80042418;
enum VDS_E_UNRECOVERABLE_ERROR = 0xffffffff80042419;
enum VDS_S_DISK_PARTIALLY_CLEANED = 0x0004241a;
enum VDS_E_DMADMIN_SERVICE_CONNECTION_FAILED = 0xffffffff8004241b;
enum VDS_E_PROVIDER_INITIALIZATION_FAILED = 0xffffffff8004241c;
enum VDS_E_OBJECT_EXISTS = 0xffffffff8004241d;
enum VDS_E_NO_DISKS_FOUND = 0xffffffff8004241e;
enum VDS_E_PROVIDER_CACHE_CORRUPT = 0xffffffff8004241f;
enum VDS_E_DMADMIN_METHOD_CALL_FAILED = 0xffffffff80042420;
enum VDS_S_PROVIDER_ERROR_LOADING_CACHE = 0x00042421;
enum VDS_E_PROVIDER_VOL_DEVICE_NAME_NOT_FOUND = 0xffffffff80042422;
enum VDS_E_PROVIDER_VOL_OPEN = 0xffffffff80042423;
enum VDS_E_DMADMIN_CORRUPT_NOTIFICATION = 0xffffffff80042424;
enum VDS_E_INCOMPATIBLE_FILE_SYSTEM = 0xffffffff80042425;
enum VDS_E_INCOMPATIBLE_MEDIA = 0xffffffff80042426;
enum VDS_E_ACCESS_DENIED = 0xffffffff80042427;
enum VDS_E_MEDIA_WRITE_PROTECTED = 0xffffffff80042428;
enum VDS_E_BAD_LABEL = 0xffffffff80042429;
enum VDS_E_CANT_QUICK_FORMAT = 0xffffffff8004242a;
enum VDS_E_IO_ERROR = 0xffffffff8004242b;
enum VDS_E_VOLUME_TOO_SMALL = 0xffffffff8004242c;
enum VDS_E_VOLUME_TOO_BIG = 0xffffffff8004242d;
enum VDS_E_CLUSTER_SIZE_TOO_SMALL = 0xffffffff8004242e;
enum VDS_E_CLUSTER_SIZE_TOO_BIG = 0xffffffff8004242f;
enum VDS_E_CLUSTER_COUNT_BEYOND_32BITS = 0xffffffff80042430;
enum VDS_E_OBJECT_STATUS_FAILED = 0xffffffff80042431;
enum VDS_E_VOLUME_INCOMPLETE = 0xffffffff80042432;
enum VDS_E_EXTENT_SIZE_LESS_THAN_MIN = 0xffffffff80042433;
enum VDS_S_UPDATE_BOOTFILE_FAILED = 0x00042434;
enum VDS_S_BOOT_PARTITION_NUMBER_CHANGE = 0x00042436;
enum VDS_E_BOOT_PARTITION_NUMBER_CHANGE = 0xffffffff80042436;
enum VDS_E_NO_FREE_SPACE = 0xffffffff80042437;
enum VDS_E_ACTIVE_PARTITION = 0xffffffff80042438;
enum VDS_E_PARTITION_OF_UNKNOWN_TYPE = 0xffffffff80042439;
enum VDS_E_LEGACY_VOLUME_FORMAT = 0xffffffff8004243a;
enum VDS_E_NON_CONTIGUOUS_DATA_PARTITIONS = 0xffffffff8004243b;
enum VDS_E_MIGRATE_OPEN_VOLUME = 0xffffffff8004243c;
enum VDS_E_VOLUME_NOT_ONLINE = 0xffffffff8004243d;
enum VDS_E_VOLUME_NOT_HEALTHY = 0xffffffff8004243e;
enum VDS_E_VOLUME_SPANS_DISKS = 0xffffffff8004243f;
enum VDS_E_REQUIRES_CONTIGUOUS_DISK_SPACE = 0xffffffff80042440;
enum VDS_E_BAD_PROVIDER_DATA = 0xffffffff80042441;
enum VDS_E_PROVIDER_FAILURE = 0xffffffff80042442;
enum VDS_S_VOLUME_COMPRESS_FAILED = 0x00042443;
enum VDS_E_PACK_OFFLINE = 0xffffffff80042444;
enum VDS_E_VOLUME_NOT_A_MIRROR = 0xffffffff80042445;
enum VDS_E_NO_EXTENTS_FOR_VOLUME = 0xffffffff80042446;
enum VDS_E_DISK_NOT_LOADED_TO_CACHE = 0xffffffff80042447;
enum VDS_E_INTERNAL_ERROR = 0xffffffff80042448;
enum VDS_S_ACCESS_PATH_NOT_DELETED = 0x00044244;
enum VDS_E_PROVIDER_TYPE_NOT_SUPPORTED = 0xffffffff8004244a;
enum VDS_E_DISK_NOT_ONLINE = 0xffffffff8004244b;
enum VDS_E_DISK_IN_USE_BY_VOLUME = 0xffffffff8004244c;
enum VDS_S_IN_PROGRESS = 0x0004244d;
enum VDS_E_ASYNC_OBJECT_FAILURE = 0xffffffff8004244e;
enum VDS_E_VOLUME_NOT_MOUNTED = 0xffffffff8004244f;
enum VDS_E_PACK_NOT_FOUND = 0xffffffff80042450;
enum VDS_E_IMPORT_SET_INCOMPLETE = 0xffffffff80042451;
enum VDS_E_DISK_NOT_IMPORTED = 0xffffffff80042452;
enum VDS_E_OBJECT_OUT_OF_SYNC = 0xffffffff80042453;
enum VDS_E_MISSING_DISK = 0xffffffff80042454;
enum VDS_E_DISK_PNP_REG_CORRUPT = 0xffffffff80042455;
enum VDS_E_LBN_REMAP_ENABLED_FLAG = 0xffffffff80042456;
enum VDS_E_NO_DRIVELETTER_FLAG = 0xffffffff80042457;
enum VDS_E_REVERT_ON_CLOSE = 0xffffffff80042458;
enum VDS_E_REVERT_ON_CLOSE_SET = 0xffffffff80042459;
enum VDS_E_IA64_BOOT_MIRRORED_TO_MBR = 0xffffffff8004245a;
enum VDS_S_IA64_BOOT_MIRRORED_TO_MBR = 0x0004245a;
enum VDS_S_UNABLE_TO_GET_GPT_ATTRIBUTES = 0x0004245b;
enum VDS_E_VOLUME_TEMPORARILY_DISMOUNTED = 0xffffffff8004245c;
enum VDS_E_VOLUME_PERMANENTLY_DISMOUNTED = 0xffffffff8004245d;
enum VDS_E_VOLUME_HAS_PATH = 0xffffffff8004245e;
enum VDS_E_TIMEOUT = 0xffffffff8004245f;
enum VDS_E_REPAIR_VOLUMESTATE = 0xffffffff80042460;
enum VDS_E_LDM_TIMEOUT = 0xffffffff80042461;
enum VDS_E_REVERT_ON_CLOSE_MISMATCH = 0xffffffff80042462;
enum VDS_E_RETRY = 0xffffffff80042463;
enum VDS_E_ONLINE_PACK_EXISTS = 0xffffffff80042464;
enum VDS_S_EXTEND_FILE_SYSTEM_FAILED = 0x00042465;
enum VDS_E_EXTEND_FILE_SYSTEM_FAILED = 0xffffffff80042466;
enum VDS_S_MBR_BOOT_MIRRORED_TO_GPT = 0x00042467;
enum VDS_E_MAX_USABLE_MBR = 0xffffffff80042468;
enum VDS_S_GPT_BOOT_MIRRORED_TO_MBR = 0xffffffff80042469;
enum VDS_E_NO_SOFTWARE_PROVIDERS_LOADED = 0xffffffff80042500;
enum VDS_E_DISK_NOT_MISSING = 0xffffffff80042501;
enum VDS_E_NO_VOLUME_LAYOUT = 0xffffffff80042502;
enum VDS_E_CORRUPT_VOLUME_INFO = 0xffffffff80042503;
enum VDS_E_INVALID_ENUMERATOR = 0xffffffff80042504;
enum VDS_E_DRIVER_INTERNAL_ERROR = 0xffffffff80042505;
enum VDS_E_VOLUME_INVALID_NAME = 0xffffffff80042507;
enum VDS_S_DISK_IS_MISSING = 0x00042508;
enum VDS_E_CORRUPT_PARTITION_INFO = 0xffffffff80042509;
enum VDS_S_NONCONFORMANT_PARTITION_INFO = 0x0004250a;
enum VDS_E_CORRUPT_EXTENT_INFO = 0xffffffff8004250b;
enum VDS_E_DUP_EMPTY_PACK_GUID = 0xffffffff8004250c;
enum VDS_E_DRIVER_NO_PACK_NAME = 0xffffffff8004250d;
enum VDS_S_SYSTEM_PARTITION = 0x0004250e;
enum VDS_E_BAD_PNP_MESSAGE = 0xffffffff8004250f;
enum VDS_E_NO_PNP_DISK_ARRIVE = 0xffffffff80042510;
enum VDS_E_NO_PNP_VOLUME_ARRIVE = 0xffffffff80042511;
enum VDS_E_NO_PNP_DISK_REMOVE = 0xffffffff80042512;
enum VDS_E_NO_PNP_VOLUME_REMOVE = 0xffffffff80042513;
enum VDS_E_PROVIDER_EXITING = 0xffffffff80042514;
enum VDS_E_EXTENT_EXCEEDS_DISK_FREE_SPACE = 0xffffffff80042515;
enum VDS_E_MEMBER_SIZE_INVALID = 0xffffffff80042516;
enum VDS_S_NO_NOTIFICATION = 0x00042517;
enum VDS_S_DEFAULT_PLEX_MEMBER_IDS = 0x00042518;
enum VDS_E_INVALID_DISK = 0xffffffff80042519;
enum VDS_E_INVALID_PACK = 0xffffffff8004251a;
enum VDS_E_VOLUME_ON_DISK = 0xffffffff8004251b;
enum VDS_E_DRIVER_INVALID_PARAM = 0xffffffff8004251c;
enum VDS_E_TARGET_PACK_NOT_EMPTY = 0xffffffff8004251d;
enum VDS_E_CANNOT_SHRINK = 0xffffffff8004251e;
enum VDS_E_MULTIPLE_PACKS = 0xffffffff8004251f;
enum VDS_E_PACK_ONLINE = 0xffffffff80042520;
enum VDS_E_INVALID_PLEX_COUNT = 0xffffffff80042521;
enum VDS_E_INVALID_MEMBER_COUNT = 0xffffffff80042522;
enum VDS_E_INVALID_PLEX_ORDER = 0xffffffff80042523;
enum VDS_E_INVALID_MEMBER_ORDER = 0xffffffff80042524;
enum VDS_E_INVALID_STRIPE_SIZE = 0xffffffff80042525;
enum VDS_E_INVALID_DISK_COUNT = 0xffffffff80042526;
enum VDS_E_INVALID_EXTENT_COUNT = 0xffffffff80042527;
enum VDS_E_SOURCE_IS_TARGET_PACK = 0xffffffff80042528;
enum VDS_E_VOLUME_DISK_COUNT_MAX_EXCEEDED = 0xffffffff80042529;
enum VDS_E_CORRUPT_NOTIFICATION_INFO = 0xffffffff8004252a;
enum VDS_E_INVALID_PLEX_GUID = 0xffffffff8004252c;
enum VDS_E_DISK_NOT_FOUND_IN_PACK = 0xffffffff8004252d;
enum VDS_E_DUPLICATE_DISK = 0xffffffff8004252e;
enum VDS_E_LAST_VALID_DISK = 0xffffffff8004252f;
enum VDS_E_INVALID_SECTOR_SIZE = 0xffffffff80042530;
enum VDS_E_ONE_EXTENT_PER_DISK = 0xffffffff80042531;
enum VDS_E_INVALID_BLOCK_SIZE = 0xffffffff80042532;
enum VDS_E_PLEX_SIZE_INVALID = 0xffffffff80042533;
enum VDS_E_NO_EXTENTS_FOR_PLEX = 0xffffffff80042534;
enum VDS_E_INVALID_PLEX_TYPE = 0xffffffff80042535;
enum VDS_E_INVALID_PLEX_BLOCK_SIZE = 0xffffffff80042536;
enum VDS_E_NO_HEALTHY_DISKS = 0xffffffff80042537;
enum VDS_E_CONFIG_LIMIT = 0xffffffff80042538;
enum VDS_E_DISK_CONFIGURATION_CORRUPTED = 0xffffffff80042539;
enum VDS_E_DISK_CONFIGURATION_NOT_IN_SYNC = 0xffffffff8004253a;
enum VDS_E_DISK_CONFIGURATION_UPDATE_FAILED = 0xffffffff8004253b;
enum VDS_E_DISK_DYNAMIC = 0xffffffff8004253c;
enum VDS_E_DRIVER_OBJECT_NOT_FOUND = 0xffffffff8004253d;
enum VDS_E_PARTITION_NOT_CYLINDER_ALIGNED = 0xffffffff8004253e;
enum VDS_E_DISK_LAYOUT_PARTITIONS_TOO_SMALL = 0xffffffff8004253f;
enum VDS_E_DISK_IO_FAILING = 0xffffffff80042540;
enum VDS_E_DYNAMIC_DISKS_NOT_SUPPORTED = 0xffffffff80042541;
enum VDS_E_FAULT_TOLERANT_DISKS_NOT_SUPPORTED = 0xffffffff80042542;
enum VDS_E_GPT_ATTRIBUTES_INVALID = 0xffffffff80042543;
enum VDS_E_MEMBER_IS_HEALTHY = 0xffffffff80042544;
enum VDS_E_MEMBER_REGENERATING = 0xffffffff80042545;
enum VDS_E_PACK_NAME_INVALID = 0xffffffff80042546;
enum VDS_E_PLEX_IS_HEALTHY = 0xffffffff80042547;
enum VDS_E_PLEX_LAST_ACTIVE = 0xffffffff80042548;
enum VDS_E_PLEX_MISSING = 0xffffffff80042549;
enum VDS_E_MEMBER_MISSING = 0xffffffff8004254a;
enum VDS_E_PLEX_REGENERATING = 0xffffffff8004254b;
enum VDS_E_UNEXPECTED_DISK_LAYOUT_CHANGE = 0xffffffff8004254d;
enum VDS_E_INVALID_VOLUME_LENGTH = 0xffffffff8004254e;
enum VDS_E_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE = 0xffffffff8004254f;
enum VDS_E_VOLUME_NOT_RETAINED = 0xffffffff80042550;
enum VDS_E_VOLUME_RETAINED = 0xffffffff80042551;
enum VDS_E_ALIGN_BEYOND_FIRST_CYLINDER = 0xffffffff80042553;
enum VDS_E_ALIGN_NOT_SECTOR_SIZE_MULTIPLE = 0xffffffff80042554;
enum VDS_E_ALIGN_NOT_ZERO = 0xffffffff80042555;
enum VDS_E_CACHE_CORRUPT = 0xffffffff80042556;
enum VDS_E_CANNOT_CLEAR_VOLUME_FLAG = 0xffffffff80042557;
enum VDS_E_DISK_BEING_CLEANED = 0xffffffff80042558;
enum VDS_E_DISK_NOT_CONVERTIBLE = 0xffffffff80042559;
enum VDS_E_DISK_REMOVEABLE = 0xffffffff8004255a;
enum VDS_E_DISK_REMOVEABLE_NOT_EMPTY = 0xffffffff8004255b;
enum VDS_E_DRIVE_LETTER_NOT_FREE = 0xffffffff8004255c;
enum VDS_E_EXTEND_MULTIPLE_DISKS_NOT_SUPPORTED = 0xffffffff8004255d;
enum VDS_E_INVALID_DRIVE_LETTER = 0xffffffff8004255e;
enum VDS_E_INVALID_DRIVE_LETTER_COUNT = 0xffffffff8004255f;
enum VDS_E_INVALID_FS_FLAG = 0xffffffff80042560;
enum VDS_E_INVALID_FS_TYPE = 0xffffffff80042561;
enum VDS_E_INVALID_OBJECT_TYPE = 0xffffffff80042562;
enum VDS_E_INVALID_PARTITION_LAYOUT = 0xffffffff80042563;
enum VDS_E_INVALID_PARTITION_STYLE = 0xffffffff80042564;
enum VDS_E_INVALID_PARTITION_TYPE = 0xffffffff80042565;
enum VDS_E_INVALID_PROVIDER_CLSID = 0xffffffff80042566;
enum VDS_E_INVALID_PROVIDER_ID = 0xffffffff80042567;
enum VDS_E_INVALID_PROVIDER_NAME = 0xffffffff80042568;
enum VDS_E_INVALID_PROVIDER_TYPE = 0xffffffff80042569;
enum VDS_E_INVALID_PROVIDER_VERSION_GUID = 0xffffffff8004256a;
enum VDS_E_INVALID_PROVIDER_VERSION_STRING = 0xffffffff8004256b;
enum VDS_E_INVALID_QUERY_PROVIDER_FLAG = 0xffffffff8004256c;
enum VDS_E_INVALID_SERVICE_FLAG = 0xffffffff8004256d;
enum VDS_E_INVALID_VOLUME_FLAG = 0xffffffff8004256e;
enum VDS_E_PARTITION_NOT_OEM = 0xffffffff8004256f;
enum VDS_E_PARTITION_PROTECTED = 0xffffffff80042570;
enum VDS_E_PARTITION_STYLE_MISMATCH = 0xffffffff80042571;
enum VDS_E_PROVIDER_INTERNAL_ERROR = 0xffffffff80042572;
enum VDS_E_SHRINK_SIZE_LESS_THAN_MIN = 0xffffffff80042573;
enum VDS_E_SHRINK_SIZE_TOO_BIG = 0xffffffff80042574;
enum VDS_E_UNRECOVERABLE_PROVIDER_ERROR = 0xffffffff80042575;
enum VDS_E_VOLUME_HIDDEN = 0xffffffff80042576;
enum VDS_S_DISMOUNT_FAILED = 0x00042577;
enum VDS_S_REMOUNT_FAILED = 0x00042578;
enum VDS_E_FLAG_ALREADY_SET = 0xffffffff80042579;
enum VDS_S_RESYNC_NOTIFICATION_TASK_FAILED = 0x0004257a;
enum VDS_E_DISTINCT_VOLUME = 0xffffffff8004257b;
enum VDS_E_VOLUME_NOT_FOUND_IN_PACK = 0xffffffff8004257c;
enum VDS_E_PARTITION_NON_DATA = 0xffffffff8004257d;
enum VDS_E_CRITICAL_PLEX = 0xffffffff8004257e;
enum VDS_E_VOLUME_SYNCHRONIZING = 0xffffffff8004257f;
enum VDS_E_VOLUME_REGENERATING = 0xffffffff80042580;
enum VDS_S_VSS_FLUSH_AND_HOLD_WRITES = 0x00042581;
enum VDS_S_VSS_RELEASE_WRITES = 0x00042582;
enum VDS_S_FS_LOCK = 0x00042583;
enum VDS_E_READONLY = 0xffffffff80042584;
enum VDS_E_INVALID_VOLUME_TYPE = 0xffffffff80042585;
enum VDS_E_BAD_BOOT_DISK = 0xffffffff80042586;
enum VDS_E_LOG_UPDATE = 0xffffffff80042587;
enum VDS_E_VOLUME_MIRRORED = 0xffffffff80042588;
enum VDS_E_VOLUME_SIMPLE_SPANNED = 0xffffffff80042589;
enum VDS_E_NO_VALID_LOG_COPIES = 0xffffffff8004258a;
enum VDS_S_PLEX_NOT_LOADED_TO_CACHE = 0x0004258b;
enum VDS_E_PLEX_NOT_LOADED_TO_CACHE = 0xffffffff8004258b;
enum VDS_E_PARTITION_MSR = 0xffffffff8004258c;
enum VDS_E_PARTITION_LDM = 0xffffffff8004258d;
enum VDS_S_WINPE_BOOTENTRY = 0x0004258e;
enum VDS_E_ALIGN_NOT_A_POWER_OF_TWO = 0xffffffff8004258f;
enum VDS_E_ALIGN_IS_ZERO = 0xffffffff80042590;
enum VDS_E_SHRINK_IN_PROGRESS = 0xffffffff80042591;
enum VDS_E_CANT_INVALIDATE_FVE = 0xffffffff80042592;
enum VDS_E_FS_NOT_DETERMINED = 0xffffffff80042593;
enum VDS_E_DISK_NOT_OFFLINE = 0xffffffff80042595;
enum VDS_E_FAILED_TO_ONLINE_DISK = 0xffffffff80042596;
enum VDS_E_FAILED_TO_OFFLINE_DISK = 0xffffffff80042597;
enum VDS_E_BAD_REVISION_NUMBER = 0xffffffff80042598;
enum VDS_E_SHRINK_USER_CANCELLED = 0xffffffff80042599;
enum VDS_E_SHRINK_DIRTY_VOLUME = 0xffffffff8004259a;
enum VDS_S_NAME_TRUNCATED = 0x00042700;
enum VDS_E_NAME_NOT_UNIQUE = 0xffffffff80042701;
enum VDS_S_STATUSES_INCOMPLETELY_SET = 0x00042702;
enum VDS_E_ADDRESSES_INCOMPLETELY_SET = 0xffffffff80042703;
enum VDS_E_SECURITY_INCOMPLETELY_SET = 0xffffffff80042705;
enum VDS_E_TARGET_SPECIFIC_NOT_SUPPORTED = 0xffffffff80042706;
enum VDS_E_INITIATOR_SPECIFIC_NOT_SUPPORTED = 0xffffffff80042707;
enum VDS_E_ISCSI_LOGIN_FAILED = 0xffffffff80042708;
enum VDS_E_ISCSI_LOGOUT_FAILED = 0xffffffff80042709;
enum VDS_E_ISCSI_SESSION_NOT_FOUND = 0xffffffff8004270a;
enum VDS_E_ASSOCIATED_LUNS_EXIST = 0xffffffff8004270b;
enum VDS_E_ASSOCIATED_PORTALS_EXIST = 0xffffffff8004270c;
enum VDS_E_NO_DISCOVERY_DOMAIN = 0xffffffff8004270d;
enum VDS_E_MULTIPLE_DISCOVERY_DOMAINS = 0xffffffff8004270e;
enum VDS_E_NO_DISK_PATHNAME = 0xffffffff8004270f;
enum VDS_E_ISCSI_LOGOUT_INCOMPLETE = 0xffffffff80042710;
enum VDS_E_NO_VOLUME_PATHNAME = 0xffffffff80042711;
enum VDS_E_PROVIDER_CACHE_OUTOFSYNC = 0xffffffff80042712;
enum VDS_E_NO_IMPORT_TARGET = 0xffffffff80042713;
enum VDS_S_ALREADY_EXISTS = 0x00042714;
enum VDS_S_PROPERTIES_INCOMPLETE = 0x00042715;
enum VDS_S_ISCSI_SESSION_NOT_FOUND_PERSISTENT_LOGIN_REMOVED = 0x00042800;
enum VDS_S_ISCSI_PERSISTENT_LOGIN_MAY_NOT_BE_REMOVED = 0x00042801;
enum VDS_S_ISCSI_LOGIN_ALREAD_EXISTS = 0x00042802;
enum VDS_E_UNABLE_TO_FIND_BOOT_DISK = 0xffffffff80042803;
enum VDS_E_INCORRECT_BOOT_VOLUME_EXTENT_INFO = 0xffffffff80042804;
enum VDS_E_GET_SAN_POLICY = 0xffffffff80042805;
enum VDS_E_SET_SAN_POLICY = 0xffffffff80042806;
enum VDS_E_BOOT_DISK = 0xffffffff80042807;
enum VDS_S_DISK_MOUNT_FAILED = 0x00042808;
enum VDS_S_DISK_DISMOUNT_FAILED = 0x00042809;
enum VDS_E_DISK_IS_OFFLINE = 0xffffffff8004280a;
enum VDS_E_DISK_IS_READ_ONLY = 0xffffffff8004280b;
enum VDS_E_PAGEFILE_DISK = 0xffffffff8004280c;
enum VDS_E_HIBERNATION_FILE_DISK = 0xffffffff8004280d;
enum VDS_E_CRASHDUMP_DISK = 0xffffffff8004280e;
enum VDS_E_UNABLE_TO_FIND_SYSTEM_DISK = 0xffffffff8004280f;
enum VDS_E_INCORRECT_SYSTEM_VOLUME_EXTENT_INFO = 0xffffffff80042810;
enum VDS_E_SYSTEM_DISK = 0xffffffff80042811;
enum VDS_E_VOLUME_SHRINK_FVE_LOCKED = 0xffffffff80042812;
enum VDS_E_VOLUME_SHRINK_FVE_CORRUPT = 0xffffffff80042813;
enum VDS_E_VOLUME_SHRINK_FVE_RECOVERY = 0xffffffff80042814;
enum VDS_E_VOLUME_SHRINK_FVE = 0xffffffff80042815;
enum VDS_E_SHRINK_OVER_DATA = 0xffffffff80042816;
enum VDS_E_INVALID_SHRINK_SIZE = 0xffffffff80042817;
enum VDS_E_LUN_DISK_MISSING = 0xffffffff80042818;
enum VDS_E_LUN_DISK_FAILED = 0xffffffff80042819;
enum VDS_E_LUN_DISK_NOT_READY = 0xffffffff8004281a;
enum VDS_E_LUN_DISK_NO_MEDIA = 0xffffffff8004281b;
enum VDS_E_LUN_NOT_READY = 0xffffffff8004281c;
enum VDS_E_LUN_OFFLINE = 0xffffffff8004281d;
enum VDS_E_LUN_FAILED = 0xffffffff8004281e;
enum VDS_E_VOLUME_EXTEND_FVE_LOCKED = 0xffffffff8004281f;
enum VDS_E_VOLUME_EXTEND_FVE_CORRUPT = 0xffffffff80042820;
enum VDS_E_VOLUME_EXTEND_FVE_RECOVERY = 0xffffffff80042821;
enum VDS_E_VOLUME_EXTEND_FVE = 0xffffffff80042822;
enum VDS_E_SECTOR_SIZE_ERROR = 0xffffffff80042823;
enum VDS_E_INITIATOR_ADAPTER_NOT_FOUND = 0xffffffff80042900;
enum VDS_E_TARGET_PORTAL_NOT_FOUND = 0xffffffff80042901;
enum VDS_E_INVALID_PORT_PATH = 0xffffffff80042902;
enum VDS_E_INVALID_ISCSI_TARGET_NAME = 0xffffffff80042903;
enum VDS_E_SET_TUNNEL_MODE_OUTER_ADDRESS = 0xffffffff80042904;
enum VDS_E_ISCSI_GET_IKE_INFO = 0xffffffff80042905;
enum VDS_E_ISCSI_SET_IKE_INFO = 0xffffffff80042906;
enum VDS_E_SUBSYSTEM_ID_IS_NULL = 0xffffffff80042907;
enum VDS_E_ISCSI_INITIATOR_NODE_NAME = 0xffffffff80042908;
enum VDS_E_ISCSI_GROUP_PRESHARE_KEY = 0xffffffff80042909;
enum VDS_E_ISCSI_CHAP_SECRET = 0xffffffff8004290a;
enum VDS_E_INVALID_IP_ADDRESS = 0xffffffff8004290b;
enum VDS_E_REBOOT_REQUIRED = 0xffffffff8004290c;
enum VDS_E_VOLUME_GUID_PATHNAME_NOT_ALLOWED = 0xffffffff8004290d;
enum VDS_E_BOOT_PAGEFILE_DRIVE_LETTER = 0xffffffff8004290e;
enum VDS_E_DELETE_WITH_CRITICAL = 0xffffffff8004290f;
enum VDS_E_CLEAN_WITH_DATA = 0xffffffff80042910;
enum VDS_E_CLEAN_WITH_OEM = 0xffffffff80042911;
enum VDS_E_CLEAN_WITH_CRITICAL = 0xffffffff80042912;
enum VDS_E_FORMAT_CRITICAL = 0xffffffff80042913;
enum VDS_E_NTFS_FORMAT_NOT_SUPPORTED = 0xffffffff80042914;
enum VDS_E_FAT32_FORMAT_NOT_SUPPORTED = 0xffffffff80042915;
enum VDS_E_FAT_FORMAT_NOT_SUPPORTED = 0xffffffff80042916;
enum VDS_E_FORMAT_NOT_SUPPORTED = 0xffffffff80042917;
enum VDS_E_COMPRESSION_NOT_SUPPORTED = 0xffffffff80042918;
enum VDS_E_VDISK_NOT_OPEN = 0xffffffff80042919;
enum VDS_E_VDISK_INVALID_OP_STATE = 0xffffffff8004291a;
enum VDS_E_INVALID_PATH = 0xffffffff8004291b;
enum VDS_E_INVALID_ISCSI_PATH = 0xffffffff8004291c;
enum VDS_E_SHRINK_LUN_NOT_UNMASKED = 0xffffffff8004291d;
enum VDS_E_LUN_DISK_READ_ONLY = 0xffffffff8004291e;
enum VDS_E_LUN_UPDATE_DISK = 0xffffffff8004291f;
enum VDS_E_LUN_DYNAMIC = 0xffffffff80042920;
enum VDS_E_LUN_DYNAMIC_OFFLINE = 0xffffffff80042921;
enum VDS_E_LUN_SHRINK_GPT_HEADER = 0xffffffff80042922;
enum VDS_E_MIRROR_NOT_SUPPORTED = 0xffffffff80042923;
enum VDS_E_RAID5_NOT_SUPPORTED = 0xffffffff80042924;
enum VDS_E_DISK_NOT_CONVERTIBLE_SIZE = 0xffffffff80042925;
enum VDS_E_OFFLINE_NOT_SUPPORTED = 0xffffffff80042926;
enum VDS_E_VDISK_PATHNAME_INVALID = 0xffffffff80042927;
enum VDS_E_EXTEND_TOO_MANY_CLUSTERS = 0xffffffff80042928;
enum VDS_E_EXTEND_UNKNOWN_FILESYSTEM = 0xffffffff80042929;
enum VDS_E_SHRINK_UNKNOWN_FILESYSTEM = 0xffffffff8004292a;
enum VDS_E_VD_DISK_NOT_OPEN = 0xffffffff8004292b;
enum VDS_E_VD_DISK_IS_EXPANDING = 0xffffffff8004292c;
enum VDS_E_VD_DISK_IS_COMPACTING = 0xffffffff8004292d;
enum VDS_E_VD_DISK_IS_MERGING = 0xffffffff8004292e;
enum VDS_E_VD_IS_ATTACHED = 0xffffffff8004292f;
enum VDS_E_VD_DISK_ALREADY_OPEN = 0xffffffff80042930;
enum VDS_E_VD_DISK_ALREADY_EXPANDING = 0xffffffff80042931;
enum VDS_E_VD_ALREADY_COMPACTING = 0xffffffff80042932;
enum VDS_E_VD_ALREADY_MERGING = 0xffffffff80042933;
enum VDS_E_VD_ALREADY_ATTACHED = 0xffffffff80042934;
enum VDS_E_VD_ALREADY_DETACHED = 0xffffffff80042935;
enum VDS_E_VD_NOT_ATTACHED_READONLY = 0xffffffff80042936;
enum VDS_E_VD_IS_BEING_ATTACHED = 0xffffffff80042937;
enum VDS_E_VD_IS_BEING_DETACHED = 0xffffffff80042938;
enum VDS_E_NO_POOL = 0xffffffff80042a00;
enum VDS_E_NO_POOL_CREATED = 0xffffffff80042a01;
enum VDS_E_NO_MAINTENANCE_MODE = 0xffffffff80042a02;
enum VDS_E_BLOCK_CLUSTERED = 0xffffffff80042a03;
enum VDS_E_DISK_HAS_BANDS = 0xffffffff80042a04;
enum VDS_E_INVALID_STATE = 0xffffffff80042a05;
enum VDS_E_REFS_FORMAT_NOT_SUPPORTED = 0xffffffff80042a06;
enum VDS_E_DELETE_WITH_BOOTBACKING = 0xffffffff80042a07;
enum VDS_E_FORMAT_WITH_BOOTBACKING = 0xffffffff80042a08;
enum VDS_E_CLEAN_WITH_BOOTBACKING = 0xffffffff80042a09;
enum VDS_E_SHRINK_EXTEND_UNALIGNED = 0xffffffff80042b00;
alias VDS_STORAGE_IDENTIFIER_CODE_SET = int;
enum : int
{
    VDSStorageIdCodeSetReserved = 0x00000000,
    VDSStorageIdCodeSetBinary   = 0x00000001,
    VDSStorageIdCodeSetAscii    = 0x00000002,
    VDSStorageIdCodeSetUtf8     = 0x00000003,
}

alias VDS_STORAGE_IDENTIFIER_TYPE = int;
enum : int
{
    VDSStorageIdTypeVendorSpecific           = 0x00000000,
    VDSStorageIdTypeVendorId                 = 0x00000001,
    VDSStorageIdTypeEUI64                    = 0x00000002,
    VDSStorageIdTypeFCPHName                 = 0x00000003,
    VDSStorageIdTypePortRelative             = 0x00000004,
    VDSStorageIdTypeTargetPortGroup          = 0x00000005,
    VDSStorageIdTypeLogicalUnitGroup         = 0x00000006,
    VDSStorageIdTypeMD5LogicalUnitIdentifier = 0x00000007,
    VDSStorageIdTypeScsiNameString           = 0x00000008,
}

alias VDS_STORAGE_BUS_TYPE = int;
enum : int
{
    VDSBusTypeUnknown           = 0x00000000,
    VDSBusTypeScsi              = 0x00000001,
    VDSBusTypeAtapi             = 0x00000002,
    VDSBusTypeAta               = 0x00000003,
    VDSBusType1394              = 0x00000004,
    VDSBusTypeSsa               = 0x00000005,
    VDSBusTypeFibre             = 0x00000006,
    VDSBusTypeUsb               = 0x00000007,
    VDSBusTypeRAID              = 0x00000008,
    VDSBusTypeiScsi             = 0x00000009,
    VDSBusTypeSas               = 0x0000000a,
    VDSBusTypeSata              = 0x0000000b,
    VDSBusTypeSd                = 0x0000000c,
    VDSBusTypeMmc               = 0x0000000d,
    VDSBusTypeMax               = 0x0000000e,
    VDSBusTypeVirtual           = 0x0000000e,
    VDSBusTypeFileBackedVirtual = 0x0000000f,
    VDSBusTypeSpaces            = 0x00000010,
    VDSBusTypeNVMe              = 0x00000011,
    VDSBusTypeScm               = 0x00000012,
    VDSBusTypeUfs               = 0x00000013,
    VDSBusTypeMaxReserved       = 0x0000007f,
}

struct VDS_STORAGE_IDENTIFIER
{
    VDS_STORAGE_IDENTIFIER_CODE_SET m_CodeSet;
    VDS_STORAGE_IDENTIFIER_TYPE m_Type;
    uint m_cbIdentifier;
    ubyte* m_rgbIdentifier;
}
struct VDS_STORAGE_DEVICE_ID_DESCRIPTOR
{
    uint m_version;
    uint m_cIdentifiers;
    VDS_STORAGE_IDENTIFIER* m_rgIdentifiers;
}
alias VDS_INTERCONNECT_ADDRESS_TYPE = int;
enum : int
{
    VDS_IA_UNKNOWN = 0x00000000,
    VDS_IA_FCFS    = 0x00000001,
    VDS_IA_FCPH    = 0x00000002,
    VDS_IA_FCPH3   = 0x00000003,
    VDS_IA_MAC     = 0x00000004,
    VDS_IA_SCSI    = 0x00000005,
}

struct VDS_INTERCONNECT
{
    VDS_INTERCONNECT_ADDRESS_TYPE m_addressType;
    uint m_cbPort;
    ubyte* m_pbPort;
    uint m_cbAddress;
    ubyte* m_pbAddress;
}
struct VDS_LUN_INFORMATION
{
    uint m_version;
    ubyte m_DeviceType;
    ubyte m_DeviceTypeModifier;
    BOOL m_bCommandQueueing;
    VDS_STORAGE_BUS_TYPE m_BusType;
    ubyte* m_szVendorId;
    ubyte* m_szProductId;
    ubyte* m_szProductRevision;
    ubyte* m_szSerialNumber;
    GUID m_diskSignature;
    VDS_STORAGE_DEVICE_ID_DESCRIPTOR m_deviceIdDescriptor;
    uint m_cInterconnects;
    VDS_INTERCONNECT* m_rgInterconnects;
}
alias VDS_OBJECT_TYPE = int;
enum : int
{
    VDS_OT_UNKNOWN      = 0x00000000,
    VDS_OT_PROVIDER     = 0x00000001,
    VDS_OT_PACK         = 0x0000000a,
    VDS_OT_VOLUME       = 0x0000000b,
    VDS_OT_VOLUME_PLEX  = 0x0000000c,
    VDS_OT_DISK         = 0x0000000d,
    VDS_OT_SUB_SYSTEM   = 0x0000001e,
    VDS_OT_CONTROLLER   = 0x0000001f,
    VDS_OT_DRIVE        = 0x00000020,
    VDS_OT_LUN          = 0x00000021,
    VDS_OT_LUN_PLEX     = 0x00000022,
    VDS_OT_PORT         = 0x00000023,
    VDS_OT_PORTAL       = 0x00000024,
    VDS_OT_TARGET       = 0x00000025,
    VDS_OT_PORTAL_GROUP = 0x00000026,
    VDS_OT_STORAGE_POOL = 0x00000027,
    VDS_OT_HBAPORT      = 0x0000005a,
    VDS_OT_INIT_ADAPTER = 0x0000005b,
    VDS_OT_INIT_PORTAL  = 0x0000005c,
    VDS_OT_ASYNC        = 0x00000064,
    VDS_OT_ENUM         = 0x00000065,
    VDS_OT_VDISK        = 0x000000c8,
    VDS_OT_OPEN_VDISK   = 0x000000c9,
}

alias VDS_PROVIDER_TYPE = int;
enum : int
{
    VDS_PT_UNKNOWN     = 0x00000000,
    VDS_PT_SOFTWARE    = 0x00000001,
    VDS_PT_HARDWARE    = 0x00000002,
    VDS_PT_VIRTUALDISK = 0x00000003,
    VDS_PT_MAX         = 0x00000004,
}

alias VDS_PROVIDER_FLAG = int;
enum : int
{
    VDS_PF_DYNAMIC                         = 0x00000001,
    VDS_PF_INTERNAL_HARDWARE_PROVIDER      = 0x00000002,
    VDS_PF_ONE_DISK_ONLY_PER_PACK          = 0x00000004,
    VDS_PF_ONE_PACK_ONLINE_ONLY            = 0x00000008,
    VDS_PF_VOLUME_SPACE_MUST_BE_CONTIGUOUS = 0x00000010,
    VDS_PF_SUPPORT_DYNAMIC                 = 0x80000000,
    VDS_PF_SUPPORT_FAULT_TOLERANT          = 0x40000000,
    VDS_PF_SUPPORT_DYNAMIC_1394            = 0x20000000,
    VDS_PF_SUPPORT_MIRROR                  = 0x00000020,
    VDS_PF_SUPPORT_RAID5                   = 0x00000040,
}

alias VDS_RECOVER_ACTION = int;
enum : int
{
    VDS_RA_UNKNOWN = 0x00000000,
    VDS_RA_REFRESH = 0x00000001,
    VDS_RA_RESTART = 0x00000002,
}

alias VDS_NOTIFICATION_TARGET_TYPE = int;
enum : int
{
    VDS_NTT_UNKNOWN      = 0x00000000,
    VDS_NTT_PACK         = 0x0000000a,
    VDS_NTT_VOLUME       = 0x0000000b,
    VDS_NTT_DISK         = 0x0000000d,
    VDS_NTT_PARTITION    = 0x0000003c,
    VDS_NTT_DRIVE_LETTER = 0x0000003d,
    VDS_NTT_FILE_SYSTEM  = 0x0000003e,
    VDS_NTT_MOUNT_POINT  = 0x0000003f,
    VDS_NTT_SUB_SYSTEM   = 0x0000001e,
    VDS_NTT_CONTROLLER   = 0x0000001f,
    VDS_NTT_DRIVE        = 0x00000020,
    VDS_NTT_LUN          = 0x00000021,
    VDS_NTT_PORT         = 0x00000023,
    VDS_NTT_PORTAL       = 0x00000024,
    VDS_NTT_TARGET       = 0x00000025,
    VDS_NTT_PORTAL_GROUP = 0x00000026,
    VDS_NTT_SERVICE      = 0x000000c8,
}

struct VDS_PACK_NOTIFICATION
{
    VDS_NF_PACK ulEvent;
    GUID packId;
}
struct VDS_DISK_NOTIFICATION
{
    VDS_NF_DISK ulEvent;
    GUID diskId;
}
struct VDS_VOLUME_NOTIFICATION
{
    uint ulEvent;
    GUID volumeId;
    GUID plexId;
    uint ulPercentCompleted;
}
struct VDS_PARTITION_NOTIFICATION
{
    uint ulEvent;
    GUID diskId;
    ulong ullOffset;
}
struct VDS_SERVICE_NOTIFICATION
{
    uint ulEvent;
    VDS_RECOVER_ACTION action;
}
struct VDS_DRIVE_LETTER_NOTIFICATION
{
    uint ulEvent;
    wchar wcLetter;
    GUID volumeId;
}
struct VDS_FILE_SYSTEM_NOTIFICATION
{
    VDS_NF_FILE_SYSTEM ulEvent;
    GUID volumeId;
    uint dwPercentCompleted;
}
struct VDS_MOUNT_POINT_NOTIFICATION
{
    uint ulEvent;
    GUID volumeId;
}
struct VDS_SUB_SYSTEM_NOTIFICATION
{
    uint ulEvent;
    GUID subSystemId;
}
struct VDS_CONTROLLER_NOTIFICATION
{
    VDS_NF_CONTROLLER ulEvent;
    GUID controllerId;
}
struct VDS_DRIVE_NOTIFICATION
{
    VDS_NF_DRIVE ulEvent;
    GUID driveId;
}
struct VDS_LUN_NOTIFICATION
{
    VDS_NF_LUN ulEvent;
    GUID LunId;
}
struct VDS_PORT_NOTIFICATION
{
    VDS_NF_PORT ulEvent;
    GUID portId;
}
struct VDS_PORTAL_NOTIFICATION
{
    uint ulEvent;
    GUID portalId;
}
struct VDS_TARGET_NOTIFICATION
{
    uint ulEvent;
    GUID targetId;
}
struct VDS_PORTAL_GROUP_NOTIFICATION
{
    uint ulEvent;
    GUID portalGroupId;
}
struct VDS_NOTIFICATION
{
    VDS_NOTIFICATION_TARGET_TYPE objectType;
    union
    {
        VDS_PACK_NOTIFICATION Pack;
        VDS_DISK_NOTIFICATION Disk;
        VDS_VOLUME_NOTIFICATION Volume;
        VDS_PARTITION_NOTIFICATION Partition;
        VDS_DRIVE_LETTER_NOTIFICATION Letter;
        VDS_FILE_SYSTEM_NOTIFICATION FileSystem;
        VDS_MOUNT_POINT_NOTIFICATION MountPoint;
        VDS_SUB_SYSTEM_NOTIFICATION SubSystem;
        VDS_CONTROLLER_NOTIFICATION Controller;
        VDS_DRIVE_NOTIFICATION Drive;
        VDS_LUN_NOTIFICATION Lun;
        VDS_PORT_NOTIFICATION Port;
        VDS_PORTAL_NOTIFICATION Portal;
        VDS_TARGET_NOTIFICATION Target;
        VDS_PORTAL_GROUP_NOTIFICATION PortalGroup;
        VDS_SERVICE_NOTIFICATION Service;
    }
}
alias VDS_ASYNC_OUTPUT_TYPE = int;
enum : int
{
    VDS_ASYNCOUT_UNKNOWN           = 0x00000000,
    VDS_ASYNCOUT_CREATEVOLUME      = 0x00000001,
    VDS_ASYNCOUT_EXTENDVOLUME      = 0x00000002,
    VDS_ASYNCOUT_SHRINKVOLUME      = 0x00000003,
    VDS_ASYNCOUT_ADDVOLUMEPLEX     = 0x00000004,
    VDS_ASYNCOUT_BREAKVOLUMEPLEX   = 0x00000005,
    VDS_ASYNCOUT_REMOVEVOLUMEPLEX  = 0x00000006,
    VDS_ASYNCOUT_REPAIRVOLUMEPLEX  = 0x00000007,
    VDS_ASYNCOUT_RECOVERPACK       = 0x00000008,
    VDS_ASYNCOUT_REPLACEDISK       = 0x00000009,
    VDS_ASYNCOUT_CREATEPARTITION   = 0x0000000a,
    VDS_ASYNCOUT_CLEAN             = 0x0000000b,
    VDS_ASYNCOUT_CREATELUN         = 0x00000032,
    VDS_ASYNCOUT_ADDLUNPLEX        = 0x00000034,
    VDS_ASYNCOUT_REMOVELUNPLEX     = 0x00000035,
    VDS_ASYNCOUT_EXTENDLUN         = 0x00000036,
    VDS_ASYNCOUT_SHRINKLUN         = 0x00000037,
    VDS_ASYNCOUT_RECOVERLUN        = 0x00000038,
    VDS_ASYNCOUT_LOGINTOTARGET     = 0x0000003c,
    VDS_ASYNCOUT_LOGOUTFROMTARGET  = 0x0000003d,
    VDS_ASYNCOUT_CREATETARGET      = 0x0000003e,
    VDS_ASYNCOUT_CREATEPORTALGROUP = 0x0000003f,
    VDS_ASYNCOUT_DELETETARGET      = 0x00000040,
    VDS_ASYNCOUT_ADDPORTAL         = 0x00000041,
    VDS_ASYNCOUT_REMOVEPORTAL      = 0x00000042,
    VDS_ASYNCOUT_DELETEPORTALGROUP = 0x00000043,
    VDS_ASYNCOUT_FORMAT            = 0x00000065,
    VDS_ASYNCOUT_CREATE_VDISK      = 0x000000c8,
    VDS_ASYNCOUT_ATTACH_VDISK      = 0x000000c9,
    VDS_ASYNCOUT_COMPACT_VDISK     = 0x000000ca,
    VDS_ASYNCOUT_MERGE_VDISK       = 0x000000cb,
    VDS_ASYNCOUT_EXPAND_VDISK      = 0x000000cc,
}

struct VDS_ASYNC_OUTPUT
{
    VDS_ASYNC_OUTPUT_TYPE type;
    union
    {
        struct _cp
        {
            ulong ullOffset;
            GUID volumeId;
        }
        struct _cv
        {
            IUnknown pVolumeUnk;
        }
        struct _bvp
        {
            IUnknown pVolumeUnk;
        }
        struct _sv
        {
            ulong ullReclaimedBytes;
        }
        struct _cl
        {
            IUnknown pLunUnk;
        }
        struct _ct
        {
            IUnknown pTargetUnk;
        }
        struct _cpg
        {
            IUnknown pPortalGroupUnk;
        }
        struct _cvd
        {
            IUnknown pVDiskUnk;
        }
    }
}
alias VDS_IPADDRESS_TYPE = int;
enum : int
{
    VDS_IPT_TEXT  = 0x00000000,
    VDS_IPT_IPV4  = 0x00000001,
    VDS_IPT_IPV6  = 0x00000002,
    VDS_IPT_EMPTY = 0x00000003,
}

alias VDS_HEALTH = int;
enum : int
{
    VDS_H_UNKNOWN                   = 0x00000000,
    VDS_H_HEALTHY                   = 0x00000001,
    VDS_H_REBUILDING                = 0x00000002,
    VDS_H_STALE                     = 0x00000003,
    VDS_H_FAILING                   = 0x00000004,
    VDS_H_FAILING_REDUNDANCY        = 0x00000005,
    VDS_H_FAILED_REDUNDANCY         = 0x00000006,
    VDS_H_FAILED_REDUNDANCY_FAILING = 0x00000007,
    VDS_H_FAILED                    = 0x00000008,
    VDS_H_REPLACED                  = 0x00000009,
    VDS_H_PENDING_FAILURE           = 0x0000000a,
    VDS_H_DEGRADED                  = 0x0000000b,
}

alias VDS_TRANSITION_STATE = int;
enum : int
{
    VDS_TS_UNKNOWN     = 0x00000000,
    VDS_TS_STABLE      = 0x00000001,
    VDS_TS_EXTENDING   = 0x00000002,
    VDS_TS_SHRINKING   = 0x00000003,
    VDS_TS_RECONFIGING = 0x00000004,
    VDS_TS_RESTRIPING  = 0x00000005,
}

alias VDS_FILE_SYSTEM_TYPE = int;
enum : int
{
    VDS_FST_UNKNOWN = 0x00000000,
    VDS_FST_RAW     = 0x00000001,
    VDS_FST_FAT     = 0x00000002,
    VDS_FST_FAT32   = 0x00000003,
    VDS_FST_NTFS    = 0x00000004,
    VDS_FST_CDFS    = 0x00000005,
    VDS_FST_UDF     = 0x00000006,
    VDS_FST_EXFAT   = 0x00000007,
    VDS_FST_CSVFS   = 0x00000008,
    VDS_FST_REFS    = 0x00000009,
}

alias VDS_HBAPORT_TYPE = int;
enum : int
{
    VDS_HPT_UNKNOWN    = 0x00000001,
    VDS_HPT_OTHER      = 0x00000002,
    VDS_HPT_NOTPRESENT = 0x00000003,
    VDS_HPT_NPORT      = 0x00000005,
    VDS_HPT_NLPORT     = 0x00000006,
    VDS_HPT_FLPORT     = 0x00000007,
    VDS_HPT_FPORT      = 0x00000008,
    VDS_HPT_EPORT      = 0x00000009,
    VDS_HPT_GPORT      = 0x0000000a,
    VDS_HPT_LPORT      = 0x00000014,
    VDS_HPT_PTP        = 0x00000015,
}

alias VDS_HBAPORT_STATUS = int;
enum : int
{
    VDS_HPS_UNKNOWN     = 0x00000001,
    VDS_HPS_ONLINE      = 0x00000002,
    VDS_HPS_OFFLINE     = 0x00000003,
    VDS_HPS_BYPASSED    = 0x00000004,
    VDS_HPS_DIAGNOSTICS = 0x00000005,
    VDS_HPS_LINKDOWN    = 0x00000006,
    VDS_HPS_ERROR       = 0x00000007,
    VDS_HPS_LOOPBACK    = 0x00000008,
}

alias VDS_HBAPORT_SPEED_FLAG = int;
enum : int
{
    VDS_HSF_UNKNOWN        = 0x00000000,
    VDS_HSF_1GBIT          = 0x00000001,
    VDS_HSF_2GBIT          = 0x00000002,
    VDS_HSF_10GBIT         = 0x00000004,
    VDS_HSF_4GBIT          = 0x00000008,
    VDS_HSF_NOT_NEGOTIATED = 0x00008000,
}

alias VDS_PATH_STATUS = int;
enum : int
{
    VDS_MPS_UNKNOWN = 0x00000000,
    VDS_MPS_ONLINE  = 0x00000001,
    VDS_MPS_FAILED  = 0x00000005,
    VDS_MPS_STANDBY = 0x00000007,
}

alias VDS_LOADBALANCE_POLICY_ENUM = int;
enum : int
{
    VDS_LBP_UNKNOWN                 = 0x00000000,
    VDS_LBP_FAILOVER                = 0x00000001,
    VDS_LBP_ROUND_ROBIN             = 0x00000002,
    VDS_LBP_ROUND_ROBIN_WITH_SUBSET = 0x00000003,
    VDS_LBP_DYN_LEAST_QUEUE_DEPTH   = 0x00000004,
    VDS_LBP_WEIGHTED_PATHS          = 0x00000005,
    VDS_LBP_LEAST_BLOCKS            = 0x00000006,
    VDS_LBP_VENDOR_SPECIFIC         = 0x00000007,
}

alias VDS_PROVIDER_LBSUPPORT_FLAG = int;
enum : int
{
    VDS_LBF_FAILOVER                = 0x00000001,
    VDS_LBF_ROUND_ROBIN             = 0x00000002,
    VDS_LBF_ROUND_ROBIN_WITH_SUBSET = 0x00000004,
    VDS_LBF_DYN_LEAST_QUEUE_DEPTH   = 0x00000008,
    VDS_LBF_WEIGHTED_PATHS          = 0x00000010,
    VDS_LBF_LEAST_BLOCKS            = 0x00000020,
    VDS_LBF_VENDOR_SPECIFIC         = 0x00000040,
}

alias VDS_VERSION_SUPPORT_FLAG = int;
enum : int
{
    VDS_VSF_1_0 = 0x00000001,
    VDS_VSF_1_1 = 0x00000002,
    VDS_VSF_2_0 = 0x00000004,
    VDS_VSF_2_1 = 0x00000008,
    VDS_VSF_3_0 = 0x00000010,
}

alias VDS_HWPROVIDER_TYPE = int;
enum : int
{
    VDS_HWT_UNKNOWN       = 0x00000000,
    VDS_HWT_PCI_RAID      = 0x00000001,
    VDS_HWT_FIBRE_CHANNEL = 0x00000002,
    VDS_HWT_ISCSI         = 0x00000003,
    VDS_HWT_SAS           = 0x00000004,
    VDS_HWT_HYBRID        = 0x00000005,
}

alias VDS_ISCSI_LOGIN_TYPE = int;
enum : int
{
    VDS_ILT_MANUAL     = 0x00000000,
    VDS_ILT_PERSISTENT = 0x00000001,
    VDS_ILT_BOOT       = 0x00000002,
}

alias VDS_ISCSI_AUTH_TYPE = int;
enum : int
{
    VDS_IAT_NONE        = 0x00000000,
    VDS_IAT_CHAP        = 0x00000001,
    VDS_IAT_MUTUAL_CHAP = 0x00000002,
}

alias VDS_ISCSI_IPSEC_FLAG = int;
enum : int
{
    VDS_IIF_VALID                    = 0x00000001,
    VDS_IIF_IKE                      = 0x00000002,
    VDS_IIF_MAIN_MODE                = 0x00000004,
    VDS_IIF_AGGRESSIVE_MODE          = 0x00000008,
    VDS_IIF_PFS_ENABLE               = 0x00000010,
    VDS_IIF_TRANSPORT_MODE_PREFERRED = 0x00000020,
    VDS_IIF_TUNNEL_MODE_PREFERRED    = 0x00000040,
}

alias VDS_ISCSI_LOGIN_FLAG = int;
enum : int
{
    VDS_ILF_REQUIRE_IPSEC     = 0x00000001,
    VDS_ILF_MULTIPATH_ENABLED = 0x00000002,
}

struct VDS_PATH_ID
{
    ulong ullSourceId;
    ulong ullPathId;
}
struct VDS_WWN
{
    ubyte[8] rguchWwn;
}
struct VDS_IPADDRESS
{
    VDS_IPADDRESS_TYPE type;
    uint ipv4Address;
    ubyte[16] ipv6Address;
    uint ulIpv6FlowInfo;
    uint ulIpv6ScopeId;
    wchar[257] wszTextAddress;
    uint ulPort;
}
struct VDS_ISCSI_IPSEC_KEY
{
    ubyte* pKey;
    uint ulKeySize;
}
struct VDS_ISCSI_SHARED_SECRET
{
    ubyte* pSharedSecret;
    uint ulSharedSecretSize;
}
struct VDS_HBAPORT_PROP
{
    GUID id;
    VDS_WWN wwnNode;
    VDS_WWN wwnPort;
    VDS_HBAPORT_TYPE type;
    VDS_HBAPORT_STATUS status;
    uint ulPortSpeed;
    uint ulSupportedPortSpeed;
}
struct VDS_ISCSI_INITIATOR_ADAPTER_PROP
{
    GUID id;
    PWSTR pwszName;
}
struct VDS_ISCSI_INITIATOR_PORTAL_PROP
{
    GUID id;
    VDS_IPADDRESS address;
    uint ulPortIndex;
}
struct VDS_PROVIDER_PROP
{
    GUID id;
    PWSTR pwszName;
    GUID guidVersionId;
    PWSTR pwszVersion;
    VDS_PROVIDER_TYPE type;
    uint ulFlags;
    uint ulStripeSizeFlags;
    short sRebuildPriority;
}
struct VDS_PATH_INFO
{
    VDS_PATH_ID pathId;
    VDS_HWPROVIDER_TYPE type;
    VDS_PATH_STATUS status;
    union
    {
        GUID controllerPortId;
        GUID targetPortalId;
    }
    union
    {
        GUID hbaPortId;
        GUID initiatorAdapterId;
    }
    union
    {
        VDS_HBAPORT_PROP* pHbaPortProp;
        VDS_IPADDRESS* pInitiatorPortalIpAddr;
    }
}
struct VDS_PATH_POLICY
{
    VDS_PATH_ID pathId;
    BOOL bPrimaryPath;
    uint ulWeight;
}
enum IID_IEnumVdsObject = GUID(0x118610b7, 0x8d94, 0x4030, [0xb5, 0xb8, 0x50, 0x8, 0x89, 0x78, 0x8e, 0x4e]);
interface IEnumVdsObject : IUnknown
{
    HRESULT Next(uint, IUnknown*, uint*);
    HRESULT Skip(uint);
    HRESULT Reset();
    HRESULT Clone(IEnumVdsObject*);
}
enum IID_IVdsAsync = GUID(0xd5d23b6d, 0x5a55, 0x4492, [0x98, 0x89, 0x39, 0x7a, 0x3c, 0x2d, 0x2d, 0xbc]);
interface IVdsAsync : IUnknown
{
    HRESULT Cancel();
    HRESULT Wait(HRESULT*, VDS_ASYNC_OUTPUT*);
    HRESULT QueryStatus(HRESULT*, uint*);
}
enum IID_IVdsAdviseSink = GUID(0x8326cd1d, 0xcf59, 0x4936, [0xb7, 0x86, 0x5e, 0xfc, 0x8, 0x79, 0x8e, 0x25]);
interface IVdsAdviseSink : IUnknown
{
    HRESULT OnNotify(int, VDS_NOTIFICATION*);
}
enum IID_IVdsProvider = GUID(0x10c5e575, 0x7984, 0x4e81, [0xa5, 0x6b, 0x43, 0x1f, 0x5f, 0x92, 0xae, 0x42]);
interface IVdsProvider : IUnknown
{
    HRESULT GetProperties(VDS_PROVIDER_PROP*);
}
enum IID_IVdsProviderSupport = GUID(0x1732be13, 0xe8f9, 0x4a03, [0xbf, 0xbc, 0x5f, 0x61, 0x6a, 0xa6, 0x6c, 0xe1]);
interface IVdsProviderSupport : IUnknown
{
    HRESULT GetVersionSupport(uint*);
}
alias VDS_PACK_STATUS = int;
enum : int
{
    VDS_PS_UNKNOWN = 0x00000000,
    VDS_PS_ONLINE  = 0x00000001,
    VDS_PS_OFFLINE = 0x00000004,
}

alias VDS_PACK_FLAG = int;
enum : int
{
    VDS_PKF_FOREIGN      = 0x00000001,
    VDS_PKF_NOQUORUM     = 0x00000002,
    VDS_PKF_POLICY       = 0x00000004,
    VDS_PKF_CORRUPTED    = 0x00000008,
    VDS_PKF_ONLINE_ERROR = 0x00000010,
}

alias VDS_DISK_STATUS = int;
enum : int
{
    VDS_DS_UNKNOWN   = 0x00000000,
    VDS_DS_ONLINE    = 0x00000001,
    VDS_DS_NOT_READY = 0x00000002,
    VDS_DS_NO_MEDIA  = 0x00000003,
    VDS_DS_FAILED    = 0x00000005,
    VDS_DS_MISSING   = 0x00000006,
    VDS_DS_OFFLINE   = 0x00000004,
}

alias VDS_PARTITION_STYLE = int;
enum : int
{
    VDS_PST_UNKNOWN = 0x00000000,
    VDS_PST_MBR     = 0x00000001,
    VDS_PST_GPT     = 0x00000002,
}

alias VDS_DISK_FLAG = int;
enum : int
{
    VDS_DF_AUDIO_CD             = 0x00000001,
    VDS_DF_HOTSPARE             = 0x00000002,
    VDS_DF_RESERVE_CAPABLE      = 0x00000004,
    VDS_DF_MASKED               = 0x00000008,
    VDS_DF_STYLE_CONVERTIBLE    = 0x00000010,
    VDS_DF_CLUSTERED            = 0x00000020,
    VDS_DF_READ_ONLY            = 0x00000040,
    VDS_DF_SYSTEM_DISK          = 0x00000080,
    VDS_DF_BOOT_DISK            = 0x00000100,
    VDS_DF_PAGEFILE_DISK        = 0x00000200,
    VDS_DF_HIBERNATIONFILE_DISK = 0x00000400,
    VDS_DF_CRASHDUMP_DISK       = 0x00000800,
    VDS_DF_HAS_ARC_PATH         = 0x00001000,
    VDS_DF_DYNAMIC              = 0x00002000,
    VDS_DF_BOOT_FROM_DISK       = 0x00004000,
    VDS_DF_CURRENT_READ_ONLY    = 0x00008000,
    VDS_DF_REFS_NOT_SUPPORTED   = 0x00010000,
}

alias VDS_PARTITION_FLAG = int;
enum : int
{
    VDS_PTF_SYSTEM = 0x00000001,
}

alias VDS_LUN_RESERVE_MODE = int;
enum : int
{
    VDS_LRM_NONE         = 0x00000000,
    VDS_LRM_EXCLUSIVE_RW = 0x00000001,
    VDS_LRM_EXCLUSIVE_RO = 0x00000002,
    VDS_LRM_SHARED_RO    = 0x00000003,
    VDS_LRM_SHARED_RW    = 0x00000004,
}

alias VDS_VOLUME_STATUS = int;
enum : int
{
    VDS_VS_UNKNOWN  = 0x00000000,
    VDS_VS_ONLINE   = 0x00000001,
    VDS_VS_NO_MEDIA = 0x00000003,
    VDS_VS_FAILED   = 0x00000005,
    VDS_VS_OFFLINE  = 0x00000004,
}

alias VDS_VOLUME_TYPE = int;
enum : int
{
    VDS_VT_UNKNOWN = 0x00000000,
    VDS_VT_SIMPLE  = 0x0000000a,
    VDS_VT_SPAN    = 0x0000000b,
    VDS_VT_STRIPE  = 0x0000000c,
    VDS_VT_MIRROR  = 0x0000000d,
    VDS_VT_PARITY  = 0x0000000e,
}

alias VDS_VOLUME_FLAG = int;
enum : int
{
    VDS_VF_SYSTEM_VOLUME                = 0x00000001,
    VDS_VF_BOOT_VOLUME                  = 0x00000002,
    VDS_VF_ACTIVE                       = 0x00000004,
    VDS_VF_READONLY                     = 0x00000008,
    VDS_VF_HIDDEN                       = 0x00000010,
    VDS_VF_CAN_EXTEND                   = 0x00000020,
    VDS_VF_CAN_SHRINK                   = 0x00000040,
    VDS_VF_PAGEFILE                     = 0x00000080,
    VDS_VF_HIBERNATION                  = 0x00000100,
    VDS_VF_CRASHDUMP                    = 0x00000200,
    VDS_VF_INSTALLABLE                  = 0x00000400,
    VDS_VF_LBN_REMAP_ENABLED            = 0x00000800,
    VDS_VF_FORMATTING                   = 0x00001000,
    VDS_VF_NOT_FORMATTABLE              = 0x00002000,
    VDS_VF_NTFS_NOT_SUPPORTED           = 0x00004000,
    VDS_VF_FAT32_NOT_SUPPORTED          = 0x00008000,
    VDS_VF_FAT_NOT_SUPPORTED            = 0x00010000,
    VDS_VF_NO_DEFAULT_DRIVE_LETTER      = 0x00020000,
    VDS_VF_PERMANENTLY_DISMOUNTED       = 0x00040000,
    VDS_VF_PERMANENT_DISMOUNT_SUPPORTED = 0x00080000,
    VDS_VF_SHADOW_COPY                  = 0x00100000,
    VDS_VF_FVE_ENABLED                  = 0x00200000,
    VDS_VF_DIRTY                        = 0x00400000,
    VDS_VF_REFS_NOT_SUPPORTED           = 0x00800000,
    VDS_VF_BACKS_BOOT_VOLUME            = 0x01000000,
    VDS_VF_BACKED_BY_WIM_IMAGE          = 0x02000000,
}

alias VDS_VOLUME_PLEX_TYPE = int;
enum : int
{
    VDS_VPT_UNKNOWN = 0x00000000,
    VDS_VPT_SIMPLE  = 0x0000000a,
    VDS_VPT_SPAN    = 0x0000000b,
    VDS_VPT_STRIPE  = 0x0000000c,
    VDS_VPT_PARITY  = 0x0000000e,
}

alias VDS_VOLUME_PLEX_STATUS = int;
enum : int
{
    VDS_VPS_UNKNOWN  = 0x00000000,
    VDS_VPS_ONLINE   = 0x00000001,
    VDS_VPS_NO_MEDIA = 0x00000003,
    VDS_VPS_FAILED   = 0x00000005,
}

alias VDS_DISK_EXTENT_TYPE = int;
enum : int
{
    VDS_DET_UNKNOWN  = 0x00000000,
    VDS_DET_FREE     = 0x00000001,
    VDS_DET_DATA     = 0x00000002,
    VDS_DET_OEM      = 0x00000003,
    VDS_DET_ESP      = 0x00000004,
    VDS_DET_MSR      = 0x00000005,
    VDS_DET_LDM      = 0x00000006,
    VDS_DET_CLUSTER  = 0x00000007,
    VDS_DET_UNUSABLE = 0x00007fff,
}

struct VDS_PACK_PROP
{
    GUID id;
    PWSTR pwszName;
    VDS_PACK_STATUS status;
    uint ulFlags;
}
struct VDS_DISK_PROP
{
    GUID id;
    VDS_DISK_STATUS status;
    VDS_LUN_RESERVE_MODE ReserveMode;
    VDS_HEALTH health;
    uint dwDeviceType;
    uint dwMediaType;
    ulong ullSize;
    uint ulBytesPerSector;
    uint ulSectorsPerTrack;
    uint ulTracksPerCylinder;
    uint ulFlags;
    VDS_STORAGE_BUS_TYPE BusType;
    VDS_PARTITION_STYLE PartitionStyle;
    union
    {
        uint dwSignature;
        GUID DiskGuid;
    }
    PWSTR pwszDiskAddress;
    PWSTR pwszName;
    PWSTR pwszFriendlyName;
    PWSTR pwszAdaptorName;
    PWSTR pwszDevicePath;
}
alias VDS_DISK_OFFLINE_REASON = int;
enum : int
{
    VDSDiskOfflineReasonNone                = 0x00000000,
    VDSDiskOfflineReasonPolicy              = 0x00000001,
    VDSDiskOfflineReasonRedundantPath       = 0x00000002,
    VDSDiskOfflineReasonSnapshot            = 0x00000003,
    VDSDiskOfflineReasonCollision           = 0x00000004,
    VDSDiskOfflineReasonResourceExhaustion  = 0x00000005,
    VDSDiskOfflineReasonWriteFailure        = 0x00000006,
    VDSDiskOfflineReasonDIScan              = 0x00000007,
    VDSDiskOfflineReasonLostDataPersistence = 0x00000008,
}

struct VDS_DISK_PROP2
{
    GUID id;
    VDS_DISK_STATUS status;
    VDS_DISK_OFFLINE_REASON OfflineReason;
    VDS_LUN_RESERVE_MODE ReserveMode;
    VDS_HEALTH health;
    uint dwDeviceType;
    uint dwMediaType;
    ulong ullSize;
    uint ulBytesPerSector;
    uint ulSectorsPerTrack;
    uint ulTracksPerCylinder;
    uint ulFlags;
    VDS_STORAGE_BUS_TYPE BusType;
    VDS_PARTITION_STYLE PartitionStyle;
    union
    {
        uint dwSignature;
        GUID DiskGuid;
    }
    PWSTR pwszDiskAddress;
    PWSTR pwszName;
    PWSTR pwszFriendlyName;
    PWSTR pwszAdaptorName;
    PWSTR pwszDevicePath;
    PWSTR pwszLocationPath;
}
struct VDS_ADVANCEDDISK_PROP
{
    PWSTR pwszId;
    PWSTR pwszPathname;
    PWSTR pwszLocation;
    PWSTR pwszFriendlyName;
    PWSTR pswzIdentifier;
    ushort usIdentifierFormat;
    uint ulNumber;
    PWSTR pwszSerialNumber;
    PWSTR pwszFirmwareVersion;
    PWSTR pwszManufacturer;
    PWSTR pwszModel;
    ulong ullTotalSize;
    ulong ullAllocatedSize;
    uint ulLogicalSectorSize;
    uint ulPhysicalSectorSize;
    uint ulPartitionCount;
    VDS_DISK_STATUS status;
    VDS_HEALTH health;
    VDS_STORAGE_BUS_TYPE BusType;
    VDS_PARTITION_STYLE PartitionStyle;
    union
    {
        uint dwSignature;
        GUID DiskGuid;
    }
    uint ulFlags;
    uint dwDeviceType;
}
struct VDS_VOLUME_PROP
{
    GUID id;
    VDS_VOLUME_TYPE type;
    VDS_VOLUME_STATUS status;
    VDS_HEALTH health;
    VDS_TRANSITION_STATE TransitionState;
    ulong ullSize;
    uint ulFlags;
    VDS_FILE_SYSTEM_TYPE RecommendedFileSystemType;
    PWSTR pwszName;
}
struct VDS_VOLUME_PROP2
{
    GUID id;
    VDS_VOLUME_TYPE type;
    VDS_VOLUME_STATUS status;
    VDS_HEALTH health;
    VDS_TRANSITION_STATE TransitionState;
    ulong ullSize;
    uint ulFlags;
    VDS_FILE_SYSTEM_TYPE RecommendedFileSystemType;
    uint cbUniqueId;
    PWSTR pwszName;
    ubyte* pUniqueId;
}
struct VDS_VOLUME_PLEX_PROP
{
    GUID id;
    VDS_VOLUME_PLEX_TYPE type;
    VDS_VOLUME_PLEX_STATUS status;
    VDS_HEALTH health;
    VDS_TRANSITION_STATE TransitionState;
    ulong ullSize;
    uint ulStripeSize;
    uint ulNumberOfMembers;
}
struct VDS_DISK_EXTENT
{
    GUID diskId;
    VDS_DISK_EXTENT_TYPE type;
    ulong ullOffset;
    ulong ullSize;
    GUID volumeId;
    GUID plexId;
    uint memberIdx;
}
struct VDS_DISK_FREE_EXTENT
{
    GUID diskId;
    ulong ullOffset;
    ulong ullSize;
}
struct VDS_INPUT_DISK
{
    GUID diskId;
    ulong ullSize;
    GUID plexId;
    uint memberIdx;
}
struct VDS_PARTITION_INFO_GPT
{
    GUID partitionType;
    GUID partitionId;
    ulong attributes;
    wchar[36] name;
}
struct VDS_PARTITION_INFO_MBR
{
    ubyte partitionType;
    BOOLEAN bootIndicator;
    BOOLEAN recognizedPartition;
    uint hiddenSectors;
}
struct VDS_PARTITION_PROP
{
    VDS_PARTITION_STYLE PartitionStyle;
    uint ulFlags;
    uint ulPartitionNumber;
    ulong ullOffset;
    ulong ullSize;
    union
    {
        VDS_PARTITION_INFO_MBR Mbr;
        VDS_PARTITION_INFO_GPT Gpt;
    }
}
alias __VDS_PARTITION_STYLE = int;
enum : int
{
    VDS_PARTITION_STYLE_MBR = 0x00000000,
    VDS_PARTITION_STYLE_GPT = 0x00000001,
    VDS_PARTITION_STYLE_RAW = 0x00000002,
}

struct VDS_PARTITION_INFORMATION_EX
{
    __VDS_PARTITION_STYLE dwPartitionStyle;
    ulong ullStartingOffset;
    ulong ullPartitionLength;
    uint dwPartitionNumber;
    BOOLEAN bRewritePartition;
    union
    {
        VDS_PARTITION_INFO_MBR Mbr;
        VDS_PARTITION_INFO_GPT Gpt;
    }
}
struct CREATE_PARTITION_PARAMETERS
{
    VDS_PARTITION_STYLE style;
    union
    {
        struct _MbrPartInfo_e__Struct
        {
            ubyte partitionType;
            BOOLEAN bootIndicator;
        }
        struct _GptPartInfo_e__Struct
        {
            GUID partitionType;
            GUID partitionId;
            ulong attributes;
            wchar[36] name;
        }
    }
}
struct CHANGE_ATTRIBUTES_PARAMETERS
{
    VDS_PARTITION_STYLE style;
    union
    {
        struct _MbrPartInfo_e__Struct
        {
            BOOLEAN bootIndicator;
        }
        struct _GptPartInfo_e__Struct
        {
            ulong attributes;
        }
    }
}
struct CHANGE_PARTITION_TYPE_PARAMETERS
{
    VDS_PARTITION_STYLE style;
    union
    {
        struct _MbrPartInfo_e__Struct
        {
            ubyte partitionType;
        }
        struct _GptPartInfo_e__Struct
        {
            GUID partitionType;
        }
    }
}
enum IID_IVdsSwProvider = GUID(0x9aa58360, 0xce33, 0x4f92, [0xb6, 0x58, 0xed, 0x24, 0xb1, 0x44, 0x25, 0xb8]);
interface IVdsSwProvider : IUnknown
{
    HRESULT QueryPacks(IEnumVdsObject*);
    HRESULT CreatePack(IVdsPack*);
}
enum IID_IVdsPack = GUID(0x3b69d7f5, 0x9d94, 0x4648, [0x91, 0xca, 0x79, 0x93, 0x9b, 0xa2, 0x63, 0xbf]);
interface IVdsPack : IUnknown
{
    HRESULT GetProperties(VDS_PACK_PROP*);
    HRESULT GetProvider(IVdsProvider*);
    HRESULT QueryVolumes(IEnumVdsObject*);
    HRESULT QueryDisks(IEnumVdsObject*);
    HRESULT CreateVolume(VDS_VOLUME_TYPE, VDS_INPUT_DISK*, int, uint, IVdsAsync*);
    HRESULT AddDisk(GUID, VDS_PARTITION_STYLE, BOOL);
    HRESULT MigrateDisks(GUID*, int, GUID, BOOL, BOOL, HRESULT*, BOOL*);
    HRESULT ReplaceDisk(GUID, GUID, IVdsAsync*);
    HRESULT RemoveMissingDisk(GUID);
    HRESULT Recover(IVdsAsync*);
}
enum IID_IVdsPack2 = GUID(0x13b50bff, 0x290a, 0x47dd, [0x85, 0x58, 0xb7, 0xc5, 0x8d, 0xb1, 0xa7, 0x1a]);
interface IVdsPack2 : IUnknown
{
    HRESULT CreateVolume2(VDS_VOLUME_TYPE, VDS_INPUT_DISK*, int, uint, uint, IVdsAsync*);
}
enum IID_IVdsDisk = GUID(0x7e5c822, 0xf00c, 0x47a1, [0x8f, 0xce, 0xb2, 0x44, 0xda, 0x56, 0xfd, 0x6]);
interface IVdsDisk : IUnknown
{
    HRESULT GetProperties(VDS_DISK_PROP*);
    HRESULT GetPack(IVdsPack*);
    HRESULT GetIdentificationData(VDS_LUN_INFORMATION*);
    HRESULT QueryExtents(VDS_DISK_EXTENT**, int*);
    HRESULT ConvertStyle(VDS_PARTITION_STYLE);
    HRESULT SetFlags(uint);
    HRESULT ClearFlags(uint);
}
enum IID_IVdsDisk2 = GUID(0x40f73c8b, 0x687d, 0x4a13, [0x8d, 0x96, 0x3d, 0x7f, 0x2e, 0x68, 0x39, 0x36]);
interface IVdsDisk2 : IUnknown
{
    HRESULT SetSANMode(BOOL);
}
enum IID_IVdsDiskOnline = GUID(0x90681b1d, 0x6a7f, 0x48e8, [0x90, 0x61, 0x31, 0xb7, 0xaa, 0x12, 0x53, 0x22]);
interface IVdsDiskOnline : IUnknown
{
    HRESULT Online();
    HRESULT Offline();
}
enum IID_IVdsAdvancedDisk = GUID(0x6e6f6b40, 0x977c, 0x4069, [0xbd, 0xdd, 0xac, 0x71, 0x0, 0x59, 0xf8, 0xc0]);
interface IVdsAdvancedDisk : IUnknown
{
    HRESULT GetPartitionProperties(ulong, VDS_PARTITION_PROP*);
    HRESULT QueryPartitions(VDS_PARTITION_PROP**, int*);
    HRESULT CreatePartition(ulong, ulong, CREATE_PARTITION_PARAMETERS*, IVdsAsync*);
    HRESULT DeletePartition(ulong, BOOL, BOOL);
    HRESULT ChangeAttributes(ulong, CHANGE_ATTRIBUTES_PARAMETERS*);
    HRESULT AssignDriveLetter(ulong, wchar);
    HRESULT DeleteDriveLetter(ulong, wchar);
    HRESULT GetDriveLetter(ulong, PWSTR);
    HRESULT FormatPartition(ulong, VDS_FILE_SYSTEM_TYPE, PWSTR, uint, BOOL, BOOL, BOOL, IVdsAsync*);
    HRESULT Clean(BOOL, BOOL, BOOL, IVdsAsync*);
}
enum IID_IVdsAdvancedDisk2 = GUID(0x9723f420, 0x9355, 0x42de, [0xab, 0x66, 0xe3, 0x1b, 0xb1, 0x5b, 0xee, 0xac]);
interface IVdsAdvancedDisk2 : IUnknown
{
    HRESULT ChangePartitionType(ulong, BOOL, CHANGE_PARTITION_TYPE_PARAMETERS*);
}
enum IID_IVdsAdvancedDisk3 = GUID(0x3858c0d5, 0xf35, 0x4bf5, [0x97, 0x14, 0x69, 0x87, 0x49, 0x63, 0xbc, 0x36]);
interface IVdsAdvancedDisk3 : IUnknown
{
    HRESULT GetProperties(VDS_ADVANCEDDISK_PROP*);
    HRESULT GetUniqueId(PWSTR*);
}
enum IID_IVdsCreatePartitionEx = GUID(0x9882f547, 0xcfc3, 0x420b, [0x97, 0x50, 0x0, 0xdf, 0xbe, 0xc5, 0x6, 0x62]);
interface IVdsCreatePartitionEx : IUnknown
{
    HRESULT CreatePartitionEx(ulong, ulong, uint, CREATE_PARTITION_PARAMETERS*, IVdsAsync*);
}
enum IID_IVdsRemovable = GUID(0x316560b, 0x5db4, 0x4ed9, [0xbb, 0xb5, 0x21, 0x34, 0x36, 0xdd, 0xc0, 0xd9]);
interface IVdsRemovable : IUnknown
{
    HRESULT QueryMedia();
    HRESULT Eject();
}
enum IID_IVdsVolume = GUID(0x88306bb2, 0xe71f, 0x478c, [0x86, 0xa2, 0x79, 0xda, 0x20, 0xa, 0xf, 0x11]);
interface IVdsVolume : IUnknown
{
    HRESULT GetProperties(VDS_VOLUME_PROP*);
    HRESULT GetPack(IVdsPack*);
    HRESULT QueryPlexes(IEnumVdsObject*);
    HRESULT Extend(VDS_INPUT_DISK*, int, IVdsAsync*);
    HRESULT Shrink(ulong, IVdsAsync*);
    HRESULT AddPlex(GUID, IVdsAsync*);
    HRESULT BreakPlex(GUID, IVdsAsync*);
    HRESULT RemovePlex(GUID, IVdsAsync*);
    HRESULT Delete(BOOL);
    HRESULT SetFlags(uint, BOOL);
    HRESULT ClearFlags(uint);
}
enum IID_IVdsVolume2 = GUID(0x72ae6713, 0xdcbb, 0x4a03, [0xb3, 0x6b, 0x37, 0x1f, 0x6a, 0xc6, 0xb5, 0x3d]);
interface IVdsVolume2 : IUnknown
{
    HRESULT GetProperties2(VDS_VOLUME_PROP2*);
}
enum IID_IVdsVolumeOnline = GUID(0x1be2275a, 0xb315, 0x4f70, [0x9e, 0x44, 0x87, 0x9b, 0x3a, 0x2a, 0x53, 0xf2]);
interface IVdsVolumeOnline : IUnknown
{
    HRESULT Online();
}
enum IID_IVdsVolumePlex = GUID(0x4daa0135, 0xe1d1, 0x40f1, [0xaa, 0xa5, 0x3c, 0xc1, 0xe5, 0x32, 0x21, 0xc3]);
interface IVdsVolumePlex : IUnknown
{
    HRESULT GetProperties(VDS_VOLUME_PLEX_PROP*);
    HRESULT GetVolume(IVdsVolume*);
    HRESULT QueryExtents(VDS_DISK_EXTENT**, int*);
    HRESULT Repair(VDS_INPUT_DISK*, int, IVdsAsync*);
}
enum IID_IVdsDisk3 = GUID(0x8f4b2f5d, 0xec15, 0x4357, [0x99, 0x2f, 0x47, 0x3e, 0xf1, 0x9, 0x75, 0xb9]);
interface IVdsDisk3 : IUnknown
{
    HRESULT GetProperties2(VDS_DISK_PROP2*);
    HRESULT QueryFreeExtents(uint, VDS_DISK_FREE_EXTENT**, int*);
}
alias VDS_SUB_SYSTEM_STATUS = int;
enum : int
{
    VDS_SSS_UNKNOWN           = 0x00000000,
    VDS_SSS_ONLINE            = 0x00000001,
    VDS_SSS_NOT_READY         = 0x00000002,
    VDS_SSS_OFFLINE           = 0x00000004,
    VDS_SSS_FAILED            = 0x00000005,
    VDS_SSS_PARTIALLY_MANAGED = 0x00000009,
}

alias VDS_SUB_SYSTEM_FLAG = int;
enum : int
{
    VDS_SF_LUN_MASKING_CAPABLE              = 0x00000001,
    VDS_SF_LUN_PLEXING_CAPABLE              = 0x00000002,
    VDS_SF_LUN_REMAPPING_CAPABLE            = 0x00000004,
    VDS_SF_DRIVE_EXTENT_CAPABLE             = 0x00000008,
    VDS_SF_HARDWARE_CHECKSUM_CAPABLE        = 0x00000010,
    VDS_SF_RADIUS_CAPABLE                   = 0x00000020,
    VDS_SF_READ_BACK_VERIFY_CAPABLE         = 0x00000040,
    VDS_SF_WRITE_THROUGH_CACHING_CAPABLE    = 0x00000080,
    VDS_SF_SUPPORTS_FAULT_TOLERANT_LUNS     = 0x00000200,
    VDS_SF_SUPPORTS_NON_FAULT_TOLERANT_LUNS = 0x00000400,
    VDS_SF_SUPPORTS_SIMPLE_LUNS             = 0x00000800,
    VDS_SF_SUPPORTS_SPAN_LUNS               = 0x00001000,
    VDS_SF_SUPPORTS_STRIPE_LUNS             = 0x00002000,
    VDS_SF_SUPPORTS_MIRROR_LUNS             = 0x00004000,
    VDS_SF_SUPPORTS_PARITY_LUNS             = 0x00008000,
    VDS_SF_SUPPORTS_AUTH_CHAP               = 0x00010000,
    VDS_SF_SUPPORTS_AUTH_MUTUAL_CHAP        = 0x00020000,
    VDS_SF_SUPPORTS_SIMPLE_TARGET_CONFIG    = 0x00040000,
    VDS_SF_SUPPORTS_LUN_NUMBER              = 0x00080000,
    VDS_SF_SUPPORTS_MIRRORED_CACHE          = 0x00100000,
    VDS_SF_READ_CACHING_CAPABLE             = 0x00200000,
    VDS_SF_WRITE_CACHING_CAPABLE            = 0x00400000,
    VDS_SF_MEDIA_SCAN_CAPABLE               = 0x00800000,
    VDS_SF_CONSISTENCY_CHECK_CAPABLE        = 0x01000000,
}

alias VDS_SUB_SYSTEM_SUPPORTED_RAID_TYPE_FLAG = int;
enum : int
{
    VDS_SF_SUPPORTS_RAID2_LUNS  = 0x00000001,
    VDS_SF_SUPPORTS_RAID3_LUNS  = 0x00000002,
    VDS_SF_SUPPORTS_RAID4_LUNS  = 0x00000004,
    VDS_SF_SUPPORTS_RAID5_LUNS  = 0x00000008,
    VDS_SF_SUPPORTS_RAID6_LUNS  = 0x00000010,
    VDS_SF_SUPPORTS_RAID01_LUNS = 0x00000020,
    VDS_SF_SUPPORTS_RAID03_LUNS = 0x00000040,
    VDS_SF_SUPPORTS_RAID05_LUNS = 0x00000080,
    VDS_SF_SUPPORTS_RAID10_LUNS = 0x00000100,
    VDS_SF_SUPPORTS_RAID15_LUNS = 0x00000200,
    VDS_SF_SUPPORTS_RAID30_LUNS = 0x00000400,
    VDS_SF_SUPPORTS_RAID50_LUNS = 0x00000800,
    VDS_SF_SUPPORTS_RAID51_LUNS = 0x00001000,
    VDS_SF_SUPPORTS_RAID53_LUNS = 0x00002000,
    VDS_SF_SUPPORTS_RAID60_LUNS = 0x00004000,
    VDS_SF_SUPPORTS_RAID61_LUNS = 0x00008000,
}

alias VDS_INTERCONNECT_FLAG = int;
enum : int
{
    VDS_ITF_PCI_RAID      = 0x00000001,
    VDS_ITF_FIBRE_CHANNEL = 0x00000002,
    VDS_ITF_ISCSI         = 0x00000004,
    VDS_ITF_SAS           = 0x00000008,
}

alias VDS_CONTROLLER_STATUS = int;
enum : int
{
    VDS_CS_UNKNOWN   = 0x00000000,
    VDS_CS_ONLINE    = 0x00000001,
    VDS_CS_NOT_READY = 0x00000002,
    VDS_CS_OFFLINE   = 0x00000004,
    VDS_CS_FAILED    = 0x00000005,
    VDS_CS_REMOVED   = 0x00000008,
}

alias VDS_PORT_STATUS = int;
enum : int
{
    VDS_PRS_UNKNOWN   = 0x00000000,
    VDS_PRS_ONLINE    = 0x00000001,
    VDS_PRS_NOT_READY = 0x00000002,
    VDS_PRS_OFFLINE   = 0x00000004,
    VDS_PRS_FAILED    = 0x00000005,
    VDS_PRS_REMOVED   = 0x00000008,
}

alias VDS_DRIVE_STATUS = int;
enum : int
{
    VDS_DRS_UNKNOWN   = 0x00000000,
    VDS_DRS_ONLINE    = 0x00000001,
    VDS_DRS_NOT_READY = 0x00000002,
    VDS_DRS_OFFLINE   = 0x00000004,
    VDS_DRS_FAILED    = 0x00000005,
    VDS_DRS_REMOVED   = 0x00000008,
}

alias VDS_DRIVE_FLAG = int;
enum : int
{
    VDS_DRF_HOTSPARE         = 0x00000001,
    VDS_DRF_ASSIGNED         = 0x00000002,
    VDS_DRF_UNASSIGNED       = 0x00000004,
    VDS_DRF_HOTSPARE_IN_USE  = 0x00000008,
    VDS_DRF_HOTSPARE_STANDBY = 0x00000010,
}

alias VDS_LUN_TYPE = int;
enum : int
{
    VDS_LT_UNKNOWN            = 0x00000000,
    VDS_LT_DEFAULT            = 0x00000001,
    VDS_LT_FAULT_TOLERANT     = 0x00000002,
    VDS_LT_NON_FAULT_TOLERANT = 0x00000003,
    VDS_LT_SIMPLE             = 0x0000000a,
    VDS_LT_SPAN               = 0x0000000b,
    VDS_LT_STRIPE             = 0x0000000c,
    VDS_LT_MIRROR             = 0x0000000d,
    VDS_LT_PARITY             = 0x0000000e,
    VDS_LT_RAID2              = 0x0000000f,
    VDS_LT_RAID3              = 0x00000010,
    VDS_LT_RAID4              = 0x00000011,
    VDS_LT_RAID5              = 0x00000012,
    VDS_LT_RAID6              = 0x00000013,
    VDS_LT_RAID01             = 0x00000014,
    VDS_LT_RAID03             = 0x00000015,
    VDS_LT_RAID05             = 0x00000016,
    VDS_LT_RAID10             = 0x00000017,
    VDS_LT_RAID15             = 0x00000018,
    VDS_LT_RAID30             = 0x00000019,
    VDS_LT_RAID50             = 0x0000001a,
    VDS_LT_RAID51             = 0x0000001b,
    VDS_LT_RAID53             = 0x0000001c,
    VDS_LT_RAID60             = 0x0000001d,
    VDS_LT_RAID61             = 0x0000001e,
}

alias VDS_LUN_STATUS = int;
enum : int
{
    VDS_LS_UNKNOWN   = 0x00000000,
    VDS_LS_ONLINE    = 0x00000001,
    VDS_LS_NOT_READY = 0x00000002,
    VDS_LS_OFFLINE   = 0x00000004,
    VDS_LS_FAILED    = 0x00000005,
}

alias VDS_LUN_FLAG = int;
enum : int
{
    VDS_LF_LBN_REMAP_ENABLED             = 0x00000001,
    VDS_LF_READ_BACK_VERIFY_ENABLED      = 0x00000002,
    VDS_LF_WRITE_THROUGH_CACHING_ENABLED = 0x00000004,
    VDS_LF_HARDWARE_CHECKSUM_ENABLED     = 0x00000008,
    VDS_LF_READ_CACHE_ENABLED            = 0x00000010,
    VDS_LF_WRITE_CACHE_ENABLED           = 0x00000020,
    VDS_LF_MEDIA_SCAN_ENABLED            = 0x00000040,
    VDS_LF_CONSISTENCY_CHECK_ENABLED     = 0x00000080,
    VDS_LF_SNAPSHOT                      = 0x00000100,
}

alias VDS_LUN_PLEX_TYPE = int;
enum : int
{
    VDS_LPT_UNKNOWN = 0x00000000,
    VDS_LPT_SIMPLE  = 0x0000000a,
    VDS_LPT_SPAN    = 0x0000000b,
    VDS_LPT_STRIPE  = 0x0000000c,
    VDS_LPT_PARITY  = 0x0000000e,
    VDS_LPT_RAID2   = 0x0000000f,
    VDS_LPT_RAID3   = 0x00000010,
    VDS_LPT_RAID4   = 0x00000011,
    VDS_LPT_RAID5   = 0x00000012,
    VDS_LPT_RAID6   = 0x00000013,
    VDS_LPT_RAID03  = 0x00000015,
    VDS_LPT_RAID05  = 0x00000016,
    VDS_LPT_RAID10  = 0x00000017,
    VDS_LPT_RAID15  = 0x00000018,
    VDS_LPT_RAID30  = 0x00000019,
    VDS_LPT_RAID50  = 0x0000001a,
    VDS_LPT_RAID53  = 0x0000001c,
    VDS_LPT_RAID60  = 0x0000001d,
}

alias VDS_LUN_PLEX_STATUS = int;
enum : int
{
    VDS_LPS_UNKNOWN   = 0x00000000,
    VDS_LPS_ONLINE    = 0x00000001,
    VDS_LPS_NOT_READY = 0x00000002,
    VDS_LPS_OFFLINE   = 0x00000004,
    VDS_LPS_FAILED    = 0x00000005,
}

alias VDS_LUN_PLEX_FLAG = int;
enum : int
{
    VDS_LPF_LBN_REMAP_ENABLED = 0x00000001,
}

alias VDS_ISCSI_PORTAL_STATUS = int;
enum : int
{
    VDS_IPS_UNKNOWN   = 0x00000000,
    VDS_IPS_ONLINE    = 0x00000001,
    VDS_IPS_NOT_READY = 0x00000002,
    VDS_IPS_OFFLINE   = 0x00000004,
    VDS_IPS_FAILED    = 0x00000005,
}

alias VDS_STORAGE_POOL_STATUS = int;
enum : int
{
    VDS_SPS_UNKNOWN   = 0x00000000,
    VDS_SPS_ONLINE    = 0x00000001,
    VDS_SPS_NOT_READY = 0x00000002,
    VDS_SPS_OFFLINE   = 0x00000004,
}

alias VDS_STORAGE_POOL_TYPE = int;
enum : int
{
    VDS_SPT_UNKNOWN    = 0x00000000,
    VDS_SPT_PRIMORDIAL = 0x00000001,
    VDS_SPT_CONCRETE   = 0x00000002,
}

alias VDS_MAINTENANCE_OPERATION = int;
enum : int
{
    BlinkLight = 0x00000001,
    BeepAlarm  = 0x00000002,
    SpinDown   = 0x00000003,
    SpinUp     = 0x00000004,
    Ping       = 0x00000005,
}

struct VDS_HINTS
{
    ulong ullHintMask;
    ulong ullExpectedMaximumSize;
    uint ulOptimalReadSize;
    uint ulOptimalReadAlignment;
    uint ulOptimalWriteSize;
    uint ulOptimalWriteAlignment;
    uint ulMaximumDriveCount;
    uint ulStripeSize;
    BOOL bFastCrashRecoveryRequired;
    BOOL bMostlyReads;
    BOOL bOptimizeForSequentialReads;
    BOOL bOptimizeForSequentialWrites;
    BOOL bRemapEnabled;
    BOOL bReadBackVerifyEnabled;
    BOOL bWriteThroughCachingEnabled;
    BOOL bHardwareChecksumEnabled;
    BOOL bIsYankable;
    short sRebuildPriority;
}
struct VDS_HINTS2
{
    ulong ullHintMask;
    ulong ullExpectedMaximumSize;
    uint ulOptimalReadSize;
    uint ulOptimalReadAlignment;
    uint ulOptimalWriteSize;
    uint ulOptimalWriteAlignment;
    uint ulMaximumDriveCount;
    uint ulStripeSize;
    uint ulReserved1;
    uint ulReserved2;
    uint ulReserved3;
    BOOL bFastCrashRecoveryRequired;
    BOOL bMostlyReads;
    BOOL bOptimizeForSequentialReads;
    BOOL bOptimizeForSequentialWrites;
    BOOL bRemapEnabled;
    BOOL bReadBackVerifyEnabled;
    BOOL bWriteThroughCachingEnabled;
    BOOL bHardwareChecksumEnabled;
    BOOL bIsYankable;
    BOOL bAllocateHotSpare;
    BOOL bUseMirroredCache;
    BOOL bReadCachingEnabled;
    BOOL bWriteCachingEnabled;
    BOOL bMediaScanEnabled;
    BOOL bConsistencyCheckEnabled;
    VDS_STORAGE_BUS_TYPE BusType;
    BOOL bReserved1;
    BOOL bReserved2;
    BOOL bReserved3;
    short sRebuildPriority;
}
struct VDS_SUB_SYSTEM_PROP
{
    GUID id;
    PWSTR pwszFriendlyName;
    PWSTR pwszIdentification;
    uint ulFlags;
    uint ulStripeSizeFlags;
    VDS_SUB_SYSTEM_STATUS status;
    VDS_HEALTH health;
    short sNumberOfInternalBuses;
    short sMaxNumberOfSlotsEachBus;
    short sMaxNumberOfControllers;
    short sRebuildPriority;
}
struct VDS_SUB_SYSTEM_PROP2
{
    GUID id;
    PWSTR pwszFriendlyName;
    PWSTR pwszIdentification;
    uint ulFlags;
    uint ulStripeSizeFlags;
    uint ulSupportedRaidTypeFlags;
    VDS_SUB_SYSTEM_STATUS status;
    VDS_HEALTH health;
    short sNumberOfInternalBuses;
    short sMaxNumberOfSlotsEachBus;
    short sMaxNumberOfControllers;
    short sRebuildPriority;
    uint ulNumberOfEnclosures;
}
struct VDS_CONTROLLER_PROP
{
    GUID id;
    PWSTR pwszFriendlyName;
    PWSTR pwszIdentification;
    VDS_CONTROLLER_STATUS status;
    VDS_HEALTH health;
    short sNumberOfPorts;
}
struct VDS_DRIVE_PROP
{
    GUID id;
    ulong ullSize;
    PWSTR pwszFriendlyName;
    PWSTR pwszIdentification;
    uint ulFlags;
    VDS_DRIVE_STATUS status;
    VDS_HEALTH health;
    short sInternalBusNumber;
    short sSlotNumber;
}
struct VDS_DRIVE_PROP2
{
    GUID id;
    ulong ullSize;
    PWSTR pwszFriendlyName;
    PWSTR pwszIdentification;
    uint ulFlags;
    VDS_DRIVE_STATUS status;
    VDS_HEALTH health;
    short sInternalBusNumber;
    short sSlotNumber;
    uint ulEnclosureNumber;
    VDS_STORAGE_BUS_TYPE busType;
    uint ulSpindleSpeed;
}
struct VDS_DRIVE_EXTENT
{
    GUID id;
    GUID LunId;
    ulong ullSize;
    BOOL bUsed;
}
struct VDS_LUN_PROP
{
    GUID id;
    ulong ullSize;
    PWSTR pwszFriendlyName;
    PWSTR pwszIdentification;
    PWSTR pwszUnmaskingList;
    uint ulFlags;
    VDS_LUN_TYPE type;
    VDS_LUN_STATUS status;
    VDS_HEALTH health;
    VDS_TRANSITION_STATE TransitionState;
    short sRebuildPriority;
}
struct VDS_LUN_PLEX_PROP
{
    GUID id;
    ulong ullSize;
    VDS_LUN_PLEX_TYPE type;
    VDS_LUN_PLEX_STATUS status;
    VDS_HEALTH health;
    VDS_TRANSITION_STATE TransitionState;
    uint ulFlags;
    uint ulStripeSize;
    short sRebuildPriority;
}
struct VDS_PORT_PROP
{
    GUID id;
    PWSTR pwszFriendlyName;
    PWSTR pwszIdentification;
    VDS_PORT_STATUS status;
}
struct VDS_ISCSI_PORTAL_PROP
{
    GUID id;
    VDS_IPADDRESS address;
    VDS_ISCSI_PORTAL_STATUS status;
}
struct VDS_ISCSI_TARGET_PROP
{
    GUID id;
    PWSTR pwszIscsiName;
    PWSTR pwszFriendlyName;
    BOOL bChapEnabled;
}
struct VDS_ISCSI_PORTALGROUP_PROP
{
    GUID id;
    ushort tag;
}
alias VDS_RAID_TYPE = int;
enum : int
{
    VDS_RT_UNKNOWN = 0x00000000,
    VDS_RT_RAID0   = 0x0000000a,
    VDS_RT_RAID1   = 0x0000000b,
    VDS_RT_RAID2   = 0x0000000c,
    VDS_RT_RAID3   = 0x0000000d,
    VDS_RT_RAID4   = 0x0000000e,
    VDS_RT_RAID5   = 0x0000000f,
    VDS_RT_RAID6   = 0x00000010,
    VDS_RT_RAID01  = 0x00000011,
    VDS_RT_RAID03  = 0x00000012,
    VDS_RT_RAID05  = 0x00000013,
    VDS_RT_RAID10  = 0x00000014,
    VDS_RT_RAID15  = 0x00000015,
    VDS_RT_RAID30  = 0x00000016,
    VDS_RT_RAID50  = 0x00000017,
    VDS_RT_RAID51  = 0x00000018,
    VDS_RT_RAID53  = 0x00000019,
    VDS_RT_RAID60  = 0x0000001a,
    VDS_RT_RAID61  = 0x0000001b,
}

struct VDS_POOL_CUSTOM_ATTRIBUTES
{
    PWSTR pwszName;
    PWSTR pwszValue;
}
struct VDS_POOL_ATTRIBUTES
{
    ulong ullAttributeMask;
    VDS_RAID_TYPE raidType;
    VDS_STORAGE_BUS_TYPE busType;
    PWSTR pwszIntendedUsage;
    BOOL bSpinDown;
    BOOL bIsThinProvisioned;
    ulong ullProvisionedSpace;
    BOOL bNoSinglePointOfFailure;
    uint ulDataRedundancyMax;
    uint ulDataRedundancyMin;
    uint ulDataRedundancyDefault;
    uint ulPackageRedundancyMax;
    uint ulPackageRedundancyMin;
    uint ulPackageRedundancyDefault;
    uint ulStripeSize;
    uint ulStripeSizeMax;
    uint ulStripeSizeMin;
    uint ulDefaultStripeSize;
    uint ulNumberOfColumns;
    uint ulNumberOfColumnsMax;
    uint ulNumberOfColumnsMin;
    uint ulDefaultNumberofColumns;
    uint ulDataAvailabilityHint;
    uint ulAccessRandomnessHint;
    uint ulAccessDirectionHint;
    uint ulAccessSizeHint;
    uint ulAccessLatencyHint;
    uint ulAccessBandwidthWeightHint;
    uint ulStorageCostHint;
    uint ulStorageEfficiencyHint;
    uint ulNumOfCustomAttributes;
    VDS_POOL_CUSTOM_ATTRIBUTES* pPoolCustomAttributes;
    BOOL bReserved1;
    BOOL bReserved2;
    uint ulReserved1;
    uint ulReserved2;
    ulong ullReserved1;
    ulong ullReserved2;
}
struct VDS_STORAGE_POOL_PROP
{
    GUID id;
    VDS_STORAGE_POOL_STATUS status;
    VDS_HEALTH health;
    VDS_STORAGE_POOL_TYPE type;
    PWSTR pwszName;
    PWSTR pwszDescription;
    ulong ullTotalConsumedSpace;
    ulong ullTotalManagedSpace;
    ulong ullRemainingFreeSpace;
}
struct VDS_STORAGE_POOL_DRIVE_EXTENT
{
    GUID id;
    ulong ullSize;
    BOOL bUsed;
}
enum IID_IVdsHwProvider = GUID(0xd99bdaae, 0xb13a, 0x4178, [0x9f, 0xdb, 0xe2, 0x7f, 0x16, 0xb4, 0x60, 0x3e]);
interface IVdsHwProvider : IUnknown
{
    HRESULT QuerySubSystems(IEnumVdsObject*);
    HRESULT Reenumerate();
    HRESULT Refresh();
}
enum IID_IVdsHwProviderType = GUID(0x3e0f5166, 0x542d, 0x4fc6, [0x94, 0x7a, 0x1, 0x21, 0x74, 0x24, 0xb, 0x7e]);
interface IVdsHwProviderType : IUnknown
{
    HRESULT GetProviderType(VDS_HWPROVIDER_TYPE*);
}
enum IID_IVdsHwProviderType2 = GUID(0x8190236f, 0xc4d0, 0x4e81, [0x80, 0x11, 0xd6, 0x95, 0x12, 0xfc, 0xc9, 0x84]);
interface IVdsHwProviderType2 : IUnknown
{
    HRESULT GetProviderType2(VDS_HWPROVIDER_TYPE*);
}
enum IID_IVdsHwProviderStoragePools = GUID(0xd5b5937a, 0xf188, 0x4c79, [0xb8, 0x6c, 0x11, 0xc9, 0x20, 0xad, 0x11, 0xb8]);
interface IVdsHwProviderStoragePools : IUnknown
{
    HRESULT QueryStoragePools(uint, ulong, VDS_POOL_ATTRIBUTES*, IEnumVdsObject*);
    HRESULT CreateLunInStoragePool(VDS_LUN_TYPE, ulong, GUID, PWSTR, VDS_HINTS2*, IVdsAsync*);
    HRESULT QueryMaxLunCreateSizeInStoragePool(VDS_LUN_TYPE, GUID, VDS_HINTS2*, ulong*);
}
enum IID_IVdsSubSystem = GUID(0x6fcee2d3, 0x6d90, 0x4f91, [0x80, 0xe2, 0xa5, 0xc7, 0xca, 0xac, 0xa9, 0xd8]);
interface IVdsSubSystem : IUnknown
{
    HRESULT GetProperties(VDS_SUB_SYSTEM_PROP*);
    HRESULT GetProvider(IVdsProvider*);
    HRESULT QueryControllers(IEnumVdsObject*);
    HRESULT QueryLuns(IEnumVdsObject*);
    HRESULT QueryDrives(IEnumVdsObject*);
    HRESULT GetDrive(short, short, IVdsDrive*);
    HRESULT Reenumerate();
    HRESULT SetControllerStatus(GUID*, int, GUID*, int);
    HRESULT CreateLun(VDS_LUN_TYPE, ulong, GUID*, int, PWSTR, VDS_HINTS*, IVdsAsync*);
    HRESULT ReplaceDrive(GUID, GUID);
    HRESULT SetStatus(VDS_SUB_SYSTEM_STATUS);
    HRESULT QueryMaxLunCreateSize(VDS_LUN_TYPE, GUID*, int, VDS_HINTS*, ulong*);
}
enum IID_IVdsSubSystem2 = GUID(0xbe666735, 0x7800, 0x4a77, [0x9d, 0x9c, 0x40, 0xf8, 0x5b, 0x87, 0xe2, 0x92]);
interface IVdsSubSystem2 : IUnknown
{
    HRESULT GetProperties2(VDS_SUB_SYSTEM_PROP2*);
    HRESULT GetDrive2(short, short, uint, IVdsDrive*);
    HRESULT CreateLun2(VDS_LUN_TYPE, ulong, GUID*, int, PWSTR, VDS_HINTS2*, IVdsAsync*);
    HRESULT QueryMaxLunCreateSize2(VDS_LUN_TYPE, GUID*, int, VDS_HINTS2*, ulong*);
}
enum IID_IVdsSubSystemNaming = GUID(0xd70faa3, 0x9cd4, 0x4900, [0xaa, 0x20, 0x69, 0x81, 0xb6, 0xaa, 0xfc, 0x75]);
interface IVdsSubSystemNaming : IUnknown
{
    HRESULT SetFriendlyName(PWSTR);
}
enum IID_IVdsSubSystemIscsi = GUID(0x27346f, 0x40d0, 0x4b45, [0x8c, 0xec, 0x59, 0x6, 0xdc, 0x3, 0x80, 0xc8]);
interface IVdsSubSystemIscsi : IUnknown
{
    HRESULT QueryTargets(IEnumVdsObject*);
    HRESULT QueryPortals(IEnumVdsObject*);
    HRESULT CreateTarget(PWSTR, PWSTR, IVdsAsync*);
    HRESULT SetIpsecGroupPresharedKey(VDS_ISCSI_IPSEC_KEY*);
}
enum IID_IVdsSubSystemInterconnect = GUID(0x9e6fa560, 0xc141, 0x477b, [0x83, 0xba, 0xb, 0x6c, 0x38, 0xf7, 0xfe, 0xbf]);
interface IVdsSubSystemInterconnect : IUnknown
{
    HRESULT GetSupportedInterconnects(uint*);
}
enum IID_IVdsControllerPort = GUID(0x18691d0d, 0x4e7f, 0x43e8, [0x92, 0xe4, 0xcf, 0x44, 0xbe, 0xee, 0xd1, 0x1c]);
interface IVdsControllerPort : IUnknown
{
    HRESULT GetProperties(VDS_PORT_PROP*);
    HRESULT GetController(IVdsController*);
    HRESULT QueryAssociatedLuns(IEnumVdsObject*);
    HRESULT Reset();
    HRESULT SetStatus(VDS_PORT_STATUS);
}
enum IID_IVdsController = GUID(0xcb53d96e, 0xdffb, 0x474a, [0xa0, 0x78, 0x79, 0xd, 0x1e, 0x2b, 0xc0, 0x82]);
interface IVdsController : IUnknown
{
    HRESULT GetProperties(VDS_CONTROLLER_PROP*);
    HRESULT GetSubSystem(IVdsSubSystem*);
    HRESULT GetPortProperties(short, VDS_PORT_PROP*);
    HRESULT FlushCache();
    HRESULT InvalidateCache();
    HRESULT Reset();
    HRESULT QueryAssociatedLuns(IEnumVdsObject*);
    HRESULT SetStatus(VDS_CONTROLLER_STATUS);
}
enum IID_IVdsControllerControllerPort = GUID(0xca5d735f, 0x6bae, 0x42c0, [0xb3, 0xe, 0xf2, 0x66, 0x60, 0x45, 0xce, 0x71]);
interface IVdsControllerControllerPort : IUnknown
{
    HRESULT QueryControllerPorts(IEnumVdsObject*);
}
enum IID_IVdsDrive = GUID(0xff24efa4, 0xaade, 0x4b6b, [0x89, 0x8b, 0xea, 0xa6, 0xa2, 0x8, 0x87, 0xc7]);
interface IVdsDrive : IUnknown
{
    HRESULT GetProperties(VDS_DRIVE_PROP*);
    HRESULT GetSubSystem(IVdsSubSystem*);
    HRESULT QueryExtents(VDS_DRIVE_EXTENT**, int*);
    HRESULT SetFlags(uint);
    HRESULT ClearFlags(uint);
    HRESULT SetStatus(VDS_DRIVE_STATUS);
}
enum IID_IVdsDrive2 = GUID(0x60b5a730, 0xaddf, 0x4436, [0x8c, 0xa7, 0x57, 0x69, 0xe2, 0xd1, 0xff, 0xa4]);
interface IVdsDrive2 : IUnknown
{
    HRESULT GetProperties2(VDS_DRIVE_PROP2*);
}
enum IID_IVdsLun = GUID(0x3540a9c7, 0xe60f, 0x4111, [0xa8, 0x40, 0x8b, 0xba, 0x6c, 0x2c, 0x83, 0xd8]);
interface IVdsLun : IUnknown
{
    HRESULT GetProperties(VDS_LUN_PROP*);
    HRESULT GetSubSystem(IVdsSubSystem*);
    HRESULT GetIdentificationData(VDS_LUN_INFORMATION*);
    HRESULT QueryActiveControllers(IEnumVdsObject*);
    HRESULT Extend(ulong, GUID*, int, IVdsAsync*);
    HRESULT Shrink(ulong, IVdsAsync*);
    HRESULT QueryPlexes(IEnumVdsObject*);
    HRESULT AddPlex(GUID, IVdsAsync*);
    HRESULT RemovePlex(GUID, IVdsAsync*);
    HRESULT Recover(IVdsAsync*);
    HRESULT SetMask(PWSTR);
    HRESULT Delete();
    HRESULT AssociateControllers(GUID*, int, GUID*, int);
    HRESULT QueryHints(VDS_HINTS*);
    HRESULT ApplyHints(VDS_HINTS*);
    HRESULT SetStatus(VDS_LUN_STATUS);
    HRESULT QueryMaxLunExtendSize(GUID*, int, ulong*);
}
enum IID_IVdsLun2 = GUID(0xe5b3a735, 0x9efb, 0x499a, [0x80, 0x71, 0x43, 0x94, 0xd9, 0xee, 0x6f, 0xcb]);
interface IVdsLun2 : IUnknown
{
    HRESULT QueryHints2(VDS_HINTS2*);
    HRESULT ApplyHints2(VDS_HINTS2*);
}
enum IID_IVdsLunNaming = GUID(0x907504cb, 0x6b4e, 0x4d88, [0xa3, 0x4d, 0x17, 0xba, 0x66, 0x1f, 0xbb, 0x6]);
interface IVdsLunNaming : IUnknown
{
    HRESULT SetFriendlyName(PWSTR);
}
enum IID_IVdsLunNumber = GUID(0xd3f95e46, 0x54b3, 0x41f9, [0xb6, 0x78, 0xf, 0x18, 0x71, 0x44, 0x3a, 0x8]);
interface IVdsLunNumber : IUnknown
{
    HRESULT GetLunNumber(uint*);
}
enum IID_IVdsLunControllerPorts = GUID(0x451fe266, 0xda6d, 0x406a, [0xbb, 0x60, 0x82, 0xe5, 0x34, 0xf8, 0x5a, 0xeb]);
interface IVdsLunControllerPorts : IUnknown
{
    HRESULT AssociateControllerPorts(GUID*, int, GUID*, int);
    HRESULT QueryActiveControllerPorts(IEnumVdsObject*);
}
enum IID_IVdsLunMpio = GUID(0x7c5fbae3, 0x333a, 0x48a1, [0xa9, 0x82, 0x33, 0xc1, 0x57, 0x88, 0xcd, 0xe3]);
interface IVdsLunMpio : IUnknown
{
    HRESULT GetPathInfo(VDS_PATH_INFO**, int*);
    HRESULT GetLoadBalancePolicy(VDS_LOADBALANCE_POLICY_ENUM*, VDS_PATH_POLICY**, int*);
    HRESULT SetLoadBalancePolicy(VDS_LOADBALANCE_POLICY_ENUM, VDS_PATH_POLICY*, int);
    HRESULT GetSupportedLbPolicies(uint*);
}
enum IID_IVdsLunIscsi = GUID(0xd7c1e64, 0xb59b, 0x45ae, [0xb8, 0x6a, 0x2c, 0x2c, 0xc6, 0xa4, 0x20, 0x67]);
interface IVdsLunIscsi : IUnknown
{
    HRESULT AssociateTargets(GUID*, int);
    HRESULT QueryAssociatedTargets(IEnumVdsObject*);
}
enum IID_IVdsLunPlex = GUID(0xee1a790, 0x5d2e, 0x4abb, [0x8c, 0x99, 0xc4, 0x81, 0xe8, 0xbe, 0x21, 0x38]);
interface IVdsLunPlex : IUnknown
{
    HRESULT GetProperties(VDS_LUN_PLEX_PROP*);
    HRESULT GetLun(IVdsLun*);
    HRESULT QueryExtents(VDS_DRIVE_EXTENT**, int*);
    HRESULT QueryHints(VDS_HINTS*);
    HRESULT ApplyHints(VDS_HINTS*);
}
enum IID_IVdsIscsiPortal = GUID(0x7fa1499d, 0xec85, 0x4a8a, [0xa4, 0x7b, 0xff, 0x69, 0x20, 0x1f, 0xcd, 0x34]);
interface IVdsIscsiPortal : IUnknown
{
    HRESULT GetProperties(VDS_ISCSI_PORTAL_PROP*);
    HRESULT GetSubSystem(IVdsSubSystem*);
    HRESULT QueryAssociatedPortalGroups(IEnumVdsObject*);
    HRESULT SetStatus(VDS_ISCSI_PORTAL_STATUS);
    HRESULT SetIpsecTunnelAddress(VDS_IPADDRESS*, VDS_IPADDRESS*);
    HRESULT GetIpsecSecurity(VDS_IPADDRESS*, ulong*);
    HRESULT SetIpsecSecurity(VDS_IPADDRESS*, ulong, VDS_ISCSI_IPSEC_KEY*);
}
enum IID_IVdsIscsiTarget = GUID(0xaa8f5055, 0x83e5, 0x4bcc, [0xaa, 0x73, 0x19, 0x85, 0x1a, 0x36, 0xa8, 0x49]);
interface IVdsIscsiTarget : IUnknown
{
    HRESULT GetProperties(VDS_ISCSI_TARGET_PROP*);
    HRESULT GetSubSystem(IVdsSubSystem*);
    HRESULT QueryPortalGroups(IEnumVdsObject*);
    HRESULT QueryAssociatedLuns(IEnumVdsObject*);
    HRESULT CreatePortalGroup(IVdsAsync*);
    HRESULT Delete(IVdsAsync*);
    HRESULT SetFriendlyName(PWSTR);
    HRESULT SetSharedSecret(VDS_ISCSI_SHARED_SECRET*, PWSTR);
    HRESULT RememberInitiatorSharedSecret(PWSTR, VDS_ISCSI_SHARED_SECRET*);
    HRESULT GetConnectedInitiators(PWSTR**, int*);
}
enum IID_IVdsIscsiPortalGroup = GUID(0xfef5f89d, 0xa3dd, 0x4b36, [0xbf, 0x28, 0xe7, 0xdd, 0xe0, 0x45, 0xc5, 0x93]);
interface IVdsIscsiPortalGroup : IUnknown
{
    HRESULT GetProperties(VDS_ISCSI_PORTALGROUP_PROP*);
    HRESULT GetTarget(IVdsIscsiTarget*);
    HRESULT QueryAssociatedPortals(IEnumVdsObject*);
    HRESULT AddPortal(GUID, IVdsAsync*);
    HRESULT RemovePortal(GUID, IVdsAsync*);
    HRESULT Delete(IVdsAsync*);
}
enum IID_IVdsStoragePool = GUID(0x932ca8cf, 0xeb3, 0x4ba8, [0x96, 0x20, 0x22, 0x66, 0x5d, 0x7f, 0x84, 0x50]);
interface IVdsStoragePool : IUnknown
{
    HRESULT GetProvider(IVdsProvider*);
    HRESULT GetProperties(VDS_STORAGE_POOL_PROP*);
    HRESULT GetAttributes(VDS_POOL_ATTRIBUTES*);
    HRESULT QueryDriveExtents(VDS_STORAGE_POOL_DRIVE_EXTENT**, int*);
    HRESULT QueryAllocatedLuns(IEnumVdsObject*);
    HRESULT QueryAllocatedStoragePools(IEnumVdsObject*);
}
enum IID_IVdsMaintenance = GUID(0xdaebeef3, 0x8523, 0x47ed, [0xa2, 0xb9, 0x5, 0xce, 0xcc, 0xe2, 0xa1, 0xae]);
interface IVdsMaintenance : IUnknown
{
    HRESULT StartMaintenance(VDS_MAINTENANCE_OPERATION);
    HRESULT StopMaintenance(VDS_MAINTENANCE_OPERATION);
    HRESULT PulseMaintenance(VDS_MAINTENANCE_OPERATION, uint);
}
struct VDS_CREATE_VDISK_PARAMETERS
{
    GUID UniqueId;
    ulong MaximumSize;
    uint BlockSizeInBytes;
    uint SectorSizeInBytes;
    PWSTR pParentPath;
    PWSTR pSourcePath;
}
enum IID_IVdsVdProvider = GUID(0xb481498c, 0x8354, 0x45f9, [0x84, 0xa0, 0xb, 0xdd, 0x28, 0x32, 0xa9, 0x1f]);
interface IVdsVdProvider : IUnknown
{
    HRESULT QueryVDisks(IEnumVdsObject*);
    HRESULT CreateVDisk(VIRTUAL_STORAGE_TYPE*, PWSTR, PWSTR, CREATE_VIRTUAL_DISK_FLAG, uint, uint, VDS_CREATE_VDISK_PARAMETERS*, IVdsAsync*);
    HRESULT AddVDisk(VIRTUAL_STORAGE_TYPE*, PWSTR, IVdsVDisk*);
    HRESULT GetDiskFromVDisk(IVdsVDisk, IVdsDisk*);
    HRESULT GetVDiskFromDisk(IVdsDisk, IVdsVDisk*);
}
alias VDS_VDISK_STATE = int;
enum : int
{
    VDS_VST_UNKNOWN           = 0x00000000,
    VDS_VST_ADDED             = 0x00000001,
    VDS_VST_OPEN              = 0x00000002,
    VDS_VST_ATTACH_PENDING    = 0x00000003,
    VDS_VST_ATTACHED_NOT_OPEN = 0x00000004,
    VDS_VST_ATTACHED          = 0x00000005,
    VDS_VST_DETACH_PENDING    = 0x00000006,
    VDS_VST_COMPACTING        = 0x00000007,
    VDS_VST_MERGING           = 0x00000008,
    VDS_VST_EXPANDING         = 0x00000009,
    VDS_VST_DELETED           = 0x0000000a,
    VDS_VST_MAX               = 0x0000000b,
}

struct VDS_VDISK_PROPERTIES
{
    GUID Id;
    VDS_VDISK_STATE State;
    VIRTUAL_STORAGE_TYPE VirtualDeviceType;
    ulong VirtualSize;
    ulong PhysicalSize;
    PWSTR pPath;
    PWSTR pDeviceName;
    DEPENDENT_DISK_FLAG DiskFlag;
    BOOL bIsChild;
    PWSTR pParentPath;
}
enum IID_IVdsVDisk = GUID(0x1e062b84, 0xe5e6, 0x4b4b, [0x8a, 0x25, 0x67, 0xb8, 0x1e, 0x8f, 0x13, 0xe8]);
interface IVdsVDisk : IUnknown
{
    HRESULT Open(VIRTUAL_DISK_ACCESS_MASK, OPEN_VIRTUAL_DISK_FLAG, uint, IVdsOpenVDisk*);
    HRESULT GetProperties(VDS_VDISK_PROPERTIES*);
    HRESULT GetHostVolume(IVdsVolume*);
    HRESULT GetDeviceName(PWSTR*);
}
enum IID_IVdsOpenVDisk = GUID(0x75c8f324, 0xf715, 0x4fe3, [0xa2, 0x8e, 0xf9, 0x1, 0x1b, 0x61, 0xa4, 0xa1]);
interface IVdsOpenVDisk : IUnknown
{
    HRESULT Attach(PWSTR, ATTACH_VIRTUAL_DISK_FLAG, uint, uint, IVdsAsync*);
    HRESULT Detach(DETACH_VIRTUAL_DISK_FLAG, uint);
    HRESULT DetachAndDelete(DETACH_VIRTUAL_DISK_FLAG, uint);
    HRESULT Compact(COMPACT_VIRTUAL_DISK_FLAG, uint, IVdsAsync*);
    HRESULT Merge(MERGE_VIRTUAL_DISK_FLAG, uint, IVdsAsync*);
    HRESULT Expand(EXPAND_VIRTUAL_DISK_FLAG, ulong, IVdsAsync*);
}
alias VDS_SERVICE_FLAG = int;
enum : int
{
    VDS_SVF_SUPPORT_DYNAMIC            = 0x00000001,
    VDS_SVF_SUPPORT_FAULT_TOLERANT     = 0x00000002,
    VDS_SVF_SUPPORT_GPT                = 0x00000004,
    VDS_SVF_SUPPORT_DYNAMIC_1394       = 0x00000008,
    VDS_SVF_CLUSTER_SERVICE_CONFIGURED = 0x00000010,
    VDS_SVF_AUTO_MOUNT_OFF             = 0x00000020,
    VDS_SVF_OS_UNINSTALL_VALID         = 0x00000040,
    VDS_SVF_EFI                        = 0x00000080,
    VDS_SVF_SUPPORT_MIRROR             = 0x00000100,
    VDS_SVF_SUPPORT_RAID5              = 0x00000200,
    VDS_SVF_SUPPORT_REFS               = 0x00000400,
}

struct VDS_SERVICE_PROP
{
    PWSTR pwszVersion;
    uint ulFlags;
}
alias VDS_SAN_POLICY = int;
enum : int
{
    VDS_SP_UNKNOWN          = 0x00000000,
    VDS_SP_ONLINE           = 0x00000001,
    VDS_SP_OFFLINE_SHARED   = 0x00000002,
    VDS_SP_OFFLINE          = 0x00000003,
    VDS_SP_OFFLINE_INTERNAL = 0x00000004,
    VDS_SP_MAX              = 0x00000005,
}

struct VDS_REPARSE_POINT_PROP
{
    GUID SourceVolumeId;
    PWSTR pwszPath;
}
alias VDS_DRIVE_LETTER_FLAG = int;
enum : int
{
    VDS_DLF_NON_PERSISTENT = 0x00000001,
}

struct VDS_DRIVE_LETTER_PROP
{
    wchar wcLetter;
    GUID volumeId;
    uint ulFlags;
    BOOL bUsed;
}
alias VDS_FILE_SYSTEM_FLAG = int;
enum : int
{
    VDS_FSF_SUPPORT_FORMAT          = 0x00000001,
    VDS_FSF_SUPPORT_QUICK_FORMAT    = 0x00000002,
    VDS_FSF_SUPPORT_COMPRESS        = 0x00000004,
    VDS_FSF_SUPPORT_SPECIFY_LABEL   = 0x00000008,
    VDS_FSF_SUPPORT_MOUNT_POINT     = 0x00000010,
    VDS_FSF_SUPPORT_REMOVABLE_MEDIA = 0x00000020,
    VDS_FSF_SUPPORT_EXTEND          = 0x00000040,
    VDS_FSF_ALLOCATION_UNIT_512     = 0x00010000,
    VDS_FSF_ALLOCATION_UNIT_1K      = 0x00020000,
    VDS_FSF_ALLOCATION_UNIT_2K      = 0x00040000,
    VDS_FSF_ALLOCATION_UNIT_4K      = 0x00080000,
    VDS_FSF_ALLOCATION_UNIT_8K      = 0x00100000,
    VDS_FSF_ALLOCATION_UNIT_16K     = 0x00200000,
    VDS_FSF_ALLOCATION_UNIT_32K     = 0x00400000,
    VDS_FSF_ALLOCATION_UNIT_64K     = 0x00800000,
    VDS_FSF_ALLOCATION_UNIT_128K    = 0x01000000,
    VDS_FSF_ALLOCATION_UNIT_256K    = 0x02000000,
}

struct VDS_FILE_SYSTEM_TYPE_PROP
{
    VDS_FILE_SYSTEM_TYPE type;
    wchar[8] wszName;
    uint ulFlags;
    uint ulCompressionFlags;
    uint ulMaxLableLength;
    PWSTR pwszIllegalLabelCharSet;
}
alias VDS_FILE_SYSTEM_FORMAT_SUPPORT_FLAG = int;
enum : int
{
    VDS_FSS_DEFAULT           = 0x00000001,
    VDS_FSS_PREVIOUS_REVISION = 0x00000002,
    VDS_FSS_RECOMMENDED       = 0x00000004,
}

struct VDS_FILE_SYSTEM_FORMAT_SUPPORT_PROP
{
    uint ulFlags;
    ushort usRevision;
    uint ulDefaultUnitAllocationSize;
    uint[32] rgulAllowedUnitAllocationSizes;
    wchar[32] wszName;
}
alias VDS_FILE_SYSTEM_PROP_FLAG = int;
enum : int
{
    VDS_FPF_COMPRESSED = 0x00000001,
}

alias VDS_FORMAT_OPTION_FLAGS = int;
enum : int
{
    VDS_FSOF_NONE               = 0x00000000,
    VDS_FSOF_FORCE              = 0x00000001,
    VDS_FSOF_QUICK              = 0x00000002,
    VDS_FSOF_COMPRESSION        = 0x00000004,
    VDS_FSOF_DUPLICATE_METADATA = 0x00000008,
}

struct VDS_FILE_SYSTEM_PROP
{
    VDS_FILE_SYSTEM_TYPE type;
    GUID volumeId;
    uint ulFlags;
    ulong ullTotalAllocationUnits;
    ulong ullAvailableAllocationUnits;
    uint ulAllocationUnitSize;
    PWSTR pwszLabel;
}
alias VDS_QUERY_PROVIDER_FLAG = int;
enum : int
{
    VDS_QUERY_SOFTWARE_PROVIDERS    = 0x00000001,
    VDS_QUERY_HARDWARE_PROVIDERS    = 0x00000002,
    VDS_QUERY_VIRTUALDISK_PROVIDERS = 0x00000004,
}

enum IID_IVdsServiceLoader = GUID(0xe0393303, 0x90d4, 0x4a97, [0xab, 0x71, 0xe9, 0xb6, 0x71, 0xee, 0x27, 0x29]);
interface IVdsServiceLoader : IUnknown
{
    HRESULT LoadService(PWSTR, IVdsService*);
}
enum IID_IVdsService = GUID(0x818a8ef, 0x9ba9, 0x40d8, [0xa6, 0xf9, 0xe2, 0x28, 0x33, 0xcc, 0x77, 0x1e]);
interface IVdsService : IUnknown
{
    HRESULT IsServiceReady();
    HRESULT WaitForServiceReady();
    HRESULT GetProperties(VDS_SERVICE_PROP*);
    HRESULT QueryProviders(uint, IEnumVdsObject*);
    HRESULT QueryMaskedDisks(IEnumVdsObject*);
    HRESULT QueryUnallocatedDisks(IEnumVdsObject*);
    HRESULT GetObject(GUID, VDS_OBJECT_TYPE, IUnknown*);
    HRESULT QueryDriveLetters(wchar, uint, VDS_DRIVE_LETTER_PROP*);
    HRESULT QueryFileSystemTypes(VDS_FILE_SYSTEM_TYPE_PROP**, int*);
    HRESULT Reenumerate();
    HRESULT Refresh();
    HRESULT CleanupObsoleteMountPoints();
    HRESULT Advise(IVdsAdviseSink, uint*);
    HRESULT Unadvise(uint);
    HRESULT Reboot();
    HRESULT SetFlags(uint);
    HRESULT ClearFlags(uint);
}
enum IID_IVdsServiceUninstallDisk = GUID(0xb6b22da8, 0xf903, 0x4be7, [0xb4, 0x92, 0xc0, 0x9d, 0x87, 0x5a, 0xc9, 0xda]);
interface IVdsServiceUninstallDisk : IUnknown
{
    HRESULT GetDiskIdFromLunInfo(VDS_LUN_INFORMATION*, GUID*);
    HRESULT UninstallDisks(GUID*, uint, BOOLEAN, ubyte*, HRESULT*);
}
enum IID_IVdsServiceHba = GUID(0xac13689, 0x3134, 0x47c6, [0xa1, 0x7c, 0x46, 0x69, 0x21, 0x68, 0x1, 0xbe]);
interface IVdsServiceHba : IUnknown
{
    HRESULT QueryHbaPorts(IEnumVdsObject*);
}
enum IID_IVdsServiceIscsi = GUID(0x14fbe036, 0x3ed7, 0x4e10, [0x90, 0xe9, 0xa5, 0xff, 0x99, 0x1a, 0xff, 0x1]);
interface IVdsServiceIscsi : IUnknown
{
    HRESULT GetInitiatorName(PWSTR*);
    HRESULT QueryInitiatorAdapters(IEnumVdsObject*);
    HRESULT SetIpsecGroupPresharedKey(VDS_ISCSI_IPSEC_KEY*);
    HRESULT SetAllIpsecTunnelAddresses(VDS_IPADDRESS*, VDS_IPADDRESS*);
    HRESULT SetAllIpsecSecurity(GUID, ulong, VDS_ISCSI_IPSEC_KEY*);
    HRESULT SetInitiatorSharedSecret(VDS_ISCSI_SHARED_SECRET*, GUID);
    HRESULT RememberTargetSharedSecret(GUID, VDS_ISCSI_SHARED_SECRET*);
}
enum IID_IVdsServiceInitialization = GUID(0x4afc3636, 0xdb01, 0x4052, [0x80, 0xc3, 0x3, 0xbb, 0xcb, 0x8d, 0x3c, 0x69]);
interface IVdsServiceInitialization : IUnknown
{
    HRESULT Initialize(PWSTR);
}
enum IID_IVdsHbaPort = GUID(0x2abd757f, 0x2851, 0x4997, [0x9a, 0x13, 0x47, 0xd2, 0xa8, 0x85, 0xd6, 0xca]);
interface IVdsHbaPort : IUnknown
{
    HRESULT GetProperties(VDS_HBAPORT_PROP*);
    HRESULT SetAllPathStatuses(VDS_PATH_STATUS);
}
enum IID_IVdsIscsiInitiatorAdapter = GUID(0xb07fedd4, 0x1682, 0x4440, [0x91, 0x89, 0xa3, 0x9b, 0x55, 0x19, 0x4d, 0xc5]);
interface IVdsIscsiInitiatorAdapter : IUnknown
{
    HRESULT GetProperties(VDS_ISCSI_INITIATOR_ADAPTER_PROP*);
    HRESULT QueryInitiatorPortals(IEnumVdsObject*);
    HRESULT LoginToTarget(VDS_ISCSI_LOGIN_TYPE, GUID, GUID, GUID, uint, BOOL, BOOL, VDS_ISCSI_AUTH_TYPE, IVdsAsync*);
    HRESULT LogoutFromTarget(GUID, IVdsAsync*);
}
enum IID_IVdsIscsiInitiatorPortal = GUID(0x38a0a9ab, 0x7cc8, 0x4693, [0xac, 0x7, 0x1f, 0x28, 0xbd, 0x3, 0xc3, 0xda]);
interface IVdsIscsiInitiatorPortal : IUnknown
{
    HRESULT GetProperties(VDS_ISCSI_INITIATOR_PORTAL_PROP*);
    HRESULT GetInitiatorAdapter(IVdsIscsiInitiatorAdapter*);
    HRESULT SetIpsecTunnelAddress(VDS_IPADDRESS*, VDS_IPADDRESS*);
    HRESULT GetIpsecSecurity(GUID, ulong*);
    HRESULT SetIpsecSecurity(GUID, ulong, VDS_ISCSI_IPSEC_KEY*);
}
enum IID_IVdsDiskPartitionMF = GUID(0x538684e0, 0xba3d, 0x4bc0, [0xac, 0xa9, 0x16, 0x4a, 0xff, 0x85, 0xc2, 0xa9]);
interface IVdsDiskPartitionMF : IUnknown
{
    HRESULT GetPartitionFileSystemProperties(ulong, VDS_FILE_SYSTEM_PROP*);
    HRESULT GetPartitionFileSystemTypeName(ulong, PWSTR*);
    HRESULT QueryPartitionFileSystemFormatSupport(ulong, VDS_FILE_SYSTEM_FORMAT_SUPPORT_PROP**, int*);
    HRESULT FormatPartitionEx(ulong, PWSTR, ushort, uint, PWSTR, BOOL, BOOL, BOOL, IVdsAsync*);
}
enum IID_IVdsVolumeMF = GUID(0xee2d5ded, 0x6236, 0x4169, [0x93, 0x1d, 0xb9, 0x77, 0x8c, 0xe0, 0x3d, 0xc6]);
interface IVdsVolumeMF : IUnknown
{
    HRESULT GetFileSystemProperties(VDS_FILE_SYSTEM_PROP*);
    HRESULT Format(VDS_FILE_SYSTEM_TYPE, PWSTR, uint, BOOL, BOOL, BOOL, IVdsAsync*);
    HRESULT AddAccessPath(PWSTR);
    HRESULT QueryAccessPaths(PWSTR**, int*);
    HRESULT QueryReparsePoints(VDS_REPARSE_POINT_PROP**, int*);
    HRESULT DeleteAccessPath(PWSTR, BOOL);
    HRESULT Mount();
    HRESULT Dismount(BOOL, BOOL);
    HRESULT SetFileSystemFlags(uint);
    HRESULT ClearFileSystemFlags(uint);
}
enum IID_IVdsVolumeMF2 = GUID(0x4dbcee9a, 0x6343, 0x4651, [0xb8, 0x5f, 0x5e, 0x75, 0xd7, 0x4d, 0x98, 0x3c]);
interface IVdsVolumeMF2 : IUnknown
{
    HRESULT GetFileSystemTypeName(PWSTR*);
    HRESULT QueryFileSystemFormatSupport(VDS_FILE_SYSTEM_FORMAT_SUPPORT_PROP**, int*);
    HRESULT FormatEx(PWSTR, ushort, uint, PWSTR, BOOL, BOOL, BOOL, IVdsAsync*);
}
enum IID_IVdsVolumeShrink = GUID(0xd68168c9, 0x82a2, 0x4f85, [0xb6, 0xe9, 0x74, 0x70, 0x7c, 0x49, 0xa5, 0x8f]);
interface IVdsVolumeShrink : IUnknown
{
    HRESULT QueryMaxReclaimableBytes(ulong*);
    HRESULT Shrink(ulong, ulong, IVdsAsync*);
}
enum IID_IVdsSubSystemImportTarget = GUID(0x83bfb87f, 0x43fb, 0x4903, [0xba, 0xa6, 0x12, 0x7f, 0x1, 0x2, 0x9e, 0xec]);
interface IVdsSubSystemImportTarget : IUnknown
{
    HRESULT GetImportTarget(PWSTR*);
    HRESULT SetImportTarget(PWSTR);
}
enum IID_IVdsIscsiPortalLocal = GUID(0xad837c28, 0x52c1, 0x421d, [0xbf, 0x4, 0xfa, 0xe7, 0xda, 0x66, 0x53, 0x96]);
interface IVdsIscsiPortalLocal : IUnknown
{
    HRESULT SetIpsecSecurityLocal(ulong, VDS_ISCSI_IPSEC_KEY*);
}
enum IID_IVdsServiceSAN = GUID(0xfc5d23e8, 0xa88b, 0x41a5, [0x8d, 0xe0, 0x2d, 0x2f, 0x73, 0xc5, 0xa6, 0x30]);
interface IVdsServiceSAN : IUnknown
{
    HRESULT GetSANPolicy(VDS_SAN_POLICY*);
    HRESULT SetSANPolicy(VDS_SAN_POLICY);
}
enum IID_IVdsVolumeMF3 = GUID(0x6788faf9, 0x214e, 0x4b85, [0xba, 0x59, 0x26, 0x69, 0x53, 0x61, 0x6e, 0x9]);
interface IVdsVolumeMF3 : IUnknown
{
    HRESULT QueryVolumeGuidPathnames(PWSTR**, uint*);
    HRESULT FormatEx2(PWSTR, ushort, uint, PWSTR, uint, IVdsAsync*);
    HRESULT OfflineVolume();
}
enum IID_IVdsDiskPartitionMF2 = GUID(0x9cbe50ca, 0xf2d2, 0x4bf4, [0xac, 0xe1, 0x96, 0x89, 0x6b, 0x72, 0x96, 0x25]);
interface IVdsDiskPartitionMF2 : IUnknown
{
    HRESULT FormatPartitionEx2(ulong, PWSTR, ushort, uint, PWSTR, uint, IVdsAsync*);
}
enum IID_IVdsServiceSw = GUID(0x15fc031c, 0x652, 0x4306, [0xb2, 0xc3, 0xf5, 0x58, 0xb8, 0xf8, 0x37, 0xe2]);
interface IVdsServiceSw : IUnknown
{
    HRESULT GetDiskObject(const(wchar)*, IUnknown*);
}
