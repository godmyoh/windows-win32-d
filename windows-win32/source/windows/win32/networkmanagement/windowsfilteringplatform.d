module windows.win32.networkmanagement.windowsfilteringplatform;

import windows.win32.guid : GUID;
import windows.win32.foundation : BOOL, FILETIME, HANDLE, PSID, PSTR, PWSTR;
import windows.win32.security_ : ACL, PSECURITY_DESCRIPTOR, SID, SID_AND_ATTRIBUTES;
import windows.win32.system.rpc : SEC_WINNT_AUTH_IDENTITY_W;

version (Windows):
extern (Windows):

alias IPSEC_SA_BUNDLE_FLAGS = uint;
enum : uint
{
    IPSEC_SA_BUNDLE_FLAG_ND_SECURE                          = 0x00000001,
    IPSEC_SA_BUNDLE_FLAG_ND_BOUNDARY                        = 0x00000002,
    IPSEC_SA_BUNDLE_FLAG_ND_PEER_NAT_BOUNDARY               = 0x00000004,
    IPSEC_SA_BUNDLE_FLAG_GUARANTEE_ENCRYPTION               = 0x00000008,
    IPSEC_SA_BUNDLE_FLAG_ALLOW_NULL_TARGET_NAME_MATCH       = 0x00000200,
    IPSEC_SA_BUNDLE_FLAG_CLEAR_DF_ON_TUNNEL                 = 0x00000400,
    IPSEC_SA_BUNDLE_FLAG_ASSUME_UDP_CONTEXT_OUTBOUND        = 0x00000800,
    IPSEC_SA_BUNDLE_FLAG_ND_PEER_BOUNDARY                   = 0x00001000,
    IPSEC_SA_BUNDLE_FLAG_SUPPRESS_DUPLICATE_DELETION        = 0x00002000,
    IPSEC_SA_BUNDLE_FLAG_PEER_SUPPORTS_GUARANTEE_ENCRYPTION = 0x00004000,
}

alias IPSEC_POLICY_FLAG = uint;
enum : uint
{
    IPSEC_POLICY_FLAG_ND_SECURE                               = 0x00000002,
    IPSEC_POLICY_FLAG_ND_BOUNDARY                             = 0x00000004,
    IPSEC_POLICY_FLAG_NAT_ENCAP_ALLOW_PEER_BEHIND_NAT         = 0x00000010,
    IPSEC_POLICY_FLAG_NAT_ENCAP_ALLOW_GENERAL_NAT_TRAVERSAL   = 0x00000020,
    IPSEC_POLICY_FLAG_DONT_NEGOTIATE_SECOND_LIFETIME          = 0x00000040,
    IPSEC_POLICY_FLAG_DONT_NEGOTIATE_BYTE_LIFETIME            = 0x00000080,
    IPSEC_POLICY_FLAG_CLEAR_DF_ON_TUNNEL                      = 0x00000008,
    IPSEC_POLICY_FLAG_ENABLE_V6_IN_V4_TUNNELING               = 0x00000100,
    IPSEC_POLICY_FLAG_ENABLE_SERVER_ADDR_ASSIGNMENT           = 0x00000200,
    IPSEC_POLICY_FLAG_TUNNEL_ALLOW_OUTBOUND_CLEAR_CONNECTION  = 0x00000400,
    IPSEC_POLICY_FLAG_TUNNEL_BYPASS_ALREADY_SECURE_CONNECTION = 0x00000800,
    IPSEC_POLICY_FLAG_TUNNEL_BYPASS_ICMPV6                    = 0x00001000,
    IPSEC_POLICY_FLAG_KEY_MANAGER_ALLOW_DICTATE_KEY           = 0x00002000,
}

alias IKEEXT_CERT_AUTH = uint;
enum : uint
{
    IKEEXT_CERT_AUTH_FLAG_SSL_ONE_WAY            = 0x00000001,
    IKEEXT_CERT_AUTH_ENABLE_CRL_CHECK_STRONG     = 0x00000004,
    IKEEXT_CERT_AUTH_DISABLE_SSL_CERT_VALIDATION = 0x00000008,
    IKEEXT_CERT_AUTH_ALLOW_HTTP_CERT_LOOKUP      = 0x00000010,
    IKEEXT_CERT_AUTH_URL_CONTAINS_BUNDLE         = 0x00000020,
}

alias IKEEXT_PRESHARED_KEY_AUTHENTICATION_FLAGS = uint;
enum : uint
{
    IKEEXT_PSK_FLAG_LOCAL_AUTH_ONLY  = 0x00000001,
    IKEEXT_PSK_FLAG_REMOTE_AUTH_ONLY = 0x00000002,
}

alias IKEEXT_POLICY_FLAG = uint;
enum : uint
{
    IKEEXT_POLICY_FLAG_DISABLE_DIAGNOSTICS          = 0x00000001,
    IKEEXT_POLICY_FLAG_NO_MACHINE_LUID_VERIFY       = 0x00000002,
    IKEEXT_POLICY_FLAG_NO_IMPERSONATION_LUID_VERIFY = 0x00000004,
    IKEEXT_POLICY_FLAG_ENABLE_OPTIONAL_DH           = 0x00000008,
}

alias FWPM_SUBSCRIPTION_FLAGS = uint;
enum : uint
{
    FWPM_SUBSCRIPTION_FLAG_NOTIFY_ON_ADD    = 0x00000001,
    FWPM_SUBSCRIPTION_FLAG_NOTIFY_ON_DELETE = 0x00000002,
}

alias IKEEXT_CERT_FLAGS = uint;
enum : uint
{
    IKEEXT_CERT_FLAG_ENABLE_ACCOUNT_MAPPING          = 0x00000001,
    IKEEXT_CERT_FLAG_DISABLE_REQUEST_PAYLOAD         = 0x00000002,
    IKEEXT_CERT_FLAG_USE_NAP_CERTIFICATE             = 0x00000004,
    IKEEXT_CERT_FLAG_INTERMEDIATE_CA                 = 0x00000008,
    IKEEXT_CERT_FLAG_IGNORE_INIT_CERT_MAP_FAILURE    = 0x00000010,
    IKEEXT_CERT_FLAG_PREFER_NAP_CERTIFICATE_OUTBOUND = 0x00000020,
    IKEEXT_CERT_FLAG_SELECT_NAP_CERTIFICATE          = 0x00000040,
    IKEEXT_CERT_FLAG_VERIFY_NAP_CERTIFICATE          = 0x00000080,
    IKEEXT_CERT_FLAG_FOLLOW_RENEWAL_CERTIFICATE      = 0x00000100,
}

alias IPSEC_DOSP_FLAGS = uint;
enum : uint
{
    IPSEC_DOSP_FLAG_ENABLE_IKEV1          = 0x00000001,
    IPSEC_DOSP_FLAG_ENABLE_IKEV2          = 0x00000002,
    IPSEC_DOSP_FLAG_DISABLE_AUTHIP        = 0x00000004,
    IPSEC_DOSP_FLAG_DISABLE_DEFAULT_BLOCK = 0x00000008,
    IPSEC_DOSP_FLAG_FILTER_BLOCK          = 0x00000010,
    IPSEC_DOSP_FLAG_FILTER_EXEMPT         = 0x00000020,
}

alias IKEEXT_KERBEROS_AUTHENTICATION_FLAGS = uint;
enum : uint
{
    IKEEXT_KERB_AUTH_DISABLE_INITIATOR_TOKEN_GENERATION = 0x00000001,
    IKEEXT_KERB_AUTH_DONT_ACCEPT_EXPLICIT_CREDENTIALS   = 0x00000002,
}

alias IKEEXT_RESERVED_AUTHENTICATION_FLAGS = uint;
enum : uint
{
    IKEEXT_RESERVED_AUTH_DISABLE_INITIATOR_TOKEN_GENERATION = 0x00000001,
}

alias IKEEXT_EAP_AUTHENTICATION_FLAGS = uint;
enum : uint
{
    IKEEXT_EAP_FLAG_LOCAL_AUTH_ONLY  = 0x00000001,
    IKEEXT_EAP_FLAG_REMOTE_AUTH_ONLY = 0x00000002,
}

alias FWPM_FILTER_FLAGS = uint;
enum : uint
{
    FWPM_FILTER_FLAG_NONE                           = 0x00000000,
    FWPM_FILTER_FLAG_PERSISTENT                     = 0x00000001,
    FWPM_FILTER_FLAG_BOOTTIME                       = 0x00000002,
    FWPM_FILTER_FLAG_HAS_PROVIDER_CONTEXT           = 0x00000004,
    FWPM_FILTER_FLAG_CLEAR_ACTION_RIGHT             = 0x00000008,
    FWPM_FILTER_FLAG_PERMIT_IF_CALLOUT_UNREGISTERED = 0x00000010,
    FWPM_FILTER_FLAG_DISABLED                       = 0x00000020,
    FWPM_FILTER_FLAG_INDEXED                        = 0x00000040,
}

void FwpmFreeMemory0(void**);
uint FwpmEngineOpen0(const(wchar)*, uint, SEC_WINNT_AUTH_IDENTITY_W*, const(FWPM_SESSION0)*, HANDLE*);
uint FwpmEngineClose0(HANDLE);
uint FwpmEngineGetOption0(HANDLE, FWPM_ENGINE_OPTION, FWP_VALUE0**);
uint FwpmEngineSetOption0(HANDLE, FWPM_ENGINE_OPTION, const(FWP_VALUE0)*);
uint FwpmEngineGetSecurityInfo0(HANDLE, uint, PSID*, PSID*, ACL**, ACL**, PSECURITY_DESCRIPTOR*);
uint FwpmEngineSetSecurityInfo0(HANDLE, uint, const(SID)*, const(SID)*, const(ACL)*, const(ACL)*);
uint FwpmSessionCreateEnumHandle0(HANDLE, const(FWPM_SESSION_ENUM_TEMPLATE0)*, HANDLE*);
uint FwpmSessionEnum0(HANDLE, HANDLE, uint, FWPM_SESSION0***, uint*);
uint FwpmSessionDestroyEnumHandle0(HANDLE, HANDLE);
uint FwpmTransactionBegin0(HANDLE, uint);
uint FwpmTransactionCommit0(HANDLE);
uint FwpmTransactionAbort0(HANDLE);
uint FwpmProviderAdd0(HANDLE, const(FWPM_PROVIDER0)*, PSECURITY_DESCRIPTOR);
uint FwpmProviderDeleteByKey0(HANDLE, const(GUID)*);
uint FwpmProviderGetByKey0(HANDLE, const(GUID)*, FWPM_PROVIDER0**);
uint FwpmProviderCreateEnumHandle0(HANDLE, const(FWPM_PROVIDER_ENUM_TEMPLATE0)*, HANDLE*);
uint FwpmProviderEnum0(HANDLE, HANDLE, uint, FWPM_PROVIDER0***, uint*);
uint FwpmProviderDestroyEnumHandle0(HANDLE, HANDLE);
uint FwpmProviderGetSecurityInfoByKey0(HANDLE, const(GUID)*, uint, PSID*, PSID*, ACL**, ACL**, PSECURITY_DESCRIPTOR*);
uint FwpmProviderSetSecurityInfoByKey0(HANDLE, const(GUID)*, uint, const(SID)*, const(SID)*, const(ACL)*, const(ACL)*);
uint FwpmProviderSubscribeChanges0(HANDLE, const(FWPM_PROVIDER_SUBSCRIPTION0)*, FWPM_PROVIDER_CHANGE_CALLBACK0, void*, HANDLE*);
uint FwpmProviderUnsubscribeChanges0(HANDLE, HANDLE);
uint FwpmProviderSubscriptionsGet0(HANDLE, FWPM_PROVIDER_SUBSCRIPTION0***, uint*);
uint FwpmProviderContextAdd0(HANDLE, const(FWPM_PROVIDER_CONTEXT0)*, PSECURITY_DESCRIPTOR, ulong*);
uint FwpmProviderContextAdd1(HANDLE, const(FWPM_PROVIDER_CONTEXT1)*, PSECURITY_DESCRIPTOR, ulong*);
uint FwpmProviderContextAdd2(HANDLE, const(FWPM_PROVIDER_CONTEXT2)*, PSECURITY_DESCRIPTOR, ulong*);
uint FwpmProviderContextAdd3(HANDLE, const(FWPM_PROVIDER_CONTEXT3)*, PSECURITY_DESCRIPTOR, ulong*);
uint FwpmProviderContextDeleteById0(HANDLE, ulong);
uint FwpmProviderContextDeleteByKey0(HANDLE, const(GUID)*);
uint FwpmProviderContextGetById0(HANDLE, ulong, FWPM_PROVIDER_CONTEXT0**);
uint FwpmProviderContextGetById1(HANDLE, ulong, FWPM_PROVIDER_CONTEXT1**);
uint FwpmProviderContextGetById2(HANDLE, ulong, FWPM_PROVIDER_CONTEXT2**);
uint FwpmProviderContextGetById3(HANDLE, ulong, FWPM_PROVIDER_CONTEXT3**);
uint FwpmProviderContextGetByKey0(HANDLE, const(GUID)*, FWPM_PROVIDER_CONTEXT0**);
uint FwpmProviderContextGetByKey1(HANDLE, const(GUID)*, FWPM_PROVIDER_CONTEXT1**);
uint FwpmProviderContextGetByKey2(HANDLE, const(GUID)*, FWPM_PROVIDER_CONTEXT2**);
uint FwpmProviderContextGetByKey3(HANDLE, const(GUID)*, FWPM_PROVIDER_CONTEXT3**);
uint FwpmProviderContextCreateEnumHandle0(HANDLE, const(FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0)*, HANDLE*);
uint FwpmProviderContextEnum0(HANDLE, HANDLE, uint, FWPM_PROVIDER_CONTEXT0***, uint*);
uint FwpmProviderContextEnum1(HANDLE, HANDLE, uint, FWPM_PROVIDER_CONTEXT1***, uint*);
uint FwpmProviderContextEnum2(HANDLE, HANDLE, uint, FWPM_PROVIDER_CONTEXT2***, uint*);
uint FwpmProviderContextEnum3(HANDLE, HANDLE, uint, FWPM_PROVIDER_CONTEXT3***, uint*);
uint FwpmProviderContextDestroyEnumHandle0(HANDLE, HANDLE);
uint FwpmProviderContextGetSecurityInfoByKey0(HANDLE, const(GUID)*, uint, PSID*, PSID*, ACL**, ACL**, PSECURITY_DESCRIPTOR*);
uint FwpmProviderContextSetSecurityInfoByKey0(HANDLE, const(GUID)*, uint, const(SID)*, const(SID)*, const(ACL)*, const(ACL)*);
uint FwpmProviderContextSubscribeChanges0(HANDLE, const(FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0)*, FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0, void*, HANDLE*);
uint FwpmProviderContextUnsubscribeChanges0(HANDLE, HANDLE);
uint FwpmProviderContextSubscriptionsGet0(HANDLE, FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0***, uint*);
uint FwpmSubLayerAdd0(HANDLE, const(FWPM_SUBLAYER0)*, PSECURITY_DESCRIPTOR);
uint FwpmSubLayerDeleteByKey0(HANDLE, const(GUID)*);
uint FwpmSubLayerGetByKey0(HANDLE, const(GUID)*, FWPM_SUBLAYER0**);
uint FwpmSubLayerCreateEnumHandle0(HANDLE, const(FWPM_SUBLAYER_ENUM_TEMPLATE0)*, HANDLE*);
uint FwpmSubLayerEnum0(HANDLE, HANDLE, uint, FWPM_SUBLAYER0***, uint*);
uint FwpmSubLayerDestroyEnumHandle0(HANDLE, HANDLE);
uint FwpmSubLayerGetSecurityInfoByKey0(HANDLE, const(GUID)*, uint, PSID*, PSID*, ACL**, ACL**, PSECURITY_DESCRIPTOR*);
uint FwpmSubLayerSetSecurityInfoByKey0(HANDLE, const(GUID)*, uint, const(SID)*, const(SID)*, const(ACL)*, const(ACL)*);
uint FwpmSubLayerSubscribeChanges0(HANDLE, const(FWPM_SUBLAYER_SUBSCRIPTION0)*, FWPM_SUBLAYER_CHANGE_CALLBACK0, void*, HANDLE*);
uint FwpmSubLayerUnsubscribeChanges0(HANDLE, HANDLE);
uint FwpmSubLayerSubscriptionsGet0(HANDLE, FWPM_SUBLAYER_SUBSCRIPTION0***, uint*);
uint FwpmLayerGetById0(HANDLE, ushort, FWPM_LAYER0**);
uint FwpmLayerGetByKey0(HANDLE, const(GUID)*, FWPM_LAYER0**);
uint FwpmLayerCreateEnumHandle0(HANDLE, const(FWPM_LAYER_ENUM_TEMPLATE0)*, HANDLE*);
uint FwpmLayerEnum0(HANDLE, HANDLE, uint, FWPM_LAYER0***, uint*);
uint FwpmLayerDestroyEnumHandle0(HANDLE, HANDLE);
uint FwpmLayerGetSecurityInfoByKey0(HANDLE, const(GUID)*, uint, PSID*, PSID*, ACL**, ACL**, PSECURITY_DESCRIPTOR*);
uint FwpmLayerSetSecurityInfoByKey0(HANDLE, const(GUID)*, uint, const(SID)*, const(SID)*, const(ACL)*, const(ACL)*);
uint FwpmCalloutAdd0(HANDLE, const(FWPM_CALLOUT0)*, PSECURITY_DESCRIPTOR, uint*);
uint FwpmCalloutDeleteById0(HANDLE, uint);
uint FwpmCalloutDeleteByKey0(HANDLE, const(GUID)*);
uint FwpmCalloutGetById0(HANDLE, uint, FWPM_CALLOUT0**);
uint FwpmCalloutGetByKey0(HANDLE, const(GUID)*, FWPM_CALLOUT0**);
uint FwpmCalloutCreateEnumHandle0(HANDLE, const(FWPM_CALLOUT_ENUM_TEMPLATE0)*, HANDLE*);
uint FwpmCalloutEnum0(HANDLE, HANDLE, uint, FWPM_CALLOUT0***, uint*);
uint FwpmCalloutDestroyEnumHandle0(HANDLE, HANDLE);
uint FwpmCalloutGetSecurityInfoByKey0(HANDLE, const(GUID)*, uint, PSID*, PSID*, ACL**, ACL**, PSECURITY_DESCRIPTOR*);
uint FwpmCalloutSetSecurityInfoByKey0(HANDLE, const(GUID)*, uint, const(SID)*, const(SID)*, const(ACL)*, const(ACL)*);
uint FwpmCalloutSubscribeChanges0(HANDLE, const(FWPM_CALLOUT_SUBSCRIPTION0)*, FWPM_CALLOUT_CHANGE_CALLBACK0, void*, HANDLE*);
uint FwpmCalloutUnsubscribeChanges0(HANDLE, HANDLE);
uint FwpmCalloutSubscriptionsGet0(HANDLE, FWPM_CALLOUT_SUBSCRIPTION0***, uint*);
uint FwpmFilterAdd0(HANDLE, const(FWPM_FILTER0)*, PSECURITY_DESCRIPTOR, ulong*);
uint FwpmFilterDeleteById0(HANDLE, ulong);
uint FwpmFilterDeleteByKey0(HANDLE, const(GUID)*);
uint FwpmFilterGetById0(HANDLE, ulong, FWPM_FILTER0**);
uint FwpmFilterGetByKey0(HANDLE, const(GUID)*, FWPM_FILTER0**);
uint FwpmFilterCreateEnumHandle0(HANDLE, const(FWPM_FILTER_ENUM_TEMPLATE0)*, HANDLE*);
uint FwpmFilterEnum0(HANDLE, HANDLE, uint, FWPM_FILTER0***, uint*);
uint FwpmFilterDestroyEnumHandle0(HANDLE, HANDLE);
uint FwpmFilterGetSecurityInfoByKey0(HANDLE, const(GUID)*, uint, PSID*, PSID*, ACL**, ACL**, PSECURITY_DESCRIPTOR*);
uint FwpmFilterSetSecurityInfoByKey0(HANDLE, const(GUID)*, uint, const(SID)*, const(SID)*, const(ACL)*, const(ACL)*);
uint FwpmFilterSubscribeChanges0(HANDLE, const(FWPM_FILTER_SUBSCRIPTION0)*, FWPM_FILTER_CHANGE_CALLBACK0, void*, HANDLE*);
uint FwpmFilterUnsubscribeChanges0(HANDLE, HANDLE);
uint FwpmFilterSubscriptionsGet0(HANDLE, FWPM_FILTER_SUBSCRIPTION0***, uint*);
uint FwpmGetAppIdFromFileName0(const(wchar)*, FWP_BYTE_BLOB**);
uint FwpmIPsecTunnelAdd0(HANDLE, uint, const(FWPM_PROVIDER_CONTEXT0)*, const(FWPM_PROVIDER_CONTEXT0)*, uint, const(FWPM_FILTER_CONDITION0)*, PSECURITY_DESCRIPTOR);
uint FwpmIPsecTunnelAdd1(HANDLE, uint, const(FWPM_PROVIDER_CONTEXT1)*, const(FWPM_PROVIDER_CONTEXT1)*, uint, const(FWPM_FILTER_CONDITION0)*, const(GUID)*, PSECURITY_DESCRIPTOR);
uint FwpmIPsecTunnelAdd2(HANDLE, uint, const(FWPM_PROVIDER_CONTEXT2)*, const(FWPM_PROVIDER_CONTEXT2)*, uint, const(FWPM_FILTER_CONDITION0)*, const(GUID)*, PSECURITY_DESCRIPTOR);
uint FwpmIPsecTunnelAdd3(HANDLE, uint, const(FWPM_PROVIDER_CONTEXT3)*, const(FWPM_PROVIDER_CONTEXT3)*, uint, const(FWPM_FILTER_CONDITION0)*, const(GUID)*, PSECURITY_DESCRIPTOR);
uint FwpmIPsecTunnelDeleteByKey0(HANDLE, const(GUID)*);
uint IPsecGetStatistics0(HANDLE, IPSEC_STATISTICS0*);
uint IPsecGetStatistics1(HANDLE, IPSEC_STATISTICS1*);
uint IPsecSaContextCreate0(HANDLE, const(IPSEC_TRAFFIC0)*, ulong*, ulong*);
uint IPsecSaContextCreate1(HANDLE, const(IPSEC_TRAFFIC1)*, const(IPSEC_VIRTUAL_IF_TUNNEL_INFO0)*, ulong*, ulong*);
uint IPsecSaContextDeleteById0(HANDLE, ulong);
uint IPsecSaContextGetById0(HANDLE, ulong, IPSEC_SA_CONTEXT0**);
uint IPsecSaContextGetById1(HANDLE, ulong, IPSEC_SA_CONTEXT1**);
uint IPsecSaContextGetSpi0(HANDLE, ulong, const(IPSEC_GETSPI0)*, uint*);
uint IPsecSaContextGetSpi1(HANDLE, ulong, const(IPSEC_GETSPI1)*, uint*);
uint IPsecSaContextSetSpi0(HANDLE, ulong, const(IPSEC_GETSPI1)*, uint);
uint IPsecSaContextAddInbound0(HANDLE, ulong, const(IPSEC_SA_BUNDLE0)*);
uint IPsecSaContextAddOutbound0(HANDLE, ulong, const(IPSEC_SA_BUNDLE0)*);
uint IPsecSaContextAddInbound1(HANDLE, ulong, const(IPSEC_SA_BUNDLE1)*);
uint IPsecSaContextAddOutbound1(HANDLE, ulong, const(IPSEC_SA_BUNDLE1)*);
uint IPsecSaContextExpire0(HANDLE, ulong);
uint IPsecSaContextUpdate0(HANDLE, ulong, const(IPSEC_SA_CONTEXT1)*);
uint IPsecSaContextCreateEnumHandle0(HANDLE, const(IPSEC_SA_CONTEXT_ENUM_TEMPLATE0)*, HANDLE*);
uint IPsecSaContextEnum0(HANDLE, HANDLE, uint, IPSEC_SA_CONTEXT0***, uint*);
uint IPsecSaContextEnum1(HANDLE, HANDLE, uint, IPSEC_SA_CONTEXT1***, uint*);
uint IPsecSaContextDestroyEnumHandle0(HANDLE, HANDLE);
uint IPsecSaContextSubscribe0(HANDLE, const(IPSEC_SA_CONTEXT_SUBSCRIPTION0)*, IPSEC_SA_CONTEXT_CALLBACK0, void*, HANDLE*);
uint IPsecSaContextUnsubscribe0(HANDLE, HANDLE);
uint IPsecSaContextSubscriptionsGet0(HANDLE, IPSEC_SA_CONTEXT_SUBSCRIPTION0***, uint*);
uint IPsecSaCreateEnumHandle0(HANDLE, const(IPSEC_SA_ENUM_TEMPLATE0)*, HANDLE*);
uint IPsecSaEnum0(HANDLE, HANDLE, uint, IPSEC_SA_DETAILS0***, uint*);
uint IPsecSaEnum1(HANDLE, HANDLE, uint, IPSEC_SA_DETAILS1***, uint*);
uint IPsecSaDestroyEnumHandle0(HANDLE, HANDLE);
uint IPsecSaDbGetSecurityInfo0(HANDLE, uint, PSID*, PSID*, ACL**, ACL**, PSECURITY_DESCRIPTOR*);
uint IPsecSaDbSetSecurityInfo0(HANDLE, uint, const(SID)*, const(SID)*, const(ACL)*, const(ACL)*);
uint IPsecDospGetStatistics0(HANDLE, IPSEC_DOSP_STATISTICS0*);
uint IPsecDospStateCreateEnumHandle0(HANDLE, const(IPSEC_DOSP_STATE_ENUM_TEMPLATE0)*, HANDLE*);
uint IPsecDospStateEnum0(HANDLE, HANDLE, uint, IPSEC_DOSP_STATE0***, uint*);
uint IPsecDospStateDestroyEnumHandle0(HANDLE, HANDLE);
uint IPsecDospGetSecurityInfo0(HANDLE, uint, PSID*, PSID*, ACL**, ACL**, PSECURITY_DESCRIPTOR*);
uint IPsecDospSetSecurityInfo0(HANDLE, uint, const(SID)*, const(SID)*, const(ACL)*, const(ACL)*);
uint IPsecKeyManagerAddAndRegister0(HANDLE, const(IPSEC_KEY_MANAGER0)*, const(IPSEC_KEY_MANAGER_CALLBACKS0)*, HANDLE*);
uint IPsecKeyManagerUnregisterAndDelete0(HANDLE, HANDLE);
uint IPsecKeyManagersGet0(HANDLE, IPSEC_KEY_MANAGER0***, uint*);
uint IPsecKeyManagerGetSecurityInfoByKey0(HANDLE, const(void)*, uint, PSID*, PSID*, ACL**, ACL**, PSECURITY_DESCRIPTOR*);
uint IPsecKeyManagerSetSecurityInfoByKey0(HANDLE, const(void)*, uint, const(SID)*, const(SID)*, const(ACL)*, const(ACL)*);
uint IkeextGetStatistics0(HANDLE, IKEEXT_STATISTICS0*);
uint IkeextGetStatistics1(HANDLE, IKEEXT_STATISTICS1*);
uint IkeextSaDeleteById0(HANDLE, ulong);
uint IkeextSaGetById0(HANDLE, ulong, IKEEXT_SA_DETAILS0**);
uint IkeextSaGetById1(HANDLE, ulong, GUID*, IKEEXT_SA_DETAILS1**);
uint IkeextSaGetById2(HANDLE, ulong, GUID*, IKEEXT_SA_DETAILS2**);
uint IkeextSaCreateEnumHandle0(HANDLE, const(IKEEXT_SA_ENUM_TEMPLATE0)*, HANDLE*);
uint IkeextSaEnum0(HANDLE, HANDLE, uint, IKEEXT_SA_DETAILS0***, uint*);
uint IkeextSaEnum1(HANDLE, HANDLE, uint, IKEEXT_SA_DETAILS1***, uint*);
uint IkeextSaEnum2(HANDLE, HANDLE, uint, IKEEXT_SA_DETAILS2***, uint*);
uint IkeextSaDestroyEnumHandle0(HANDLE, HANDLE);
uint IkeextSaDbGetSecurityInfo0(HANDLE, uint, PSID*, PSID*, ACL**, ACL**, PSECURITY_DESCRIPTOR*);
uint IkeextSaDbSetSecurityInfo0(HANDLE, uint, const(SID)*, const(SID)*, const(ACL)*, const(ACL)*);
uint FwpmNetEventCreateEnumHandle0(HANDLE, const(FWPM_NET_EVENT_ENUM_TEMPLATE0)*, HANDLE*);
uint FwpmNetEventEnum0(HANDLE, HANDLE, uint, FWPM_NET_EVENT0***, uint*);
uint FwpmNetEventEnum1(HANDLE, HANDLE, uint, FWPM_NET_EVENT1***, uint*);
uint FwpmNetEventEnum2(HANDLE, HANDLE, uint, FWPM_NET_EVENT2***, uint*);
uint FwpmNetEventEnum3(HANDLE, HANDLE, uint, FWPM_NET_EVENT3***, uint*);
uint FwpmNetEventEnum4(HANDLE, HANDLE, uint, FWPM_NET_EVENT4***, uint*);
uint FwpmNetEventEnum5(HANDLE, HANDLE, uint, FWPM_NET_EVENT5***, uint*);
uint FwpmNetEventDestroyEnumHandle0(HANDLE, HANDLE);
uint FwpmNetEventsGetSecurityInfo0(HANDLE, uint, PSID*, PSID*, ACL**, ACL**, PSECURITY_DESCRIPTOR*);
uint FwpmNetEventsSetSecurityInfo0(HANDLE, uint, const(SID)*, const(SID)*, const(ACL)*, const(ACL)*);
uint FwpmNetEventSubscribe0(HANDLE, const(FWPM_NET_EVENT_SUBSCRIPTION0)*, FWPM_NET_EVENT_CALLBACK0, void*, HANDLE*);
uint FwpmNetEventUnsubscribe0(HANDLE, HANDLE);
uint FwpmNetEventSubscriptionsGet0(HANDLE, FWPM_NET_EVENT_SUBSCRIPTION0***, uint*);
uint FwpmNetEventSubscribe1(HANDLE, const(FWPM_NET_EVENT_SUBSCRIPTION0)*, FWPM_NET_EVENT_CALLBACK1, void*, HANDLE*);
uint FwpmNetEventSubscribe2(HANDLE, const(FWPM_NET_EVENT_SUBSCRIPTION0)*, FWPM_NET_EVENT_CALLBACK2, void*, HANDLE*);
uint FwpmNetEventSubscribe3(HANDLE, const(FWPM_NET_EVENT_SUBSCRIPTION0)*, FWPM_NET_EVENT_CALLBACK3, void*, HANDLE*);
uint FwpmNetEventSubscribe4(HANDLE, const(FWPM_NET_EVENT_SUBSCRIPTION0)*, FWPM_NET_EVENT_CALLBACK4, void*, HANDLE*);
uint FwpmDynamicKeywordSubscribe0(uint, FWPM_DYNAMIC_KEYWORD_CALLBACK0, void*, HANDLE*);
uint FwpmDynamicKeywordUnsubscribe0(HANDLE);
uint FwpmSystemPortsGet0(HANDLE, FWPM_SYSTEM_PORTS0**);
uint FwpmSystemPortsSubscribe0(HANDLE, void*, FWPM_SYSTEM_PORTS_CALLBACK0, void*, HANDLE*);
uint FwpmSystemPortsUnsubscribe0(HANDLE, HANDLE);
uint FwpmConnectionGetById0(HANDLE, ulong, FWPM_CONNECTION0**);
uint FwpmConnectionEnum0(HANDLE, HANDLE, uint, FWPM_CONNECTION0***, uint*);
uint FwpmConnectionCreateEnumHandle0(HANDLE, const(FWPM_CONNECTION_ENUM_TEMPLATE0)*, HANDLE*);
uint FwpmConnectionDestroyEnumHandle0(HANDLE, HANDLE);
uint FwpmConnectionGetSecurityInfo0(HANDLE, uint, PSID*, PSID*, ACL**, ACL**, PSECURITY_DESCRIPTOR*);
uint FwpmConnectionSetSecurityInfo0(HANDLE, uint, const(SID)*, const(SID)*, const(ACL)*, const(ACL)*);
uint FwpmConnectionSubscribe0(HANDLE, const(FWPM_CONNECTION_SUBSCRIPTION0)*, FWPM_CONNECTION_CALLBACK0, void*, HANDLE*);
uint FwpmConnectionUnsubscribe0(HANDLE, HANDLE);
uint FwpmvSwitchEventSubscribe0(HANDLE, const(FWPM_VSWITCH_EVENT_SUBSCRIPTION0)*, FWPM_VSWITCH_EVENT_CALLBACK0, void*, HANDLE*);
uint FwpmvSwitchEventUnsubscribe0(HANDLE, HANDLE);
uint FwpmvSwitchEventsGetSecurityInfo0(HANDLE, uint, PSID*, PSID*, ACL**, ACL**, PSECURITY_DESCRIPTOR*);
uint FwpmvSwitchEventsSetSecurityInfo0(HANDLE, uint, const(SID)*, const(SID)*, const(ACL)*, const(ACL)*);
enum FWPM_NET_EVENT_KEYWORD_INBOUND_MCAST = 0x00000001;
enum FWPM_NET_EVENT_KEYWORD_INBOUND_BCAST = 0x00000002;
enum FWPM_NET_EVENT_KEYWORD_CAPABILITY_DROP = 0x00000004;
enum FWPM_NET_EVENT_KEYWORD_CAPABILITY_ALLOW = 0x00000008;
enum FWPM_NET_EVENT_KEYWORD_CLASSIFY_ALLOW = 0x00000010;
enum FWPM_NET_EVENT_KEYWORD_PORT_SCANNING_DROP = 0x00000020;
enum FWPM_ENGINE_OPTION_PACKET_QUEUE_NONE = 0x00000000;
enum FWPM_ENGINE_OPTION_PACKET_QUEUE_INBOUND = 0x00000001;
enum FWPM_ENGINE_OPTION_PACKET_QUEUE_FORWARD = 0x00000002;
enum FWPM_ENGINE_OPTION_PACKET_BATCH_INBOUND = 0x00000004;
enum FWPM_SESSION_FLAG_DYNAMIC = 0x00000001;
enum FWPM_SESSION_FLAG_RESERVED = 0x10000000;
enum FWPM_PROVIDER_FLAG_PERSISTENT = 0x00000001;
enum FWPM_PROVIDER_FLAG_DISABLED = 0x00000010;
enum FWPM_PROVIDER_CONTEXT_FLAG_PERSISTENT = 0x00000001;
enum FWPM_PROVIDER_CONTEXT_FLAG_DOWNLEVEL = 0x00000002;
enum FWPM_SUBLAYER_FLAG_PERSISTENT = 0x00000001;
enum FWPM_LAYER_FLAG_KERNEL = 0x00000001;
enum FWPM_LAYER_FLAG_BUILTIN = 0x00000002;
enum FWPM_LAYER_FLAG_CLASSIFY_MOSTLY = 0x00000004;
enum FWPM_LAYER_FLAG_BUFFERED = 0x00000008;
enum FWPM_CALLOUT_FLAG_PERSISTENT = 0x00010000;
enum FWPM_CALLOUT_FLAG_USES_PROVIDER_CONTEXT = 0x00020000;
enum FWPM_CALLOUT_FLAG_REGISTERED = 0x00040000;
enum FWPM_FILTER_FLAG_HAS_SECURITY_REALM_PROVIDER_CONTEXT = 0x00000080;
enum FWPM_FILTER_FLAG_SYSTEMOS_ONLY = 0x00000100;
enum FWPM_FILTER_FLAG_GAMEOS_ONLY = 0x00000200;
enum FWPM_FILTER_FLAG_SILENT_MODE = 0x00000400;
enum FWPM_FILTER_FLAG_IPSEC_NO_ACQUIRE_INITIATE = 0x00000800;
enum FWPM_FILTER_FLAG_RESERVED0 = 0x00001000;
enum FWPM_FILTER_FLAG_RESERVED1 = 0x00002000;
enum FWPM_NET_EVENT_FLAG_IP_PROTOCOL_SET = 0x00000001;
enum FWPM_NET_EVENT_FLAG_LOCAL_ADDR_SET = 0x00000002;
enum FWPM_NET_EVENT_FLAG_REMOTE_ADDR_SET = 0x00000004;
enum FWPM_NET_EVENT_FLAG_LOCAL_PORT_SET = 0x00000008;
enum FWPM_NET_EVENT_FLAG_REMOTE_PORT_SET = 0x00000010;
enum FWPM_NET_EVENT_FLAG_APP_ID_SET = 0x00000020;
enum FWPM_NET_EVENT_FLAG_USER_ID_SET = 0x00000040;
enum FWPM_NET_EVENT_FLAG_SCOPE_ID_SET = 0x00000080;
enum FWPM_NET_EVENT_FLAG_IP_VERSION_SET = 0x00000100;
enum FWPM_NET_EVENT_FLAG_REAUTH_REASON_SET = 0x00000200;
enum FWPM_NET_EVENT_FLAG_PACKAGE_ID_SET = 0x00000400;
enum FWPM_NET_EVENT_FLAG_ENTERPRISE_ID_SET = 0x00000800;
enum FWPM_NET_EVENT_FLAG_POLICY_FLAGS_SET = 0x00001000;
enum FWPM_NET_EVENT_FLAG_EFFECTIVE_NAME_SET = 0x00002000;
enum IKEEXT_CERT_HASH_LEN = 0x00000014;
enum FWPM_NET_EVENT_IKEEXT_MM_FAILURE_FLAG_BENIGN = 0x00000001;
enum FWPM_NET_EVENT_IKEEXT_MM_FAILURE_FLAG_MULTIPLE = 0x00000002;
enum FWPM_NET_EVENT_IKEEXT_EM_FAILURE_FLAG_MULTIPLE = 0x00000001;
enum FWPM_NET_EVENT_IKEEXT_EM_FAILURE_FLAG_BENIGN = 0x00000002;
enum FWPM_CONNECTION_ENUM_FLAG_QUERY_BYTES_TRANSFERRED = 0x00000001;
enum FWPS_FILTER_FLAG_CLEAR_ACTION_RIGHT = 0x00000001;
enum FWPS_FILTER_FLAG_PERMIT_IF_CALLOUT_UNREGISTERED = 0x00000002;
enum FWPS_FILTER_FLAG_OR_CONDITIONS = 0x00000004;
enum FWPS_FILTER_FLAG_HAS_SECURITY_REALM_PROVIDER_CONTEXT = 0x00000008;
enum FWPS_FILTER_FLAG_SILENT_MODE = 0x00000010;
enum FWPS_FILTER_FLAG_IPSEC_NO_ACQUIRE_INITIATE = 0x00000020;
enum FWPS_FILTER_FLAG_RESERVED0 = 0x00000040;
enum FWPS_FILTER_FLAG_RESERVED1 = 0x00000080;
enum FWPS_INCOMING_FLAG_CACHE_SAFE = 0x00000001;
enum FWPS_INCOMING_FLAG_ENFORCE_QUERY = 0x00000002;
enum FWPS_INCOMING_FLAG_ABSORB = 0x00000004;
enum FWPS_INCOMING_FLAG_CONNECTION_FAILING_INDICATION = 0x00000008;
enum FWPS_INCOMING_FLAG_MID_STREAM_INSPECTION = 0x00000010;
enum FWPS_INCOMING_FLAG_RECLASSIFY = 0x00000020;
enum FWPS_INCOMING_FLAG_IS_LOOSE_SOURCE_FLOW = 0x00000040;
enum FWPS_INCOMING_FLAG_IS_LOCAL_ONLY_FLOW = 0x00000080;
enum FWPS_L2_INCOMING_FLAG_IS_RAW_IPV4_FRAMING = 0x00000001;
enum FWPS_L2_INCOMING_FLAG_IS_RAW_IPV6_FRAMING = 0x00000002;
enum FWPS_L2_INCOMING_FLAG_RECLASSIFY_MULTI_DESTINATION = 0x00000008;
enum FWPS_INCOMING_FLAG_RESERVED0 = 0x00000100;
enum FWPS_RIGHT_ACTION_WRITE = 0x00000001;
enum FWPS_CLASSIFY_OUT_FLAG_ABSORB = 0x00000001;
enum FWPS_CLASSIFY_OUT_FLAG_BUFFER_LIMIT_REACHED = 0x00000002;
enum FWPS_CLASSIFY_OUT_FLAG_NO_MORE_DATA = 0x00000004;
enum FWPS_CLASSIFY_OUT_FLAG_ALE_FAST_CACHE_CHECK = 0x00000008;
enum FWPS_CLASSIFY_OUT_FLAG_ALE_FAST_CACHE_POSSIBLE = 0x00000010;
enum FWPS_ALE_ENDPOINT_FLAG_IPSEC_SECURED = 0x00000001;
enum FWP_BYTEMAP_ARRAY64_SIZE = 0x00000008;
enum FWP_BYTE_ARRAY6_SIZE = 0x00000006;
enum FWP_V6_ADDR_SIZE = 0x00000010;
enum FWP_ACTRL_MATCH_FILTER = 0x00000001;
enum FWP_OPTION_VALUE_ALLOW_MULTICAST_STATE = 0x00000000;
enum FWP_OPTION_VALUE_DENY_MULTICAST_STATE = 0x00000001;
enum FWP_OPTION_VALUE_ALLOW_GLOBAL_MULTICAST_STATE = 0x00000002;
enum FWP_OPTION_VALUE_DISABLE_LOOSE_SOURCE = 0x00000000;
enum FWP_OPTION_VALUE_ENABLE_LOOSE_SOURCE = 0x00000001;
enum FWP_OPTION_VALUE_DISABLE_LOCAL_ONLY_MAPPING = 0x00000000;
enum FWP_OPTION_VALUE_ENABLE_LOCAL_ONLY_MAPPING = 0x00000001;
enum FWP_ACTION_FLAG_TERMINATING = 0x00001000;
enum FWP_ACTION_FLAG_NON_TERMINATING = 0x00002000;
enum FWP_ACTION_FLAG_CALLOUT = 0x00004000;
enum FWP_ACTION_NONE = 0x00000007;
enum FWP_ACTION_NONE_NO_MATCH = 0x00000008;
enum FWP_CONDITION_FLAG_IS_LOOPBACK = 0x00000001;
enum FWP_CONDITION_FLAG_IS_IPSEC_SECURED = 0x00000002;
enum FWP_CONDITION_FLAG_IS_REAUTHORIZE = 0x00000004;
enum FWP_CONDITION_FLAG_IS_WILDCARD_BIND = 0x00000008;
enum FWP_CONDITION_FLAG_IS_RAW_ENDPOINT = 0x00000010;
enum FWP_CONDITION_FLAG_IS_FRAGMENT = 0x00000020;
enum FWP_CONDITION_FLAG_IS_FRAGMENT_GROUP = 0x00000040;
enum FWP_CONDITION_FLAG_IS_IPSEC_NATT_RECLASSIFY = 0x00000080;
enum FWP_CONDITION_FLAG_REQUIRES_ALE_CLASSIFY = 0x00000100;
enum FWP_CONDITION_FLAG_IS_IMPLICIT_BIND = 0x00000200;
enum FWP_CONDITION_FLAG_IS_REASSEMBLED = 0x00000400;
enum FWP_CONDITION_FLAG_IS_NAME_APP_SPECIFIED = 0x00004000;
enum FWP_CONDITION_FLAG_IS_PROMISCUOUS = 0x00008000;
enum FWP_CONDITION_FLAG_IS_AUTH_FW = 0x00010000;
enum FWP_CONDITION_FLAG_IS_RECLASSIFY = 0x00020000;
enum FWP_CONDITION_FLAG_IS_OUTBOUND_PASS_THRU = 0x00040000;
enum FWP_CONDITION_FLAG_IS_INBOUND_PASS_THRU = 0x00080000;
enum FWP_CONDITION_FLAG_IS_CONNECTION_REDIRECTED = 0x00100000;
enum FWP_CONDITION_FLAG_IS_PROXY_CONNECTION = 0x00200000;
enum FWP_CONDITION_FLAG_IS_APPCONTAINER_LOOPBACK = 0x00400000;
enum FWP_CONDITION_FLAG_IS_NON_APPCONTAINER_LOOPBACK = 0x00800000;
enum FWP_CONDITION_FLAG_IS_RESERVED = 0x01000000;
enum FWP_CONDITION_FLAG_IS_HONORING_POLICY_AUTHORIZE = 0x02000000;
enum FWP_CONDITION_REAUTHORIZE_REASON_POLICY_CHANGE = 0x00000001;
enum FWP_CONDITION_REAUTHORIZE_REASON_NEW_ARRIVAL_INTERFACE = 0x00000002;
enum FWP_CONDITION_REAUTHORIZE_REASON_NEW_NEXTHOP_INTERFACE = 0x00000004;
enum FWP_CONDITION_REAUTHORIZE_REASON_PROFILE_CROSSING = 0x00000008;
enum FWP_CONDITION_REAUTHORIZE_REASON_CLASSIFY_COMPLETION = 0x00000010;
enum FWP_CONDITION_REAUTHORIZE_REASON_IPSEC_PROPERTIES_CHANGED = 0x00000020;
enum FWP_CONDITION_REAUTHORIZE_REASON_MID_STREAM_INSPECTION = 0x00000040;
enum FWP_CONDITION_REAUTHORIZE_REASON_SOCKET_PROPERTY_CHANGED = 0x00000080;
enum FWP_CONDITION_REAUTHORIZE_REASON_NEW_INBOUND_MCAST_BCAST_PACKET = 0x00000100;
enum FWP_CONDITION_REAUTHORIZE_REASON_EDP_POLICY_CHANGED = 0x00000200;
enum FWP_CONDITION_REAUTHORIZE_REASON_PROXY_HANDLE_CHANGED = 0x00004000;
enum FWP_CONDITION_REAUTHORIZE_REASON_CHECK_OFFLOAD = 0x00010000;
enum FWP_CONDITION_SOCKET_PROPERTY_FLAG_IS_SYSTEM_PORT_RPC = 0x00000001;
enum FWP_CONDITION_SOCKET_PROPERTY_FLAG_ALLOW_EDGE_TRAFFIC = 0x00000002;
enum FWP_CONDITION_SOCKET_PROPERTY_FLAG_DENY_EDGE_TRAFFIC = 0x00000004;
enum FWP_CONDITION_L2_IS_NATIVE_ETHERNET = 0x00000001;
enum FWP_CONDITION_L2_IS_WIFI = 0x00000002;
enum FWP_CONDITION_L2_IS_MOBILE_BROADBAND = 0x00000004;
enum FWP_CONDITION_L2_IS_WIFI_DIRECT_DATA = 0x00000008;
enum FWP_CONDITION_L2_IS_VM2VM = 0x00000010;
enum FWP_CONDITION_L2_IS_MALFORMED_PACKET = 0x00000020;
enum FWP_CONDITION_L2_IS_IP_FRAGMENT_GROUP = 0x00000040;
enum FWP_CONDITION_L2_IF_CONNECTOR_PRESENT = 0x00000080;
enum FWP_FILTER_ENUM_FLAG_BEST_TERMINATING_MATCH = 0x00000001;
enum FWP_FILTER_ENUM_FLAG_SORTED = 0x00000002;
enum FWP_FILTER_ENUM_FLAG_BOOTTIME_ONLY = 0x00000004;
enum FWP_FILTER_ENUM_FLAG_INCLUDE_BOOTTIME = 0x00000008;
enum FWP_FILTER_ENUM_FLAG_INCLUDE_DISABLED = 0x00000010;
enum FWP_FILTER_ENUM_FLAG_RESERVED1 = 0x00000020;
enum FWP_CALLOUT_FLAG_CONDITIONAL_ON_FLOW = 0x00000001;
enum FWP_CALLOUT_FLAG_ALLOW_OFFLOAD = 0x00000002;
enum FWP_CALLOUT_FLAG_ENABLE_COMMIT_ADD_NOTIFY = 0x00000004;
enum FWP_CALLOUT_FLAG_ALLOW_MID_STREAM_INSPECTION = 0x00000008;
enum FWP_CALLOUT_FLAG_ALLOW_RECLASSIFY = 0x00000010;
enum FWP_CALLOUT_FLAG_RESERVED1 = 0x00000020;
enum FWP_CALLOUT_FLAG_ALLOW_RSC = 0x00000040;
enum FWP_CALLOUT_FLAG_ALLOW_L2_BATCH_CLASSIFY = 0x00000080;
enum FWP_CALLOUT_FLAG_ALLOW_USO = 0x00000100;
enum FWP_CALLOUT_FLAG_ALLOW_URO = 0x00000200;
enum FWP_CALLOUT_FLAG_RESERVED2 = 0x00000400;
enum IKEEXT_CERT_AUTH_FLAG_DISABLE_CRL_CHECK = 0x00000002;
enum IKEEXT_CERT_AUTH_FLAG_DISABLE_REQUEST_PAYLOAD = 0x00000040;
enum IKEEXT_KERB_AUTH_FORCE_PROXY_ON_INITIATOR = 0x00000004;
enum IKEEXT_NTLM_V2_AUTH_DONT_ACCEPT_EXPLICIT_CREDENTIALS = 0x00000001;
enum IKEEXT_POLICY_FLAG_MOBIKE_NOT_SUPPORTED = 0x00000010;
enum IKEEXT_POLICY_FLAG_SITE_TO_SITE = 0x00000020;
enum IKEEXT_POLICY_FLAG_IMS_VPN = 0x00000040;
enum IKEEXT_POLICY_ENABLE_IKEV2_FRAGMENTATION = 0x00000080;
enum IKEEXT_POLICY_SUPPORT_LOW_POWER_MODE = 0x00000100;
enum IKEEXT_CERT_CREDENTIAL_FLAG_NAP_CERT = 0x00000001;
enum IPSEC_AUTH_CONFIG_HMAC_MD5_96 = 0x00000000;
enum IPSEC_AUTH_CONFIG_HMAC_SHA_1_96 = 0x00000001;
enum IPSEC_AUTH_CONFIG_HMAC_SHA_256_128 = 0x00000002;
enum IPSEC_AUTH_CONFIG_GCM_AES_128 = 0x00000003;
enum IPSEC_AUTH_CONFIG_GCM_AES_192 = 0x00000004;
enum IPSEC_AUTH_CONFIG_GCM_AES_256 = 0x00000005;
enum IPSEC_AUTH_CONFIG_MAX = 0x00000006;
enum IPSEC_CIPHER_CONFIG_CBC_DES = 0x00000001;
enum IPSEC_CIPHER_CONFIG_CBC_3DES = 0x00000002;
enum IPSEC_CIPHER_CONFIG_CBC_AES_128 = 0x00000003;
enum IPSEC_CIPHER_CONFIG_CBC_AES_192 = 0x00000004;
enum IPSEC_CIPHER_CONFIG_CBC_AES_256 = 0x00000005;
enum IPSEC_CIPHER_CONFIG_GCM_AES_128 = 0x00000006;
enum IPSEC_CIPHER_CONFIG_GCM_AES_192 = 0x00000007;
enum IPSEC_CIPHER_CONFIG_GCM_AES_256 = 0x00000008;
enum IPSEC_CIPHER_CONFIG_MAX = 0x00000009;
enum IPSEC_POLICY_FLAG_KEY_MANAGER_ALLOW_NOTIFY_KEY = 0x00004000;
enum IPSEC_POLICY_FLAG_RESERVED1 = 0x00008000;
enum IPSEC_POLICY_FLAG_SITE_TO_SITE_TUNNEL = 0x00010000;
enum IPSEC_POLICY_FLAG_BANDWIDTH1 = 0x10000000;
enum IPSEC_POLICY_FLAG_BANDWIDTH2 = 0x20000000;
enum IPSEC_POLICY_FLAG_BANDWIDTH3 = 0x40000000;
enum IPSEC_POLICY_FLAG_BANDWIDTH4 = 0x80000000;
enum IPSEC_KEYING_POLICY_FLAG_TERMINATING_MATCH = 0x00000001;
enum IPSEC_SA_BUNDLE_FLAG_NLB = 0x00000010;
enum IPSEC_SA_BUNDLE_FLAG_NO_MACHINE_LUID_VERIFY = 0x00000020;
enum IPSEC_SA_BUNDLE_FLAG_NO_IMPERSONATION_LUID_VERIFY = 0x00000040;
enum IPSEC_SA_BUNDLE_FLAG_NO_EXPLICIT_CRED_MATCH = 0x00000080;
enum IPSEC_SA_BUNDLE_FLAG_FORCE_INBOUND_CONNECTIONS = 0x00008000;
enum IPSEC_SA_BUNDLE_FLAG_FORCE_OUTBOUND_CONNECTIONS = 0x00010000;
enum IPSEC_SA_BUNDLE_FLAG_FORWARD_PATH_INITIATOR = 0x00020000;
enum IPSEC_SA_BUNDLE_FLAG_ENABLE_OPTIONAL_ASYMMETRIC_IDLE = 0x00040000;
enum IPSEC_SA_BUNDLE_FLAG_USING_DICTATED_KEYS = 0x00080000;
enum IPSEC_SA_BUNDLE_FLAG_LOCALLY_DICTATED_KEYS = 0x00100000;
enum IPSEC_SA_BUNDLE_FLAG_SA_OFFLOADED = 0x00200000;
enum IPSEC_SA_BUNDLE_FLAG_IP_IN_IP_PKT = 0x00400000;
enum IPSEC_SA_BUNDLE_FLAG_LOW_POWER_MODE_SUPPORT = 0x00800000;
enum IPSEC_SA_BUNDLE_FLAG_TUNNEL_BANDWIDTH1 = 0x10000000;
enum IPSEC_SA_BUNDLE_FLAG_TUNNEL_BANDWIDTH2 = 0x20000000;
enum IPSEC_SA_BUNDLE_FLAG_TUNNEL_BANDWIDTH3 = 0x40000000;
enum IPSEC_SA_BUNDLE_FLAG_TUNNEL_BANDWIDTH4 = 0x80000000;
enum IPSEC_DOSP_DSCP_DISABLE_VALUE = 0x000000ff;
enum IPSEC_DOSP_RATE_LIMIT_DISABLE_VALUE = 0x00000000;
enum IPSEC_KEY_MANAGER_FLAG_DICTATE_KEY = 0x00000001;
enum FWPM_LAYER_INBOUND_IPPACKET_V4 = GUID(0xc86fd1bf, 0x21cd, 0x497e, [0xa0, 0xbb, 0x17, 0x42, 0x5c, 0x88, 0x5c, 0x58]);
enum FWPM_LAYER_INBOUND_IPPACKET_V4_DISCARD = GUID(0xb5a230d0, 0xa8c0, 0x44f2, [0x91, 0x6e, 0x99, 0x1b, 0x53, 0xde, 0xd1, 0xf7]);
enum FWPM_LAYER_INBOUND_IPPACKET_V6 = GUID(0xf52032cb, 0x991c, 0x46e7, [0x97, 0x1d, 0x26, 0x1, 0x45, 0x9a, 0x91, 0xca]);
enum FWPM_LAYER_INBOUND_IPPACKET_V6_DISCARD = GUID(0xbb24c279, 0x93b4, 0x47a2, [0x83, 0xad, 0xae, 0x16, 0x98, 0xb5, 0x8, 0x85]);
enum FWPM_LAYER_OUTBOUND_IPPACKET_V4 = GUID(0x1e5c9fae, 0x8a84, 0x4135, [0xa3, 0x31, 0x95, 0xb, 0x54, 0x22, 0x9e, 0xcd]);
enum FWPM_LAYER_OUTBOUND_IPPACKET_V4_DISCARD = GUID(0x8e4bcb5, 0xb647, 0x48f3, [0x95, 0x3c, 0xe5, 0xdd, 0xbd, 0x3, 0x93, 0x7e]);
enum FWPM_LAYER_OUTBOUND_IPPACKET_V6 = GUID(0xa3b3ab6b, 0x3564, 0x488c, [0x91, 0x17, 0xf3, 0x4e, 0x82, 0x14, 0x27, 0x63]);
enum FWPM_LAYER_OUTBOUND_IPPACKET_V6_DISCARD = GUID(0x9513d7c4, 0xa934, 0x49dc, [0x91, 0xa7, 0x6c, 0xcb, 0x80, 0xcc, 0x2, 0xe3]);
enum FWPM_LAYER_IPFORWARD_V4 = GUID(0xa82acc24, 0x4ee1, 0x4ee1, [0xb4, 0x65, 0xfd, 0x1d, 0x25, 0xcb, 0x10, 0xa4]);
enum FWPM_LAYER_IPFORWARD_V4_DISCARD = GUID(0x9e9ea773, 0x2fae, 0x4210, [0x8f, 0x17, 0x34, 0x12, 0x9e, 0xf3, 0x69, 0xeb]);
enum FWPM_LAYER_IPFORWARD_V6 = GUID(0x7b964818, 0x19c7, 0x493a, [0xb7, 0x1f, 0x83, 0x2c, 0x36, 0x84, 0xd2, 0x8c]);
enum FWPM_LAYER_IPFORWARD_V6_DISCARD = GUID(0x31524a5d, 0x1dfe, 0x472f, [0xbb, 0x93, 0x51, 0x8e, 0xe9, 0x45, 0xd8, 0xa2]);
enum FWPM_LAYER_INBOUND_TRANSPORT_V4 = GUID(0x5926dfc8, 0xe3cf, 0x4426, [0xa2, 0x83, 0xdc, 0x39, 0x3f, 0x5d, 0xf, 0x9d]);
enum FWPM_LAYER_INBOUND_TRANSPORT_V4_DISCARD = GUID(0xac4a9833, 0xf69d, 0x4648, [0xb2, 0x61, 0x6d, 0xc8, 0x48, 0x35, 0xef, 0x39]);
enum FWPM_LAYER_INBOUND_TRANSPORT_V6 = GUID(0x634a869f, 0xfc23, 0x4b90, [0xb0, 0xc1, 0xbf, 0x62, 0xa, 0x36, 0xae, 0x6f]);
enum FWPM_LAYER_INBOUND_TRANSPORT_V6_DISCARD = GUID(0x2a6ff955, 0x3b2b, 0x49d2, [0x98, 0x48, 0xad, 0x9d, 0x72, 0xdc, 0xaa, 0xb7]);
enum FWPM_LAYER_OUTBOUND_TRANSPORT_V4 = GUID(0x9e61aea, 0xd214, 0x46e2, [0x9b, 0x21, 0xb2, 0x6b, 0xb, 0x2f, 0x28, 0xc8]);
enum FWPM_LAYER_OUTBOUND_TRANSPORT_V4_DISCARD = GUID(0xc5f10551, 0xbdb0, 0x43d7, [0xa3, 0x13, 0x50, 0xe2, 0x11, 0xf4, 0xd6, 0x8a]);
enum FWPM_LAYER_OUTBOUND_TRANSPORT_V6 = GUID(0xe1735bde, 0x13f, 0x4655, [0xb3, 0x51, 0xa4, 0x9e, 0x15, 0x76, 0x2d, 0xf0]);
enum FWPM_LAYER_OUTBOUND_TRANSPORT_V6_DISCARD = GUID(0xf433df69, 0xccbd, 0x482e, [0xb9, 0xb2, 0x57, 0x16, 0x56, 0x58, 0xc3, 0xb3]);
enum FWPM_LAYER_STREAM_V4 = GUID(0x3b89653c, 0xc170, 0x49e4, [0xb1, 0xcd, 0xe0, 0xee, 0xee, 0xe1, 0x9a, 0x3e]);
enum FWPM_LAYER_STREAM_V4_DISCARD = GUID(0x25c4c2c2, 0x25ff, 0x4352, [0x82, 0xf9, 0xc5, 0x4a, 0x4a, 0x47, 0x26, 0xdc]);
enum FWPM_LAYER_STREAM_V6 = GUID(0x47c9137a, 0x7ec4, 0x46b3, [0xb6, 0xe4, 0x48, 0xe9, 0x26, 0xb1, 0xed, 0xa4]);
enum FWPM_LAYER_STREAM_V6_DISCARD = GUID(0x10a59fc7, 0xb628, 0x4c41, [0x9e, 0xb8, 0xcf, 0x37, 0xd5, 0x51, 0x3, 0xcf]);
enum FWPM_LAYER_DATAGRAM_DATA_V4 = GUID(0x3d08bf4e, 0x45f6, 0x4930, [0xa9, 0x22, 0x41, 0x70, 0x98, 0xe2, 0x0, 0x27]);
enum FWPM_LAYER_DATAGRAM_DATA_V4_DISCARD = GUID(0x18e330c6, 0x7248, 0x4e52, [0xaa, 0xab, 0x47, 0x2e, 0xd6, 0x77, 0x4, 0xfd]);
enum FWPM_LAYER_DATAGRAM_DATA_V6 = GUID(0xfa45fe2f, 0x3cba, 0x4427, [0x87, 0xfc, 0x57, 0xb9, 0xa4, 0xb1, 0xd, 0x0]);
enum FWPM_LAYER_DATAGRAM_DATA_V6_DISCARD = GUID(0x9d1dfe1, 0x9b86, 0x4a42, [0xbe, 0x9d, 0x8c, 0x31, 0x5b, 0x92, 0xa5, 0xd0]);
enum FWPM_LAYER_INBOUND_ICMP_ERROR_V4 = GUID(0x61499990, 0x3cb6, 0x4e84, [0xb9, 0x50, 0x53, 0xb9, 0x4b, 0x69, 0x64, 0xf3]);
enum FWPM_LAYER_INBOUND_ICMP_ERROR_V4_DISCARD = GUID(0xa6b17075, 0xebaf, 0x4053, [0xa4, 0xe7, 0x21, 0x3c, 0x81, 0x21, 0xed, 0xe5]);
enum FWPM_LAYER_INBOUND_ICMP_ERROR_V6 = GUID(0x65f9bdff, 0x3b2d, 0x4e5d, [0xb8, 0xc6, 0xc7, 0x20, 0x65, 0x1f, 0xe8, 0x98]);
enum FWPM_LAYER_INBOUND_ICMP_ERROR_V6_DISCARD = GUID(0xa6e7ccc0, 0x8fb, 0x468d, [0xa4, 0x72, 0x97, 0x71, 0xd5, 0x59, 0x5e, 0x9]);
enum FWPM_LAYER_OUTBOUND_ICMP_ERROR_V4 = GUID(0x41390100, 0x564c, 0x4b32, [0xbc, 0x1d, 0x71, 0x80, 0x48, 0x35, 0x4d, 0x7c]);
enum FWPM_LAYER_OUTBOUND_ICMP_ERROR_V4_DISCARD = GUID(0xb3598d36, 0x561, 0x4588, [0xa6, 0xbf, 0xe9, 0x55, 0xe3, 0xf6, 0x26, 0x4b]);
enum FWPM_LAYER_OUTBOUND_ICMP_ERROR_V6 = GUID(0x7fb03b60, 0x7b8d, 0x4dfa, [0xba, 0xdd, 0x98, 0x1, 0x76, 0xfc, 0x4e, 0x12]);
enum FWPM_LAYER_OUTBOUND_ICMP_ERROR_V6_DISCARD = GUID(0x65f2e647, 0x8d0c, 0x4f47, [0xb1, 0x9b, 0x33, 0xa4, 0xd3, 0xf1, 0x35, 0x7c]);
enum FWPM_LAYER_ALE_RESOURCE_ASSIGNMENT_V4 = GUID(0x1247d66d, 0xb60, 0x4a15, [0x8d, 0x44, 0x71, 0x55, 0xd0, 0xf5, 0x3a, 0xc]);
enum FWPM_LAYER_ALE_RESOURCE_ASSIGNMENT_V4_DISCARD = GUID(0xb5812a2, 0xc3ff, 0x4eca, [0xb8, 0x8d, 0xc7, 0x9e, 0x20, 0xac, 0x63, 0x22]);
enum FWPM_LAYER_ALE_RESOURCE_ASSIGNMENT_V6 = GUID(0x55a650e1, 0x5f0a, 0x4eca, [0xa6, 0x53, 0x88, 0xf5, 0x3b, 0x26, 0xaa, 0x8c]);
enum FWPM_LAYER_ALE_RESOURCE_ASSIGNMENT_V6_DISCARD = GUID(0xcbc998bb, 0xc51f, 0x4c1a, [0xbb, 0x4f, 0x97, 0x75, 0xfc, 0xac, 0xab, 0x2f]);
enum FWPM_LAYER_ALE_AUTH_LISTEN_V4 = GUID(0x88bb5dad, 0x76d7, 0x4227, [0x9c, 0x71, 0xdf, 0xa, 0x3e, 0xd7, 0xbe, 0x7e]);
enum FWPM_LAYER_ALE_AUTH_LISTEN_V4_DISCARD = GUID(0x371dfada, 0x9f26, 0x45fd, [0xb4, 0xeb, 0xc2, 0x9e, 0xb2, 0x12, 0x89, 0x3f]);
enum FWPM_LAYER_ALE_AUTH_LISTEN_V6 = GUID(0x7ac9de24, 0x17dd, 0x4814, [0xb4, 0xbd, 0xa9, 0xfb, 0xc9, 0x5a, 0x32, 0x1b]);
enum FWPM_LAYER_ALE_AUTH_LISTEN_V6_DISCARD = GUID(0x60703b07, 0x63c8, 0x48e9, [0xad, 0xa3, 0x12, 0xb1, 0xaf, 0x40, 0xa6, 0x17]);
enum FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V4 = GUID(0xe1cd9fe7, 0xf4b5, 0x4273, [0x96, 0xc0, 0x59, 0x2e, 0x48, 0x7b, 0x86, 0x50]);
enum FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V4_DISCARD = GUID(0x9eeaa99b, 0xbd22, 0x4227, [0x91, 0x9f, 0x0, 0x73, 0xc6, 0x33, 0x57, 0xb1]);
enum FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V6 = GUID(0xa3b42c97, 0x9f04, 0x4672, [0xb8, 0x7e, 0xce, 0xe9, 0xc4, 0x83, 0x25, 0x7f]);
enum FWPM_LAYER_ALE_AUTH_RECV_ACCEPT_V6_DISCARD = GUID(0x89455b97, 0xdbe1, 0x453f, [0xa2, 0x24, 0x13, 0xda, 0x89, 0x5a, 0xf3, 0x96]);
enum FWPM_LAYER_ALE_AUTH_CONNECT_V4 = GUID(0xc38d57d1, 0x5a7, 0x4c33, [0x90, 0x4f, 0x7f, 0xbc, 0xee, 0xe6, 0xe, 0x82]);
enum FWPM_LAYER_ALE_AUTH_CONNECT_V4_DISCARD = GUID(0xd632a801, 0xf5ba, 0x4ad6, [0x96, 0xe3, 0x60, 0x70, 0x17, 0xd9, 0x83, 0x6a]);
enum FWPM_LAYER_ALE_AUTH_CONNECT_V6 = GUID(0x4a72393b, 0x319f, 0x44bc, [0x84, 0xc3, 0xba, 0x54, 0xdc, 0xb3, 0xb6, 0xb4]);
enum FWPM_LAYER_ALE_AUTH_CONNECT_V6_DISCARD = GUID(0xc97bc3b8, 0xc9a3, 0x4e33, [0x86, 0x95, 0x8e, 0x17, 0xaa, 0xd4, 0xde, 0x9]);
enum FWPM_LAYER_ALE_FLOW_ESTABLISHED_V4 = GUID(0xaf80470a, 0x5596, 0x4c13, [0x99, 0x92, 0x53, 0x9e, 0x6f, 0xe5, 0x79, 0x67]);
enum FWPM_LAYER_ALE_FLOW_ESTABLISHED_V4_DISCARD = GUID(0x146ae4a9, 0xa1d2, 0x4d43, [0xa3, 0x1a, 0x4c, 0x42, 0x68, 0x2b, 0x8e, 0x4f]);
enum FWPM_LAYER_ALE_FLOW_ESTABLISHED_V6 = GUID(0x7021d2b3, 0xdfa4, 0x406e, [0xaf, 0xeb, 0x6a, 0xfa, 0xf7, 0xe7, 0xe, 0xfd]);
enum FWPM_LAYER_ALE_FLOW_ESTABLISHED_V6_DISCARD = GUID(0x46928636, 0xbbca, 0x4b76, [0x94, 0x1d, 0xf, 0xa7, 0xf5, 0xd7, 0xd3, 0x72]);
enum FWPM_LAYER_INBOUND_MAC_FRAME_ETHERNET = GUID(0xeffb7edb, 0x55, 0x4f9a, [0xa2, 0x31, 0x4f, 0xf8, 0x13, 0x1a, 0xd1, 0x91]);
enum FWPM_LAYER_OUTBOUND_MAC_FRAME_ETHERNET = GUID(0x694673bc, 0xd6db, 0x4870, [0xad, 0xee, 0xa, 0xcd, 0xbd, 0xb7, 0xf4, 0xb2]);
enum FWPM_LAYER_INBOUND_MAC_FRAME_NATIVE = GUID(0xd4220bd3, 0x62ce, 0x4f08, [0xae, 0x88, 0xb5, 0x6e, 0x85, 0x26, 0xdf, 0x50]);
enum FWPM_LAYER_OUTBOUND_MAC_FRAME_NATIVE = GUID(0x94c44912, 0x9d6f, 0x4ebf, [0xb9, 0x95, 0x5, 0xab, 0x8a, 0x8, 0x8d, 0x1b]);
enum FWPM_LAYER_INGRESS_VSWITCH_ETHERNET = GUID(0x7d98577a, 0x9a87, 0x41ec, [0x97, 0x18, 0x7c, 0xf5, 0x89, 0xc9, 0xf3, 0x2d]);
enum FWPM_LAYER_EGRESS_VSWITCH_ETHERNET = GUID(0x86c872b0, 0x76fa, 0x4b79, [0x93, 0xa4, 0x7, 0x50, 0x53, 0xa, 0xe2, 0x92]);
enum FWPM_LAYER_INGRESS_VSWITCH_TRANSPORT_V4 = GUID(0xb2696ff6, 0x774f, 0x4554, [0x9f, 0x7d, 0x3d, 0xa3, 0x94, 0x5f, 0x8e, 0x85]);
enum FWPM_LAYER_INGRESS_VSWITCH_TRANSPORT_V6 = GUID(0x5ee314fc, 0x7d8a, 0x47f4, [0xb7, 0xe3, 0x29, 0x1a, 0x36, 0xda, 0x4e, 0x12]);
enum FWPM_LAYER_EGRESS_VSWITCH_TRANSPORT_V4 = GUID(0xb92350b6, 0x91f0, 0x46b6, [0xbd, 0xc4, 0x87, 0x1d, 0xfd, 0x4a, 0x7c, 0x98]);
enum FWPM_LAYER_EGRESS_VSWITCH_TRANSPORT_V6 = GUID(0x1b2def23, 0x1881, 0x40bd, [0x82, 0xf4, 0x42, 0x54, 0xe6, 0x31, 0x41, 0xcb]);
enum FWPM_LAYER_INBOUND_TRANSPORT_FAST = GUID(0xe41d2719, 0x5c7, 0x40f0, [0x89, 0x83, 0xea, 0x8d, 0x17, 0xbb, 0xc2, 0xf6]);
enum FWPM_LAYER_OUTBOUND_TRANSPORT_FAST = GUID(0x13ed4388, 0xa070, 0x4815, [0x99, 0x35, 0x7a, 0x9b, 0xe6, 0x40, 0x8b, 0x78]);
enum FWPM_LAYER_INBOUND_MAC_FRAME_NATIVE_FAST = GUID(0x853aaa8e, 0x2b78, 0x4d24, [0xa8, 0x4, 0x36, 0xdb, 0x8, 0xb2, 0x97, 0x11]);
enum FWPM_LAYER_OUTBOUND_MAC_FRAME_NATIVE_FAST = GUID(0x470df946, 0xc962, 0x486f, [0x94, 0x46, 0x82, 0x93, 0xcb, 0xc7, 0x5e, 0xb8]);
enum FWPM_LAYER_IPSEC_KM_DEMUX_V4 = GUID(0xf02b1526, 0xa459, 0x4a51, [0xb9, 0xe3, 0x75, 0x9d, 0xe5, 0x2b, 0x9d, 0x2c]);
enum FWPM_LAYER_IPSEC_KM_DEMUX_V6 = GUID(0x2f755cf6, 0x2fd4, 0x4e88, [0xb3, 0xe4, 0xa9, 0x1b, 0xca, 0x49, 0x52, 0x35]);
enum FWPM_LAYER_IPSEC_V4 = GUID(0xeda65c74, 0x610d, 0x4bc5, [0x94, 0x8f, 0x3c, 0x4f, 0x89, 0x55, 0x68, 0x67]);
enum FWPM_LAYER_IPSEC_V6 = GUID(0x13c48442, 0x8d87, 0x4261, [0x9a, 0x29, 0x59, 0xd2, 0xab, 0xc3, 0x48, 0xb4]);
enum FWPM_LAYER_IKEEXT_V4 = GUID(0xb14b7bdb, 0xdbbd, 0x473e, [0xbe, 0xd4, 0x8b, 0x47, 0x8, 0xd4, 0xf2, 0x70]);
enum FWPM_LAYER_IKEEXT_V6 = GUID(0xb64786b3, 0xf687, 0x4eb9, [0x89, 0xd2, 0x8e, 0xf3, 0x2a, 0xcd, 0xab, 0xe2]);
enum FWPM_LAYER_RPC_UM = GUID(0x75a89dda, 0x95e4, 0x40f3, [0xad, 0xc7, 0x76, 0x88, 0xa9, 0xc8, 0x47, 0xe1]);
enum FWPM_LAYER_RPC_EPMAP = GUID(0x9247bc61, 0xeb07, 0x47ee, [0x87, 0x2c, 0xbf, 0xd7, 0x8b, 0xfd, 0x16, 0x16]);
enum FWPM_LAYER_RPC_EP_ADD = GUID(0x618dffc7, 0xc450, 0x4943, [0x95, 0xdb, 0x99, 0xb4, 0xc1, 0x6a, 0x55, 0xd4]);
enum FWPM_LAYER_RPC_PROXY_CONN = GUID(0x94a4b50b, 0xba5c, 0x4f27, [0x90, 0x7a, 0x22, 0x9f, 0xac, 0xc, 0x2a, 0x7a]);
enum FWPM_LAYER_RPC_PROXY_IF = GUID(0xf8a38615, 0xe12c, 0x41ac, [0x98, 0xdf, 0x12, 0x1a, 0xd9, 0x81, 0xaa, 0xde]);
enum FWPM_LAYER_KM_AUTHORIZATION = GUID(0x4aa226e9, 0x9020, 0x45fb, [0x95, 0x6a, 0xc0, 0x24, 0x9d, 0x84, 0x11, 0x95]);
enum FWPM_LAYER_NAME_RESOLUTION_CACHE_V4 = GUID(0xc2aa681, 0x905b, 0x4ccd, [0xa4, 0x67, 0x4d, 0xd8, 0x11, 0xd0, 0x7b, 0x7b]);
enum FWPM_LAYER_NAME_RESOLUTION_CACHE_V6 = GUID(0x92d592fa, 0x6b01, 0x434a, [0x9d, 0xea, 0xd1, 0xe9, 0x6e, 0xa9, 0x7d, 0xa9]);
enum FWPM_LAYER_ALE_RESOURCE_RELEASE_V4 = GUID(0x74365cce, 0xccb0, 0x401a, [0xbf, 0xc1, 0xb8, 0x99, 0x34, 0xad, 0x7e, 0x15]);
enum FWPM_LAYER_ALE_RESOURCE_RELEASE_V6 = GUID(0xf4e5ce80, 0xedcc, 0x4e13, [0x8a, 0x2f, 0xb9, 0x14, 0x54, 0xbb, 0x5, 0x7b]);
enum FWPM_LAYER_ALE_ENDPOINT_CLOSURE_V4 = GUID(0xb4766427, 0xe2a2, 0x467a, [0xbd, 0x7e, 0xdb, 0xcd, 0x1b, 0xd8, 0x5a, 0x9]);
enum FWPM_LAYER_ALE_ENDPOINT_CLOSURE_V6 = GUID(0xbb536ccd, 0x4755, 0x4ba9, [0x9f, 0xf7, 0xf9, 0xed, 0xf8, 0x69, 0x9c, 0x7b]);
enum FWPM_LAYER_ALE_CONNECT_REDIRECT_V4 = GUID(0xc6e63c8c, 0xb784, 0x4562, [0xaa, 0x7d, 0xa, 0x67, 0xcf, 0xca, 0xf9, 0xa3]);
enum FWPM_LAYER_ALE_CONNECT_REDIRECT_V6 = GUID(0x587e54a7, 0x8046, 0x42ba, [0xa0, 0xaa, 0xb7, 0x16, 0x25, 0xf, 0xc7, 0xfd]);
enum FWPM_LAYER_ALE_BIND_REDIRECT_V4 = GUID(0x66978cad, 0xc704, 0x42ac, [0x86, 0xac, 0x7c, 0x1a, 0x23, 0x1b, 0xd2, 0x53]);
enum FWPM_LAYER_ALE_BIND_REDIRECT_V6 = GUID(0xbef02c9c, 0x606b, 0x4536, [0x8c, 0x26, 0x1c, 0x2f, 0xc7, 0xb6, 0x31, 0xd4]);
enum FWPM_LAYER_STREAM_PACKET_V4 = GUID(0xaf52d8ec, 0xcb2d, 0x44e5, [0xad, 0x92, 0xf8, 0xdc, 0x38, 0xd2, 0xeb, 0x29]);
enum FWPM_LAYER_STREAM_PACKET_V6 = GUID(0x779a8ca3, 0xf099, 0x468f, [0xb5, 0xd4, 0x83, 0x53, 0x5c, 0x46, 0x1c, 0x2]);
enum FWPM_LAYER_INBOUND_RESERVED2 = GUID(0xf4fb8d55, 0xc076, 0x46d8, [0xa2, 0xc7, 0x6a, 0x4c, 0x72, 0x2c, 0xa4, 0xed]);
enum FWPM_LAYER_OUTBOUND_NETWORK_CONNECTION_POLICY_V4 = GUID(0x37f317a, 0xd696, 0x494a, [0xbb, 0xa5, 0xbf, 0xfc, 0x26, 0x5e, 0x60, 0x52]);
enum FWPM_LAYER_OUTBOUND_NETWORK_CONNECTION_POLICY_V6 = GUID(0x22a4fdb1, 0x6d7e, 0x48ae, [0xae, 0x77, 0x37, 0x42, 0x52, 0x5c, 0x31, 0x19]);
enum FWPM_SUBLAYER_RPC_AUDIT = GUID(0x758c84f4, 0xfb48, 0x4de9, [0x9a, 0xeb, 0x3e, 0xd9, 0x55, 0x1a, 0xb1, 0xfd]);
enum FWPM_SUBLAYER_IPSEC_TUNNEL = GUID(0x83f299ed, 0x9ff4, 0x4967, [0xaf, 0xf4, 0xc3, 0x9, 0xf4, 0xda, 0xb8, 0x27]);
enum FWPM_SUBLAYER_UNIVERSAL = GUID(0xeebecc03, 0xced4, 0x4380, [0x81, 0x9a, 0x27, 0x34, 0x39, 0x7b, 0x2b, 0x74]);
enum FWPM_SUBLAYER_LIPS = GUID(0x1b75c0ce, 0xff60, 0x4711, [0xa7, 0xf, 0xb4, 0x95, 0x8c, 0xc3, 0xb2, 0xd0]);
enum FWPM_SUBLAYER_SECURE_SOCKET = GUID(0x15a66e17, 0x3f3c, 0x4f7b, [0xaa, 0x6c, 0x81, 0x2a, 0xa6, 0x13, 0xdd, 0x82]);
enum FWPM_SUBLAYER_TCP_CHIMNEY_OFFLOAD = GUID(0x337608b9, 0xb7d5, 0x4d5f, [0x82, 0xf9, 0x36, 0x18, 0x61, 0x8b, 0xc0, 0x58]);
enum FWPM_SUBLAYER_INSPECTION = GUID(0x877519e1, 0xe6a9, 0x41a5, [0x81, 0xb4, 0x8c, 0x4f, 0x11, 0x8e, 0x4a, 0x60]);
enum FWPM_SUBLAYER_TEREDO = GUID(0xba69dc66, 0x5176, 0x4979, [0x9c, 0x89, 0x26, 0xa7, 0xb4, 0x6a, 0x83, 0x27]);
enum FWPM_SUBLAYER_IPSEC_FORWARD_OUTBOUND_TUNNEL = GUID(0xa5082e73, 0x8f71, 0x4559, [0x8a, 0x9a, 0x10, 0x1c, 0xea, 0x4, 0xef, 0x87]);
enum FWPM_SUBLAYER_IPSEC_DOSP = GUID(0xe076d572, 0x5d3d, 0x48ef, [0x80, 0x2b, 0x90, 0x9e, 0xdd, 0xb0, 0x98, 0xbd]);
enum FWPM_SUBLAYER_TCP_TEMPLATES = GUID(0x24421dcf, 0xac5, 0x4caa, [0x9e, 0x14, 0x50, 0xf6, 0xe3, 0x63, 0x6a, 0xf0]);
enum FWPM_SUBLAYER_IPSEC_SECURITY_REALM = GUID(0x37a57701, 0x5884, 0x4964, [0x92, 0xb8, 0x3e, 0x70, 0x46, 0x88, 0xb0, 0xad]);
enum FWPM_SUBLAYER_MPSSVC_WSH = GUID(0xb3cdd441, 0xaf90, 0x41ba, [0xa7, 0x45, 0x7c, 0x60, 0x8, 0xff, 0x23, 0x0]);
enum FWPM_SUBLAYER_MPSSVC_WF = GUID(0xb3cdd441, 0xaf90, 0x41ba, [0xa7, 0x45, 0x7c, 0x60, 0x8, 0xff, 0x23, 0x1]);
enum FWPM_SUBLAYER_MPSSVC_QUARANTINE = GUID(0xb3cdd441, 0xaf90, 0x41ba, [0xa7, 0x45, 0x7c, 0x60, 0x8, 0xff, 0x23, 0x2]);
enum FWPM_SUBLAYER_MPSSVC_EDP = GUID(0x9a47e38, 0xfa97, 0x471b, [0xb1, 0x23, 0x18, 0xbc, 0xd7, 0xe6, 0x50, 0x71]);
enum FWPM_SUBLAYER_MPSSVC_TENANT_RESTRICTIONS = GUID(0x1ec6c7e1, 0xfdd9, 0x478a, [0xb5, 0x5f, 0xff, 0x8b, 0xa1, 0xd2, 0xc1, 0x7d]);
enum FWPM_SUBLAYER_MPSSVC_APP_ISOLATION = GUID(0xffe221c3, 0x92a8, 0x4564, [0xa5, 0x9f, 0xda, 0xfb, 0x70, 0x75, 0x60, 0x20]);
enum FWPM_CONDITION_INTERFACE_MAC_ADDRESS = GUID(0xf6e63dce, 0x1f4b, 0x4c6b, [0xb6, 0xef, 0x11, 0x65, 0xe7, 0x1f, 0x8e, 0xe7]);
enum FWPM_CONDITION_MAC_LOCAL_ADDRESS = GUID(0xd999e981, 0x7948, 0x4c83, [0xb7, 0x42, 0xc8, 0x4e, 0x3b, 0x67, 0x8f, 0x8f]);
enum FWPM_CONDITION_MAC_REMOTE_ADDRESS = GUID(0x408f2ed4, 0x3a70, 0x4b4d, [0x92, 0xa6, 0x41, 0x5a, 0xc2, 0xe, 0x2f, 0x12]);
enum FWPM_CONDITION_ETHER_TYPE = GUID(0xfd08948d, 0xa219, 0x4d52, [0xbb, 0x98, 0x1a, 0x55, 0x40, 0xee, 0x7b, 0x4e]);
enum FWPM_CONDITION_VLAN_ID = GUID(0x938eab21, 0x3618, 0x4e64, [0x9c, 0xa5, 0x21, 0x41, 0xeb, 0xda, 0x1c, 0xa2]);
enum FWPM_CONDITION_VSWITCH_TENANT_NETWORK_ID = GUID(0xdc04843c, 0x79e6, 0x4e44, [0xa0, 0x25, 0x65, 0xb9, 0xbb, 0xf, 0x9f, 0x94]);
enum FWPM_CONDITION_NDIS_PORT = GUID(0xdb7bb42b, 0x2dac, 0x4cd4, [0xa5, 0x9a, 0xe0, 0xbd, 0xce, 0x1e, 0x68, 0x34]);
enum FWPM_CONDITION_NDIS_MEDIA_TYPE = GUID(0xcb31cef1, 0x791d, 0x473b, [0x89, 0xd1, 0x61, 0xc5, 0x98, 0x43, 0x4, 0xa0]);
enum FWPM_CONDITION_NDIS_PHYSICAL_MEDIA_TYPE = GUID(0x34c79823, 0xc229, 0x44f2, [0xb8, 0x3c, 0x74, 0x2, 0x8, 0x82, 0xae, 0x77]);
enum FWPM_CONDITION_L2_FLAGS = GUID(0x7bc43cbf, 0x37ba, 0x45f1, [0xb7, 0x4a, 0x82, 0xff, 0x51, 0x8e, 0xeb, 0x10]);
enum FWPM_CONDITION_MAC_LOCAL_ADDRESS_TYPE = GUID(0xcc31355c, 0x3073, 0x4ffb, [0xa1, 0x4f, 0x79, 0x41, 0x5c, 0xb1, 0xea, 0xd1]);
enum FWPM_CONDITION_MAC_REMOTE_ADDRESS_TYPE = GUID(0x27fedb4, 0xf1c1, 0x4030, [0xb5, 0x64, 0xee, 0x77, 0x7f, 0xd8, 0x67, 0xea]);
enum FWPM_CONDITION_ALE_PACKAGE_ID = GUID(0x71bc78fa, 0xf17c, 0x4997, [0xa6, 0x2, 0x6a, 0xbb, 0x26, 0x1f, 0x35, 0x1c]);
enum FWPM_CONDITION_MAC_SOURCE_ADDRESS = GUID(0x7b795451, 0xf1f6, 0x4d05, [0xb7, 0xcb, 0x21, 0x77, 0x9d, 0x80, 0x23, 0x36]);
enum FWPM_CONDITION_MAC_DESTINATION_ADDRESS = GUID(0x4ea2a93, 0x858c, 0x4027, [0xb6, 0x13, 0xb4, 0x31, 0x80, 0xc7, 0x85, 0x9e]);
enum FWPM_CONDITION_MAC_SOURCE_ADDRESS_TYPE = GUID(0x5c1b72e4, 0x299e, 0x4437, [0xa2, 0x98, 0xbc, 0x3f, 0x1, 0x4b, 0x3d, 0xc2]);
enum FWPM_CONDITION_MAC_DESTINATION_ADDRESS_TYPE = GUID(0xae052932, 0xef42, 0x4e99, [0xb1, 0x29, 0xf3, 0xb3, 0x13, 0x9e, 0x34, 0xf7]);
enum FWPM_CONDITION_IP_SOURCE_PORT = GUID(0xa6afef91, 0x3df4, 0x4730, [0xa2, 0x14, 0xf5, 0x42, 0x6a, 0xeb, 0xf8, 0x21]);
enum FWPM_CONDITION_IP_DESTINATION_PORT = GUID(0xce6def45, 0x60fb, 0x4a7b, [0xa3, 0x4, 0xaf, 0x30, 0xa1, 0x17, 0x0, 0xe]);
enum FWPM_CONDITION_VSWITCH_ID = GUID(0xc4a414ba, 0x437b, 0x4de6, [0x99, 0x46, 0xd9, 0x9c, 0x1b, 0x95, 0xb3, 0x12]);
enum FWPM_CONDITION_VSWITCH_NETWORK_TYPE = GUID(0x11d48b4b, 0xe77a, 0x40b4, [0x91, 0x55, 0x39, 0x2c, 0x90, 0x6c, 0x26, 0x8]);
enum FWPM_CONDITION_VSWITCH_SOURCE_INTERFACE_ID = GUID(0x7f4ef24b, 0xb2c1, 0x4938, [0xba, 0x33, 0xa1, 0xec, 0xbe, 0xd5, 0x12, 0xba]);
enum FWPM_CONDITION_VSWITCH_DESTINATION_INTERFACE_ID = GUID(0x8ed48be4, 0xc926, 0x49f6, [0xa4, 0xf6, 0xef, 0x30, 0x30, 0xe3, 0xfc, 0x16]);
enum FWPM_CONDITION_VSWITCH_SOURCE_VM_ID = GUID(0x9c2a9ec2, 0x9fc6, 0x42bc, [0xbd, 0xd8, 0x40, 0x6d, 0x4d, 0xa0, 0xbe, 0x64]);
enum FWPM_CONDITION_VSWITCH_DESTINATION_VM_ID = GUID(0x6106aace, 0x4de1, 0x4c84, [0x96, 0x71, 0x36, 0x37, 0xf8, 0xbc, 0xf7, 0x31]);
enum FWPM_CONDITION_VSWITCH_SOURCE_INTERFACE_TYPE = GUID(0xe6b040a2, 0xedaf, 0x4c36, [0x90, 0x8b, 0xf2, 0xf5, 0x8a, 0xe4, 0x38, 0x7]);
enum FWPM_CONDITION_VSWITCH_DESTINATION_INTERFACE_TYPE = GUID(0xfa9b3f06, 0x2f1a, 0x4c57, [0x9e, 0x68, 0xa7, 0x9, 0x8b, 0x28, 0xdb, 0xfe]);
enum FWPM_CONDITION_ALE_SECURITY_ATTRIBUTE_FQBN_VALUE = GUID(0x37a57699, 0x5883, 0x4963, [0x92, 0xb8, 0x3e, 0x70, 0x46, 0x88, 0xb0, 0xad]);
enum FWPM_CONDITION_IPSEC_SECURITY_REALM_ID = GUID(0x37a57700, 0x5884, 0x4964, [0x92, 0xb8, 0x3e, 0x70, 0x46, 0x88, 0xb0, 0xad]);
enum FWPM_CONDITION_ALE_EFFECTIVE_NAME = GUID(0xb1277b9a, 0xb781, 0x40fc, [0x96, 0x71, 0xe5, 0xf1, 0xb9, 0x89, 0xf3, 0x4e]);
enum FWPM_CONDITION_IP_LOCAL_ADDRESS = GUID(0xd9ee00de, 0xc1ef, 0x4617, [0xbf, 0xe3, 0xff, 0xd8, 0xf5, 0xa0, 0x89, 0x57]);
enum FWPM_CONDITION_IP_REMOTE_ADDRESS = GUID(0xb235ae9a, 0x1d64, 0x49b8, [0xa4, 0x4c, 0x5f, 0xf3, 0xd9, 0x9, 0x50, 0x45]);
enum FWPM_CONDITION_IP_SOURCE_ADDRESS = GUID(0xae96897e, 0x2e94, 0x4bc9, [0xb3, 0x13, 0xb2, 0x7e, 0xe8, 0xe, 0x57, 0x4d]);
enum FWPM_CONDITION_IP_DESTINATION_ADDRESS = GUID(0x2d79133b, 0xb390, 0x45c6, [0x86, 0x99, 0xac, 0xac, 0xea, 0xaf, 0xed, 0x33]);
enum FWPM_CONDITION_IP_LOCAL_ADDRESS_TYPE = GUID(0x6ec7f6c4, 0x376b, 0x45d7, [0x9e, 0x9c, 0xd3, 0x37, 0xce, 0xdc, 0xd2, 0x37]);
enum FWPM_CONDITION_IP_DESTINATION_ADDRESS_TYPE = GUID(0x1ec1b7c9, 0x4eea, 0x4f5e, [0xb9, 0xef, 0x76, 0xbe, 0xaa, 0xaf, 0x17, 0xee]);
enum FWPM_CONDITION_IP_NEXTHOP_ADDRESS = GUID(0xeabe448a, 0xa711, 0x4d64, [0x85, 0xb7, 0x3f, 0x76, 0xb6, 0x52, 0x99, 0xc7]);
enum FWPM_CONDITION_IP_LOCAL_INTERFACE = GUID(0x4cd62a49, 0x59c3, 0x4969, [0xb7, 0xf3, 0xbd, 0xa5, 0xd3, 0x28, 0x90, 0xa4]);
enum FWPM_CONDITION_IP_ARRIVAL_INTERFACE = GUID(0x618a9b6d, 0x386b, 0x4136, [0xad, 0x6e, 0xb5, 0x15, 0x87, 0xcf, 0xb1, 0xcd]);
enum FWPM_CONDITION_ARRIVAL_INTERFACE_TYPE = GUID(0x89f990de, 0xe798, 0x4e6d, [0xab, 0x76, 0x7c, 0x95, 0x58, 0x29, 0x2e, 0x6f]);
enum FWPM_CONDITION_ARRIVAL_TUNNEL_TYPE = GUID(0x511166dc, 0x7a8c, 0x4aa7, [0xb5, 0x33, 0x95, 0xab, 0x59, 0xfb, 0x3, 0x40]);
enum FWPM_CONDITION_ARRIVAL_INTERFACE_INDEX = GUID(0xcc088db3, 0x1792, 0x4a71, [0xb0, 0xf9, 0x3, 0x7d, 0x21, 0xcd, 0x82, 0x8b]);
enum FWPM_CONDITION_NEXTHOP_SUB_INTERFACE_INDEX = GUID(0xef8a6122, 0x577, 0x45a7, [0x9a, 0xaf, 0x82, 0x5f, 0xbe, 0xb4, 0xfb, 0x95]);
enum FWPM_CONDITION_IP_NEXTHOP_INTERFACE = GUID(0x93ae8f5b, 0x7f6f, 0x4719, [0x98, 0xc8, 0x14, 0xe9, 0x74, 0x29, 0xef, 0x4]);
enum FWPM_CONDITION_NEXTHOP_INTERFACE_TYPE = GUID(0x97537c6c, 0xd9a3, 0x4767, [0xa3, 0x81, 0xe9, 0x42, 0x67, 0x5c, 0xd9, 0x20]);
enum FWPM_CONDITION_NEXTHOP_TUNNEL_TYPE = GUID(0x72b1a111, 0x987b, 0x4720, [0x99, 0xdd, 0xc7, 0xc5, 0x76, 0xfa, 0x2d, 0x4c]);
enum FWPM_CONDITION_NEXTHOP_INTERFACE_INDEX = GUID(0x138e6888, 0x7ab8, 0x4d65, [0x9e, 0xe8, 0x5, 0x91, 0xbc, 0xf6, 0xa4, 0x94]);
enum FWPM_CONDITION_ORIGINAL_PROFILE_ID = GUID(0x46ea1551, 0x2255, 0x492b, [0x80, 0x19, 0xaa, 0xbe, 0xee, 0x34, 0x9f, 0x40]);
enum FWPM_CONDITION_CURRENT_PROFILE_ID = GUID(0xab3033c9, 0xc0e3, 0x4759, [0x93, 0x7d, 0x57, 0x58, 0xc6, 0x5d, 0x4a, 0xe3]);
enum FWPM_CONDITION_LOCAL_INTERFACE_PROFILE_ID = GUID(0x4ebf7562, 0x9f18, 0x4d06, [0x99, 0x41, 0xa7, 0xa6, 0x25, 0x74, 0x4d, 0x71]);
enum FWPM_CONDITION_ARRIVAL_INTERFACE_PROFILE_ID = GUID(0xcdfe6aab, 0xc083, 0x4142, [0x86, 0x79, 0xc0, 0x8f, 0x95, 0x32, 0x9c, 0x61]);
enum FWPM_CONDITION_NEXTHOP_INTERFACE_PROFILE_ID = GUID(0xd7ff9a56, 0xcdaa, 0x472b, [0x84, 0xdb, 0xd2, 0x39, 0x63, 0xc1, 0xd1, 0xbf]);
enum FWPM_CONDITION_REAUTHORIZE_REASON = GUID(0x11205e8c, 0x11ae, 0x457a, [0x8a, 0x44, 0x47, 0x70, 0x26, 0xdd, 0x76, 0x4a]);
enum FWPM_CONDITION_ORIGINAL_ICMP_TYPE = GUID(0x76dfdbe, 0xc56c, 0x4f72, [0xae, 0x8a, 0x2c, 0xfe, 0x7e, 0x5c, 0x82, 0x86]);
enum FWPM_CONDITION_IP_PHYSICAL_ARRIVAL_INTERFACE = GUID(0xda50d5c8, 0xfa0d, 0x4c89, [0xb0, 0x32, 0x6e, 0x62, 0x13, 0x6d, 0x1e, 0x96]);
enum FWPM_CONDITION_IP_PHYSICAL_NEXTHOP_INTERFACE = GUID(0xf09bd5ce, 0x5150, 0x48be, [0xb0, 0x98, 0xc2, 0x51, 0x52, 0xfb, 0x1f, 0x92]);
enum FWPM_CONDITION_INTERFACE_QUARANTINE_EPOCH = GUID(0xcce68d5e, 0x53b, 0x43a8, [0x9a, 0x6f, 0x33, 0x38, 0x4c, 0x28, 0xe4, 0xf6]);
enum FWPM_CONDITION_INTERFACE_TYPE = GUID(0xdaf8cd14, 0xe09e, 0x4c93, [0xa5, 0xae, 0xc5, 0xc1, 0x3b, 0x73, 0xff, 0xca]);
enum FWPM_CONDITION_TUNNEL_TYPE = GUID(0x77a40437, 0x8779, 0x4868, [0xa2, 0x61, 0xf5, 0xa9, 0x2, 0xf1, 0xc0, 0xcd]);
enum FWPM_CONDITION_IP_FORWARD_INTERFACE = GUID(0x1076b8a5, 0x6323, 0x4c5e, [0x98, 0x10, 0xe8, 0xd3, 0xfc, 0x9e, 0x61, 0x36]);
enum FWPM_CONDITION_IP_PROTOCOL = GUID(0x3971ef2b, 0x623e, 0x4f9a, [0x8c, 0xb1, 0x6e, 0x79, 0xb8, 0x6, 0xb9, 0xa7]);
enum FWPM_CONDITION_IP_LOCAL_PORT = GUID(0xc1ba1af, 0x5765, 0x453f, [0xaf, 0x22, 0xa8, 0xf7, 0x91, 0xac, 0x77, 0x5b]);
enum FWPM_CONDITION_IP_REMOTE_PORT = GUID(0xc35a604d, 0xd22b, 0x4e1a, [0x91, 0xb4, 0x68, 0xf6, 0x74, 0xee, 0x67, 0x4b]);
enum FWPM_CONDITION_EMBEDDED_LOCAL_ADDRESS_TYPE = GUID(0x4672a468, 0x8a0a, 0x4202, [0xab, 0xb4, 0x84, 0x9e, 0x92, 0xe6, 0x68, 0x9]);
enum FWPM_CONDITION_EMBEDDED_REMOTE_ADDRESS = GUID(0x77ee4b39, 0x3273, 0x4671, [0xb6, 0x3b, 0xab, 0x6f, 0xeb, 0x66, 0xee, 0xb6]);
enum FWPM_CONDITION_EMBEDDED_PROTOCOL = GUID(0x7784107, 0xa29e, 0x4c7b, [0x9e, 0xc7, 0x29, 0xc4, 0x4a, 0xfa, 0xfd, 0xbc]);
enum FWPM_CONDITION_EMBEDDED_LOCAL_PORT = GUID(0xbfca394d, 0xacdb, 0x484e, [0xb8, 0xe6, 0x2a, 0xff, 0x79, 0x75, 0x73, 0x45]);
enum FWPM_CONDITION_EMBEDDED_REMOTE_PORT = GUID(0xcae4d6a1, 0x2968, 0x40ed, [0xa4, 0xce, 0x54, 0x71, 0x60, 0xdd, 0xa8, 0x8d]);
enum FWPM_CONDITION_FLAGS = GUID(0x632ce23b, 0x5167, 0x435c, [0x86, 0xd7, 0xe9, 0x3, 0x68, 0x4a, 0xa8, 0xc]);
enum FWPM_CONDITION_DIRECTION = GUID(0x8784c146, 0xca97, 0x44d6, [0x9f, 0xd1, 0x19, 0xfb, 0x18, 0x40, 0xcb, 0xf7]);
enum FWPM_CONDITION_INTERFACE_INDEX = GUID(0x667fd755, 0xd695, 0x434a, [0x8a, 0xf5, 0xd3, 0x83, 0x5a, 0x12, 0x59, 0xbc]);
enum FWPM_CONDITION_SUB_INTERFACE_INDEX = GUID(0xcd42473, 0xd621, 0x4be3, [0xae, 0x8c, 0x72, 0xa3, 0x48, 0xd2, 0x83, 0xe1]);
enum FWPM_CONDITION_SOURCE_INTERFACE_INDEX = GUID(0x2311334d, 0xc92d, 0x45bf, [0x94, 0x96, 0xed, 0xf4, 0x47, 0x82, 0xe, 0x2d]);
enum FWPM_CONDITION_SOURCE_SUB_INTERFACE_INDEX = GUID(0x55edd9d, 0xacd2, 0x4361, [0x8d, 0xab, 0xf9, 0x52, 0x5d, 0x97, 0x66, 0x2f]);
enum FWPM_CONDITION_DESTINATION_INTERFACE_INDEX = GUID(0x35cf6522, 0x4139, 0x45ee, [0xa0, 0xd5, 0x67, 0xb8, 0x9, 0x49, 0xd8, 0x79]);
enum FWPM_CONDITION_DESTINATION_SUB_INTERFACE_INDEX = GUID(0x2b7d4399, 0xd4c7, 0x4738, [0xa2, 0xf5, 0xe9, 0x94, 0xb4, 0x3d, 0xa3, 0x88]);
enum FWPM_CONDITION_ALE_APP_ID = GUID(0xd78e1e87, 0x8644, 0x4ea5, [0x94, 0x37, 0xd8, 0x9, 0xec, 0xef, 0xc9, 0x71]);
enum FWPM_CONDITION_ALE_ORIGINAL_APP_ID = GUID(0xe6cd086, 0xe1fb, 0x4212, [0x84, 0x2f, 0x8a, 0x9f, 0x99, 0x3f, 0xb3, 0xf6]);
enum FWPM_CONDITION_ALE_USER_ID = GUID(0xaf043a0a, 0xb34d, 0x4f86, [0x97, 0x9c, 0xc9, 0x3, 0x71, 0xaf, 0x6e, 0x66]);
enum FWPM_CONDITION_ALE_REMOTE_USER_ID = GUID(0xf63073b7, 0x189, 0x4ab0, [0x95, 0xa4, 0x61, 0x23, 0xcb, 0xfa, 0xb8, 0x62]);
enum FWPM_CONDITION_ALE_REMOTE_MACHINE_ID = GUID(0x1aa47f51, 0x7f93, 0x4508, [0xa2, 0x71, 0x81, 0xab, 0xb0, 0xc, 0x9c, 0xab]);
enum FWPM_CONDITION_ALE_PROMISCUOUS_MODE = GUID(0x1c974776, 0x7182, 0x46e9, [0xaf, 0xd3, 0xb0, 0x29, 0x10, 0xe3, 0x3, 0x34]);
enum FWPM_CONDITION_ALE_SIO_FIREWALL_SYSTEM_PORT = GUID(0xb9f4e088, 0xcb98, 0x4efb, [0xa2, 0xc7, 0xad, 0x7, 0x33, 0x26, 0x43, 0xdb]);
enum FWPM_CONDITION_ALE_REAUTH_REASON = GUID(0xb482d227, 0x1979, 0x4a98, [0x80, 0x44, 0x18, 0xbb, 0xe6, 0x23, 0x75, 0x42]);
enum FWPM_CONDITION_ALE_NAP_CONTEXT = GUID(0x46275a9d, 0xc03f, 0x4d77, [0xb7, 0x84, 0x1c, 0x57, 0xf4, 0xd0, 0x27, 0x53]);
enum FWPM_CONDITION_KM_AUTH_NAP_CONTEXT = GUID(0x35d0ea0e, 0x15ca, 0x492b, [0x90, 0xe, 0x97, 0xfd, 0x46, 0x35, 0x2c, 0xce]);
enum FWPM_CONDITION_REMOTE_USER_TOKEN = GUID(0x9bf0ee66, 0x6c9, 0x41b9, [0x84, 0xda, 0x28, 0x8c, 0xb4, 0x3a, 0xf5, 0x1f]);
enum FWPM_CONDITION_RPC_IF_UUID = GUID(0x7c9c7d9f, 0x75, 0x4d35, [0xa0, 0xd1, 0x83, 0x11, 0xc4, 0xcf, 0x6a, 0xf1]);
enum FWPM_CONDITION_RPC_IF_VERSION = GUID(0xeabfd9b7, 0x1262, 0x4a2e, [0xad, 0xaa, 0x5f, 0x96, 0xf6, 0xfe, 0x32, 0x6d]);
enum FWPM_CONDITION_RPC_IF_FLAG = GUID(0x238a8a32, 0x3199, 0x467d, [0x87, 0x1c, 0x27, 0x26, 0x21, 0xab, 0x38, 0x96]);
enum FWPM_CONDITION_DCOM_APP_ID = GUID(0xff2e7b4d, 0x3112, 0x4770, [0xb6, 0x36, 0x4d, 0x24, 0xae, 0x3a, 0x6a, 0xf2]);
enum FWPM_CONDITION_IMAGE_NAME = GUID(0xd024de4d, 0xdeaa, 0x4317, [0x9c, 0x85, 0xe4, 0xe, 0xf6, 0xe1, 0x40, 0xc3]);
enum FWPM_CONDITION_RPC_PROTOCOL = GUID(0x2717bc74, 0x3a35, 0x4ce7, [0xb7, 0xef, 0xc8, 0x38, 0xfa, 0xbd, 0xec, 0x45]);
enum FWPM_CONDITION_RPC_AUTH_TYPE = GUID(0xdaba74ab, 0xd67, 0x43e7, [0x98, 0x6e, 0x75, 0xb8, 0x4f, 0x82, 0xf5, 0x94]);
enum FWPM_CONDITION_RPC_AUTH_LEVEL = GUID(0xe5a0aed5, 0x59ac, 0x46ea, [0xbe, 0x5, 0xa5, 0xf0, 0x5e, 0xcf, 0x44, 0x6e]);
enum FWPM_CONDITION_SEC_ENCRYPT_ALGORITHM = GUID(0xd306ef0, 0xe974, 0x4f74, [0xb5, 0xc7, 0x59, 0x1b, 0xd, 0xa7, 0xd5, 0x62]);
enum FWPM_CONDITION_SEC_KEY_SIZE = GUID(0x4772183b, 0xccf8, 0x4aeb, [0xbc, 0xe1, 0xc6, 0xc6, 0x16, 0x1c, 0x8f, 0xe4]);
enum FWPM_CONDITION_IP_LOCAL_ADDRESS_V4 = GUID(0x3a629cb, 0x6e52, 0x49f8, [0x9c, 0x41, 0x57, 0x9, 0x63, 0x3c, 0x9, 0xcf]);
enum FWPM_CONDITION_IP_LOCAL_ADDRESS_V6 = GUID(0x2381be84, 0x7524, 0x45b3, [0xa0, 0x5b, 0x1e, 0x63, 0x7d, 0x9c, 0x7a, 0x6a]);
enum FWPM_CONDITION_PIPE = GUID(0x1bd0741d, 0xe3df, 0x4e24, [0x86, 0x34, 0x76, 0x20, 0x46, 0xee, 0xf6, 0xeb]);
enum FWPM_CONDITION_IP_REMOTE_ADDRESS_V4 = GUID(0x1febb610, 0x3bcc, 0x45e1, [0xbc, 0x36, 0x2e, 0x6, 0x7e, 0x2c, 0xb1, 0x86]);
enum FWPM_CONDITION_IP_REMOTE_ADDRESS_V6 = GUID(0x246e1d8c, 0x8bee, 0x4018, [0x9b, 0x98, 0x31, 0xd4, 0x58, 0x2f, 0x33, 0x61]);
enum FWPM_CONDITION_PROCESS_WITH_RPC_IF_UUID = GUID(0xe31180a8, 0xbbbd, 0x4d14, [0xa6, 0x5e, 0x71, 0x57, 0xb0, 0x62, 0x33, 0xbb]);
enum FWPM_CONDITION_RPC_EP_VALUE = GUID(0xdccea0b9, 0x886, 0x4360, [0x9c, 0x6a, 0xab, 0x4, 0x3a, 0x24, 0xfb, 0xa9]);
enum FWPM_CONDITION_RPC_EP_FLAGS = GUID(0x218b814a, 0xa39, 0x49b8, [0x8e, 0x71, 0xc2, 0xc, 0x39, 0xc7, 0xdd, 0x2e]);
enum FWPM_CONDITION_CLIENT_TOKEN = GUID(0xc228fc1e, 0x403a, 0x4478, [0xbe, 0x5, 0xc9, 0xba, 0xa4, 0xc0, 0x5a, 0xce]);
enum FWPM_CONDITION_RPC_SERVER_NAME = GUID(0xb605a225, 0xc3b3, 0x48c7, [0x98, 0x33, 0x7a, 0xef, 0xa9, 0x52, 0x75, 0x46]);
enum FWPM_CONDITION_RPC_SERVER_PORT = GUID(0x8090f645, 0x9ad5, 0x4e3b, [0x9f, 0x9f, 0x80, 0x23, 0xca, 0x9, 0x79, 0x9]);
enum FWPM_CONDITION_RPC_PROXY_AUTH_TYPE = GUID(0x40953fe2, 0x8565, 0x4759, [0x84, 0x88, 0x17, 0x71, 0xb4, 0xb4, 0xb5, 0xdb]);
enum FWPM_CONDITION_CLIENT_CERT_KEY_LENGTH = GUID(0xa3ec00c7, 0x5f4, 0x4df7, [0x91, 0xf2, 0x5f, 0x60, 0xd9, 0x1f, 0xf4, 0x43]);
enum FWPM_CONDITION_CLIENT_CERT_OID = GUID(0xc491ad5e, 0xf882, 0x4283, [0xb9, 0x16, 0x43, 0x6b, 0x10, 0x3f, 0xf4, 0xad]);
enum FWPM_CONDITION_NET_EVENT_TYPE = GUID(0x206e9996, 0x490e, 0x40cf, [0xb8, 0x31, 0xb3, 0x86, 0x41, 0xeb, 0x6f, 0xcb]);
enum FWPM_CONDITION_PEER_NAME = GUID(0x9b539082, 0xeb90, 0x4186, [0xa6, 0xcc, 0xde, 0x5b, 0x63, 0x23, 0x50, 0x16]);
enum FWPM_CONDITION_REMOTE_ID = GUID(0xf68166fd, 0x682, 0x4c89, [0xb8, 0xf5, 0x86, 0x43, 0x6c, 0x7e, 0xf9, 0xb7]);
enum FWPM_CONDITION_AUTHENTICATION_TYPE = GUID(0xeb458cd5, 0xda7b, 0x4ef9, [0x8d, 0x43, 0x7b, 0xa, 0x84, 0x3, 0x32, 0xf2]);
enum FWPM_CONDITION_KM_TYPE = GUID(0xff0f5f49, 0xceb, 0x481b, [0x86, 0x38, 0x14, 0x79, 0x79, 0x1f, 0x3f, 0x2c]);
enum FWPM_CONDITION_KM_MODE = GUID(0xfeef4582, 0xef8f, 0x4f7b, [0x85, 0x8b, 0x90, 0x77, 0xd1, 0x22, 0xde, 0x47]);
enum FWPM_CONDITION_IPSEC_POLICY_KEY = GUID(0xad37dee3, 0x722f, 0x45cc, [0xa4, 0xe3, 0x6, 0x80, 0x48, 0x12, 0x44, 0x52]);
enum FWPM_CONDITION_QM_MODE = GUID(0xf64fc6d1, 0xf9cb, 0x43d2, [0x8a, 0x5f, 0xe1, 0x3b, 0xc8, 0x94, 0xf2, 0x65]);
enum FWPM_CONDITION_COMPARTMENT_ID = GUID(0x35a791ab, 0x4ac, 0x4ff2, [0xa6, 0xbb, 0xda, 0x6c, 0xfa, 0xc7, 0x18, 0x6]);
enum FWPM_CONDITION_RESERVED0 = GUID(0x678f4deb, 0x45af, 0x4882, [0x93, 0xfe, 0x19, 0xd4, 0x72, 0x9d, 0x98, 0x34]);
enum FWPM_CONDITION_RESERVED1 = GUID(0xd818f827, 0x5c69, 0x48eb, [0xbf, 0x80, 0xd8, 0x6b, 0x17, 0x75, 0x5f, 0x97]);
enum FWPM_CONDITION_RESERVED2 = GUID(0x53d4123d, 0xe15b, 0x4e84, [0xb7, 0xa8, 0xdc, 0xe1, 0x6f, 0x7b, 0x62, 0xd9]);
enum FWPM_CONDITION_RESERVED3 = GUID(0x7f6e8ca3, 0x6606, 0x4932, [0x97, 0xc7, 0xe1, 0xf2, 0x7, 0x10, 0xaf, 0x3b]);
enum FWPM_CONDITION_RESERVED4 = GUID(0x5f58e642, 0xb937, 0x495e, [0xa9, 0x4b, 0xf6, 0xb0, 0x51, 0xa4, 0x92, 0x50]);
enum FWPM_CONDITION_RESERVED5 = GUID(0x9ba8f6cd, 0xf77c, 0x43e6, [0x88, 0x47, 0x11, 0x93, 0x9d, 0xc5, 0xdb, 0x5a]);
enum FWPM_CONDITION_RESERVED6 = GUID(0xf13d84bd, 0x59d5, 0x44c4, [0x88, 0x17, 0x5e, 0xcd, 0xae, 0x18, 0x5, 0xbd]);
enum FWPM_CONDITION_RESERVED7 = GUID(0x65a0f930, 0x45dd, 0x4983, [0xaa, 0x33, 0xef, 0xc7, 0xb6, 0x11, 0xaf, 0x8]);
enum FWPM_CONDITION_RESERVED8 = GUID(0x4f424974, 0xc12, 0x4816, [0x9b, 0x47, 0x9a, 0x54, 0x7d, 0xb3, 0x9a, 0x32]);
enum FWPM_CONDITION_RESERVED9 = GUID(0xce78e10f, 0x13ff, 0x4c70, [0x86, 0x43, 0x36, 0xad, 0x18, 0x79, 0xaf, 0xa3]);
enum FWPM_CONDITION_RESERVED10 = GUID(0xb979e282, 0xd621, 0x4c8c, [0xb1, 0x84, 0xb1, 0x5, 0xa6, 0x1c, 0x36, 0xce]);
enum FWPM_CONDITION_RESERVED11 = GUID(0x2d62ee4d, 0x23d, 0x411f, [0x95, 0x82, 0x43, 0xac, 0xbb, 0x79, 0x59, 0x75]);
enum FWPM_CONDITION_RESERVED12 = GUID(0xa3677c32, 0x7e35, 0x4ddc, [0x93, 0xda, 0xe8, 0xc3, 0x3f, 0xc9, 0x23, 0xc7]);
enum FWPM_CONDITION_RESERVED13 = GUID(0x335a3e90, 0x84aa, 0x42f5, [0x9e, 0x6f, 0x59, 0x30, 0x95, 0x36, 0xa4, 0x4c]);
enum FWPM_CONDITION_RESERVED14 = GUID(0x30e44da2, 0x2f1a, 0x4116, [0xa5, 0x59, 0xf9, 0x7, 0xde, 0x83, 0x60, 0x4a]);
enum FWPM_CONDITION_RESERVED15 = GUID(0xbab8340f, 0xafe0, 0x43d1, [0x80, 0xd8, 0x5c, 0xa4, 0x56, 0x96, 0x2d, 0xe3]);
enum FWPM_PROVIDER_IKEEXT = GUID(0x10ad9216, 0xccde, 0x456c, [0x8b, 0x16, 0xe9, 0xf0, 0x4e, 0x60, 0xa9, 0xb]);
enum FWPM_PROVIDER_IPSEC_DOSP_CONFIG = GUID(0x3c6c05a9, 0xc05c, 0x4bb9, [0x83, 0x38, 0x23, 0x27, 0x81, 0x4c, 0xe8, 0xbf]);
enum FWPM_PROVIDER_TCP_CHIMNEY_OFFLOAD = GUID(0x896aa19e, 0x9a34, 0x4bcb, [0xae, 0x79, 0xbe, 0xb9, 0x12, 0x7c, 0x84, 0xb9]);
enum FWPM_PROVIDER_TCP_TEMPLATES = GUID(0x76cfcd30, 0x3394, 0x432d, [0xbe, 0xd3, 0x44, 0x1a, 0xe5, 0xe, 0x63, 0xc3]);
enum FWPM_PROVIDER_MPSSVC_WSH = GUID(0x4b153735, 0x1049, 0x4480, [0xaa, 0xb4, 0xd1, 0xb9, 0xbd, 0xc0, 0x37, 0x10]);
enum FWPM_PROVIDER_MPSSVC_WF = GUID(0xdecc16ca, 0x3f33, 0x4346, [0xbe, 0x1e, 0x8f, 0xb4, 0xae, 0xf, 0x3d, 0x62]);
enum FWPM_PROVIDER_MPSSVC_EDP = GUID(0xa90296f7, 0x46b8, 0x4457, [0x8f, 0x84, 0xb0, 0x5e, 0x5, 0xd3, 0xc6, 0x22]);
enum FWPM_PROVIDER_MPSSVC_TENANT_RESTRICTIONS = GUID(0xd0718ff9, 0x44da, 0x4f50, [0x9d, 0xc2, 0xc9, 0x63, 0xa4, 0x24, 0x76, 0x13]);
enum FWPM_PROVIDER_MPSSVC_APP_ISOLATION = GUID(0x3cc2631f, 0x2d5d, 0x43a0, [0xb1, 0x74, 0x61, 0x48, 0x37, 0xd8, 0x63, 0xa1]);
enum FWPM_CALLOUT_IPSEC_INBOUND_TRANSPORT_V4 = GUID(0x5132900d, 0x5e84, 0x4b5f, [0x80, 0xe4, 0x1, 0x74, 0x1e, 0x81, 0xff, 0x10]);
enum FWPM_CALLOUT_IPSEC_INBOUND_TRANSPORT_V6 = GUID(0x49d3ac92, 0x2a6c, 0x4dcf, [0x95, 0x5f, 0x1c, 0x3b, 0xe0, 0x9, 0xdd, 0x99]);
enum FWPM_CALLOUT_IPSEC_OUTBOUND_TRANSPORT_V4 = GUID(0x4b46bf0a, 0x4523, 0x4e57, [0xaa, 0x38, 0xa8, 0x79, 0x87, 0xc9, 0x10, 0xd9]);
enum FWPM_CALLOUT_IPSEC_OUTBOUND_TRANSPORT_V6 = GUID(0x38d87722, 0xad83, 0x4f11, [0xa9, 0x1f, 0xdf, 0xf, 0xb0, 0x77, 0x22, 0x5b]);
enum FWPM_CALLOUT_IPSEC_INBOUND_TUNNEL_V4 = GUID(0x191a8a46, 0xbf8, 0x46cf, [0xb0, 0x45, 0x4b, 0x45, 0xdf, 0xa6, 0xa3, 0x24]);
enum FWPM_CALLOUT_IPSEC_INBOUND_TUNNEL_V6 = GUID(0x80c342e3, 0x1e53, 0x4d6f, [0x9b, 0x44, 0x3, 0xdf, 0x5a, 0xee, 0xe1, 0x54]);
enum FWPM_CALLOUT_IPSEC_OUTBOUND_TUNNEL_V4 = GUID(0x70a4196c, 0x835b, 0x4fb0, [0x98, 0xe8, 0x7, 0x5f, 0x4d, 0x97, 0x7d, 0x46]);
enum FWPM_CALLOUT_IPSEC_OUTBOUND_TUNNEL_V6 = GUID(0xf1835363, 0xa6a5, 0x4e62, [0xb1, 0x80, 0x23, 0xdb, 0x78, 0x9d, 0x8d, 0xa6]);
enum FWPM_CALLOUT_IPSEC_FORWARD_INBOUND_TUNNEL_V4 = GUID(0x28829633, 0xc4f0, 0x4e66, [0x87, 0x3f, 0x84, 0x4d, 0xb2, 0xa8, 0x99, 0xc7]);
enum FWPM_CALLOUT_IPSEC_FORWARD_INBOUND_TUNNEL_V6 = GUID(0xaf50bec2, 0xc686, 0x429a, [0x88, 0x4d, 0xb7, 0x44, 0x43, 0xe7, 0xb0, 0xb4]);
enum FWPM_CALLOUT_IPSEC_FORWARD_OUTBOUND_TUNNEL_V4 = GUID(0xfb532136, 0x15cb, 0x440b, [0x93, 0x7c, 0x17, 0x17, 0xca, 0x32, 0xc, 0x40]);
enum FWPM_CALLOUT_IPSEC_FORWARD_OUTBOUND_TUNNEL_V6 = GUID(0xdae640cc, 0xe021, 0x4bee, [0x9e, 0xb6, 0xa4, 0x8b, 0x27, 0x5c, 0x8c, 0x1d]);
enum FWPM_CALLOUT_IPSEC_INBOUND_INITIATE_SECURE_V4 = GUID(0x7dff309b, 0xba7d, 0x4aba, [0x91, 0xaa, 0xae, 0x5c, 0x66, 0x40, 0xc9, 0x44]);
enum FWPM_CALLOUT_IPSEC_INBOUND_INITIATE_SECURE_V6 = GUID(0xa9a0d6d9, 0xc58c, 0x474e, [0x8a, 0xeb, 0x3c, 0xfe, 0x99, 0xd6, 0xd5, 0x3d]);
enum FWPM_CALLOUT_IPSEC_INBOUND_TUNNEL_ALE_ACCEPT_V4 = GUID(0x3df6e7de, 0xfd20, 0x48f2, [0x9f, 0x26, 0xf8, 0x54, 0x44, 0x4c, 0xba, 0x79]);
enum FWPM_CALLOUT_IPSEC_INBOUND_TUNNEL_ALE_ACCEPT_V6 = GUID(0xa1e392d3, 0x72ac, 0x47bb, [0x87, 0xa7, 0x1, 0x22, 0xc6, 0x94, 0x34, 0xab]);
enum FWPM_CALLOUT_IPSEC_ALE_CONNECT_V4 = GUID(0x6ac141fc, 0xf75d, 0x4203, [0xb9, 0xc8, 0x48, 0xe6, 0x14, 0x9c, 0x27, 0x12]);
enum FWPM_CALLOUT_IPSEC_ALE_CONNECT_V6 = GUID(0x4c0dda05, 0xe31f, 0x4666, [0x90, 0xb0, 0xb3, 0xdf, 0xad, 0x34, 0x12, 0x9a]);
enum FWPM_CALLOUT_IPSEC_DOSP_FORWARD_V6 = GUID(0x6d08a342, 0xdb9e, 0x4fbe, [0x9e, 0xd2, 0x57, 0x37, 0x4c, 0xe8, 0x9f, 0x79]);
enum FWPM_CALLOUT_IPSEC_DOSP_FORWARD_V4 = GUID(0x2fcb56ec, 0xcd37, 0x4b4f, [0xb1, 0x8, 0x62, 0xc2, 0xb1, 0x85, 0xa, 0xc]);
enum FWPM_CALLOUT_WFP_TRANSPORT_LAYER_V4_SILENT_DROP = GUID(0xeda08606, 0x2494, 0x4d78, [0x89, 0xbc, 0x67, 0x83, 0x7c, 0x3, 0xb9, 0x69]);
enum FWPM_CALLOUT_WFP_TRANSPORT_LAYER_V6_SILENT_DROP = GUID(0x8693cc74, 0xa075, 0x4156, [0xb4, 0x76, 0x92, 0x86, 0xee, 0xce, 0x81, 0x4e]);
enum FWPM_CALLOUT_TCP_CHIMNEY_CONNECT_LAYER_V4 = GUID(0xf3e10ab3, 0x2c25, 0x4279, [0xac, 0x36, 0xc3, 0xf, 0xc1, 0x81, 0xbe, 0xc4]);
enum FWPM_CALLOUT_TCP_CHIMNEY_CONNECT_LAYER_V6 = GUID(0x39e22085, 0xa341, 0x42fc, [0xa2, 0x79, 0xae, 0xc9, 0x4e, 0x68, 0x9c, 0x56]);
enum FWPM_CALLOUT_TCP_CHIMNEY_ACCEPT_LAYER_V4 = GUID(0xe183ecb2, 0x3a7f, 0x4b54, [0x8a, 0xd9, 0x76, 0x5, 0xe, 0xd8, 0x80, 0xca]);
enum FWPM_CALLOUT_TCP_CHIMNEY_ACCEPT_LAYER_V6 = GUID(0x378cf41, 0xbf98, 0x4603, [0x81, 0xf2, 0x7f, 0x12, 0x58, 0x60, 0x79, 0xf6]);
enum FWPM_CALLOUT_SET_OPTIONS_AUTH_CONNECT_LAYER_V4 = GUID(0xbc582280, 0x1677, 0x41e9, [0x94, 0xab, 0xc2, 0xfc, 0xb1, 0x5c, 0x2e, 0xeb]);
enum FWPM_CALLOUT_SET_OPTIONS_AUTH_CONNECT_LAYER_V6 = GUID(0x98e5373c, 0xb884, 0x490f, [0xb6, 0x5f, 0x2f, 0x6a, 0x4a, 0x57, 0x51, 0x95]);
enum FWPM_CALLOUT_SET_OPTIONS_AUTH_RECV_ACCEPT_LAYER_V4 = GUID(0x2d55f008, 0xc01, 0x4f92, [0xb2, 0x6e, 0xa0, 0x8a, 0x94, 0x56, 0x9b, 0x8d]);
enum FWPM_CALLOUT_SET_OPTIONS_AUTH_RECV_ACCEPT_LAYER_V6 = GUID(0x63018537, 0xf281, 0x4dc4, [0x83, 0xd3, 0x8d, 0xec, 0x18, 0xb7, 0xad, 0xe2]);
enum FWPM_CALLOUT_RESERVED_AUTH_CONNECT_LAYER_V4 = GUID(0x288b524d, 0x566, 0x4e19, [0xb6, 0x12, 0x8f, 0x44, 0x1a, 0x2e, 0x59, 0x49]);
enum FWPM_CALLOUT_RESERVED_AUTH_CONNECT_LAYER_V6 = GUID(0xb84b92, 0x2b5e, 0x4b71, [0xab, 0xe, 0xaa, 0xca, 0x43, 0xe3, 0x87, 0xe6]);
enum FWPM_CALLOUT_TEREDO_ALE_RESOURCE_ASSIGNMENT_V6 = GUID(0x31b95392, 0x66e, 0x42a2, [0xb7, 0xdb, 0x92, 0xf8, 0xac, 0xdd, 0x56, 0xf9]);
enum FWPM_CALLOUT_EDGE_TRAVERSAL_ALE_RESOURCE_ASSIGNMENT_V4 = GUID(0x79b1010, 0xf1c5, 0x4fcd, [0xae, 0x5, 0xda, 0x41, 0x10, 0x7a, 0xbd, 0xb]);
enum FWPM_CALLOUT_TEREDO_ALE_LISTEN_V6 = GUID(0x81a434e7, 0xf60c, 0x4378, [0xba, 0xb8, 0xc6, 0x25, 0xa3, 0xf, 0x1, 0x97]);
enum FWPM_CALLOUT_EDGE_TRAVERSAL_ALE_LISTEN_V4 = GUID(0x33486ab5, 0x6d5e, 0x4e65, [0xa0, 0xb, 0xa7, 0xaf, 0xed, 0xb, 0xa9, 0xa1]);
enum FWPM_CALLOUT_TCP_TEMPLATES_CONNECT_LAYER_V4 = GUID(0x215a0b39, 0x4b7e, 0x4eda, [0x8c, 0xe4, 0x17, 0x96, 0x79, 0xdf, 0x62, 0x24]);
enum FWPM_CALLOUT_TCP_TEMPLATES_CONNECT_LAYER_V6 = GUID(0x838b37a1, 0x5c12, 0x4d34, [0x8b, 0x38, 0x7, 0x87, 0x28, 0xb2, 0xd2, 0x5c]);
enum FWPM_CALLOUT_TCP_TEMPLATES_ACCEPT_LAYER_V4 = GUID(0x2f23f5d0, 0x40c4, 0x4c41, [0xa2, 0x54, 0x46, 0xd8, 0xdb, 0xa8, 0x95, 0x7c]);
enum FWPM_CALLOUT_TCP_TEMPLATES_ACCEPT_LAYER_V6 = GUID(0xb25152f0, 0x991c, 0x4f53, [0xbb, 0xe7, 0xd2, 0x4b, 0x45, 0xfe, 0x63, 0x2c]);
enum FWPM_CALLOUT_POLICY_SILENT_MODE_AUTH_CONNECT_LAYER_V4 = GUID(0x5fbfc31d, 0xa51c, 0x44dc, [0xac, 0xb6, 0x6, 0x24, 0xa0, 0x30, 0xa7, 0x0]);
enum FWPM_CALLOUT_POLICY_SILENT_MODE_AUTH_CONNECT_LAYER_V6 = GUID(0x5fbfc31d, 0xa51c, 0x44dc, [0xac, 0xb6, 0x6, 0x24, 0xa0, 0x30, 0xa7, 0x1]);
enum FWPM_CALLOUT_POLICY_SILENT_MODE_AUTH_RECV_ACCEPT_LAYER_V4 = GUID(0x5fbfc31d, 0xa51c, 0x44dc, [0xac, 0xb6, 0x6, 0x24, 0xa0, 0x30, 0xa7, 0x2]);
enum FWPM_CALLOUT_POLICY_SILENT_MODE_AUTH_RECV_ACCEPT_LAYER_V6 = GUID(0x5fbfc31d, 0xa51c, 0x44dc, [0xac, 0xb6, 0x6, 0x24, 0xa0, 0x30, 0xa7, 0x3]);
enum FWPM_CALLOUT_HTTP_TEMPLATE_SSL_HANDSHAKE = GUID(0xb3423249, 0x8d09, 0x4858, [0x92, 0x10, 0x95, 0xc7, 0xfd, 0xa8, 0xe3, 0xf]);
enum FWPM_CALLOUT_OUTBOUND_NETWORK_CONNECTION_POLICY_LAYER_V4 = GUID(0x103090d4, 0x8e28, 0x4fd6, [0x98, 0x94, 0xd1, 0xd6, 0x7d, 0x6b, 0x10, 0xc9]);
enum FWPM_CALLOUT_OUTBOUND_NETWORK_CONNECTION_POLICY_LAYER_V6 = GUID(0x4ed3446d, 0x8dc7, 0x459b, [0xb0, 0x9f, 0xc1, 0xcb, 0x7a, 0x8f, 0x86, 0x89]);
enum FWPM_CALLOUT_BUILT_IN_RESERVED_1 = GUID(0x779719a4, 0xe695, 0x47b6, [0xa1, 0x99, 0x79, 0x99, 0xfe, 0xc9, 0x16, 0x3b]);
enum FWPM_CALLOUT_BUILT_IN_RESERVED_2 = GUID(0xef9661b6, 0x7c5e, 0x48fd, [0xa1, 0x30, 0x96, 0x67, 0x8c, 0xea, 0xcc, 0x41]);
enum FWPM_CALLOUT_BUILT_IN_RESERVED_3 = GUID(0x18729c7a, 0x2f62, 0x4be0, [0x96, 0x6f, 0x97, 0x4b, 0x21, 0xb8, 0x6d, 0xf1]);
enum FWPM_CALLOUT_BUILT_IN_RESERVED_4 = GUID(0x6c3fb801, 0xdaff, 0x40e9, [0x91, 0xe6, 0xf7, 0xff, 0x7e, 0x52, 0xf7, 0xd9]);
enum FWPM_PROVIDER_CONTEXT_SECURE_SOCKET_AUTHIP = GUID(0xb25ea800, 0xd02, 0x46ed, [0x92, 0xbd, 0x7f, 0xa8, 0x4b, 0xb7, 0x3e, 0x9d]);
enum FWPM_PROVIDER_CONTEXT_SECURE_SOCKET_IPSEC = GUID(0x8c2d4144, 0xf8e0, 0x42c0, [0x94, 0xce, 0x7c, 0xcf, 0xc6, 0x3b, 0x2f, 0x9b]);
enum FWPM_KEYING_MODULE_IKE = GUID(0xa9bbf787, 0x82a8, 0x45bb, [0xa4, 0x0, 0x5d, 0x7e, 0x59, 0x52, 0xc7, 0xa9]);
enum FWPM_KEYING_MODULE_AUTHIP = GUID(0x11e3dae0, 0xdd26, 0x4590, [0x85, 0x7d, 0xab, 0x4b, 0x28, 0xd1, 0xa0, 0x95]);
enum FWPM_KEYING_MODULE_IKEV2 = GUID(0x41792cc, 0x8f07, 0x419d, [0xa3, 0x94, 0x71, 0x69, 0x68, 0xcb, 0x16, 0x47]);
enum FWPM_AUTO_WEIGHT_BITS = 0x0000003c;
enum FWPM_WEIGHT_RANGE_IPSEC = 0x00000000;
enum FWPM_WEIGHT_RANGE_IKE_EXEMPTIONS = 0x0000000c;
enum FWPM_ACTRL_ADD = 0x00000001;
enum FWPM_ACTRL_ADD_LINK = 0x00000002;
enum FWPM_ACTRL_BEGIN_READ_TXN = 0x00000004;
enum FWPM_ACTRL_BEGIN_WRITE_TXN = 0x00000008;
enum FWPM_ACTRL_CLASSIFY = 0x00000010;
enum FWPM_ACTRL_ENUM = 0x00000020;
enum FWPM_ACTRL_OPEN = 0x00000040;
enum FWPM_ACTRL_READ = 0x00000080;
enum FWPM_ACTRL_READ_STATS = 0x00000100;
enum FWPM_ACTRL_SUBSCRIBE = 0x00000200;
enum FWPM_ACTRL_WRITE = 0x00000400;
enum FWPM_TXN_READ_ONLY = 0x00000001;
enum FWPM_TUNNEL_FLAG_POINT_TO_POINT = 0x00000001;
enum FWPM_TUNNEL_FLAG_ENABLE_VIRTUAL_IF_TUNNELING = 0x00000002;
enum FWPM_TUNNEL_FLAG_RESERVED0 = 0x00000004;
enum FWPS_METADATA_FIELD_DISCARD_REASON = 0x00000001;
enum FWPS_METADATA_FIELD_FLOW_HANDLE = 0x00000002;
enum FWPS_METADATA_FIELD_IP_HEADER_SIZE = 0x00000004;
enum FWPS_METADATA_FIELD_PROCESS_PATH = 0x00000008;
enum FWPS_METADATA_FIELD_TOKEN = 0x00000010;
enum FWPS_METADATA_FIELD_PROCESS_ID = 0x00000020;
enum FWPS_METADATA_FIELD_SYSTEM_FLAGS = 0x00000040;
enum FWPS_METADATA_FIELD_RESERVED = 0x00000080;
enum FWPS_METADATA_FIELD_SOURCE_INTERFACE_INDEX = 0x00000100;
enum FWPS_METADATA_FIELD_DESTINATION_INTERFACE_INDEX = 0x00000200;
enum FWPS_METADATA_FIELD_TRANSPORT_HEADER_SIZE = 0x00000400;
enum FWPS_METADATA_FIELD_COMPARTMENT_ID = 0x00000800;
enum FWPS_METADATA_FIELD_FRAGMENT_DATA = 0x00001000;
enum FWPS_METADATA_FIELD_PATH_MTU = 0x00002000;
enum FWPS_METADATA_FIELD_COMPLETION_HANDLE = 0x00004000;
enum FWPS_METADATA_FIELD_TRANSPORT_ENDPOINT_HANDLE = 0x00008000;
enum FWPS_METADATA_FIELD_TRANSPORT_CONTROL_DATA = 0x00010000;
enum FWPS_METADATA_FIELD_REMOTE_SCOPE_ID = 0x00020000;
enum FWPS_METADATA_FIELD_PACKET_DIRECTION = 0x00040000;
enum FWPS_METADATA_FIELD_PACKET_SYSTEM_CRITICAL = 0x00080000;
enum FWPS_METADATA_FIELD_FORWARD_LAYER_OUTBOUND_PASS_THRU = 0x00100000;
enum FWPS_METADATA_FIELD_FORWARD_LAYER_INBOUND_PASS_THRU = 0x00200000;
enum FWPS_METADATA_FIELD_ALE_CLASSIFY_REQUIRED = 0x00400000;
enum FWPS_METADATA_FIELD_TRANSPORT_HEADER_INCLUDE_HEADER = 0x00800000;
enum FWPS_METADATA_FIELD_DESTINATION_PREFIX = 0x01000000;
enum FWPS_METADATA_FIELD_ETHER_FRAME_LENGTH = 0x02000000;
enum FWPS_METADATA_FIELD_PARENT_ENDPOINT_HANDLE = 0x04000000;
enum FWPS_METADATA_FIELD_ICMP_ID_AND_SEQUENCE = 0x08000000;
enum FWPS_METADATA_FIELD_LOCAL_REDIRECT_TARGET_PID = 0x10000000;
enum FWPS_METADATA_FIELD_ORIGINAL_DESTINATION = 0x20000000;
enum FWPS_METADATA_FIELD_REDIRECT_RECORD_HANDLE = 0x40000000;
enum FWPS_METADATA_FIELD_SUB_PROCESS_TAG = 0x80000000;
enum FWPS_L2_METADATA_FIELD_ETHERNET_MAC_HEADER_SIZE = 0x00000001;
enum FWPS_L2_METADATA_FIELD_WIFI_OPERATION_MODE = 0x00000002;
enum FWPS_L2_METADATA_FIELD_VSWITCH_SOURCE_PORT_ID = 0x00000004;
enum FWPS_L2_METADATA_FIELD_VSWITCH_SOURCE_NIC_INDEX = 0x00000008;
enum FWPS_L2_METADATA_FIELD_VSWITCH_PACKET_CONTEXT = 0x00000010;
enum FWPS_L2_METADATA_FIELD_VSWITCH_DESTINATION_PORT_ID = 0x00000020;
enum FWPS_L2_METADATA_FIELD_RESERVED = 0x80000000;
alias FWP_DIRECTION = int;
enum : int
{
    FWP_DIRECTION_OUTBOUND = 0x00000000,
    FWP_DIRECTION_INBOUND  = 0x00000001,
    FWP_DIRECTION_MAX      = 0x00000002,
}

alias FWP_IP_VERSION = int;
enum : int
{
    FWP_IP_VERSION_V4   = 0x00000000,
    FWP_IP_VERSION_V6   = 0x00000001,
    FWP_IP_VERSION_NONE = 0x00000002,
    FWP_IP_VERSION_MAX  = 0x00000003,
}

alias FWP_AF = int;
enum : int
{
    FWP_AF_INET  = 0x00000000,
    FWP_AF_INET6 = 0x00000001,
    FWP_AF_ETHER = 0x00000002,
    FWP_AF_NONE  = 0x00000003,
}

alias FWP_ETHER_ENCAP_METHOD = int;
enum : int
{
    FWP_ETHER_ENCAP_METHOD_ETHER_V2        = 0x00000000,
    FWP_ETHER_ENCAP_METHOD_SNAP            = 0x00000001,
    FWP_ETHER_ENCAP_METHOD_SNAP_W_OUI_ZERO = 0x00000003,
}

alias FWP_DATA_TYPE = int;
enum : int
{
    FWP_EMPTY                         = 0x00000000,
    FWP_UINT8                         = 0x00000001,
    FWP_UINT16                        = 0x00000002,
    FWP_UINT32                        = 0x00000003,
    FWP_UINT64                        = 0x00000004,
    FWP_INT8                          = 0x00000005,
    FWP_INT16                         = 0x00000006,
    FWP_INT32                         = 0x00000007,
    FWP_INT64                         = 0x00000008,
    FWP_FLOAT                         = 0x00000009,
    FWP_DOUBLE                        = 0x0000000a,
    FWP_BYTE_ARRAY16_TYPE             = 0x0000000b,
    FWP_BYTE_BLOB_TYPE                = 0x0000000c,
    FWP_SID                           = 0x0000000d,
    FWP_SECURITY_DESCRIPTOR_TYPE      = 0x0000000e,
    FWP_TOKEN_INFORMATION_TYPE        = 0x0000000f,
    FWP_TOKEN_ACCESS_INFORMATION_TYPE = 0x00000010,
    FWP_UNICODE_STRING_TYPE           = 0x00000011,
    FWP_BYTE_ARRAY6_TYPE              = 0x00000012,
    FWP_SINGLE_DATA_TYPE_MAX          = 0x000000ff,
    FWP_V4_ADDR_MASK                  = 0x00000100,
    FWP_V6_ADDR_MASK                  = 0x00000101,
    FWP_RANGE_TYPE                    = 0x00000102,
    FWP_DATA_TYPE_MAX                 = 0x00000103,
}

struct FWP_BYTE_ARRAY6
{
    ubyte[6] byteArray6;
}
struct FWP_BYTE_ARRAY16
{
    ubyte[16] byteArray16;
}
struct FWP_BYTE_BLOB
{
    uint size;
    ubyte* data;
}
struct FWP_TOKEN_INFORMATION
{
    uint sidCount;
    SID_AND_ATTRIBUTES* sids;
    uint restrictedSidCount;
    SID_AND_ATTRIBUTES* restrictedSids;
}
struct FWP_VALUE0
{
    FWP_DATA_TYPE type;
    union
    {
        ubyte uint8;
        ushort uint16;
        uint uint32;
        ulong* uint64;
        byte int8;
        short int16;
        int int32;
        long* int64;
        float float32;
        double* double64;
        FWP_BYTE_ARRAY16* byteArray16;
        FWP_BYTE_BLOB* byteBlob;
        SID* sid;
        FWP_BYTE_BLOB* sd;
        FWP_TOKEN_INFORMATION* tokenInformation;
        FWP_BYTE_BLOB* tokenAccessInformation;
        PWSTR unicodeString;
        FWP_BYTE_ARRAY6* byteArray6;
    }
}
alias FWP_MATCH_TYPE = int;
enum : int
{
    FWP_MATCH_EQUAL                  = 0x00000000,
    FWP_MATCH_GREATER                = 0x00000001,
    FWP_MATCH_LESS                   = 0x00000002,
    FWP_MATCH_GREATER_OR_EQUAL       = 0x00000003,
    FWP_MATCH_LESS_OR_EQUAL          = 0x00000004,
    FWP_MATCH_RANGE                  = 0x00000005,
    FWP_MATCH_FLAGS_ALL_SET          = 0x00000006,
    FWP_MATCH_FLAGS_ANY_SET          = 0x00000007,
    FWP_MATCH_FLAGS_NONE_SET         = 0x00000008,
    FWP_MATCH_EQUAL_CASE_INSENSITIVE = 0x00000009,
    FWP_MATCH_NOT_EQUAL              = 0x0000000a,
    FWP_MATCH_PREFIX                 = 0x0000000b,
    FWP_MATCH_NOT_PREFIX             = 0x0000000c,
    FWP_MATCH_TYPE_MAX               = 0x0000000d,
}

struct FWP_V4_ADDR_AND_MASK
{
    uint addr;
    uint mask;
}
struct FWP_V6_ADDR_AND_MASK
{
    ubyte[16] addr;
    ubyte prefixLength;
}
struct FWP_RANGE0
{
    FWP_VALUE0 valueLow;
    FWP_VALUE0 valueHigh;
}
struct FWP_CONDITION_VALUE0
{
    FWP_DATA_TYPE type;
    union
    {
        ubyte uint8;
        ushort uint16;
        uint uint32;
        ulong* uint64;
        byte int8;
        short int16;
        int int32;
        long* int64;
        float float32;
        double* double64;
        FWP_BYTE_ARRAY16* byteArray16;
        FWP_BYTE_BLOB* byteBlob;
        SID* sid;
        FWP_BYTE_BLOB* sd;
        FWP_TOKEN_INFORMATION* tokenInformation;
        FWP_BYTE_BLOB* tokenAccessInformation;
        PWSTR unicodeString;
        FWP_BYTE_ARRAY6* byteArray6;
        FWP_V4_ADDR_AND_MASK* v4AddrMask;
        FWP_V6_ADDR_AND_MASK* v6AddrMask;
        FWP_RANGE0* rangeValue;
    }
}
alias FWP_NETWORK_CONNECTION_POLICY_SETTING_TYPE = int;
enum : int
{
    FWP_NETWORK_CONNECTION_POLICY_SOURCE_ADDRESS     = 0x00000000,
    FWP_NETWORK_CONNECTION_POLICY_NEXT_HOP_INTERFACE = 0x00000001,
    FWP_NETWORK_CONNECTION_POLICY_NEXT_HOP           = 0x00000002,
    FWP_NETWORK_CONNECTION_POLICY_MAX                = 0x00000003,
}

alias FWP_CLASSIFY_OPTION_TYPE = int;
enum : int
{
    FWP_CLASSIFY_OPTION_MULTICAST_STATE                    = 0x00000000,
    FWP_CLASSIFY_OPTION_LOOSE_SOURCE_MAPPING               = 0x00000001,
    FWP_CLASSIFY_OPTION_UNICAST_LIFETIME                   = 0x00000002,
    FWP_CLASSIFY_OPTION_MCAST_BCAST_LIFETIME               = 0x00000003,
    FWP_CLASSIFY_OPTION_SECURE_SOCKET_SECURITY_FLAGS       = 0x00000004,
    FWP_CLASSIFY_OPTION_SECURE_SOCKET_AUTHIP_MM_POLICY_KEY = 0x00000005,
    FWP_CLASSIFY_OPTION_SECURE_SOCKET_AUTHIP_QM_POLICY_KEY = 0x00000006,
    FWP_CLASSIFY_OPTION_LOCAL_ONLY_MAPPING                 = 0x00000007,
    FWP_CLASSIFY_OPTION_MAX                                = 0x00000008,
}

alias FWP_VSWITCH_NETWORK_TYPE = int;
enum : int
{
    FWP_VSWITCH_NETWORK_TYPE_UNKNOWN  = 0x00000000,
    FWP_VSWITCH_NETWORK_TYPE_PRIVATE  = 0x00000001,
    FWP_VSWITCH_NETWORK_TYPE_INTERNAL = 0x00000002,
    FWP_VSWITCH_NETWORK_TYPE_EXTERNAL = 0x00000003,
}

alias FWP_FILTER_ENUM_TYPE = int;
enum : int
{
    FWP_FILTER_ENUM_FULLY_CONTAINED = 0x00000000,
    FWP_FILTER_ENUM_OVERLAPPING     = 0x00000001,
    FWP_FILTER_ENUM_TYPE_MAX        = 0x00000002,
}

struct FWPM_DISPLAY_DATA0
{
    PWSTR name;
    PWSTR description;
}
struct IPSEC_VIRTUAL_IF_TUNNEL_INFO0
{
    ulong virtualIfTunnelId;
    ulong trafficSelectorId;
}
alias IKEEXT_KEY_MODULE_TYPE = int;
enum : int
{
    IKEEXT_KEY_MODULE_IKE    = 0x00000000,
    IKEEXT_KEY_MODULE_AUTHIP = 0x00000001,
    IKEEXT_KEY_MODULE_IKEV2  = 0x00000002,
    IKEEXT_KEY_MODULE_MAX    = 0x00000003,
}

alias IKEEXT_AUTHENTICATION_METHOD_TYPE = int;
enum : int
{
    IKEEXT_PRESHARED_KEY                  = 0x00000000,
    IKEEXT_CERTIFICATE                    = 0x00000001,
    IKEEXT_KERBEROS                       = 0x00000002,
    IKEEXT_ANONYMOUS                      = 0x00000003,
    IKEEXT_SSL                            = 0x00000004,
    IKEEXT_NTLM_V2                        = 0x00000005,
    IKEEXT_IPV6_CGA                       = 0x00000006,
    IKEEXT_CERTIFICATE_ECDSA_P256         = 0x00000007,
    IKEEXT_CERTIFICATE_ECDSA_P384         = 0x00000008,
    IKEEXT_SSL_ECDSA_P256                 = 0x00000009,
    IKEEXT_SSL_ECDSA_P384                 = 0x0000000a,
    IKEEXT_EAP                            = 0x0000000b,
    IKEEXT_RESERVED                       = 0x0000000c,
    IKEEXT_AUTHENTICATION_METHOD_TYPE_MAX = 0x0000000d,
}

alias IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE = int;
enum : int
{
    IKEEXT_IMPERSONATION_NONE             = 0x00000000,
    IKEEXT_IMPERSONATION_SOCKET_PRINCIPAL = 0x00000001,
    IKEEXT_IMPERSONATION_MAX              = 0x00000002,
}

struct IKEEXT_PRESHARED_KEY_AUTHENTICATION0
{
    FWP_BYTE_BLOB presharedKey;
}
struct IKEEXT_PRESHARED_KEY_AUTHENTICATION1
{
    FWP_BYTE_BLOB presharedKey;
    IKEEXT_PRESHARED_KEY_AUTHENTICATION_FLAGS flags;
}
struct IKEEXT_CERT_ROOT_CONFIG0
{
    FWP_BYTE_BLOB certData;
    IKEEXT_CERT_FLAGS flags;
}
alias IKEEXT_CERT_CONFIG_TYPE = int;
enum : int
{
    IKEEXT_CERT_CONFIG_EXPLICIT_TRUST_LIST = 0x00000000,
    IKEEXT_CERT_CONFIG_ENTERPRISE_STORE    = 0x00000001,
    IKEEXT_CERT_CONFIG_TRUSTED_ROOT_STORE  = 0x00000002,
    IKEEXT_CERT_CONFIG_UNSPECIFIED         = 0x00000003,
    IKEEXT_CERT_CONFIG_TYPE_MAX            = 0x00000004,
}

struct IKEEXT_CERTIFICATE_AUTHENTICATION0
{
    IKEEXT_CERT_CONFIG_TYPE inboundConfigType;
    union
    {
        struct
        {
            uint inboundRootArraySize;
            IKEEXT_CERT_ROOT_CONFIG0* inboundRootArray;
        }
        IKEEXT_CERT_ROOT_CONFIG0* inboundEnterpriseStoreConfig;
        IKEEXT_CERT_ROOT_CONFIG0* inboundTrustedRootStoreConfig;
    }
    IKEEXT_CERT_CONFIG_TYPE outboundConfigType;
    union
    {
        struct
        {
            uint outboundRootArraySize;
            IKEEXT_CERT_ROOT_CONFIG0* outboundRootArray;
        }
        IKEEXT_CERT_ROOT_CONFIG0* outboundEnterpriseStoreConfig;
        IKEEXT_CERT_ROOT_CONFIG0* outboundTrustedRootStoreConfig;
    }
    IKEEXT_CERT_AUTH flags;
}
struct IKEEXT_CERTIFICATE_AUTHENTICATION1
{
    IKEEXT_CERT_CONFIG_TYPE inboundConfigType;
    union
    {
        struct
        {
            uint inboundRootArraySize;
            IKEEXT_CERT_ROOT_CONFIG0* inboundRootArray;
        }
        IKEEXT_CERT_ROOT_CONFIG0* inboundEnterpriseStoreConfig;
        IKEEXT_CERT_ROOT_CONFIG0* inboundTrustedRootStoreConfig;
    }
    IKEEXT_CERT_CONFIG_TYPE outboundConfigType;
    union
    {
        struct
        {
            uint outboundRootArraySize;
            IKEEXT_CERT_ROOT_CONFIG0* outboundRootArray;
        }
        IKEEXT_CERT_ROOT_CONFIG0* outboundEnterpriseStoreConfig;
        IKEEXT_CERT_ROOT_CONFIG0* outboundTrustedRootStoreConfig;
    }
    IKEEXT_CERT_AUTH flags;
    FWP_BYTE_BLOB localCertLocationUrl;
}
alias IKEEXT_CERT_CRITERIA_NAME_TYPE = int;
enum : int
{
    IKEEXT_CERT_CRITERIA_DNS           = 0x00000000,
    IKEEXT_CERT_CRITERIA_UPN           = 0x00000001,
    IKEEXT_CERT_CRITERIA_RFC822        = 0x00000002,
    IKEEXT_CERT_CRITERIA_CN            = 0x00000003,
    IKEEXT_CERT_CRITERIA_OU            = 0x00000004,
    IKEEXT_CERT_CRITERIA_O             = 0x00000005,
    IKEEXT_CERT_CRITERIA_DC            = 0x00000006,
    IKEEXT_CERT_CRITERIA_NAME_TYPE_MAX = 0x00000007,
}

struct IKEEXT_CERT_EKUS0
{
    uint numEku;
    PSTR* eku;
}
struct IKEEXT_CERT_NAME0
{
    IKEEXT_CERT_CRITERIA_NAME_TYPE nameType;
    PWSTR certName;
}
struct IKEEXT_CERTIFICATE_CRITERIA0
{
    FWP_BYTE_BLOB certData;
    FWP_BYTE_BLOB certHash;
    IKEEXT_CERT_EKUS0* eku;
    IKEEXT_CERT_NAME0* name;
    uint flags;
}
struct IKEEXT_CERTIFICATE_AUTHENTICATION2
{
    IKEEXT_CERT_CONFIG_TYPE inboundConfigType;
    union
    {
        struct
        {
            uint inboundRootArraySize;
            IKEEXT_CERTIFICATE_CRITERIA0* inboundRootCriteria;
        }
        struct
        {
            uint inboundEnterpriseStoreArraySize;
            IKEEXT_CERTIFICATE_CRITERIA0* inboundEnterpriseStoreCriteria;
        }
        struct
        {
            uint inboundRootStoreArraySize;
            IKEEXT_CERTIFICATE_CRITERIA0* inboundTrustedRootStoreCriteria;
        }
    }
    IKEEXT_CERT_CONFIG_TYPE outboundConfigType;
    union
    {
        struct
        {
            uint outboundRootArraySize;
            IKEEXT_CERTIFICATE_CRITERIA0* outboundRootCriteria;
        }
        struct
        {
            uint outboundEnterpriseStoreArraySize;
            IKEEXT_CERTIFICATE_CRITERIA0* outboundEnterpriseStoreCriteria;
        }
        struct
        {
            uint outboundRootStoreArraySize;
            IKEEXT_CERTIFICATE_CRITERIA0* outboundTrustedRootStoreCriteria;
        }
    }
    IKEEXT_CERT_AUTH flags;
    FWP_BYTE_BLOB localCertLocationUrl;
}
struct IKEEXT_IPV6_CGA_AUTHENTICATION0
{
    PWSTR keyContainerName;
    PWSTR cspName;
    uint cspType;
    FWP_BYTE_ARRAY16 cgaModifier;
    ubyte cgaCollisionCount;
}
struct IKEEXT_KERBEROS_AUTHENTICATION0
{
    IKEEXT_KERBEROS_AUTHENTICATION_FLAGS flags;
}
struct IKEEXT_KERBEROS_AUTHENTICATION1
{
    IKEEXT_KERBEROS_AUTHENTICATION_FLAGS flags;
    PWSTR proxyServer;
}
struct IKEEXT_RESERVED_AUTHENTICATION0
{
    IKEEXT_RESERVED_AUTHENTICATION_FLAGS flags;
}
struct IKEEXT_NTLM_V2_AUTHENTICATION0
{
    uint flags;
}
struct IKEEXT_EAP_AUTHENTICATION0
{
    IKEEXT_EAP_AUTHENTICATION_FLAGS flags;
}
struct IKEEXT_AUTHENTICATION_METHOD0
{
    IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
    union
    {
        IKEEXT_PRESHARED_KEY_AUTHENTICATION0 presharedKeyAuthentication;
        IKEEXT_CERTIFICATE_AUTHENTICATION0 certificateAuthentication;
        IKEEXT_KERBEROS_AUTHENTICATION0 kerberosAuthentication;
        IKEEXT_NTLM_V2_AUTHENTICATION0 ntlmV2Authentication;
        IKEEXT_CERTIFICATE_AUTHENTICATION0 sslAuthentication;
        IKEEXT_IPV6_CGA_AUTHENTICATION0 cgaAuthentication;
    }
}
struct IKEEXT_AUTHENTICATION_METHOD1
{
    IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
    union
    {
        IKEEXT_PRESHARED_KEY_AUTHENTICATION1 presharedKeyAuthentication;
        IKEEXT_CERTIFICATE_AUTHENTICATION1 certificateAuthentication;
        IKEEXT_KERBEROS_AUTHENTICATION0 kerberosAuthentication;
        IKEEXT_NTLM_V2_AUTHENTICATION0 ntlmV2Authentication;
        IKEEXT_CERTIFICATE_AUTHENTICATION1 sslAuthentication;
        IKEEXT_IPV6_CGA_AUTHENTICATION0 cgaAuthentication;
        IKEEXT_EAP_AUTHENTICATION0 eapAuthentication;
    }
}
struct IKEEXT_AUTHENTICATION_METHOD2
{
    IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
    union
    {
        IKEEXT_PRESHARED_KEY_AUTHENTICATION1 presharedKeyAuthentication;
        IKEEXT_CERTIFICATE_AUTHENTICATION2 certificateAuthentication;
        IKEEXT_KERBEROS_AUTHENTICATION1 kerberosAuthentication;
        IKEEXT_RESERVED_AUTHENTICATION0 reservedAuthentication;
        IKEEXT_NTLM_V2_AUTHENTICATION0 ntlmV2Authentication;
        IKEEXT_CERTIFICATE_AUTHENTICATION2 sslAuthentication;
        IKEEXT_IPV6_CGA_AUTHENTICATION0 cgaAuthentication;
        IKEEXT_EAP_AUTHENTICATION0 eapAuthentication;
    }
}
alias IKEEXT_CIPHER_TYPE = int;
enum : int
{
    IKEEXT_CIPHER_DES               = 0x00000000,
    IKEEXT_CIPHER_3DES              = 0x00000001,
    IKEEXT_CIPHER_AES_128           = 0x00000002,
    IKEEXT_CIPHER_AES_192           = 0x00000003,
    IKEEXT_CIPHER_AES_256           = 0x00000004,
    IKEEXT_CIPHER_AES_GCM_128_16ICV = 0x00000005,
    IKEEXT_CIPHER_AES_GCM_256_16ICV = 0x00000006,
    IKEEXT_CIPHER_TYPE_MAX          = 0x00000007,
}

struct IKEEXT_CIPHER_ALGORITHM0
{
    IKEEXT_CIPHER_TYPE algoIdentifier;
    uint keyLen;
    uint rounds;
}
alias IKEEXT_INTEGRITY_TYPE = int;
enum : int
{
    IKEEXT_INTEGRITY_MD5      = 0x00000000,
    IKEEXT_INTEGRITY_SHA1     = 0x00000001,
    IKEEXT_INTEGRITY_SHA_256  = 0x00000002,
    IKEEXT_INTEGRITY_SHA_384  = 0x00000003,
    IKEEXT_INTEGRITY_TYPE_MAX = 0x00000004,
}

struct IKEEXT_INTEGRITY_ALGORITHM0
{
    IKEEXT_INTEGRITY_TYPE algoIdentifier;
}
alias IKEEXT_DH_GROUP = int;
enum : int
{
    IKEEXT_DH_GROUP_NONE = 0x00000000,
    IKEEXT_DH_GROUP_1    = 0x00000001,
    IKEEXT_DH_GROUP_2    = 0x00000002,
    IKEEXT_DH_GROUP_14   = 0x00000003,
    IKEEXT_DH_GROUP_2048 = 0x00000003,
    IKEEXT_DH_ECP_256    = 0x00000004,
    IKEEXT_DH_ECP_384    = 0x00000005,
    IKEEXT_DH_GROUP_24   = 0x00000006,
    IKEEXT_DH_GROUP_MAX  = 0x00000007,
}

struct IKEEXT_PROPOSAL0
{
    IKEEXT_CIPHER_ALGORITHM0 cipherAlgorithm;
    IKEEXT_INTEGRITY_ALGORITHM0 integrityAlgorithm;
    uint maxLifetimeSeconds;
    IKEEXT_DH_GROUP dhGroup;
    uint quickModeLimit;
}
struct IKEEXT_POLICY0
{
    uint softExpirationTime;
    uint numAuthenticationMethods;
    IKEEXT_AUTHENTICATION_METHOD0* authenticationMethods;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
    uint numIkeProposals;
    IKEEXT_PROPOSAL0* ikeProposals;
    IKEEXT_POLICY_FLAG flags;
    uint maxDynamicFilters;
}
struct IKEEXT_POLICY1
{
    uint softExpirationTime;
    uint numAuthenticationMethods;
    IKEEXT_AUTHENTICATION_METHOD1* authenticationMethods;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
    uint numIkeProposals;
    IKEEXT_PROPOSAL0* ikeProposals;
    IKEEXT_POLICY_FLAG flags;
    uint maxDynamicFilters;
    uint retransmitDurationSecs;
}
struct IKEEXT_POLICY2
{
    uint softExpirationTime;
    uint numAuthenticationMethods;
    IKEEXT_AUTHENTICATION_METHOD2* authenticationMethods;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
    uint numIkeProposals;
    IKEEXT_PROPOSAL0* ikeProposals;
    IKEEXT_POLICY_FLAG flags;
    uint maxDynamicFilters;
    uint retransmitDurationSecs;
}
struct IKEEXT_EM_POLICY0
{
    uint numAuthenticationMethods;
    IKEEXT_AUTHENTICATION_METHOD0* authenticationMethods;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
}
struct IKEEXT_EM_POLICY1
{
    uint numAuthenticationMethods;
    IKEEXT_AUTHENTICATION_METHOD1* authenticationMethods;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
}
struct IKEEXT_EM_POLICY2
{
    uint numAuthenticationMethods;
    IKEEXT_AUTHENTICATION_METHOD2* authenticationMethods;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE initiatorImpersonationType;
}
struct IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0
{
    uint currentActiveMainModes;
    uint totalMainModesStarted;
    uint totalSuccessfulMainModes;
    uint totalFailedMainModes;
    uint totalResponderMainModes;
    uint currentNewResponderMainModes;
    uint currentActiveQuickModes;
    uint totalQuickModesStarted;
    uint totalSuccessfulQuickModes;
    uint totalFailedQuickModes;
    uint totalAcquires;
    uint totalReinitAcquires;
    uint currentActiveExtendedModes;
    uint totalExtendedModesStarted;
    uint totalSuccessfulExtendedModes;
    uint totalFailedExtendedModes;
    uint totalImpersonationExtendedModes;
    uint totalImpersonationMainModes;
}
struct IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1
{
    uint currentActiveMainModes;
    uint totalMainModesStarted;
    uint totalSuccessfulMainModes;
    uint totalFailedMainModes;
    uint totalResponderMainModes;
    uint currentNewResponderMainModes;
    uint currentActiveQuickModes;
    uint totalQuickModesStarted;
    uint totalSuccessfulQuickModes;
    uint totalFailedQuickModes;
    uint totalAcquires;
    uint totalReinitAcquires;
    uint currentActiveExtendedModes;
    uint totalExtendedModesStarted;
    uint totalSuccessfulExtendedModes;
    uint totalFailedExtendedModes;
    uint totalImpersonationExtendedModes;
    uint totalImpersonationMainModes;
}
struct IKEEXT_KEYMODULE_STATISTICS0
{
    IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0 v4Statistics;
    IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS0 v6Statistics;
    uint[97] errorFrequencyTable;
    uint mainModeNegotiationTime;
    uint quickModeNegotiationTime;
    uint extendedModeNegotiationTime;
}
struct IKEEXT_KEYMODULE_STATISTICS1
{
    IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1 v4Statistics;
    IKEEXT_IP_VERSION_SPECIFIC_KEYMODULE_STATISTICS1 v6Statistics;
    uint[97] errorFrequencyTable;
    uint mainModeNegotiationTime;
    uint quickModeNegotiationTime;
    uint extendedModeNegotiationTime;
}
struct IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0
{
    uint totalSocketReceiveFailures;
    uint totalSocketSendFailures;
}
struct IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1
{
    uint totalSocketReceiveFailures;
    uint totalSocketSendFailures;
}
struct IKEEXT_COMMON_STATISTICS0
{
    IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0 v4Statistics;
    IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS0 v6Statistics;
    uint totalPacketsReceived;
    uint totalInvalidPacketsReceived;
    uint currentQueuedWorkitems;
}
struct IKEEXT_COMMON_STATISTICS1
{
    IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1 v4Statistics;
    IKEEXT_IP_VERSION_SPECIFIC_COMMON_STATISTICS1 v6Statistics;
    uint totalPacketsReceived;
    uint totalInvalidPacketsReceived;
    uint currentQueuedWorkitems;
}
struct IKEEXT_STATISTICS0
{
    IKEEXT_KEYMODULE_STATISTICS0 ikeStatistics;
    IKEEXT_KEYMODULE_STATISTICS0 authipStatistics;
    IKEEXT_COMMON_STATISTICS0 commonStatistics;
}
struct IKEEXT_STATISTICS1
{
    IKEEXT_KEYMODULE_STATISTICS1 ikeStatistics;
    IKEEXT_KEYMODULE_STATISTICS1 authipStatistics;
    IKEEXT_KEYMODULE_STATISTICS1 ikeV2Statistics;
    IKEEXT_COMMON_STATISTICS1 commonStatistics;
}
struct IKEEXT_TRAFFIC0
{
    FWP_IP_VERSION ipVersion;
    union
    {
        uint localV4Address;
        ubyte[16] localV6Address;
    }
    union
    {
        uint remoteV4Address;
        ubyte[16] remoteV6Address;
    }
    ulong authIpFilterId;
}
struct IKEEXT_COOKIE_PAIR0
{
    ulong initiator;
    ulong responder;
}
struct IKEEXT_CERTIFICATE_CREDENTIAL0
{
    FWP_BYTE_BLOB subjectName;
    FWP_BYTE_BLOB certHash;
    uint flags;
}
struct IKEEXT_NAME_CREDENTIAL0
{
    PWSTR principalName;
}
struct IKEEXT_CREDENTIAL0
{
    IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE impersonationType;
    union
    {
        IKEEXT_PRESHARED_KEY_AUTHENTICATION0* presharedKey;
        IKEEXT_CERTIFICATE_CREDENTIAL0* certificate;
        IKEEXT_NAME_CREDENTIAL0* name;
    }
}
struct IKEEXT_CREDENTIAL_PAIR0
{
    IKEEXT_CREDENTIAL0 localCredentials;
    IKEEXT_CREDENTIAL0 peerCredentials;
}
struct IKEEXT_CREDENTIALS0
{
    uint numCredentials;
    IKEEXT_CREDENTIAL_PAIR0* credentials;
}
struct IKEEXT_SA_DETAILS0
{
    ulong saId;
    IKEEXT_KEY_MODULE_TYPE keyModuleType;
    FWP_IP_VERSION ipVersion;
    union
    {
        IPSEC_V4_UDP_ENCAPSULATION0* v4UdpEncapsulation;
    }
    IKEEXT_TRAFFIC0 ikeTraffic;
    IKEEXT_PROPOSAL0 ikeProposal;
    IKEEXT_COOKIE_PAIR0 cookiePair;
    IKEEXT_CREDENTIALS0 ikeCredentials;
    GUID ikePolicyKey;
    ulong virtualIfTunnelId;
}
struct IKEEXT_CERTIFICATE_CREDENTIAL1
{
    FWP_BYTE_BLOB subjectName;
    FWP_BYTE_BLOB certHash;
    uint flags;
    FWP_BYTE_BLOB certificate;
}
struct IKEEXT_CREDENTIAL1
{
    IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE impersonationType;
    union
    {
        IKEEXT_PRESHARED_KEY_AUTHENTICATION1* presharedKey;
        IKEEXT_CERTIFICATE_CREDENTIAL1* certificate;
        IKEEXT_NAME_CREDENTIAL0* name;
    }
}
struct IKEEXT_CREDENTIAL_PAIR1
{
    IKEEXT_CREDENTIAL1 localCredentials;
    IKEEXT_CREDENTIAL1 peerCredentials;
}
struct IKEEXT_CREDENTIALS1
{
    uint numCredentials;
    IKEEXT_CREDENTIAL_PAIR1* credentials;
}
struct IKEEXT_SA_DETAILS1
{
    ulong saId;
    IKEEXT_KEY_MODULE_TYPE keyModuleType;
    FWP_IP_VERSION ipVersion;
    union
    {
        IPSEC_V4_UDP_ENCAPSULATION0* v4UdpEncapsulation;
    }
    IKEEXT_TRAFFIC0 ikeTraffic;
    IKEEXT_PROPOSAL0 ikeProposal;
    IKEEXT_COOKIE_PAIR0 cookiePair;
    IKEEXT_CREDENTIALS1 ikeCredentials;
    GUID ikePolicyKey;
    ulong virtualIfTunnelId;
    FWP_BYTE_BLOB correlationKey;
}
struct IKEEXT_CREDENTIAL2
{
    IKEEXT_AUTHENTICATION_METHOD_TYPE authenticationMethodType;
    IKEEXT_AUTHENTICATION_IMPERSONATION_TYPE impersonationType;
    union
    {
        IKEEXT_PRESHARED_KEY_AUTHENTICATION1* presharedKey;
        IKEEXT_CERTIFICATE_CREDENTIAL1* certificate;
        IKEEXT_NAME_CREDENTIAL0* name;
    }
}
struct IKEEXT_CREDENTIAL_PAIR2
{
    IKEEXT_CREDENTIAL2 localCredentials;
    IKEEXT_CREDENTIAL2 peerCredentials;
}
struct IKEEXT_CREDENTIALS2
{
    uint numCredentials;
    IKEEXT_CREDENTIAL_PAIR2* credentials;
}
struct IKEEXT_SA_DETAILS2
{
    ulong saId;
    IKEEXT_KEY_MODULE_TYPE keyModuleType;
    FWP_IP_VERSION ipVersion;
    union
    {
        IPSEC_V4_UDP_ENCAPSULATION0* v4UdpEncapsulation;
    }
    IKEEXT_TRAFFIC0 ikeTraffic;
    IKEEXT_PROPOSAL0 ikeProposal;
    IKEEXT_COOKIE_PAIR0 cookiePair;
    IKEEXT_CREDENTIALS2 ikeCredentials;
    GUID ikePolicyKey;
    ulong virtualIfTunnelId;
    FWP_BYTE_BLOB correlationKey;
}
struct IKEEXT_SA_ENUM_TEMPLATE0
{
    FWP_CONDITION_VALUE0 localSubNet;
    FWP_CONDITION_VALUE0 remoteSubNet;
    FWP_BYTE_BLOB localMainModeCertHash;
}
alias IKEEXT_MM_SA_STATE = int;
enum : int
{
    IKEEXT_MM_SA_STATE_NONE       = 0x00000000,
    IKEEXT_MM_SA_STATE_SA_SENT    = 0x00000001,
    IKEEXT_MM_SA_STATE_SSPI_SENT  = 0x00000002,
    IKEEXT_MM_SA_STATE_FINAL      = 0x00000003,
    IKEEXT_MM_SA_STATE_FINAL_SENT = 0x00000004,
    IKEEXT_MM_SA_STATE_COMPLETE   = 0x00000005,
    IKEEXT_MM_SA_STATE_MAX        = 0x00000006,
}

alias IKEEXT_QM_SA_STATE = int;
enum : int
{
    IKEEXT_QM_SA_STATE_NONE     = 0x00000000,
    IKEEXT_QM_SA_STATE_INITIAL  = 0x00000001,
    IKEEXT_QM_SA_STATE_FINAL    = 0x00000002,
    IKEEXT_QM_SA_STATE_COMPLETE = 0x00000003,
    IKEEXT_QM_SA_STATE_MAX      = 0x00000004,
}

alias IKEEXT_EM_SA_STATE = int;
enum : int
{
    IKEEXT_EM_SA_STATE_NONE          = 0x00000000,
    IKEEXT_EM_SA_STATE_SENT_ATTS     = 0x00000001,
    IKEEXT_EM_SA_STATE_SSPI_SENT     = 0x00000002,
    IKEEXT_EM_SA_STATE_AUTH_COMPLETE = 0x00000003,
    IKEEXT_EM_SA_STATE_FINAL         = 0x00000004,
    IKEEXT_EM_SA_STATE_COMPLETE      = 0x00000005,
    IKEEXT_EM_SA_STATE_MAX           = 0x00000006,
}

alias IKEEXT_SA_ROLE = int;
enum : int
{
    IKEEXT_SA_ROLE_INITIATOR = 0x00000000,
    IKEEXT_SA_ROLE_RESPONDER = 0x00000001,
    IKEEXT_SA_ROLE_MAX       = 0x00000002,
}

struct IPSEC_SA_LIFETIME0
{
    uint lifetimeSeconds;
    uint lifetimeKilobytes;
    uint lifetimePackets;
}
alias IPSEC_TRANSFORM_TYPE = int;
enum : int
{
    IPSEC_TRANSFORM_AH                  = 0x00000001,
    IPSEC_TRANSFORM_ESP_AUTH            = 0x00000002,
    IPSEC_TRANSFORM_ESP_CIPHER          = 0x00000003,
    IPSEC_TRANSFORM_ESP_AUTH_AND_CIPHER = 0x00000004,
    IPSEC_TRANSFORM_ESP_AUTH_FW         = 0x00000005,
    IPSEC_TRANSFORM_TYPE_MAX            = 0x00000006,
}

alias IPSEC_AUTH_TYPE = int;
enum : int
{
    IPSEC_AUTH_MD5     = 0x00000000,
    IPSEC_AUTH_SHA_1   = 0x00000001,
    IPSEC_AUTH_SHA_256 = 0x00000002,
    IPSEC_AUTH_AES_128 = 0x00000003,
    IPSEC_AUTH_AES_192 = 0x00000004,
    IPSEC_AUTH_AES_256 = 0x00000005,
    IPSEC_AUTH_MAX     = 0x00000006,
}

struct IPSEC_AUTH_TRANSFORM_ID0
{
    IPSEC_AUTH_TYPE authType;
    ubyte authConfig;
}
struct IPSEC_AUTH_TRANSFORM0
{
    IPSEC_AUTH_TRANSFORM_ID0 authTransformId;
    GUID* cryptoModuleId;
}
alias IPSEC_CIPHER_TYPE = int;
enum : int
{
    IPSEC_CIPHER_TYPE_DES     = 0x00000001,
    IPSEC_CIPHER_TYPE_3DES    = 0x00000002,
    IPSEC_CIPHER_TYPE_AES_128 = 0x00000003,
    IPSEC_CIPHER_TYPE_AES_192 = 0x00000004,
    IPSEC_CIPHER_TYPE_AES_256 = 0x00000005,
    IPSEC_CIPHER_TYPE_MAX     = 0x00000006,
}

struct IPSEC_CIPHER_TRANSFORM_ID0
{
    IPSEC_CIPHER_TYPE cipherType;
    ubyte cipherConfig;
}
struct IPSEC_CIPHER_TRANSFORM0
{
    IPSEC_CIPHER_TRANSFORM_ID0 cipherTransformId;
    GUID* cryptoModuleId;
}
struct IPSEC_AUTH_AND_CIPHER_TRANSFORM0
{
    IPSEC_AUTH_TRANSFORM0 authTransform;
    IPSEC_CIPHER_TRANSFORM0 cipherTransform;
}
struct IPSEC_SA_TRANSFORM0
{
    IPSEC_TRANSFORM_TYPE ipsecTransformType;
    union
    {
        IPSEC_AUTH_TRANSFORM0* ahTransform;
        IPSEC_AUTH_TRANSFORM0* espAuthTransform;
        IPSEC_CIPHER_TRANSFORM0* espCipherTransform;
        IPSEC_AUTH_AND_CIPHER_TRANSFORM0* espAuthAndCipherTransform;
        IPSEC_AUTH_TRANSFORM0* espAuthFwTransform;
    }
}
alias IPSEC_PFS_GROUP = int;
enum : int
{
    IPSEC_PFS_NONE    = 0x00000000,
    IPSEC_PFS_1       = 0x00000001,
    IPSEC_PFS_2       = 0x00000002,
    IPSEC_PFS_2048    = 0x00000003,
    IPSEC_PFS_14      = 0x00000003,
    IPSEC_PFS_ECP_256 = 0x00000004,
    IPSEC_PFS_ECP_384 = 0x00000005,
    IPSEC_PFS_MM      = 0x00000006,
    IPSEC_PFS_24      = 0x00000007,
    IPSEC_PFS_MAX     = 0x00000008,
}

struct IPSEC_PROPOSAL0
{
    IPSEC_SA_LIFETIME0 lifetime;
    uint numSaTransforms;
    IPSEC_SA_TRANSFORM0* saTransforms;
    IPSEC_PFS_GROUP pfsGroup;
}
struct IPSEC_SA_IDLE_TIMEOUT0
{
    uint idleTimeoutSeconds;
    uint idleTimeoutSecondsFailOver;
}
struct IPSEC_TRAFFIC_SELECTOR0
{
    ubyte protocolId;
    ushort portStart;
    ushort portEnd;
    FWP_IP_VERSION ipVersion;
    union
    {
        uint startV4Address;
        ubyte[16] startV6Address;
    }
    union
    {
        uint endV4Address;
        ubyte[16] endV6Address;
    }
}
struct IPSEC_TRAFFIC_SELECTOR_POLICY0
{
    uint flags;
    uint numLocalTrafficSelectors;
    IPSEC_TRAFFIC_SELECTOR0* localTrafficSelectors;
    uint numRemoteTrafficSelectors;
    IPSEC_TRAFFIC_SELECTOR0* remoteTrafficSelectors;
}
struct IPSEC_TRANSPORT_POLICY0
{
    uint numIpsecProposals;
    IPSEC_PROPOSAL0* ipsecProposals;
    IPSEC_POLICY_FLAG flags;
    uint ndAllowClearTimeoutSeconds;
    IPSEC_SA_IDLE_TIMEOUT0 saIdleTimeout;
    IKEEXT_EM_POLICY0* emPolicy;
}
struct IPSEC_TRANSPORT_POLICY1
{
    uint numIpsecProposals;
    IPSEC_PROPOSAL0* ipsecProposals;
    IPSEC_POLICY_FLAG flags;
    uint ndAllowClearTimeoutSeconds;
    IPSEC_SA_IDLE_TIMEOUT0 saIdleTimeout;
    IKEEXT_EM_POLICY1* emPolicy;
}
struct IPSEC_TRANSPORT_POLICY2
{
    uint numIpsecProposals;
    IPSEC_PROPOSAL0* ipsecProposals;
    IPSEC_POLICY_FLAG flags;
    uint ndAllowClearTimeoutSeconds;
    IPSEC_SA_IDLE_TIMEOUT0 saIdleTimeout;
    IKEEXT_EM_POLICY2* emPolicy;
}
struct IPSEC_TUNNEL_ENDPOINTS0
{
    FWP_IP_VERSION ipVersion;
    union
    {
        uint localV4Address;
        ubyte[16] localV6Address;
    }
    union
    {
        uint remoteV4Address;
        ubyte[16] remoteV6Address;
    }
}
struct IPSEC_TUNNEL_ENDPOINT0
{
    FWP_IP_VERSION ipVersion;
    union
    {
        uint v4Address;
        ubyte[16] v6Address;
    }
}
struct IPSEC_TUNNEL_ENDPOINTS2
{
    FWP_IP_VERSION ipVersion;
    union
    {
        uint localV4Address;
        ubyte[16] localV6Address;
    }
    union
    {
        uint remoteV4Address;
        ubyte[16] remoteV6Address;
    }
    ulong localIfLuid;
    PWSTR remoteFqdn;
    uint numAddresses;
    IPSEC_TUNNEL_ENDPOINT0* remoteAddresses;
}
struct IPSEC_TUNNEL_ENDPOINTS1
{
    FWP_IP_VERSION ipVersion;
    union
    {
        uint localV4Address;
        ubyte[16] localV6Address;
    }
    union
    {
        uint remoteV4Address;
        ubyte[16] remoteV6Address;
    }
    ulong localIfLuid;
}
struct IPSEC_TUNNEL_POLICY0
{
    IPSEC_POLICY_FLAG flags;
    uint numIpsecProposals;
    IPSEC_PROPOSAL0* ipsecProposals;
    IPSEC_TUNNEL_ENDPOINTS0 tunnelEndpoints;
    IPSEC_SA_IDLE_TIMEOUT0 saIdleTimeout;
    IKEEXT_EM_POLICY0* emPolicy;
}
struct IPSEC_TUNNEL_POLICY1
{
    IPSEC_POLICY_FLAG flags;
    uint numIpsecProposals;
    IPSEC_PROPOSAL0* ipsecProposals;
    IPSEC_TUNNEL_ENDPOINTS1 tunnelEndpoints;
    IPSEC_SA_IDLE_TIMEOUT0 saIdleTimeout;
    IKEEXT_EM_POLICY1* emPolicy;
}
struct IPSEC_TUNNEL_POLICY2
{
    IPSEC_POLICY_FLAG flags;
    uint numIpsecProposals;
    IPSEC_PROPOSAL0* ipsecProposals;
    IPSEC_TUNNEL_ENDPOINTS2 tunnelEndpoints;
    IPSEC_SA_IDLE_TIMEOUT0 saIdleTimeout;
    IKEEXT_EM_POLICY2* emPolicy;
    uint fwdPathSaLifetime;
}
struct IPSEC_TUNNEL_POLICY3
{
    uint flags;
    uint numIpsecProposals;
    IPSEC_PROPOSAL0* ipsecProposals;
    IPSEC_TUNNEL_ENDPOINTS2 tunnelEndpoints;
    IPSEC_SA_IDLE_TIMEOUT0 saIdleTimeout;
    IKEEXT_EM_POLICY2* emPolicy;
    uint fwdPathSaLifetime;
    uint compartmentId;
    uint numTrafficSelectorPolicy;
    IPSEC_TRAFFIC_SELECTOR_POLICY0* trafficSelectorPolicies;
}
struct IPSEC_KEYING_POLICY0
{
    uint numKeyMods;
    GUID* keyModKeys;
}
struct IPSEC_KEYING_POLICY1
{
    uint numKeyMods;
    GUID* keyModKeys;
    uint flags;
}
struct IPSEC_AGGREGATE_SA_STATISTICS0
{
    uint activeSas;
    uint pendingSaNegotiations;
    uint totalSasAdded;
    uint totalSasDeleted;
    uint successfulRekeys;
    uint activeTunnels;
    uint offloadedSas;
}
struct IPSEC_ESP_DROP_PACKET_STATISTICS0
{
    uint invalidSpisOnInbound;
    uint decryptionFailuresOnInbound;
    uint authenticationFailuresOnInbound;
    uint replayCheckFailuresOnInbound;
    uint saNotInitializedOnInbound;
}
struct IPSEC_AH_DROP_PACKET_STATISTICS0
{
    uint invalidSpisOnInbound;
    uint authenticationFailuresOnInbound;
    uint replayCheckFailuresOnInbound;
    uint saNotInitializedOnInbound;
}
struct IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0
{
    uint invalidSpisOnInbound;
    uint decryptionFailuresOnInbound;
    uint authenticationFailuresOnInbound;
    uint udpEspValidationFailuresOnInbound;
    uint replayCheckFailuresOnInbound;
    uint invalidClearTextInbound;
    uint saNotInitializedOnInbound;
    uint receiveOverIncorrectSaInbound;
    uint secureReceivesNotMatchingFilters;
}
struct IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1
{
    uint invalidSpisOnInbound;
    uint decryptionFailuresOnInbound;
    uint authenticationFailuresOnInbound;
    uint udpEspValidationFailuresOnInbound;
    uint replayCheckFailuresOnInbound;
    uint invalidClearTextInbound;
    uint saNotInitializedOnInbound;
    uint receiveOverIncorrectSaInbound;
    uint secureReceivesNotMatchingFilters;
    uint totalDropPacketsInbound;
}
struct IPSEC_TRAFFIC_STATISTICS0
{
    ulong encryptedByteCount;
    ulong authenticatedAHByteCount;
    ulong authenticatedESPByteCount;
    ulong transportByteCount;
    ulong tunnelByteCount;
    ulong offloadByteCount;
}
struct IPSEC_TRAFFIC_STATISTICS1
{
    ulong encryptedByteCount;
    ulong authenticatedAHByteCount;
    ulong authenticatedESPByteCount;
    ulong transportByteCount;
    ulong tunnelByteCount;
    ulong offloadByteCount;
    ulong totalSuccessfulPackets;
}
struct IPSEC_STATISTICS0
{
    IPSEC_AGGREGATE_SA_STATISTICS0 aggregateSaStatistics;
    IPSEC_ESP_DROP_PACKET_STATISTICS0 espDropPacketStatistics;
    IPSEC_AH_DROP_PACKET_STATISTICS0 ahDropPacketStatistics;
    IPSEC_AGGREGATE_DROP_PACKET_STATISTICS0 aggregateDropPacketStatistics;
    IPSEC_TRAFFIC_STATISTICS0 inboundTrafficStatistics;
    IPSEC_TRAFFIC_STATISTICS0 outboundTrafficStatistics;
}
struct IPSEC_STATISTICS1
{
    IPSEC_AGGREGATE_SA_STATISTICS0 aggregateSaStatistics;
    IPSEC_ESP_DROP_PACKET_STATISTICS0 espDropPacketStatistics;
    IPSEC_AH_DROP_PACKET_STATISTICS0 ahDropPacketStatistics;
    IPSEC_AGGREGATE_DROP_PACKET_STATISTICS1 aggregateDropPacketStatistics;
    IPSEC_TRAFFIC_STATISTICS1 inboundTrafficStatistics;
    IPSEC_TRAFFIC_STATISTICS1 outboundTrafficStatistics;
}
struct IPSEC_SA_AUTH_INFORMATION0
{
    IPSEC_AUTH_TRANSFORM0 authTransform;
    FWP_BYTE_BLOB authKey;
}
struct IPSEC_SA_CIPHER_INFORMATION0
{
    IPSEC_CIPHER_TRANSFORM0 cipherTransform;
    FWP_BYTE_BLOB cipherKey;
}
struct IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0
{
    IPSEC_SA_CIPHER_INFORMATION0 saCipherInformation;
    IPSEC_SA_AUTH_INFORMATION0 saAuthInformation;
}
struct IPSEC_SA0
{
    uint spi;
    IPSEC_TRANSFORM_TYPE saTransformType;
    union
    {
        IPSEC_SA_AUTH_INFORMATION0* ahInformation;
        IPSEC_SA_AUTH_INFORMATION0* espAuthInformation;
        IPSEC_SA_CIPHER_INFORMATION0* espCipherInformation;
        IPSEC_SA_AUTH_AND_CIPHER_INFORMATION0* espAuthAndCipherInformation;
        IPSEC_SA_AUTH_INFORMATION0* espAuthFwInformation;
    }
}
struct IPSEC_KEYMODULE_STATE0
{
    GUID keyModuleKey;
    FWP_BYTE_BLOB stateBlob;
}
alias IPSEC_TOKEN_TYPE = int;
enum : int
{
    IPSEC_TOKEN_TYPE_MACHINE       = 0x00000000,
    IPSEC_TOKEN_TYPE_IMPERSONATION = 0x00000001,
    IPSEC_TOKEN_TYPE_MAX           = 0x00000002,
}

alias IPSEC_TOKEN_PRINCIPAL = int;
enum : int
{
    IPSEC_TOKEN_PRINCIPAL_LOCAL = 0x00000000,
    IPSEC_TOKEN_PRINCIPAL_PEER  = 0x00000001,
    IPSEC_TOKEN_PRINCIPAL_MAX   = 0x00000002,
}

alias IPSEC_TOKEN_MODE = int;
enum : int
{
    IPSEC_TOKEN_MODE_MAIN     = 0x00000000,
    IPSEC_TOKEN_MODE_EXTENDED = 0x00000001,
    IPSEC_TOKEN_MODE_MAX      = 0x00000002,
}

struct IPSEC_TOKEN0
{
    IPSEC_TOKEN_TYPE type;
    IPSEC_TOKEN_PRINCIPAL principal;
    IPSEC_TOKEN_MODE mode;
    ulong token;
}
struct IPSEC_ID0
{
    PWSTR mmTargetName;
    PWSTR emTargetName;
    uint numTokens;
    IPSEC_TOKEN0* tokens;
    ulong explicitCredentials;
    ulong logonId;
}
struct IPSEC_SA_BUNDLE0
{
    IPSEC_SA_BUNDLE_FLAGS flags;
    IPSEC_SA_LIFETIME0 lifetime;
    uint idleTimeoutSeconds;
    uint ndAllowClearTimeoutSeconds;
    IPSEC_ID0* ipsecId;
    uint napContext;
    uint qmSaId;
    uint numSAs;
    IPSEC_SA0* saList;
    IPSEC_KEYMODULE_STATE0* keyModuleState;
    FWP_IP_VERSION ipVersion;
    union
    {
        uint peerV4PrivateAddress;
    }
    ulong mmSaId;
    IPSEC_PFS_GROUP pfsGroup;
}
struct IPSEC_SA_BUNDLE1
{
    IPSEC_SA_BUNDLE_FLAGS flags;
    IPSEC_SA_LIFETIME0 lifetime;
    uint idleTimeoutSeconds;
    uint ndAllowClearTimeoutSeconds;
    IPSEC_ID0* ipsecId;
    uint napContext;
    uint qmSaId;
    uint numSAs;
    IPSEC_SA0* saList;
    IPSEC_KEYMODULE_STATE0* keyModuleState;
    FWP_IP_VERSION ipVersion;
    union
    {
        uint peerV4PrivateAddress;
    }
    ulong mmSaId;
    IPSEC_PFS_GROUP pfsGroup;
    GUID saLookupContext;
    ulong qmFilterId;
}
alias IPSEC_TRAFFIC_TYPE = int;
enum : int
{
    IPSEC_TRAFFIC_TYPE_TRANSPORT = 0x00000000,
    IPSEC_TRAFFIC_TYPE_TUNNEL    = 0x00000001,
    IPSEC_TRAFFIC_TYPE_MAX       = 0x00000002,
}

struct IPSEC_TRAFFIC0
{
    FWP_IP_VERSION ipVersion;
    union
    {
        uint localV4Address;
        ubyte[16] localV6Address;
    }
    union
    {
        uint remoteV4Address;
        ubyte[16] remoteV6Address;
    }
    IPSEC_TRAFFIC_TYPE trafficType;
    union
    {
        ulong ipsecFilterId;
        ulong tunnelPolicyId;
    }
    ushort remotePort;
}
struct IPSEC_TRAFFIC1
{
    FWP_IP_VERSION ipVersion;
    union
    {
        uint localV4Address;
        ubyte[16] localV6Address;
    }
    union
    {
        uint remoteV4Address;
        ubyte[16] remoteV6Address;
    }
    IPSEC_TRAFFIC_TYPE trafficType;
    union
    {
        ulong ipsecFilterId;
        ulong tunnelPolicyId;
    }
    ushort remotePort;
    ushort localPort;
    ubyte ipProtocol;
    ulong localIfLuid;
    uint realIfProfileId;
}
struct IPSEC_V4_UDP_ENCAPSULATION0
{
    ushort localUdpEncapPort;
    ushort remoteUdpEncapPort;
}
struct IPSEC_GETSPI0
{
    IPSEC_TRAFFIC0 inboundIpsecTraffic;
    FWP_IP_VERSION ipVersion;
    union
    {
        IPSEC_V4_UDP_ENCAPSULATION0* inboundUdpEncapsulation;
    }
    GUID* rngCryptoModuleID;
}
struct IPSEC_GETSPI1
{
    IPSEC_TRAFFIC1 inboundIpsecTraffic;
    FWP_IP_VERSION ipVersion;
    union
    {
        IPSEC_V4_UDP_ENCAPSULATION0* inboundUdpEncapsulation;
    }
    GUID* rngCryptoModuleID;
}
struct IPSEC_SA_DETAILS0
{
    FWP_IP_VERSION ipVersion;
    FWP_DIRECTION saDirection;
    IPSEC_TRAFFIC0 traffic;
    IPSEC_SA_BUNDLE0 saBundle;
    union
    {
        IPSEC_V4_UDP_ENCAPSULATION0* udpEncapsulation;
    }
    FWPM_FILTER0* transportFilter;
}
struct IPSEC_SA_DETAILS1
{
    FWP_IP_VERSION ipVersion;
    FWP_DIRECTION saDirection;
    IPSEC_TRAFFIC1 traffic;
    IPSEC_SA_BUNDLE1 saBundle;
    union
    {
        IPSEC_V4_UDP_ENCAPSULATION0* udpEncapsulation;
    }
    FWPM_FILTER0* transportFilter;
    IPSEC_VIRTUAL_IF_TUNNEL_INFO0 virtualIfTunnelInfo;
}
struct IPSEC_SA_CONTEXT0
{
    ulong saContextId;
    IPSEC_SA_DETAILS0* inboundSa;
    IPSEC_SA_DETAILS0* outboundSa;
}
struct IPSEC_SA_CONTEXT1
{
    ulong saContextId;
    IPSEC_SA_DETAILS1* inboundSa;
    IPSEC_SA_DETAILS1* outboundSa;
}
struct IPSEC_SA_CONTEXT_ENUM_TEMPLATE0
{
    FWP_CONDITION_VALUE0 localSubNet;
    FWP_CONDITION_VALUE0 remoteSubNet;
}
struct IPSEC_SA_ENUM_TEMPLATE0
{
    FWP_DIRECTION saDirection;
}
struct IPSEC_SA_CONTEXT_SUBSCRIPTION0
{
    IPSEC_SA_CONTEXT_ENUM_TEMPLATE0* enumTemplate;
    uint flags;
    GUID sessionKey;
}
alias IPSEC_SA_CONTEXT_EVENT_TYPE0 = int;
enum : int
{
    IPSEC_SA_CONTEXT_EVENT_ADD    = 0x00000001,
    IPSEC_SA_CONTEXT_EVENT_DELETE = 0x00000002,
    IPSEC_SA_CONTEXT_EVENT_MAX    = 0x00000003,
}

struct IPSEC_SA_CONTEXT_CHANGE0
{
    IPSEC_SA_CONTEXT_EVENT_TYPE0 changeType;
    ulong saContextId;
}
alias IPSEC_FAILURE_POINT = int;
enum : int
{
    IPSEC_FAILURE_NONE      = 0x00000000,
    IPSEC_FAILURE_ME        = 0x00000001,
    IPSEC_FAILURE_PEER      = 0x00000002,
    IPSEC_FAILURE_POINT_MAX = 0x00000003,
}

struct IPSEC_ADDRESS_INFO0
{
    uint numV4Addresses;
    uint* v4Addresses;
    uint numV6Addresses;
    FWP_BYTE_ARRAY16* v6Addresses;
}
struct IPSEC_DOSP_OPTIONS0
{
    uint stateIdleTimeoutSeconds;
    uint perIPRateLimitQueueIdleTimeoutSeconds;
    ubyte ipV6IPsecUnauthDscp;
    uint ipV6IPsecUnauthRateLimitBytesPerSec;
    uint ipV6IPsecUnauthPerIPRateLimitBytesPerSec;
    ubyte ipV6IPsecAuthDscp;
    uint ipV6IPsecAuthRateLimitBytesPerSec;
    ubyte icmpV6Dscp;
    uint icmpV6RateLimitBytesPerSec;
    ubyte ipV6FilterExemptDscp;
    uint ipV6FilterExemptRateLimitBytesPerSec;
    ubyte defBlockExemptDscp;
    uint defBlockExemptRateLimitBytesPerSec;
    uint maxStateEntries;
    uint maxPerIPRateLimitQueues;
    IPSEC_DOSP_FLAGS flags;
    uint numPublicIFLuids;
    ulong* publicIFLuids;
    uint numInternalIFLuids;
    ulong* internalIFLuids;
    FWP_V6_ADDR_AND_MASK publicV6AddrMask;
    FWP_V6_ADDR_AND_MASK internalV6AddrMask;
}
struct IPSEC_DOSP_STATISTICS0
{
    ulong totalStateEntriesCreated;
    ulong currentStateEntries;
    ulong totalInboundAllowedIPv6IPsecUnauthPkts;
    ulong totalInboundRatelimitDiscardedIPv6IPsecUnauthPkts;
    ulong totalInboundPerIPRatelimitDiscardedIPv6IPsecUnauthPkts;
    ulong totalInboundOtherDiscardedIPv6IPsecUnauthPkts;
    ulong totalInboundAllowedIPv6IPsecAuthPkts;
    ulong totalInboundRatelimitDiscardedIPv6IPsecAuthPkts;
    ulong totalInboundOtherDiscardedIPv6IPsecAuthPkts;
    ulong totalInboundAllowedICMPv6Pkts;
    ulong totalInboundRatelimitDiscardedICMPv6Pkts;
    ulong totalInboundAllowedIPv6FilterExemptPkts;
    ulong totalInboundRatelimitDiscardedIPv6FilterExemptPkts;
    ulong totalInboundDiscardedIPv6FilterBlockPkts;
    ulong totalInboundAllowedDefBlockExemptPkts;
    ulong totalInboundRatelimitDiscardedDefBlockExemptPkts;
    ulong totalInboundDiscardedDefBlockPkts;
    ulong currentInboundIPv6IPsecUnauthPerIPRateLimitQueues;
}
struct IPSEC_DOSP_STATE0
{
    ubyte[16] publicHostV6Addr;
    ubyte[16] internalHostV6Addr;
    ulong totalInboundIPv6IPsecAuthPackets;
    ulong totalOutboundIPv6IPsecAuthPackets;
    uint durationSecs;
}
struct IPSEC_DOSP_STATE_ENUM_TEMPLATE0
{
    FWP_V6_ADDR_AND_MASK publicV6AddrMask;
    FWP_V6_ADDR_AND_MASK internalV6AddrMask;
}
struct IPSEC_KEY_MANAGER0
{
    GUID keyManagerKey;
    FWPM_DISPLAY_DATA0 displayData;
    uint flags;
    ubyte keyDictationTimeoutHint;
}
alias DL_ADDRESS_TYPE = int;
enum : int
{
    DlUnicast   = 0x00000000,
    DlMulticast = 0x00000001,
    DlBroadcast = 0x00000002,
}

alias FWPM_CHANGE_TYPE = int;
enum : int
{
    FWPM_CHANGE_ADD      = 0x00000001,
    FWPM_CHANGE_DELETE   = 0x00000002,
    FWPM_CHANGE_TYPE_MAX = 0x00000003,
}

alias FWPM_SERVICE_STATE = int;
enum : int
{
    FWPM_SERVICE_STOPPED       = 0x00000000,
    FWPM_SERVICE_START_PENDING = 0x00000001,
    FWPM_SERVICE_STOP_PENDING  = 0x00000002,
    FWPM_SERVICE_RUNNING       = 0x00000003,
    FWPM_SERVICE_STATE_MAX     = 0x00000004,
}

alias FWPM_ENGINE_OPTION = int;
enum : int
{
    FWPM_ENGINE_COLLECT_NET_EVENTS           = 0x00000000,
    FWPM_ENGINE_NET_EVENT_MATCH_ANY_KEYWORDS = 0x00000001,
    FWPM_ENGINE_NAME_CACHE                   = 0x00000002,
    FWPM_ENGINE_MONITOR_IPSEC_CONNECTIONS    = 0x00000003,
    FWPM_ENGINE_PACKET_QUEUING               = 0x00000004,
    FWPM_ENGINE_TXN_WATCHDOG_TIMEOUT_IN_MSEC = 0x00000005,
    FWPM_ENGINE_OPTION_MAX                   = 0x00000006,
}

struct FWPM_SESSION0
{
    GUID sessionKey;
    FWPM_DISPLAY_DATA0 displayData;
    uint flags;
    uint txnWaitTimeoutInMSec;
    uint processId;
    SID* sid;
    PWSTR username;
    BOOL kernelMode;
}
struct FWPM_SESSION_ENUM_TEMPLATE0
{
    ulong reserved;
}
struct FWPM_PROVIDER0
{
    GUID providerKey;
    FWPM_DISPLAY_DATA0 displayData;
    uint flags;
    FWP_BYTE_BLOB providerData;
    PWSTR serviceName;
}
struct FWPM_PROVIDER_ENUM_TEMPLATE0
{
    ulong reserved;
}
struct FWPM_PROVIDER_CHANGE0
{
    FWPM_CHANGE_TYPE changeType;
    GUID providerKey;
}
struct FWPM_PROVIDER_SUBSCRIPTION0
{
    FWPM_PROVIDER_ENUM_TEMPLATE0* enumTemplate;
    uint flags;
    GUID sessionKey;
}
struct FWPM_CLASSIFY_OPTION0
{
    FWP_CLASSIFY_OPTION_TYPE type;
    FWP_VALUE0 value;
}
struct FWPM_CLASSIFY_OPTIONS0
{
    uint numOptions;
    FWPM_CLASSIFY_OPTION0* options;
}
struct FWPM_NETWORK_CONNECTION_POLICY_SETTING0
{
    FWP_NETWORK_CONNECTION_POLICY_SETTING_TYPE type;
    FWP_VALUE0 value;
}
struct FWPM_NETWORK_CONNECTION_POLICY_SETTINGS0
{
    uint numSettings;
    FWPM_NETWORK_CONNECTION_POLICY_SETTING0* settings;
}
alias FWPM_PROVIDER_CONTEXT_TYPE = int;
enum : int
{
    FWPM_IPSEC_KEYING_CONTEXT              = 0x00000000,
    FWPM_IPSEC_IKE_QM_TRANSPORT_CONTEXT    = 0x00000001,
    FWPM_IPSEC_IKE_QM_TUNNEL_CONTEXT       = 0x00000002,
    FWPM_IPSEC_AUTHIP_QM_TRANSPORT_CONTEXT = 0x00000003,
    FWPM_IPSEC_AUTHIP_QM_TUNNEL_CONTEXT    = 0x00000004,
    FWPM_IPSEC_IKE_MM_CONTEXT              = 0x00000005,
    FWPM_IPSEC_AUTHIP_MM_CONTEXT           = 0x00000006,
    FWPM_CLASSIFY_OPTIONS_CONTEXT          = 0x00000007,
    FWPM_GENERAL_CONTEXT                   = 0x00000008,
    FWPM_IPSEC_IKEV2_QM_TUNNEL_CONTEXT     = 0x00000009,
    FWPM_IPSEC_IKEV2_MM_CONTEXT            = 0x0000000a,
    FWPM_IPSEC_DOSP_CONTEXT                = 0x0000000b,
    FWPM_IPSEC_IKEV2_QM_TRANSPORT_CONTEXT  = 0x0000000c,
    FWPM_NETWORK_CONNECTION_POLICY_CONTEXT = 0x0000000d,
    FWPM_PROVIDER_CONTEXT_TYPE_MAX         = 0x0000000e,
}

struct FWPM_PROVIDER_CONTEXT0
{
    GUID providerContextKey;
    FWPM_DISPLAY_DATA0 displayData;
    uint flags;
    GUID* providerKey;
    FWP_BYTE_BLOB providerData;
    FWPM_PROVIDER_CONTEXT_TYPE type;
    union
    {
        IPSEC_KEYING_POLICY0* keyingPolicy;
        IPSEC_TRANSPORT_POLICY0* ikeQmTransportPolicy;
        IPSEC_TUNNEL_POLICY0* ikeQmTunnelPolicy;
        IPSEC_TRANSPORT_POLICY0* authipQmTransportPolicy;
        IPSEC_TUNNEL_POLICY0* authipQmTunnelPolicy;
        IKEEXT_POLICY0* ikeMmPolicy;
        IKEEXT_POLICY0* authIpMmPolicy;
        FWP_BYTE_BLOB* dataBuffer;
        FWPM_CLASSIFY_OPTIONS0* classifyOptions;
    }
    ulong providerContextId;
}
struct FWPM_PROVIDER_CONTEXT1
{
    GUID providerContextKey;
    FWPM_DISPLAY_DATA0 displayData;
    uint flags;
    GUID* providerKey;
    FWP_BYTE_BLOB providerData;
    FWPM_PROVIDER_CONTEXT_TYPE type;
    union
    {
        IPSEC_KEYING_POLICY0* keyingPolicy;
        IPSEC_TRANSPORT_POLICY1* ikeQmTransportPolicy;
        IPSEC_TUNNEL_POLICY1* ikeQmTunnelPolicy;
        IPSEC_TRANSPORT_POLICY1* authipQmTransportPolicy;
        IPSEC_TUNNEL_POLICY1* authipQmTunnelPolicy;
        IKEEXT_POLICY1* ikeMmPolicy;
        IKEEXT_POLICY1* authIpMmPolicy;
        FWP_BYTE_BLOB* dataBuffer;
        FWPM_CLASSIFY_OPTIONS0* classifyOptions;
        IPSEC_TUNNEL_POLICY1* ikeV2QmTunnelPolicy;
        IKEEXT_POLICY1* ikeV2MmPolicy;
        IPSEC_DOSP_OPTIONS0* idpOptions;
    }
    ulong providerContextId;
}
struct FWPM_PROVIDER_CONTEXT2
{
    GUID providerContextKey;
    FWPM_DISPLAY_DATA0 displayData;
    uint flags;
    GUID* providerKey;
    FWP_BYTE_BLOB providerData;
    FWPM_PROVIDER_CONTEXT_TYPE type;
    union
    {
        IPSEC_KEYING_POLICY1* keyingPolicy;
        IPSEC_TRANSPORT_POLICY2* ikeQmTransportPolicy;
        IPSEC_TUNNEL_POLICY2* ikeQmTunnelPolicy;
        IPSEC_TRANSPORT_POLICY2* authipQmTransportPolicy;
        IPSEC_TUNNEL_POLICY2* authipQmTunnelPolicy;
        IKEEXT_POLICY2* ikeMmPolicy;
        IKEEXT_POLICY2* authIpMmPolicy;
        FWP_BYTE_BLOB* dataBuffer;
        FWPM_CLASSIFY_OPTIONS0* classifyOptions;
        IPSEC_TUNNEL_POLICY2* ikeV2QmTunnelPolicy;
        IPSEC_TRANSPORT_POLICY2* ikeV2QmTransportPolicy;
        IKEEXT_POLICY2* ikeV2MmPolicy;
        IPSEC_DOSP_OPTIONS0* idpOptions;
    }
    ulong providerContextId;
}
struct FWPM_PROVIDER_CONTEXT3
{
    GUID providerContextKey;
    FWPM_DISPLAY_DATA0 displayData;
    uint flags;
    GUID* providerKey;
    FWP_BYTE_BLOB providerData;
    FWPM_PROVIDER_CONTEXT_TYPE type;
    union
    {
        IPSEC_KEYING_POLICY1* keyingPolicy;
        IPSEC_TRANSPORT_POLICY2* ikeQmTransportPolicy;
        IPSEC_TUNNEL_POLICY3* ikeQmTunnelPolicy;
        IPSEC_TRANSPORT_POLICY2* authipQmTransportPolicy;
        IPSEC_TUNNEL_POLICY3* authipQmTunnelPolicy;
        IKEEXT_POLICY2* ikeMmPolicy;
        IKEEXT_POLICY2* authIpMmPolicy;
        FWP_BYTE_BLOB* dataBuffer;
        FWPM_CLASSIFY_OPTIONS0* classifyOptions;
        IPSEC_TUNNEL_POLICY3* ikeV2QmTunnelPolicy;
        IPSEC_TRANSPORT_POLICY2* ikeV2QmTransportPolicy;
        IKEEXT_POLICY2* ikeV2MmPolicy;
        IPSEC_DOSP_OPTIONS0* idpOptions;
        FWPM_NETWORK_CONNECTION_POLICY_SETTINGS0* networkConnectionPolicy;
    }
    ulong providerContextId;
}
struct FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0
{
    GUID* providerKey;
    FWPM_PROVIDER_CONTEXT_TYPE providerContextType;
}
struct FWPM_PROVIDER_CONTEXT_CHANGE0
{
    FWPM_CHANGE_TYPE changeType;
    GUID providerContextKey;
    ulong providerContextId;
}
struct FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0
{
    FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0* enumTemplate;
    FWPM_SUBSCRIPTION_FLAGS flags;
    GUID sessionKey;
}
struct FWPM_SUBLAYER0
{
    GUID subLayerKey;
    FWPM_DISPLAY_DATA0 displayData;
    uint flags;
    GUID* providerKey;
    FWP_BYTE_BLOB providerData;
    ushort weight;
}
struct FWPM_SUBLAYER_ENUM_TEMPLATE0
{
    GUID* providerKey;
}
struct FWPM_SUBLAYER_CHANGE0
{
    FWPM_CHANGE_TYPE changeType;
    GUID subLayerKey;
}
struct FWPM_SUBLAYER_SUBSCRIPTION0
{
    FWPM_SUBLAYER_ENUM_TEMPLATE0* enumTemplate;
    FWPM_SUBSCRIPTION_FLAGS flags;
    GUID sessionKey;
}
alias FWPM_FIELD_TYPE = int;
enum : int
{
    FWPM_FIELD_RAW_DATA   = 0x00000000,
    FWPM_FIELD_IP_ADDRESS = 0x00000001,
    FWPM_FIELD_FLAGS      = 0x00000002,
    FWPM_FIELD_TYPE_MAX   = 0x00000003,
}

struct FWPM_FIELD0
{
    GUID* fieldKey;
    FWPM_FIELD_TYPE type;
    FWP_DATA_TYPE dataType;
}
struct FWPM_LAYER0
{
    GUID layerKey;
    FWPM_DISPLAY_DATA0 displayData;
    uint flags;
    uint numFields;
    FWPM_FIELD0* field;
    GUID defaultSubLayerKey;
    ushort layerId;
}
struct FWPM_LAYER_ENUM_TEMPLATE0
{
    ulong reserved;
}
struct FWPM_CALLOUT0
{
    GUID calloutKey;
    FWPM_DISPLAY_DATA0 displayData;
    uint flags;
    GUID* providerKey;
    FWP_BYTE_BLOB providerData;
    GUID applicableLayer;
    uint calloutId;
}
struct FWPM_CALLOUT_ENUM_TEMPLATE0
{
    GUID* providerKey;
    GUID layerKey;
}
struct FWPM_CALLOUT_CHANGE0
{
    FWPM_CHANGE_TYPE changeType;
    GUID calloutKey;
    uint calloutId;
}
struct FWPM_CALLOUT_SUBSCRIPTION0
{
    FWPM_CALLOUT_ENUM_TEMPLATE0* enumTemplate;
    uint flags;
    GUID sessionKey;
}
struct FWPM_ACTION0
{
    uint type;
    union
    {
        GUID filterType;
        GUID calloutKey;
    }
}
struct FWPM_FILTER_CONDITION0
{
    GUID fieldKey;
    FWP_MATCH_TYPE matchType;
    FWP_CONDITION_VALUE0 conditionValue;
}
struct FWPM_FILTER0
{
    GUID filterKey;
    FWPM_DISPLAY_DATA0 displayData;
    FWPM_FILTER_FLAGS flags;
    GUID* providerKey;
    FWP_BYTE_BLOB providerData;
    GUID layerKey;
    GUID subLayerKey;
    FWP_VALUE0 weight;
    uint numFilterConditions;
    FWPM_FILTER_CONDITION0* filterCondition;
    FWPM_ACTION0 action;
    union
    {
        ulong rawContext;
        GUID providerContextKey;
    }
    GUID* reserved;
    ulong filterId;
    FWP_VALUE0 effectiveWeight;
}
struct FWPM_FILTER_ENUM_TEMPLATE0
{
    GUID* providerKey;
    GUID layerKey;
    FWP_FILTER_ENUM_TYPE enumType;
    uint flags;
    FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0* providerContextTemplate;
    uint numFilterConditions;
    FWPM_FILTER_CONDITION0* filterCondition;
    uint actionMask;
    GUID* calloutKey;
}
struct FWPM_FILTER_CHANGE0
{
    FWPM_CHANGE_TYPE changeType;
    GUID filterKey;
    ulong filterId;
}
struct FWPM_FILTER_SUBSCRIPTION0
{
    FWPM_FILTER_ENUM_TEMPLATE0* enumTemplate;
    uint flags;
    GUID sessionKey;
}
struct FWPM_LAYER_STATISTICS0
{
    GUID layerId;
    uint classifyPermitCount;
    uint classifyBlockCount;
    uint classifyVetoCount;
    uint numCacheEntries;
}
struct FWPM_STATISTICS0
{
    uint numLayerStatistics;
    FWPM_LAYER_STATISTICS0* layerStatistics;
    uint inboundAllowedConnectionsV4;
    uint inboundBlockedConnectionsV4;
    uint outboundAllowedConnectionsV4;
    uint outboundBlockedConnectionsV4;
    uint inboundAllowedConnectionsV6;
    uint inboundBlockedConnectionsV6;
    uint outboundAllowedConnectionsV6;
    uint outboundBlockedConnectionsV6;
    uint inboundActiveConnectionsV4;
    uint outboundActiveConnectionsV4;
    uint inboundActiveConnectionsV6;
    uint outboundActiveConnectionsV6;
    ulong reauthDirInbound;
    ulong reauthDirOutbound;
    ulong reauthFamilyV4;
    ulong reauthFamilyV6;
    ulong reauthProtoOther;
    ulong reauthProtoIPv4;
    ulong reauthProtoIPv6;
    ulong reauthProtoICMP;
    ulong reauthProtoICMP6;
    ulong reauthProtoUDP;
    ulong reauthProtoTCP;
    ulong reauthReasonPolicyChange;
    ulong reauthReasonNewArrivalInterface;
    ulong reauthReasonNewNextHopInterface;
    ulong reauthReasonProfileCrossing;
    ulong reauthReasonClassifyCompletion;
    ulong reauthReasonIPSecPropertiesChanged;
    ulong reauthReasonMidStreamInspection;
    ulong reauthReasonSocketPropertyChanged;
    ulong reauthReasonNewInboundMCastBCastPacket;
    ulong reauthReasonEDPPolicyChanged;
    ulong reauthReasonProxyHandleChanged;
}
struct FWPM_NET_EVENT_HEADER0
{
    FILETIME timeStamp;
    uint flags;
    FWP_IP_VERSION ipVersion;
    ubyte ipProtocol;
    union
    {
        uint localAddrV4;
        FWP_BYTE_ARRAY16 localAddrV6;
    }
    union
    {
        uint remoteAddrV4;
        FWP_BYTE_ARRAY16 remoteAddrV6;
    }
    ushort localPort;
    ushort remotePort;
    uint scopeId;
    FWP_BYTE_BLOB appId;
    SID* userId;
}
struct FWPM_NET_EVENT_HEADER1
{
    FILETIME timeStamp;
    uint flags;
    FWP_IP_VERSION ipVersion;
    ubyte ipProtocol;
    union
    {
        uint localAddrV4;
        FWP_BYTE_ARRAY16 localAddrV6;
    }
    union
    {
        uint remoteAddrV4;
        FWP_BYTE_ARRAY16 remoteAddrV6;
    }
    ushort localPort;
    ushort remotePort;
    uint scopeId;
    FWP_BYTE_BLOB appId;
    SID* userId;
    union
    {
        struct
        {
            FWP_AF reserved1;
            union
            {
                struct
                {
                    FWP_BYTE_ARRAY6 reserved2;
                    FWP_BYTE_ARRAY6 reserved3;
                    uint reserved4;
                    uint reserved5;
                    ushort reserved6;
                    uint reserved7;
                    uint reserved8;
                    ushort reserved9;
                    ulong reserved10;
                }
            }
        }
    }
}
struct FWPM_NET_EVENT_HEADER2
{
    FILETIME timeStamp;
    uint flags;
    FWP_IP_VERSION ipVersion;
    ubyte ipProtocol;
    union
    {
        uint localAddrV4;
        FWP_BYTE_ARRAY16 localAddrV6;
    }
    union
    {
        uint remoteAddrV4;
        FWP_BYTE_ARRAY16 remoteAddrV6;
    }
    ushort localPort;
    ushort remotePort;
    uint scopeId;
    FWP_BYTE_BLOB appId;
    SID* userId;
    FWP_AF addressFamily;
    SID* packageSid;
}
struct FWPM_NET_EVENT_HEADER3
{
    FILETIME timeStamp;
    uint flags;
    FWP_IP_VERSION ipVersion;
    ubyte ipProtocol;
    union
    {
        uint localAddrV4;
        FWP_BYTE_ARRAY16 localAddrV6;
    }
    union
    {
        uint remoteAddrV4;
        FWP_BYTE_ARRAY16 remoteAddrV6;
    }
    ushort localPort;
    ushort remotePort;
    uint scopeId;
    FWP_BYTE_BLOB appId;
    SID* userId;
    FWP_AF addressFamily;
    SID* packageSid;
    PWSTR enterpriseId;
    ulong policyFlags;
    FWP_BYTE_BLOB effectiveName;
}
alias FWPM_NET_EVENT_TYPE = int;
enum : int
{
    FWPM_NET_EVENT_TYPE_IKEEXT_MM_FAILURE  = 0x00000000,
    FWPM_NET_EVENT_TYPE_IKEEXT_QM_FAILURE  = 0x00000001,
    FWPM_NET_EVENT_TYPE_IKEEXT_EM_FAILURE  = 0x00000002,
    FWPM_NET_EVENT_TYPE_CLASSIFY_DROP      = 0x00000003,
    FWPM_NET_EVENT_TYPE_IPSEC_KERNEL_DROP  = 0x00000004,
    FWPM_NET_EVENT_TYPE_IPSEC_DOSP_DROP    = 0x00000005,
    FWPM_NET_EVENT_TYPE_CLASSIFY_ALLOW     = 0x00000006,
    FWPM_NET_EVENT_TYPE_CAPABILITY_DROP    = 0x00000007,
    FWPM_NET_EVENT_TYPE_CAPABILITY_ALLOW   = 0x00000008,
    FWPM_NET_EVENT_TYPE_CLASSIFY_DROP_MAC  = 0x00000009,
    FWPM_NET_EVENT_TYPE_LPM_PACKET_ARRIVAL = 0x0000000a,
    FWPM_NET_EVENT_TYPE_MAX                = 0x0000000b,
}

struct FWPM_NET_EVENT_IKEEXT_MM_FAILURE0
{
    uint failureErrorCode;
    IPSEC_FAILURE_POINT failurePoint;
    uint flags;
    IKEEXT_KEY_MODULE_TYPE keyingModuleType;
    IKEEXT_MM_SA_STATE mmState;
    IKEEXT_SA_ROLE saRole;
    IKEEXT_AUTHENTICATION_METHOD_TYPE mmAuthMethod;
    ubyte[20] endCertHash;
    ulong mmId;
    ulong mmFilterId;
}
struct FWPM_NET_EVENT_IKEEXT_MM_FAILURE1
{
    uint failureErrorCode;
    IPSEC_FAILURE_POINT failurePoint;
    uint flags;
    IKEEXT_KEY_MODULE_TYPE keyingModuleType;
    IKEEXT_MM_SA_STATE mmState;
    IKEEXT_SA_ROLE saRole;
    IKEEXT_AUTHENTICATION_METHOD_TYPE mmAuthMethod;
    ubyte[20] endCertHash;
    ulong mmId;
    ulong mmFilterId;
    PWSTR localPrincipalNameForAuth;
    PWSTR remotePrincipalNameForAuth;
    uint numLocalPrincipalGroupSids;
    PWSTR* localPrincipalGroupSids;
    uint numRemotePrincipalGroupSids;
    PWSTR* remotePrincipalGroupSids;
}
struct FWPM_NET_EVENT_IKEEXT_MM_FAILURE2
{
    uint failureErrorCode;
    IPSEC_FAILURE_POINT failurePoint;
    uint flags;
    IKEEXT_KEY_MODULE_TYPE keyingModuleType;
    IKEEXT_MM_SA_STATE mmState;
    IKEEXT_SA_ROLE saRole;
    IKEEXT_AUTHENTICATION_METHOD_TYPE mmAuthMethod;
    ubyte[20] endCertHash;
    ulong mmId;
    ulong mmFilterId;
    PWSTR localPrincipalNameForAuth;
    PWSTR remotePrincipalNameForAuth;
    uint numLocalPrincipalGroupSids;
    PWSTR* localPrincipalGroupSids;
    uint numRemotePrincipalGroupSids;
    PWSTR* remotePrincipalGroupSids;
    GUID* providerContextKey;
}
struct FWPM_NET_EVENT_IKEEXT_QM_FAILURE0
{
    uint failureErrorCode;
    IPSEC_FAILURE_POINT failurePoint;
    IKEEXT_KEY_MODULE_TYPE keyingModuleType;
    IKEEXT_QM_SA_STATE qmState;
    IKEEXT_SA_ROLE saRole;
    IPSEC_TRAFFIC_TYPE saTrafficType;
    union
    {
        FWP_CONDITION_VALUE0 localSubNet;
    }
    union
    {
        FWP_CONDITION_VALUE0 remoteSubNet;
    }
    ulong qmFilterId;
}
struct FWPM_NET_EVENT_IKEEXT_QM_FAILURE1
{
    uint failureErrorCode;
    IPSEC_FAILURE_POINT failurePoint;
    IKEEXT_KEY_MODULE_TYPE keyingModuleType;
    IKEEXT_QM_SA_STATE qmState;
    IKEEXT_SA_ROLE saRole;
    IPSEC_TRAFFIC_TYPE saTrafficType;
    union
    {
        FWP_CONDITION_VALUE0 localSubNet;
    }
    union
    {
        FWP_CONDITION_VALUE0 remoteSubNet;
    }
    ulong qmFilterId;
    ulong mmSaLuid;
    GUID mmProviderContextKey;
}
struct FWPM_NET_EVENT_IKEEXT_EM_FAILURE0
{
    uint failureErrorCode;
    IPSEC_FAILURE_POINT failurePoint;
    uint flags;
    IKEEXT_EM_SA_STATE emState;
    IKEEXT_SA_ROLE saRole;
    IKEEXT_AUTHENTICATION_METHOD_TYPE emAuthMethod;
    ubyte[20] endCertHash;
    ulong mmId;
    ulong qmFilterId;
}
struct FWPM_NET_EVENT_IKEEXT_EM_FAILURE1
{
    uint failureErrorCode;
    IPSEC_FAILURE_POINT failurePoint;
    uint flags;
    IKEEXT_EM_SA_STATE emState;
    IKEEXT_SA_ROLE saRole;
    IKEEXT_AUTHENTICATION_METHOD_TYPE emAuthMethod;
    ubyte[20] endCertHash;
    ulong mmId;
    ulong qmFilterId;
    PWSTR localPrincipalNameForAuth;
    PWSTR remotePrincipalNameForAuth;
    uint numLocalPrincipalGroupSids;
    PWSTR* localPrincipalGroupSids;
    uint numRemotePrincipalGroupSids;
    PWSTR* remotePrincipalGroupSids;
    IPSEC_TRAFFIC_TYPE saTrafficType;
}
struct FWPM_NET_EVENT_CLASSIFY_DROP0
{
    ulong filterId;
    ushort layerId;
}
struct FWPM_NET_EVENT_CLASSIFY_DROP1
{
    ulong filterId;
    ushort layerId;
    uint reauthReason;
    uint originalProfile;
    uint currentProfile;
    uint msFwpDirection;
    BOOL isLoopback;
}
struct FWPM_NET_EVENT_CLASSIFY_DROP2
{
    ulong filterId;
    ushort layerId;
    uint reauthReason;
    uint originalProfile;
    uint currentProfile;
    uint msFwpDirection;
    BOOL isLoopback;
    FWP_BYTE_BLOB vSwitchId;
    uint vSwitchSourcePort;
    uint vSwitchDestinationPort;
}
struct FWPM_NET_EVENT_CLASSIFY_DROP_MAC0
{
    FWP_BYTE_ARRAY6 localMacAddr;
    FWP_BYTE_ARRAY6 remoteMacAddr;
    uint mediaType;
    uint ifType;
    ushort etherType;
    uint ndisPortNumber;
    uint reserved;
    ushort vlanTag;
    ulong ifLuid;
    ulong filterId;
    ushort layerId;
    uint reauthReason;
    uint originalProfile;
    uint currentProfile;
    uint msFwpDirection;
    BOOL isLoopback;
    FWP_BYTE_BLOB vSwitchId;
    uint vSwitchSourcePort;
    uint vSwitchDestinationPort;
}
struct FWPM_NET_EVENT_CLASSIFY_ALLOW0
{
    ulong filterId;
    ushort layerId;
    uint reauthReason;
    uint originalProfile;
    uint currentProfile;
    uint msFwpDirection;
    BOOL isLoopback;
}
struct FWPM_NET_EVENT_IPSEC_KERNEL_DROP0
{
    int failureStatus;
    FWP_DIRECTION direction;
    uint spi;
    ulong filterId;
    ushort layerId;
}
struct FWPM_NET_EVENT_IPSEC_DOSP_DROP0
{
    FWP_IP_VERSION ipVersion;
    union
    {
        uint publicHostV4Addr;
        ubyte[16] publicHostV6Addr;
    }
    union
    {
        uint internalHostV4Addr;
        ubyte[16] internalHostV6Addr;
    }
    int failureStatus;
    FWP_DIRECTION direction;
}
alias FWPM_APPC_NETWORK_CAPABILITY_TYPE = int;
enum : int
{
    FWPM_APPC_NETWORK_CAPABILITY_INTERNET_CLIENT          = 0x00000000,
    FWPM_APPC_NETWORK_CAPABILITY_INTERNET_CLIENT_SERVER   = 0x00000001,
    FWPM_APPC_NETWORK_CAPABILITY_INTERNET_PRIVATE_NETWORK = 0x00000002,
}

struct FWPM_NET_EVENT_CAPABILITY_DROP0
{
    FWPM_APPC_NETWORK_CAPABILITY_TYPE networkCapabilityId;
    ulong filterId;
    BOOL isLoopback;
}
struct FWPM_NET_EVENT_CAPABILITY_ALLOW0
{
    FWPM_APPC_NETWORK_CAPABILITY_TYPE networkCapabilityId;
    ulong filterId;
    BOOL isLoopback;
}
struct FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0
{
    uint spi;
}
struct FWPM_NET_EVENT0
{
    FWPM_NET_EVENT_HEADER0 header;
    FWPM_NET_EVENT_TYPE type;
    union
    {
        FWPM_NET_EVENT_IKEEXT_MM_FAILURE0* ikeMmFailure;
        FWPM_NET_EVENT_IKEEXT_QM_FAILURE0* ikeQmFailure;
        FWPM_NET_EVENT_IKEEXT_EM_FAILURE0* ikeEmFailure;
        FWPM_NET_EVENT_CLASSIFY_DROP0* classifyDrop;
        FWPM_NET_EVENT_IPSEC_KERNEL_DROP0* ipsecDrop;
        FWPM_NET_EVENT_IPSEC_DOSP_DROP0* idpDrop;
    }
}
struct FWPM_NET_EVENT1
{
    FWPM_NET_EVENT_HEADER1 header;
    FWPM_NET_EVENT_TYPE type;
    union
    {
        FWPM_NET_EVENT_IKEEXT_MM_FAILURE1* ikeMmFailure;
        FWPM_NET_EVENT_IKEEXT_QM_FAILURE0* ikeQmFailure;
        FWPM_NET_EVENT_IKEEXT_EM_FAILURE1* ikeEmFailure;
        FWPM_NET_EVENT_CLASSIFY_DROP1* classifyDrop;
        FWPM_NET_EVENT_IPSEC_KERNEL_DROP0* ipsecDrop;
        FWPM_NET_EVENT_IPSEC_DOSP_DROP0* idpDrop;
    }
}
struct FWPM_NET_EVENT2
{
    FWPM_NET_EVENT_HEADER2 header;
    FWPM_NET_EVENT_TYPE type;
    union
    {
        FWPM_NET_EVENT_IKEEXT_MM_FAILURE1* ikeMmFailure;
        FWPM_NET_EVENT_IKEEXT_QM_FAILURE0* ikeQmFailure;
        FWPM_NET_EVENT_IKEEXT_EM_FAILURE1* ikeEmFailure;
        FWPM_NET_EVENT_CLASSIFY_DROP2* classifyDrop;
        FWPM_NET_EVENT_IPSEC_KERNEL_DROP0* ipsecDrop;
        FWPM_NET_EVENT_IPSEC_DOSP_DROP0* idpDrop;
        FWPM_NET_EVENT_CLASSIFY_ALLOW0* classifyAllow;
        FWPM_NET_EVENT_CAPABILITY_DROP0* capabilityDrop;
        FWPM_NET_EVENT_CAPABILITY_ALLOW0* capabilityAllow;
        FWPM_NET_EVENT_CLASSIFY_DROP_MAC0* classifyDropMac;
    }
}
struct FWPM_NET_EVENT3
{
    FWPM_NET_EVENT_HEADER3 header;
    FWPM_NET_EVENT_TYPE type;
    union
    {
        FWPM_NET_EVENT_IKEEXT_MM_FAILURE1* ikeMmFailure;
        FWPM_NET_EVENT_IKEEXT_QM_FAILURE0* ikeQmFailure;
        FWPM_NET_EVENT_IKEEXT_EM_FAILURE1* ikeEmFailure;
        FWPM_NET_EVENT_CLASSIFY_DROP2* classifyDrop;
        FWPM_NET_EVENT_IPSEC_KERNEL_DROP0* ipsecDrop;
        FWPM_NET_EVENT_IPSEC_DOSP_DROP0* idpDrop;
        FWPM_NET_EVENT_CLASSIFY_ALLOW0* classifyAllow;
        FWPM_NET_EVENT_CAPABILITY_DROP0* capabilityDrop;
        FWPM_NET_EVENT_CAPABILITY_ALLOW0* capabilityAllow;
        FWPM_NET_EVENT_CLASSIFY_DROP_MAC0* classifyDropMac;
    }
}
struct FWPM_NET_EVENT4
{
    FWPM_NET_EVENT_HEADER3 header;
    FWPM_NET_EVENT_TYPE type;
    union
    {
        FWPM_NET_EVENT_IKEEXT_MM_FAILURE2* ikeMmFailure;
        FWPM_NET_EVENT_IKEEXT_QM_FAILURE1* ikeQmFailure;
        FWPM_NET_EVENT_IKEEXT_EM_FAILURE1* ikeEmFailure;
        FWPM_NET_EVENT_CLASSIFY_DROP2* classifyDrop;
        FWPM_NET_EVENT_IPSEC_KERNEL_DROP0* ipsecDrop;
        FWPM_NET_EVENT_IPSEC_DOSP_DROP0* idpDrop;
        FWPM_NET_EVENT_CLASSIFY_ALLOW0* classifyAllow;
        FWPM_NET_EVENT_CAPABILITY_DROP0* capabilityDrop;
        FWPM_NET_EVENT_CAPABILITY_ALLOW0* capabilityAllow;
        FWPM_NET_EVENT_CLASSIFY_DROP_MAC0* classifyDropMac;
    }
}
struct FWPM_NET_EVENT5
{
    FWPM_NET_EVENT_HEADER3 header;
    FWPM_NET_EVENT_TYPE type;
    union
    {
        FWPM_NET_EVENT_IKEEXT_MM_FAILURE2* ikeMmFailure;
        FWPM_NET_EVENT_IKEEXT_QM_FAILURE1* ikeQmFailure;
        FWPM_NET_EVENT_IKEEXT_EM_FAILURE1* ikeEmFailure;
        FWPM_NET_EVENT_CLASSIFY_DROP2* classifyDrop;
        FWPM_NET_EVENT_IPSEC_KERNEL_DROP0* ipsecDrop;
        FWPM_NET_EVENT_IPSEC_DOSP_DROP0* idpDrop;
        FWPM_NET_EVENT_CLASSIFY_ALLOW0* classifyAllow;
        FWPM_NET_EVENT_CAPABILITY_DROP0* capabilityDrop;
        FWPM_NET_EVENT_CAPABILITY_ALLOW0* capabilityAllow;
        FWPM_NET_EVENT_CLASSIFY_DROP_MAC0* classifyDropMac;
        FWPM_NET_EVENT_LPM_PACKET_ARRIVAL0* lpmPacketArrival;
    }
}
struct FWPM_NET_EVENT_ENUM_TEMPLATE0
{
    FILETIME startTime;
    FILETIME endTime;
    uint numFilterConditions;
    FWPM_FILTER_CONDITION0* filterCondition;
}
struct FWPM_NET_EVENT_SUBSCRIPTION0
{
    FWPM_NET_EVENT_ENUM_TEMPLATE0* enumTemplate;
    uint flags;
    GUID sessionKey;
}
alias FWPM_SYSTEM_PORT_TYPE = int;
enum : int
{
    FWPM_SYSTEM_PORT_RPC_EPMAP   = 0x00000000,
    FWPM_SYSTEM_PORT_TEREDO      = 0x00000001,
    FWPM_SYSTEM_PORT_IPHTTPS_IN  = 0x00000002,
    FWPM_SYSTEM_PORT_IPHTTPS_OUT = 0x00000003,
    FWPM_SYSTEM_PORT_TYPE_MAX    = 0x00000004,
}

struct FWPM_SYSTEM_PORTS_BY_TYPE0
{
    FWPM_SYSTEM_PORT_TYPE type;
    uint numPorts;
    ushort* ports;
}
struct FWPM_SYSTEM_PORTS0
{
    uint numTypes;
    FWPM_SYSTEM_PORTS_BY_TYPE0* types;
}
struct FWPM_CONNECTION0
{
    ulong connectionId;
    FWP_IP_VERSION ipVersion;
    union
    {
        uint localV4Address;
        ubyte[16] localV6Address;
    }
    union
    {
        uint remoteV4Address;
        ubyte[16] remoteV6Address;
    }
    GUID* providerKey;
    IPSEC_TRAFFIC_TYPE ipsecTrafficModeType;
    IKEEXT_KEY_MODULE_TYPE keyModuleType;
    IKEEXT_PROPOSAL0 mmCrypto;
    IKEEXT_CREDENTIAL2 mmPeer;
    IKEEXT_CREDENTIAL2 emPeer;
    ulong bytesTransferredIn;
    ulong bytesTransferredOut;
    ulong bytesTransferredTotal;
    FILETIME startSysTime;
}
struct FWPM_CONNECTION_ENUM_TEMPLATE0
{
    ulong connectionId;
    uint flags;
}
struct FWPM_CONNECTION_SUBSCRIPTION0
{
    FWPM_CONNECTION_ENUM_TEMPLATE0* enumTemplate;
    uint flags;
    GUID sessionKey;
}
alias FWPM_CONNECTION_EVENT_TYPE = int;
enum : int
{
    FWPM_CONNECTION_EVENT_ADD    = 0x00000000,
    FWPM_CONNECTION_EVENT_DELETE = 0x00000001,
    FWPM_CONNECTION_EVENT_MAX    = 0x00000002,
}

alias FWPM_VSWITCH_EVENT_TYPE = int;
enum : int
{
    FWPM_VSWITCH_EVENT_FILTER_ADD_TO_INCOMPLETE_LAYER         = 0x00000000,
    FWPM_VSWITCH_EVENT_FILTER_ENGINE_NOT_IN_REQUIRED_POSITION = 0x00000001,
    FWPM_VSWITCH_EVENT_ENABLED_FOR_INSPECTION                 = 0x00000002,
    FWPM_VSWITCH_EVENT_DISABLED_FOR_INSPECTION                = 0x00000003,
    FWPM_VSWITCH_EVENT_FILTER_ENGINE_REORDER                  = 0x00000004,
    FWPM_VSWITCH_EVENT_MAX                                    = 0x00000005,
}

struct FWPM_VSWITCH_EVENT0
{
    FWPM_VSWITCH_EVENT_TYPE eventType;
    PWSTR vSwitchId;
    union
    {
        struct _positionInfo_e__Struct
        {
            uint numvSwitchFilterExtensions;
            PWSTR* vSwitchFilterExtensions;
        }
        struct _reorderInfo_e__Struct
        {
            BOOL inRequiredPosition;
            uint numvSwitchFilterExtensions;
            PWSTR* vSwitchFilterExtensions;
        }
    }
}
struct FWPM_VSWITCH_EVENT_SUBSCRIPTION0
{
    uint flags;
    GUID sessionKey;
}
alias FWPM_PROVIDER_CHANGE_CALLBACK0 = void function(void*, const(FWPM_PROVIDER_CHANGE0)*);
alias FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0 = void function(void*, const(FWPM_PROVIDER_CONTEXT_CHANGE0)*);
alias FWPM_SUBLAYER_CHANGE_CALLBACK0 = void function(void*, const(FWPM_SUBLAYER_CHANGE0)*);
alias FWPM_CALLOUT_CHANGE_CALLBACK0 = void function(void*, const(FWPM_CALLOUT_CHANGE0)*);
alias FWPM_FILTER_CHANGE_CALLBACK0 = void function(void*, const(FWPM_FILTER_CHANGE0)*);
alias IPSEC_SA_CONTEXT_CALLBACK0 = void function(void*, const(IPSEC_SA_CONTEXT_CHANGE0)*);
alias IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0 = void function(const(IKEEXT_TRAFFIC0)*, BOOL*, uint*);
alias IPSEC_KEY_MANAGER_DICTATE_KEY0 = uint function(IPSEC_SA_DETAILS1*, IPSEC_SA_DETAILS1*, BOOL*);
alias IPSEC_KEY_MANAGER_NOTIFY_KEY0 = void function(const(IPSEC_SA_DETAILS1)*, const(IPSEC_SA_DETAILS1)*);
struct IPSEC_KEY_MANAGER_CALLBACKS0
{
    GUID reserved;
    uint flags;
    IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0 keyDictationCheck;
    IPSEC_KEY_MANAGER_DICTATE_KEY0 keyDictation;
    IPSEC_KEY_MANAGER_NOTIFY_KEY0 keyNotify;
}
alias FWPM_NET_EVENT_CALLBACK0 = void function(void*, const(FWPM_NET_EVENT1)*);
alias FWPM_NET_EVENT_CALLBACK1 = void function(void*, const(FWPM_NET_EVENT2)*);
alias FWPM_NET_EVENT_CALLBACK2 = void function(void*, const(FWPM_NET_EVENT3)*);
alias FWPM_NET_EVENT_CALLBACK3 = void function(void*, const(FWPM_NET_EVENT4)*);
alias FWPM_NET_EVENT_CALLBACK4 = void function(void*, const(FWPM_NET_EVENT5)*);
alias FWPM_DYNAMIC_KEYWORD_CALLBACK0 = void function(void*, void*);
alias FWPM_SYSTEM_PORTS_CALLBACK0 = void function(void*, const(FWPM_SYSTEM_PORTS0)*);
alias FWPM_CONNECTION_CALLBACK0 = void function(void*, FWPM_CONNECTION_EVENT_TYPE, const(FWPM_CONNECTION0)*);
alias FWPM_VSWITCH_EVENT_CALLBACK0 = uint function(void*, const(FWPM_VSWITCH_EVENT0)*);
