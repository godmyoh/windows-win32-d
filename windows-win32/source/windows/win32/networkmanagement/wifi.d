module windows.win32.networkmanagement.wifi;

import windows.win32.guid : GUID;
import windows.win32.foundation : BOOL, BOOLEAN, HANDLE, HRESULT, HWND, PWSTR;
import windows.win32.networkmanagement.ndis : NDIS_OBJECT_HEADER;
import windows.win32.security.extensibleauthenticationprotocol : EAP_ATTRIBUTES, EAP_METHOD_TYPE;
import windows.win32.system.com_ : IUnknown;
import windows.win32.system.remotedesktop : WTSSESSION_NOTIFICATION;

version (Windows):
extern (Windows):

uint WlanOpenHandle(uint, void*, uint*, HANDLE*);
uint WlanCloseHandle(HANDLE, void*);
uint WlanEnumInterfaces(HANDLE, void*, WLAN_INTERFACE_INFO_LIST**);
uint WlanSetAutoConfigParameter(HANDLE, WLAN_AUTOCONF_OPCODE, uint, const(void)*, void*);
uint WlanQueryAutoConfigParameter(HANDLE, WLAN_AUTOCONF_OPCODE, void*, uint*, void**, WLAN_OPCODE_VALUE_TYPE*);
uint WlanGetInterfaceCapability(HANDLE, const(GUID)*, void*, WLAN_INTERFACE_CAPABILITY**);
uint WlanSetInterface(HANDLE, const(GUID)*, WLAN_INTF_OPCODE, uint, const(void)*, void*);
uint WlanQueryInterface(HANDLE, const(GUID)*, WLAN_INTF_OPCODE, void*, uint*, void**, WLAN_OPCODE_VALUE_TYPE*);
uint WlanIhvControl(HANDLE, const(GUID)*, WLAN_IHV_CONTROL_TYPE, uint, void*, uint, void*, uint*);
uint WlanScan(HANDLE, const(GUID)*, const(DOT11_SSID)*, const(WLAN_RAW_DATA)*, void*);
uint WlanGetAvailableNetworkList(HANDLE, const(GUID)*, uint, void*, WLAN_AVAILABLE_NETWORK_LIST**);
uint WlanGetAvailableNetworkList2(HANDLE, const(GUID)*, uint, void*, WLAN_AVAILABLE_NETWORK_LIST_V2**);
uint WlanGetNetworkBssList(HANDLE, const(GUID)*, const(DOT11_SSID)*, DOT11_BSS_TYPE, BOOL, void*, WLAN_BSS_LIST**);
uint WlanConnect(HANDLE, const(GUID)*, const(WLAN_CONNECTION_PARAMETERS)*, void*);
uint WlanConnect2(HANDLE, const(GUID)*, const(WLAN_CONNECTION_PARAMETERS_V2)*, void*);
uint WlanDisconnect(HANDLE, const(GUID)*, void*);
uint WlanRegisterNotification(HANDLE, uint, BOOL, WLAN_NOTIFICATION_CALLBACK, void*, void*, uint*);
uint WlanGetProfile(HANDLE, const(GUID)*, const(wchar)*, void*, PWSTR*, uint*, uint*);
uint WlanSetProfileEapUserData(HANDLE, const(GUID)*, const(wchar)*, EAP_METHOD_TYPE, WLAN_SET_EAPHOST_FLAGS, uint, const(ubyte)*, void*);
uint WlanSetProfileEapXmlUserData(HANDLE, const(GUID)*, const(wchar)*, WLAN_SET_EAPHOST_FLAGS, const(wchar)*, void*);
uint WlanSetProfile(HANDLE, const(GUID)*, uint, const(wchar)*, const(wchar)*, BOOL, void*, uint*);
uint WlanDeleteProfile(HANDLE, const(GUID)*, const(wchar)*, void*);
uint WlanRenameProfile(HANDLE, const(GUID)*, const(wchar)*, const(wchar)*, void*);
uint WlanGetProfileList(HANDLE, const(GUID)*, void*, WLAN_PROFILE_INFO_LIST**);
uint WlanSetProfileList(HANDLE, const(GUID)*, uint, const(wchar)**, void*);
uint WlanSetProfilePosition(HANDLE, const(GUID)*, const(wchar)*, uint, void*);
uint WlanSetProfileCustomUserData(HANDLE, const(GUID)*, const(wchar)*, uint, const(ubyte)*, void*);
uint WlanGetProfileCustomUserData(HANDLE, const(GUID)*, const(wchar)*, void*, uint*, ubyte**);
uint WlanSetFilterList(HANDLE, WLAN_FILTER_LIST_TYPE, const(DOT11_NETWORK_LIST)*, void*);
uint WlanGetFilterList(HANDLE, WLAN_FILTER_LIST_TYPE, void*, DOT11_NETWORK_LIST**);
uint WlanSetPsdIEDataList(HANDLE, const(wchar)*, const(WLAN_RAW_DATA_LIST)*, void*);
uint WlanSaveTemporaryProfile(HANDLE, const(GUID)*, const(wchar)*, const(wchar)*, uint, BOOL, void*);
uint WlanDeviceServiceCommand(HANDLE, const(GUID)*, GUID*, uint, uint, void*, uint, void*, uint*);
uint WlanGetSupportedDeviceServices(HANDLE, const(GUID)*, WLAN_DEVICE_SERVICE_GUID_LIST**);
uint WlanRegisterDeviceServiceNotification(HANDLE, const(WLAN_DEVICE_SERVICE_GUID_LIST)*);
uint WlanExtractPsdIEDataList(HANDLE, uint, const(ubyte)*, const(wchar)*, void*, WLAN_RAW_DATA_LIST**);
uint WlanReasonCodeToString(uint, uint, PWSTR, void*);
void* WlanAllocateMemory(uint);
void WlanFreeMemory(void*);
uint WlanSetSecuritySettings(HANDLE, WLAN_SECURABLE_OBJECT, const(wchar)*);
uint WlanGetSecuritySettings(HANDLE, WLAN_SECURABLE_OBJECT, WLAN_OPCODE_VALUE_TYPE*, PWSTR*, uint*);
uint WlanUIEditProfile(uint, const(wchar)*, GUID*, HWND, WL_DISPLAY_PAGES, void*, uint*);
uint WlanHostedNetworkStartUsing(HANDLE, WLAN_HOSTED_NETWORK_REASON*, void*);
uint WlanHostedNetworkStopUsing(HANDLE, WLAN_HOSTED_NETWORK_REASON*, void*);
uint WlanHostedNetworkForceStart(HANDLE, WLAN_HOSTED_NETWORK_REASON*, void*);
uint WlanHostedNetworkForceStop(HANDLE, WLAN_HOSTED_NETWORK_REASON*, void*);
uint WlanHostedNetworkQueryProperty(HANDLE, WLAN_HOSTED_NETWORK_OPCODE, uint*, void**, WLAN_OPCODE_VALUE_TYPE*, void*);
uint WlanHostedNetworkSetProperty(HANDLE, WLAN_HOSTED_NETWORK_OPCODE, uint, void*, WLAN_HOSTED_NETWORK_REASON*, void*);
uint WlanHostedNetworkInitSettings(HANDLE, WLAN_HOSTED_NETWORK_REASON*, void*);
uint WlanHostedNetworkRefreshSecuritySettings(HANDLE, WLAN_HOSTED_NETWORK_REASON*, void*);
uint WlanHostedNetworkQueryStatus(HANDLE, WLAN_HOSTED_NETWORK_STATUS**, void*);
uint WlanHostedNetworkSetSecondaryKey(HANDLE, uint, ubyte*, BOOL, BOOL, WLAN_HOSTED_NETWORK_REASON*, void*);
uint WlanHostedNetworkQuerySecondaryKey(HANDLE, uint*, ubyte**, BOOL*, BOOL*, WLAN_HOSTED_NETWORK_REASON*, void*);
uint WlanRegisterVirtualStationNotification(HANDLE, BOOL, void*);
uint WFDOpenHandle(uint, uint*, HANDLE*);
uint WFDCloseHandle(HANDLE);
uint WFDStartOpenSession(HANDLE, ubyte**, void*, WFD_OPEN_SESSION_COMPLETE_CALLBACK, HANDLE*);
uint WFDCancelOpenSession(HANDLE);
uint WFDOpenLegacySession(HANDLE, ubyte**, HANDLE*, GUID*);
uint WFDCloseSession(HANDLE);
uint WFDUpdateDeviceVisibility(ubyte**);
enum L2_REASON_CODE_DOT11_AC_BASE = 0x00020000;
enum L2_REASON_CODE_DOT11_MSM_BASE = 0x00030000;
enum L2_REASON_CODE_DOT11_SECURITY_BASE = 0x00040000;
enum L2_REASON_CODE_ONEX_BASE = 0x00050000;
enum L2_REASON_CODE_DOT3_AC_BASE = 0x00060000;
enum L2_REASON_CODE_DOT3_MSM_BASE = 0x00070000;
enum L2_REASON_CODE_PROFILE_BASE = 0x00080000;
enum L2_REASON_CODE_IHV_BASE = 0x00090000;
enum L2_REASON_CODE_WIMAX_BASE = 0x000a0000;
enum L2_REASON_CODE_RESERVED_BASE = 0x000b0000;
enum WLAN_REASON_CODE_SUCCESS = 0x00000000;
enum WLAN_REASON_CODE_UNKNOWN = 0x00010001;
enum WLAN_REASON_CODE_RANGE_SIZE = 0x00010000;
enum WLAN_REASON_CODE_BASE = 0x00020000;
enum WLAN_REASON_CODE_AC_BASE = 0x00020000;
enum WLAN_REASON_CODE_AC_CONNECT_BASE = 0x00028000;
enum WLAN_REASON_CODE_AC_END = 0x0002ffff;
enum WLAN_REASON_CODE_PROFILE_BASE = 0x00080000;
enum WLAN_REASON_CODE_PROFILE_CONNECT_BASE = 0x00088000;
enum WLAN_REASON_CODE_PROFILE_END = 0x0008ffff;
enum WLAN_REASON_CODE_MSM_BASE = 0x00030000;
enum WLAN_REASON_CODE_MSM_CONNECT_BASE = 0x00038000;
enum WLAN_REASON_CODE_MSM_END = 0x0003ffff;
enum WLAN_REASON_CODE_MSMSEC_BASE = 0x00040000;
enum WLAN_REASON_CODE_MSMSEC_CONNECT_BASE = 0x00048000;
enum WLAN_REASON_CODE_MSMSEC_END = 0x0004ffff;
enum WLAN_REASON_CODE_RESERVED_BASE = 0x000b0000;
enum WLAN_REASON_CODE_RESERVED_END = 0x000bffff;
enum L2_PROFILE_MAX_NAME_LENGTH = 0x00000100;
enum L2_NOTIFICATION_SOURCE_NONE = 0x00000000;
enum L2_NOTIFICATION_SOURCE_DOT3_AUTO_CONFIG = 0x00000001;
enum L2_NOTIFICATION_SOURCE_SECURITY = 0x00000002;
enum L2_NOTIFICATION_SOURCE_ONEX = 0x00000004;
enum L2_NOTIFICATION_SOURCE_WLAN_ACM = 0x00000008;
enum L2_NOTIFICATION_SOURCE_WLAN_MSM = 0x00000010;
enum L2_NOTIFICATION_SOURCE_WLAN_SECURITY = 0x00000020;
enum L2_NOTIFICATION_SOURCE_WLAN_IHV = 0x00000040;
enum L2_NOTIFICATION_SOURCE_WLAN_HNWK = 0x00000080;
enum L2_NOTIFICATION_SOURCE_WCM = 0x00000100;
enum L2_NOTIFICATION_SOURCE_WCM_CSP = 0x00000200;
enum L2_NOTIFICATION_SOURCE_WFD = 0x00000400;
enum L2_NOTIFICATION_SOURCE_WLAN_DEVICE_SERVICE = 0x00000800;
enum L2_NOTIFICATION_SOURCE_ALL = 0x0000ffff;
enum L2_NOTIFICATION_CODE_PUBLIC_BEGIN = 0x00000000;
enum L2_NOTIFICATION_CODE_GROUP_SIZE = 0x00001000;
enum L2_REASON_CODE_GROUP_SIZE = 0x00010000;
enum L2_REASON_CODE_GEN_BASE = 0x00010000;
enum L2_REASON_CODE_SUCCESS = 0x00000000;
enum L2_REASON_CODE_UNKNOWN = 0x00010001;
enum L2_REASON_CODE_PROFILE_MISSING = 0x00000001;
enum DOT11_BSSID_LIST_REVISION_1 = 0x00000001;
enum DOT11_HESSID_LENGTH = 0x00000006;
enum DOT11_RATE_SET_MAX_LENGTH = 0x0000007e;
enum DOT11_WFD_SERVICE_NAME_MAX_LENGTH = 0x000000ff;
enum DOT11_WFD_APS2_SERVICE_TYPE_MAX_LENGTH = 0x00000015;
enum DOT11_WFD_ASP2_INSTANCE_NAME_MAX_LENGTH = 0x0000003f;
enum DOT11_WFD_SERVICE_INFORMATION_MAX_LENGTH = 0x0000ffff;
enum DOT11_MAX_REQUESTED_SERVICE_INFORMATION_LENGTH = 0x000000ff;
enum DOT11_WFD_SESSION_INFO_MAX_LENGTH = 0x00000090;
enum NDIS_PACKET_TYPE_802_11_DIRECTED_DATA = 0x00000001;
enum NDIS_PACKET_TYPE_802_11_BROADCAST_DATA = 0x00000008;
enum NDIS_PACKET_TYPE_802_11_MULTICAST_DATA = 0x00000002;
enum NDIS_PACKET_TYPE_802_11_ALL_MULTICAST_DATA = 0x00000004;
enum NDIS_PACKET_TYPE_802_11_PROMISCUOUS_DATA = 0x00000020;
enum DOT11_MAX_PDU_SIZE = 0x0000092a;
enum DOT11_MIN_PDU_SIZE = 0x00000100;
enum DOT11_MAX_NUM_DEFAULT_KEY = 0x00000004;
enum DOT11_MAX_NUM_DEFAULT_KEY_MFP = 0x00000006;
enum OID_DOT11_NDIS_START = 0x0d010300;
enum OID_DOT11_OFFLOAD_CAPABILITY = 0x0d010300;
enum DOT11_HW_WEP_SUPPORTED_TX = 0x00000001;
enum DOT11_HW_WEP_SUPPORTED_RX = 0x00000002;
enum DOT11_HW_FRAGMENTATION_SUPPORTED = 0x00000004;
enum DOT11_HW_DEFRAGMENTATION_SUPPORTED = 0x00000008;
enum DOT11_HW_MSDU_AUTH_SUPPORTED_TX = 0x00000010;
enum DOT11_HW_MSDU_AUTH_SUPPORTED_RX = 0x00000020;
enum DOT11_CONF_ALGO_WEP_RC4 = 0x00000001;
enum DOT11_CONF_ALGO_TKIP = 0x00000002;
enum DOT11_AUTH_ALGO_MICHAEL = 0x00000001;
enum OID_DOT11_CURRENT_OFFLOAD_CAPABILITY = 0x0d010301;
enum OID_DOT11_WEP_OFFLOAD = 0x0d010302;
enum OID_DOT11_WEP_UPLOAD = 0x0d010303;
enum OID_DOT11_DEFAULT_WEP_OFFLOAD = 0x0d010304;
enum OID_DOT11_DEFAULT_WEP_UPLOAD = 0x0d010305;
enum OID_DOT11_MPDU_MAX_LENGTH = 0x0d010306;
enum OID_DOT11_OPERATION_MODE_CAPABILITY = 0x0d010307;
enum DOT11_OPERATION_MODE_UNKNOWN = 0x00000000;
enum DOT11_OPERATION_MODE_STATION = 0x00000001;
enum DOT11_OPERATION_MODE_AP = 0x00000002;
enum DOT11_OPERATION_MODE_EXTENSIBLE_STATION = 0x00000004;
enum DOT11_OPERATION_MODE_EXTENSIBLE_AP = 0x00000008;
enum DOT11_OPERATION_MODE_WFD_DEVICE = 0x00000010;
enum DOT11_OPERATION_MODE_WFD_GROUP_OWNER = 0x00000020;
enum DOT11_OPERATION_MODE_WFD_CLIENT = 0x00000040;
enum DOT11_OPERATION_MODE_MANUFACTURING = 0x40000000;
enum DOT11_OPERATION_MODE_NETWORK_MONITOR = 0x80000000;
enum OID_DOT11_CURRENT_OPERATION_MODE = 0x0d010308;
enum OID_DOT11_CURRENT_PACKET_FILTER = 0x0d010309;
enum DOT11_PACKET_TYPE_DIRECTED_CTRL = 0x00000001;
enum DOT11_PACKET_TYPE_DIRECTED_MGMT = 0x00000002;
enum DOT11_PACKET_TYPE_DIRECTED_DATA = 0x00000004;
enum DOT11_PACKET_TYPE_MULTICAST_CTRL = 0x00000008;
enum DOT11_PACKET_TYPE_MULTICAST_MGMT = 0x00000010;
enum DOT11_PACKET_TYPE_MULTICAST_DATA = 0x00000020;
enum DOT11_PACKET_TYPE_BROADCAST_CTRL = 0x00000040;
enum DOT11_PACKET_TYPE_BROADCAST_MGMT = 0x00000080;
enum DOT11_PACKET_TYPE_BROADCAST_DATA = 0x00000100;
enum DOT11_PACKET_TYPE_PROMISCUOUS_CTRL = 0x00000200;
enum DOT11_PACKET_TYPE_PROMISCUOUS_MGMT = 0x00000400;
enum DOT11_PACKET_TYPE_PROMISCUOUS_DATA = 0x00000800;
enum DOT11_PACKET_TYPE_ALL_MULTICAST_CTRL = 0x00001000;
enum DOT11_PACKET_TYPE_ALL_MULTICAST_MGMT = 0x00002000;
enum DOT11_PACKET_TYPE_ALL_MULTICAST_DATA = 0x00004000;
enum OID_DOT11_ATIM_WINDOW = 0x0d01030a;
enum OID_DOT11_SCAN_REQUEST = 0x0d01030b;
enum OID_DOT11_CURRENT_PHY_TYPE = 0x0d01030c;
enum DOT11_PHY_TYPE_LIST_REVISION_1 = 0x00000001;
enum OID_DOT11_JOIN_REQUEST = 0x0d01030d;
enum DOT11_CAPABILITY_INFO_ESS = 0x00000001;
enum DOT11_CAPABILITY_INFO_IBSS = 0x00000002;
enum DOT11_CAPABILITY_INFO_CF_POLLABLE = 0x00000004;
enum DOT11_CAPABILITY_INFO_CF_POLL_REQ = 0x00000008;
enum DOT11_CAPABILITY_INFO_PRIVACY = 0x00000010;
enum DOT11_CAPABILITY_SHORT_PREAMBLE = 0x00000020;
enum DOT11_CAPABILITY_PBCC = 0x00000040;
enum DOT11_CAPABILITY_CHANNEL_AGILITY = 0x00000080;
enum DOT11_CAPABILITY_SHORT_SLOT_TIME = 0x00000400;
enum DOT11_CAPABILITY_DSSSOFDM = 0x00002000;
enum OID_DOT11_START_REQUEST = 0x0d01030e;
enum OID_DOT11_UPDATE_IE = 0x0d01030f;
enum OID_DOT11_RESET_REQUEST = 0x0d010310;
enum OID_DOT11_NIC_POWER_STATE = 0x0d010311;
enum OID_DOT11_OPTIONAL_CAPABILITY = 0x0d010312;
enum OID_DOT11_CURRENT_OPTIONAL_CAPABILITY = 0x0d010313;
enum OID_DOT11_STATION_ID = 0x0d010314;
enum OID_DOT11_MEDIUM_OCCUPANCY_LIMIT = 0x0d010315;
enum OID_DOT11_CF_POLLABLE = 0x0d010316;
enum OID_DOT11_CFP_PERIOD = 0x0d010317;
enum OID_DOT11_CFP_MAX_DURATION = 0x0d010318;
enum OID_DOT11_POWER_MGMT_MODE = 0x0d010319;
enum DOT11_POWER_SAVE_LEVEL_MAX_PSP = 0x00000001;
enum DOT11_POWER_SAVE_LEVEL_FAST_PSP = 0x00000002;
enum OID_DOT11_OPERATIONAL_RATE_SET = 0x0d01031a;
enum OID_DOT11_BEACON_PERIOD = 0x0d01031b;
enum OID_DOT11_DTIM_PERIOD = 0x0d01031c;
enum OID_DOT11_WEP_ICV_ERROR_COUNT = 0x0d01031d;
enum OID_DOT11_MAC_ADDRESS = 0x0d01031e;
enum OID_DOT11_RTS_THRESHOLD = 0x0d01031f;
enum OID_DOT11_SHORT_RETRY_LIMIT = 0x0d010320;
enum OID_DOT11_LONG_RETRY_LIMIT = 0x0d010321;
enum OID_DOT11_FRAGMENTATION_THRESHOLD = 0x0d010322;
enum OID_DOT11_MAX_TRANSMIT_MSDU_LIFETIME = 0x0d010323;
enum OID_DOT11_MAX_RECEIVE_LIFETIME = 0x0d010324;
enum OID_DOT11_COUNTERS_ENTRY = 0x0d010325;
enum OID_DOT11_SUPPORTED_PHY_TYPES = 0x0d010326;
enum OID_DOT11_CURRENT_REG_DOMAIN = 0x0d010327;
enum DOT11_REG_DOMAIN_OTHER = 0x00000000;
enum DOT11_REG_DOMAIN_FCC = 0x00000010;
enum DOT11_REG_DOMAIN_DOC = 0x00000020;
enum DOT11_REG_DOMAIN_ETSI = 0x00000030;
enum DOT11_REG_DOMAIN_SPAIN = 0x00000031;
enum DOT11_REG_DOMAIN_FRANCE = 0x00000032;
enum DOT11_REG_DOMAIN_MKK = 0x00000040;
enum OID_DOT11_TEMP_TYPE = 0x0d010328;
enum OID_DOT11_CURRENT_TX_ANTENNA = 0x0d010329;
enum OID_DOT11_DIVERSITY_SUPPORT = 0x0d01032a;
enum OID_DOT11_CURRENT_RX_ANTENNA = 0x0d01032b;
enum OID_DOT11_SUPPORTED_POWER_LEVELS = 0x0d01032c;
enum OID_DOT11_CURRENT_TX_POWER_LEVEL = 0x0d01032d;
enum OID_DOT11_HOP_TIME = 0x0d01032e;
enum OID_DOT11_CURRENT_CHANNEL_NUMBER = 0x0d01032f;
enum OID_DOT11_MAX_DWELL_TIME = 0x0d010330;
enum OID_DOT11_CURRENT_DWELL_TIME = 0x0d010331;
enum OID_DOT11_CURRENT_SET = 0x0d010332;
enum OID_DOT11_CURRENT_PATTERN = 0x0d010333;
enum OID_DOT11_CURRENT_INDEX = 0x0d010334;
enum OID_DOT11_CURRENT_CHANNEL = 0x0d010335;
enum OID_DOT11_CCA_MODE_SUPPORTED = 0x0d010336;
enum DOT11_CCA_MODE_ED_ONLY = 0x00000001;
enum DOT11_CCA_MODE_CS_ONLY = 0x00000002;
enum DOT11_CCA_MODE_ED_and_CS = 0x00000004;
enum DOT11_CCA_MODE_CS_WITH_TIMER = 0x00000008;
enum DOT11_CCA_MODE_HRCS_AND_ED = 0x00000010;
enum OID_DOT11_CURRENT_CCA_MODE = 0x0d010337;
enum OID_DOT11_ED_THRESHOLD = 0x0d010338;
enum OID_DOT11_CCA_WATCHDOG_TIMER_MAX = 0x0d010339;
enum OID_DOT11_CCA_WATCHDOG_COUNT_MAX = 0x0d01033a;
enum OID_DOT11_CCA_WATCHDOG_TIMER_MIN = 0x0d01033b;
enum OID_DOT11_CCA_WATCHDOG_COUNT_MIN = 0x0d01033c;
enum OID_DOT11_REG_DOMAINS_SUPPORT_VALUE = 0x0d01033d;
enum OID_DOT11_SUPPORTED_TX_ANTENNA = 0x0d01033e;
enum OID_DOT11_SUPPORTED_RX_ANTENNA = 0x0d01033f;
enum OID_DOT11_DIVERSITY_SELECTION_RX = 0x0d010340;
enum OID_DOT11_SUPPORTED_DATA_RATES_VALUE = 0x0d010341;
enum MAX_NUM_SUPPORTED_RATES = 0x00000008;
enum MAX_NUM_SUPPORTED_RATES_V2 = 0x000000ff;
enum OID_DOT11_CURRENT_FREQUENCY = 0x0d010342;
enum OID_DOT11_TI_THRESHOLD = 0x0d010343;
enum OID_DOT11_FREQUENCY_BANDS_SUPPORTED = 0x0d010344;
enum DOT11_FREQUENCY_BANDS_LOWER = 0x00000001;
enum DOT11_FREQUENCY_BANDS_MIDDLE = 0x00000002;
enum DOT11_FREQUENCY_BANDS_UPPER = 0x00000004;
enum OID_DOT11_SHORT_PREAMBLE_OPTION_IMPLEMENTED = 0x0d010345;
enum OID_DOT11_PBCC_OPTION_IMPLEMENTED = 0x0d010346;
enum OID_DOT11_CHANNEL_AGILITY_PRESENT = 0x0d010347;
enum OID_DOT11_CHANNEL_AGILITY_ENABLED = 0x0d010348;
enum OID_DOT11_HR_CCA_MODE_SUPPORTED = 0x0d010349;
enum DOT11_HR_CCA_MODE_ED_ONLY = 0x00000001;
enum DOT11_HR_CCA_MODE_CS_ONLY = 0x00000002;
enum DOT11_HR_CCA_MODE_CS_AND_ED = 0x00000004;
enum DOT11_HR_CCA_MODE_CS_WITH_TIMER = 0x00000008;
enum DOT11_HR_CCA_MODE_HRCS_AND_ED = 0x00000010;
enum OID_DOT11_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED = 0x0d01034a;
enum OID_DOT11_MULTI_DOMAIN_CAPABILITY_ENABLED = 0x0d01034b;
enum OID_DOT11_COUNTRY_STRING = 0x0d01034c;
enum OID_DOT11_MULTI_DOMAIN_CAPABILITY = 0x0d01034d;
enum OID_DOT11_EHCC_PRIME_RADIX = 0x0d01034e;
enum OID_DOT11_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX = 0x0d01034f;
enum OID_DOT11_EHCC_CAPABILITY_IMPLEMENTED = 0x0d010350;
enum OID_DOT11_EHCC_CAPABILITY_ENABLED = 0x0d010351;
enum OID_DOT11_HOP_ALGORITHM_ADOPTED = 0x0d010352;
enum OID_DOT11_RANDOM_TABLE_FLAG = 0x0d010353;
enum OID_DOT11_NUMBER_OF_HOPPING_SETS = 0x0d010354;
enum OID_DOT11_HOP_MODULUS = 0x0d010355;
enum OID_DOT11_HOP_OFFSET = 0x0d010356;
enum OID_DOT11_HOPPING_PATTERN = 0x0d010357;
enum OID_DOT11_RANDOM_TABLE_FIELD_NUMBER = 0x0d010358;
enum OID_DOT11_WPA_TSC = 0x0d010359;
enum OID_DOT11_RSSI_RANGE = 0x0d01035a;
enum OID_DOT11_RF_USAGE = 0x0d01035b;
enum OID_DOT11_NIC_SPECIFIC_EXTENSION = 0x0d01035c;
enum OID_DOT11_AP_JOIN_REQUEST = 0x0d01035d;
enum OID_DOT11_ERP_PBCC_OPTION_IMPLEMENTED = 0x0d01035e;
enum OID_DOT11_ERP_PBCC_OPTION_ENABLED = 0x0d01035f;
enum OID_DOT11_DSSS_OFDM_OPTION_IMPLEMENTED = 0x0d010360;
enum OID_DOT11_DSSS_OFDM_OPTION_ENABLED = 0x0d010361;
enum OID_DOT11_SHORT_SLOT_TIME_OPTION_IMPLEMENTED = 0x0d010362;
enum OID_DOT11_SHORT_SLOT_TIME_OPTION_ENABLED = 0x0d010363;
enum OID_DOT11_MAX_MAC_ADDRESS_STATES = 0x0d010364;
enum OID_DOT11_RECV_SENSITIVITY_LIST = 0x0d010365;
enum OID_DOT11_WME_IMPLEMENTED = 0x0d010366;
enum OID_DOT11_WME_ENABLED = 0x0d010367;
enum OID_DOT11_WME_AC_PARAMETERS = 0x0d010368;
enum OID_DOT11_WME_UPDATE_IE = 0x0d010369;
enum OID_DOT11_QOS_TX_QUEUES_SUPPORTED = 0x0d01036a;
enum OID_DOT11_QOS_TX_DURATION = 0x0d01036b;
enum OID_DOT11_QOS_TX_MEDIUM_TIME = 0x0d01036c;
enum OID_DOT11_SUPPORTED_OFDM_FREQUENCY_LIST = 0x0d01036d;
enum OID_DOT11_SUPPORTED_DSSS_CHANNEL_LIST = 0x0d01036e;
enum DOT11_BSS_ENTRY_BYTE_ARRAY_REVISION_1 = 0x00000001;
enum DOT11_POWER_SAVING_NO_POWER_SAVING = 0x00000000;
enum DOT11_POWER_SAVING_FAST_PSP = 0x00000008;
enum DOT11_POWER_SAVING_MAX_PSP = 0x00000010;
enum DOT11_POWER_SAVING_MAXIMUM_LEVEL = 0x00000018;
enum DOT11_SSID_LIST_REVISION_1 = 0x00000001;
enum DOT11_MAC_ADDRESS_LIST_REVISION_1 = 0x00000001;
enum DOT11_PMKID_LIST_REVISION_1 = 0x00000001;
enum DOT11_STATISTICS_REVISION_1 = 0x00000001;
enum DOT11_EXEMPT_NO_EXEMPTION = 0x00000000;
enum DOT11_EXEMPT_ALWAYS = 0x00000001;
enum DOT11_EXEMPT_ON_KEY_MAPPING_KEY_UNAVAILABLE = 0x00000002;
enum DOT11_EXEMPT_UNICAST = 0x00000001;
enum DOT11_EXEMPT_MULTICAST = 0x00000002;
enum DOT11_EXEMPT_BOTH = 0x00000003;
enum DOT11_PRIVACY_EXEMPTION_LIST_REVISION_1 = 0x00000001;
enum DOT11_AUTH_ALGORITHM_LIST_REVISION_1 = 0x00000001;
enum DOT11_AUTH_CIPHER_PAIR_LIST_REVISION_1 = 0x00000001;
enum DOT11_CIPHER_ALGORITHM_LIST_REVISION_1 = 0x00000001;
enum DOT11_CIPHER_DEFAULT_KEY_VALUE_REVISION_1 = 0x00000001;
enum DOT11_CIPHER_KEY_MAPPING_KEY_VALUE_BYTE_ARRAY_REVISION_1 = 0x00000001;
enum DOT11_ASSOCIATION_INFO_LIST_REVISION_1 = 0x00000001;
enum DOT11_PHY_ID_LIST_REVISION_1 = 0x00000001;
enum DOT11_EXTSTA_CAPABILITY_REVISION_1 = 0x00000001;
enum DOT11_DATA_RATE_MAPPING_TABLE_REVISION_1 = 0x00000001;
enum DOT11_COUNTRY_OR_REGION_STRING_LIST_REVISION_1 = 0x00000001;
enum DOT11_PORT_STATE_NOTIFICATION_REVISION_1 = 0x00000001;
enum DOT11_IBSS_PARAMS_REVISION_1 = 0x00000001;
enum DOT11_QOS_PARAMS_REVISION_1 = 0x00000001;
enum DOT11_ASSOCIATION_PARAMS_REVISION_1 = 0x00000001;
enum DOT11_MAX_NUM_OF_FRAGMENTS = 0x00000010;
enum DOT11_PRIORITY_CONTENTION = 0x00000000;
enum DOT11_PRIORITY_CONTENTION_FREE = 0x00000001;
enum DOT11_SERVICE_CLASS_REORDERABLE_MULTICAST = 0x00000000;
enum DOT11_SERVICE_CLASS_STRICTLY_ORDERED = 0x00000001;
enum DOT11_FLAGS_80211B_SHORT_PREAMBLE = 0x00000001;
enum DOT11_FLAGS_80211B_PBCC = 0x00000002;
enum DOT11_FLAGS_80211B_CHANNEL_AGILITY = 0x00000004;
enum DOT11_FLAGS_PS_ON = 0x00000008;
enum DOT11_FLAGS_80211G_DSSS_OFDM = 0x00000010;
enum DOT11_FLAGS_80211G_USE_PROTECTION = 0x00000020;
enum DOT11_FLAGS_80211G_NON_ERP_PRESENT = 0x00000040;
enum DOT11_FLAGS_80211G_BARKER_PREAMBLE_MODE = 0x00000080;
enum DOT11_WME_PACKET = 0x00000100;
enum DOT11_PHY_ATTRIBUTES_REVISION_1 = 0x00000001;
enum DOT11_EXTSTA_ATTRIBUTES_SAFEMODE_OID_SUPPORTED = 0x00000001;
enum DOT11_EXTSTA_ATTRIBUTES_SAFEMODE_CERTIFIED = 0x00000002;
enum DOT11_EXTSTA_ATTRIBUTES_SAFEMODE_RESERVED = 0x0000000c;
enum DOT11_EXTSTA_ATTRIBUTES_REVISION_1 = 0x00000001;
enum DOT11_EXTSTA_ATTRIBUTES_REVISION_2 = 0x00000002;
enum DOT11_EXTSTA_ATTRIBUTES_REVISION_3 = 0x00000003;
enum DOT11_EXTSTA_ATTRIBUTES_REVISION_4 = 0x00000004;
enum DOT11_SEND_CONTEXT_REVISION_1 = 0x00000001;
enum DOT11_RECV_CONTEXT_REVISION_1 = 0x00000001;
enum DOT11_STATUS_SUCCESS = 0x00000001;
enum DOT11_STATUS_RETRY_LIMIT_EXCEEDED = 0x00000002;
enum DOT11_STATUS_UNSUPPORTED_PRIORITY = 0x00000004;
enum DOT11_STATUS_UNSUPPORTED_SERVICE_CLASS = 0x00000008;
enum DOT11_STATUS_UNAVAILABLE_PRIORITY = 0x00000010;
enum DOT11_STATUS_UNAVAILABLE_SERVICE_CLASS = 0x00000020;
enum DOT11_STATUS_XMIT_MSDU_TIMER_EXPIRED = 0x00000040;
enum DOT11_STATUS_UNAVAILABLE_BSS = 0x00000080;
enum DOT11_STATUS_EXCESSIVE_DATA_LENGTH = 0x00000100;
enum DOT11_STATUS_ENCRYPTION_FAILED = 0x00000200;
enum DOT11_STATUS_WEP_KEY_UNAVAILABLE = 0x00000400;
enum DOT11_STATUS_ICV_VERIFIED = 0x00000800;
enum DOT11_STATUS_PACKET_REASSEMBLED = 0x00001000;
enum DOT11_STATUS_PACKET_NOT_REASSEMBLED = 0x00002000;
enum DOT11_STATUS_GENERATE_AUTH_FAILED = 0x00004000;
enum DOT11_STATUS_AUTH_NOT_VERIFIED = 0x00008000;
enum DOT11_STATUS_AUTH_VERIFIED = 0x00010000;
enum DOT11_STATUS_AUTH_FAILED = 0x00020000;
enum DOT11_STATUS_PS_LIFETIME_EXPIRED = 0x00040000;
enum DOT11_STATUS_RESET_CONFIRM = 0x00000004;
enum DOT11_STATUS_SCAN_CONFIRM = 0x00000001;
enum DOT11_STATUS_JOIN_CONFIRM = 0x00000002;
enum DOT11_STATUS_START_CONFIRM = 0x00000003;
enum DOT11_STATUS_AP_JOIN_CONFIRM = 0x00000005;
enum DOT11_STATUS_MPDU_MAX_LENGTH_CHANGED = 0x00000006;
enum DOT11_MPDU_MAX_LENGTH_INDICATION_REVISION_1 = 0x00000001;
enum DOT11_ASSOCIATION_START_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_ENCAP_RFC_1042 = 0x00000001;
enum DOT11_ENCAP_802_1H = 0x00000002;
enum DOT11_ASSOC_STATUS_SUCCESS = 0x00000000;
enum DOT11_ASSOCIATION_COMPLETION_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_ASSOCIATION_COMPLETION_PARAMETERS_REVISION_2 = 0x00000002;
enum DOT11_CONNECTION_START_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_CONNECTION_STATUS_SUCCESS = 0x00000000;
enum DOT11_CONNECTION_COMPLETION_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_ROAMING_START_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_ROAMING_COMPLETION_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_DISASSOCIATION_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_TKIPMIC_FAILURE_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_PMKID_CANDIDATE_LIST_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_PHY_STATE_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_LINK_QUALITY_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_EXTSTA_SEND_CONTEXT_REVISION_1 = 0x00000001;
enum DOT11_EXTSTA_RECV_CONTEXT_REVISION_1 = 0x00000001;
enum OID_DOT11_PRIVATE_OIDS_START = 0x0d010700;
enum OID_DOT11_CURRENT_ADDRESS = 0x0d010702;
enum OID_DOT11_PERMANENT_ADDRESS = 0x0d010703;
enum OID_DOT11_MULTICAST_LIST = 0x0d010704;
enum OID_DOT11_MAXIMUM_LIST_SIZE = 0x0d010705;
enum DOT11_EXTAP_ATTRIBUTES_REVISION_1 = 0x00000001;
enum DOT11_INCOMING_ASSOC_STARTED_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_ASSOC_ERROR_SOURCE_OS = 0x00000000;
enum DOT11_ASSOC_ERROR_SOURCE_REMOTE = 0x00000001;
enum DOT11_ASSOC_ERROR_SOURCE_OTHER = 0x000000ff;
enum DOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_STOP_AP_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_STOP_AP_REASON_FREQUENCY_NOT_AVAILABLE = 0x00000001;
enum DOT11_STOP_AP_REASON_CHANNEL_NOT_AVAILABLE = 0x00000002;
enum DOT11_STOP_AP_REASON_AP_ACTIVE = 0x00000003;
enum DOT11_STOP_AP_REASON_IHV_START = 0xff000000;
enum DOT11_STOP_AP_REASON_IHV_END = 0xffffffff;
enum DOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_CAN_SUSTAIN_AP_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_CAN_SUSTAIN_AP_REASON_IHV_START = 0xff000000;
enum DOT11_CAN_SUSTAIN_AP_REASON_IHV_END = 0xffffffff;
enum DOT11_AVAILABLE_CHANNEL_LIST_REVISION_1 = 0x00000001;
enum DOT11_AVAILABLE_FREQUENCY_LIST_REVISION_1 = 0x00000001;
enum DOT11_DISASSOCIATE_PEER_REQUEST_REVISION_1 = 0x00000001;
enum DOT11_INCOMING_ASSOC_DECISION_REVISION_1 = 0x00000001;
enum DOT11_INCOMING_ASSOC_DECISION_REVISION_2 = 0x00000002;
enum DOT11_ADDITIONAL_IE_REVISION_1 = 0x00000001;
enum DOT11_EXTAP_SEND_CONTEXT_REVISION_1 = 0x00000001;
enum DOT11_EXTAP_RECV_CONTEXT_REVISION_1 = 0x00000001;
enum DOT11_PEER_INFO_LIST_REVISION_1 = 0x00000001;
enum DOT11_VWIFI_COMBINATION_REVISION_1 = 0x00000001;
enum DOT11_VWIFI_COMBINATION_REVISION_2 = 0x00000002;
enum DOT11_VWIFI_COMBINATION_REVISION_3 = 0x00000003;
enum DOT11_VWIFI_ATTRIBUTES_REVISION_1 = 0x00000001;
enum DOT11_MAC_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_WFD_ATTRIBUTES_REVISION_1 = 0x00000001;
enum DOT11_WFD_STATUS_SUCCESS = 0x00000000;
enum DOT11_WFD_STATUS_FAILED_INFORMATION_IS_UNAVAILABLE = 0x00000001;
enum DOT11_WFD_STATUS_FAILED_INCOMPATIBLE_PARAMETERS = 0x00000002;
enum DOT11_WFD_STATUS_FAILED_LIMIT_REACHED = 0x00000003;
enum DOT11_WFD_STATUS_FAILED_INVALID_PARAMETERS = 0x00000004;
enum DOT11_WFD_STATUS_FAILED_UNABLE_TO_ACCOMODATE_REQUEST = 0x00000005;
enum DOT11_WFD_STATUS_FAILED_PREVIOUS_PROTOCOL_ERROR = 0x00000006;
enum DOT11_WFD_STATUS_FAILED_NO_COMMON_CHANNELS = 0x00000007;
enum DOT11_WFD_STATUS_FAILED_UNKNOWN_WFD_GROUP = 0x00000008;
enum DOT11_WFD_STATUS_FAILED_MATCHING_MAX_INTENT = 0x00000009;
enum DOT11_WFD_STATUS_FAILED_INCOMPATIBLE_PROVISIONING_METHOD = 0x0000000a;
enum DOT11_WFD_STATUS_FAILED_REJECTED_BY_USER = 0x0000000b;
enum DOT11_WFD_STATUS_SUCCESS_ACCEPTED_BY_USER = 0x0000000c;
enum DOT11_WFD_MINOR_REASON_SUCCESS = 0x00000000;
enum DOT11_WFD_MINOR_REASON_DISASSOCIATED_FROM_WLAN_CROSS_CONNECTION_POLICY = 0x00000001;
enum DOT11_WFD_MINOR_REASON_DISASSOCIATED_NOT_MANAGED_INFRASTRUCTURE_CAPABLE = 0x00000002;
enum DOT11_WFD_MINOR_REASON_DISASSOCIATED_WFD_COEXISTENCE_POLICY = 0x00000003;
enum DOT11_WFD_MINOR_REASON_DISASSOCIATED_INFRASTRUCTURE_MANAGED_POLICY = 0x00000004;
enum DOT11_WPS_VERSION_1_0 = 0x00000001;
enum DOT11_WPS_VERSION_2_0 = 0x00000002;
enum DOT11_WFD_DEVICE_CAPABILITY_SERVICE_DISCOVERY = 0x00000001;
enum DOT11_WFD_DEVICE_CAPABILITY_P2P_CLIENT_DISCOVERABILITY = 0x00000002;
enum DOT11_WFD_DEVICE_CAPABILITY_CONCURRENT_OPERATION = 0x00000004;
enum DOT11_WFD_DEVICE_CAPABILITY_P2P_INFRASTRUCTURE_MANAGED = 0x00000008;
enum DOT11_WFD_DEVICE_CAPABILITY_P2P_DEVICE_LIMIT = 0x00000010;
enum DOT11_WFD_DEVICE_CAPABILITY_P2P_INVITATION_PROCEDURE = 0x00000020;
enum DOT11_WFD_DEVICE_CAPABILITY_RESERVED_6 = 0x00000040;
enum DOT11_WFD_DEVICE_CAPABILITY_RESERVED_7 = 0x00000080;
enum DOT11_WFD_GROUP_CAPABILITY_NONE = 0x00000000;
enum DOT11_WFD_GROUP_CAPABILITY_GROUP_OWNER = 0x00000001;
enum DOT11_WFD_GROUP_CAPABILITY_PERSISTENT_GROUP = 0x00000002;
enum DOT11_WFD_GROUP_CAPABILITY_GROUP_LIMIT_REACHED = 0x00000004;
enum DOT11_WFD_GROUP_CAPABILITY_INTRABSS_DISTRIBUTION_SUPPORTED = 0x00000008;
enum DOT11_WFD_GROUP_CAPABILITY_CROSS_CONNECTION_SUPPORTED = 0x00000010;
enum DOT11_WFD_GROUP_CAPABILITY_PERSISTENT_RECONNECT_SUPPORTED = 0x00000020;
enum DOT11_WFD_GROUP_CAPABILITY_IN_GROUP_FORMATION = 0x00000040;
enum DOT11_WFD_GROUP_CAPABILITY_RESERVED_7 = 0x00000080;
enum DOT11_WFD_GROUP_CAPABILITY_EAPOL_KEY_IP_ADDRESS_ALLOCATION_SUPPORTED = 0x00000080;
enum DOT11_WPS_DEVICE_NAME_MAX_LENGTH = 0x00000020;
enum DOT11_WPS_MAX_PASSKEY_LENGTH = 0x00000008;
enum DOT11_WPS_MAX_MODEL_NAME_LENGTH = 0x00000020;
enum DOT11_WPS_MAX_MODEL_NUMBER_LENGTH = 0x00000020;
enum WFDSVC_CONNECTION_CAPABILITY_NEW = 0x00000001;
enum WFDSVC_CONNECTION_CAPABILITY_CLIENT = 0x00000002;
enum WFDSVC_CONNECTION_CAPABILITY_GO = 0x00000004;
enum DOT11_WFD_DISCOVER_COMPLETE_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_WFD_DISCOVER_COMPLETE_MAX_LIST_SIZE = 0x00000080;
enum DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_ANQP_QUERY_COMPLETE_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_WFD_DEVICE_CAPABILITY_CONFIG_REVISION_1 = 0x00000001;
enum DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_REVISION_1 = 0x00000001;
enum DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_REVISION_2 = 0x00000002;
enum DOT11_WFD_DEVICE_INFO_REVISION_1 = 0x00000001;
enum DOT11_WFD_SECONDARY_DEVICE_TYPE_LIST_REVISION_1 = 0x00000001;
enum DISCOVERY_FILTER_BITMASK_DEVICE = 0x00000001;
enum DISCOVERY_FILTER_BITMASK_GO = 0x00000002;
enum DISCOVERY_FILTER_BITMASK_ANY = 0x0000000f;
enum DOT11_WFD_DISCOVER_REQUEST_REVISION_1 = 0x00000001;
enum DOT11_DEVICE_ENTRY_BYTE_ARRAY_REVISION_1 = 0x00000001;
enum DOT11_WFD_DEVICE_NOT_DISCOVERABLE = 0x00000000;
enum DOT11_WFD_DEVICE_AUTO_AVAILABILITY = 0x00000010;
enum DOT11_WFD_DEVICE_HIGH_AVAILABILITY = 0x00000018;
enum DOT11_WFD_ADDITIONAL_IE_REVISION_1 = 0x00000001;
enum DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_SEND_INVITATION_REQUEST_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_SEND_INVITATION_RESPONSE_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_WFD_DEVICE_LISTEN_CHANNEL_REVISION_1 = 0x00000001;
enum DOT11_WFD_GROUP_START_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_WFD_GROUP_JOIN_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_POWER_MGMT_AUTO_MODE_ENABLED_REVISION_1 = 0x00000001;
enum DOT11_POWER_MGMT_MODE_STATUS_INFO_REVISION_1 = 0x00000001;
enum DOT11_MAX_CHANNEL_HINTS = 0x00000004;
enum DOT11_INVALID_CHANNEL_NUMBER = 0x00000000;
enum DOT11_NLO_FLAG_STOP_NLO_INDICATION = 0x00000001;
enum DOT11_NLO_FLAG_SCAN_ON_AOAC_PLATFORM = 0x00000002;
enum DOT11_NLO_FLAG_SCAN_AT_SYSTEM_RESUME = 0x00000004;
enum DOT11_OFFLOAD_NETWORK_LIST_REVISION_1 = 0x00000001;
enum DOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS_REVISION_1 = 0x00000001;
enum DOT11_MANUFACTURING_TEST_REVISION_1 = 0x00000001;
enum DOT11_MANUFACTURING_CALLBACK_REVISION_1 = 0x00000001;
enum DOT11_SSID_MAX_LENGTH = 0x00000020;
enum DOT11_OI_MAX_LENGTH = 0x00000005;
enum DOT11_OI_MIN_LENGTH = 0x00000003;
enum DevProp_PciRootBus_SecondaryInterface_PciConventional = 0x00000000;
enum DevProp_PciRootBus_SecondaryInterface_PciXMode1 = 0x00000001;
enum DevProp_PciRootBus_SecondaryInterface_PciXMode2 = 0x00000002;
enum DevProp_PciRootBus_SecondaryInterface_PciExpress = 0x00000003;
enum DevProp_PciRootBus_CurrentSpeedAndMode_Pci_Conventional_33Mhz = 0x00000000;
enum DevProp_PciRootBus_CurrentSpeedAndMode_Pci_Conventional_66Mhz = 0x00000001;
enum DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_66Mhz = 0x00000002;
enum DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_100Mhz = 0x00000003;
enum DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_133Mhz = 0x00000004;
enum DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_ECC_66Mhz = 0x00000005;
enum DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_ECC_100Mhz = 0x00000006;
enum DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_ECC_133Mhz = 0x00000007;
enum DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_266_Mode2_66Mhz = 0x00000008;
enum DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_266_Mode2_100Mhz = 0x00000009;
enum DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_266_Mode2_133Mhz = 0x0000000a;
enum DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_533_Mode2_66Mhz = 0x0000000b;
enum DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_533_Mode2_100Mhz = 0x0000000c;
enum DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_533_Mode2_133Mhz = 0x0000000d;
enum DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_Conventional_33Mhz = 0x00000001;
enum DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_Conventional_66Mhz = 0x00000002;
enum DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_66Mhz = 0x00000004;
enum DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_133Mhz = 0x00000008;
enum DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_266Mhz = 0x00000010;
enum DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_533Mhz = 0x00000020;
enum DevProp_PciRootBus_BusWidth_32Bits = 0x00000000;
enum DevProp_PciRootBus_BusWidth_64Bits = 0x00000001;
enum DevProp_PciDevice_DeviceType_PciConventional = 0x00000000;
enum DevProp_PciDevice_DeviceType_PciX = 0x00000001;
enum DevProp_PciDevice_DeviceType_PciExpressEndpoint = 0x00000002;
enum DevProp_PciDevice_DeviceType_PciExpressLegacyEndpoint = 0x00000003;
enum DevProp_PciDevice_DeviceType_PciExpressRootComplexIntegratedEndpoint = 0x00000004;
enum DevProp_PciDevice_DeviceType_PciExpressTreatedAsPci = 0x00000005;
enum DevProp_PciDevice_BridgeType_PciConventional = 0x00000006;
enum DevProp_PciDevice_BridgeType_PciX = 0x00000007;
enum DevProp_PciDevice_BridgeType_PciExpressRootPort = 0x00000008;
enum DevProp_PciDevice_BridgeType_PciExpressUpstreamSwitchPort = 0x00000009;
enum DevProp_PciDevice_BridgeType_PciExpressDownstreamSwitchPort = 0x0000000a;
enum DevProp_PciDevice_BridgeType_PciExpressToPciXBridge = 0x0000000b;
enum DevProp_PciDevice_BridgeType_PciXToExpressBridge = 0x0000000c;
enum DevProp_PciDevice_BridgeType_PciExpressTreatedAsPci = 0x0000000d;
enum DevProp_PciDevice_BridgeType_PciExpressEventCollector = 0x0000000e;
enum DevProp_PciDevice_CurrentSpeedAndMode_Pci_Conventional_33MHz = 0x00000000;
enum DevProp_PciDevice_CurrentSpeedAndMode_Pci_Conventional_66MHz = 0x00000001;
enum DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode_Conventional_Pci = 0x00000000;
enum DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_66Mhz = 0x00000001;
enum DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_100Mhz = 0x00000002;
enum DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_133MHZ = 0x00000003;
enum DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_ECC_66Mhz = 0x00000005;
enum DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_ECC_100Mhz = 0x00000006;
enum DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_ECC_133Mhz = 0x00000007;
enum DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_266_66MHz = 0x00000009;
enum DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_266_100MHz = 0x0000000a;
enum DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_266_133MHz = 0x0000000b;
enum DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_533_66MHz = 0x0000000d;
enum DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_533_100MHz = 0x0000000e;
enum DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_533_133MHz = 0x0000000f;
enum DevProp_PciExpressDevice_PayloadOrRequestSize_128Bytes = 0x00000000;
enum DevProp_PciExpressDevice_PayloadOrRequestSize_256Bytes = 0x00000001;
enum DevProp_PciExpressDevice_PayloadOrRequestSize_512Bytes = 0x00000002;
enum DevProp_PciExpressDevice_PayloadOrRequestSize_1024Bytes = 0x00000003;
enum DevProp_PciExpressDevice_PayloadOrRequestSize_2048Bytes = 0x00000004;
enum DevProp_PciExpressDevice_PayloadOrRequestSize_4096Bytes = 0x00000005;
enum DevProp_PciExpressDevice_LinkSpeed_TwoAndHalf_Gbps = 0x00000001;
enum DevProp_PciExpressDevice_LinkSpeed_Five_Gbps = 0x00000002;
enum DevProp_PciExpressDevice_LinkWidth_By_1 = 0x00000001;
enum DevProp_PciExpressDevice_LinkWidth_By_2 = 0x00000002;
enum DevProp_PciExpressDevice_LinkWidth_By_4 = 0x00000004;
enum DevProp_PciExpressDevice_LinkWidth_By_8 = 0x00000008;
enum DevProp_PciExpressDevice_LinkWidth_By_12 = 0x0000000c;
enum DevProp_PciExpressDevice_LinkWidth_By_16 = 0x00000010;
enum DevProp_PciExpressDevice_LinkWidth_By_32 = 0x00000020;
enum DevProp_PciExpressDevice_Spec_Version_10 = 0x00000001;
enum DevProp_PciExpressDevice_Spec_Version_11 = 0x00000002;
enum DevProp_PciDevice_InterruptType_LineBased = 0x00000001;
enum DevProp_PciDevice_InterruptType_Msi = 0x00000002;
enum DevProp_PciDevice_InterruptType_MsiX = 0x00000004;
enum DevProp_PciDevice_SriovSupport_Ok = 0x00000000;
enum DevProp_PciDevice_SriovSupport_MissingAcs = 0x00000001;
enum DevProp_PciDevice_SriovSupport_MissingPfDriver = 0x00000002;
enum DevProp_PciDevice_SriovSupport_NoBusResource = 0x00000003;
enum DevProp_PciDevice_SriovSupport_DidntGetVfBarSpace = 0x00000004;
enum DevProp_PciDevice_AcsSupport_Present = 0x00000000;
enum DevProp_PciDevice_AcsSupport_NotNeeded = 0x00000001;
enum DevProp_PciDevice_AcsSupport_Missing = 0x00000002;
enum DevProp_PciDevice_AcsCompatibleUpHierarchy_NotSupported = 0x00000000;
enum DevProp_PciDevice_AcsCompatibleUpHierarchy_SingleFunctionSupported = 0x00000001;
enum DevProp_PciDevice_AcsCompatibleUpHierarchy_NoP2PSupported = 0x00000002;
enum DevProp_PciDevice_AcsCompatibleUpHierarchy_Supported = 0x00000003;
enum DevProp_PciDevice_AcsCompatibleUpHierarchy_Enhanced = 0x00000004;
enum WLAN_API_VERSION_1_0 = 0x00000001;
enum WLAN_API_VERSION_2_0 = 0x00000002;
enum WLAN_API_VERSION = 0x00000002;
enum WLAN_MAX_NAME_LENGTH = 0x00000100;
enum WLAN_PROFILE_GROUP_POLICY = 0x00000001;
enum WLAN_PROFILE_USER = 0x00000002;
enum WLAN_PROFILE_GET_PLAINTEXT_KEY = 0x00000004;
enum WLAN_PROFILE_CONNECTION_MODE_SET_BY_CLIENT = 0x00010000;
enum WLAN_PROFILE_CONNECTION_MODE_AUTO = 0x00020000;
enum DOT11_PSD_IE_MAX_DATA_SIZE = 0x000000f0;
enum DOT11_PSD_IE_MAX_ENTRY_NUMBER = 0x00000005;
enum WLAN_REASON_CODE_NETWORK_NOT_COMPATIBLE = 0x00020001;
enum WLAN_REASON_CODE_PROFILE_NOT_COMPATIBLE = 0x00020002;
enum WLAN_REASON_CODE_NO_AUTO_CONNECTION = 0x00028001;
enum WLAN_REASON_CODE_NOT_VISIBLE = 0x00028002;
enum WLAN_REASON_CODE_GP_DENIED = 0x00028003;
enum WLAN_REASON_CODE_USER_DENIED = 0x00028004;
enum WLAN_REASON_CODE_BSS_TYPE_NOT_ALLOWED = 0x00028005;
enum WLAN_REASON_CODE_IN_FAILED_LIST = 0x00028006;
enum WLAN_REASON_CODE_IN_BLOCKED_LIST = 0x00028007;
enum WLAN_REASON_CODE_SSID_LIST_TOO_LONG = 0x00028008;
enum WLAN_REASON_CODE_CONNECT_CALL_FAIL = 0x00028009;
enum WLAN_REASON_CODE_SCAN_CALL_FAIL = 0x0002800a;
enum WLAN_REASON_CODE_NETWORK_NOT_AVAILABLE = 0x0002800b;
enum WLAN_REASON_CODE_PROFILE_CHANGED_OR_DELETED = 0x0002800c;
enum WLAN_REASON_CODE_KEY_MISMATCH = 0x0002800d;
enum WLAN_REASON_CODE_USER_NOT_RESPOND = 0x0002800e;
enum WLAN_REASON_CODE_AP_PROFILE_NOT_ALLOWED_FOR_CLIENT = 0x0002800f;
enum WLAN_REASON_CODE_AP_PROFILE_NOT_ALLOWED = 0x00028010;
enum WLAN_REASON_CODE_HOTSPOT2_PROFILE_DENIED = 0x00028011;
enum WLAN_REASON_CODE_INVALID_PROFILE_SCHEMA = 0x00080001;
enum WLAN_REASON_CODE_PROFILE_MISSING = 0x00080002;
enum WLAN_REASON_CODE_INVALID_PROFILE_NAME = 0x00080003;
enum WLAN_REASON_CODE_INVALID_PROFILE_TYPE = 0x00080004;
enum WLAN_REASON_CODE_INVALID_PHY_TYPE = 0x00080005;
enum WLAN_REASON_CODE_MSM_SECURITY_MISSING = 0x00080006;
enum WLAN_REASON_CODE_IHV_SECURITY_NOT_SUPPORTED = 0x00080007;
enum WLAN_REASON_CODE_IHV_OUI_MISMATCH = 0x00080008;
enum WLAN_REASON_CODE_IHV_OUI_MISSING = 0x00080009;
enum WLAN_REASON_CODE_IHV_SETTINGS_MISSING = 0x0008000a;
enum WLAN_REASON_CODE_CONFLICT_SECURITY = 0x0008000b;
enum WLAN_REASON_CODE_SECURITY_MISSING = 0x0008000c;
enum WLAN_REASON_CODE_INVALID_BSS_TYPE = 0x0008000d;
enum WLAN_REASON_CODE_INVALID_ADHOC_CONNECTION_MODE = 0x0008000e;
enum WLAN_REASON_CODE_NON_BROADCAST_SET_FOR_ADHOC = 0x0008000f;
enum WLAN_REASON_CODE_AUTO_SWITCH_SET_FOR_ADHOC = 0x00080010;
enum WLAN_REASON_CODE_AUTO_SWITCH_SET_FOR_MANUAL_CONNECTION = 0x00080011;
enum WLAN_REASON_CODE_IHV_SECURITY_ONEX_MISSING = 0x00080012;
enum WLAN_REASON_CODE_PROFILE_SSID_INVALID = 0x00080013;
enum WLAN_REASON_CODE_TOO_MANY_SSID = 0x00080014;
enum WLAN_REASON_CODE_IHV_CONNECTIVITY_NOT_SUPPORTED = 0x00080015;
enum WLAN_REASON_CODE_BAD_MAX_NUMBER_OF_CLIENTS_FOR_AP = 0x00080016;
enum WLAN_REASON_CODE_INVALID_CHANNEL = 0x00080017;
enum WLAN_REASON_CODE_OPERATION_MODE_NOT_SUPPORTED = 0x00080018;
enum WLAN_REASON_CODE_AUTO_AP_PROFILE_NOT_ALLOWED = 0x00080019;
enum WLAN_REASON_CODE_AUTO_CONNECTION_NOT_ALLOWED = 0x0008001a;
enum WLAN_REASON_CODE_HOTSPOT2_PROFILE_NOT_ALLOWED = 0x0008001b;
enum WLAN_REASON_CODE_UNSUPPORTED_SECURITY_SET_BY_OS = 0x00030001;
enum WLAN_REASON_CODE_UNSUPPORTED_SECURITY_SET = 0x00030002;
enum WLAN_REASON_CODE_BSS_TYPE_UNMATCH = 0x00030003;
enum WLAN_REASON_CODE_PHY_TYPE_UNMATCH = 0x00030004;
enum WLAN_REASON_CODE_DATARATE_UNMATCH = 0x00030005;
enum WLAN_REASON_CODE_USER_CANCELLED = 0x00038001;
enum WLAN_REASON_CODE_ASSOCIATION_FAILURE = 0x00038002;
enum WLAN_REASON_CODE_ASSOCIATION_TIMEOUT = 0x00038003;
enum WLAN_REASON_CODE_PRE_SECURITY_FAILURE = 0x00038004;
enum WLAN_REASON_CODE_START_SECURITY_FAILURE = 0x00038005;
enum WLAN_REASON_CODE_SECURITY_FAILURE = 0x00038006;
enum WLAN_REASON_CODE_SECURITY_TIMEOUT = 0x00038007;
enum WLAN_REASON_CODE_ROAMING_FAILURE = 0x00038008;
enum WLAN_REASON_CODE_ROAMING_SECURITY_FAILURE = 0x00038009;
enum WLAN_REASON_CODE_ADHOC_SECURITY_FAILURE = 0x0003800a;
enum WLAN_REASON_CODE_DRIVER_DISCONNECTED = 0x0003800b;
enum WLAN_REASON_CODE_DRIVER_OPERATION_FAILURE = 0x0003800c;
enum WLAN_REASON_CODE_IHV_NOT_AVAILABLE = 0x0003800d;
enum WLAN_REASON_CODE_IHV_NOT_RESPONDING = 0x0003800e;
enum WLAN_REASON_CODE_DISCONNECT_TIMEOUT = 0x0003800f;
enum WLAN_REASON_CODE_INTERNAL_FAILURE = 0x00038010;
enum WLAN_REASON_CODE_UI_REQUEST_TIMEOUT = 0x00038011;
enum WLAN_REASON_CODE_TOO_MANY_SECURITY_ATTEMPTS = 0x00038012;
enum WLAN_REASON_CODE_AP_STARTING_FAILURE = 0x00038013;
enum WLAN_REASON_CODE_NO_VISIBLE_AP = 0x00038014;
enum WLAN_REASON_CODE_MSMSEC_MIN = 0x00040000;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_KEY_INDEX = 0x00040001;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_PSK_PRESENT = 0x00040002;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_KEY_LENGTH = 0x00040003;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_PSK_LENGTH = 0x00040004;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_NO_AUTH_CIPHER_SPECIFIED = 0x00040005;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_TOO_MANY_AUTH_CIPHER_SPECIFIED = 0x00040006;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_DUPLICATE_AUTH_CIPHER = 0x00040007;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_RAWDATA_INVALID = 0x00040008;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_AUTH_CIPHER = 0x00040009;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_ONEX_DISABLED = 0x0004000a;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_ONEX_ENABLED = 0x0004000b;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PMKCACHE_MODE = 0x0004000c;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PMKCACHE_SIZE = 0x0004000d;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PMKCACHE_TTL = 0x0004000e;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PREAUTH_MODE = 0x0004000f;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_PREAUTH_THROTTLE = 0x00040010;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_PREAUTH_ONLY_ENABLED = 0x00040011;
enum WLAN_REASON_CODE_MSMSEC_CAPABILITY_NETWORK = 0x00040012;
enum WLAN_REASON_CODE_MSMSEC_CAPABILITY_NIC = 0x00040013;
enum WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE = 0x00040014;
enum WLAN_REASON_CODE_MSMSEC_CAPABILITY_DISCOVERY = 0x00040015;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_PASSPHRASE_CHAR = 0x00040016;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_KEYMATERIAL_CHAR = 0x00040017;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_WRONG_KEYTYPE = 0x00040018;
enum WLAN_REASON_CODE_MSMSEC_MIXED_CELL = 0x00040019;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_AUTH_TIMERS_INVALID = 0x0004001a;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_INVALID_GKEY_INTV = 0x0004001b;
enum WLAN_REASON_CODE_MSMSEC_TRANSITION_NETWORK = 0x0004001c;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_KEY_UNMAPPED_CHAR = 0x0004001d;
enum WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE_AUTH = 0x0004001e;
enum WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE_CIPHER = 0x0004001f;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_SAFE_MODE = 0x00040020;
enum WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE_SAFE_MODE_NIC = 0x00040021;
enum WLAN_REASON_CODE_MSMSEC_CAPABILITY_PROFILE_SAFE_MODE_NW = 0x00040022;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_UNSUPPORTED_AUTH = 0x00040023;
enum WLAN_REASON_CODE_MSMSEC_PROFILE_UNSUPPORTED_CIPHER = 0x00040024;
enum WLAN_REASON_CODE_MSMSEC_CAPABILITY_MFP_NW_NIC = 0x00040025;
enum WLAN_REASON_CODE_MSMSEC_UI_REQUEST_FAILURE = 0x00048001;
enum WLAN_REASON_CODE_MSMSEC_AUTH_START_TIMEOUT = 0x00048002;
enum WLAN_REASON_CODE_MSMSEC_AUTH_SUCCESS_TIMEOUT = 0x00048003;
enum WLAN_REASON_CODE_MSMSEC_KEY_START_TIMEOUT = 0x00048004;
enum WLAN_REASON_CODE_MSMSEC_KEY_SUCCESS_TIMEOUT = 0x00048005;
enum WLAN_REASON_CODE_MSMSEC_M3_MISSING_KEY_DATA = 0x00048006;
enum WLAN_REASON_CODE_MSMSEC_M3_MISSING_IE = 0x00048007;
enum WLAN_REASON_CODE_MSMSEC_M3_MISSING_GRP_KEY = 0x00048008;
enum WLAN_REASON_CODE_MSMSEC_PR_IE_MATCHING = 0x00048009;
enum WLAN_REASON_CODE_MSMSEC_SEC_IE_MATCHING = 0x0004800a;
enum WLAN_REASON_CODE_MSMSEC_NO_PAIRWISE_KEY = 0x0004800b;
enum WLAN_REASON_CODE_MSMSEC_G1_MISSING_KEY_DATA = 0x0004800c;
enum WLAN_REASON_CODE_MSMSEC_G1_MISSING_GRP_KEY = 0x0004800d;
enum WLAN_REASON_CODE_MSMSEC_PEER_INDICATED_INSECURE = 0x0004800e;
enum WLAN_REASON_CODE_MSMSEC_NO_AUTHENTICATOR = 0x0004800f;
enum WLAN_REASON_CODE_MSMSEC_NIC_FAILURE = 0x00048010;
enum WLAN_REASON_CODE_MSMSEC_CANCELLED = 0x00048011;
enum WLAN_REASON_CODE_MSMSEC_KEY_FORMAT = 0x00048012;
enum WLAN_REASON_CODE_MSMSEC_DOWNGRADE_DETECTED = 0x00048013;
enum WLAN_REASON_CODE_MSMSEC_PSK_MISMATCH_SUSPECTED = 0x00048014;
enum WLAN_REASON_CODE_MSMSEC_FORCED_FAILURE = 0x00048015;
enum WLAN_REASON_CODE_MSMSEC_M3_TOO_MANY_RSNIE = 0x00048016;
enum WLAN_REASON_CODE_MSMSEC_M2_MISSING_KEY_DATA = 0x00048017;
enum WLAN_REASON_CODE_MSMSEC_M2_MISSING_IE = 0x00048018;
enum WLAN_REASON_CODE_MSMSEC_AUTH_WCN_COMPLETED = 0x00048019;
enum WLAN_REASON_CODE_MSMSEC_M3_MISSING_MGMT_GRP_KEY = 0x0004801a;
enum WLAN_REASON_CODE_MSMSEC_G1_MISSING_MGMT_GRP_KEY = 0x0004801b;
enum WLAN_REASON_CODE_MSMSEC_MAX = 0x0004ffff;
enum WLAN_AVAILABLE_NETWORK_CONNECTED = 0x00000001;
enum WLAN_AVAILABLE_NETWORK_HAS_PROFILE = 0x00000002;
enum WLAN_AVAILABLE_NETWORK_CONSOLE_USER_PROFILE = 0x00000004;
enum WLAN_AVAILABLE_NETWORK_INTERWORKING_SUPPORTED = 0x00000008;
enum WLAN_AVAILABLE_NETWORK_HOTSPOT2_ENABLED = 0x00000010;
enum WLAN_AVAILABLE_NETWORK_ANQP_SUPPORTED = 0x00000020;
enum WLAN_AVAILABLE_NETWORK_HOTSPOT2_DOMAIN = 0x00000040;
enum WLAN_AVAILABLE_NETWORK_HOTSPOT2_ROAMING = 0x00000080;
enum WLAN_AVAILABLE_NETWORK_AUTO_CONNECT_FAILED = 0x00000100;
enum WLAN_AVAILABLE_NETWORK_INCLUDE_ALL_ADHOC_PROFILES = 0x00000001;
enum WLAN_AVAILABLE_NETWORK_INCLUDE_ALL_MANUAL_HIDDEN_PROFILES = 0x00000002;
enum WLAN_MAX_PHY_TYPE_NUMBER = 0x00000008;
enum WLAN_MAX_PHY_INDEX = 0x00000040;
enum WLAN_CONNECTION_HIDDEN_NETWORK = 0x00000001;
enum WLAN_CONNECTION_ADHOC_JOIN_ONLY = 0x00000002;
enum WLAN_CONNECTION_IGNORE_PRIVACY_BIT = 0x00000004;
enum WLAN_CONNECTION_EAPOL_PASSTHROUGH = 0x00000008;
enum WLAN_CONNECTION_PERSIST_DISCOVERY_PROFILE = 0x00000010;
enum WLAN_CONNECTION_PERSIST_DISCOVERY_PROFILE_CONNECTION_MODE_AUTO = 0x00000020;
enum WLAN_CONNECTION_PERSIST_DISCOVERY_PROFILE_OVERWRITE_EXISTING = 0x00000040;
enum WLAN_NOTIFICATION_SOURCE_NONE = 0x00000000;
enum WLAN_NOTIFICATION_SOURCE_ALL = 0x0000ffff;
enum WLAN_NOTIFICATION_SOURCE_ACM = 0x00000008;
enum WLAN_NOTIFICATION_SOURCE_MSM = 0x00000010;
enum WLAN_NOTIFICATION_SOURCE_SECURITY = 0x00000020;
enum WLAN_NOTIFICATION_SOURCE_IHV = 0x00000040;
enum WLAN_NOTIFICATION_SOURCE_HNWK = 0x00000080;
enum WLAN_NOTIFICATION_SOURCE_ONEX = 0x00000004;
enum WLAN_NOTIFICATION_SOURCE_DEVICE_SERVICE = 0x00000800;
enum WFD_API_VERSION_1_0 = 0x00000001;
enum WFD_API_VERSION = 0x00000001;
enum WLAN_UI_API_VERSION = 0x00000001;
enum WLAN_UI_API_INITIAL_VERSION = 0x00000001;
enum GUID_DEVINTERFACE_WIFIDIRECT_DEVICE = GUID(0x439b20af, 0x8955, 0x405b, [0x99, 0xf0, 0xa6, 0x2a, 0xf0, 0xc6, 0x8d, 0x43]);
enum GUID_AEPSERVICE_WIFIDIRECT_DEVICE = GUID(0xcc29827c, 0x9caf, 0x4928, [0x99, 0xa9, 0x18, 0xf7, 0xc2, 0x38, 0x13, 0x89]);
enum GUID_DEVINTERFACE_ASP_INFRA_DEVICE = GUID(0xff823995, 0x7a72, 0x4c80, [0x87, 0x57, 0xc6, 0x7e, 0xe1, 0x3d, 0x1a, 0x49]);
//enum DEVPKEY_WiFiDirect_DeviceAddress = [MISSING];
//enum DEVPKEY_WiFiDirect_InterfaceAddress = [MISSING];
//enum DEVPKEY_WiFiDirect_InterfaceGuid = [MISSING];
//enum DEVPKEY_WiFiDirect_GroupId = [MISSING];
//enum DEVPKEY_WiFiDirect_IsConnected = [MISSING];
//enum DEVPKEY_WiFiDirect_IsVisible = [MISSING];
//enum DEVPKEY_WiFiDirect_IsLegacyDevice = [MISSING];
//enum DEVPKEY_WiFiDirect_MiracastVersion = [MISSING];
//enum DEVPKEY_WiFiDirect_IsMiracastLCPSupported = [MISSING];
//enum DEVPKEY_WiFiDirect_Services = [MISSING];
//enum DEVPKEY_WiFiDirect_SupportedChannelList = [MISSING];
//enum DEVPKEY_WiFiDirect_InformationElements = [MISSING];
//enum DEVPKEY_WiFiDirect_DeviceAddressCopy = [MISSING];
//enum DEVPKEY_WiFiDirect_IsRecentlyAssociated = [MISSING];
//enum DEVPKEY_WiFiDirect_Service_Aeps = [MISSING];
//enum DEVPKEY_WiFiDirect_NoMiracastAutoProject = [MISSING];
//enum DEVPKEY_InfraCast_Supported = [MISSING];
//enum DEVPKEY_InfraCast_StreamSecuritySupported = [MISSING];
//enum DEVPKEY_InfraCast_AccessPointBssid = [MISSING];
//enum DEVPKEY_InfraCast_SinkHostName = [MISSING];
//enum DEVPKEY_InfraCast_ChallengeAep = [MISSING];
//enum DEVPKEY_WiFiDirect_IsDMGCapable = [MISSING];
//enum DEVPKEY_InfraCast_DevnodeAep = [MISSING];
//enum DEVPKEY_WiFiDirect_FoundWsbService = [MISSING];
//enum DEVPKEY_InfraCast_HostName_ResolutionMode = [MISSING];
//enum DEVPKEY_InfraCast_SinkIpAddress = [MISSING];
//enum DEVPKEY_WiFiDirect_TransientAssociation = [MISSING];
//enum DEVPKEY_WiFiDirect_LinkQuality = [MISSING];
//enum DEVPKEY_InfraCast_PinSupported = [MISSING];
//enum DEVPKEY_InfraCast_RtspTcpConnectionParametersSupported = [MISSING];
//enum DEVPKEY_WiFiDirect_Miracast_SessionMgmtControlPort = [MISSING];
//enum DEVPKEY_WiFiDirect_RtspTcpConnectionParametersSupported = [MISSING];
//enum DEVPKEY_WiFiDirectServices_ServiceAddress = [MISSING];
//enum DEVPKEY_WiFiDirectServices_ServiceName = [MISSING];
//enum DEVPKEY_WiFiDirectServices_ServiceInformation = [MISSING];
//enum DEVPKEY_WiFiDirectServices_AdvertisementId = [MISSING];
//enum DEVPKEY_WiFiDirectServices_ServiceConfigMethods = [MISSING];
//enum DEVPKEY_WiFiDirectServices_RequestServiceInformation = [MISSING];
//enum DEVPKEY_WiFi_InterfaceGuid = [MISSING];
enum DOT11EXT_PSK_MAX_LENGTH = 0x00000040;
enum WDIAG_IHV_WLAN_ID_FLAG_SECURITY_ENABLED = 0x00000001;
enum IHV_VERSION_FUNCTION_NAME = "Dot11ExtIhvGetVersionInfo";
enum IHV_INIT_FUNCTION_NAME = "Dot11ExtIhvInitService";
enum IHV_INIT_VS_FUNCTION_NAME = "Dot11ExtIhvInitVirtualStation";
enum MS_MAX_PROFILE_NAME_LENGTH = 0x00000100;
enum MS_PROFILE_GROUP_POLICY = 0x00000001;
enum MS_PROFILE_USER = 0x00000002;
alias WLAN_SET_EAPHOST_FLAGS = uint;
enum : uint
{
    WLAN_SET_EAPHOST_DATA_ALL_USERS = 0x00000001,
}

alias WLAN_CONNECTION_NOTIFICATION_FLAGS = uint;
enum : uint
{
    WLAN_CONNECTION_NOTIFICATION_ADHOC_NETWORK_FORMED = 0x00000001,
    WLAN_CONNECTION_NOTIFICATION_CONSOLE_USER_PROFILE = 0x00000004,
}

alias DOT11_BSS_TYPE = int;
enum : int
{
    dot11_BSS_type_infrastructure = 0x00000001,
    dot11_BSS_type_independent    = 0x00000002,
    dot11_BSS_type_any            = 0x00000003,
}

struct DOT11_SSID
{
    uint uSSIDLength;
    ubyte[32] ucSSID;
}
alias DOT11_AUTH_ALGORITHM = int;
enum : int
{
    DOT11_AUTH_ALGO_80211_OPEN       = 0x00000001,
    DOT11_AUTH_ALGO_80211_SHARED_KEY = 0x00000002,
    DOT11_AUTH_ALGO_WPA              = 0x00000003,
    DOT11_AUTH_ALGO_WPA_PSK          = 0x00000004,
    DOT11_AUTH_ALGO_WPA_NONE         = 0x00000005,
    DOT11_AUTH_ALGO_RSNA             = 0x00000006,
    DOT11_AUTH_ALGO_RSNA_PSK         = 0x00000007,
    DOT11_AUTH_ALGO_WPA3             = 0x00000008,
    DOT11_AUTH_ALGO_WPA3_ENT_192     = 0x00000008,
    DOT11_AUTH_ALGO_WPA3_SAE         = 0x00000009,
    DOT11_AUTH_ALGO_OWE              = 0x0000000a,
    DOT11_AUTH_ALGO_WPA3_ENT         = 0x0000000b,
    DOT11_AUTH_ALGO_IHV_START        = 0x80000000,
    DOT11_AUTH_ALGO_IHV_END          = 0xffffffff,
}

alias DOT11_CIPHER_ALGORITHM = int;
enum : int
{
    DOT11_CIPHER_ALGO_NONE          = 0x00000000,
    DOT11_CIPHER_ALGO_WEP40         = 0x00000001,
    DOT11_CIPHER_ALGO_TKIP          = 0x00000002,
    DOT11_CIPHER_ALGO_CCMP          = 0x00000004,
    DOT11_CIPHER_ALGO_WEP104        = 0x00000005,
    DOT11_CIPHER_ALGO_BIP           = 0x00000006,
    DOT11_CIPHER_ALGO_GCMP          = 0x00000008,
    DOT11_CIPHER_ALGO_GCMP_256      = 0x00000009,
    DOT11_CIPHER_ALGO_CCMP_256      = 0x0000000a,
    DOT11_CIPHER_ALGO_BIP_GMAC_128  = 0x0000000b,
    DOT11_CIPHER_ALGO_BIP_GMAC_256  = 0x0000000c,
    DOT11_CIPHER_ALGO_BIP_CMAC_256  = 0x0000000d,
    DOT11_CIPHER_ALGO_WPA_USE_GROUP = 0x00000100,
    DOT11_CIPHER_ALGO_RSN_USE_GROUP = 0x00000100,
    DOT11_CIPHER_ALGO_WEP           = 0x00000101,
    DOT11_CIPHER_ALGO_IHV_START     = 0x80000000,
    DOT11_CIPHER_ALGO_IHV_END       = 0xffffffff,
}

struct DOT11_AUTH_CIPHER_PAIR
{
    DOT11_AUTH_ALGORITHM AuthAlgoId;
    DOT11_CIPHER_ALGORITHM CipherAlgoId;
}
struct DOT11_OI
{
    ushort OILength;
    ubyte[5] OI;
}
struct DOT11_ACCESSNETWORKOPTIONS
{
    ubyte AccessNetworkType;
    ubyte Internet;
    ubyte ASRA;
    ubyte ESR;
    ubyte UESA;
}
struct DOT11_VENUEINFO
{
    ubyte VenueGroup;
    ubyte VenueType;
}
struct DOT11_BSSID_LIST
{
    NDIS_OBJECT_HEADER Header;
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    ubyte[6] BSSIDs;
}
alias DOT11_PHY_TYPE = int;
enum : int
{
    dot11_phy_type_unknown    = 0x00000000,
    dot11_phy_type_any        = 0x00000000,
    dot11_phy_type_fhss       = 0x00000001,
    dot11_phy_type_dsss       = 0x00000002,
    dot11_phy_type_irbaseband = 0x00000003,
    dot11_phy_type_ofdm       = 0x00000004,
    dot11_phy_type_hrdsss     = 0x00000005,
    dot11_phy_type_erp        = 0x00000006,
    dot11_phy_type_ht         = 0x00000007,
    dot11_phy_type_vht        = 0x00000008,
    dot11_phy_type_dmg        = 0x00000009,
    dot11_phy_type_he         = 0x0000000a,
    dot11_phy_type_eht        = 0x0000000b,
    dot11_phy_type_IHV_start  = 0x80000000,
    dot11_phy_type_IHV_end    = 0xffffffff,
}

struct DOT11_RATE_SET
{
    uint uRateSetLength;
    ubyte[126] ucRateSet;
}
struct DOT11_WFD_SESSION_INFO
{
    ushort uSessionInfoLength;
    ubyte[144] ucSessionInfo;
}
struct DOT11_OFFLOAD_CAPABILITY
{
    uint uReserved;
    uint uFlags;
    uint uSupportedWEPAlgorithms;
    uint uNumOfReplayWindows;
    uint uMaxWEPKeyMappingLength;
    uint uSupportedAuthAlgorithms;
    uint uMaxAuthKeyMappingLength;
}
struct DOT11_CURRENT_OFFLOAD_CAPABILITY
{
    uint uReserved;
    uint uFlags;
}
alias DOT11_OFFLOAD_TYPE = int;
enum : int
{
    dot11_offload_type_wep  = 0x00000001,
    dot11_offload_type_auth = 0x00000002,
}

struct DOT11_IV48_COUNTER
{
    uint uIV32Counter;
    ushort usIV16Counter;
}
struct DOT11_WEP_OFFLOAD
{
    uint uReserved;
    HANDLE hOffloadContext;
    HANDLE hOffload;
    DOT11_OFFLOAD_TYPE dot11OffloadType;
    uint dwAlgorithm;
    BOOLEAN bRowIsOutbound;
    BOOLEAN bUseDefault;
    uint uFlags;
    ubyte[6] ucMacAddress;
    uint uNumOfRWsOnPeer;
    uint uNumOfRWsOnMe;
    DOT11_IV48_COUNTER[16] dot11IV48Counters;
    ushort[16] usDot11RWBitMaps;
    ushort usKeyLength;
    ubyte[1] ucKey;
}
struct DOT11_WEP_UPLOAD
{
    uint uReserved;
    DOT11_OFFLOAD_TYPE dot11OffloadType;
    HANDLE hOffload;
    uint uNumOfRWsUsed;
    DOT11_IV48_COUNTER[16] dot11IV48Counters;
    ushort[16] usDot11RWBitMaps;
}
alias DOT11_KEY_DIRECTION = int;
enum : int
{
    dot11_key_direction_both     = 0x00000001,
    dot11_key_direction_inbound  = 0x00000002,
    dot11_key_direction_outbound = 0x00000003,
}

struct DOT11_DEFAULT_WEP_OFFLOAD
{
    uint uReserved;
    HANDLE hOffloadContext;
    HANDLE hOffload;
    uint dwIndex;
    DOT11_OFFLOAD_TYPE dot11OffloadType;
    uint dwAlgorithm;
    uint uFlags;
    DOT11_KEY_DIRECTION dot11KeyDirection;
    ubyte[6] ucMacAddress;
    uint uNumOfRWsOnMe;
    DOT11_IV48_COUNTER[16] dot11IV48Counters;
    ushort[16] usDot11RWBitMaps;
    ushort usKeyLength;
    ubyte[1] ucKey;
}
struct DOT11_DEFAULT_WEP_UPLOAD
{
    uint uReserved;
    DOT11_OFFLOAD_TYPE dot11OffloadType;
    HANDLE hOffload;
    uint uNumOfRWsUsed;
    DOT11_IV48_COUNTER[16] dot11IV48Counters;
    ushort[16] usDot11RWBitMaps;
}
struct DOT11_OPERATION_MODE_CAPABILITY
{
    uint uReserved;
    uint uMajorVersion;
    uint uMinorVersion;
    uint uNumOfTXBuffers;
    uint uNumOfRXBuffers;
    uint uOpModeCapability;
}
struct DOT11_CURRENT_OPERATION_MODE
{
    uint uReserved;
    uint uCurrentOpMode;
}
alias DOT11_SCAN_TYPE = int;
enum : int
{
    dot11_scan_type_active  = 0x00000001,
    dot11_scan_type_passive = 0x00000002,
    dot11_scan_type_auto    = 0x00000003,
    dot11_scan_type_forced  = 0x80000000,
}

struct DOT11_SCAN_REQUEST
{
    DOT11_BSS_TYPE dot11BSSType;
    ubyte[6] dot11BSSID;
    DOT11_SSID dot11SSID;
    DOT11_SCAN_TYPE dot11ScanType;
    BOOLEAN bRestrictedScan;
    BOOLEAN bUseRequestIE;
    uint uRequestIDsOffset;
    uint uNumOfRequestIDs;
    uint uPhyTypesOffset;
    uint uNumOfPhyTypes;
    uint uIEsOffset;
    uint uIEsLength;
    ubyte[1] ucBuffer;
}
alias CH_DESCRIPTION_TYPE = int;
enum : int
{
    ch_description_type_logical          = 0x00000001,
    ch_description_type_center_frequency = 0x00000002,
    ch_description_type_phy_specific     = 0x00000003,
}

struct DOT11_PHY_TYPE_INFO
{
    DOT11_PHY_TYPE dot11PhyType;
    BOOLEAN bUseParameters;
    uint uProbeDelay;
    uint uMinChannelTime;
    uint uMaxChannelTime;
    CH_DESCRIPTION_TYPE ChDescriptionType;
    uint uChannelListSize;
    ubyte[1] ucChannelListBuffer;
}
struct DOT11_SCAN_REQUEST_V2
{
    DOT11_BSS_TYPE dot11BSSType;
    ubyte[6] dot11BSSID;
    DOT11_SCAN_TYPE dot11ScanType;
    BOOLEAN bRestrictedScan;
    uint udot11SSIDsOffset;
    uint uNumOfdot11SSIDs;
    BOOLEAN bUseRequestIE;
    uint uRequestIDsOffset;
    uint uNumOfRequestIDs;
    uint uPhyTypeInfosOffset;
    uint uNumOfPhyTypeInfos;
    uint uIEsOffset;
    uint uIEsLength;
    ubyte[1] ucBuffer;
}
struct DOT11_PHY_TYPE_LIST
{
    NDIS_OBJECT_HEADER Header;
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_PHY_TYPE[1] dot11PhyType;
}
struct DOT11_BSS_DESCRIPTION
{
    uint uReserved;
    ubyte[6] dot11BSSID;
    DOT11_BSS_TYPE dot11BSSType;
    ushort usBeaconPeriod;
    ulong ullTimestamp;
    ushort usCapabilityInformation;
    uint uBufferLength;
    ubyte[1] ucBuffer;
}
struct DOT11_JOIN_REQUEST
{
    uint uJoinFailureTimeout;
    DOT11_RATE_SET OperationalRateSet;
    uint uChCenterFrequency;
    DOT11_BSS_DESCRIPTION dot11BSSDescription;
}
struct DOT11_START_REQUEST
{
    uint uStartFailureTimeout;
    DOT11_RATE_SET OperationalRateSet;
    uint uChCenterFrequency;
    DOT11_BSS_DESCRIPTION dot11BSSDescription;
}
alias DOT11_UPDATE_IE_OP = int;
enum : int
{
    dot11_update_ie_op_create_replace = 0x00000001,
    dot11_update_ie_op_delete         = 0x00000002,
}

struct DOT11_UPDATE_IE
{
    DOT11_UPDATE_IE_OP dot11UpdateIEOp;
    uint uBufferLength;
    ubyte[1] ucBuffer;
}
alias DOT11_RESET_TYPE = int;
enum : int
{
    dot11_reset_type_phy         = 0x00000001,
    dot11_reset_type_mac         = 0x00000002,
    dot11_reset_type_phy_and_mac = 0x00000003,
}

struct DOT11_RESET_REQUEST
{
    DOT11_RESET_TYPE dot11ResetType;
    ubyte[6] dot11MacAddress;
    BOOLEAN bSetDefaultMIB;
}
struct DOT11_OPTIONAL_CAPABILITY
{
    uint uReserved;
    BOOLEAN bDot11PCF;
    BOOLEAN bDot11PCFMPDUTransferToPC;
    BOOLEAN bStrictlyOrderedServiceClass;
}
struct DOT11_CURRENT_OPTIONAL_CAPABILITY
{
    uint uReserved;
    BOOLEAN bDot11CFPollable;
    BOOLEAN bDot11PCF;
    BOOLEAN bDot11PCFMPDUTransferToPC;
    BOOLEAN bStrictlyOrderedServiceClass;
}
alias DOT11_POWER_MODE = int;
enum : int
{
    dot11_power_mode_unknown   = 0x00000000,
    dot11_power_mode_active    = 0x00000001,
    dot11_power_mode_powersave = 0x00000002,
}

struct DOT11_POWER_MGMT_MODE
{
    DOT11_POWER_MODE dot11PowerMode;
    uint uPowerSaveLevel;
    ushort usListenInterval;
    ushort usAID;
    BOOLEAN bReceiveDTIMs;
}
struct DOT11_COUNTERS_ENTRY
{
    uint uTransmittedFragmentCount;
    uint uMulticastTransmittedFrameCount;
    uint uFailedCount;
    uint uRetryCount;
    uint uMultipleRetryCount;
    uint uFrameDuplicateCount;
    uint uRTSSuccessCount;
    uint uRTSFailureCount;
    uint uACKFailureCount;
    uint uReceivedFragmentCount;
    uint uMulticastReceivedFrameCount;
    uint uFCSErrorCount;
    uint uTransmittedFrameCount;
}
struct DOT11_SUPPORTED_PHY_TYPES
{
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_PHY_TYPE[1] dot11PHYType;
}
alias DOT11_TEMP_TYPE = int;
enum : int
{
    dot11_temp_type_unknown = 0x00000000,
    dot11_temp_type_1       = 0x00000001,
    dot11_temp_type_2       = 0x00000002,
}

alias DOT11_DIVERSITY_SUPPORT = int;
enum : int
{
    dot11_diversity_support_unknown      = 0x00000000,
    dot11_diversity_support_fixedlist    = 0x00000001,
    dot11_diversity_support_notsupported = 0x00000002,
    dot11_diversity_support_dynamic      = 0x00000003,
}

struct DOT11_SUPPORTED_POWER_LEVELS
{
    uint uNumOfSupportedPowerLevels;
    uint[8] uTxPowerLevelValues;
}
struct DOT11_REG_DOMAIN_VALUE
{
    uint uRegDomainsSupportIndex;
    uint uRegDomainsSupportValue;
}
struct DOT11_REG_DOMAINS_SUPPORT_VALUE
{
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_REG_DOMAIN_VALUE[1] dot11RegDomainValue;
}
struct DOT11_SUPPORTED_ANTENNA
{
    uint uAntennaListIndex;
    BOOLEAN bSupportedAntenna;
}
struct DOT11_SUPPORTED_ANTENNA_LIST
{
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_SUPPORTED_ANTENNA[1] dot11SupportedAntenna;
}
struct DOT11_DIVERSITY_SELECTION_RX
{
    uint uAntennaListIndex;
    BOOLEAN bDiversitySelectionRX;
}
struct DOT11_DIVERSITY_SELECTION_RX_LIST
{
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_DIVERSITY_SELECTION_RX[1] dot11DiversitySelectionRx;
}
struct DOT11_SUPPORTED_DATA_RATES_VALUE
{
    ubyte[8] ucSupportedTxDataRatesValue;
    ubyte[8] ucSupportedRxDataRatesValue;
}
struct DOT11_SUPPORTED_DATA_RATES_VALUE_V2
{
    ubyte[255] ucSupportedTxDataRatesValue;
    ubyte[255] ucSupportedRxDataRatesValue;
}
struct DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY
{
    uint uMultiDomainCapabilityIndex;
    uint uFirstChannelNumber;
    uint uNumberOfChannels;
    int lMaximumTransmitPowerLevel;
}
struct DOT11_MD_CAPABILITY_ENTRY_LIST
{
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY[1] dot11MDCapabilityEntry;
}
alias DOT11_HOP_ALGO_ADOPTED = int;
enum : int
{
    dot11_hop_algo_current   = 0x00000000,
    dot11_hop_algo_hop_index = 0x00000001,
    dot11_hop_algo_hcc       = 0x00000002,
}

struct DOT11_HOPPING_PATTERN_ENTRY
{
    uint uHoppingPatternIndex;
    uint uRandomTableFieldNumber;
}
struct DOT11_HOPPING_PATTERN_ENTRY_LIST
{
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_HOPPING_PATTERN_ENTRY[1] dot11HoppingPatternEntry;
}
struct DOT11_WPA_TSC
{
    uint uReserved;
    DOT11_OFFLOAD_TYPE dot11OffloadType;
    HANDLE hOffload;
    DOT11_IV48_COUNTER dot11IV48Counter;
}
struct DOT11_RSSI_RANGE
{
    DOT11_PHY_TYPE dot11PhyType;
    uint uRSSIMin;
    uint uRSSIMax;
}
struct DOT11_NIC_SPECIFIC_EXTENSION
{
    uint uBufferLength;
    uint uTotalBufferLength;
    ubyte[1] ucBuffer;
}
struct DOT11_AP_JOIN_REQUEST
{
    uint uJoinFailureTimeout;
    DOT11_RATE_SET OperationalRateSet;
    uint uChCenterFrequency;
    DOT11_BSS_DESCRIPTION dot11BSSDescription;
}
struct DOT11_RECV_SENSITIVITY
{
    ubyte ucDataRate;
    int lRSSIMin;
    int lRSSIMax;
}
struct DOT11_RECV_SENSITIVITY_LIST
{
    union
    {
        DOT11_PHY_TYPE dot11PhyType;
        uint uPhyId;
    }
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_RECV_SENSITIVITY[1] dot11RecvSensitivity;
}
alias DOT11_AC_PARAM = int;
enum : int
{
    dot11_AC_param_BE  = 0x00000000,
    dot11_AC_param_BK  = 0x00000001,
    dot11_AC_param_VI  = 0x00000002,
    dot11_AC_param_VO  = 0x00000003,
    dot11_AC_param_max = 0x00000004,
}

struct DOT11_WME_AC_PARAMETERS
{
    ubyte ucAccessCategoryIndex;
    ubyte ucAIFSN;
    ubyte ucECWmin;
    ubyte ucECWmax;
    ushort usTXOPLimit;
}
struct DOT11_WME_AC_PARAMETERS_LIST
{
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_WME_AC_PARAMETERS[1] dot11WMEACParameters;
}
struct DOT11_WME_UPDATE_IE
{
    uint uParamElemMinBeaconIntervals;
    uint uWMEInfoElemOffset;
    uint uWMEInfoElemLength;
    uint uWMEParamElemOffset;
    uint uWMEParamElemLength;
    ubyte[1] ucBuffer;
}
struct DOT11_QOS_TX_DURATION
{
    uint uNominalMSDUSize;
    uint uMinPHYRate;
    uint uDuration;
}
struct DOT11_QOS_TX_MEDIUM_TIME
{
    ubyte[6] dot11PeerAddress;
    ubyte ucQoSPriority;
    uint uMediumTimeAdmited;
}
struct DOT11_SUPPORTED_OFDM_FREQUENCY
{
    uint uCenterFrequency;
}
struct DOT11_SUPPORTED_OFDM_FREQUENCY_LIST
{
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_SUPPORTED_OFDM_FREQUENCY[1] dot11SupportedOFDMFrequency;
}
struct DOT11_SUPPORTED_DSSS_CHANNEL
{
    uint uChannel;
}
struct DOT11_SUPPORTED_DSSS_CHANNEL_LIST
{
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_SUPPORTED_DSSS_CHANNEL[1] dot11SupportedDSSSChannel;
}
struct DOT11_BYTE_ARRAY
{
    NDIS_OBJECT_HEADER Header;
    uint uNumOfBytes;
    uint uTotalNumOfBytes;
    ubyte[1] ucBuffer;
}
union DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO
{
    uint uChCenterFrequency;
    struct _FHSS_e__Struct
    {
        uint uHopPattern;
        uint uHopSet;
        uint uDwellTime;
    }
}
struct DOT11_BSS_ENTRY
{
    uint uPhyId;
    DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO PhySpecificInfo;
    ubyte[6] dot11BSSID;
    DOT11_BSS_TYPE dot11BSSType;
    int lRSSI;
    uint uLinkQuality;
    BOOLEAN bInRegDomain;
    ushort usBeaconPeriod;
    ulong ullTimestamp;
    ulong ullHostTimestamp;
    ushort usCapabilityInformation;
    uint uBufferLength;
    ubyte[1] ucBuffer;
}
struct DOT11_SSID_LIST
{
    NDIS_OBJECT_HEADER Header;
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_SSID[1] SSIDs;
}
struct DOT11_MAC_ADDRESS_LIST
{
    NDIS_OBJECT_HEADER Header;
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    ubyte[6] MacAddrs;
}
struct DOT11_PMKID_ENTRY
{
    ubyte[6] BSSID;
    ubyte[16] PMKID;
    uint uFlags;
}
struct DOT11_PMKID_LIST
{
    NDIS_OBJECT_HEADER Header;
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_PMKID_ENTRY[1] PMKIDs;
}
struct DOT11_PHY_FRAME_STATISTICS
{
    ulong ullTransmittedFrameCount;
    ulong ullMulticastTransmittedFrameCount;
    ulong ullFailedCount;
    ulong ullRetryCount;
    ulong ullMultipleRetryCount;
    ulong ullMaxTXLifetimeExceededCount;
    ulong ullTransmittedFragmentCount;
    ulong ullRTSSuccessCount;
    ulong ullRTSFailureCount;
    ulong ullACKFailureCount;
    ulong ullReceivedFrameCount;
    ulong ullMulticastReceivedFrameCount;
    ulong ullPromiscuousReceivedFrameCount;
    ulong ullMaxRXLifetimeExceededCount;
    ulong ullFrameDuplicateCount;
    ulong ullReceivedFragmentCount;
    ulong ullPromiscuousReceivedFragmentCount;
    ulong ullFCSErrorCount;
}
struct DOT11_MAC_FRAME_STATISTICS
{
    ulong ullTransmittedFrameCount;
    ulong ullReceivedFrameCount;
    ulong ullTransmittedFailureFrameCount;
    ulong ullReceivedFailureFrameCount;
    ulong ullWEPExcludedCount;
    ulong ullTKIPLocalMICFailures;
    ulong ullTKIPReplays;
    ulong ullTKIPICVErrorCount;
    ulong ullCCMPReplays;
    ulong ullCCMPDecryptErrors;
    ulong ullWEPUndecryptableCount;
    ulong ullWEPICVErrorCount;
    ulong ullDecryptSuccessCount;
    ulong ullDecryptFailureCount;
}
struct DOT11_STATISTICS
{
    NDIS_OBJECT_HEADER Header;
    ulong ullFourWayHandshakeFailures;
    ulong ullTKIPCounterMeasuresInvoked;
    ulong ullReserved;
    DOT11_MAC_FRAME_STATISTICS MacUcastCounters;
    DOT11_MAC_FRAME_STATISTICS MacMcastCounters;
    DOT11_PHY_FRAME_STATISTICS[1] PhyCounters;
}
struct DOT11_PRIVACY_EXEMPTION
{
    ushort usEtherType;
    ushort usExemptionActionType;
    ushort usExemptionPacketType;
}
struct DOT11_PRIVACY_EXEMPTION_LIST
{
    NDIS_OBJECT_HEADER Header;
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_PRIVACY_EXEMPTION[1] PrivacyExemptionEntries;
}
struct DOT11_AUTH_ALGORITHM_LIST
{
    NDIS_OBJECT_HEADER Header;
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_AUTH_ALGORITHM[1] AlgorithmIds;
}
struct DOT11_AUTH_CIPHER_PAIR_LIST
{
    NDIS_OBJECT_HEADER Header;
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_AUTH_CIPHER_PAIR[1] AuthCipherPairs;
}
struct DOT11_CIPHER_ALGORITHM_LIST
{
    NDIS_OBJECT_HEADER Header;
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_CIPHER_ALGORITHM[1] AlgorithmIds;
}
struct DOT11_CIPHER_DEFAULT_KEY_VALUE
{
    NDIS_OBJECT_HEADER Header;
    uint uKeyIndex;
    DOT11_CIPHER_ALGORITHM AlgorithmId;
    ubyte[6] MacAddr;
    BOOLEAN bDelete;
    BOOLEAN bStatic;
    ushort usKeyLength;
    ubyte[1] ucKey;
}
struct DOT11_KEY_ALGO_TKIP_MIC
{
    ubyte[6] ucIV48Counter;
    uint ulTKIPKeyLength;
    uint ulMICKeyLength;
    ubyte[1] ucTKIPMICKeys;
}
struct DOT11_KEY_ALGO_CCMP
{
    ubyte[6] ucIV48Counter;
    uint ulCCMPKeyLength;
    ubyte[1] ucCCMPKey;
}
struct DOT11_KEY_ALGO_GCMP
{
    ubyte[6] ucIV48Counter;
    uint ulGCMPKeyLength;
    ubyte[1] ucGCMPKey;
}
struct DOT11_KEY_ALGO_GCMP_256
{
    ubyte[6] ucIV48Counter;
    uint ulGCMP256KeyLength;
    ubyte[1] ucGCMP256Key;
}
struct DOT11_KEY_ALGO_BIP
{
    ubyte[6] ucIPN;
    uint ulBIPKeyLength;
    ubyte[1] ucBIPKey;
}
struct DOT11_KEY_ALGO_BIP_GMAC_256
{
    ubyte[6] ucIPN;
    uint ulBIPGmac256KeyLength;
    ubyte[1] ucBIPGmac256Key;
}
alias DOT11_DIRECTION = int;
enum : int
{
    DOT11_DIR_INBOUND  = 0x00000001,
    DOT11_DIR_OUTBOUND = 0x00000002,
    DOT11_DIR_BOTH     = 0x00000003,
}

struct DOT11_CIPHER_KEY_MAPPING_KEY_VALUE
{
    ubyte[6] PeerMacAddr;
    DOT11_CIPHER_ALGORITHM AlgorithmId;
    DOT11_DIRECTION Direction;
    BOOLEAN bDelete;
    BOOLEAN bStatic;
    ushort usKeyLength;
    ubyte[1] ucKey;
}
alias DOT11_ASSOCIATION_STATE = int;
enum : int
{
    dot11_assoc_state_zero           = 0x00000000,
    dot11_assoc_state_unauth_unassoc = 0x00000001,
    dot11_assoc_state_auth_unassoc   = 0x00000002,
    dot11_assoc_state_auth_assoc     = 0x00000003,
}

struct DOT11_ASSOCIATION_INFO_EX
{
    ubyte[6] PeerMacAddress;
    ubyte[6] BSSID;
    ushort usCapabilityInformation;
    ushort usListenInterval;
    ubyte[255] ucPeerSupportedRates;
    ushort usAssociationID;
    DOT11_ASSOCIATION_STATE dot11AssociationState;
    DOT11_POWER_MODE dot11PowerMode;
    long liAssociationUpTime;
    ulong ullNumOfTxPacketSuccesses;
    ulong ullNumOfTxPacketFailures;
    ulong ullNumOfRxPacketSuccesses;
    ulong ullNumOfRxPacketFailures;
}
struct DOT11_ASSOCIATION_INFO_LIST
{
    NDIS_OBJECT_HEADER Header;
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_ASSOCIATION_INFO_EX[1] dot11AssocInfo;
}
struct DOT11_PHY_ID_LIST
{
    NDIS_OBJECT_HEADER Header;
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    uint[1] dot11PhyId;
}
struct DOT11_EXTSTA_CAPABILITY
{
    NDIS_OBJECT_HEADER Header;
    uint uScanSSIDListSize;
    uint uDesiredBSSIDListSize;
    uint uDesiredSSIDListSize;
    uint uExcludedMacAddressListSize;
    uint uPrivacyExemptionListSize;
    uint uKeyMappingTableSize;
    uint uDefaultKeyTableSize;
    uint uWEPKeyValueMaxLength;
    uint uPMKIDCacheSize;
    uint uMaxNumPerSTADefaultKeyTables;
}
struct DOT11_DATA_RATE_MAPPING_ENTRY
{
    ubyte ucDataRateIndex;
    ubyte ucDataRateFlag;
    ushort usDataRateValue;
}
struct DOT11_DATA_RATE_MAPPING_TABLE
{
    NDIS_OBJECT_HEADER Header;
    uint uDataRateMappingLength;
    DOT11_DATA_RATE_MAPPING_ENTRY[126] DataRateMappingEntries;
}
struct DOT11_COUNTRY_OR_REGION_STRING_LIST
{
    NDIS_OBJECT_HEADER Header;
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    ubyte[3] CountryOrRegionStrings;
}
struct DOT11_PORT_STATE_NOTIFICATION
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] PeerMac;
    BOOLEAN bOpen;
}
struct DOT11_IBSS_PARAMS
{
    NDIS_OBJECT_HEADER Header;
    BOOLEAN bJoinOnly;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_QOS_PARAMS
{
    NDIS_OBJECT_HEADER Header;
    ubyte ucEnabledQoSProtocolFlags;
}
struct DOT11_ASSOCIATION_PARAMS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] BSSID;
    uint uAssocRequestIEsOffset;
    uint uAssocRequestIEsLength;
}
struct DOT11_FRAGMENT_DESCRIPTOR
{
    uint uOffset;
    uint uLength;
}
struct DOT11_PER_MSDU_COUNTERS
{
    uint uTransmittedFragmentCount;
    uint uRetryCount;
    uint uRTSSuccessCount;
    uint uRTSFailureCount;
    uint uACKFailureCount;
}
struct DOT11_HRDSSS_PHY_ATTRIBUTES
{
    BOOLEAN bShortPreambleOptionImplemented;
    BOOLEAN bPBCCOptionImplemented;
    BOOLEAN bChannelAgilityPresent;
    uint uHRCCAModeSupported;
}
struct DOT11_OFDM_PHY_ATTRIBUTES
{
    uint uFrequencyBandsSupported;
}
struct DOT11_ERP_PHY_ATTRIBUTES
{
    DOT11_HRDSSS_PHY_ATTRIBUTES HRDSSSAttributes;
    BOOLEAN bERPPBCCOptionImplemented;
    BOOLEAN bDSSSOFDMOptionImplemented;
    BOOLEAN bShortSlotTimeOptionImplemented;
}
struct DOT11_PHY_ATTRIBUTES
{
    NDIS_OBJECT_HEADER Header;
    DOT11_PHY_TYPE PhyType;
    BOOLEAN bHardwarePhyState;
    BOOLEAN bSoftwarePhyState;
    BOOLEAN bCFPollable;
    uint uMPDUMaxLength;
    DOT11_TEMP_TYPE TempType;
    DOT11_DIVERSITY_SUPPORT DiversitySupport;
    union _PhySpecificAttributes_e__Union
    {
        DOT11_HRDSSS_PHY_ATTRIBUTES HRDSSSAttributes;
        DOT11_OFDM_PHY_ATTRIBUTES OFDMAttributes;
        DOT11_ERP_PHY_ATTRIBUTES ERPAttributes;
    }
    uint uNumberSupportedPowerLevels;
    uint[8] TxPowerLevels;
    uint uNumDataRateMappingEntries;
    DOT11_DATA_RATE_MAPPING_ENTRY[126] DataRateMappingEntries;
    DOT11_SUPPORTED_DATA_RATES_VALUE_V2 SupportedDataRatesValue;
}
struct DOT11_EXTSTA_ATTRIBUTES
{
    NDIS_OBJECT_HEADER Header;
    uint uScanSSIDListSize;
    uint uDesiredBSSIDListSize;
    uint uDesiredSSIDListSize;
    uint uExcludedMacAddressListSize;
    uint uPrivacyExemptionListSize;
    uint uKeyMappingTableSize;
    uint uDefaultKeyTableSize;
    uint uWEPKeyValueMaxLength;
    uint uPMKIDCacheSize;
    uint uMaxNumPerSTADefaultKeyTables;
    BOOLEAN bStrictlyOrderedServiceClassImplemented;
    ubyte ucSupportedQoSProtocolFlags;
    BOOLEAN bSafeModeImplemented;
    uint uNumSupportedCountryOrRegionStrings;
    ubyte* pSupportedCountryOrRegionStrings;
    uint uInfraNumSupportedUcastAlgoPairs;
    DOT11_AUTH_CIPHER_PAIR* pInfraSupportedUcastAlgoPairs;
    uint uInfraNumSupportedMcastAlgoPairs;
    DOT11_AUTH_CIPHER_PAIR* pInfraSupportedMcastAlgoPairs;
    uint uAdhocNumSupportedUcastAlgoPairs;
    DOT11_AUTH_CIPHER_PAIR* pAdhocSupportedUcastAlgoPairs;
    uint uAdhocNumSupportedMcastAlgoPairs;
    DOT11_AUTH_CIPHER_PAIR* pAdhocSupportedMcastAlgoPairs;
    BOOLEAN bAutoPowerSaveMode;
    uint uMaxNetworkOffloadListSize;
    BOOLEAN bMFPCapable;
    uint uInfraNumSupportedMcastMgmtAlgoPairs;
    DOT11_AUTH_CIPHER_PAIR* pInfraSupportedMcastMgmtAlgoPairs;
    BOOLEAN bNeighborReportSupported;
    BOOLEAN bAPChannelReportSupported;
    BOOLEAN bActionFramesSupported;
    BOOLEAN bANQPQueryOffloadSupported;
    BOOLEAN bHESSIDConnectionSupported;
}
struct DOT11_RECV_EXTENSION_INFO
{
    uint uVersion;
    void* pvReserved;
    DOT11_PHY_TYPE dot11PhyType;
    uint uChCenterFrequency;
    int lRSSI;
    int lRSSIMin;
    int lRSSIMax;
    uint uRSSI;
    ubyte ucPriority;
    ubyte ucDataRate;
    ubyte[6] ucPeerMacAddress;
    uint dwExtendedStatus;
    HANDLE hWEPOffloadContext;
    HANDLE hAuthOffloadContext;
    ushort usWEPAppliedMask;
    ushort usWPAMSDUPriority;
    DOT11_IV48_COUNTER dot11LowestIV48Counter;
    ushort usDot11LeftRWBitMap;
    DOT11_IV48_COUNTER dot11HighestIV48Counter;
    ushort usDot11RightRWBitMap;
    ushort usNumberOfMPDUsReceived;
    ushort usNumberOfFragments;
    void*[1] pNdisPackets;
}
struct DOT11_RECV_EXTENSION_INFO_V2
{
    uint uVersion;
    void* pvReserved;
    DOT11_PHY_TYPE dot11PhyType;
    uint uChCenterFrequency;
    int lRSSI;
    uint uRSSI;
    ubyte ucPriority;
    ubyte ucDataRate;
    ubyte[6] ucPeerMacAddress;
    uint dwExtendedStatus;
    HANDLE hWEPOffloadContext;
    HANDLE hAuthOffloadContext;
    ushort usWEPAppliedMask;
    ushort usWPAMSDUPriority;
    DOT11_IV48_COUNTER dot11LowestIV48Counter;
    ushort usDot11LeftRWBitMap;
    DOT11_IV48_COUNTER dot11HighestIV48Counter;
    ushort usDot11RightRWBitMap;
    ushort usNumberOfMPDUsReceived;
    ushort usNumberOfFragments;
    void*[1] pNdisPackets;
}
struct DOT11_STATUS_INDICATION
{
    uint uStatusType;
    int ndisStatus;
}
struct DOT11_MPDU_MAX_LENGTH_INDICATION
{
    NDIS_OBJECT_HEADER Header;
    uint uPhyId;
    uint uMPDUMaxLength;
}
struct DOT11_ASSOCIATION_START_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] MacAddr;
    DOT11_SSID SSID;
    uint uIHVDataOffset;
    uint uIHVDataSize;
}
struct DOT11_ENCAP_ENTRY
{
    ushort usEtherType;
    ushort usEncapType;
}
alias DOT11_DS_INFO = int;
enum : int
{
    DOT11_DS_CHANGED   = 0x00000000,
    DOT11_DS_UNCHANGED = 0x00000001,
    DOT11_DS_UNKNOWN   = 0x00000002,
}

struct DOT11_ASSOCIATION_COMPLETION_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] MacAddr;
    uint uStatus;
    BOOLEAN bReAssocReq;
    BOOLEAN bReAssocResp;
    uint uAssocReqOffset;
    uint uAssocReqSize;
    uint uAssocRespOffset;
    uint uAssocRespSize;
    uint uBeaconOffset;
    uint uBeaconSize;
    uint uIHVDataOffset;
    uint uIHVDataSize;
    DOT11_AUTH_ALGORITHM AuthAlgo;
    DOT11_CIPHER_ALGORITHM UnicastCipher;
    DOT11_CIPHER_ALGORITHM MulticastCipher;
    uint uActivePhyListOffset;
    uint uActivePhyListSize;
    BOOLEAN bFourAddressSupported;
    BOOLEAN bPortAuthorized;
    ubyte ucActiveQoSProtocol;
    DOT11_DS_INFO DSInfo;
    uint uEncapTableOffset;
    uint uEncapTableSize;
    DOT11_CIPHER_ALGORITHM MulticastMgmtCipher;
    uint uAssocComebackTime;
}
struct DOT11_CONNECTION_START_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    DOT11_BSS_TYPE BSSType;
    ubyte[6] AdhocBSSID;
    DOT11_SSID AdhocSSID;
}
struct DOT11_CONNECTION_COMPLETION_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    uint uStatus;
}
struct DOT11_ROAMING_START_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] AdhocBSSID;
    DOT11_SSID AdhocSSID;
    uint uRoamingReason;
}
struct DOT11_ROAMING_COMPLETION_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    uint uStatus;
}
struct DOT11_DISASSOCIATION_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] MacAddr;
    uint uReason;
    uint uIHVDataOffset;
    uint uIHVDataSize;
}
struct DOT11_TKIPMIC_FAILURE_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    BOOLEAN bDefaultKeyFailure;
    uint uKeyIndex;
    ubyte[6] PeerMac;
}
struct DOT11_PMKID_CANDIDATE_LIST_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    uint uCandidateListSize;
    uint uCandidateListOffset;
}
struct DOT11_BSSID_CANDIDATE
{
    ubyte[6] BSSID;
    uint uFlags;
}
struct DOT11_PHY_STATE_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    uint uPhyId;
    BOOLEAN bHardwarePhyState;
    BOOLEAN bSoftwarePhyState;
}
struct DOT11_LINK_QUALITY_ENTRY
{
    ubyte[6] PeerMacAddr;
    ubyte ucLinkQuality;
}
struct DOT11_LINK_QUALITY_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    uint uLinkQualityListSize;
    uint uLinkQualityListOffset;
}
struct DOT11_EXTSTA_SEND_CONTEXT
{
    NDIS_OBJECT_HEADER Header;
    ushort usExemptionActionType;
    uint uPhyId;
    uint uDelayedSleepValue;
    void* pvMediaSpecificInfo;
    uint uSendFlags;
}
struct DOT11_EXTSTA_RECV_CONTEXT
{
    NDIS_OBJECT_HEADER Header;
    uint uReceiveFlags;
    uint uPhyId;
    uint uChCenterFrequency;
    ushort usNumberOfMPDUsReceived;
    int lRSSI;
    ubyte ucDataRate;
    uint uSizeMediaSpecificInfo;
    void* pvMediaSpecificInfo;
    ulong ullTimestamp;
}
struct DOT11_EXTAP_ATTRIBUTES
{
    NDIS_OBJECT_HEADER Header;
    uint uScanSSIDListSize;
    uint uDesiredSSIDListSize;
    uint uPrivacyExemptionListSize;
    uint uAssociationTableSize;
    uint uDefaultKeyTableSize;
    uint uWEPKeyValueMaxLength;
    BOOLEAN bStrictlyOrderedServiceClassImplemented;
    uint uNumSupportedCountryOrRegionStrings;
    ubyte* pSupportedCountryOrRegionStrings;
    uint uInfraNumSupportedUcastAlgoPairs;
    DOT11_AUTH_CIPHER_PAIR* pInfraSupportedUcastAlgoPairs;
    uint uInfraNumSupportedMcastAlgoPairs;
    DOT11_AUTH_CIPHER_PAIR* pInfraSupportedMcastAlgoPairs;
}
struct DOT11_INCOMING_ASSOC_STARTED_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] PeerMacAddr;
}
struct DOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] PeerMacAddr;
    BOOLEAN bReAssocReq;
    uint uAssocReqOffset;
    uint uAssocReqSize;
}
struct DOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] PeerMacAddr;
    uint uStatus;
    ubyte ucErrorSource;
    BOOLEAN bReAssocReq;
    BOOLEAN bReAssocResp;
    uint uAssocReqOffset;
    uint uAssocReqSize;
    uint uAssocRespOffset;
    uint uAssocRespSize;
    DOT11_AUTH_ALGORITHM AuthAlgo;
    DOT11_CIPHER_ALGORITHM UnicastCipher;
    DOT11_CIPHER_ALGORITHM MulticastCipher;
    uint uActivePhyListOffset;
    uint uActivePhyListSize;
    uint uBeaconOffset;
    uint uBeaconSize;
}
struct DOT11_STOP_AP_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    uint ulReason;
}
struct DOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    uint ulPhyId;
    union
    {
        uint ulChannel;
        uint ulFrequency;
    }
}
struct DOT11_CAN_SUSTAIN_AP_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    uint ulReason;
}
struct DOT11_AVAILABLE_CHANNEL_LIST
{
    NDIS_OBJECT_HEADER Header;
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    uint[1] uChannelNumber;
}
struct DOT11_AVAILABLE_FREQUENCY_LIST
{
    NDIS_OBJECT_HEADER Header;
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    uint[1] uFrequencyValue;
}
struct DOT11_DISASSOCIATE_PEER_REQUEST
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] PeerMacAddr;
    ushort usReason;
}
struct DOT11_INCOMING_ASSOC_DECISION
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] PeerMacAddr;
    BOOLEAN bAccept;
    ushort usReasonCode;
    uint uAssocResponseIEsOffset;
    uint uAssocResponseIEsLength;
}
struct DOT11_INCOMING_ASSOC_DECISION_V2
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] PeerMacAddr;
    BOOLEAN bAccept;
    ushort usReasonCode;
    uint uAssocResponseIEsOffset;
    uint uAssocResponseIEsLength;
    ubyte WFDStatus;
}
struct DOT11_ADDITIONAL_IE
{
    NDIS_OBJECT_HEADER Header;
    uint uBeaconIEsOffset;
    uint uBeaconIEsLength;
    uint uResponseIEsOffset;
    uint uResponseIEsLength;
}
struct DOT11_PEER_STATISTICS
{
    ulong ullDecryptSuccessCount;
    ulong ullDecryptFailureCount;
    ulong ullTxPacketSuccessCount;
    ulong ullTxPacketFailureCount;
    ulong ullRxPacketSuccessCount;
    ulong ullRxPacketFailureCount;
}
struct DOT11_PEER_INFO
{
    ubyte[6] MacAddress;
    ushort usCapabilityInformation;
    DOT11_AUTH_ALGORITHM AuthAlgo;
    DOT11_CIPHER_ALGORITHM UnicastCipherAlgo;
    DOT11_CIPHER_ALGORITHM MulticastCipherAlgo;
    BOOLEAN bWpsEnabled;
    ushort usListenInterval;
    ubyte[255] ucSupportedRates;
    ushort usAssociationID;
    DOT11_ASSOCIATION_STATE AssociationState;
    DOT11_POWER_MODE PowerMode;
    long liAssociationUpTime;
    DOT11_PEER_STATISTICS Statistics;
}
struct DOT11_PEER_INFO_LIST
{
    NDIS_OBJECT_HEADER Header;
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_PEER_INFO[1] PeerInfo;
}
struct DOT11_VWIFI_COMBINATION
{
    NDIS_OBJECT_HEADER Header;
    uint uNumInfrastructure;
    uint uNumAdhoc;
    uint uNumSoftAP;
}
struct DOT11_VWIFI_COMBINATION_V2
{
    NDIS_OBJECT_HEADER Header;
    uint uNumInfrastructure;
    uint uNumAdhoc;
    uint uNumSoftAP;
    uint uNumVirtualStation;
}
struct DOT11_VWIFI_COMBINATION_V3
{
    NDIS_OBJECT_HEADER Header;
    uint uNumInfrastructure;
    uint uNumAdhoc;
    uint uNumSoftAP;
    uint uNumVirtualStation;
    uint uNumWFDGroup;
}
struct DOT11_VWIFI_ATTRIBUTES
{
    NDIS_OBJECT_HEADER Header;
    uint uTotalNumOfEntries;
    DOT11_VWIFI_COMBINATION[1] Combinations;
}
struct DOT11_MAC_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    uint uOpmodeMask;
}
struct DOT11_MAC_INFO
{
    uint uReserved;
    uint uNdisPortNumber;
    ubyte[6] MacAddr;
}
struct DOT11_WFD_ATTRIBUTES
{
    NDIS_OBJECT_HEADER Header;
    uint uNumConcurrentGORole;
    uint uNumConcurrentClientRole;
    uint WPSVersionsSupported;
    BOOLEAN bServiceDiscoverySupported;
    BOOLEAN bClientDiscoverabilitySupported;
    BOOLEAN bInfrastructureManagementSupported;
    uint uMaxSecondaryDeviceTypeListSize;
    ubyte[6] DeviceAddress;
    uint uInterfaceAddressListCount;
    ubyte* pInterfaceAddressList;
    uint uNumSupportedCountryOrRegionStrings;
    ubyte* pSupportedCountryOrRegionStrings;
    uint uDiscoveryFilterListSize;
    uint uGORoleClientTableSize;
}
struct DOT11_WFD_DEVICE_TYPE
{
    ushort CategoryID;
    ushort SubCategoryID;
    ubyte[4] OUI;
}
struct DOT11_WPS_DEVICE_NAME
{
    uint uDeviceNameLength;
    ubyte[32] ucDeviceName;
}
struct DOT11_WFD_CONFIGURATION_TIMEOUT
{
    ubyte GOTimeout;
    ubyte ClientTimeout;
}
struct DOT11_WFD_GROUP_ID
{
    ubyte[6] DeviceAddress;
    DOT11_SSID SSID;
}
struct DOT11_WFD_GO_INTENT
{
    ubyte _bitfield0;
}
struct DOT11_WFD_CHANNEL
{
    ubyte[3] CountryRegionString;
    ubyte OperatingClass;
    ubyte ChannelNumber;
}
alias DOT11_WPS_CONFIG_METHOD = int;
enum : int
{
    DOT11_WPS_CONFIG_METHOD_NULL          = 0x00000000,
    DOT11_WPS_CONFIG_METHOD_DISPLAY       = 0x00000008,
    DOT11_WPS_CONFIG_METHOD_NFC_TAG       = 0x00000020,
    DOT11_WPS_CONFIG_METHOD_NFC_INTERFACE = 0x00000040,
    DOT11_WPS_CONFIG_METHOD_PUSHBUTTON    = 0x00000080,
    DOT11_WPS_CONFIG_METHOD_KEYPAD        = 0x00000100,
    DOT11_WPS_CONFIG_METHOD_WFDS_DEFAULT  = 0x00001000,
}

alias DOT11_WPS_DEVICE_PASSWORD_ID = int;
enum : int
{
    DOT11_WPS_PASSWORD_ID_DEFAULT                 = 0x00000000,
    DOT11_WPS_PASSWORD_ID_USER_SPECIFIED          = 0x00000001,
    DOT11_WPS_PASSWORD_ID_MACHINE_SPECIFIED       = 0x00000002,
    DOT11_WPS_PASSWORD_ID_REKEY                   = 0x00000003,
    DOT11_WPS_PASSWORD_ID_PUSHBUTTON              = 0x00000004,
    DOT11_WPS_PASSWORD_ID_REGISTRAR_SPECIFIED     = 0x00000005,
    DOT11_WPS_PASSWORD_ID_NFC_CONNECTION_HANDOVER = 0x00000007,
    DOT11_WPS_PASSWORD_ID_WFD_SERVICES            = 0x00000008,
    DOT11_WPS_PASSWORD_ID_OOB_RANGE_MIN           = 0x00000010,
    DOT11_WPS_PASSWORD_ID_OOB_RANGE_MAX           = 0x0000ffff,
}

struct WFDSVC_CONNECTION_CAPABILITY
{
    BOOLEAN bNew;
    BOOLEAN bClient;
    BOOLEAN bGO;
}
struct DOT11_WFD_SERVICE_HASH_LIST
{
    ushort ServiceHashCount;
    ubyte[6] ServiceHash;
}
struct DOT11_WFD_ADVERTISEMENT_ID
{
    uint AdvertisementID;
    ubyte[6] ServiceAddress;
}
struct DOT11_WFD_SESSION_ID
{
    uint SessionID;
    ubyte[6] SessionAddress;
}
struct DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR
{
    uint AdvertisementID;
    ushort ConfigMethods;
    ubyte ServiceNameLength;
    ubyte[255] ServiceName;
}
struct DOT11_WFD_ADVERTISED_SERVICE_LIST
{
    ushort ServiceCount;
    DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR[1] AdvertisedService;
}
struct DOT11_WFD_DISCOVER_COMPLETE_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    int Status;
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    uint uListOffset;
    uint uListLength;
}
struct DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] PeerDeviceAddress;
    ubyte DialogToken;
    int Status;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] PeerDeviceAddress;
    ubyte DialogToken;
    void* RequestContext;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] PeerDeviceAddress;
    ubyte DialogToken;
    int Status;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] PeerDeviceAddress;
    ubyte DialogToken;
    void* ResponseContext;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] PeerDeviceAddress;
    ubyte DialogToken;
    int Status;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] PeerDeviceAddress;
    ubyte DialogToken;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] PeerDeviceAddress;
    ubyte[6] ReceiverAddress;
    ubyte DialogToken;
    int Status;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] TransmitterDeviceAddress;
    ubyte[6] BSSID;
    ubyte DialogToken;
    void* RequestContext;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] ReceiverDeviceAddress;
    ubyte DialogToken;
    int Status;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] TransmitterDeviceAddress;
    ubyte[6] BSSID;
    ubyte DialogToken;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] PeerDeviceAddress;
    ubyte[6] ReceiverAddress;
    ubyte DialogToken;
    int Status;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] TransmitterDeviceAddress;
    ubyte[6] BSSID;
    ubyte DialogToken;
    void* RequestContext;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] ReceiverDeviceAddress;
    ubyte DialogToken;
    int Status;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] TransmitterDeviceAddress;
    ubyte[6] BSSID;
    ubyte DialogToken;
    uint uIEsOffset;
    uint uIEsLength;
}
alias DOT11_ANQP_QUERY_RESULT = int;
enum : int
{
    dot11_ANQP_query_result_success                                        = 0x00000000,
    dot11_ANQP_query_result_failure                                        = 0x00000001,
    dot11_ANQP_query_result_timed_out                                      = 0x00000002,
    dot11_ANQP_query_result_resources                                      = 0x00000003,
    dot11_ANQP_query_result_advertisement_protocol_not_supported_on_remote = 0x00000004,
    dot11_ANQP_query_result_gas_protocol_failure                           = 0x00000005,
    dot11_ANQP_query_result_advertisement_server_not_responding            = 0x00000006,
    dot11_ANQP_query_result_access_issues                                  = 0x00000007,
}

struct DOT11_ANQP_QUERY_COMPLETE_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    DOT11_ANQP_QUERY_RESULT Status;
    HANDLE hContext;
    uint uResponseLength;
}
struct DOT11_WFD_DEVICE_CAPABILITY_CONFIG
{
    NDIS_OBJECT_HEADER Header;
    BOOLEAN bServiceDiscoveryEnabled;
    BOOLEAN bClientDiscoverabilityEnabled;
    BOOLEAN bConcurrentOperationSupported;
    BOOLEAN bInfrastructureManagementEnabled;
    BOOLEAN bDeviceLimitReached;
    BOOLEAN bInvitationProcedureEnabled;
    uint WPSVersionsEnabled;
}
struct DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG
{
    NDIS_OBJECT_HEADER Header;
    BOOLEAN bPersistentGroupEnabled;
    BOOLEAN bIntraBSSDistributionSupported;
    BOOLEAN bCrossConnectionSupported;
    BOOLEAN bPersistentReconnectSupported;
    BOOLEAN bGroupFormationEnabled;
    uint uMaximumGroupLimit;
}
struct DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_V2
{
    NDIS_OBJECT_HEADER Header;
    BOOLEAN bPersistentGroupEnabled;
    BOOLEAN bIntraBSSDistributionSupported;
    BOOLEAN bCrossConnectionSupported;
    BOOLEAN bPersistentReconnectSupported;
    BOOLEAN bGroupFormationEnabled;
    uint uMaximumGroupLimit;
    BOOLEAN bEapolKeyIpAddressAllocationSupported;
}
struct DOT11_WFD_DEVICE_INFO
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] DeviceAddress;
    ushort ConfigMethods;
    DOT11_WFD_DEVICE_TYPE PrimaryDeviceType;
    DOT11_WPS_DEVICE_NAME DeviceName;
}
struct DOT11_WFD_SECONDARY_DEVICE_TYPE_LIST
{
    NDIS_OBJECT_HEADER Header;
    uint uNumOfEntries;
    uint uTotalNumOfEntries;
    DOT11_WFD_DEVICE_TYPE[1] SecondaryDeviceTypes;
}
alias DOT11_WFD_DISCOVER_TYPE = int;
enum : int
{
    dot11_wfd_discover_type_scan_only            = 0x00000001,
    dot11_wfd_discover_type_find_only            = 0x00000002,
    dot11_wfd_discover_type_auto                 = 0x00000003,
    dot11_wfd_discover_type_scan_social_channels = 0x00000004,
    dot11_wfd_discover_type_forced               = 0x80000000,
}

alias DOT11_WFD_SCAN_TYPE = int;
enum : int
{
    dot11_wfd_scan_type_active  = 0x00000001,
    dot11_wfd_scan_type_passive = 0x00000002,
    dot11_wfd_scan_type_auto    = 0x00000003,
}

struct DOT11_WFD_DISCOVER_DEVICE_FILTER
{
    ubyte[6] DeviceID;
    ubyte ucBitmask;
    DOT11_SSID GroupSSID;
}
struct DOT11_WFD_DISCOVER_REQUEST
{
    NDIS_OBJECT_HEADER Header;
    DOT11_WFD_DISCOVER_TYPE DiscoverType;
    DOT11_WFD_SCAN_TYPE ScanType;
    uint uDiscoverTimeout;
    uint uDeviceFilterListOffset;
    uint uNumDeviceFilters;
    uint uIEsOffset;
    uint uIEsLength;
    BOOLEAN bForceScanLegacyNetworks;
}
struct DOT11_WFD_DEVICE_ENTRY
{
    uint uPhyId;
    DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO PhySpecificInfo;
    ubyte[6] dot11BSSID;
    DOT11_BSS_TYPE dot11BSSType;
    ubyte[6] TransmitterAddress;
    int lRSSI;
    uint uLinkQuality;
    ushort usBeaconPeriod;
    ulong ullTimestamp;
    ulong ullBeaconHostTimestamp;
    ulong ullProbeResponseHostTimestamp;
    ushort usCapabilityInformation;
    uint uBeaconIEsOffset;
    uint uBeaconIEsLength;
    uint uProbeResponseIEsOffset;
    uint uProbeResponseIEsLength;
}
struct DOT11_WFD_ADDITIONAL_IE
{
    NDIS_OBJECT_HEADER Header;
    uint uBeaconIEsOffset;
    uint uBeaconIEsLength;
    uint uProbeResponseIEsOffset;
    uint uProbeResponseIEsLength;
    uint uDefaultRequestIEsOffset;
    uint uDefaultRequestIEsLength;
}
struct DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] PeerDeviceAddress;
    ubyte DialogToken;
    uint uSendTimeout;
    DOT11_WFD_GO_INTENT GroupOwnerIntent;
    DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
    ubyte[6] IntendedInterfaceAddress;
    ubyte GroupCapability;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] PeerDeviceAddress;
    ubyte DialogToken;
    void* RequestContext;
    uint uSendTimeout;
    ubyte Status;
    DOT11_WFD_GO_INTENT GroupOwnerIntent;
    DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
    ubyte[6] IntendedInterfaceAddress;
    ubyte GroupCapability;
    DOT11_WFD_GROUP_ID GroupID;
    BOOLEAN bUseGroupID;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] PeerDeviceAddress;
    ubyte DialogToken;
    void* ResponseContext;
    uint uSendTimeout;
    ubyte Status;
    ubyte GroupCapability;
    DOT11_WFD_GROUP_ID GroupID;
    BOOLEAN bUseGroupID;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_WFD_INVITATION_FLAGS
{
    ubyte _bitfield0;
}
struct DOT11_SEND_INVITATION_REQUEST_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte DialogToken;
    ubyte[6] PeerDeviceAddress;
    uint uSendTimeout;
    DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
    DOT11_WFD_INVITATION_FLAGS InvitationFlags;
    ubyte[6] GroupBSSID;
    BOOLEAN bUseGroupBSSID;
    DOT11_WFD_CHANNEL OperatingChannel;
    BOOLEAN bUseSpecifiedOperatingChannel;
    DOT11_WFD_GROUP_ID GroupID;
    BOOLEAN bLocalGO;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_SEND_INVITATION_RESPONSE_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] ReceiverDeviceAddress;
    ubyte DialogToken;
    void* RequestContext;
    uint uSendTimeout;
    ubyte Status;
    DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
    ubyte[6] GroupBSSID;
    BOOLEAN bUseGroupBSSID;
    DOT11_WFD_CHANNEL OperatingChannel;
    BOOLEAN bUseSpecifiedOperatingChannel;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte DialogToken;
    ubyte[6] PeerDeviceAddress;
    uint uSendTimeout;
    ubyte GroupCapability;
    DOT11_WFD_GROUP_ID GroupID;
    BOOLEAN bUseGroupID;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    ubyte[6] ReceiverDeviceAddress;
    ubyte DialogToken;
    void* RequestContext;
    uint uSendTimeout;
    uint uIEsOffset;
    uint uIEsLength;
}
struct DOT11_WFD_DEVICE_LISTEN_CHANNEL
{
    NDIS_OBJECT_HEADER Header;
    ubyte ChannelNumber;
}
struct DOT11_WFD_GROUP_START_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    DOT11_WFD_CHANNEL AdvertisedOperatingChannel;
}
struct DOT11_WFD_GROUP_JOIN_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    DOT11_WFD_CHANNEL GOOperatingChannel;
    uint GOConfigTime;
    BOOLEAN bInGroupFormation;
    BOOLEAN bWaitForWPSReady;
}
struct DOT11_POWER_MGMT_AUTO_MODE_ENABLED_INFO
{
    NDIS_OBJECT_HEADER Header;
    BOOLEAN bEnabled;
}
alias DOT11_POWER_MODE_REASON = int;
enum : int
{
    dot11_power_mode_reason_no_change            = 0x00000000,
    dot11_power_mode_reason_noncompliant_AP      = 0x00000001,
    dot11_power_mode_reason_legacy_WFD_device    = 0x00000002,
    dot11_power_mode_reason_compliant_AP         = 0x00000003,
    dot11_power_mode_reason_compliant_WFD_device = 0x00000004,
    dot11_power_mode_reason_others               = 0x00000005,
}

struct DOT11_POWER_MGMT_MODE_STATUS_INFO
{
    NDIS_OBJECT_HEADER Header;
    DOT11_POWER_MODE PowerSaveMode;
    uint uPowerSaveLevel;
    DOT11_POWER_MODE_REASON Reason;
}
struct DOT11_CHANNEL_HINT
{
    DOT11_PHY_TYPE Dot11PhyType;
    uint uChannelNumber;
}
struct DOT11_OFFLOAD_NETWORK
{
    DOT11_SSID Ssid;
    DOT11_CIPHER_ALGORITHM UnicastCipher;
    DOT11_AUTH_ALGORITHM AuthAlgo;
    DOT11_CHANNEL_HINT[4] Dot11ChannelHints;
}
struct DOT11_OFFLOAD_NETWORK_LIST_INFO
{
    NDIS_OBJECT_HEADER Header;
    uint ulFlags;
    uint FastScanPeriod;
    uint FastScanIterations;
    uint SlowScanPeriod;
    uint uNumOfEntries;
    DOT11_OFFLOAD_NETWORK[1] offloadNetworkList;
}
struct DOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    int Status;
}
alias DOT11_MANUFACTURING_TEST_TYPE = int;
enum : int
{
    dot11_manufacturing_test_unknown           = 0x00000000,
    dot11_manufacturing_test_self_start        = 0x00000001,
    dot11_manufacturing_test_self_query_result = 0x00000002,
    dot11_manufacturing_test_rx                = 0x00000003,
    dot11_manufacturing_test_tx                = 0x00000004,
    dot11_manufacturing_test_query_adc         = 0x00000005,
    dot11_manufacturing_test_set_data          = 0x00000006,
    dot11_manufacturing_test_query_data        = 0x00000007,
    dot11_manufacturing_test_sleep             = 0x00000008,
    dot11_manufacturing_test_awake             = 0x00000009,
    dot11_manufacturing_test_IHV_start         = 0x80000000,
    dot11_manufacturing_test_IHV_end           = 0xffffffff,
}

struct DOT11_MANUFACTURING_TEST
{
    DOT11_MANUFACTURING_TEST_TYPE dot11ManufacturingTestType;
    uint uBufferLength;
    ubyte[1] ucBuffer;
}
alias DOT11_MANUFACTURING_SELF_TEST_TYPE = int;
enum : int
{
    DOT11_MANUFACTURING_SELF_TEST_TYPE_INTERFACE      = 0x00000001,
    DOT11_MANUFACTURING_SELF_TEST_TYPE_RF_INTERFACE   = 0x00000002,
    DOT11_MANUFACTURING_SELF_TEST_TYPE_BT_COEXISTENCE = 0x00000003,
}

struct DOT11_MANUFACTURING_SELF_TEST_SET_PARAMS
{
    DOT11_MANUFACTURING_SELF_TEST_TYPE SelfTestType;
    uint uTestID;
    uint uPinBitMask;
    void* pvContext;
    uint uBufferLength;
    ubyte[1] ucBufferIn;
}
struct DOT11_MANUFACTURING_SELF_TEST_QUERY_RESULTS
{
    DOT11_MANUFACTURING_SELF_TEST_TYPE SelfTestType;
    uint uTestID;
    BOOLEAN bResult;
    uint uPinFailedBitMask;
    void* pvContext;
    uint uBytesWrittenOut;
    ubyte[1] ucBufferOut;
}
alias DOT11_BAND = int;
enum : int
{
    dot11_band_2p4g = 0x00000001,
    dot11_band_4p9g = 0x00000002,
    dot11_band_5g   = 0x00000003,
}

struct DOT11_MANUFACTURING_FUNCTIONAL_TEST_RX
{
    BOOLEAN bEnabled;
    DOT11_BAND Dot11Band;
    uint uChannel;
    int PowerLevel;
}
struct DOT11_MANUFACTURING_FUNCTIONAL_TEST_TX
{
    BOOLEAN bEnable;
    BOOLEAN bOpenLoop;
    DOT11_BAND Dot11Band;
    uint uChannel;
    uint uSetPowerLevel;
    int ADCPowerLevel;
}
struct DOT11_MANUFACTURING_FUNCTIONAL_TEST_QUERY_ADC
{
    DOT11_BAND Dot11Band;
    uint uChannel;
    int ADCPowerLevel;
}
struct DOT11_MANUFACTURING_TEST_SET_DATA
{
    uint uKey;
    uint uOffset;
    uint uBufferLength;
    ubyte[1] ucBufferIn;
}
struct DOT11_MANUFACTURING_TEST_QUERY_DATA
{
    uint uKey;
    uint uOffset;
    uint uBufferLength;
    uint uBytesRead;
    ubyte[1] ucBufferOut;
}
struct DOT11_MANUFACTURING_TEST_SLEEP
{
    uint uSleepTime;
    void* pvContext;
}
alias DOT11_MANUFACTURING_CALLBACK_TYPE = int;
enum : int
{
    dot11_manufacturing_callback_unknown            = 0x00000000,
    dot11_manufacturing_callback_self_test_complete = 0x00000001,
    dot11_manufacturing_callback_sleep_complete     = 0x00000002,
    dot11_manufacturing_callback_IHV_start          = 0x80000000,
    dot11_manufacturing_callback_IHV_end            = 0xffffffff,
}

struct DOT11_MANUFACTURING_CALLBACK_PARAMETERS
{
    NDIS_OBJECT_HEADER Header;
    DOT11_MANUFACTURING_CALLBACK_TYPE dot11ManufacturingCallbackType;
    uint uStatus;
    void* pvContext;
}
struct L2_NOTIFICATION_DATA
{
    uint NotificationSource;
    uint NotificationCode;
    GUID InterfaceGuid;
    uint dwDataSize;
    void* pData;
}
struct WLAN_PROFILE_INFO
{
    wchar[256] strProfileName;
    uint dwFlags;
}
struct DOT11_NETWORK
{
    DOT11_SSID dot11Ssid;
    DOT11_BSS_TYPE dot11BssType;
}
struct WLAN_RAW_DATA
{
    uint dwDataSize;
    ubyte[1] DataBlob;
}
struct WLAN_RAW_DATA_LIST
{
    uint dwTotalSize;
    uint dwNumberOfItems;
    struct
    {
        uint dwDataOffset;
        uint dwDataSize;
    }
}
alias WLAN_CONNECTION_MODE = int;
enum : int
{
    wlan_connection_mode_profile            = 0x00000000,
    wlan_connection_mode_temporary_profile  = 0x00000001,
    wlan_connection_mode_discovery_secure   = 0x00000002,
    wlan_connection_mode_discovery_unsecure = 0x00000003,
    wlan_connection_mode_auto               = 0x00000004,
    wlan_connection_mode_invalid            = 0x00000005,
}

struct WLAN_RATE_SET
{
    uint uRateSetLength;
    ushort[126] usRateSet;
}
struct WLAN_AVAILABLE_NETWORK
{
    wchar[256] strProfileName;
    DOT11_SSID dot11Ssid;
    DOT11_BSS_TYPE dot11BssType;
    uint uNumberOfBssids;
    BOOL bNetworkConnectable;
    uint wlanNotConnectableReason;
    uint uNumberOfPhyTypes;
    DOT11_PHY_TYPE[8] dot11PhyTypes;
    BOOL bMorePhyTypes;
    uint wlanSignalQuality;
    BOOL bSecurityEnabled;
    DOT11_AUTH_ALGORITHM dot11DefaultAuthAlgorithm;
    DOT11_CIPHER_ALGORITHM dot11DefaultCipherAlgorithm;
    uint dwFlags;
    uint dwReserved;
}
struct WLAN_AVAILABLE_NETWORK_V2
{
    wchar[256] strProfileName;
    DOT11_SSID dot11Ssid;
    DOT11_BSS_TYPE dot11BssType;
    uint uNumberOfBssids;
    BOOL bNetworkConnectable;
    uint wlanNotConnectableReason;
    uint uNumberOfPhyTypes;
    DOT11_PHY_TYPE[8] dot11PhyTypes;
    BOOL bMorePhyTypes;
    uint wlanSignalQuality;
    BOOL bSecurityEnabled;
    DOT11_AUTH_ALGORITHM dot11DefaultAuthAlgorithm;
    DOT11_CIPHER_ALGORITHM dot11DefaultCipherAlgorithm;
    uint dwFlags;
    DOT11_ACCESSNETWORKOPTIONS AccessNetworkOptions;
    ubyte[6] dot11HESSID;
    DOT11_VENUEINFO VenueInfo;
    uint dwReserved;
}
struct WLAN_BSS_ENTRY
{
    DOT11_SSID dot11Ssid;
    uint uPhyId;
    ubyte[6] dot11Bssid;
    DOT11_BSS_TYPE dot11BssType;
    DOT11_PHY_TYPE dot11BssPhyType;
    int lRssi;
    uint uLinkQuality;
    BOOLEAN bInRegDomain;
    ushort usBeaconPeriod;
    ulong ullTimestamp;
    ulong ullHostTimestamp;
    ushort usCapabilityInformation;
    uint ulChCenterFrequency;
    WLAN_RATE_SET wlanRateSet;
    uint ulIeOffset;
    uint ulIeSize;
}
struct WLAN_BSS_LIST
{
    uint dwTotalSize;
    uint dwNumberOfItems;
    WLAN_BSS_ENTRY[1] wlanBssEntries;
}
alias WLAN_INTERFACE_STATE = int;
enum : int
{
    wlan_interface_state_not_ready             = 0x00000000,
    wlan_interface_state_connected             = 0x00000001,
    wlan_interface_state_ad_hoc_network_formed = 0x00000002,
    wlan_interface_state_disconnecting         = 0x00000003,
    wlan_interface_state_disconnected          = 0x00000004,
    wlan_interface_state_associating           = 0x00000005,
    wlan_interface_state_discovering           = 0x00000006,
    wlan_interface_state_authenticating        = 0x00000007,
}

alias WLAN_ADHOC_NETWORK_STATE = int;
enum : int
{
    wlan_adhoc_network_state_formed    = 0x00000000,
    wlan_adhoc_network_state_connected = 0x00000001,
}

struct WLAN_INTERFACE_INFO
{
    GUID InterfaceGuid;
    wchar[256] strInterfaceDescription;
    WLAN_INTERFACE_STATE isState;
}
struct WLAN_ASSOCIATION_ATTRIBUTES
{
    DOT11_SSID dot11Ssid;
    DOT11_BSS_TYPE dot11BssType;
    ubyte[6] dot11Bssid;
    DOT11_PHY_TYPE dot11PhyType;
    uint uDot11PhyIndex;
    uint wlanSignalQuality;
    uint ulRxRate;
    uint ulTxRate;
}
struct WLAN_SECURITY_ATTRIBUTES
{
    BOOL bSecurityEnabled;
    BOOL bOneXEnabled;
    DOT11_AUTH_ALGORITHM dot11AuthAlgorithm;
    DOT11_CIPHER_ALGORITHM dot11CipherAlgorithm;
}
struct WLAN_CONNECTION_ATTRIBUTES
{
    WLAN_INTERFACE_STATE isState;
    WLAN_CONNECTION_MODE wlanConnectionMode;
    wchar[256] strProfileName;
    WLAN_ASSOCIATION_ATTRIBUTES wlanAssociationAttributes;
    WLAN_SECURITY_ATTRIBUTES wlanSecurityAttributes;
}
alias DOT11_RADIO_STATE = int;
enum : int
{
    dot11_radio_state_unknown = 0x00000000,
    dot11_radio_state_on      = 0x00000001,
    dot11_radio_state_off     = 0x00000002,
}

struct WLAN_PHY_RADIO_STATE
{
    uint dwPhyIndex;
    DOT11_RADIO_STATE dot11SoftwareRadioState;
    DOT11_RADIO_STATE dot11HardwareRadioState;
}
struct WLAN_RADIO_STATE
{
    uint dwNumberOfPhys;
    WLAN_PHY_RADIO_STATE[64] PhyRadioState;
}
alias WLAN_OPERATIONAL_STATE = int;
enum : int
{
    wlan_operational_state_unknown   = 0x00000000,
    wlan_operational_state_off       = 0x00000001,
    wlan_operational_state_on        = 0x00000002,
    wlan_operational_state_going_off = 0x00000003,
    wlan_operational_state_going_on  = 0x00000004,
}

alias WLAN_INTERFACE_TYPE = int;
enum : int
{
    wlan_interface_type_emulated_802_11 = 0x00000000,
    wlan_interface_type_native_802_11   = 0x00000001,
    wlan_interface_type_invalid         = 0x00000002,
}

struct WLAN_INTERFACE_CAPABILITY
{
    WLAN_INTERFACE_TYPE interfaceType;
    BOOL bDot11DSupported;
    uint dwMaxDesiredSsidListSize;
    uint dwMaxDesiredBssidListSize;
    uint dwNumberOfSupportedPhys;
    DOT11_PHY_TYPE[64] dot11PhyTypes;
}
struct WLAN_AUTH_CIPHER_PAIR_LIST
{
    uint dwNumberOfItems;
    DOT11_AUTH_CIPHER_PAIR[1] pAuthCipherPairList;
}
struct WLAN_COUNTRY_OR_REGION_STRING_LIST
{
    uint dwNumberOfItems;
    ubyte[3] pCountryOrRegionStringList;
}
struct WLAN_PROFILE_INFO_LIST
{
    uint dwNumberOfItems;
    uint dwIndex;
    WLAN_PROFILE_INFO[1] ProfileInfo;
}
struct WLAN_AVAILABLE_NETWORK_LIST
{
    uint dwNumberOfItems;
    uint dwIndex;
    WLAN_AVAILABLE_NETWORK[1] Network;
}
struct WLAN_AVAILABLE_NETWORK_LIST_V2
{
    uint dwNumberOfItems;
    uint dwIndex;
    WLAN_AVAILABLE_NETWORK_V2[1] Network;
}
struct WLAN_INTERFACE_INFO_LIST
{
    uint dwNumberOfItems;
    uint dwIndex;
    WLAN_INTERFACE_INFO[1] InterfaceInfo;
}
struct DOT11_NETWORK_LIST
{
    uint dwNumberOfItems;
    uint dwIndex;
    DOT11_NETWORK[1] Network;
}
alias WLAN_POWER_SETTING = int;
enum : int
{
    wlan_power_setting_no_saving      = 0x00000000,
    wlan_power_setting_low_saving     = 0x00000001,
    wlan_power_setting_medium_saving  = 0x00000002,
    wlan_power_setting_maximum_saving = 0x00000003,
    wlan_power_setting_invalid        = 0x00000004,
}

struct WLAN_CONNECTION_PARAMETERS
{
    WLAN_CONNECTION_MODE wlanConnectionMode;
    const(wchar)* strProfile;
    DOT11_SSID* pDot11Ssid;
    DOT11_BSSID_LIST* pDesiredBssidList;
    DOT11_BSS_TYPE dot11BssType;
    uint dwFlags;
}
struct WLAN_CONNECTION_PARAMETERS_V2
{
    WLAN_CONNECTION_MODE wlanConnectionMode;
    const(wchar)* strProfile;
    DOT11_SSID* pDot11Ssid;
    ubyte* pDot11Hessid;
    DOT11_BSSID_LIST* pDesiredBssidList;
    DOT11_BSS_TYPE dot11BssType;
    uint dwFlags;
    DOT11_ACCESSNETWORKOPTIONS* pDot11AccessNetworkOptions;
}
struct WLAN_MSM_NOTIFICATION_DATA
{
    WLAN_CONNECTION_MODE wlanConnectionMode;
    wchar[256] strProfileName;
    DOT11_SSID dot11Ssid;
    DOT11_BSS_TYPE dot11BssType;
    ubyte[6] dot11MacAddr;
    BOOL bSecurityEnabled;
    BOOL bFirstPeer;
    BOOL bLastPeer;
    uint wlanReasonCode;
}
struct WLAN_CONNECTION_NOTIFICATION_DATA
{
    WLAN_CONNECTION_MODE wlanConnectionMode;
    wchar[256] strProfileName;
    DOT11_SSID dot11Ssid;
    DOT11_BSS_TYPE dot11BssType;
    BOOL bSecurityEnabled;
    uint wlanReasonCode;
    WLAN_CONNECTION_NOTIFICATION_FLAGS dwFlags;
    wchar[1] strProfileXml;
}
struct WLAN_DEVICE_SERVICE_NOTIFICATION_DATA
{
    GUID DeviceService;
    uint dwOpCode;
    uint dwDataSize;
    ubyte[1] DataBlob;
}
alias WLAN_NOTIFICATION_ACM = int;
enum : int
{
    wlan_notification_acm_start                      = 0x00000000,
    wlan_notification_acm_autoconf_enabled           = 0x00000001,
    wlan_notification_acm_autoconf_disabled          = 0x00000002,
    wlan_notification_acm_background_scan_enabled    = 0x00000003,
    wlan_notification_acm_background_scan_disabled   = 0x00000004,
    wlan_notification_acm_bss_type_change            = 0x00000005,
    wlan_notification_acm_power_setting_change       = 0x00000006,
    wlan_notification_acm_scan_complete              = 0x00000007,
    wlan_notification_acm_scan_fail                  = 0x00000008,
    wlan_notification_acm_connection_start           = 0x00000009,
    wlan_notification_acm_connection_complete        = 0x0000000a,
    wlan_notification_acm_connection_attempt_fail    = 0x0000000b,
    wlan_notification_acm_filter_list_change         = 0x0000000c,
    wlan_notification_acm_interface_arrival          = 0x0000000d,
    wlan_notification_acm_interface_removal          = 0x0000000e,
    wlan_notification_acm_profile_change             = 0x0000000f,
    wlan_notification_acm_profile_name_change        = 0x00000010,
    wlan_notification_acm_profiles_exhausted         = 0x00000011,
    wlan_notification_acm_network_not_available      = 0x00000012,
    wlan_notification_acm_network_available          = 0x00000013,
    wlan_notification_acm_disconnecting              = 0x00000014,
    wlan_notification_acm_disconnected               = 0x00000015,
    wlan_notification_acm_adhoc_network_state_change = 0x00000016,
    wlan_notification_acm_profile_unblocked          = 0x00000017,
    wlan_notification_acm_screen_power_change        = 0x00000018,
    wlan_notification_acm_profile_blocked            = 0x00000019,
    wlan_notification_acm_scan_list_refresh          = 0x0000001a,
    wlan_notification_acm_operational_state_change   = 0x0000001b,
    wlan_notification_acm_end                        = 0x0000001c,
}

alias WLAN_NOTIFICATION_MSM = int;
enum : int
{
    wlan_notification_msm_start                         = 0x00000000,
    wlan_notification_msm_associating                   = 0x00000001,
    wlan_notification_msm_associated                    = 0x00000002,
    wlan_notification_msm_authenticating                = 0x00000003,
    wlan_notification_msm_connected                     = 0x00000004,
    wlan_notification_msm_roaming_start                 = 0x00000005,
    wlan_notification_msm_roaming_end                   = 0x00000006,
    wlan_notification_msm_radio_state_change            = 0x00000007,
    wlan_notification_msm_signal_quality_change         = 0x00000008,
    wlan_notification_msm_disassociating                = 0x00000009,
    wlan_notification_msm_disconnected                  = 0x0000000a,
    wlan_notification_msm_peer_join                     = 0x0000000b,
    wlan_notification_msm_peer_leave                    = 0x0000000c,
    wlan_notification_msm_adapter_removal               = 0x0000000d,
    wlan_notification_msm_adapter_operation_mode_change = 0x0000000e,
    wlan_notification_msm_link_degraded                 = 0x0000000f,
    wlan_notification_msm_link_improved                 = 0x00000010,
    wlan_notification_msm_end                           = 0x00000011,
}

alias WLAN_NOTIFICATION_SECURITY = int;
enum : int
{
    wlan_notification_security_start = 0x00000000,
    wlan_notification_security_end   = 0x00000001,
}

alias WLAN_NOTIFICATION_CALLBACK = void function(L2_NOTIFICATION_DATA*, void*);
alias WLAN_OPCODE_VALUE_TYPE = int;
enum : int
{
    wlan_opcode_value_type_query_only          = 0x00000000,
    wlan_opcode_value_type_set_by_group_policy = 0x00000001,
    wlan_opcode_value_type_set_by_user         = 0x00000002,
    wlan_opcode_value_type_invalid             = 0x00000003,
}

alias WLAN_INTF_OPCODE = int;
enum : int
{
    wlan_intf_opcode_autoconf_start                             = 0x00000000,
    wlan_intf_opcode_autoconf_enabled                           = 0x00000001,
    wlan_intf_opcode_background_scan_enabled                    = 0x00000002,
    wlan_intf_opcode_media_streaming_mode                       = 0x00000003,
    wlan_intf_opcode_radio_state                                = 0x00000004,
    wlan_intf_opcode_bss_type                                   = 0x00000005,
    wlan_intf_opcode_interface_state                            = 0x00000006,
    wlan_intf_opcode_current_connection                         = 0x00000007,
    wlan_intf_opcode_channel_number                             = 0x00000008,
    wlan_intf_opcode_supported_infrastructure_auth_cipher_pairs = 0x00000009,
    wlan_intf_opcode_supported_adhoc_auth_cipher_pairs          = 0x0000000a,
    wlan_intf_opcode_supported_country_or_region_string_list    = 0x0000000b,
    wlan_intf_opcode_current_operation_mode                     = 0x0000000c,
    wlan_intf_opcode_supported_safe_mode                        = 0x0000000d,
    wlan_intf_opcode_certified_safe_mode                        = 0x0000000e,
    wlan_intf_opcode_hosted_network_capable                     = 0x0000000f,
    wlan_intf_opcode_management_frame_protection_capable        = 0x00000010,
    wlan_intf_opcode_secondary_sta_interfaces                   = 0x00000011,
    wlan_intf_opcode_secondary_sta_synchronized_connections     = 0x00000012,
    wlan_intf_opcode_autoconf_end                               = 0x0fffffff,
    wlan_intf_opcode_msm_start                                  = 0x10000100,
    wlan_intf_opcode_statistics                                 = 0x10000101,
    wlan_intf_opcode_rssi                                       = 0x10000102,
    wlan_intf_opcode_msm_end                                    = 0x1fffffff,
    wlan_intf_opcode_security_start                             = 0x20010000,
    wlan_intf_opcode_security_end                               = 0x2fffffff,
    wlan_intf_opcode_ihv_start                                  = 0x30000000,
    wlan_intf_opcode_ihv_end                                    = 0x3fffffff,
}

alias WLAN_AUTOCONF_OPCODE = int;
enum : int
{
    wlan_autoconf_opcode_start                                     = 0x00000000,
    wlan_autoconf_opcode_show_denied_networks                      = 0x00000001,
    wlan_autoconf_opcode_power_setting                             = 0x00000002,
    wlan_autoconf_opcode_only_use_gp_profiles_for_allowed_networks = 0x00000003,
    wlan_autoconf_opcode_allow_explicit_creds                      = 0x00000004,
    wlan_autoconf_opcode_block_period                              = 0x00000005,
    wlan_autoconf_opcode_allow_virtual_station_extensibility       = 0x00000006,
    wlan_autoconf_opcode_end                                       = 0x00000007,
}

alias WLAN_IHV_CONTROL_TYPE = int;
enum : int
{
    wlan_ihv_control_type_service = 0x00000000,
    wlan_ihv_control_type_driver  = 0x00000001,
}

alias WLAN_FILTER_LIST_TYPE = int;
enum : int
{
    wlan_filter_list_type_gp_permit   = 0x00000000,
    wlan_filter_list_type_gp_deny     = 0x00000001,
    wlan_filter_list_type_user_permit = 0x00000002,
    wlan_filter_list_type_user_deny   = 0x00000003,
}

struct WLAN_PHY_FRAME_STATISTICS
{
    ulong ullTransmittedFrameCount;
    ulong ullMulticastTransmittedFrameCount;
    ulong ullFailedCount;
    ulong ullRetryCount;
    ulong ullMultipleRetryCount;
    ulong ullMaxTXLifetimeExceededCount;
    ulong ullTransmittedFragmentCount;
    ulong ullRTSSuccessCount;
    ulong ullRTSFailureCount;
    ulong ullACKFailureCount;
    ulong ullReceivedFrameCount;
    ulong ullMulticastReceivedFrameCount;
    ulong ullPromiscuousReceivedFrameCount;
    ulong ullMaxRXLifetimeExceededCount;
    ulong ullFrameDuplicateCount;
    ulong ullReceivedFragmentCount;
    ulong ullPromiscuousReceivedFragmentCount;
    ulong ullFCSErrorCount;
}
struct WLAN_MAC_FRAME_STATISTICS
{
    ulong ullTransmittedFrameCount;
    ulong ullReceivedFrameCount;
    ulong ullWEPExcludedCount;
    ulong ullTKIPLocalMICFailures;
    ulong ullTKIPReplays;
    ulong ullTKIPICVErrorCount;
    ulong ullCCMPReplays;
    ulong ullCCMPDecryptErrors;
    ulong ullWEPUndecryptableCount;
    ulong ullWEPICVErrorCount;
    ulong ullDecryptSuccessCount;
    ulong ullDecryptFailureCount;
}
struct WLAN_STATISTICS
{
    ulong ullFourWayHandshakeFailures;
    ulong ullTKIPCounterMeasuresInvoked;
    ulong ullReserved;
    WLAN_MAC_FRAME_STATISTICS MacUcastCounters;
    WLAN_MAC_FRAME_STATISTICS MacMcastCounters;
    uint dwNumberOfPhys;
    WLAN_PHY_FRAME_STATISTICS[1] PhyCounters;
}
alias WLAN_SECURABLE_OBJECT = int;
enum : int
{
    wlan_secure_permit_list                    = 0x00000000,
    wlan_secure_deny_list                      = 0x00000001,
    wlan_secure_ac_enabled                     = 0x00000002,
    wlan_secure_bc_scan_enabled                = 0x00000003,
    wlan_secure_bss_type                       = 0x00000004,
    wlan_secure_show_denied                    = 0x00000005,
    wlan_secure_interface_properties           = 0x00000006,
    wlan_secure_ihv_control                    = 0x00000007,
    wlan_secure_all_user_profiles_order        = 0x00000008,
    wlan_secure_add_new_all_user_profiles      = 0x00000009,
    wlan_secure_add_new_per_user_profiles      = 0x0000000a,
    wlan_secure_media_streaming_mode_enabled   = 0x0000000b,
    wlan_secure_current_operation_mode         = 0x0000000c,
    wlan_secure_get_plaintext_key              = 0x0000000d,
    wlan_secure_hosted_network_elevated_access = 0x0000000e,
    wlan_secure_virtual_station_extensibility  = 0x0000000f,
    wlan_secure_wfd_elevated_access            = 0x00000010,
    WLAN_SECURABLE_OBJECT_COUNT                = 0x00000011,
}

struct WLAN_DEVICE_SERVICE_GUID_LIST
{
    uint dwNumberOfItems;
    uint dwIndex;
    GUID[1] DeviceService;
}
alias WFD_ROLE_TYPE = int;
enum : int
{
    WFD_ROLE_TYPE_NONE        = 0x00000000,
    WFD_ROLE_TYPE_DEVICE      = 0x00000001,
    WFD_ROLE_TYPE_GROUP_OWNER = 0x00000002,
    WFD_ROLE_TYPE_CLIENT      = 0x00000004,
    WFD_ROLE_TYPE_MAX         = 0x00000005,
}

struct WFD_GROUP_ID
{
    ubyte[6] DeviceAddress;
    DOT11_SSID GroupSSID;
}
alias WL_DISPLAY_PAGES = int;
enum : int
{
    WLConnectionPage = 0x00000000,
    WLSecurityPage   = 0x00000001,
    WLAdvPage        = 0x00000002,
}

alias WLAN_HOSTED_NETWORK_STATE = int;
enum : int
{
    wlan_hosted_network_unavailable = 0x00000000,
    wlan_hosted_network_idle        = 0x00000001,
    wlan_hosted_network_active      = 0x00000002,
}

alias WLAN_HOSTED_NETWORK_REASON = int;
enum : int
{
    wlan_hosted_network_reason_success                              = 0x00000000,
    wlan_hosted_network_reason_unspecified                          = 0x00000001,
    wlan_hosted_network_reason_bad_parameters                       = 0x00000002,
    wlan_hosted_network_reason_service_shutting_down                = 0x00000003,
    wlan_hosted_network_reason_insufficient_resources               = 0x00000004,
    wlan_hosted_network_reason_elevation_required                   = 0x00000005,
    wlan_hosted_network_reason_read_only                            = 0x00000006,
    wlan_hosted_network_reason_persistence_failed                   = 0x00000007,
    wlan_hosted_network_reason_crypt_error                          = 0x00000008,
    wlan_hosted_network_reason_impersonation                        = 0x00000009,
    wlan_hosted_network_reason_stop_before_start                    = 0x0000000a,
    wlan_hosted_network_reason_interface_available                  = 0x0000000b,
    wlan_hosted_network_reason_interface_unavailable                = 0x0000000c,
    wlan_hosted_network_reason_miniport_stopped                     = 0x0000000d,
    wlan_hosted_network_reason_miniport_started                     = 0x0000000e,
    wlan_hosted_network_reason_incompatible_connection_started      = 0x0000000f,
    wlan_hosted_network_reason_incompatible_connection_stopped      = 0x00000010,
    wlan_hosted_network_reason_user_action                          = 0x00000011,
    wlan_hosted_network_reason_client_abort                         = 0x00000012,
    wlan_hosted_network_reason_ap_start_failed                      = 0x00000013,
    wlan_hosted_network_reason_peer_arrived                         = 0x00000014,
    wlan_hosted_network_reason_peer_departed                        = 0x00000015,
    wlan_hosted_network_reason_peer_timeout                         = 0x00000016,
    wlan_hosted_network_reason_gp_denied                            = 0x00000017,
    wlan_hosted_network_reason_service_unavailable                  = 0x00000018,
    wlan_hosted_network_reason_device_change                        = 0x00000019,
    wlan_hosted_network_reason_properties_change                    = 0x0000001a,
    wlan_hosted_network_reason_virtual_station_blocking_use         = 0x0000001b,
    wlan_hosted_network_reason_service_available_on_virtual_station = 0x0000001c,
}

alias WLAN_HOSTED_NETWORK_PEER_AUTH_STATE = int;
enum : int
{
    wlan_hosted_network_peer_state_invalid       = 0x00000000,
    wlan_hosted_network_peer_state_authenticated = 0x00000001,
}

struct WLAN_HOSTED_NETWORK_PEER_STATE
{
    ubyte[6] PeerMacAddress;
    WLAN_HOSTED_NETWORK_PEER_AUTH_STATE PeerAuthState;
}
struct WLAN_HOSTED_NETWORK_RADIO_STATE
{
    DOT11_RADIO_STATE dot11SoftwareRadioState;
    DOT11_RADIO_STATE dot11HardwareRadioState;
}
alias WLAN_HOSTED_NETWORK_NOTIFICATION_CODE = int;
enum : int
{
    wlan_hosted_network_state_change       = 0x00001000,
    wlan_hosted_network_peer_state_change  = 0x00001001,
    wlan_hosted_network_radio_state_change = 0x00001002,
}

struct WLAN_HOSTED_NETWORK_STATE_CHANGE
{
    WLAN_HOSTED_NETWORK_STATE OldState;
    WLAN_HOSTED_NETWORK_STATE NewState;
    WLAN_HOSTED_NETWORK_REASON StateChangeReason;
}
struct WLAN_HOSTED_NETWORK_DATA_PEER_STATE_CHANGE
{
    WLAN_HOSTED_NETWORK_PEER_STATE OldState;
    WLAN_HOSTED_NETWORK_PEER_STATE NewState;
    WLAN_HOSTED_NETWORK_REASON PeerStateChangeReason;
}
alias WLAN_HOSTED_NETWORK_OPCODE = int;
enum : int
{
    wlan_hosted_network_opcode_connection_settings = 0x00000000,
    wlan_hosted_network_opcode_security_settings   = 0x00000001,
    wlan_hosted_network_opcode_station_profile     = 0x00000002,
    wlan_hosted_network_opcode_enable              = 0x00000003,
}

struct WLAN_HOSTED_NETWORK_CONNECTION_SETTINGS
{
    DOT11_SSID hostedNetworkSSID;
    uint dwMaxNumberOfPeers;
}
struct WLAN_HOSTED_NETWORK_SECURITY_SETTINGS
{
    DOT11_AUTH_ALGORITHM dot11AuthAlgo;
    DOT11_CIPHER_ALGORITHM dot11CipherAlgo;
}
struct WLAN_HOSTED_NETWORK_STATUS
{
    WLAN_HOSTED_NETWORK_STATE HostedNetworkState;
    GUID IPDeviceID;
    ubyte[6] wlanHostedNetworkBSSID;
    DOT11_PHY_TYPE dot11PhyType;
    uint ulChannelFrequency;
    uint dwNumberOfPeers;
    WLAN_HOSTED_NETWORK_PEER_STATE[1] PeerList;
}
alias WFD_OPEN_SESSION_COMPLETE_CALLBACK = void function(HANDLE, void*, GUID, uint, uint);
alias ONEX_AUTH_IDENTITY = int;
enum : int
{
    OneXAuthIdentityNone         = 0x00000000,
    OneXAuthIdentityMachine      = 0x00000001,
    OneXAuthIdentityUser         = 0x00000002,
    OneXAuthIdentityExplicitUser = 0x00000003,
    OneXAuthIdentityGuest        = 0x00000004,
    OneXAuthIdentityInvalid      = 0x00000005,
}

alias ONEX_AUTH_STATUS = int;
enum : int
{
    OneXAuthNotStarted           = 0x00000000,
    OneXAuthInProgress           = 0x00000001,
    OneXAuthNoAuthenticatorFound = 0x00000002,
    OneXAuthSuccess              = 0x00000003,
    OneXAuthFailure              = 0x00000004,
    OneXAuthInvalid              = 0x00000005,
}

alias ONEX_REASON_CODE = int;
enum : int
{
    ONEX_REASON_CODE_SUCCESS                       = 0x00000000,
    ONEX_REASON_START                              = 0x00050000,
    ONEX_UNABLE_TO_IDENTIFY_USER                   = 0x00050001,
    ONEX_IDENTITY_NOT_FOUND                        = 0x00050002,
    ONEX_UI_DISABLED                               = 0x00050003,
    ONEX_UI_FAILURE                                = 0x00050004,
    ONEX_EAP_FAILURE_RECEIVED                      = 0x00050005,
    ONEX_AUTHENTICATOR_NO_LONGER_PRESENT           = 0x00050006,
    ONEX_NO_RESPONSE_TO_IDENTITY                   = 0x00050007,
    ONEX_PROFILE_VERSION_NOT_SUPPORTED             = 0x00050008,
    ONEX_PROFILE_INVALID_LENGTH                    = 0x00050009,
    ONEX_PROFILE_DISALLOWED_EAP_TYPE               = 0x0005000a,
    ONEX_PROFILE_INVALID_EAP_TYPE_OR_FLAG          = 0x0005000b,
    ONEX_PROFILE_INVALID_ONEX_FLAGS                = 0x0005000c,
    ONEX_PROFILE_INVALID_TIMER_VALUE               = 0x0005000d,
    ONEX_PROFILE_INVALID_SUPPLICANT_MODE           = 0x0005000e,
    ONEX_PROFILE_INVALID_AUTH_MODE                 = 0x0005000f,
    ONEX_PROFILE_INVALID_EAP_CONNECTION_PROPERTIES = 0x00050010,
    ONEX_UI_CANCELLED                              = 0x00050011,
    ONEX_PROFILE_INVALID_EXPLICIT_CREDENTIALS      = 0x00050012,
    ONEX_PROFILE_EXPIRED_EXPLICIT_CREDENTIALS      = 0x00050013,
    ONEX_UI_NOT_PERMITTED                          = 0x00050014,
}

alias ONEX_NOTIFICATION_TYPE = int;
enum : int
{
    OneXPublicNotificationBase        = 0x00000000,
    OneXNotificationTypeResultUpdate  = 0x00000001,
    OneXNotificationTypeAuthRestarted = 0x00000002,
    OneXNotificationTypeEventInvalid  = 0x00000003,
    OneXNumNotifications              = 0x00000003,
}

alias ONEX_AUTH_RESTART_REASON = int;
enum : int
{
    OneXRestartReasonPeerInitiated            = 0x00000000,
    OneXRestartReasonMsmInitiated             = 0x00000001,
    OneXRestartReasonOneXHeldStateTimeout     = 0x00000002,
    OneXRestartReasonOneXAuthTimeout          = 0x00000003,
    OneXRestartReasonOneXConfigurationChanged = 0x00000004,
    OneXRestartReasonOneXUserChanged          = 0x00000005,
    OneXRestartReasonQuarantineStateChanged   = 0x00000006,
    OneXRestartReasonAltCredsTrial            = 0x00000007,
    OneXRestartReasonInvalid                  = 0x00000008,
}

struct ONEX_VARIABLE_BLOB
{
    uint dwSize;
    uint dwOffset;
}
struct ONEX_AUTH_PARAMS
{
    BOOL fUpdatePending;
    ONEX_VARIABLE_BLOB oneXConnProfile;
    ONEX_AUTH_IDENTITY authIdentity;
    uint dwQuarantineState;
    uint _bitfield0;
    uint dwSessionId;
    HANDLE hUserToken;
    ONEX_VARIABLE_BLOB OneXUserProfile;
    ONEX_VARIABLE_BLOB Identity;
    ONEX_VARIABLE_BLOB UserName;
    ONEX_VARIABLE_BLOB Domain;
}
struct ONEX_EAP_ERROR
{
    uint dwWinError;
    EAP_METHOD_TYPE type;
    uint dwReasonCode;
    GUID rootCauseGuid;
    GUID repairGuid;
    GUID helpLinkGuid;
    uint _bitfield0;
    ONEX_VARIABLE_BLOB RootCauseString;
    ONEX_VARIABLE_BLOB RepairString;
}
struct ONEX_STATUS
{
    ONEX_AUTH_STATUS authStatus;
    uint dwReason;
    uint dwError;
}
alias ONEX_EAP_METHOD_BACKEND_SUPPORT = int;
enum : int
{
    OneXEapMethodBackendSupportUnknown = 0x00000000,
    OneXEapMethodBackendSupported      = 0x00000001,
    OneXEapMethodBackendUnsupported    = 0x00000002,
}

struct ONEX_RESULT_UPDATE_DATA
{
    ONEX_STATUS oneXStatus;
    ONEX_EAP_METHOD_BACKEND_SUPPORT BackendSupport;
    BOOL fBackendEngaged;
    uint _bitfield0;
    ONEX_VARIABLE_BLOB authParams;
    ONEX_VARIABLE_BLOB eapError;
}
struct ONEX_USER_INFO
{
    ONEX_AUTH_IDENTITY authIdentity;
    uint _bitfield0;
    ONEX_VARIABLE_BLOB UserName;
    ONEX_VARIABLE_BLOB DomainName;
}
enum CLSID_Dot11AdHocManager = GUID(0xdd06a84f, 0x83bd, 0x4d01, [0x8a, 0xb9, 0x23, 0x89, 0xfe, 0xa0, 0x86, 0x9e]);
struct Dot11AdHocManager
{
}
alias DOT11_ADHOC_CIPHER_ALGORITHM = int;
enum : int
{
    DOT11_ADHOC_CIPHER_ALGO_INVALID = 0xffffffff,
    DOT11_ADHOC_CIPHER_ALGO_NONE    = 0x00000000,
    DOT11_ADHOC_CIPHER_ALGO_CCMP    = 0x00000004,
    DOT11_ADHOC_CIPHER_ALGO_WEP     = 0x00000101,
}

alias DOT11_ADHOC_AUTH_ALGORITHM = int;
enum : int
{
    DOT11_ADHOC_AUTH_ALGO_INVALID    = 0xffffffff,
    DOT11_ADHOC_AUTH_ALGO_80211_OPEN = 0x00000001,
    DOT11_ADHOC_AUTH_ALGO_RSNA_PSK   = 0x00000007,
}

alias DOT11_ADHOC_NETWORK_CONNECTION_STATUS = int;
enum : int
{
    DOT11_ADHOC_NETWORK_CONNECTION_STATUS_INVALID      = 0x00000000,
    DOT11_ADHOC_NETWORK_CONNECTION_STATUS_DISCONNECTED = 0x0000000b,
    DOT11_ADHOC_NETWORK_CONNECTION_STATUS_CONNECTING   = 0x0000000c,
    DOT11_ADHOC_NETWORK_CONNECTION_STATUS_CONNECTED    = 0x0000000d,
    DOT11_ADHOC_NETWORK_CONNECTION_STATUS_FORMED       = 0x0000000e,
}

alias DOT11_ADHOC_CONNECT_FAIL_REASON = int;
enum : int
{
    DOT11_ADHOC_CONNECT_FAIL_DOMAIN_MISMATCH     = 0x00000000,
    DOT11_ADHOC_CONNECT_FAIL_PASSPHRASE_MISMATCH = 0x00000001,
    DOT11_ADHOC_CONNECT_FAIL_OTHER               = 0x00000002,
}

enum IID_IDot11AdHocManager = GUID(0x8f10cc26, 0xcf0d, 0x42a0, [0xac, 0xbe, 0xe2, 0xde, 0x70, 0x7, 0x38, 0x4d]);
interface IDot11AdHocManager : IUnknown
{
    HRESULT CreateNetwork(const(wchar)*, const(wchar)*, int, IDot11AdHocInterface, IDot11AdHocSecuritySettings, GUID*, IDot11AdHocNetwork*);
    HRESULT CommitCreatedNetwork(IDot11AdHocNetwork, BOOLEAN, BOOLEAN);
    HRESULT GetIEnumDot11AdHocNetworks(GUID*, IEnumDot11AdHocNetworks*);
    HRESULT GetIEnumDot11AdHocInterfaces(IEnumDot11AdHocInterfaces*);
    HRESULT GetNetwork(GUID*, IDot11AdHocNetwork*);
}
enum IID_IDot11AdHocManagerNotificationSink = GUID(0x8f10cc27, 0xcf0d, 0x42a0, [0xac, 0xbe, 0xe2, 0xde, 0x70, 0x7, 0x38, 0x4d]);
interface IDot11AdHocManagerNotificationSink : IUnknown
{
    HRESULT OnNetworkAdd(IDot11AdHocNetwork);
    HRESULT OnNetworkRemove(GUID*);
    HRESULT OnInterfaceAdd(IDot11AdHocInterface);
    HRESULT OnInterfaceRemove(GUID*);
}
enum IID_IEnumDot11AdHocNetworks = GUID(0x8f10cc28, 0xcf0d, 0x42a0, [0xac, 0xbe, 0xe2, 0xde, 0x70, 0x7, 0x38, 0x4d]);
interface IEnumDot11AdHocNetworks : IUnknown
{
    HRESULT Next(uint, IDot11AdHocNetwork*, uint*);
    HRESULT Skip(uint);
    HRESULT Reset();
    HRESULT Clone(IEnumDot11AdHocNetworks*);
}
enum IID_IDot11AdHocNetwork = GUID(0x8f10cc29, 0xcf0d, 0x42a0, [0xac, 0xbe, 0xe2, 0xde, 0x70, 0x7, 0x38, 0x4d]);
interface IDot11AdHocNetwork : IUnknown
{
    HRESULT GetStatus(DOT11_ADHOC_NETWORK_CONNECTION_STATUS*);
    HRESULT GetSSID(PWSTR*);
    HRESULT HasProfile(ubyte*);
    HRESULT GetProfileName(PWSTR*);
    HRESULT DeleteProfile();
    HRESULT GetSignalQuality(uint*, uint*);
    HRESULT GetSecuritySetting(IDot11AdHocSecuritySettings*);
    HRESULT GetContextGuid(GUID*);
    HRESULT GetSignature(GUID*);
    HRESULT GetInterface(IDot11AdHocInterface*);
    HRESULT Connect(const(wchar)*, int, BOOLEAN, BOOLEAN);
    HRESULT Disconnect();
}
enum IID_IDot11AdHocNetworkNotificationSink = GUID(0x8f10cc2a, 0xcf0d, 0x42a0, [0xac, 0xbe, 0xe2, 0xde, 0x70, 0x7, 0x38, 0x4d]);
interface IDot11AdHocNetworkNotificationSink : IUnknown
{
    HRESULT OnStatusChange(DOT11_ADHOC_NETWORK_CONNECTION_STATUS);
    HRESULT OnConnectFail(DOT11_ADHOC_CONNECT_FAIL_REASON);
}
enum IID_IDot11AdHocInterface = GUID(0x8f10cc2b, 0xcf0d, 0x42a0, [0xac, 0xbe, 0xe2, 0xde, 0x70, 0x7, 0x38, 0x4d]);
interface IDot11AdHocInterface : IUnknown
{
    HRESULT GetDeviceSignature(GUID*);
    HRESULT GetFriendlyName(PWSTR*);
    HRESULT IsDot11d(ubyte*);
    HRESULT IsAdHocCapable(ubyte*);
    HRESULT IsRadioOn(ubyte*);
    HRESULT GetActiveNetwork(IDot11AdHocNetwork*);
    HRESULT GetIEnumSecuritySettings(IEnumDot11AdHocSecuritySettings*);
    HRESULT GetIEnumDot11AdHocNetworks(GUID*, IEnumDot11AdHocNetworks*);
    HRESULT GetStatus(DOT11_ADHOC_NETWORK_CONNECTION_STATUS*);
}
enum IID_IEnumDot11AdHocInterfaces = GUID(0x8f10cc2c, 0xcf0d, 0x42a0, [0xac, 0xbe, 0xe2, 0xde, 0x70, 0x7, 0x38, 0x4d]);
interface IEnumDot11AdHocInterfaces : IUnknown
{
    HRESULT Next(uint, IDot11AdHocInterface*, uint*);
    HRESULT Skip(uint);
    HRESULT Reset();
    HRESULT Clone(IEnumDot11AdHocInterfaces*);
}
enum IID_IEnumDot11AdHocSecuritySettings = GUID(0x8f10cc2d, 0xcf0d, 0x42a0, [0xac, 0xbe, 0xe2, 0xde, 0x70, 0x7, 0x38, 0x4d]);
interface IEnumDot11AdHocSecuritySettings : IUnknown
{
    HRESULT Next(uint, IDot11AdHocSecuritySettings*, uint*);
    HRESULT Skip(uint);
    HRESULT Reset();
    HRESULT Clone(IEnumDot11AdHocSecuritySettings*);
}
enum IID_IDot11AdHocSecuritySettings = GUID(0x8f10cc2e, 0xcf0d, 0x42a0, [0xac, 0xbe, 0xe2, 0xde, 0x70, 0x7, 0x38, 0x4d]);
interface IDot11AdHocSecuritySettings : IUnknown
{
    HRESULT GetDot11AuthAlgorithm(DOT11_ADHOC_AUTH_ALGORITHM*);
    HRESULT GetDot11CipherAlgorithm(DOT11_ADHOC_CIPHER_ALGORITHM*);
}
enum IID_IDot11AdHocInterfaceNotificationSink = GUID(0x8f10cc2f, 0xcf0d, 0x42a0, [0xac, 0xbe, 0xe2, 0xde, 0x70, 0x7, 0x38, 0x4d]);
interface IDot11AdHocInterfaceNotificationSink : IUnknown
{
    HRESULT OnConnectionStatusChange(DOT11_ADHOC_NETWORK_CONNECTION_STATUS);
}
struct DOT11_ADAPTER
{
    GUID gAdapterId;
    PWSTR pszDescription;
    DOT11_CURRENT_OPERATION_MODE Dot11CurrentOpMode;
}
struct DOT11_BSS_LIST
{
    uint uNumOfBytes;
    ubyte* pucBuffer;
}
struct DOT11_PORT_STATE
{
    ubyte[6] PeerMacAddress;
    uint uSessionId;
    BOOL bPortControlled;
    BOOL bPortAuthorized;
}
struct DOT11_SECURITY_PACKET_HEADER
{
    align (1):
    ubyte[6] PeerMac;
    ushort usEtherType;
    ubyte[1] Data;
}
struct DOT11_MSSECURITY_SETTINGS
{
    DOT11_AUTH_ALGORITHM dot11AuthAlgorithm;
    DOT11_CIPHER_ALGORITHM dot11CipherAlgorithm;
    BOOL fOneXEnabled;
    EAP_METHOD_TYPE eapMethodType;
    uint dwEapConnectionDataLen;
    ubyte* pEapConnectionData;
}
struct DOT11EXT_IHV_SSID_LIST
{
    uint ulCount;
    DOT11_SSID[1] SSIDs;
}
struct DOT11EXT_IHV_PROFILE_PARAMS
{
    DOT11EXT_IHV_SSID_LIST* pSsidList;
    DOT11_BSS_TYPE BssType;
    DOT11_MSSECURITY_SETTINGS* pMSSecuritySettings;
}
struct DOT11EXT_IHV_PARAMS
{
    DOT11EXT_IHV_PROFILE_PARAMS dot11ExtIhvProfileParams;
    wchar[256] wstrProfileName;
    uint dwProfileTypeFlags;
    GUID interfaceGuid;
}
struct DOT11_IHV_VERSION_INFO
{
    uint dwVerMin;
    uint dwVerMax;
}
alias DOT11EXT_IHV_CONNECTION_PHASE = int;
enum : int
{
    connection_phase_any                = 0x00000000,
    connection_phase_initial_connection = 0x00000001,
    connection_phase_post_l3_connection = 0x00000002,
}

struct DOT11EXT_IHV_UI_REQUEST
{
    uint dwSessionId;
    GUID guidUIRequest;
    GUID UIPageClsid;
    uint dwByteCount;
    ubyte* pvUIRequest;
}
alias DOT11_MSONEX_RESULT = int;
enum : int
{
    DOT11_MSONEX_SUCCESS     = 0x00000000,
    DOT11_MSONEX_FAILURE     = 0x00000001,
    DOT11_MSONEX_IN_PROGRESS = 0x00000002,
}

struct DOT11_EAP_RESULT
{
    uint dwFailureReasonCode;
    EAP_ATTRIBUTES* pAttribArray;
}
struct DOT11_MSONEX_RESULT_PARAMS
{
    ONEX_AUTH_STATUS Dot11OnexAuthStatus;
    ONEX_REASON_CODE Dot11OneXReasonCode;
    ubyte* pbMPPESendKey;
    uint dwMPPESendKeyLen;
    ubyte* pbMPPERecvKey;
    uint dwMPPERecvKeyLen;
    DOT11_EAP_RESULT* pDot11EapResult;
}
struct DOT11EXT_IHV_CONNECTIVITY_PROFILE
{
    PWSTR pszXmlFragmentIhvConnectivity;
}
struct DOT11EXT_IHV_SECURITY_PROFILE
{
    PWSTR pszXmlFragmentIhvSecurity;
    BOOL bUseMSOnex;
}
struct DOT11EXT_IHV_DISCOVERY_PROFILE
{
    DOT11EXT_IHV_CONNECTIVITY_PROFILE IhvConnectivityProfile;
    DOT11EXT_IHV_SECURITY_PROFILE IhvSecurityProfile;
}
struct DOT11EXT_IHV_DISCOVERY_PROFILE_LIST
{
    uint dwCount;
    DOT11EXT_IHV_DISCOVERY_PROFILE* pIhvDiscoveryProfiles;
}
alias DOT11EXT_IHV_INDICATION_TYPE = int;
enum : int
{
    IndicationTypeNicSpecificNotification = 0x00000000,
    IndicationTypePmkidCandidateList      = 0x00000001,
    IndicationTypeTkipMicFailure          = 0x00000002,
    IndicationTypePhyStateChange          = 0x00000003,
    IndicationTypeLinkQuality             = 0x00000004,
}

struct DOT11EXT_VIRTUAL_STATION_AP_PROPERTY
{
    DOT11_SSID dot11SSID;
    DOT11_AUTH_ALGORITHM dot11AuthAlgo;
    DOT11_CIPHER_ALGORITHM dot11CipherAlgo;
    BOOL bIsPassPhrase;
    uint dwKeyLength;
    ubyte[64] ucKeyData;
}
struct WDIAG_IHV_WLAN_ID
{
    wchar[256] strProfileName;
    DOT11_SSID Ssid;
    DOT11_BSS_TYPE BssType;
    uint dwFlags;
    uint dwReasonCode;
}
alias DOT11EXT_ALLOCATE_BUFFER = uint function(uint, void**);
alias DOT11EXT_FREE_BUFFER = void function(void*);
alias DOT11EXT_SET_PROFILE_CUSTOM_USER_DATA = uint function(HANDLE, HANDLE, uint, uint, void*);
alias DOT11EXT_GET_PROFILE_CUSTOM_USER_DATA = uint function(HANDLE, HANDLE, uint, uint*, void**);
alias DOT11EXT_SET_CURRENT_PROFILE = uint function(HANDLE, HANDLE, DOT11EXT_IHV_CONNECTIVITY_PROFILE*, DOT11EXT_IHV_SECURITY_PROFILE*);
alias DOT11EXT_SEND_UI_REQUEST = uint function(HANDLE, DOT11EXT_IHV_UI_REQUEST*);
alias DOT11EXT_PRE_ASSOCIATE_COMPLETION = uint function(HANDLE, HANDLE, uint, uint);
alias DOT11EXT_POST_ASSOCIATE_COMPLETION = uint function(HANDLE, HANDLE, ubyte**, uint, uint);
alias DOT11EXT_SEND_NOTIFICATION = uint function(HANDLE, L2_NOTIFICATION_DATA*);
alias DOT11EXT_SEND_PACKET = uint function(HANDLE, uint, void*, HANDLE);
alias DOT11EXT_SET_ETHERTYPE_HANDLING = uint function(HANDLE, uint, uint, DOT11_PRIVACY_EXEMPTION*, uint, ushort*);
alias DOT11EXT_SET_AUTH_ALGORITHM = uint function(HANDLE, uint);
alias DOT11EXT_SET_UNICAST_CIPHER_ALGORITHM = uint function(HANDLE, uint);
alias DOT11EXT_SET_MULTICAST_CIPHER_ALGORITHM = uint function(HANDLE, uint);
alias DOT11EXT_SET_DEFAULT_KEY = uint function(HANDLE, DOT11_CIPHER_DEFAULT_KEY_VALUE*, DOT11_DIRECTION);
alias DOT11EXT_SET_KEY_MAPPING_KEY = uint function(HANDLE, DOT11_CIPHER_KEY_MAPPING_KEY_VALUE*);
alias DOT11EXT_SET_DEFAULT_KEY_ID = uint function(HANDLE, uint);
alias DOT11EXT_SET_EXCLUDE_UNENCRYPTED = uint function(HANDLE, BOOL);
alias DOT11EXT_NIC_SPECIFIC_EXTENSION = uint function(HANDLE, uint, void*, uint*, void*);
alias DOT11EXT_ONEX_START = uint function(HANDLE, EAP_ATTRIBUTES*);
alias DOT11EXT_ONEX_STOP = uint function(HANDLE);
alias DOT11EXT_PROCESS_ONEX_PACKET = uint function(HANDLE, uint, void*);
alias DOT11EXT_REQUEST_VIRTUAL_STATION = uint function(HANDLE, void*);
alias DOT11EXT_RELEASE_VIRTUAL_STATION = uint function(HANDLE, void*);
alias DOT11EXT_QUERY_VIRTUAL_STATION_PROPERTIES = uint function(HANDLE, BOOL*, GUID*, void*);
alias DOT11EXT_SET_VIRTUAL_STATION_AP_PROPERTIES = uint function(HANDLE, HANDLE, uint, DOT11EXT_VIRTUAL_STATION_AP_PROPERTY*, void*);
alias DOT11EXTIHV_GET_VERSION_INFO = uint function(DOT11_IHV_VERSION_INFO*);
alias DOT11EXTIHV_INIT_SERVICE = uint function(uint, DOT11EXT_APIS*, void*, DOT11EXT_IHV_HANDLERS*);
alias DOT11EXTIHV_INIT_VIRTUAL_STATION = uint function(DOT11EXT_VIRTUAL_STATION_APIS*, void*);
alias DOT11EXTIHV_DEINIT_SERVICE = void function();
alias DOT11EXTIHV_INIT_ADAPTER = uint function(DOT11_ADAPTER*, HANDLE, HANDLE*);
alias DOT11EXTIHV_DEINIT_ADAPTER = void function(HANDLE);
alias DOT11EXTIHV_PERFORM_PRE_ASSOCIATE = uint function(HANDLE, HANDLE, DOT11EXT_IHV_PROFILE_PARAMS*, DOT11EXT_IHV_CONNECTIVITY_PROFILE*, DOT11EXT_IHV_SECURITY_PROFILE*, DOT11_BSS_LIST*, uint*);
alias DOT11EXTIHV_ADAPTER_RESET = uint function(HANDLE);
alias DOT11EXTIHV_PERFORM_POST_ASSOCIATE = uint function(HANDLE, HANDLE, DOT11_PORT_STATE*, uint, DOT11_ASSOCIATION_COMPLETION_PARAMETERS*);
alias DOT11EXTIHV_STOP_POST_ASSOCIATE = uint function(HANDLE, ubyte**, uint);
alias DOT11EXTIHV_VALIDATE_PROFILE = uint function(HANDLE, DOT11EXT_IHV_PROFILE_PARAMS*, DOT11EXT_IHV_CONNECTIVITY_PROFILE*, DOT11EXT_IHV_SECURITY_PROFILE*, uint*);
alias DOT11EXTIHV_PERFORM_CAPABILITY_MATCH = uint function(HANDLE, DOT11EXT_IHV_PROFILE_PARAMS*, DOT11EXT_IHV_CONNECTIVITY_PROFILE*, DOT11EXT_IHV_SECURITY_PROFILE*, DOT11_BSS_LIST*, uint*);
alias DOT11EXTIHV_CREATE_DISCOVERY_PROFILES = uint function(HANDLE, BOOL, DOT11EXT_IHV_PROFILE_PARAMS*, DOT11_BSS_LIST*, DOT11EXT_IHV_DISCOVERY_PROFILE_LIST*, uint*);
alias DOT11EXTIHV_PROCESS_SESSION_CHANGE = uint function(uint, WTSSESSION_NOTIFICATION*);
alias DOT11EXTIHV_RECEIVE_INDICATION = uint function(HANDLE, DOT11EXT_IHV_INDICATION_TYPE, uint, void*);
alias DOT11EXTIHV_RECEIVE_PACKET = uint function(HANDLE, uint, void*);
alias DOT11EXTIHV_SEND_PACKET_COMPLETION = uint function(HANDLE);
alias DOT11EXTIHV_IS_UI_REQUEST_PENDING = uint function(GUID, BOOL*);
alias DOT11EXTIHV_PROCESS_UI_RESPONSE = uint function(GUID, uint, void*);
alias DOT11EXTIHV_QUERY_UI_REQUEST = uint function(HANDLE, DOT11EXT_IHV_CONNECTION_PHASE, DOT11EXT_IHV_UI_REQUEST**);
alias DOT11EXTIHV_ONEX_INDICATE_RESULT = uint function(HANDLE, DOT11_MSONEX_RESULT, DOT11_MSONEX_RESULT_PARAMS*);
alias DOT11EXTIHV_CONTROL = uint function(HANDLE, uint, ubyte*, uint, ubyte*, uint*);
struct DOT11EXT_APIS
{
    DOT11EXT_ALLOCATE_BUFFER Dot11ExtAllocateBuffer;
    DOT11EXT_FREE_BUFFER Dot11ExtFreeBuffer;
    DOT11EXT_SET_PROFILE_CUSTOM_USER_DATA Dot11ExtSetProfileCustomUserData;
    DOT11EXT_GET_PROFILE_CUSTOM_USER_DATA Dot11ExtGetProfileCustomUserData;
    DOT11EXT_SET_CURRENT_PROFILE Dot11ExtSetCurrentProfile;
    DOT11EXT_SEND_UI_REQUEST Dot11ExtSendUIRequest;
    DOT11EXT_PRE_ASSOCIATE_COMPLETION Dot11ExtPreAssociateCompletion;
    DOT11EXT_POST_ASSOCIATE_COMPLETION Dot11ExtPostAssociateCompletion;
    DOT11EXT_SEND_NOTIFICATION Dot11ExtSendNotification;
    DOT11EXT_SEND_PACKET Dot11ExtSendPacket;
    DOT11EXT_SET_ETHERTYPE_HANDLING Dot11ExtSetEtherTypeHandling;
    DOT11EXT_SET_AUTH_ALGORITHM Dot11ExtSetAuthAlgorithm;
    DOT11EXT_SET_UNICAST_CIPHER_ALGORITHM Dot11ExtSetUnicastCipherAlgorithm;
    DOT11EXT_SET_MULTICAST_CIPHER_ALGORITHM Dot11ExtSetMulticastCipherAlgorithm;
    DOT11EXT_SET_DEFAULT_KEY Dot11ExtSetDefaultKey;
    DOT11EXT_SET_KEY_MAPPING_KEY Dot11ExtSetKeyMappingKey;
    DOT11EXT_SET_DEFAULT_KEY_ID Dot11ExtSetDefaultKeyId;
    DOT11EXT_NIC_SPECIFIC_EXTENSION Dot11ExtNicSpecificExtension;
    DOT11EXT_SET_EXCLUDE_UNENCRYPTED Dot11ExtSetExcludeUnencrypted;
    DOT11EXT_ONEX_START Dot11ExtStartOneX;
    DOT11EXT_ONEX_STOP Dot11ExtStopOneX;
    DOT11EXT_PROCESS_ONEX_PACKET Dot11ExtProcessSecurityPacket;
}
struct DOT11EXT_IHV_HANDLERS
{
    DOT11EXTIHV_DEINIT_SERVICE Dot11ExtIhvDeinitService;
    DOT11EXTIHV_INIT_ADAPTER Dot11ExtIhvInitAdapter;
    DOT11EXTIHV_DEINIT_ADAPTER Dot11ExtIhvDeinitAdapter;
    DOT11EXTIHV_PERFORM_PRE_ASSOCIATE Dot11ExtIhvPerformPreAssociate;
    DOT11EXTIHV_ADAPTER_RESET Dot11ExtIhvAdapterReset;
    DOT11EXTIHV_PERFORM_POST_ASSOCIATE Dot11ExtIhvPerformPostAssociate;
    DOT11EXTIHV_STOP_POST_ASSOCIATE Dot11ExtIhvStopPostAssociate;
    DOT11EXTIHV_VALIDATE_PROFILE Dot11ExtIhvValidateProfile;
    DOT11EXTIHV_PERFORM_CAPABILITY_MATCH Dot11ExtIhvPerformCapabilityMatch;
    DOT11EXTIHV_CREATE_DISCOVERY_PROFILES Dot11ExtIhvCreateDiscoveryProfiles;
    DOT11EXTIHV_PROCESS_SESSION_CHANGE Dot11ExtIhvProcessSessionChange;
    DOT11EXTIHV_RECEIVE_INDICATION Dot11ExtIhvReceiveIndication;
    DOT11EXTIHV_RECEIVE_PACKET Dot11ExtIhvReceivePacket;
    DOT11EXTIHV_SEND_PACKET_COMPLETION Dot11ExtIhvSendPacketCompletion;
    DOT11EXTIHV_IS_UI_REQUEST_PENDING Dot11ExtIhvIsUIRequestPending;
    DOT11EXTIHV_PROCESS_UI_RESPONSE Dot11ExtIhvProcessUIResponse;
    DOT11EXTIHV_QUERY_UI_REQUEST Dot11ExtIhvQueryUIRequest;
    DOT11EXTIHV_ONEX_INDICATE_RESULT Dot11ExtIhvOnexIndicateResult;
    DOT11EXTIHV_CONTROL Dot11ExtIhvControl;
}
struct DOT11EXT_VIRTUAL_STATION_APIS
{
    DOT11EXT_REQUEST_VIRTUAL_STATION Dot11ExtRequestVirtualStation;
    DOT11EXT_RELEASE_VIRTUAL_STATION Dot11ExtReleaseVirtualStation;
    DOT11EXT_QUERY_VIRTUAL_STATION_PROPERTIES Dot11ExtQueryVirtualStationProperties;
    DOT11EXT_SET_VIRTUAL_STATION_AP_PROPERTIES Dot11ExtSetVirtualStationAPProperties;
}
