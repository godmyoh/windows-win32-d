module windows.win32.ui.input.ime;

import windows.win32.guid : GUID;
import windows.win32.foundation : BOOL, BSTR, CHAR, HRESULT, HWND, LPARAM, LRESULT, POINT, PSTR, PWSTR, RECT, WPARAM;
import windows.win32.globalization : HIMC, HIMCC;
import windows.win32.graphics.gdi : HBITMAP, LOGFONTA, LOGFONTW;
import windows.win32.system.com : IClassFactory, IUnknown, SAFEARRAY;
import windows.win32.ui.textservices : HKL;
import windows.win32.ui.windowsandmessaging : HICON, MSG;

version (Windows):
extern (Windows):

alias SET_COMPOSITION_STRING_TYPE = uint;
enum : uint
{
    SCS_SETSTR               = 0x00000009,
    SCS_CHANGEATTR           = 0x00000012,
    SCS_CHANGECLAUSE         = 0x00000024,
    SCS_SETRECONVERTSTRING   = 0x00010000,
    SCS_QUERYRECONVERTSTRING = 0x00020000,
}

alias GET_GUIDE_LINE_TYPE = uint;
enum : uint
{
    GGL_LEVEL   = 0x00000001,
    GGL_INDEX   = 0x00000002,
    GGL_STRING  = 0x00000003,
    GGL_PRIVATE = 0x00000004,
}

alias NOTIFY_IME_INDEX = uint;
enum : uint
{
    CPS_CANCEL   = 0x00000004,
    CPS_COMPLETE = 0x00000001,
    CPS_CONVERT  = 0x00000002,
    CPS_REVERT   = 0x00000003,
}

alias NOTIFY_IME_ACTION = uint;
enum : uint
{
    NI_CHANGECANDIDATELIST    = 0x00000013,
    NI_CLOSECANDIDATE         = 0x00000011,
    NI_COMPOSITIONSTR         = 0x00000015,
    NI_IMEMENUSELECTED        = 0x00000018,
    NI_OPENCANDIDATE          = 0x00000010,
    NI_SELECTCANDIDATESTR     = 0x00000012,
    NI_SETCANDIDATE_PAGESIZE  = 0x00000017,
    NI_SETCANDIDATE_PAGESTART = 0x00000016,
}

alias GET_CONVERSION_LIST_FLAG = uint;
enum : uint
{
    GCL_CONVERSION        = 0x00000001,
    GCL_REVERSECONVERSION = 0x00000002,
    GCL_REVERSE_LENGTH    = 0x00000003,
}

alias IME_PAD_REQUEST_FLAGS = uint;
enum : uint
{
    IMEPADREQ_INSERTSTRING             = 0x00001001,
    IMEPADREQ_SENDCONTROL              = 0x00001004,
    IMEPADREQ_SETAPPLETSIZE            = 0x00001008,
    IMEPADREQ_GETCOMPOSITIONSTRING     = 0x00001006,
    IMEPADREQ_GETCOMPOSITIONSTRINGINFO = 0x0000100c,
    IMEPADREQ_DELETESTRING             = 0x00001010,
    IMEPADREQ_CHANGESTRING             = 0x00001011,
    IMEPADREQ_GETAPPLHWND              = 0x00001014,
    IMEPADREQ_FORCEIMEPADWINDOWSHOW    = 0x00001015,
    IMEPADREQ_POSTMODALNOTIFY          = 0x00001016,
    IMEPADREQ_GETDEFAULTUILANGID       = 0x00001017,
    IMEPADREQ_GETAPPLETUISTYLE         = 0x00001019,
    IMEPADREQ_SETAPPLETUISTYLE         = 0x0000101a,
    IMEPADREQ_ISAPPLETACTIVE           = 0x0000101b,
    IMEPADREQ_ISIMEPADWINDOWVISIBLE    = 0x0000101c,
    IMEPADREQ_SETAPPLETMINMAXSIZE      = 0x0000101d,
    IMEPADREQ_GETCONVERSIONSTATUS      = 0x0000101e,
    IMEPADREQ_GETVERSION               = 0x0000101f,
    IMEPADREQ_GETCURRENTIMEINFO        = 0x00001020,
}

alias IME_CONVERSION_MODE = uint;
enum : uint
{
    IME_CMODE_ALPHANUMERIC = 0x00000000,
    IME_CMODE_NATIVE       = 0x00000001,
    IME_CMODE_CHINESE      = 0x00000001,
    IME_CMODE_HANGUL       = 0x00000001,
    IME_CMODE_JAPANESE     = 0x00000001,
    IME_CMODE_KATAKANA     = 0x00000002,
    IME_CMODE_LANGUAGE     = 0x00000003,
    IME_CMODE_FULLSHAPE    = 0x00000008,
    IME_CMODE_ROMAN        = 0x00000010,
    IME_CMODE_CHARCODE     = 0x00000020,
    IME_CMODE_HANJACONVERT = 0x00000040,
    IME_CMODE_NATIVESYMBOL = 0x00000080,
    IME_CMODE_HANGEUL      = 0x00000001,
    IME_CMODE_SOFTKBD      = 0x00000080,
    IME_CMODE_NOCONVERSION = 0x00000100,
    IME_CMODE_EUDC         = 0x00000200,
    IME_CMODE_SYMBOL       = 0x00000400,
    IME_CMODE_FIXED        = 0x00000800,
    IME_CMODE_RESERVED     = 0xf0000000,
}

alias IME_SENTENCE_MODE = uint;
enum : uint
{
    IME_SMODE_NONE          = 0x00000000,
    IME_SMODE_PLAURALCLAUSE = 0x00000001,
    IME_SMODE_SINGLECONVERT = 0x00000002,
    IME_SMODE_AUTOMATIC     = 0x00000004,
    IME_SMODE_PHRASEPREDICT = 0x00000008,
    IME_SMODE_CONVERSATION  = 0x00000010,
    IME_SMODE_RESERVED      = 0x0000f000,
}

alias IME_COMPOSITION_STRING = uint;
enum : uint
{
    GCS_COMPREADSTR      = 0x00000001,
    GCS_COMPREADATTR     = 0x00000002,
    GCS_COMPREADCLAUSE   = 0x00000004,
    GCS_COMPSTR          = 0x00000008,
    GCS_COMPATTR         = 0x00000010,
    GCS_COMPCLAUSE       = 0x00000020,
    GCS_CURSORPOS        = 0x00000080,
    GCS_DELTASTART       = 0x00000100,
    GCS_RESULTREADSTR    = 0x00000200,
    GCS_RESULTREADCLAUSE = 0x00000400,
    GCS_RESULTSTR        = 0x00000800,
    GCS_RESULTCLAUSE     = 0x00001000,
}

alias IME_ESCAPE = uint;
enum : uint
{
    IME_ESC_QUERY_SUPPORT        = 0x00000003,
    IME_ESC_RESERVED_FIRST       = 0x00000004,
    IME_ESC_RESERVED_LAST        = 0x000007ff,
    IME_ESC_PRIVATE_FIRST        = 0x00000800,
    IME_ESC_PRIVATE_LAST         = 0x00000fff,
    IME_ESC_SEQUENCE_TO_INTERNAL = 0x00001001,
    IME_ESC_GET_EUDC_DICTIONARY  = 0x00001003,
    IME_ESC_SET_EUDC_DICTIONARY  = 0x00001004,
    IME_ESC_MAX_KEY              = 0x00001005,
    IME_ESC_IME_NAME             = 0x00001006,
    IME_ESC_SYNC_HOTKEY          = 0x00001007,
    IME_ESC_HANJA_MODE           = 0x00001008,
    IME_ESC_AUTOMATA             = 0x00001009,
    IME_ESC_PRIVATE_HOTKEY       = 0x0000100a,
    IME_ESC_GETHELPFILENAME      = 0x0000100b,
}

alias IME_HOTKEY_IDENTIFIER = uint;
enum : uint
{
    IME_CHOTKEY_IME_NONIME_TOGGLE     = 0x00000010,
    IME_CHOTKEY_SHAPE_TOGGLE          = 0x00000011,
    IME_CHOTKEY_SYMBOL_TOGGLE         = 0x00000012,
    IME_JHOTKEY_CLOSE_OPEN            = 0x00000030,
    IME_KHOTKEY_SHAPE_TOGGLE          = 0x00000050,
    IME_KHOTKEY_HANJACONVERT          = 0x00000051,
    IME_KHOTKEY_ENGLISH               = 0x00000052,
    IME_THOTKEY_IME_NONIME_TOGGLE     = 0x00000070,
    IME_THOTKEY_SHAPE_TOGGLE          = 0x00000071,
    IME_THOTKEY_SYMBOL_TOGGLE         = 0x00000072,
    IME_ITHOTKEY_RESEND_RESULTSTR     = 0x00000200,
    IME_ITHOTKEY_PREVIOUS_COMPOSITION = 0x00000201,
    IME_ITHOTKEY_UISTYLE_TOGGLE       = 0x00000202,
    IME_ITHOTKEY_RECONVERTSTRING      = 0x00000203,
}

HKL ImmInstallIMEA(const(char)*, const(char)*);
HKL ImmInstallIMEW(const(wchar)*, const(wchar)*);
HWND ImmGetDefaultIMEWnd(HWND);
uint ImmGetDescriptionA(HKL, PSTR, uint);
uint ImmGetDescriptionW(HKL, PWSTR, uint);
uint ImmGetIMEFileNameA(HKL, PSTR, uint);
uint ImmGetIMEFileNameW(HKL, PWSTR, uint);
uint ImmGetProperty(HKL, uint);
BOOL ImmIsIME(HKL);
BOOL ImmSimulateHotKey(HWND, IME_HOTKEY_IDENTIFIER);
HIMC ImmCreateContext();
BOOL ImmDestroyContext(HIMC);
HIMC ImmGetContext(HWND);
BOOL ImmReleaseContext(HWND, HIMC);
HIMC ImmAssociateContext(HWND, HIMC);
BOOL ImmAssociateContextEx(HWND, HIMC, uint);
int ImmGetCompositionStringA(HIMC, IME_COMPOSITION_STRING, void*, uint);
int ImmGetCompositionStringW(HIMC, IME_COMPOSITION_STRING, void*, uint);
BOOL ImmSetCompositionStringA(HIMC, SET_COMPOSITION_STRING_TYPE, void*, uint, void*, uint);
BOOL ImmSetCompositionStringW(HIMC, SET_COMPOSITION_STRING_TYPE, void*, uint, void*, uint);
uint ImmGetCandidateListCountA(HIMC, uint*);
uint ImmGetCandidateListCountW(HIMC, uint*);
uint ImmGetCandidateListA(HIMC, uint, CANDIDATELIST*, uint);
uint ImmGetCandidateListW(HIMC, uint, CANDIDATELIST*, uint);
uint ImmGetGuideLineA(HIMC, GET_GUIDE_LINE_TYPE, PSTR, uint);
uint ImmGetGuideLineW(HIMC, GET_GUIDE_LINE_TYPE, PWSTR, uint);
BOOL ImmGetConversionStatus(HIMC, IME_CONVERSION_MODE*, IME_SENTENCE_MODE*);
BOOL ImmSetConversionStatus(HIMC, IME_CONVERSION_MODE, IME_SENTENCE_MODE);
BOOL ImmGetOpenStatus(HIMC);
BOOL ImmSetOpenStatus(HIMC, BOOL);
BOOL ImmGetCompositionFontA(HIMC, LOGFONTA*);
BOOL ImmGetCompositionFontW(HIMC, LOGFONTW*);
BOOL ImmSetCompositionFontA(HIMC, LOGFONTA*);
BOOL ImmSetCompositionFontW(HIMC, LOGFONTW*);
BOOL ImmConfigureIMEA(HKL, HWND, uint, void*);
BOOL ImmConfigureIMEW(HKL, HWND, uint, void*);
LRESULT ImmEscapeA(HKL, HIMC, IME_ESCAPE, void*);
LRESULT ImmEscapeW(HKL, HIMC, IME_ESCAPE, void*);
uint ImmGetConversionListA(HKL, HIMC, const(char)*, CANDIDATELIST*, uint, GET_CONVERSION_LIST_FLAG);
uint ImmGetConversionListW(HKL, HIMC, const(wchar)*, CANDIDATELIST*, uint, GET_CONVERSION_LIST_FLAG);
BOOL ImmNotifyIME(HIMC, NOTIFY_IME_ACTION, NOTIFY_IME_INDEX, uint);
BOOL ImmGetStatusWindowPos(HIMC, POINT*);
BOOL ImmSetStatusWindowPos(HIMC, POINT*);
BOOL ImmGetCompositionWindow(HIMC, COMPOSITIONFORM*);
BOOL ImmSetCompositionWindow(HIMC, COMPOSITIONFORM*);
BOOL ImmGetCandidateWindow(HIMC, uint, CANDIDATEFORM*);
BOOL ImmSetCandidateWindow(HIMC, CANDIDATEFORM*);
BOOL ImmIsUIMessageA(HWND, uint, WPARAM, LPARAM);
BOOL ImmIsUIMessageW(HWND, uint, WPARAM, LPARAM);
uint ImmGetVirtualKey(HWND);
BOOL ImmRegisterWordA(HKL, const(char)*, uint, const(char)*);
BOOL ImmRegisterWordW(HKL, const(wchar)*, uint, const(wchar)*);
BOOL ImmUnregisterWordA(HKL, const(char)*, uint, const(char)*);
BOOL ImmUnregisterWordW(HKL, const(wchar)*, uint, const(wchar)*);
uint ImmGetRegisterWordStyleA(HKL, uint, STYLEBUFA*);
uint ImmGetRegisterWordStyleW(HKL, uint, STYLEBUFW*);
uint ImmEnumRegisterWordA(HKL, REGISTERWORDENUMPROCA, const(char)*, uint, const(char)*, void*);
uint ImmEnumRegisterWordW(HKL, REGISTERWORDENUMPROCW, const(wchar)*, uint, const(wchar)*, void*);
BOOL ImmDisableIME(uint);
BOOL ImmEnumInputContext(uint, IMCENUMPROC, LPARAM);
uint ImmGetImeMenuItemsA(HIMC, uint, uint, IMEMENUITEMINFOA*, IMEMENUITEMINFOA*, uint);
uint ImmGetImeMenuItemsW(HIMC, uint, uint, IMEMENUITEMINFOW*, IMEMENUITEMINFOW*, uint);
BOOL ImmDisableTextFrameService(uint);
BOOL ImmDisableLegacyIME();
BOOL ImmGetHotKey(uint, uint*, uint*, HKL*);
BOOL ImmSetHotKey(uint, uint, uint, HKL);
BOOL ImmGenerateMessage(HIMC);
LRESULT ImmRequestMessageA(HIMC, WPARAM, LPARAM);
LRESULT ImmRequestMessageW(HIMC, WPARAM, LPARAM);
HWND ImmCreateSoftKeyboard(uint, HWND, int, int);
BOOL ImmDestroySoftKeyboard(HWND);
BOOL ImmShowSoftKeyboard(HWND, int);
INPUTCONTEXT* ImmLockIMC(HIMC);
BOOL ImmUnlockIMC(HIMC);
uint ImmGetIMCLockCount(HIMC);
HIMCC ImmCreateIMCC(uint);
HIMCC ImmDestroyIMCC(HIMCC);
void* ImmLockIMCC(HIMCC);
BOOL ImmUnlockIMCC(HIMCC);
uint ImmGetIMCCLockCount(HIMCC);
HIMCC ImmReSizeIMCC(HIMCC, uint);
uint ImmGetIMCCSize(HIMCC);
enum CATID_MSIME_IImePadApplet_VER7 = GUID(0x4a0f8e31, 0xc3ee, 0x11d1, [0xaf, 0xef, 0x0, 0x80, 0x5f, 0xc, 0x8b, 0x6d]);
enum CATID_MSIME_IImePadApplet_VER80 = GUID(0x56f7a792, 0xfef1, 0x11d3, [0x84, 0x63, 0x0, 0xc0, 0x4f, 0x7a, 0x6, 0xe5]);
enum CATID_MSIME_IImePadApplet_VER81 = GUID(0x656520b0, 0xbb88, 0x11d4, [0x84, 0xc0, 0x0, 0xc0, 0x4f, 0x7a, 0x6, 0xe5]);
enum CATID_MSIME_IImePadApplet900 = GUID(0xfaae51bf, 0x5e5b, 0x4a1d, [0x8d, 0xe1, 0x17, 0xc1, 0xd9, 0xe1, 0x72, 0x8d]);
enum CATID_MSIME_IImePadApplet1000 = GUID(0xe081e1d6, 0x2389, 0x43cb, [0xb6, 0x6f, 0x60, 0x9f, 0x82, 0x3d, 0x9f, 0x9c]);
enum CATID_MSIME_IImePadApplet1200 = GUID(0xa47fb5fc, 0x7d15, 0x4223, [0xa7, 0x89, 0xb7, 0x81, 0xbf, 0x9a, 0xe6, 0x67]);
enum CATID_MSIME_IImePadApplet = GUID(0x7566cad1, 0x4ec9, 0x4478, [0x9f, 0xe9, 0x8e, 0xd7, 0x66, 0x61, 0x9e, 0xdf]);
enum FEID_NONE = 0x00000000;
enum FEID_CHINESE_TRADITIONAL = 0x00000001;
enum FEID_CHINESE_SIMPLIFIED = 0x00000002;
enum FEID_CHINESE_HONGKONG = 0x00000003;
enum FEID_CHINESE_SINGAPORE = 0x00000004;
enum FEID_JAPANESE = 0x00000005;
enum FEID_KOREAN = 0x00000006;
enum FEID_KOREAN_JOHAB = 0x00000007;
enum INFOMASK_NONE = 0x00000000;
enum INFOMASK_QUERY_CAND = 0x00000001;
enum INFOMASK_APPLY_CAND = 0x00000002;
enum INFOMASK_APPLY_CAND_EX = 0x00000004;
enum INFOMASK_STRING_FIX = 0x00010000;
enum INFOMASK_HIDE_CAND = 0x00020000;
enum INFOMASK_BLOCK_CAND = 0x00040000;
enum IMEFAREASTINFO_TYPE_DEFAULT = 0x00000000;
enum IMEFAREASTINFO_TYPE_READING = 0x00000001;
enum IMEFAREASTINFO_TYPE_COMMENT = 0x00000002;
enum IMEFAREASTINFO_TYPE_COSTTIME = 0x00000003;
enum CHARINFO_APPLETID_MASK = 0xff000000;
enum CHARINFO_FEID_MASK = 0x00f00000;
enum CHARINFO_CHARID_MASK = 0x0000ffff;
enum MAX_APPLETTITLE = 0x00000040;
enum MAX_FONTFACE = 0x00000020;
enum IPACFG_NONE = 0x00000000;
enum IPACFG_PROPERTY = 0x00000001;
enum IPACFG_HELP = 0x00000002;
enum IPACFG_TITLE = 0x00010000;
enum IPACFG_TITLEFONTFACE = 0x00020000;
enum IPACFG_CATEGORY = 0x00040000;
enum IPACFG_LANG = 0x00000010;
enum IPACID_NONE = 0x00000000;
enum IPACID_SOFTKEY = 0x00000001;
enum IPACID_HANDWRITING = 0x00000002;
enum IPACID_STROKESEARCH = 0x00000003;
enum IPACID_RADICALSEARCH = 0x00000004;
enum IPACID_SYMBOLSEARCH = 0x00000005;
enum IPACID_VOICE = 0x00000006;
enum IPACID_EPWING = 0x00000007;
enum IPACID_OCR = 0x00000008;
enum IPACID_CHARLIST = 0x00000009;
enum IPACID_USER = 0x00000100;
enum IMEPADREQ_FIRST = 0x00001000;
enum IMEPADREQ_INSERTSTRINGCANDIDATE = 0x00001002;
enum IMEPADREQ_INSERTITEMCANDIDATE = 0x00001003;
enum IMEPADREQ_SENDKEYCONTROL = 0x00001005;
enum IMEPADREQ_GETSELECTEDSTRING = 0x00001007;
enum IMEPADREQ_SETAPPLETDATA = 0x00001009;
enum IMEPADREQ_GETAPPLETDATA = 0x0000100a;
enum IMEPADREQ_SETTITLEFONT = 0x0000100b;
enum IMEPADREQ_GETCOMPOSITIONSTRINGID = 0x0000100d;
enum IMEPADREQ_INSERTSTRINGCANDIDATEINFO = 0x0000100e;
enum IMEPADREQ_CHANGESTRINGCANDIDATEINFO = 0x0000100f;
enum IMEPADREQ_INSERTSTRINGINFO = 0x00001012;
enum IMEPADREQ_CHANGESTRINGINFO = 0x00001013;
enum IMEPADREQ_GETCURRENTUILANGID = 0x00001018;
enum IMEPADCTRL_CONVERTALL = 0x00000001;
enum IMEPADCTRL_DETERMINALL = 0x00000002;
enum IMEPADCTRL_DETERMINCHAR = 0x00000003;
enum IMEPADCTRL_CLEARALL = 0x00000004;
enum IMEPADCTRL_CARETSET = 0x00000005;
enum IMEPADCTRL_CARETLEFT = 0x00000006;
enum IMEPADCTRL_CARETRIGHT = 0x00000007;
enum IMEPADCTRL_CARETTOP = 0x00000008;
enum IMEPADCTRL_CARETBOTTOM = 0x00000009;
enum IMEPADCTRL_CARETBACKSPACE = 0x0000000a;
enum IMEPADCTRL_CARETDELETE = 0x0000000b;
enum IMEPADCTRL_PHRASEDELETE = 0x0000000c;
enum IMEPADCTRL_INSERTSPACE = 0x0000000d;
enum IMEPADCTRL_INSERTFULLSPACE = 0x0000000e;
enum IMEPADCTRL_INSERTHALFSPACE = 0x0000000f;
enum IMEPADCTRL_ONIME = 0x00000010;
enum IMEPADCTRL_OFFIME = 0x00000011;
enum IMEPADCTRL_ONPRECONVERSION = 0x00000012;
enum IMEPADCTRL_OFFPRECONVERSION = 0x00000013;
enum IMEPADCTRL_PHONETICCANDIDATE = 0x00000014;
enum IMEKEYCTRLMASK_ALT = 0x00000001;
enum IMEKEYCTRLMASK_CTRL = 0x00000002;
enum IMEKEYCTRLMASK_SHIFT = 0x00000004;
enum IMEKEYCTRL_UP = 0x00000001;
enum IMEKEYCTRL_DOWN = 0x00000000;
enum IMEPN_FIRST = 0x00000100;
enum IMEPN_ACTIVATE = 0x00000101;
enum IMEPN_INACTIVATE = 0x00000102;
enum IMEPN_SHOW = 0x00000104;
enum IMEPN_HIDE = 0x00000105;
enum IMEPN_SIZECHANGING = 0x00000106;
enum IMEPN_SIZECHANGED = 0x00000107;
enum IMEPN_CONFIG = 0x00000108;
enum IMEPN_HELP = 0x00000109;
enum IMEPN_QUERYCAND = 0x0000010a;
enum IMEPN_APPLYCAND = 0x0000010b;
enum IMEPN_APPLYCANDEX = 0x0000010c;
enum IMEPN_SETTINGCHANGED = 0x0000010d;
enum IMEPN_USER = 0x00000164;
enum IPAWS_ENABLED = 0x00000001;
enum IPAWS_SIZINGNOTIFY = 0x00000004;
enum IPAWS_VERTICALFIXED = 0x00000100;
enum IPAWS_HORIZONTALFIXED = 0x00000200;
enum IPAWS_SIZEFIXED = 0x00000300;
enum IPAWS_MAXWIDTHFIXED = 0x00001000;
enum IPAWS_MAXHEIGHTFIXED = 0x00002000;
enum IPAWS_MAXSIZEFIXED = 0x00003000;
enum IPAWS_MINWIDTHFIXED = 0x00010000;
enum IPAWS_MINHEIGHTFIXED = 0x00020000;
enum IPAWS_MINSIZEFIXED = 0x00030000;
enum STYLE_DESCRIPTION_SIZE = 0x00000020;
enum IMEMENUITEM_STRING_SIZE = 0x00000050;
enum IMC_GETCANDIDATEPOS = 0x00000007;
enum IMC_SETCANDIDATEPOS = 0x00000008;
enum IMC_GETCOMPOSITIONFONT = 0x00000009;
enum IMC_SETCOMPOSITIONFONT = 0x0000000a;
enum IMC_GETCOMPOSITIONWINDOW = 0x0000000b;
enum IMC_SETCOMPOSITIONWINDOW = 0x0000000c;
enum IMC_GETSTATUSWINDOWPOS = 0x0000000f;
enum IMC_SETSTATUSWINDOWPOS = 0x00000010;
enum IMC_CLOSESTATUSWINDOW = 0x00000021;
enum IMC_OPENSTATUSWINDOW = 0x00000022;
enum NI_FINALIZECONVERSIONRESULT = 0x00000014;
enum ISC_SHOWUICANDIDATEWINDOW = 0x00000001;
enum ISC_SHOWUICOMPOSITIONWINDOW = 0x80000000;
enum ISC_SHOWUIGUIDELINE = 0x40000000;
enum ISC_SHOWUIALLCANDIDATEWINDOW = 0x0000000f;
enum ISC_SHOWUIALL = 0xc000000f;
enum MOD_LEFT = 0x00008000;
enum MOD_RIGHT = 0x00004000;
enum MOD_ON_KEYUP = 0x00000800;
enum MOD_IGNORE_ALL_MODIFIER = 0x00000400;
enum IME_HOTKEY_DSWITCH_FIRST = 0x00000100;
enum IME_HOTKEY_DSWITCH_LAST = 0x0000011f;
enum IME_HOTKEY_PRIVATE_FIRST = 0x00000200;
enum IME_HOTKEY_PRIVATE_LAST = 0x0000021f;
enum CS_INSERTCHAR = 0x00002000;
enum CS_NOMOVECARET = 0x00004000;
enum IMEVER_0310 = 0x0003000a;
enum IMEVER_0400 = 0x00040000;
enum IME_PROP_AT_CARET = 0x00010000;
enum IME_PROP_SPECIAL_UI = 0x00020000;
enum IME_PROP_CANDLIST_START_FROM_1 = 0x00040000;
enum IME_PROP_UNICODE = 0x00080000;
enum IME_PROP_COMPLETE_ON_UNSELECT = 0x00100000;
enum UI_CAP_2700 = 0x00000001;
enum UI_CAP_ROT90 = 0x00000002;
enum UI_CAP_ROTANY = 0x00000004;
enum SCS_CAP_COMPSTR = 0x00000001;
enum SCS_CAP_MAKEREAD = 0x00000002;
enum SCS_CAP_SETRECONVERTSTRING = 0x00000004;
enum SELECT_CAP_CONVERSION = 0x00000001;
enum SELECT_CAP_SENTENCE = 0x00000002;
enum GL_LEVEL_NOGUIDELINE = 0x00000000;
enum GL_LEVEL_FATAL = 0x00000001;
enum GL_LEVEL_ERROR = 0x00000002;
enum GL_LEVEL_WARNING = 0x00000003;
enum GL_LEVEL_INFORMATION = 0x00000004;
enum GL_ID_UNKNOWN = 0x00000000;
enum GL_ID_NOMODULE = 0x00000001;
enum GL_ID_NODICTIONARY = 0x00000010;
enum GL_ID_CANNOTSAVE = 0x00000011;
enum GL_ID_NOCONVERT = 0x00000020;
enum GL_ID_TYPINGERROR = 0x00000021;
enum GL_ID_TOOMANYSTROKE = 0x00000022;
enum GL_ID_READINGCONFLICT = 0x00000023;
enum GL_ID_INPUTREADING = 0x00000024;
enum GL_ID_INPUTRADICAL = 0x00000025;
enum GL_ID_INPUTCODE = 0x00000026;
enum GL_ID_INPUTSYMBOL = 0x00000027;
enum GL_ID_CHOOSECANDIDATE = 0x00000028;
enum GL_ID_REVERSECONVERSION = 0x00000029;
enum GL_ID_PRIVATE_FIRST = 0x00008000;
enum GL_ID_PRIVATE_LAST = 0x0000ffff;
enum ATTR_INPUT = 0x00000000;
enum ATTR_TARGET_CONVERTED = 0x00000001;
enum ATTR_CONVERTED = 0x00000002;
enum ATTR_TARGET_NOTCONVERTED = 0x00000003;
enum ATTR_INPUT_ERROR = 0x00000004;
enum ATTR_FIXEDCONVERTED = 0x00000005;
enum CFS_DEFAULT = 0x00000000;
enum CFS_RECT = 0x00000001;
enum CFS_POINT = 0x00000002;
enum CFS_FORCE_POSITION = 0x00000020;
enum CFS_CANDIDATEPOS = 0x00000040;
enum CFS_EXCLUDE = 0x00000080;
enum IME_CAND_UNKNOWN = 0x00000000;
enum IME_CAND_READ = 0x00000001;
enum IME_CAND_CODE = 0x00000002;
enum IME_CAND_MEANING = 0x00000003;
enum IME_CAND_RADICAL = 0x00000004;
enum IME_CAND_STROKE = 0x00000005;
enum IMN_CLOSESTATUSWINDOW = 0x00000001;
enum IMN_OPENSTATUSWINDOW = 0x00000002;
enum IMN_CHANGECANDIDATE = 0x00000003;
enum IMN_CLOSECANDIDATE = 0x00000004;
enum IMN_OPENCANDIDATE = 0x00000005;
enum IMN_SETCONVERSIONMODE = 0x00000006;
enum IMN_SETSENTENCEMODE = 0x00000007;
enum IMN_SETOPENSTATUS = 0x00000008;
enum IMN_SETCANDIDATEPOS = 0x00000009;
enum IMN_SETCOMPOSITIONFONT = 0x0000000a;
enum IMN_SETCOMPOSITIONWINDOW = 0x0000000b;
enum IMN_SETSTATUSWINDOWPOS = 0x0000000c;
enum IMN_GUIDELINE = 0x0000000d;
enum IMN_PRIVATE = 0x0000000e;
enum IMR_COMPOSITIONWINDOW = 0x00000001;
enum IMR_CANDIDATEWINDOW = 0x00000002;
enum IMR_COMPOSITIONFONT = 0x00000003;
enum IMR_RECONVERTSTRING = 0x00000004;
enum IMR_CONFIRMRECONVERTSTRING = 0x00000005;
enum IMR_QUERYCHARPOSITION = 0x00000006;
enum IMR_DOCUMENTFEED = 0x00000007;
enum IMM_ERROR_NODATA = 0xffffffffffffffff;
enum IMM_ERROR_GENERAL = 0xfffffffffffffffe;
enum IME_CONFIG_GENERAL = 0x00000001;
enum IME_CONFIG_REGISTERWORD = 0x00000002;
enum IME_CONFIG_SELECTDICTIONARY = 0x00000003;
enum IME_REGWORD_STYLE_EUDC = 0x00000001;
enum IME_REGWORD_STYLE_USER_FIRST = 0x80000000;
enum IME_REGWORD_STYLE_USER_LAST = 0xffffffff;
enum IACE_CHILDREN = 0x00000001;
enum IACE_DEFAULT = 0x00000010;
enum IACE_IGNORENOCONTEXT = 0x00000020;
enum IGIMIF_RIGHTMENU = 0x00000001;
enum IGIMII_CMODE = 0x00000001;
enum IGIMII_SMODE = 0x00000002;
enum IGIMII_CONFIGURE = 0x00000004;
enum IGIMII_TOOLS = 0x00000008;
enum IGIMII_HELP = 0x00000010;
enum IGIMII_OTHER = 0x00000020;
enum IGIMII_INPUTTOOLS = 0x00000040;
enum IMFT_RADIOCHECK = 0x00000001;
enum IMFT_SEPARATOR = 0x00000002;
enum IMFT_SUBMENU = 0x00000004;
enum SOFTKEYBOARD_TYPE_T1 = 0x00000001;
enum SOFTKEYBOARD_TYPE_C1 = 0x00000002;
enum IMMGWL_IMC = 0x00000000;
enum IMMGWLP_IMC = 0x00000000;
enum IMC_SETCONVERSIONMODE = 0x00000002;
enum IMC_SETSENTENCEMODE = 0x00000004;
enum IMC_SETOPENSTATUS = 0x00000006;
enum IMC_GETSOFTKBDFONT = 0x00000011;
enum IMC_SETSOFTKBDFONT = 0x00000012;
enum IMC_GETSOFTKBDPOS = 0x00000013;
enum IMC_SETSOFTKBDPOS = 0x00000014;
enum IMC_GETSOFTKBDSUBTYPE = 0x00000015;
enum IMC_SETSOFTKBDSUBTYPE = 0x00000016;
enum IMC_SETSOFTKBDDATA = 0x00000018;
enum NI_CONTEXTUPDATED = 0x00000003;
enum IME_SYSINFO_WINLOGON = 0x00000001;
enum INIT_STATUSWNDPOS = 0x00000001;
enum INIT_CONVERSION = 0x00000002;
enum INIT_SENTENCE = 0x00000004;
enum INIT_LOGFONT = 0x00000008;
enum INIT_COMPFORM = 0x00000010;
enum INIT_SOFTKBDPOS = 0x00000020;
enum IME_PROP_END_UNLOAD = 0x00000001;
enum IME_PROP_KBD_CHAR_FIRST = 0x00000002;
enum IME_PROP_IGNORE_UPKEYS = 0x00000004;
enum IME_PROP_NEED_ALTKEY = 0x00000008;
enum IME_PROP_NO_KEYS_ON_CLOSE = 0x00000010;
enum IME_PROP_ACCEPT_WIDE_VKEY = 0x00000020;
enum UI_CAP_SOFTKBD = 0x00010000;
enum IMN_SOFTKBDDESTROYED = 0x00000011;
enum IME_UI_CLASS_NAME_SIZE = 0x00000010;
enum IME_ESC_STRING_BUFFER_SIZE = 0x00000050;
enum szImeJapan = "MSIME.Japan";
enum szImeKorea = "MSIME.Korea";
enum szImeChina = "MSIME.China";
enum szImeTaiwan = "MSIME.Taiwan";
enum CLSID_VERSION_DEPENDENT_MSIME_JAPANESE = GUID(0x6a91029e, 0xaa49, 0x471b, [0xae, 0xe7, 0x7d, 0x33, 0x27, 0x85, 0x66, 0xd]);
enum IFEC_S_ALREADY_DEFAULT = 0x00047400;
enum FELANG_REQ_CONV = 0x00010000;
enum FELANG_REQ_RECONV = 0x00020000;
enum FELANG_REQ_REV = 0x00030000;
enum FELANG_CMODE_MONORUBY = 0x00000002;
enum FELANG_CMODE_NOPRUNING = 0x00000004;
enum FELANG_CMODE_KATAKANAOUT = 0x00000008;
enum FELANG_CMODE_HIRAGANAOUT = 0x00000000;
enum FELANG_CMODE_HALFWIDTHOUT = 0x00000010;
enum FELANG_CMODE_FULLWIDTHOUT = 0x00000020;
enum FELANG_CMODE_BOPOMOFO = 0x00000040;
enum FELANG_CMODE_HANGUL = 0x00000080;
enum FELANG_CMODE_PINYIN = 0x00000100;
enum FELANG_CMODE_PRECONV = 0x00000200;
enum FELANG_CMODE_RADICAL = 0x00000400;
enum FELANG_CMODE_UNKNOWNREADING = 0x00000800;
enum FELANG_CMODE_MERGECAND = 0x00001000;
enum FELANG_CMODE_ROMAN = 0x00002000;
enum FELANG_CMODE_BESTFIRST = 0x00004000;
enum FELANG_CMODE_USENOREVWORDS = 0x00008000;
enum FELANG_CMODE_NONE = 0x01000000;
enum FELANG_CMODE_PLAURALCLAUSE = 0x02000000;
enum FELANG_CMODE_SINGLECONVERT = 0x04000000;
enum FELANG_CMODE_AUTOMATIC = 0x08000000;
enum FELANG_CMODE_PHRASEPREDICT = 0x10000000;
enum FELANG_CMODE_CONVERSATION = 0x20000000;
enum FELANG_CMODE_NAME = 0x10000000;
enum FELANG_CMODE_NOINVISIBLECHAR = 0x40000000;
enum E_NOCAND = 0x00000030;
enum E_NOTENOUGH_BUFFER = 0x00000031;
enum E_NOTENOUGH_WDD = 0x00000032;
enum E_LARGEINPUT = 0x00000033;
enum FELANG_CLMN_WBREAK = 0x00000001;
enum FELANG_CLMN_NOWBREAK = 0x00000002;
enum FELANG_CLMN_PBREAK = 0x00000004;
enum FELANG_CLMN_NOPBREAK = 0x00000008;
enum FELANG_CLMN_FIXR = 0x00000010;
enum FELANG_CLMN_FIXD = 0x00000020;
enum FELANG_INVALD_PO = 0x0000ffff;
enum IFED_POS_NONE = 0x00000000;
enum IFED_POS_NOUN = 0x00000001;
enum IFED_POS_VERB = 0x00000002;
enum IFED_POS_ADJECTIVE = 0x00000004;
enum IFED_POS_ADJECTIVE_VERB = 0x00000008;
enum IFED_POS_ADVERB = 0x00000010;
enum IFED_POS_ADNOUN = 0x00000020;
enum IFED_POS_CONJUNCTION = 0x00000040;
enum IFED_POS_INTERJECTION = 0x00000080;
enum IFED_POS_INDEPENDENT = 0x000000ff;
enum IFED_POS_INFLECTIONALSUFFIX = 0x00000100;
enum IFED_POS_PREFIX = 0x00000200;
enum IFED_POS_SUFFIX = 0x00000400;
enum IFED_POS_AFFIX = 0x00000600;
enum IFED_POS_TANKANJI = 0x00000800;
enum IFED_POS_IDIOMS = 0x00001000;
enum IFED_POS_SYMBOLS = 0x00002000;
enum IFED_POS_PARTICLE = 0x00004000;
enum IFED_POS_AUXILIARY_VERB = 0x00008000;
enum IFED_POS_SUB_VERB = 0x00010000;
enum IFED_POS_DEPENDENT = 0x0001c000;
enum IFED_POS_ALL = 0x0001ffff;
enum IFED_SELECT_NONE = 0x00000000;
enum IFED_SELECT_READING = 0x00000001;
enum IFED_SELECT_DISPLAY = 0x00000002;
enum IFED_SELECT_POS = 0x00000004;
enum IFED_SELECT_COMMENT = 0x00000008;
enum IFED_SELECT_ALL = 0x0000000f;
enum IFED_REG_NONE = 0x00000000;
enum IFED_REG_USER = 0x00000001;
enum IFED_REG_AUTO = 0x00000002;
enum IFED_REG_GRAMMAR = 0x00000004;
enum IFED_REG_ALL = 0x00000007;
enum IFED_TYPE_NONE = 0x00000000;
enum IFED_TYPE_GENERAL = 0x00000001;
enum IFED_TYPE_NAMEPLACE = 0x00000002;
enum IFED_TYPE_SPEECH = 0x00000004;
enum IFED_TYPE_REVERSE = 0x00000008;
enum IFED_TYPE_ENGLISH = 0x00000010;
enum IFED_TYPE_ALL = 0x0000001f;
enum IFED_S_MORE_ENTRIES = 0x00047200;
enum IFED_S_EMPTY_DICTIONARY = 0x00047201;
enum IFED_S_WORD_EXISTS = 0x00047202;
enum IFED_S_COMMENT_CHANGED = 0x00047203;
enum IFED_E_NOT_FOUND = 0xffffffff80047300;
enum IFED_E_INVALID_FORMAT = 0xffffffff80047301;
enum IFED_E_OPEN_FAILED = 0xffffffff80047302;
enum IFED_E_WRITE_FAILED = 0xffffffff80047303;
enum IFED_E_NO_ENTRY = 0xffffffff80047304;
enum IFED_E_REGISTER_FAILED = 0xffffffff80047305;
enum IFED_E_NOT_USER_DIC = 0xffffffff80047306;
enum IFED_E_NOT_SUPPORTED = 0xffffffff80047307;
enum IFED_E_USER_COMMENT = 0xffffffff80047308;
enum IFED_E_REGISTER_ILLEGAL_POS = 0xffffffff80047309;
enum IFED_E_REGISTER_IMPROPER_WORD = 0xffffffff8004730a;
enum IFED_E_REGISTER_DISCONNECTED = 0xffffffff8004730b;
enum cbCommentMax = 0x00000100;
enum wchPrivate1 = 0x0000e000;
enum POS_UNDEFINED = 0x00000000;
enum JPOS_UNDEFINED = 0x00000000;
enum JPOS_MEISHI_FUTSU = 0x00000064;
enum JPOS_MEISHI_SAHEN = 0x00000065;
enum JPOS_MEISHI_ZAHEN = 0x00000066;
enum JPOS_MEISHI_KEIYOUDOUSHI = 0x00000067;
enum JPOS_HUKUSIMEISHI = 0x00000068;
enum JPOS_MEISA_KEIDOU = 0x00000069;
enum JPOS_JINMEI = 0x0000006a;
enum JPOS_JINMEI_SEI = 0x0000006b;
enum JPOS_JINMEI_MEI = 0x0000006c;
enum JPOS_CHIMEI = 0x0000006d;
enum JPOS_CHIMEI_KUNI = 0x0000006e;
enum JPOS_CHIMEI_KEN = 0x0000006f;
enum JPOS_CHIMEI_GUN = 0x00000070;
enum JPOS_CHIMEI_KU = 0x00000071;
enum JPOS_CHIMEI_SHI = 0x00000072;
enum JPOS_CHIMEI_MACHI = 0x00000073;
enum JPOS_CHIMEI_MURA = 0x00000074;
enum JPOS_CHIMEI_EKI = 0x00000075;
enum JPOS_SONOTA = 0x00000076;
enum JPOS_SHAMEI = 0x00000077;
enum JPOS_SOSHIKI = 0x00000078;
enum JPOS_KENCHIKU = 0x00000079;
enum JPOS_BUPPIN = 0x0000007a;
enum JPOS_DAIMEISHI = 0x0000007b;
enum JPOS_DAIMEISHI_NINSHOU = 0x0000007c;
enum JPOS_DAIMEISHI_SHIJI = 0x0000007d;
enum JPOS_KAZU = 0x0000007e;
enum JPOS_KAZU_SURYOU = 0x0000007f;
enum JPOS_KAZU_SUSHI = 0x00000080;
enum JPOS_5DAN_AWA = 0x000000c8;
enum JPOS_5DAN_KA = 0x000000c9;
enum JPOS_5DAN_GA = 0x000000ca;
enum JPOS_5DAN_SA = 0x000000cb;
enum JPOS_5DAN_TA = 0x000000cc;
enum JPOS_5DAN_NA = 0x000000cd;
enum JPOS_5DAN_BA = 0x000000ce;
enum JPOS_5DAN_MA = 0x000000cf;
enum JPOS_5DAN_RA = 0x000000d0;
enum JPOS_5DAN_AWAUON = 0x000000d1;
enum JPOS_5DAN_KASOKUON = 0x000000d2;
enum JPOS_5DAN_RAHEN = 0x000000d3;
enum JPOS_4DAN_HA = 0x000000d4;
enum JPOS_1DAN = 0x000000d5;
enum JPOS_TOKUSHU_KAHEN = 0x000000d6;
enum JPOS_TOKUSHU_SAHENSURU = 0x000000d7;
enum JPOS_TOKUSHU_SAHEN = 0x000000d8;
enum JPOS_TOKUSHU_ZAHEN = 0x000000d9;
enum JPOS_TOKUSHU_NAHEN = 0x000000da;
enum JPOS_KURU_KI = 0x000000db;
enum JPOS_KURU_KITA = 0x000000dc;
enum JPOS_KURU_KITARA = 0x000000dd;
enum JPOS_KURU_KITARI = 0x000000de;
enum JPOS_KURU_KITAROU = 0x000000df;
enum JPOS_KURU_KITE = 0x000000e0;
enum JPOS_KURU_KUREBA = 0x000000e1;
enum JPOS_KURU_KO = 0x000000e2;
enum JPOS_KURU_KOI = 0x000000e3;
enum JPOS_KURU_KOYOU = 0x000000e4;
enum JPOS_SURU_SA = 0x000000e5;
enum JPOS_SURU_SI = 0x000000e6;
enum JPOS_SURU_SITA = 0x000000e7;
enum JPOS_SURU_SITARA = 0x000000e8;
enum JPOS_SURU_SIATRI = 0x000000e9;
enum JPOS_SURU_SITAROU = 0x000000ea;
enum JPOS_SURU_SITE = 0x000000eb;
enum JPOS_SURU_SIYOU = 0x000000ec;
enum JPOS_SURU_SUREBA = 0x000000ed;
enum JPOS_SURU_SE = 0x000000ee;
enum JPOS_SURU_SEYO = 0x000000ef;
enum JPOS_KEIYOU = 0x0000012c;
enum JPOS_KEIYOU_GARU = 0x0000012d;
enum JPOS_KEIYOU_GE = 0x0000012e;
enum JPOS_KEIYOU_ME = 0x0000012f;
enum JPOS_KEIYOU_YUU = 0x00000130;
enum JPOS_KEIYOU_U = 0x00000131;
enum JPOS_KEIDOU = 0x00000190;
enum JPOS_KEIDOU_NO = 0x00000191;
enum JPOS_KEIDOU_TARU = 0x00000192;
enum JPOS_KEIDOU_GARU = 0x00000193;
enum JPOS_FUKUSHI = 0x000001f4;
enum JPOS_FUKUSHI_SAHEN = 0x000001f5;
enum JPOS_FUKUSHI_NI = 0x000001f6;
enum JPOS_FUKUSHI_NANO = 0x000001f7;
enum JPOS_FUKUSHI_DA = 0x000001f8;
enum JPOS_FUKUSHI_TO = 0x000001f9;
enum JPOS_FUKUSHI_TOSURU = 0x000001fa;
enum JPOS_RENTAISHI = 0x00000258;
enum JPOS_RENTAISHI_SHIJI = 0x00000259;
enum JPOS_SETSUZOKUSHI = 0x0000028a;
enum JPOS_KANDOUSHI = 0x0000029e;
enum JPOS_SETTOU = 0x000002bc;
enum JPOS_SETTOU_KAKU = 0x000002bd;
enum JPOS_SETTOU_SAI = 0x000002be;
enum JPOS_SETTOU_FUKU = 0x000002bf;
enum JPOS_SETTOU_MI = 0x000002c0;
enum JPOS_SETTOU_DAISHOU = 0x000002c1;
enum JPOS_SETTOU_KOUTEI = 0x000002c2;
enum JPOS_SETTOU_CHOUTAN = 0x000002c3;
enum JPOS_SETTOU_SHINKYU = 0x000002c4;
enum JPOS_SETTOU_JINMEI = 0x000002c5;
enum JPOS_SETTOU_CHIMEI = 0x000002c6;
enum JPOS_SETTOU_SONOTA = 0x000002c7;
enum JPOS_SETTOU_JOSUSHI = 0x000002c8;
enum JPOS_SETTOU_TEINEI_O = 0x000002c9;
enum JPOS_SETTOU_TEINEI_GO = 0x000002ca;
enum JPOS_SETTOU_TEINEI_ON = 0x000002cb;
enum JPOS_SETSUBI = 0x00000320;
enum JPOS_SETSUBI_TEKI = 0x00000321;
enum JPOS_SETSUBI_SEI = 0x00000322;
enum JPOS_SETSUBI_KA = 0x00000323;
enum JPOS_SETSUBI_CHU = 0x00000324;
enum JPOS_SETSUBI_FU = 0x00000325;
enum JPOS_SETSUBI_RYU = 0x00000326;
enum JPOS_SETSUBI_YOU = 0x00000327;
enum JPOS_SETSUBI_KATA = 0x00000328;
enum JPOS_SETSUBI_MEISHIRENDAKU = 0x00000329;
enum JPOS_SETSUBI_JINMEI = 0x0000032a;
enum JPOS_SETSUBI_CHIMEI = 0x0000032b;
enum JPOS_SETSUBI_KUNI = 0x0000032c;
enum JPOS_SETSUBI_KEN = 0x0000032d;
enum JPOS_SETSUBI_GUN = 0x0000032e;
enum JPOS_SETSUBI_KU = 0x0000032f;
enum JPOS_SETSUBI_SHI = 0x00000330;
enum JPOS_SETSUBI_MACHI = 0x00000331;
enum JPOS_SETSUBI_CHOU = 0x00000332;
enum JPOS_SETSUBI_MURA = 0x00000333;
enum JPOS_SETSUBI_SON = 0x00000334;
enum JPOS_SETSUBI_EKI = 0x00000335;
enum JPOS_SETSUBI_SONOTA = 0x00000336;
enum JPOS_SETSUBI_SHAMEI = 0x00000337;
enum JPOS_SETSUBI_SOSHIKI = 0x00000338;
enum JPOS_SETSUBI_KENCHIKU = 0x00000339;
enum JPOS_RENYOU_SETSUBI = 0x0000033a;
enum JPOS_SETSUBI_JOSUSHI = 0x0000033b;
enum JPOS_SETSUBI_JOSUSHIPLUS = 0x0000033c;
enum JPOS_SETSUBI_JIKAN = 0x0000033d;
enum JPOS_SETSUBI_JIKANPLUS = 0x0000033e;
enum JPOS_SETSUBI_TEINEI = 0x0000033f;
enum JPOS_SETSUBI_SAN = 0x00000340;
enum JPOS_SETSUBI_KUN = 0x00000341;
enum JPOS_SETSUBI_SAMA = 0x00000342;
enum JPOS_SETSUBI_DONO = 0x00000343;
enum JPOS_SETSUBI_FUKUSU = 0x00000344;
enum JPOS_SETSUBI_TACHI = 0x00000345;
enum JPOS_SETSUBI_RA = 0x00000346;
enum JPOS_TANKANJI = 0x00000384;
enum JPOS_TANKANJI_KAO = 0x00000385;
enum JPOS_KANYOUKU = 0x00000386;
enum JPOS_DOKURITSUGO = 0x00000387;
enum JPOS_FUTEIGO = 0x00000388;
enum JPOS_KIGOU = 0x00000389;
enum JPOS_EIJI = 0x0000038a;
enum JPOS_KUTEN = 0x0000038b;
enum JPOS_TOUTEN = 0x0000038c;
enum JPOS_KANJI = 0x0000038d;
enum JPOS_OPENBRACE = 0x0000038e;
enum JPOS_CLOSEBRACE = 0x0000038f;
enum JPOS_YOKUSEI = 0x00000390;
enum JPOS_TANSHUKU = 0x00000391;
enum VERSION_ID_JAPANESE = 0x01000000;
enum VERSION_ID_KOREAN = 0x02000000;
enum VERSION_ID_CHINESE_TRADITIONAL = 0x04000000;
enum VERSION_ID_CHINESE_SIMPLIFIED = 0x08000000;
enum RWM_SERVICE = "MSIMEService";
enum FID_MSIME_VERSION = 0x00000000;
enum RWM_UIREADY = "MSIMEUIReady";
enum RWM_MOUSE = "MSIMEMouseOperation";
enum VERSION_MOUSE_OPERATION = 0x00000001;
enum IMEMOUSERET_NOTHANDLED = 0xffffffffffffffff;
enum IMEMOUSE_VERSION = 0x000000ff;
enum IMEMOUSE_NONE = 0x00000000;
enum IMEMOUSE_LDOWN = 0x00000001;
enum IMEMOUSE_RDOWN = 0x00000002;
enum IMEMOUSE_MDOWN = 0x00000004;
enum IMEMOUSE_WUP = 0x00000010;
enum IMEMOUSE_WDOWN = 0x00000020;
enum RWM_RECONVERT = "MSIMEReconvert";
enum FID_RECONVERT_VERSION = 0x10000000;
enum VERSION_RECONVERSION = 0x00000001;
enum RWM_RECONVERTREQUEST = "MSIMEReconvertRequest";
enum VERSION_DOCUMENTFEED = 0x00000001;
enum RWM_DOCUMENTFEED = "MSIMEDocumentFeed";
enum VERSION_QUERYPOSITION = 0x00000001;
enum RWM_QUERYPOSITION = "MSIMEQueryPosition";
enum RWM_MODEBIAS = "MSIMEModeBias";
enum VERSION_MODEBIAS = 0x00000001;
enum MODEBIAS_GETVERSION = 0x00000000;
enum MODEBIAS_SETVALUE = 0x00000001;
enum MODEBIAS_GETVALUE = 0x00000002;
enum MODEBIASMODE_DEFAULT = 0x00000000;
enum MODEBIASMODE_FILENAME = 0x00000001;
enum MODEBIASMODE_READING = 0x00000002;
enum MODEBIASMODE_DIGIT = 0x00000004;
enum RWM_SHOWIMEPAD = "MSIMEShowImePad";
enum SHOWIMEPAD_DEFAULT = 0x00000000;
enum SHOWIMEPAD_CATEGORY = 0x00000001;
enum SHOWIMEPAD_GUID = 0x00000002;
enum RWM_KEYMAP = "MSIMEKeyMap";
enum RWM_CHGKEYMAP = "MSIMEChangeKeyMap";
enum RWM_NTFYKEYMAP = "MSIMENotifyKeyMap";
enum FID_MSIME_KMS_VERSION = 0x00000001;
enum FID_MSIME_KMS_INIT = 0x00000002;
enum FID_MSIME_KMS_TERM = 0x00000003;
enum FID_MSIME_KMS_DEL_KEYLIST = 0x00000004;
enum FID_MSIME_KMS_NOTIFY = 0x00000005;
enum FID_MSIME_KMS_GETMAP = 0x00000006;
enum FID_MSIME_KMS_INVOKE = 0x00000007;
enum FID_MSIME_KMS_SETMAP = 0x00000008;
enum FID_MSIME_KMS_FUNCDESC = 0x00000009;
enum FID_MSIME_KMS_GETMAPSEAMLESS = 0x0000000a;
enum FID_MSIME_KMS_GETMAPFAST = 0x0000000b;
enum IMEKMS_NOCOMPOSITION = 0x00000000;
enum IMEKMS_COMPOSITION = 0x00000001;
enum IMEKMS_SELECTION = 0x00000002;
enum IMEKMS_IMEOFF = 0x00000003;
enum IMEKMS_2NDLEVEL = 0x00000004;
enum IMEKMS_INPTGL = 0x00000005;
enum IMEKMS_CANDIDATE = 0x00000006;
enum IMEKMS_TYPECAND = 0x00000007;
enum RWM_RECONVERTOPTIONS = "MSIMEReconvertOptions";
enum RECONVOPT_NONE = 0x00000000;
enum RECONVOPT_USECANCELNOTIFY = 0x00000001;
enum GCSEX_CANCELRECONVERT = 0x10000000;
enum CLSID_ImePlugInDictDictionaryList_CHS = GUID(0x7bf0129b, 0x5bef, 0x4de4, [0x9b, 0xb, 0x5e, 0xdb, 0x66, 0xac, 0x2f, 0xa6]);
enum CLSID_ImePlugInDictDictionaryList_JPN = GUID(0x4fe2776b, 0xb0f9, 0x4396, [0xb5, 0xfc, 0xe9, 0xd4, 0xcf, 0x1e, 0xc1, 0x95]);
struct COMPOSITIONFORM
{
    uint dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
}
struct CANDIDATEFORM
{
    uint dwIndex;
    uint dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
}
struct CANDIDATELIST
{
    uint dwSize;
    uint dwStyle;
    uint dwCount;
    uint dwSelection;
    uint dwPageStart;
    uint dwPageSize;
    uint[1] dwOffset;
}
struct REGISTERWORDA
{
    PSTR lpReading;
    PSTR lpWord;
}
struct REGISTERWORDW
{
    PWSTR lpReading;
    PWSTR lpWord;
}
struct RECONVERTSTRING
{
    uint dwSize;
    uint dwVersion;
    uint dwStrLen;
    uint dwStrOffset;
    uint dwCompStrLen;
    uint dwCompStrOffset;
    uint dwTargetStrLen;
    uint dwTargetStrOffset;
}
struct STYLEBUFA
{
    uint dwStyle;
    CHAR[32] szDescription;
}
struct STYLEBUFW
{
    uint dwStyle;
    wchar[32] szDescription;
}
struct IMEMENUITEMINFOA
{
    uint cbSize;
    uint fType;
    uint fState;
    uint wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    uint dwItemData;
    CHAR[80] szString;
    HBITMAP hbmpItem;
}
struct IMEMENUITEMINFOW
{
    uint cbSize;
    uint fType;
    uint fState;
    uint wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    uint dwItemData;
    wchar[80] szString;
    HBITMAP hbmpItem;
}
struct IMECHARPOSITION
{
    uint dwSize;
    uint dwCharPos;
    POINT pt;
    uint cLineHeight;
    RECT rcDocument;
}
alias IMCENUMPROC = BOOL function(HIMC, LPARAM);
alias REGISTERWORDENUMPROCA = int function(const(char)*, uint, const(char)*, void*);
alias REGISTERWORDENUMPROCW = int function(const(wchar)*, uint, const(wchar)*, void*);
// [Not Found] IID_IFEClassFactory
interface IFEClassFactory : IClassFactory
{
}
struct IMEDLG
{
    align (1):
    int cbIMEDLG;
    HWND hwnd;
    PWSTR lpwstrWord;
    int nTabId;
}
enum IID_IFECommon = GUID(0x19f7151, 0xe6db, 0x11d0, [0x83, 0xc3, 0x0, 0xc0, 0x4f, 0xdd, 0xb8, 0x2e]);
interface IFECommon : IUnknown
{
    HRESULT IsDefaultIME(const(char)*, int);
    HRESULT SetDefaultIME();
    HRESULT InvokeWordRegDialog(IMEDLG*);
    HRESULT InvokeDictToolDialog(IMEDLG*);
}
struct WDD
{
    align (1):
    ushort wDispPos;
    union
    {
        align (1):
        ushort wReadPos;
        ushort wCompPos;
    }
    ushort cchDisp;
    union
    {
        align (1):
        ushort cchRead;
        ushort cchComp;
    }
    uint WDD_nReserve1;
    ushort nPos;
    ushort _bitfield0;
    void* pReserved;
}
struct MORRSLT
{
    align (1):
    uint dwSize;
    PWSTR pwchOutput;
    ushort cchOutput;
    union
    {
        align (1):
        PWSTR pwchRead;
        PWSTR pwchComp;
    }
    union
    {
        align (1):
        ushort cchRead;
        ushort cchComp;
    }
    ushort* pchInputPos;
    ushort* pchOutputIdxWDD;
    union
    {
        align (1):
        ushort* pchReadIdxWDD;
        ushort* pchCompIdxWDD;
    }
    ushort* paMonoRubyPos;
    WDD* pWDD;
    int cWDD;
    void* pPrivate;
    wchar[1] BLKBuff;
}
enum IID_IFELanguage = GUID(0x19f7152, 0xe6db, 0x11d0, [0x83, 0xc3, 0x0, 0xc0, 0x4f, 0xdd, 0xb8, 0x2e]);
interface IFELanguage : IUnknown
{
    HRESULT Open();
    HRESULT Close();
    HRESULT GetJMorphResult(uint, uint, int, const(wchar)*, uint*, MORRSLT**);
    HRESULT GetConversionModeCaps(uint*);
    HRESULT GetPhonetic(BSTR, int, int, BSTR*);
    HRESULT GetConversion(BSTR, int, int, BSTR*);
}
alias IMEREG = int;
enum : int
{
    IFED_REG_HEAD = 0x00000000,
    IFED_REG_TAIL = 0x00000001,
    IFED_REG_DEL  = 0x00000002,
}

alias IMEFMT = int;
enum : int
{
    IFED_UNKNOWN                   = 0x00000000,
    IFED_MSIME2_BIN_SYSTEM         = 0x00000001,
    IFED_MSIME2_BIN_USER           = 0x00000002,
    IFED_MSIME2_TEXT_USER          = 0x00000003,
    IFED_MSIME95_BIN_SYSTEM        = 0x00000004,
    IFED_MSIME95_BIN_USER          = 0x00000005,
    IFED_MSIME95_TEXT_USER         = 0x00000006,
    IFED_MSIME97_BIN_SYSTEM        = 0x00000007,
    IFED_MSIME97_BIN_USER          = 0x00000008,
    IFED_MSIME97_TEXT_USER         = 0x00000009,
    IFED_MSIME98_BIN_SYSTEM        = 0x0000000a,
    IFED_MSIME98_BIN_USER          = 0x0000000b,
    IFED_MSIME98_TEXT_USER         = 0x0000000c,
    IFED_ACTIVE_DICT               = 0x0000000d,
    IFED_ATOK9                     = 0x0000000e,
    IFED_ATOK10                    = 0x0000000f,
    IFED_NEC_AI_                   = 0x00000010,
    IFED_WX_II                     = 0x00000011,
    IFED_WX_III                    = 0x00000012,
    IFED_VJE_20                    = 0x00000013,
    IFED_MSIME98_SYSTEM_CE         = 0x00000014,
    IFED_MSIME_BIN_SYSTEM          = 0x00000015,
    IFED_MSIME_BIN_USER            = 0x00000016,
    IFED_MSIME_TEXT_USER           = 0x00000017,
    IFED_PIME2_BIN_USER            = 0x00000018,
    IFED_PIME2_BIN_SYSTEM          = 0x00000019,
    IFED_PIME2_BIN_STANDARD_SYSTEM = 0x0000001a,
}

alias IMEUCT = int;
enum : int
{
    IFED_UCT_NONE           = 0x00000000,
    IFED_UCT_STRING_SJIS    = 0x00000001,
    IFED_UCT_STRING_UNICODE = 0x00000002,
    IFED_UCT_USER_DEFINED   = 0x00000003,
    IFED_UCT_MAX            = 0x00000004,
}

struct IMEWRD
{
    align (1):
    PWSTR pwchReading;
    PWSTR pwchDisplay;
    union
    {
        align (1):
        uint ulPos;
        struct
        {
            align (1):
            ushort nPos1;
            ushort nPos2;
        }
    }
    uint[2] rgulAttrs;
    int cbComment;
    IMEUCT uct;
    void* pvComment;
}
struct IMESHF
{
    align (1):
    ushort cbShf;
    ushort verDic;
    CHAR[48] szTitle;
    CHAR[256] szDescription;
    CHAR[128] szCopyright;
}
struct POSTBL
{
    align (1):
    ushort nPos;
    ubyte* szName;
}
alias IMEREL = int;
enum : int
{
    IFED_REL_NONE               = 0x00000000,
    IFED_REL_NO                 = 0x00000001,
    IFED_REL_GA                 = 0x00000002,
    IFED_REL_WO                 = 0x00000003,
    IFED_REL_NI                 = 0x00000004,
    IFED_REL_DE                 = 0x00000005,
    IFED_REL_YORI               = 0x00000006,
    IFED_REL_KARA               = 0x00000007,
    IFED_REL_MADE               = 0x00000008,
    IFED_REL_HE                 = 0x00000009,
    IFED_REL_TO                 = 0x0000000a,
    IFED_REL_IDEOM              = 0x0000000b,
    IFED_REL_FUKU_YOUGEN        = 0x0000000c,
    IFED_REL_KEIYOU_YOUGEN      = 0x0000000d,
    IFED_REL_KEIDOU1_YOUGEN     = 0x0000000e,
    IFED_REL_KEIDOU2_YOUGEN     = 0x0000000f,
    IFED_REL_TAIGEN             = 0x00000010,
    IFED_REL_YOUGEN             = 0x00000011,
    IFED_REL_RENTAI_MEI         = 0x00000012,
    IFED_REL_RENSOU             = 0x00000013,
    IFED_REL_KEIYOU_TO_YOUGEN   = 0x00000014,
    IFED_REL_KEIYOU_TARU_YOUGEN = 0x00000015,
    IFED_REL_UNKNOWN1           = 0x00000016,
    IFED_REL_UNKNOWN2           = 0x00000017,
    IFED_REL_ALL                = 0x00000018,
}

struct IMEDP
{
    align (1):
    IMEWRD wrdModifier;
    IMEWRD wrdModifiee;
    IMEREL relID;
}
alias PFNLOG = BOOL function(IMEDP*, HRESULT);
enum IID_IFEDictionary = GUID(0x19f7153, 0xe6db, 0x11d0, [0x83, 0xc3, 0x0, 0xc0, 0x4f, 0xdd, 0xb8, 0x2e]);
interface IFEDictionary : IUnknown
{
    HRESULT Open(PSTR, IMESHF*);
    HRESULT Close();
    HRESULT GetHeader(PSTR, IMESHF*, IMEFMT*, uint*);
    HRESULT DisplayProperty(HWND);
    HRESULT GetPosTable(POSTBL**, int*);
    HRESULT GetWords(const(wchar)*, const(wchar)*, const(wchar)*, uint, uint, uint, ubyte*, uint, uint*);
    HRESULT NextWords(ubyte*, uint, uint*);
    HRESULT Create(const(char)*, IMESHF*);
    HRESULT SetHeader(IMESHF*);
    HRESULT ExistWord(IMEWRD*);
    HRESULT ExistDependency(IMEDP*);
    HRESULT RegisterWord(IMEREG, IMEWRD*);
    HRESULT RegisterDependency(IMEREG, IMEDP*);
    HRESULT GetDependencies(const(wchar)*, const(wchar)*, uint, const(wchar)*, const(wchar)*, uint, IMEREL, uint, ubyte*, uint, uint*);
    HRESULT NextDependencies(ubyte*, uint, uint*);
    HRESULT ConvertFromOldMSIME(const(char)*, PFNLOG, IMEREG);
    HRESULT ConvertFromUserToSys();
}
struct IMEKMSINIT
{
    align (1):
    int cbSize;
    HWND hWnd;
}
struct IMEKMSKEY
{
    align (1):
    uint dwStatus;
    uint dwCompStatus;
    uint dwVKEY;
    union
    {
        align (1):
        uint dwControl;
        uint dwNotUsed;
    }
    union
    {
        align (1):
        wchar[31] pwszDscr;
        wchar[31] pwszNoUse;
    }
}
struct IMEKMS
{
    align (1):
    int cbSize;
    HIMC hIMC;
    uint cKeyList;
    IMEKMSKEY* pKeyList;
}
struct IMEKMSNTFY
{
    align (1):
    int cbSize;
    HIMC hIMC;
    BOOL fSelect;
}
struct IMEKMSKMP
{
    align (1):
    int cbSize;
    HIMC hIMC;
    ushort idLang;
    ushort wVKStart;
    ushort wVKEnd;
    int cKeyList;
    IMEKMSKEY* pKeyList;
}
struct IMEKMSINVK
{
    align (1):
    int cbSize;
    HIMC hIMC;
    uint dwControl;
}
struct IMEKMSFUNCDESC
{
    align (1):
    int cbSize;
    ushort idLang;
    uint dwControl;
    wchar[128] pwszDescription;
}
alias fpCreateIFECommonInstanceType = HRESULT function(void**);
alias fpCreateIFELanguageInstanceType = HRESULT function(const(GUID)*, void**);
alias fpCreateIFEDictionaryInstanceType = HRESULT function(void**);
struct COMPOSITIONSTRING
{
    uint dwSize;
    uint dwCompReadAttrLen;
    uint dwCompReadAttrOffset;
    uint dwCompReadClauseLen;
    uint dwCompReadClauseOffset;
    uint dwCompReadStrLen;
    uint dwCompReadStrOffset;
    uint dwCompAttrLen;
    uint dwCompAttrOffset;
    uint dwCompClauseLen;
    uint dwCompClauseOffset;
    uint dwCompStrLen;
    uint dwCompStrOffset;
    uint dwCursorPos;
    uint dwDeltaStart;
    uint dwResultReadClauseLen;
    uint dwResultReadClauseOffset;
    uint dwResultReadStrLen;
    uint dwResultReadStrOffset;
    uint dwResultClauseLen;
    uint dwResultClauseOffset;
    uint dwResultStrLen;
    uint dwResultStrOffset;
    uint dwPrivateSize;
    uint dwPrivateOffset;
}
struct GUIDELINE
{
    uint dwSize;
    uint dwLevel;
    uint dwIndex;
    uint dwStrLen;
    uint dwStrOffset;
    uint dwPrivateSize;
    uint dwPrivateOffset;
}
struct TRANSMSG
{
    uint message;
    WPARAM wParam;
    LPARAM lParam;
}
struct TRANSMSGLIST
{
    uint uMsgCount;
    TRANSMSG[1] TransMsg;
}
struct CANDIDATEINFO
{
    uint dwSize;
    uint dwCount;
    uint[32] dwOffset;
    uint dwPrivateSize;
    uint dwPrivateOffset;
}
struct INPUTCONTEXT
{
    HWND hWnd;
    BOOL fOpen;
    POINT ptStatusWndPos;
    POINT ptSoftKbdPos;
    uint fdwConversion;
    uint fdwSentence;
    union _lfFont_e__Union
    {
        LOGFONTA A;
        LOGFONTW W;
    }
    COMPOSITIONFORM cfCompForm;
    CANDIDATEFORM[4] cfCandForm;
    HIMCC hCompStr;
    HIMCC hCandInfo;
    HIMCC hGuideLine;
    HIMCC hPrivate;
    uint dwNumMsgBuf;
    HIMCC hMsgBuf;
    uint fdwInit;
    uint[3] dwReserve;
}
struct IMEINFO
{
    uint dwPrivateDataSize;
    uint fdwProperty;
    uint fdwConversionCaps;
    uint fdwSentenceCaps;
    uint fdwUICaps;
    uint fdwSCSCaps;
    uint fdwSelectCaps;
}
struct SOFTKBDDATA
{
    uint uCount;
    ushort[256] wCode;
}
struct APPLETIDLIST
{
    int count;
    GUID* pIIDList;
}
struct IMESTRINGCANDIDATE
{
    uint uCount;
    PWSTR[1] lpwstr;
}
struct IMEITEM
{
    int cbSize;
    int iType;
    void* lpItemData;
}
struct IMEITEMCANDIDATE
{
    uint uCount;
    IMEITEM[1] imeItem;
}
struct IMESTRINGINFO
{
    uint dwFarEastId;
    PWSTR lpwstr;
}
struct IMEFAREASTINFO
{
    uint dwSize;
    uint dwType;
    uint[1] dwData;
}
struct IMESTRINGCANDIDATEINFO
{
    uint dwFarEastId;
    IMEFAREASTINFO* lpFarEastInfo;
    uint fInfoMask;
    int iSelIndex;
    uint uCount;
    PWSTR[1] lpwstr;
}
struct IMECOMPOSITIONSTRINGINFO
{
    int iCompStrLen;
    int iCaretPos;
    int iEditStart;
    int iEditLen;
    int iTargetStart;
    int iTargetLen;
}
struct IMECHARINFO
{
    wchar wch;
    uint dwCharInfo;
}
struct IMEAPPLETCFG
{
    uint dwConfig;
    wchar[64] wchTitle;
    wchar[32] wchTitleFontFace;
    uint dwCharSet;
    int iCategory;
    HICON hIcon;
    ushort langID;
    ushort dummy;
    LPARAM lReserved1;
}
struct IMEAPPLETUI
{
    HWND hwnd;
    uint dwStyle;
    int width;
    int height;
    int minWidth;
    int minHeight;
    int maxWidth;
    int maxHeight;
    LPARAM lReserved1;
    LPARAM lReserved2;
}
struct APPLYCANDEXPARAM
{
    uint dwSize;
    PWSTR lpwstrDisplay;
    PWSTR lpwstrReading;
    uint dwReserved;
}
enum IID_IImeSpecifyApplets = GUID(0x5d8e643c, 0xc3a9, 0x11d1, [0xaf, 0xef, 0x0, 0x80, 0x5f, 0xc, 0x8b, 0x6d]);
interface IImeSpecifyApplets : IUnknown
{
    HRESULT GetAppletIIDList(const(GUID)*, APPLETIDLIST*);
}
enum IID_IImePadApplet = GUID(0x5d8e643b, 0xc3a9, 0x11d1, [0xaf, 0xef, 0x0, 0x80, 0x5f, 0xc, 0x8b, 0x6d]);
interface IImePadApplet : IUnknown
{
    HRESULT Initialize(IUnknown);
    HRESULT Terminate();
    HRESULT GetAppletConfig(IMEAPPLETCFG*);
    HRESULT CreateUI(HWND, IMEAPPLETUI*);
    HRESULT Notify(IUnknown, int, WPARAM, LPARAM);
}
enum IID_IImePad = GUID(0x5d8e643a, 0xc3a9, 0x11d1, [0xaf, 0xef, 0x0, 0x80, 0x5f, 0xc, 0x8b, 0x6d]);
interface IImePad : IUnknown
{
    HRESULT Request(IImePadApplet, int, WPARAM, LPARAM);
}
enum IID_IImePlugInDictDictionaryList = GUID(0x98752974, 0xb0a6, 0x489b, [0x8f, 0x6f, 0xbf, 0xf3, 0x76, 0x9c, 0x8e, 0xeb]);
interface IImePlugInDictDictionaryList : IUnknown
{
    HRESULT GetDictionariesInUse(SAFEARRAY**, SAFEARRAY**, SAFEARRAY**);
    HRESULT DeleteDictionary(BSTR);
}
enum IID_IEnumRegisterWordA = GUID(0x8c03412, 0xf96b, 0x11d0, [0xa4, 0x75, 0x0, 0xaa, 0x0, 0x6b, 0xcc, 0x59]);
interface IEnumRegisterWordA : IUnknown
{
    HRESULT Clone(IEnumRegisterWordA*);
    HRESULT Next(uint, REGISTERWORDA*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
}
enum IID_IEnumRegisterWordW = GUID(0x4955dd31, 0xb159, 0x11d0, [0x8f, 0xcf, 0x0, 0xaa, 0x0, 0x6b, 0xcc, 0x59]);
interface IEnumRegisterWordW : IUnknown
{
    HRESULT Clone(IEnumRegisterWordW*);
    HRESULT Next(uint, REGISTERWORDW*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
}
enum IID_IEnumInputContext = GUID(0x9b5eab0, 0xf997, 0x11d1, [0x93, 0xd4, 0x0, 0x60, 0xb0, 0x67, 0xb8, 0x6e]);
interface IEnumInputContext : IUnknown
{
    HRESULT Clone(IEnumInputContext*);
    HRESULT Next(uint, HIMC*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
}
enum IID_IActiveIMMRegistrar = GUID(0xb3458082, 0xbd00, 0x11d1, [0x93, 0x9b, 0x0, 0x60, 0xb0, 0x67, 0xb8, 0x6e]);
interface IActiveIMMRegistrar : IUnknown
{
    HRESULT RegisterIME(const(GUID)*, ushort, const(wchar)*, const(wchar)*);
    HRESULT UnregisterIME(const(GUID)*);
}
enum IID_IActiveIMMMessagePumpOwner = GUID(0xb5cf2cfa, 0x8aeb, 0x11d1, [0x93, 0x64, 0x0, 0x60, 0xb0, 0x67, 0xb8, 0x6e]);
interface IActiveIMMMessagePumpOwner : IUnknown
{
    HRESULT Start();
    HRESULT End();
    HRESULT OnTranslateMessage(const(MSG)*);
    HRESULT Pause(uint*);
    HRESULT Resume(uint);
}
enum IID_IActiveIMMApp = GUID(0x8c0e040, 0x62d1, 0x11d1, [0x93, 0x26, 0x0, 0x60, 0xb0, 0x67, 0xb8, 0x6e]);
interface IActiveIMMApp : IUnknown
{
    HRESULT AssociateContext(HWND, HIMC, HIMC*);
    HRESULT ConfigureIMEA(HKL, HWND, uint, REGISTERWORDA*);
    HRESULT ConfigureIMEW(HKL, HWND, uint, REGISTERWORDW*);
    HRESULT CreateContext(HIMC*);
    HRESULT DestroyContext(HIMC);
    HRESULT EnumRegisterWordA(HKL, PSTR, uint, PSTR, void*, IEnumRegisterWordA*);
    HRESULT EnumRegisterWordW(HKL, PWSTR, uint, PWSTR, void*, IEnumRegisterWordW*);
    HRESULT EscapeA(HKL, HIMC, uint, void*, LRESULT*);
    HRESULT EscapeW(HKL, HIMC, uint, void*, LRESULT*);
    HRESULT GetCandidateListA(HIMC, uint, uint, CANDIDATELIST*, uint*);
    HRESULT GetCandidateListW(HIMC, uint, uint, CANDIDATELIST*, uint*);
    HRESULT GetCandidateListCountA(HIMC, uint*, uint*);
    HRESULT GetCandidateListCountW(HIMC, uint*, uint*);
    HRESULT GetCandidateWindow(HIMC, uint, CANDIDATEFORM*);
    HRESULT GetCompositionFontA(HIMC, LOGFONTA*);
    HRESULT GetCompositionFontW(HIMC, LOGFONTW*);
    HRESULT GetCompositionStringA(HIMC, uint, uint, int*, void*);
    HRESULT GetCompositionStringW(HIMC, uint, uint, int*, void*);
    HRESULT GetCompositionWindow(HIMC, COMPOSITIONFORM*);
    HRESULT GetContext(HWND, HIMC*);
    HRESULT GetConversionListA(HKL, HIMC, PSTR, uint, uint, CANDIDATELIST*, uint*);
    HRESULT GetConversionListW(HKL, HIMC, PWSTR, uint, uint, CANDIDATELIST*, uint*);
    HRESULT GetConversionStatus(HIMC, uint*, uint*);
    HRESULT GetDefaultIMEWnd(HWND, HWND*);
    HRESULT GetDescriptionA(HKL, uint, PSTR, uint*);
    HRESULT GetDescriptionW(HKL, uint, PWSTR, uint*);
    HRESULT GetGuideLineA(HIMC, uint, uint, PSTR, uint*);
    HRESULT GetGuideLineW(HIMC, uint, uint, PWSTR, uint*);
    HRESULT GetIMEFileNameA(HKL, uint, PSTR, uint*);
    HRESULT GetIMEFileNameW(HKL, uint, PWSTR, uint*);
    HRESULT GetOpenStatus(HIMC);
    HRESULT GetProperty(HKL, uint, uint*);
    HRESULT GetRegisterWordStyleA(HKL, uint, STYLEBUFA*, uint*);
    HRESULT GetRegisterWordStyleW(HKL, uint, STYLEBUFW*, uint*);
    HRESULT GetStatusWindowPos(HIMC, POINT*);
    HRESULT GetVirtualKey(HWND, uint*);
    HRESULT InstallIMEA(PSTR, PSTR, HKL*);
    HRESULT InstallIMEW(PWSTR, PWSTR, HKL*);
    HRESULT IsIME(HKL);
    HRESULT IsUIMessageA(HWND, uint, WPARAM, LPARAM);
    HRESULT IsUIMessageW(HWND, uint, WPARAM, LPARAM);
    HRESULT NotifyIME(HIMC, uint, uint, uint);
    HRESULT RegisterWordA(HKL, PSTR, uint, PSTR);
    HRESULT RegisterWordW(HKL, PWSTR, uint, PWSTR);
    HRESULT ReleaseContext(HWND, HIMC);
    HRESULT SetCandidateWindow(HIMC, CANDIDATEFORM*);
    HRESULT SetCompositionFontA(HIMC, LOGFONTA*);
    HRESULT SetCompositionFontW(HIMC, LOGFONTW*);
    HRESULT SetCompositionStringA(HIMC, uint, void*, uint, void*, uint);
    HRESULT SetCompositionStringW(HIMC, uint, void*, uint, void*, uint);
    HRESULT SetCompositionWindow(HIMC, COMPOSITIONFORM*);
    HRESULT SetConversionStatus(HIMC, uint, uint);
    HRESULT SetOpenStatus(HIMC, BOOL);
    HRESULT SetStatusWindowPos(HIMC, POINT*);
    HRESULT SimulateHotKey(HWND, uint);
    HRESULT UnregisterWordA(HKL, PSTR, uint, PSTR);
    HRESULT UnregisterWordW(HKL, PWSTR, uint, PWSTR);
    HRESULT Activate(BOOL);
    HRESULT Deactivate();
    HRESULT OnDefWindowProc(HWND, uint, WPARAM, LPARAM, LRESULT*);
    HRESULT FilterClientWindows(ushort*, uint);
    HRESULT GetCodePageA(HKL, uint*);
    HRESULT GetLangId(HKL, ushort*);
    HRESULT AssociateContextEx(HWND, HIMC, uint);
    HRESULT DisableIME(uint);
    HRESULT GetImeMenuItemsA(HIMC, uint, uint, IMEMENUITEMINFOA*, IMEMENUITEMINFOA*, uint, uint*);
    HRESULT GetImeMenuItemsW(HIMC, uint, uint, IMEMENUITEMINFOW*, IMEMENUITEMINFOW*, uint, uint*);
    HRESULT EnumInputContext(uint, IEnumInputContext*);
}
enum IID_IActiveIMMIME = GUID(0x8c03411, 0xf96b, 0x11d0, [0xa4, 0x75, 0x0, 0xaa, 0x0, 0x6b, 0xcc, 0x59]);
interface IActiveIMMIME : IUnknown
{
    HRESULT AssociateContext(HWND, HIMC, HIMC*);
    HRESULT ConfigureIMEA(HKL, HWND, uint, REGISTERWORDA*);
    HRESULT ConfigureIMEW(HKL, HWND, uint, REGISTERWORDW*);
    HRESULT CreateContext(HIMC*);
    HRESULT DestroyContext(HIMC);
    HRESULT EnumRegisterWordA(HKL, PSTR, uint, PSTR, void*, IEnumRegisterWordA*);
    HRESULT EnumRegisterWordW(HKL, PWSTR, uint, PWSTR, void*, IEnumRegisterWordW*);
    HRESULT EscapeA(HKL, HIMC, uint, void*, LRESULT*);
    HRESULT EscapeW(HKL, HIMC, uint, void*, LRESULT*);
    HRESULT GetCandidateListA(HIMC, uint, uint, CANDIDATELIST*, uint*);
    HRESULT GetCandidateListW(HIMC, uint, uint, CANDIDATELIST*, uint*);
    HRESULT GetCandidateListCountA(HIMC, uint*, uint*);
    HRESULT GetCandidateListCountW(HIMC, uint*, uint*);
    HRESULT GetCandidateWindow(HIMC, uint, CANDIDATEFORM*);
    HRESULT GetCompositionFontA(HIMC, LOGFONTA*);
    HRESULT GetCompositionFontW(HIMC, LOGFONTW*);
    HRESULT GetCompositionStringA(HIMC, uint, uint, int*, void*);
    HRESULT GetCompositionStringW(HIMC, uint, uint, int*, void*);
    HRESULT GetCompositionWindow(HIMC, COMPOSITIONFORM*);
    HRESULT GetContext(HWND, HIMC*);
    HRESULT GetConversionListA(HKL, HIMC, PSTR, uint, uint, CANDIDATELIST*, uint*);
    HRESULT GetConversionListW(HKL, HIMC, PWSTR, uint, uint, CANDIDATELIST*, uint*);
    HRESULT GetConversionStatus(HIMC, uint*, uint*);
    HRESULT GetDefaultIMEWnd(HWND, HWND*);
    HRESULT GetDescriptionA(HKL, uint, PSTR, uint*);
    HRESULT GetDescriptionW(HKL, uint, PWSTR, uint*);
    HRESULT GetGuideLineA(HIMC, uint, uint, PSTR, uint*);
    HRESULT GetGuideLineW(HIMC, uint, uint, PWSTR, uint*);
    HRESULT GetIMEFileNameA(HKL, uint, PSTR, uint*);
    HRESULT GetIMEFileNameW(HKL, uint, PWSTR, uint*);
    HRESULT GetOpenStatus(HIMC);
    HRESULT GetProperty(HKL, uint, uint*);
    HRESULT GetRegisterWordStyleA(HKL, uint, STYLEBUFA*, uint*);
    HRESULT GetRegisterWordStyleW(HKL, uint, STYLEBUFW*, uint*);
    HRESULT GetStatusWindowPos(HIMC, POINT*);
    HRESULT GetVirtualKey(HWND, uint*);
    HRESULT InstallIMEA(PSTR, PSTR, HKL*);
    HRESULT InstallIMEW(PWSTR, PWSTR, HKL*);
    HRESULT IsIME(HKL);
    HRESULT IsUIMessageA(HWND, uint, WPARAM, LPARAM);
    HRESULT IsUIMessageW(HWND, uint, WPARAM, LPARAM);
    HRESULT NotifyIME(HIMC, uint, uint, uint);
    HRESULT RegisterWordA(HKL, PSTR, uint, PSTR);
    HRESULT RegisterWordW(HKL, PWSTR, uint, PWSTR);
    HRESULT ReleaseContext(HWND, HIMC);
    HRESULT SetCandidateWindow(HIMC, CANDIDATEFORM*);
    HRESULT SetCompositionFontA(HIMC, LOGFONTA*);
    HRESULT SetCompositionFontW(HIMC, LOGFONTW*);
    HRESULT SetCompositionStringA(HIMC, uint, void*, uint, void*, uint);
    HRESULT SetCompositionStringW(HIMC, uint, void*, uint, void*, uint);
    HRESULT SetCompositionWindow(HIMC, COMPOSITIONFORM*);
    HRESULT SetConversionStatus(HIMC, uint, uint);
    HRESULT SetOpenStatus(HIMC, BOOL);
    HRESULT SetStatusWindowPos(HIMC, POINT*);
    HRESULT SimulateHotKey(HWND, uint);
    HRESULT UnregisterWordA(HKL, PSTR, uint, PSTR);
    HRESULT UnregisterWordW(HKL, PWSTR, uint, PWSTR);
    HRESULT GenerateMessage(HIMC);
    HRESULT LockIMC(HIMC, INPUTCONTEXT**);
    HRESULT UnlockIMC(HIMC);
    HRESULT GetIMCLockCount(HIMC, uint*);
    HRESULT CreateIMCC(uint, HIMCC*);
    HRESULT DestroyIMCC(HIMCC);
    HRESULT LockIMCC(HIMCC, void**);
    HRESULT UnlockIMCC(HIMCC);
    HRESULT ReSizeIMCC(HIMCC, uint, HIMCC*);
    HRESULT GetIMCCSize(HIMCC, uint*);
    HRESULT GetIMCCLockCount(HIMCC, uint*);
    HRESULT GetHotKey(uint, uint*, uint*, HKL*);
    HRESULT SetHotKey(uint, uint, uint, HKL);
    HRESULT CreateSoftKeyboard(uint, HWND, int, int, HWND*);
    HRESULT DestroySoftKeyboard(HWND);
    HRESULT ShowSoftKeyboard(HWND, int);
    HRESULT GetCodePageA(HKL, uint*);
    HRESULT GetLangId(HKL, ushort*);
    HRESULT KeybdEvent(ushort, ubyte, ubyte, uint, uint);
    HRESULT LockModal();
    HRESULT UnlockModal();
    HRESULT AssociateContextEx(HWND, HIMC, uint);
    HRESULT DisableIME(uint);
    HRESULT GetImeMenuItemsA(HIMC, uint, uint, IMEMENUITEMINFOA*, IMEMENUITEMINFOA*, uint, uint*);
    HRESULT GetImeMenuItemsW(HIMC, uint, uint, IMEMENUITEMINFOW*, IMEMENUITEMINFOW*, uint, uint*);
    HRESULT EnumInputContext(uint, IEnumInputContext*);
    HRESULT RequestMessageA(HIMC, WPARAM, LPARAM, LRESULT*);
    HRESULT RequestMessageW(HIMC, WPARAM, LPARAM, LRESULT*);
    HRESULT SendIMCA(HWND, uint, WPARAM, LPARAM, LRESULT*);
    HRESULT SendIMCW(HWND, uint, WPARAM, LPARAM, LRESULT*);
    HRESULT IsSleeping();
}
enum IID_IActiveIME = GUID(0x6fe20962, 0xd077, 0x11d0, [0x8f, 0xe7, 0x0, 0xaa, 0x0, 0x6b, 0xcc, 0x59]);
interface IActiveIME : IUnknown
{
    HRESULT Inquire(uint, IMEINFO*, PWSTR, uint*);
    HRESULT ConversionList(HIMC, PWSTR, uint, uint, CANDIDATELIST*, uint*);
    HRESULT Configure(HKL, HWND, uint, REGISTERWORDW*);
    HRESULT Destroy(uint);
    HRESULT Escape(HIMC, uint, void*, LRESULT*);
    HRESULT SetActiveContext(HIMC, BOOL);
    HRESULT ProcessKey(HIMC, uint, uint, ubyte*);
    HRESULT Notify(HIMC, uint, uint, uint);
    HRESULT Select(HIMC, BOOL);
    HRESULT SetCompositionString(HIMC, uint, void*, uint, void*, uint);
    HRESULT ToAsciiEx(uint, uint, ubyte*, uint, HIMC, uint*, uint*);
    HRESULT RegisterWord(PWSTR, uint, PWSTR);
    HRESULT UnregisterWord(PWSTR, uint, PWSTR);
    HRESULT GetRegisterWordStyle(uint, STYLEBUFW*, uint*);
    HRESULT EnumRegisterWord(PWSTR, uint, PWSTR, void*, IEnumRegisterWordW*);
    HRESULT GetCodePageA(uint*);
    HRESULT GetLangId(ushort*);
}
enum IID_IActiveIME2 = GUID(0xe1c4bf0e, 0x2d53, 0x11d2, [0x93, 0xe1, 0x0, 0x60, 0xb0, 0x67, 0xb8, 0x6e]);
interface IActiveIME2 : IActiveIME
{
    HRESULT Sleep();
    HRESULT Unsleep(BOOL);
}
enum CLSID_CActiveIMM = GUID(0x4955dd33, 0xb159, 0x11d0, [0x8f, 0xcf, 0x0, 0xaa, 0x0, 0x6b, 0xcc, 0x59]);
struct CActiveIMM
{
}
