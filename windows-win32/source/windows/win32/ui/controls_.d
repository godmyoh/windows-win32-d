module windows.win32.ui.controls_;

import windows.win32.guid : GUID;
import windows.win32.foundation : BOOL, CHAR, COLORREF, HANDLE, HINSTANCE, HRESULT, HWND, LPARAM, LRESULT, POINT, PSTR, PWSTR, RECT, SIZE, SYSTEMTIME, WPARAM;
import windows.win32.graphics.gdi : BLENDFUNCTION, DRAWEDGE_FLAGS, DRAW_EDGE_FLAGS, DRAW_TEXT_FORMAT, HBITMAP, HBRUSH, HDC, HFONT, HMONITOR, HPALETTE, HPEN, HRGN, LOGFONTW, RGBQUAD, TEXTMETRICW;
import windows.win32.system.com_ : IStream, IUnknown;
import windows.win32.system.registry : HKEY;
import windows.win32.ui.input.pointer : POINTER_PEN_INFO, POINTER_TOUCH_INFO;
import windows.win32.ui.windowsandmessaging : DLGPROC, DLGTEMPLATE, HICON, HMENU, IMAGE_FLAGS, POINTER_INPUT_TYPE, SCROLLBAR_CONSTANTS, SCROLLINFO, WINDOWPOS;

version (Windows):
extern (Windows):

HPROPSHEETPAGE CreatePropertySheetPageA(PROPSHEETPAGEA*);
HPROPSHEETPAGE CreatePropertySheetPageW(PROPSHEETPAGEW*);
BOOL DestroyPropertySheetPage(HPROPSHEETPAGE);
long PropertySheetA(PROPSHEETHEADERA_V2*);
long PropertySheetW(PROPSHEETHEADERW_V2*);
void InitCommonControls();
BOOL InitCommonControlsEx(const(INITCOMMONCONTROLSEX)*);
HIMAGELIST ImageList_Create(int, int, IMAGELIST_CREATION_FLAGS, int, int);
BOOL ImageList_Destroy(HIMAGELIST);
int ImageList_GetImageCount(HIMAGELIST);
BOOL ImageList_SetImageCount(HIMAGELIST, uint);
int ImageList_Add(HIMAGELIST, HBITMAP, HBITMAP);
int ImageList_ReplaceIcon(HIMAGELIST, int, HICON);
COLORREF ImageList_SetBkColor(HIMAGELIST, COLORREF);
COLORREF ImageList_GetBkColor(HIMAGELIST);
BOOL ImageList_SetOverlayImage(HIMAGELIST, int, int);
BOOL ImageList_Draw(HIMAGELIST, int, HDC, int, int, IMAGE_LIST_DRAW_STYLE);
BOOL ImageList_Replace(HIMAGELIST, int, HBITMAP, HBITMAP);
int ImageList_AddMasked(HIMAGELIST, HBITMAP, COLORREF);
BOOL ImageList_DrawEx(HIMAGELIST, int, HDC, int, int, int, int, COLORREF, COLORREF, IMAGE_LIST_DRAW_STYLE);
BOOL ImageList_DrawIndirect(IMAGELISTDRAWPARAMS*);
BOOL ImageList_Remove(HIMAGELIST, int);
HICON ImageList_GetIcon(HIMAGELIST, int, uint);
HIMAGELIST ImageList_LoadImageA(HINSTANCE, const(char)*, int, int, COLORREF, uint, IMAGE_FLAGS);
HIMAGELIST ImageList_LoadImageW(HINSTANCE, const(wchar)*, int, int, COLORREF, uint, IMAGE_FLAGS);
BOOL ImageList_Copy(HIMAGELIST, int, HIMAGELIST, int, IMAGE_LIST_COPY_FLAGS);
BOOL ImageList_BeginDrag(HIMAGELIST, int, int, int);
void ImageList_EndDrag();
BOOL ImageList_DragEnter(HWND, int, int);
BOOL ImageList_DragLeave(HWND);
BOOL ImageList_DragMove(int, int);
BOOL ImageList_SetDragCursorImage(HIMAGELIST, int, int, int);
BOOL ImageList_DragShowNolock(BOOL);
HIMAGELIST ImageList_GetDragImage(POINT*, POINT*);
HIMAGELIST ImageList_Read(IStream);
BOOL ImageList_Write(HIMAGELIST, IStream);
HRESULT ImageList_ReadEx(uint, IStream, const(GUID)*, void**);
HRESULT ImageList_WriteEx(HIMAGELIST, IMAGE_LIST_WRITE_STREAM_FLAGS, IStream);
BOOL ImageList_GetIconSize(HIMAGELIST, int*, int*);
BOOL ImageList_SetIconSize(HIMAGELIST, int, int);
BOOL ImageList_GetImageInfo(HIMAGELIST, int, IMAGEINFO*);
HIMAGELIST ImageList_Merge(HIMAGELIST, int, HIMAGELIST, int, int, int);
HIMAGELIST ImageList_Duplicate(HIMAGELIST);
HRESULT HIMAGELIST_QueryInterface(HIMAGELIST, const(GUID)*, void**);
HWND CreateToolbarEx(HWND, uint, uint, int, HINSTANCE, ulong, TBBUTTON*, int, int, int, int, int, uint);
HBITMAP CreateMappedBitmap(HINSTANCE, long, uint, COLORMAP*, int);
void DrawStatusTextA(HDC, RECT*, const(char)*, uint);
void DrawStatusTextW(HDC, RECT*, const(wchar)*, uint);
HWND CreateStatusWindowA(int, const(char)*, HWND, uint);
HWND CreateStatusWindowW(int, const(wchar)*, HWND, uint);
void MenuHelp(uint, WPARAM, LPARAM, HMENU, HINSTANCE, HWND, uint*);
BOOL ShowHideMenuCtl(HWND, ulong, int*);
void GetEffectiveClientRect(HWND, RECT*, const(int)*);
BOOL MakeDragList(HWND);
void DrawInsert(HWND, HWND, int);
int LBItemFromPt(HWND, POINT, BOOL);
HWND CreateUpDownControl(uint, int, int, int, int, HWND, int, HINSTANCE, HWND, int, int, int);
HRESULT TaskDialogIndirect(const(TASKDIALOGCONFIG)*, int*, int*, BOOL*);
HRESULT TaskDialog(HWND, HINSTANCE, const(wchar)*, const(wchar)*, const(wchar)*, TASKDIALOG_COMMON_BUTTON_FLAGS, const(wchar)*, int*);
void InitMUILanguage(ushort);
ushort GetMUILanguage();
HDSA DSA_Create(int, int);
BOOL DSA_Destroy(HDSA);
void DSA_DestroyCallback(HDSA, PFNDAENUMCALLBACK, void*);
BOOL DSA_DeleteItem(HDSA, int);
BOOL DSA_DeleteAllItems(HDSA);
void DSA_EnumCallback(HDSA, PFNDAENUMCALLBACK, void*);
int DSA_InsertItem(HDSA, int, const(void)*);
void* DSA_GetItemPtr(HDSA, int);
BOOL DSA_GetItem(HDSA, int, void*);
BOOL DSA_SetItem(HDSA, int, const(void)*);
HDSA DSA_Clone(HDSA);
ulong DSA_GetSize(HDSA);
BOOL DSA_Sort(HDSA, PFNDACOMPARE, LPARAM);
HDPA DPA_Create(int);
HDPA DPA_CreateEx(int, HANDLE);
HDPA DPA_Clone(const(HDPA), HDPA);
BOOL DPA_Destroy(HDPA);
void DPA_DestroyCallback(HDPA, PFNDAENUMCALLBACK, void*);
void* DPA_DeletePtr(HDPA, int);
BOOL DPA_DeleteAllPtrs(HDPA);
void DPA_EnumCallback(HDPA, PFNDAENUMCALLBACK, void*);
BOOL DPA_Grow(HDPA, int);
int DPA_InsertPtr(HDPA, int, void*);
BOOL DPA_SetPtr(HDPA, int, void*);
void* DPA_GetPtr(HDPA, long);
int DPA_GetPtrIndex(HDPA, const(void)*);
ulong DPA_GetSize(HDPA);
BOOL DPA_Sort(HDPA, PFNDACOMPARE, LPARAM);
HRESULT DPA_LoadStream(HDPA*, PFNDPASTREAM, IStream, void*);
HRESULT DPA_SaveStream(HDPA, PFNDPASTREAM, IStream, void*);
BOOL DPA_Merge(HDPA, HDPA, uint, PFNDACOMPARE, PFNDPAMERGE, LPARAM);
int DPA_Search(HDPA, void*, int, PFNDACOMPARE, LPARAM, uint);
BOOL Str_SetPtrW(PWSTR*, const(wchar)*);
BOOL FlatSB_EnableScrollBar(HWND, int, uint);
BOOL FlatSB_ShowScrollBar(HWND, SCROLLBAR_CONSTANTS, BOOL);
BOOL FlatSB_GetScrollRange(HWND, SCROLLBAR_CONSTANTS, int*, int*);
BOOL FlatSB_GetScrollInfo(HWND, SCROLLBAR_CONSTANTS, SCROLLINFO*);
int FlatSB_GetScrollPos(HWND, SCROLLBAR_CONSTANTS);
BOOL FlatSB_GetScrollProp(HWND, WSB_PROP, int*);
int FlatSB_SetScrollPos(HWND, SCROLLBAR_CONSTANTS, int, BOOL);
int FlatSB_SetScrollInfo(HWND, SCROLLBAR_CONSTANTS, SCROLLINFO*, BOOL);
int FlatSB_SetScrollRange(HWND, SCROLLBAR_CONSTANTS, int, int, BOOL);
BOOL FlatSB_SetScrollProp(HWND, WSB_PROP, long, BOOL);
BOOL InitializeFlatSB(HWND);
HRESULT UninitializeFlatSB(HWND);
HRESULT LoadIconMetric(HINSTANCE, const(wchar)*, _LI_METRIC, HICON*);
HRESULT LoadIconWithScaleDown(HINSTANCE, const(wchar)*, int, int, HICON*);
int DrawShadowText(HDC, const(wchar)*, uint, RECT*, uint, COLORREF, COLORREF, int, int);
HRESULT ImageList_CoCreateInstance(const(GUID)*, const(IUnknown), const(GUID)*, void**);
BOOL BeginPanningFeedback(HWND);
BOOL UpdatePanningFeedback(HWND, int, int, BOOL);
BOOL EndPanningFeedback(HWND, BOOL);
HRESULT GetThemeAnimationProperty(long, int, int, TA_PROPERTY, void*, uint, uint*);
HRESULT GetThemeAnimationTransform(long, int, int, uint, TA_TRANSFORM*, uint, uint*);
HRESULT GetThemeTimingFunction(long, int, TA_TIMINGFUNCTION*, uint, uint*);
long OpenThemeData(HWND, const(wchar)*);
long OpenThemeDataEx(HWND, const(wchar)*, OPEN_THEME_DATA_FLAGS);
HRESULT CloseThemeData(long);
HRESULT DrawThemeBackground(long, HDC, int, int, RECT*, RECT*);
HRESULT DrawThemeBackgroundEx(long, HDC, int, int, RECT*, const(DTBGOPTS)*);
HRESULT DrawThemeText(long, HDC, int, int, const(wchar)*, int, DRAW_TEXT_FORMAT, uint, RECT*);
HRESULT GetThemeBackgroundContentRect(long, HDC, int, int, RECT*, RECT*);
HRESULT GetThemeBackgroundExtent(long, HDC, int, int, RECT*, RECT*);
HRESULT GetThemeBackgroundRegion(long, HDC, int, int, RECT*, HRGN*);
HRESULT GetThemePartSize(long, HDC, int, int, RECT*, THEMESIZE, SIZE*);
HRESULT GetThemeTextExtent(long, HDC, int, int, const(wchar)*, int, DRAW_TEXT_FORMAT, RECT*, RECT*);
HRESULT GetThemeTextMetrics(long, HDC, int, int, TEXTMETRICW*);
HRESULT HitTestThemeBackground(long, HDC, int, int, HIT_TEST_BACKGROUND_OPTIONS, RECT*, HRGN, POINT, ushort*);
HRESULT DrawThemeEdge(long, HDC, int, int, RECT*, DRAWEDGE_FLAGS, DRAW_EDGE_FLAGS, RECT*);
HRESULT DrawThemeIcon(long, HDC, int, int, RECT*, HIMAGELIST, int);
BOOL IsThemePartDefined(long, int, int);
BOOL IsThemeBackgroundPartiallyTransparent(long, int, int);
HRESULT GetThemeColor(long, int, int, THEME_PROPERTY_SYMBOL_ID, COLORREF*);
HRESULT GetThemeMetric(long, HDC, int, int, THEME_PROPERTY_SYMBOL_ID, int*);
HRESULT GetThemeString(long, int, int, int, PWSTR, int);
HRESULT GetThemeBool(long, int, int, THEME_PROPERTY_SYMBOL_ID, BOOL*);
HRESULT GetThemeInt(long, int, int, THEME_PROPERTY_SYMBOL_ID, int*);
HRESULT GetThemeEnumValue(long, int, int, THEME_PROPERTY_SYMBOL_ID, int*);
HRESULT GetThemePosition(long, int, int, THEME_PROPERTY_SYMBOL_ID, POINT*);
HRESULT GetThemeFont(long, HDC, int, int, int, LOGFONTW*);
HRESULT GetThemeRect(long, int, int, int, RECT*);
HRESULT GetThemeMargins(long, HDC, int, int, THEME_PROPERTY_SYMBOL_ID, RECT*, MARGINS*);
HRESULT GetThemeIntList(long, int, int, THEME_PROPERTY_SYMBOL_ID, INTLIST*);
HRESULT GetThemePropertyOrigin(long, int, int, int, PROPERTYORIGIN*);
HRESULT SetWindowTheme(HWND, const(wchar)*, const(wchar)*);
HRESULT GetThemeFilename(long, int, int, THEME_PROPERTY_SYMBOL_ID, PWSTR, int);
COLORREF GetThemeSysColor(long, int);
HBRUSH GetThemeSysColorBrush(long, THEME_PROPERTY_SYMBOL_ID);
BOOL GetThemeSysBool(long, THEME_PROPERTY_SYMBOL_ID);
int GetThemeSysSize(long, int);
HRESULT GetThemeSysFont(long, THEME_PROPERTY_SYMBOL_ID, LOGFONTW*);
HRESULT GetThemeSysString(long, THEME_PROPERTY_SYMBOL_ID, PWSTR, int);
HRESULT GetThemeSysInt(long, THEME_PROPERTY_SYMBOL_ID, int*);
BOOL IsThemeActive();
BOOL IsAppThemed();
long GetWindowTheme(HWND);
HRESULT EnableThemeDialogTexture(HWND, uint);
BOOL IsThemeDialogTextureEnabled(HWND);
SET_THEME_APP_PROPERTIES_FLAGS GetThemeAppProperties();
void SetThemeAppProperties(SET_THEME_APP_PROPERTIES_FLAGS);
HRESULT GetCurrentThemeName(PWSTR, int, PWSTR, int, PWSTR, int);
HRESULT GetThemeDocumentationProperty(const(wchar)*, const(wchar)*, PWSTR, int);
HRESULT DrawThemeParentBackground(HWND, HDC, const(RECT)*);
HRESULT EnableTheming(BOOL);
HRESULT DrawThemeParentBackgroundEx(HWND, HDC, DRAW_THEME_PARENT_BACKGROUND_FLAGS, const(RECT)*);
HRESULT SetWindowThemeAttribute(HWND, WINDOWTHEMEATTRIBUTETYPE, void*, uint);
HRESULT DrawThemeTextEx(long, HDC, int, int, const(wchar)*, int, DRAW_TEXT_FORMAT, RECT*, const(DTTOPTS)*);
HRESULT GetThemeBitmap(long, int, int, THEME_PROPERTY_SYMBOL_ID, GET_THEME_BITMAP_FLAGS, HBITMAP*);
HRESULT GetThemeStream(long, int, int, int, void**, uint*, HINSTANCE);
HRESULT BufferedPaintInit();
HRESULT BufferedPaintUnInit();
long BeginBufferedPaint(HDC, const(RECT)*, BP_BUFFERFORMAT, BP_PAINTPARAMS*, HDC*);
HRESULT EndBufferedPaint(long, BOOL);
HRESULT GetBufferedPaintTargetRect(long, RECT*);
HDC GetBufferedPaintTargetDC(long);
HDC GetBufferedPaintDC(long);
HRESULT GetBufferedPaintBits(long, RGBQUAD**, int*);
HRESULT BufferedPaintClear(long, const(RECT)*);
HRESULT BufferedPaintSetAlpha(long, const(RECT)*, ubyte);
HRESULT BufferedPaintStopAllAnimations(HWND);
long BeginBufferedAnimation(HWND, HDC, const(RECT)*, BP_BUFFERFORMAT, BP_PAINTPARAMS*, BP_ANIMATIONPARAMS*, HDC*, HDC*);
HRESULT EndBufferedAnimation(long, BOOL);
BOOL BufferedPaintRenderAnimation(HWND, HDC);
BOOL IsCompositionActive();
HRESULT GetThemeTransitionDuration(long, int, int, int, int, uint*);
BOOL CheckDlgButton(HWND, int, DLG_BUTTON_CHECK_STATE);
BOOL CheckRadioButton(HWND, int, int, int);
uint IsDlgButtonChecked(HWND, int);
BOOL IsCharLowerW(wchar);
HSYNTHETICPOINTERDEVICE CreateSyntheticPointerDevice(POINTER_INPUT_TYPE, uint, POINTER_FEEDBACK_MODE);
void DestroySyntheticPointerDevice(HSYNTHETICPOINTERDEVICE);
BOOL RegisterTouchHitTestingWindow(HWND, uint);
BOOL EvaluateProximityToRect(const(RECT)*, const(TOUCH_HIT_TESTING_INPUT)*, TOUCH_HIT_TESTING_PROXIMITY_EVALUATION*);
BOOL EvaluateProximityToPolygon(uint, const(POINT)*, const(TOUCH_HIT_TESTING_INPUT)*, TOUCH_HIT_TESTING_PROXIMITY_EVALUATION*);
LRESULT PackTouchHitTestingProximityEvaluation(const(TOUCH_HIT_TESTING_INPUT)*, const(TOUCH_HIT_TESTING_PROXIMITY_EVALUATION)*);
BOOL GetWindowFeedbackSetting(HWND, FEEDBACK_TYPE, uint, uint*, void*);
BOOL SetWindowFeedbackSetting(HWND, FEEDBACK_TYPE, uint, uint, const(void)*);
int SetScrollPos(HWND, SCROLLBAR_CONSTANTS, int, BOOL);
BOOL SetScrollRange(HWND, SCROLLBAR_CONSTANTS, int, int, BOOL);
BOOL ShowScrollBar(HWND, SCROLLBAR_CONSTANTS, BOOL);
BOOL EnableScrollBar(HWND, SCROLLBAR_CONSTANTS, ENABLE_SCROLL_BAR_ARROWS);
int DlgDirListA(HWND, PSTR, int, int, DLG_DIR_LIST_FILE_TYPE);
int DlgDirListW(HWND, PWSTR, int, int, DLG_DIR_LIST_FILE_TYPE);
BOOL DlgDirSelectExA(HWND, PSTR, int, int);
BOOL DlgDirSelectExW(HWND, PWSTR, int, int);
int DlgDirListComboBoxA(HWND, PSTR, int, int, DLG_DIR_LIST_FILE_TYPE);
int DlgDirListComboBoxW(HWND, PWSTR, int, int, DLG_DIR_LIST_FILE_TYPE);
BOOL DlgDirSelectComboBoxExA(HWND, PSTR, int, int);
BOOL DlgDirSelectComboBoxExW(HWND, PWSTR, int, int);
int SetScrollInfo(HWND, SCROLLBAR_CONSTANTS, SCROLLINFO*, BOOL);
BOOL GetComboBoxInfo(HWND, COMBOBOXINFO*);
uint GetListBoxInfo(HWND);
BOOL RegisterPointerDeviceNotifications(HWND, BOOL);
enum TVI_ROOT = 0xffffffffffff0000;
enum TVI_FIRST = 0xffffffffffff0001;
enum TVI_LAST = 0xffffffffffff0002;
enum TVI_SORT = 0xffffffffffff0003;
enum BCN_FIRST = 0xfffffb1e;
enum EM_SCROLLCARET = 0x000000b7;
enum EM_SETLIMITTEXT = 0x000000c5;
enum EM_GETLIMITTEXT = 0x000000d5;
enum EM_POSFROMCHAR = 0x000000d6;
enum EM_CHARFROMPOS = 0x000000d7;
enum WM_CTLCOLOR = 0x00000019;
enum ODT_HEADER = 0x00000064;
enum LVM_FIRST = 0x00001000;
enum TV_FIRST = 0x00001100;
enum HDM_FIRST = 0x00001200;
enum TCM_FIRST = 0x00001300;
enum PGM_FIRST = 0x00001400;
enum ECM_FIRST = 0x00001500;
enum BCM_FIRST = 0x00001600;
enum CBM_FIRST = 0x00001700;
enum CCM_FIRST = 0x00002000;
enum CCM_LAST = 0x00002200;
enum CCM_SETBKCOLOR = 0x00002001;
enum CCM_SETCOLORSCHEME = 0x00002002;
enum CCM_GETCOLORSCHEME = 0x00002003;
enum CCM_GETDROPTARGET = 0x00002004;
enum CCM_SETUNICODEFORMAT = 0x00002005;
enum CCM_GETUNICODEFORMAT = 0x00002006;
enum COMCTL32_VERSION = 0x00000006;
enum CCM_SETVERSION = 0x00002007;
enum CCM_GETVERSION = 0x00002008;
enum CCM_SETNOTIFYWINDOW = 0x00002009;
enum CCM_SETWINDOWTHEME = 0x0000200b;
enum CCM_DPISCALE = 0x0000200c;
enum INFOTIPSIZE = 0x00000400;
enum MSGF_COMMCTRL_BEGINDRAG = 0x00004200;
enum MSGF_COMMCTRL_SIZEHEADER = 0x00004201;
enum MSGF_COMMCTRL_DRAGSELECT = 0x00004202;
enum MSGF_COMMCTRL_TOOLBARCUST = 0x00004203;
enum CDRF_DODEFAULT = 0x00000000;
enum CDRF_NEWFONT = 0x00000002;
enum CDRF_SKIPDEFAULT = 0x00000004;
enum CDRF_DOERASE = 0x00000008;
enum CDRF_SKIPPOSTPAINT = 0x00000100;
enum CDRF_NOTIFYPOSTPAINT = 0x00000010;
enum CDRF_NOTIFYITEMDRAW = 0x00000020;
enum CDRF_NOTIFYSUBITEMDRAW = 0x00000020;
enum CDRF_NOTIFYPOSTERASE = 0x00000040;
enum CDDS_POSTERASE = 0x00000004;
enum CDDS_ITEM = 0x00010000;
enum NM_GETCUSTOMSPLITRECT = 0xfffffb21;
enum CLR_NONE = 0xffffffffffffffff;
enum CLR_DEFAULT = 0xffffffffff000000;
enum ILD_TRANSPARENT = 0x00000001;
enum ILD_IMAGE = 0x00000020;
enum ILD_ROP = 0x00000040;
enum ILD_BLEND25 = 0x00000002;
enum ILD_OVERLAYMASK = 0x00000f00;
enum ILD_PRESERVEALPHA = 0x00001000;
enum ILD_SCALE = 0x00002000;
enum ILD_DPISCALE = 0x00004000;
enum ILD_ASYNC = 0x00008000;
enum CLR_HILIGHT = 0xffffffffff000000;
enum ILS_NORMAL = 0x00000000;
enum ILS_GLOW = 0x00000001;
enum ILS_SHADOW = 0x00000002;
enum ILS_SATURATE = 0x00000004;
enum ILS_ALPHA = 0x00000008;
enum ILGT_NORMAL = 0x00000000;
enum ILGT_ASYNC = 0x00000001;
enum WC_HEADERA = "SysHeader32";
enum WC_HEADERW = "SysHeader32";
enum WC_HEADER = "SysHeader32";
enum HDS_HORZ = 0x00000000;
enum HDS_BUTTONS = 0x00000002;
enum HDS_HOTTRACK = 0x00000004;
enum HDS_HIDDEN = 0x00000008;
enum HDS_DRAGDROP = 0x00000040;
enum HDS_FULLDRAG = 0x00000080;
enum HDS_FILTERBAR = 0x00000100;
enum HDS_FLAT = 0x00000200;
enum HDS_CHECKBOXES = 0x00000400;
enum HDS_NOSIZING = 0x00000800;
enum HDS_OVERFLOW = 0x00001000;
enum HDM_GETITEMCOUNT = 0x00001200;
enum HDM_INSERTITEMA = 0x00001201;
enum HDM_INSERTITEMW = 0x0000120a;
enum HDM_INSERTITEM = 0x0000120a;
enum HDM_DELETEITEM = 0x00001202;
enum HDM_GETITEMA = 0x00001203;
enum HDM_GETITEMW = 0x0000120b;
enum HDM_GETITEM = 0x0000120b;
enum HDM_SETITEMA = 0x00001204;
enum HDM_SETITEMW = 0x0000120c;
enum HDM_SETITEM = 0x0000120c;
enum HDM_LAYOUT = 0x00001205;
enum HDSIL_NORMAL = 0x00000000;
enum HDSIL_STATE = 0x00000001;
enum HDM_HITTEST = 0x00001206;
enum HDM_GETITEMRECT = 0x00001207;
enum HDM_SETIMAGELIST = 0x00001208;
enum HDM_GETIMAGELIST = 0x00001209;
enum HDM_ORDERTOINDEX = 0x0000120f;
enum HDM_CREATEDRAGIMAGE = 0x00001210;
enum HDM_GETORDERARRAY = 0x00001211;
enum HDM_SETORDERARRAY = 0x00001212;
enum HDM_SETHOTDIVIDER = 0x00001213;
enum HDM_SETBITMAPMARGIN = 0x00001214;
enum HDM_GETBITMAPMARGIN = 0x00001215;
enum HDM_SETUNICODEFORMAT = 0x00002005;
enum HDM_GETUNICODEFORMAT = 0x00002006;
enum HDM_SETFILTERCHANGETIMEOUT = 0x00001216;
enum HDM_EDITFILTER = 0x00001217;
enum HDM_CLEARFILTER = 0x00001218;
enum HDM_GETITEMDROPDOWNRECT = 0x00001219;
enum HDM_GETOVERFLOWRECT = 0x0000121a;
enum HDM_GETFOCUSEDITEM = 0x0000121b;
enum HDM_SETFOCUSEDITEM = 0x0000121c;
enum TOOLBARCLASSNAMEW = "ToolbarWindow32";
enum TOOLBARCLASSNAMEA = "ToolbarWindow32";
enum TOOLBARCLASSNAME = "ToolbarWindow32";
enum CMB_MASKED = 0x00000002;
enum TBSTATE_CHECKED = 0x00000001;
enum TBSTATE_PRESSED = 0x00000002;
enum TBSTATE_ENABLED = 0x00000004;
enum TBSTATE_HIDDEN = 0x00000008;
enum TBSTATE_INDETERMINATE = 0x00000010;
enum TBSTATE_WRAP = 0x00000020;
enum TBSTATE_ELLIPSES = 0x00000040;
enum TBSTATE_MARKED = 0x00000080;
enum TBSTYLE_BUTTON = 0x00000000;
enum TBSTYLE_SEP = 0x00000001;
enum TBSTYLE_CHECK = 0x00000002;
enum TBSTYLE_GROUP = 0x00000004;
enum TBSTYLE_DROPDOWN = 0x00000008;
enum TBSTYLE_AUTOSIZE = 0x00000010;
enum TBSTYLE_NOPREFIX = 0x00000020;
enum TBSTYLE_TOOLTIPS = 0x00000100;
enum TBSTYLE_WRAPABLE = 0x00000200;
enum TBSTYLE_ALTDRAG = 0x00000400;
enum TBSTYLE_FLAT = 0x00000800;
enum TBSTYLE_LIST = 0x00001000;
enum TBSTYLE_CUSTOMERASE = 0x00002000;
enum TBSTYLE_REGISTERDROP = 0x00004000;
enum TBSTYLE_TRANSPARENT = 0x00008000;
enum TBSTYLE_EX_DRAWDDARROWS = 0x00000001;
enum BTNS_BUTTON = 0x00000000;
enum BTNS_SEP = 0x00000001;
enum BTNS_CHECK = 0x00000002;
enum BTNS_GROUP = 0x00000004;
enum BTNS_DROPDOWN = 0x00000008;
enum BTNS_AUTOSIZE = 0x00000010;
enum BTNS_NOPREFIX = 0x00000020;
enum BTNS_SHOWTEXT = 0x00000040;
enum BTNS_WHOLEDROPDOWN = 0x00000080;
enum TBSTYLE_EX_MIXEDBUTTONS = 0x00000008;
enum TBSTYLE_EX_HIDECLIPPEDBUTTONS = 0x00000010;
enum TBSTYLE_EX_MULTICOLUMN = 0x00000002;
enum TBSTYLE_EX_VERTICAL = 0x00000004;
enum TBSTYLE_EX_DOUBLEBUFFER = 0x00000080;
enum TBCDRF_NOEDGES = 0x00010000;
enum TBCDRF_HILITEHOTTRACK = 0x00020000;
enum TBCDRF_NOOFFSET = 0x00040000;
enum TBCDRF_NOMARK = 0x00080000;
enum TBCDRF_NOETCHEDEFFECT = 0x00100000;
enum TBCDRF_BLENDICON = 0x00200000;
enum TBCDRF_NOBACKGROUND = 0x00400000;
enum TBCDRF_USECDCOLORS = 0x00800000;
enum TB_ENABLEBUTTON = 0x00000401;
enum TB_CHECKBUTTON = 0x00000402;
enum TB_PRESSBUTTON = 0x00000403;
enum TB_HIDEBUTTON = 0x00000404;
enum TB_INDETERMINATE = 0x00000405;
enum TB_MARKBUTTON = 0x00000406;
enum TB_ISBUTTONENABLED = 0x00000409;
enum TB_ISBUTTONCHECKED = 0x0000040a;
enum TB_ISBUTTONPRESSED = 0x0000040b;
enum TB_ISBUTTONHIDDEN = 0x0000040c;
enum TB_ISBUTTONINDETERMINATE = 0x0000040d;
enum TB_ISBUTTONHIGHLIGHTED = 0x0000040e;
enum TB_SETSTATE = 0x00000411;
enum TB_GETSTATE = 0x00000412;
enum TB_ADDBITMAP = 0x00000413;
enum IDB_STD_SMALL_COLOR = 0x00000000;
enum IDB_STD_LARGE_COLOR = 0x00000001;
enum IDB_VIEW_SMALL_COLOR = 0x00000004;
enum IDB_VIEW_LARGE_COLOR = 0x00000005;
enum IDB_HIST_SMALL_COLOR = 0x00000008;
enum IDB_HIST_LARGE_COLOR = 0x00000009;
enum IDB_HIST_NORMAL = 0x0000000c;
enum IDB_HIST_HOT = 0x0000000d;
enum IDB_HIST_DISABLED = 0x0000000e;
enum IDB_HIST_PRESSED = 0x0000000f;
enum STD_CUT = 0x00000000;
enum STD_COPY = 0x00000001;
enum STD_PASTE = 0x00000002;
enum STD_UNDO = 0x00000003;
enum STD_REDOW = 0x00000004;
enum STD_DELETE = 0x00000005;
enum STD_FILENEW = 0x00000006;
enum STD_FILEOPEN = 0x00000007;
enum STD_FILESAVE = 0x00000008;
enum STD_PRINTPRE = 0x00000009;
enum STD_PROPERTIES = 0x0000000a;
enum STD_HELP = 0x0000000b;
enum STD_FIND = 0x0000000c;
enum STD_REPLACE = 0x0000000d;
enum STD_PRINT = 0x0000000e;
enum VIEW_LARGEICONS = 0x00000000;
enum VIEW_SMALLICONS = 0x00000001;
enum VIEW_LIST = 0x00000002;
enum VIEW_DETAILS = 0x00000003;
enum VIEW_SORTNAME = 0x00000004;
enum VIEW_SORTSIZE = 0x00000005;
enum VIEW_SORTDATE = 0x00000006;
enum VIEW_SORTTYPE = 0x00000007;
enum VIEW_PARENTFOLDER = 0x00000008;
enum VIEW_NETCONNECT = 0x00000009;
enum VIEW_NETDISCONNECT = 0x0000000a;
enum VIEW_NEWFOLDER = 0x0000000b;
enum VIEW_VIEWMENU = 0x0000000c;
enum HIST_BACK = 0x00000000;
enum HIST_FORWARD = 0x00000001;
enum HIST_FAVORITES = 0x00000002;
enum HIST_ADDTOFAVORITES = 0x00000003;
enum HIST_VIEWTREE = 0x00000004;
enum TB_ADDBUTTONSA = 0x00000414;
enum TB_INSERTBUTTONA = 0x00000415;
enum TB_DELETEBUTTON = 0x00000416;
enum TB_GETBUTTON = 0x00000417;
enum TB_BUTTONCOUNT = 0x00000418;
enum TB_COMMANDTOINDEX = 0x00000419;
enum TB_SAVERESTOREA = 0x0000041a;
enum TB_SAVERESTOREW = 0x0000044c;
enum TB_CUSTOMIZE = 0x0000041b;
enum TB_ADDSTRINGA = 0x0000041c;
enum TB_ADDSTRINGW = 0x0000044d;
enum TB_GETITEMRECT = 0x0000041d;
enum TB_BUTTONSTRUCTSIZE = 0x0000041e;
enum TB_SETBUTTONSIZE = 0x0000041f;
enum TB_SETBITMAPSIZE = 0x00000420;
enum TB_AUTOSIZE = 0x00000421;
enum TB_GETTOOLTIPS = 0x00000423;
enum TB_SETTOOLTIPS = 0x00000424;
enum TB_SETPARENT = 0x00000425;
enum TB_SETROWS = 0x00000427;
enum TB_GETROWS = 0x00000428;
enum TB_SETCMDID = 0x0000042a;
enum TB_CHANGEBITMAP = 0x0000042b;
enum TB_GETBITMAP = 0x0000042c;
enum TB_GETBUTTONTEXTA = 0x0000042d;
enum TB_GETBUTTONTEXTW = 0x0000044b;
enum TB_REPLACEBITMAP = 0x0000042e;
enum TB_SETINDENT = 0x0000042f;
enum TB_SETIMAGELIST = 0x00000430;
enum TB_GETIMAGELIST = 0x00000431;
enum TB_LOADIMAGES = 0x00000432;
enum TB_GETRECT = 0x00000433;
enum TB_SETHOTIMAGELIST = 0x00000434;
enum TB_GETHOTIMAGELIST = 0x00000435;
enum TB_SETDISABLEDIMAGELIST = 0x00000436;
enum TB_GETDISABLEDIMAGELIST = 0x00000437;
enum TB_SETSTYLE = 0x00000438;
enum TB_GETSTYLE = 0x00000439;
enum TB_GETBUTTONSIZE = 0x0000043a;
enum TB_SETBUTTONWIDTH = 0x0000043b;
enum TB_SETMAXTEXTROWS = 0x0000043c;
enum TB_GETTEXTROWS = 0x0000043d;
enum TB_GETBUTTONTEXT = 0x0000044b;
enum TB_SAVERESTORE = 0x0000044c;
enum TB_ADDSTRING = 0x0000044d;
enum TB_GETOBJECT = 0x0000043e;
enum TB_GETHOTITEM = 0x00000447;
enum TB_SETHOTITEM = 0x00000448;
enum TB_SETANCHORHIGHLIGHT = 0x00000449;
enum TB_GETANCHORHIGHLIGHT = 0x0000044a;
enum TB_MAPACCELERATORA = 0x0000044e;
enum TB_GETINSERTMARK = 0x0000044f;
enum TB_SETINSERTMARK = 0x00000450;
enum TB_INSERTMARKHITTEST = 0x00000451;
enum TB_MOVEBUTTON = 0x00000452;
enum TB_GETMAXSIZE = 0x00000453;
enum TB_SETEXTENDEDSTYLE = 0x00000454;
enum TB_GETEXTENDEDSTYLE = 0x00000455;
enum TB_GETPADDING = 0x00000456;
enum TB_SETPADDING = 0x00000457;
enum TB_SETINSERTMARKCOLOR = 0x00000458;
enum TB_GETINSERTMARKCOLOR = 0x00000459;
enum TB_SETCOLORSCHEME = 0x00002002;
enum TB_GETCOLORSCHEME = 0x00002003;
enum TB_SETUNICODEFORMAT = 0x00002005;
enum TB_GETUNICODEFORMAT = 0x00002006;
enum TB_MAPACCELERATORW = 0x0000045a;
enum TB_MAPACCELERATOR = 0x0000045a;
enum TBBF_LARGE = 0x00000001;
enum TB_GETBITMAPFLAGS = 0x00000429;
enum TB_GETBUTTONINFOW = 0x0000043f;
enum TB_SETBUTTONINFOW = 0x00000440;
enum TB_GETBUTTONINFOA = 0x00000441;
enum TB_SETBUTTONINFOA = 0x00000442;
enum TB_GETBUTTONINFO = 0x0000043f;
enum TB_SETBUTTONINFO = 0x00000440;
enum TB_INSERTBUTTONW = 0x00000443;
enum TB_ADDBUTTONSW = 0x00000444;
enum TB_HITTEST = 0x00000445;
enum TB_INSERTBUTTON = 0x00000443;
enum TB_ADDBUTTONS = 0x00000444;
enum TB_SETDRAWTEXTFLAGS = 0x00000446;
enum TB_GETSTRINGW = 0x0000045b;
enum TB_GETSTRINGA = 0x0000045c;
enum TB_GETSTRING = 0x0000045b;
enum TB_SETBOUNDINGSIZE = 0x0000045d;
enum TB_SETHOTITEM2 = 0x0000045e;
enum TB_HASACCELERATOR = 0x0000045f;
enum TB_SETLISTGAP = 0x00000460;
enum TB_GETIMAGELISTCOUNT = 0x00000462;
enum TB_GETIDEALSIZE = 0x00000463;
enum TBMF_PAD = 0x00000001;
enum TBMF_BARPAD = 0x00000002;
enum TBMF_BUTTONSPACING = 0x00000004;
enum TB_GETMETRICS = 0x00000465;
enum TB_SETMETRICS = 0x00000466;
enum TB_GETITEMDROPDOWNRECT = 0x00000467;
enum TB_SETPRESSEDIMAGELIST = 0x00000468;
enum TB_GETPRESSEDIMAGELIST = 0x00000469;
enum TB_SETWINDOWTHEME = 0x0000200b;
enum TBNRF_HIDEHELP = 0x00000001;
enum TBNRF_ENDCUSTOMIZE = 0x00000002;
enum TBDDRET_DEFAULT = 0x00000000;
enum TBDDRET_NODEFAULT = 0x00000001;
enum TBDDRET_TREATPRESSED = 0x00000002;
enum REBARCLASSNAMEW = "ReBarWindow32";
enum REBARCLASSNAMEA = "ReBarWindow32";
enum REBARCLASSNAME = "ReBarWindow32";
enum RBIM_IMAGELIST = 0x00000001;
enum RBS_TOOLTIPS = 0x00000100;
enum RBS_VARHEIGHT = 0x00000200;
enum RBS_BANDBORDERS = 0x00000400;
enum RBS_FIXEDORDER = 0x00000800;
enum RBS_REGISTERDROP = 0x00001000;
enum RBS_AUTOSIZE = 0x00002000;
enum RBS_VERTICALGRIPPER = 0x00004000;
enum RBS_DBLCLKTOGGLE = 0x00008000;
enum RBBS_BREAK = 0x00000001;
enum RBBS_FIXEDSIZE = 0x00000002;
enum RBBS_CHILDEDGE = 0x00000004;
enum RBBS_HIDDEN = 0x00000008;
enum RBBS_NOVERT = 0x00000010;
enum RBBS_FIXEDBMP = 0x00000020;
enum RBBS_VARIABLEHEIGHT = 0x00000040;
enum RBBS_GRIPPERALWAYS = 0x00000080;
enum RBBS_NOGRIPPER = 0x00000100;
enum RBBS_USECHEVRON = 0x00000200;
enum RBBS_HIDETITLE = 0x00000400;
enum RBBS_TOPALIGN = 0x00000800;
enum RBBIM_STYLE = 0x00000001;
enum RBBIM_COLORS = 0x00000002;
enum RBBIM_TEXT = 0x00000004;
enum RBBIM_IMAGE = 0x00000008;
enum RBBIM_CHILD = 0x00000010;
enum RBBIM_CHILDSIZE = 0x00000020;
enum RBBIM_SIZE = 0x00000040;
enum RBBIM_BACKGROUND = 0x00000080;
enum RBBIM_ID = 0x00000100;
enum RBBIM_IDEALSIZE = 0x00000200;
enum RBBIM_LPARAM = 0x00000400;
enum RBBIM_HEADERSIZE = 0x00000800;
enum RBBIM_CHEVRONLOCATION = 0x00001000;
enum RBBIM_CHEVRONSTATE = 0x00002000;
enum RB_INSERTBANDA = 0x00000401;
enum RB_DELETEBAND = 0x00000402;
enum RB_GETBARINFO = 0x00000403;
enum RB_SETBARINFO = 0x00000404;
enum RB_SETBANDINFOA = 0x00000406;
enum RB_SETPARENT = 0x00000407;
enum RB_HITTEST = 0x00000408;
enum RB_GETRECT = 0x00000409;
enum RB_INSERTBANDW = 0x0000040a;
enum RB_SETBANDINFOW = 0x0000040b;
enum RB_GETBANDCOUNT = 0x0000040c;
enum RB_GETROWCOUNT = 0x0000040d;
enum RB_GETROWHEIGHT = 0x0000040e;
enum RB_IDTOINDEX = 0x00000410;
enum RB_GETTOOLTIPS = 0x00000411;
enum RB_SETTOOLTIPS = 0x00000412;
enum RB_SETBKCOLOR = 0x00000413;
enum RB_GETBKCOLOR = 0x00000414;
enum RB_SETTEXTCOLOR = 0x00000415;
enum RB_GETTEXTCOLOR = 0x00000416;
enum RBSTR_CHANGERECT = 0x00000001;
enum RB_SIZETORECT = 0x00000417;
enum RB_SETCOLORSCHEME = 0x00002002;
enum RB_GETCOLORSCHEME = 0x00002003;
enum RB_INSERTBAND = 0x0000040a;
enum RB_SETBANDINFO = 0x0000040b;
enum RB_BEGINDRAG = 0x00000418;
enum RB_ENDDRAG = 0x00000419;
enum RB_DRAGMOVE = 0x0000041a;
enum RB_GETBARHEIGHT = 0x0000041b;
enum RB_GETBANDINFOW = 0x0000041c;
enum RB_GETBANDINFOA = 0x0000041d;
enum RB_GETBANDINFO = 0x0000041c;
enum RB_MINIMIZEBAND = 0x0000041e;
enum RB_MAXIMIZEBAND = 0x0000041f;
enum RB_GETDROPTARGET = 0x00002004;
enum RB_GETBANDBORDERS = 0x00000422;
enum RB_SHOWBAND = 0x00000423;
enum RB_SETPALETTE = 0x00000425;
enum RB_GETPALETTE = 0x00000426;
enum RB_MOVEBAND = 0x00000427;
enum RB_SETUNICODEFORMAT = 0x00002005;
enum RB_GETUNICODEFORMAT = 0x00002006;
enum RB_GETBANDMARGINS = 0x00000428;
enum RB_SETWINDOWTHEME = 0x0000200b;
enum RB_SETEXTENDEDSTYLE = 0x00000429;
enum RB_GETEXTENDEDSTYLE = 0x0000042a;
enum RB_PUSHCHEVRON = 0x0000042b;
enum RB_SETBANDWIDTH = 0x0000042c;
enum RBAB_AUTOSIZE = 0x00000001;
enum RBAB_ADDBAND = 0x00000002;
enum RBHT_NOWHERE = 0x00000001;
enum RBHT_CAPTION = 0x00000002;
enum RBHT_CLIENT = 0x00000003;
enum RBHT_GRABBER = 0x00000004;
enum RBHT_CHEVRON = 0x00000008;
enum RBHT_SPLITTER = 0x00000010;
enum TOOLTIPS_CLASSW = "tooltips_class32";
enum TOOLTIPS_CLASSA = "tooltips_class32";
enum TOOLTIPS_CLASS = "tooltips_class32";
enum TTS_ALWAYSTIP = 0x00000001;
enum TTS_NOPREFIX = 0x00000002;
enum TTS_NOANIMATE = 0x00000010;
enum TTS_NOFADE = 0x00000020;
enum TTS_BALLOON = 0x00000040;
enum TTS_CLOSE = 0x00000080;
enum TTS_USEVISUALSTYLE = 0x00000100;
enum TTDT_AUTOMATIC = 0x00000000;
enum TTDT_RESHOW = 0x00000001;
enum TTDT_AUTOPOP = 0x00000002;
enum TTDT_INITIAL = 0x00000003;
enum TTM_ACTIVATE = 0x00000401;
enum TTM_SETDELAYTIME = 0x00000403;
enum TTM_ADDTOOLA = 0x00000404;
enum TTM_ADDTOOLW = 0x00000432;
enum TTM_DELTOOLA = 0x00000405;
enum TTM_DELTOOLW = 0x00000433;
enum TTM_NEWTOOLRECTA = 0x00000406;
enum TTM_NEWTOOLRECTW = 0x00000434;
enum TTM_RELAYEVENT = 0x00000407;
enum TTM_GETTOOLINFOA = 0x00000408;
enum TTM_GETTOOLINFOW = 0x00000435;
enum TTM_SETTOOLINFOA = 0x00000409;
enum TTM_SETTOOLINFOW = 0x00000436;
enum TTM_HITTESTA = 0x0000040a;
enum TTM_HITTESTW = 0x00000437;
enum TTM_GETTEXTA = 0x0000040b;
enum TTM_GETTEXTW = 0x00000438;
enum TTM_UPDATETIPTEXTA = 0x0000040c;
enum TTM_UPDATETIPTEXTW = 0x00000439;
enum TTM_GETTOOLCOUNT = 0x0000040d;
enum TTM_ENUMTOOLSA = 0x0000040e;
enum TTM_ENUMTOOLSW = 0x0000043a;
enum TTM_GETCURRENTTOOLA = 0x0000040f;
enum TTM_GETCURRENTTOOLW = 0x0000043b;
enum TTM_WINDOWFROMPOINT = 0x00000410;
enum TTM_TRACKACTIVATE = 0x00000411;
enum TTM_TRACKPOSITION = 0x00000412;
enum TTM_SETTIPBKCOLOR = 0x00000413;
enum TTM_SETTIPTEXTCOLOR = 0x00000414;
enum TTM_GETDELAYTIME = 0x00000415;
enum TTM_GETTIPBKCOLOR = 0x00000416;
enum TTM_GETTIPTEXTCOLOR = 0x00000417;
enum TTM_SETMAXTIPWIDTH = 0x00000418;
enum TTM_GETMAXTIPWIDTH = 0x00000419;
enum TTM_SETMARGIN = 0x0000041a;
enum TTM_GETMARGIN = 0x0000041b;
enum TTM_POP = 0x0000041c;
enum TTM_UPDATE = 0x0000041d;
enum TTM_GETBUBBLESIZE = 0x0000041e;
enum TTM_ADJUSTRECT = 0x0000041f;
enum TTM_SETTITLEA = 0x00000420;
enum TTM_SETTITLEW = 0x00000421;
enum TTM_POPUP = 0x00000422;
enum TTM_GETTITLE = 0x00000423;
enum TTM_ADDTOOL = 0x00000432;
enum TTM_DELTOOL = 0x00000433;
enum TTM_NEWTOOLRECT = 0x00000434;
enum TTM_GETTOOLINFO = 0x00000435;
enum TTM_SETTOOLINFO = 0x00000436;
enum TTM_HITTEST = 0x00000437;
enum TTM_GETTEXT = 0x00000438;
enum TTM_UPDATETIPTEXT = 0x00000439;
enum TTM_ENUMTOOLS = 0x0000043a;
enum TTM_GETCURRENTTOOL = 0x0000043b;
enum TTM_SETTITLE = 0x00000421;
enum TTM_SETWINDOWTHEME = 0x0000200b;
enum SBARS_SIZEGRIP = 0x00000100;
enum SBARS_TOOLTIPS = 0x00000800;
enum SBT_TOOLTIPS = 0x00000800;
enum STATUSCLASSNAMEW = "msctls_statusbar32";
enum STATUSCLASSNAMEA = "msctls_statusbar32";
enum STATUSCLASSNAME = "msctls_statusbar32";
enum SB_SETTEXTA = 0x00000401;
enum SB_SETTEXTW = 0x0000040b;
enum SB_GETTEXTA = 0x00000402;
enum SB_GETTEXTW = 0x0000040d;
enum SB_GETTEXTLENGTHA = 0x00000403;
enum SB_GETTEXTLENGTHW = 0x0000040c;
enum SB_GETTEXT = 0x0000040d;
enum SB_SETTEXT = 0x0000040b;
enum SB_GETTEXTLENGTH = 0x0000040c;
enum SB_SETPARTS = 0x00000404;
enum SB_GETPARTS = 0x00000406;
enum SB_GETBORDERS = 0x00000407;
enum SB_SETMINHEIGHT = 0x00000408;
enum SB_SIMPLE = 0x00000409;
enum SB_GETRECT = 0x0000040a;
enum SB_ISSIMPLE = 0x0000040e;
enum SB_SETICON = 0x0000040f;
enum SB_SETTIPTEXTA = 0x00000410;
enum SB_SETTIPTEXTW = 0x00000411;
enum SB_GETTIPTEXTA = 0x00000412;
enum SB_GETTIPTEXTW = 0x00000413;
enum SB_GETICON = 0x00000414;
enum SB_SETUNICODEFORMAT = 0x00002005;
enum SB_GETUNICODEFORMAT = 0x00002006;
enum SBT_OWNERDRAW = 0x00001000;
enum SBT_NOBORDERS = 0x00000100;
enum SBT_POPOUT = 0x00000200;
enum SBT_RTLREADING = 0x00000400;
enum SBT_NOTABPARSING = 0x00000800;
enum SB_SETBKCOLOR = 0x00002001;
enum SB_SIMPLEID = 0x000000ff;
enum TRACKBAR_CLASSA = "msctls_trackbar32";
enum TRACKBAR_CLASSW = "msctls_trackbar32";
enum TRACKBAR_CLASS = "msctls_trackbar32";
enum TBS_AUTOTICKS = 0x00000001;
enum TBS_VERT = 0x00000002;
enum TBS_HORZ = 0x00000000;
enum TBS_TOP = 0x00000004;
enum TBS_BOTTOM = 0x00000000;
enum TBS_LEFT = 0x00000004;
enum TBS_RIGHT = 0x00000000;
enum TBS_BOTH = 0x00000008;
enum TBS_NOTICKS = 0x00000010;
enum TBS_ENABLESELRANGE = 0x00000020;
enum TBS_FIXEDLENGTH = 0x00000040;
enum TBS_NOTHUMB = 0x00000080;
enum TBS_TOOLTIPS = 0x00000100;
enum TBS_REVERSED = 0x00000200;
enum TBS_DOWNISLEFT = 0x00000400;
enum TBS_NOTIFYBEFOREMOVE = 0x00000800;
enum TBS_TRANSPARENTBKGND = 0x00001000;
enum TBM_GETRANGEMIN = 0x00000401;
enum TBM_GETRANGEMAX = 0x00000402;
enum TBM_GETTIC = 0x00000403;
enum TBM_SETTIC = 0x00000404;
enum TBM_SETPOS = 0x00000405;
enum TBM_SETRANGE = 0x00000406;
enum TBM_SETRANGEMIN = 0x00000407;
enum TBM_SETRANGEMAX = 0x00000408;
enum TBM_CLEARTICS = 0x00000409;
enum TBM_SETSEL = 0x0000040a;
enum TBM_SETSELSTART = 0x0000040b;
enum TBM_SETSELEND = 0x0000040c;
enum TBM_GETPTICS = 0x0000040e;
enum TBM_GETTICPOS = 0x0000040f;
enum TBM_GETNUMTICS = 0x00000410;
enum TBM_GETSELSTART = 0x00000411;
enum TBM_GETSELEND = 0x00000412;
enum TBM_CLEARSEL = 0x00000413;
enum TBM_SETTICFREQ = 0x00000414;
enum TBM_SETPAGESIZE = 0x00000415;
enum TBM_GETPAGESIZE = 0x00000416;
enum TBM_SETLINESIZE = 0x00000417;
enum TBM_GETLINESIZE = 0x00000418;
enum TBM_GETTHUMBRECT = 0x00000419;
enum TBM_GETCHANNELRECT = 0x0000041a;
enum TBM_SETTHUMBLENGTH = 0x0000041b;
enum TBM_GETTHUMBLENGTH = 0x0000041c;
enum TBM_SETTOOLTIPS = 0x0000041d;
enum TBM_GETTOOLTIPS = 0x0000041e;
enum TBM_SETTIPSIDE = 0x0000041f;
enum TBTS_TOP = 0x00000000;
enum TBTS_LEFT = 0x00000001;
enum TBTS_BOTTOM = 0x00000002;
enum TBTS_RIGHT = 0x00000003;
enum TBM_SETBUDDY = 0x00000420;
enum TBM_GETBUDDY = 0x00000421;
enum TBM_SETPOSNOTIFY = 0x00000422;
enum TBM_SETUNICODEFORMAT = 0x00002005;
enum TBM_GETUNICODEFORMAT = 0x00002006;
enum TB_LINEUP = 0x00000000;
enum TB_LINEDOWN = 0x00000001;
enum TB_PAGEUP = 0x00000002;
enum TB_PAGEDOWN = 0x00000003;
enum TB_THUMBPOSITION = 0x00000004;
enum TB_THUMBTRACK = 0x00000005;
enum TB_TOP = 0x00000006;
enum TB_BOTTOM = 0x00000007;
enum TB_ENDTRACK = 0x00000008;
enum TBCD_TICS = 0x00000001;
enum TBCD_THUMB = 0x00000002;
enum TBCD_CHANNEL = 0x00000003;
enum DL_CURSORSET = 0x00000000;
enum DL_STOPCURSOR = 0x00000001;
enum DL_COPYCURSOR = 0x00000002;
enum DL_MOVECURSOR = 0x00000003;
enum DRAGLISTMSGSTRING = "commctrl_DragListMsg";
enum UPDOWN_CLASSA = "msctls_updown32";
enum UPDOWN_CLASSW = "msctls_updown32";
enum UPDOWN_CLASS = "msctls_updown32";
enum UD_MAXVAL = 0x00007fff;
enum UDS_WRAP = 0x00000001;
enum UDS_SETBUDDYINT = 0x00000002;
enum UDS_ALIGNRIGHT = 0x00000004;
enum UDS_ALIGNLEFT = 0x00000008;
enum UDS_AUTOBUDDY = 0x00000010;
enum UDS_ARROWKEYS = 0x00000020;
enum UDS_HORZ = 0x00000040;
enum UDS_NOTHOUSANDS = 0x00000080;
enum UDS_HOTTRACK = 0x00000100;
enum UDM_SETRANGE = 0x00000465;
enum UDM_GETRANGE = 0x00000466;
enum UDM_SETPOS = 0x00000467;
enum UDM_GETPOS = 0x00000468;
enum UDM_SETBUDDY = 0x00000469;
enum UDM_GETBUDDY = 0x0000046a;
enum UDM_SETACCEL = 0x0000046b;
enum UDM_GETACCEL = 0x0000046c;
enum UDM_SETBASE = 0x0000046d;
enum UDM_GETBASE = 0x0000046e;
enum UDM_SETRANGE32 = 0x0000046f;
enum UDM_GETRANGE32 = 0x00000470;
enum UDM_SETUNICODEFORMAT = 0x00002005;
enum UDM_GETUNICODEFORMAT = 0x00002006;
enum UDM_SETPOS32 = 0x00000471;
enum UDM_GETPOS32 = 0x00000472;
enum PROGRESS_CLASSA = "msctls_progress32";
enum PROGRESS_CLASSW = "msctls_progress32";
enum PROGRESS_CLASS = "msctls_progress32";
enum PBS_SMOOTH = 0x00000001;
enum PBS_VERTICAL = 0x00000004;
enum PBM_SETRANGE = 0x00000401;
enum PBM_SETPOS = 0x00000402;
enum PBM_DELTAPOS = 0x00000403;
enum PBM_SETSTEP = 0x00000404;
enum PBM_STEPIT = 0x00000405;
enum PBM_SETRANGE32 = 0x00000406;
enum PBM_GETRANGE = 0x00000407;
enum PBM_GETPOS = 0x00000408;
enum PBM_SETBARCOLOR = 0x00000409;
enum PBM_SETBKCOLOR = 0x00002001;
enum PBS_MARQUEE = 0x00000008;
enum PBM_SETMARQUEE = 0x0000040a;
enum PBS_SMOOTHREVERSE = 0x00000010;
enum PBM_GETSTEP = 0x0000040d;
enum PBM_GETBKCOLOR = 0x0000040e;
enum PBM_GETBARCOLOR = 0x0000040f;
enum PBM_SETSTATE = 0x00000410;
enum PBM_GETSTATE = 0x00000411;
enum PBST_NORMAL = 0x00000001;
enum PBST_ERROR = 0x00000002;
enum PBST_PAUSED = 0x00000003;
enum HOTKEYF_SHIFT = 0x00000001;
enum HOTKEYF_CONTROL = 0x00000002;
enum HOTKEYF_ALT = 0x00000004;
enum HOTKEYF_EXT = 0x00000080;
enum HKCOMB_NONE = 0x00000001;
enum HKCOMB_S = 0x00000002;
enum HKCOMB_C = 0x00000004;
enum HKCOMB_A = 0x00000008;
enum HKCOMB_SC = 0x00000010;
enum HKCOMB_SA = 0x00000020;
enum HKCOMB_CA = 0x00000040;
enum HKCOMB_SCA = 0x00000080;
enum HKM_SETHOTKEY = 0x00000401;
enum HKM_GETHOTKEY = 0x00000402;
enum HKM_SETRULES = 0x00000403;
enum HOTKEY_CLASSA = "msctls_hotkey32";
enum HOTKEY_CLASSW = "msctls_hotkey32";
enum HOTKEY_CLASS = "msctls_hotkey32";
enum CCS_TOP = 0x00000001;
enum CCS_NOMOVEY = 0x00000002;
enum CCS_BOTTOM = 0x00000003;
enum CCS_NORESIZE = 0x00000004;
enum CCS_NOPARENTALIGN = 0x00000008;
enum CCS_ADJUSTABLE = 0x00000020;
enum CCS_NODIVIDER = 0x00000040;
enum CCS_VERT = 0x00000080;
enum INVALID_LINK_INDEX = 0xffffffffffffffff;
enum MAX_LINKID_TEXT = 0x00000030;
enum WC_LINK = "SysLink";
enum LWS_TRANSPARENT = 0x00000001;
enum LWS_IGNORERETURN = 0x00000002;
enum LWS_NOPREFIX = 0x00000004;
enum LWS_USEVISUALSTYLE = 0x00000008;
enum LWS_USECUSTOMTEXT = 0x00000010;
enum LWS_RIGHT = 0x00000020;
enum LM_HITTEST = 0x00000700;
enum LM_GETIDEALHEIGHT = 0x00000701;
enum LM_SETITEM = 0x00000702;
enum LM_GETITEM = 0x00000703;
enum LM_GETIDEALSIZE = 0x00000701;
enum WC_LISTVIEWA = "SysListView32";
enum WC_LISTVIEWW = "SysListView32";
enum WC_LISTVIEW = "SysListView32";
enum LVS_ICON = 0x00000000;
enum LVS_REPORT = 0x00000001;
enum LVS_SMALLICON = 0x00000002;
enum LVS_LIST = 0x00000003;
enum LVS_TYPEMASK = 0x00000003;
enum LVS_SINGLESEL = 0x00000004;
enum LVS_SHOWSELALWAYS = 0x00000008;
enum LVS_SORTASCENDING = 0x00000010;
enum LVS_SORTDESCENDING = 0x00000020;
enum LVS_SHAREIMAGELISTS = 0x00000040;
enum LVS_NOLABELWRAP = 0x00000080;
enum LVS_AUTOARRANGE = 0x00000100;
enum LVS_EDITLABELS = 0x00000200;
enum LVS_OWNERDATA = 0x00001000;
enum LVS_NOSCROLL = 0x00002000;
enum LVS_TYPESTYLEMASK = 0x0000fc00;
enum LVS_ALIGNTOP = 0x00000000;
enum LVS_ALIGNLEFT = 0x00000800;
enum LVS_ALIGNMASK = 0x00000c00;
enum LVS_OWNERDRAWFIXED = 0x00000400;
enum LVS_NOCOLUMNHEADER = 0x00004000;
enum LVS_NOSORTHEADER = 0x00008000;
enum LVM_SETUNICODEFORMAT = 0x00002005;
enum LVM_GETUNICODEFORMAT = 0x00002006;
enum LVM_GETBKCOLOR = 0x00001000;
enum LVM_SETBKCOLOR = 0x00001001;
enum LVM_GETIMAGELIST = 0x00001002;
enum LVSIL_NORMAL = 0x00000000;
enum LVSIL_SMALL = 0x00000001;
enum LVSIL_STATE = 0x00000002;
enum LVSIL_GROUPHEADER = 0x00000003;
enum LVM_SETIMAGELIST = 0x00001003;
enum LVM_GETITEMCOUNT = 0x00001004;
enum I_INDENTCALLBACK = 0xffffffffffffffff;
enum I_IMAGECALLBACK = 0xffffffffffffffff;
enum I_IMAGENONE = 0xfffffffffffffffe;
enum LVM_GETITEMA = 0x00001005;
enum LVM_GETITEMW = 0x0000104b;
enum LVM_GETITEM = 0x0000104b;
enum LVM_SETITEMA = 0x00001006;
enum LVM_SETITEMW = 0x0000104c;
enum LVM_SETITEM = 0x0000104c;
enum LVM_INSERTITEMA = 0x00001007;
enum LVM_INSERTITEMW = 0x0000104d;
enum LVM_INSERTITEM = 0x0000104d;
enum LVM_DELETEITEM = 0x00001008;
enum LVM_DELETEALLITEMS = 0x00001009;
enum LVM_GETCALLBACKMASK = 0x0000100a;
enum LVM_SETCALLBACKMASK = 0x0000100b;
enum LVNI_ALL = 0x00000000;
enum LVNI_FOCUSED = 0x00000001;
enum LVNI_SELECTED = 0x00000002;
enum LVNI_CUT = 0x00000004;
enum LVNI_DROPHILITED = 0x00000008;
enum LVNI_VISIBLEORDER = 0x00000010;
enum LVNI_PREVIOUS = 0x00000020;
enum LVNI_VISIBLEONLY = 0x00000040;
enum LVNI_SAMEGROUPONLY = 0x00000080;
enum LVNI_ABOVE = 0x00000100;
enum LVNI_BELOW = 0x00000200;
enum LVNI_TOLEFT = 0x00000400;
enum LVNI_TORIGHT = 0x00000800;
enum LVM_GETNEXTITEM = 0x0000100c;
enum LVM_FINDITEMA = 0x0000100d;
enum LVM_FINDITEMW = 0x00001053;
enum LVM_FINDITEM = 0x00001053;
enum LVIR_BOUNDS = 0x00000000;
enum LVIR_ICON = 0x00000001;
enum LVIR_LABEL = 0x00000002;
enum LVIR_SELECTBOUNDS = 0x00000003;
enum LVM_GETITEMRECT = 0x0000100e;
enum LVM_SETITEMPOSITION = 0x0000100f;
enum LVM_GETITEMPOSITION = 0x00001010;
enum LVM_GETSTRINGWIDTHA = 0x00001011;
enum LVM_GETSTRINGWIDTHW = 0x00001057;
enum LVM_GETSTRINGWIDTH = 0x00001057;
enum LVM_HITTEST = 0x00001012;
enum LVM_ENSUREVISIBLE = 0x00001013;
enum LVM_SCROLL = 0x00001014;
enum LVM_REDRAWITEMS = 0x00001015;
enum LVA_DEFAULT = 0x00000000;
enum LVA_ALIGNLEFT = 0x00000001;
enum LVA_ALIGNTOP = 0x00000002;
enum LVA_SNAPTOGRID = 0x00000005;
enum LVM_ARRANGE = 0x00001016;
enum LVM_EDITLABELA = 0x00001017;
enum LVM_EDITLABELW = 0x00001076;
enum LVM_EDITLABEL = 0x00001076;
enum LVM_GETEDITCONTROL = 0x00001018;
enum LVM_GETCOLUMNA = 0x00001019;
enum LVM_GETCOLUMNW = 0x0000105f;
enum LVM_GETCOLUMN = 0x0000105f;
enum LVM_SETCOLUMNA = 0x0000101a;
enum LVM_SETCOLUMNW = 0x00001060;
enum LVM_SETCOLUMN = 0x00001060;
enum LVM_INSERTCOLUMNA = 0x0000101b;
enum LVM_INSERTCOLUMNW = 0x00001061;
enum LVM_INSERTCOLUMN = 0x00001061;
enum LVM_DELETECOLUMN = 0x0000101c;
enum LVM_GETCOLUMNWIDTH = 0x0000101d;
enum LVSCW_AUTOSIZE = 0xffffffffffffffff;
enum LVSCW_AUTOSIZE_USEHEADER = 0xfffffffffffffffe;
enum LVM_SETCOLUMNWIDTH = 0x0000101e;
enum LVM_GETHEADER = 0x0000101f;
enum LVM_CREATEDRAGIMAGE = 0x00001021;
enum LVM_GETVIEWRECT = 0x00001022;
enum LVM_GETTEXTCOLOR = 0x00001023;
enum LVM_SETTEXTCOLOR = 0x00001024;
enum LVM_GETTEXTBKCOLOR = 0x00001025;
enum LVM_SETTEXTBKCOLOR = 0x00001026;
enum LVM_GETTOPINDEX = 0x00001027;
enum LVM_GETCOUNTPERPAGE = 0x00001028;
enum LVM_GETORIGIN = 0x00001029;
enum LVM_UPDATE = 0x0000102a;
enum LVM_SETITEMSTATE = 0x0000102b;
enum LVM_GETITEMSTATE = 0x0000102c;
enum LVM_GETITEMTEXTA = 0x0000102d;
enum LVM_GETITEMTEXTW = 0x00001073;
enum LVM_GETITEMTEXT = 0x00001073;
enum LVM_SETITEMTEXTA = 0x0000102e;
enum LVM_SETITEMTEXTW = 0x00001074;
enum LVM_SETITEMTEXT = 0x00001074;
enum LVSICF_NOINVALIDATEALL = 0x00000001;
enum LVSICF_NOSCROLL = 0x00000002;
enum LVM_SETITEMCOUNT = 0x0000102f;
enum LVM_SORTITEMS = 0x00001030;
enum LVM_SETITEMPOSITION32 = 0x00001031;
enum LVM_GETSELECTEDCOUNT = 0x00001032;
enum LVM_GETITEMSPACING = 0x00001033;
enum LVM_GETISEARCHSTRINGA = 0x00001034;
enum LVM_GETISEARCHSTRINGW = 0x00001075;
enum LVM_GETISEARCHSTRING = 0x00001075;
enum LVM_SETICONSPACING = 0x00001035;
enum LVM_SETEXTENDEDLISTVIEWSTYLE = 0x00001036;
enum LVM_GETEXTENDEDLISTVIEWSTYLE = 0x00001037;
enum LVS_EX_GRIDLINES = 0x00000001;
enum LVS_EX_SUBITEMIMAGES = 0x00000002;
enum LVS_EX_CHECKBOXES = 0x00000004;
enum LVS_EX_TRACKSELECT = 0x00000008;
enum LVS_EX_HEADERDRAGDROP = 0x00000010;
enum LVS_EX_FULLROWSELECT = 0x00000020;
enum LVS_EX_ONECLICKACTIVATE = 0x00000040;
enum LVS_EX_TWOCLICKACTIVATE = 0x00000080;
enum LVS_EX_FLATSB = 0x00000100;
enum LVS_EX_REGIONAL = 0x00000200;
enum LVS_EX_INFOTIP = 0x00000400;
enum LVS_EX_UNDERLINEHOT = 0x00000800;
enum LVS_EX_UNDERLINECOLD = 0x00001000;
enum LVS_EX_MULTIWORKAREAS = 0x00002000;
enum LVS_EX_LABELTIP = 0x00004000;
enum LVS_EX_BORDERSELECT = 0x00008000;
enum LVS_EX_DOUBLEBUFFER = 0x00010000;
enum LVS_EX_HIDELABELS = 0x00020000;
enum LVS_EX_SINGLEROW = 0x00040000;
enum LVS_EX_SNAPTOGRID = 0x00080000;
enum LVS_EX_SIMPLESELECT = 0x00100000;
enum LVS_EX_JUSTIFYCOLUMNS = 0x00200000;
enum LVS_EX_TRANSPARENTBKGND = 0x00400000;
enum LVS_EX_TRANSPARENTSHADOWTEXT = 0x00800000;
enum LVS_EX_AUTOAUTOARRANGE = 0x01000000;
enum LVS_EX_HEADERINALLVIEWS = 0x02000000;
enum LVS_EX_AUTOCHECKSELECT = 0x08000000;
enum LVS_EX_AUTOSIZECOLUMNS = 0x10000000;
enum LVS_EX_COLUMNSNAPPOINTS = 0x40000000;
enum LVS_EX_COLUMNOVERFLOW = 0x80000000;
enum LVM_GETSUBITEMRECT = 0x00001038;
enum LVM_SUBITEMHITTEST = 0x00001039;
enum LVM_SETCOLUMNORDERARRAY = 0x0000103a;
enum LVM_GETCOLUMNORDERARRAY = 0x0000103b;
enum LVM_SETHOTITEM = 0x0000103c;
enum LVM_GETHOTITEM = 0x0000103d;
enum LVM_SETHOTCURSOR = 0x0000103e;
enum LVM_GETHOTCURSOR = 0x0000103f;
enum LVM_APPROXIMATEVIEWRECT = 0x00001040;
enum LV_MAX_WORKAREAS = 0x00000010;
enum LVM_SETWORKAREAS = 0x00001041;
enum LVM_GETWORKAREAS = 0x00001046;
enum LVM_GETNUMBEROFWORKAREAS = 0x00001049;
enum LVM_GETSELECTIONMARK = 0x00001042;
enum LVM_SETSELECTIONMARK = 0x00001043;
enum LVM_SETHOVERTIME = 0x00001047;
enum LVM_GETHOVERTIME = 0x00001048;
enum LVM_SETTOOLTIPS = 0x0000104a;
enum LVM_GETTOOLTIPS = 0x0000104e;
enum LVM_SORTITEMSEX = 0x00001051;
enum LVM_SETBKIMAGEA = 0x00001044;
enum LVM_SETBKIMAGEW = 0x0000108a;
enum LVM_GETBKIMAGEA = 0x00001045;
enum LVM_GETBKIMAGEW = 0x0000108b;
enum LVM_SETSELECTEDCOLUMN = 0x0000108c;
enum LV_VIEW_ICON = 0x00000000;
enum LV_VIEW_DETAILS = 0x00000001;
enum LV_VIEW_SMALLICON = 0x00000002;
enum LV_VIEW_LIST = 0x00000003;
enum LV_VIEW_TILE = 0x00000004;
enum LV_VIEW_MAX = 0x00000004;
enum LVM_SETVIEW = 0x0000108e;
enum LVM_GETVIEW = 0x0000108f;
enum LVGF_ALIGN = 0x00000008;
enum LVGF_GROUPID = 0x00000010;
enum LVGF_SUBTITLE = 0x00000100;
enum LVGF_TASK = 0x00000200;
enum LVGF_DESCRIPTIONTOP = 0x00000400;
enum LVGF_DESCRIPTIONBOTTOM = 0x00000800;
enum LVGF_TITLEIMAGE = 0x00001000;
enum LVGF_EXTENDEDIMAGE = 0x00002000;
enum LVGF_ITEMS = 0x00004000;
enum LVGF_SUBSET = 0x00008000;
enum LVGF_SUBSETITEMS = 0x00010000;
enum LVM_INSERTGROUP = 0x00001091;
enum LVM_SETGROUPINFO = 0x00001093;
enum LVM_GETGROUPINFO = 0x00001095;
enum LVM_REMOVEGROUP = 0x00001096;
enum LVM_MOVEGROUP = 0x00001097;
enum LVM_GETGROUPCOUNT = 0x00001098;
enum LVM_GETGROUPINFOBYINDEX = 0x00001099;
enum LVM_MOVEITEMTOGROUP = 0x0000109a;
enum LVGGR_GROUP = 0x00000000;
enum LVGGR_HEADER = 0x00000001;
enum LVGGR_LABEL = 0x00000002;
enum LVGGR_SUBSETLINK = 0x00000003;
enum LVM_GETGROUPRECT = 0x00001062;
enum LVGMF_NONE = 0x00000000;
enum LVGMF_BORDERSIZE = 0x00000001;
enum LVGMF_BORDERCOLOR = 0x00000002;
enum LVGMF_TEXTCOLOR = 0x00000004;
enum LVM_SETGROUPMETRICS = 0x0000109b;
enum LVM_GETGROUPMETRICS = 0x0000109c;
enum LVM_ENABLEGROUPVIEW = 0x0000109d;
enum LVM_SORTGROUPS = 0x0000109e;
enum LVM_INSERTGROUPSORTED = 0x0000109f;
enum LVM_REMOVEALLGROUPS = 0x000010a0;
enum LVM_HASGROUP = 0x000010a1;
enum LVM_GETGROUPSTATE = 0x0000105c;
enum LVM_GETFOCUSEDGROUP = 0x0000105d;
enum LVTVIF_EXTENDED = 0x00000004;
enum LVM_SETTILEVIEWINFO = 0x000010a2;
enum LVM_GETTILEVIEWINFO = 0x000010a3;
enum LVM_SETTILEINFO = 0x000010a4;
enum LVM_GETTILEINFO = 0x000010a5;
enum LVM_SETINSERTMARK = 0x000010a6;
enum LVM_GETINSERTMARK = 0x000010a7;
enum LVM_INSERTMARKHITTEST = 0x000010a8;
enum LVM_GETINSERTMARKRECT = 0x000010a9;
enum LVM_SETINSERTMARKCOLOR = 0x000010aa;
enum LVM_GETINSERTMARKCOLOR = 0x000010ab;
enum LVM_SETINFOTIP = 0x000010ad;
enum LVM_GETSELECTEDCOLUMN = 0x000010ae;
enum LVM_ISGROUPVIEWENABLED = 0x000010af;
enum LVM_GETOUTLINECOLOR = 0x000010b0;
enum LVM_SETOUTLINECOLOR = 0x000010b1;
enum LVM_CANCELEDITLABEL = 0x000010b3;
enum LVM_MAPINDEXTOID = 0x000010b4;
enum LVM_MAPIDTOINDEX = 0x000010b5;
enum LVM_ISITEMVISIBLE = 0x000010b6;
enum LVM_GETEMPTYTEXT = 0x000010cc;
enum LVM_GETFOOTERRECT = 0x000010cd;
enum LVFF_ITEMCOUNT = 0x00000001;
enum LVM_GETFOOTERINFO = 0x000010ce;
enum LVM_GETFOOTERITEMRECT = 0x000010cf;
enum LVFIS_FOCUSED = 0x00000001;
enum LVM_GETFOOTERITEM = 0x000010d0;
enum LVM_GETITEMINDEXRECT = 0x000010d1;
enum LVM_SETITEMINDEXSTATE = 0x000010d2;
enum LVM_GETNEXTITEMINDEX = 0x000010d3;
enum LVM_SETBKIMAGE = 0x0000108a;
enum LVM_GETBKIMAGE = 0x0000108b;
enum LVKF_ALT = 0x00000001;
enum LVKF_CONTROL = 0x00000002;
enum LVKF_SHIFT = 0x00000004;
enum LVCDRF_NOSELECT = 0x00010000;
enum LVCDRF_NOGROUPFRAME = 0x00020000;
enum LVNSCH_DEFAULT = 0xffffffffffffffff;
enum LVNSCH_ERROR = 0xfffffffffffffffe;
enum LVNSCH_IGNORE = 0xfffffffffffffffd;
enum WC_TREEVIEWA = "SysTreeView32";
enum WC_TREEVIEWW = "SysTreeView32";
enum WC_TREEVIEW = "SysTreeView32";
enum TVS_HASBUTTONS = 0x00000001;
enum TVS_HASLINES = 0x00000002;
enum TVS_LINESATROOT = 0x00000004;
enum TVS_EDITLABELS = 0x00000008;
enum TVS_DISABLEDRAGDROP = 0x00000010;
enum TVS_SHOWSELALWAYS = 0x00000020;
enum TVS_RTLREADING = 0x00000040;
enum TVS_NOTOOLTIPS = 0x00000080;
enum TVS_CHECKBOXES = 0x00000100;
enum TVS_TRACKSELECT = 0x00000200;
enum TVS_SINGLEEXPAND = 0x00000400;
enum TVS_INFOTIP = 0x00000800;
enum TVS_FULLROWSELECT = 0x00001000;
enum TVS_NOSCROLL = 0x00002000;
enum TVS_NONEVENHEIGHT = 0x00004000;
enum TVS_NOHSCROLL = 0x00008000;
enum TVS_EX_NOSINGLECOLLAPSE = 0x00000001;
enum TVS_EX_MULTISELECT = 0x00000002;
enum TVS_EX_DOUBLEBUFFER = 0x00000004;
enum TVS_EX_NOINDENTSTATE = 0x00000008;
enum TVS_EX_RICHTOOLTIP = 0x00000010;
enum TVS_EX_AUTOHSCROLL = 0x00000020;
enum TVS_EX_FADEINOUTEXPANDOS = 0x00000040;
enum TVS_EX_PARTIALCHECKBOXES = 0x00000080;
enum TVS_EX_EXCLUSIONCHECKBOXES = 0x00000100;
enum TVS_EX_DIMMEDCHECKBOXES = 0x00000200;
enum TVS_EX_DRAWIMAGEASYNC = 0x00000400;
enum TVM_INSERTITEMA = 0x00001100;
enum TVM_INSERTITEMW = 0x00001132;
enum TVM_INSERTITEM = 0x00001132;
enum TVM_DELETEITEM = 0x00001101;
enum TVM_EXPAND = 0x00001102;
enum TVM_GETITEMRECT = 0x00001104;
enum TVM_GETCOUNT = 0x00001105;
enum TVM_GETINDENT = 0x00001106;
enum TVM_SETINDENT = 0x00001107;
enum TVM_GETIMAGELIST = 0x00001108;
enum TVSIL_NORMAL = 0x00000000;
enum TVSIL_STATE = 0x00000002;
enum TVM_SETIMAGELIST = 0x00001109;
enum TVM_GETNEXTITEM = 0x0000110a;
enum TVGN_ROOT = 0x00000000;
enum TVGN_NEXT = 0x00000001;
enum TVGN_PREVIOUS = 0x00000002;
enum TVGN_PARENT = 0x00000003;
enum TVGN_CHILD = 0x00000004;
enum TVGN_FIRSTVISIBLE = 0x00000005;
enum TVGN_NEXTVISIBLE = 0x00000006;
enum TVGN_PREVIOUSVISIBLE = 0x00000007;
enum TVGN_DROPHILITE = 0x00000008;
enum TVGN_CARET = 0x00000009;
enum TVGN_LASTVISIBLE = 0x0000000a;
enum TVGN_NEXTSELECTED = 0x0000000b;
enum TVSI_NOSINGLEEXPAND = 0x00008000;
enum TVM_SELECTITEM = 0x0000110b;
enum TVM_GETITEMA = 0x0000110c;
enum TVM_GETITEMW = 0x0000113e;
enum TVM_GETITEM = 0x0000113e;
enum TVM_SETITEMA = 0x0000110d;
enum TVM_SETITEMW = 0x0000113f;
enum TVM_SETITEM = 0x0000113f;
enum TVM_EDITLABELA = 0x0000110e;
enum TVM_EDITLABELW = 0x00001141;
enum TVM_EDITLABEL = 0x00001141;
enum TVM_GETEDITCONTROL = 0x0000110f;
enum TVM_GETVISIBLECOUNT = 0x00001110;
enum TVM_HITTEST = 0x00001111;
enum TVM_CREATEDRAGIMAGE = 0x00001112;
enum TVM_SORTCHILDREN = 0x00001113;
enum TVM_ENSUREVISIBLE = 0x00001114;
enum TVM_SORTCHILDRENCB = 0x00001115;
enum TVM_ENDEDITLABELNOW = 0x00001116;
enum TVM_GETISEARCHSTRINGA = 0x00001117;
enum TVM_GETISEARCHSTRINGW = 0x00001140;
enum TVM_GETISEARCHSTRING = 0x00001140;
enum TVM_SETTOOLTIPS = 0x00001118;
enum TVM_GETTOOLTIPS = 0x00001119;
enum TVM_SETINSERTMARK = 0x0000111a;
enum TVM_SETUNICODEFORMAT = 0x00002005;
enum TVM_GETUNICODEFORMAT = 0x00002006;
enum TVM_SETITEMHEIGHT = 0x0000111b;
enum TVM_GETITEMHEIGHT = 0x0000111c;
enum TVM_SETBKCOLOR = 0x0000111d;
enum TVM_SETTEXTCOLOR = 0x0000111e;
enum TVM_GETBKCOLOR = 0x0000111f;
enum TVM_GETTEXTCOLOR = 0x00001120;
enum TVM_SETSCROLLTIME = 0x00001121;
enum TVM_GETSCROLLTIME = 0x00001122;
enum TVM_SETINSERTMARKCOLOR = 0x00001125;
enum TVM_GETINSERTMARKCOLOR = 0x00001126;
enum TVM_SETBORDER = 0x00001123;
enum TVSBF_XBORDER = 0x00000001;
enum TVSBF_YBORDER = 0x00000002;
enum TVM_GETITEMSTATE = 0x00001127;
enum TVM_SETLINECOLOR = 0x00001128;
enum TVM_GETLINECOLOR = 0x00001129;
enum TVM_MAPACCIDTOHTREEITEM = 0x0000112a;
enum TVM_MAPHTREEITEMTOACCID = 0x0000112b;
enum TVM_SETEXTENDEDSTYLE = 0x0000112c;
enum TVM_GETEXTENDEDSTYLE = 0x0000112d;
enum TVM_SETAUTOSCROLLINFO = 0x0000113b;
enum TVM_SETHOT = 0x0000113a;
enum TVM_GETSELECTEDCOUNT = 0x00001146;
enum TVM_SHOWINFOTIP = 0x00001147;
enum TVM_GETITEMPARTRECT = 0x00001148;
enum TVNRET_DEFAULT = 0x00000000;
enum TVNRET_SKIPOLD = 0x00000001;
enum TVNRET_SKIPNEW = 0x00000002;
enum TVCDRF_NOIMAGES = 0x00010000;
enum WC_COMBOBOXEXW = "ComboBoxEx32";
enum WC_COMBOBOXEXA = "ComboBoxEx32";
enum WC_COMBOBOXEX = "ComboBoxEx32";
enum CBEM_INSERTITEMA = 0x00000401;
enum CBEM_SETIMAGELIST = 0x00000402;
enum CBEM_GETIMAGELIST = 0x00000403;
enum CBEM_GETITEMA = 0x00000404;
enum CBEM_SETITEMA = 0x00000405;
enum CBEM_GETCOMBOCONTROL = 0x00000406;
enum CBEM_GETEDITCONTROL = 0x00000407;
enum CBEM_SETEXSTYLE = 0x00000408;
enum CBEM_SETEXTENDEDSTYLE = 0x0000040e;
enum CBEM_GETEXSTYLE = 0x00000409;
enum CBEM_GETEXTENDEDSTYLE = 0x00000409;
enum CBEM_SETUNICODEFORMAT = 0x00002005;
enum CBEM_GETUNICODEFORMAT = 0x00002006;
enum CBEM_HASEDITCHANGED = 0x0000040a;
enum CBEM_INSERTITEMW = 0x0000040b;
enum CBEM_SETITEMW = 0x0000040c;
enum CBEM_GETITEMW = 0x0000040d;
enum CBEM_INSERTITEM = 0x0000040b;
enum CBEM_SETITEM = 0x0000040c;
enum CBEM_GETITEM = 0x0000040d;
enum CBEM_SETWINDOWTHEME = 0x0000200b;
enum CBES_EX_NOEDITIMAGE = 0x00000001;
enum CBES_EX_NOEDITIMAGEINDENT = 0x00000002;
enum CBES_EX_PATHWORDBREAKPROC = 0x00000004;
enum CBES_EX_NOSIZELIMIT = 0x00000008;
enum CBES_EX_CASESENSITIVE = 0x00000010;
enum CBES_EX_TEXTENDELLIPSIS = 0x00000020;
enum CBENF_KILLFOCUS = 0x00000001;
enum CBENF_RETURN = 0x00000002;
enum CBENF_ESCAPE = 0x00000003;
enum CBENF_DROPDOWN = 0x00000004;
enum CBEMAXSTRLEN = 0x00000104;
enum WC_TABCONTROLA = "SysTabControl32";
enum WC_TABCONTROLW = "SysTabControl32";
enum WC_TABCONTROL = "SysTabControl32";
enum TCS_SCROLLOPPOSITE = 0x00000001;
enum TCS_BOTTOM = 0x00000002;
enum TCS_RIGHT = 0x00000002;
enum TCS_MULTISELECT = 0x00000004;
enum TCS_FLATBUTTONS = 0x00000008;
enum TCS_FORCEICONLEFT = 0x00000010;
enum TCS_FORCELABELLEFT = 0x00000020;
enum TCS_HOTTRACK = 0x00000040;
enum TCS_VERTICAL = 0x00000080;
enum TCS_TABS = 0x00000000;
enum TCS_BUTTONS = 0x00000100;
enum TCS_SINGLELINE = 0x00000000;
enum TCS_MULTILINE = 0x00000200;
enum TCS_RIGHTJUSTIFY = 0x00000000;
enum TCS_FIXEDWIDTH = 0x00000400;
enum TCS_RAGGEDRIGHT = 0x00000800;
enum TCS_FOCUSONBUTTONDOWN = 0x00001000;
enum TCS_OWNERDRAWFIXED = 0x00002000;
enum TCS_TOOLTIPS = 0x00004000;
enum TCS_FOCUSNEVER = 0x00008000;
enum TCS_EX_FLATSEPARATORS = 0x00000001;
enum TCS_EX_REGISTERDROP = 0x00000002;
enum TCM_GETIMAGELIST = 0x00001302;
enum TCM_SETIMAGELIST = 0x00001303;
enum TCM_GETITEMCOUNT = 0x00001304;
enum TCM_GETITEMA = 0x00001305;
enum TCM_GETITEMW = 0x0000133c;
enum TCM_GETITEM = 0x0000133c;
enum TCM_SETITEMA = 0x00001306;
enum TCM_SETITEMW = 0x0000133d;
enum TCM_SETITEM = 0x0000133d;
enum TCM_INSERTITEMA = 0x00001307;
enum TCM_INSERTITEMW = 0x0000133e;
enum TCM_INSERTITEM = 0x0000133e;
enum TCM_DELETEITEM = 0x00001308;
enum TCM_DELETEALLITEMS = 0x00001309;
enum TCM_GETITEMRECT = 0x0000130a;
enum TCM_GETCURSEL = 0x0000130b;
enum TCM_SETCURSEL = 0x0000130c;
enum TCM_HITTEST = 0x0000130d;
enum TCM_SETITEMEXTRA = 0x0000130e;
enum TCM_ADJUSTRECT = 0x00001328;
enum TCM_SETITEMSIZE = 0x00001329;
enum TCM_REMOVEIMAGE = 0x0000132a;
enum TCM_SETPADDING = 0x0000132b;
enum TCM_GETROWCOUNT = 0x0000132c;
enum TCM_GETTOOLTIPS = 0x0000132d;
enum TCM_SETTOOLTIPS = 0x0000132e;
enum TCM_GETCURFOCUS = 0x0000132f;
enum TCM_SETCURFOCUS = 0x00001330;
enum TCM_SETMINTABWIDTH = 0x00001331;
enum TCM_DESELECTALL = 0x00001332;
enum TCM_HIGHLIGHTITEM = 0x00001333;
enum TCM_SETEXTENDEDSTYLE = 0x00001334;
enum TCM_GETEXTENDEDSTYLE = 0x00001335;
enum TCM_SETUNICODEFORMAT = 0x00002005;
enum TCM_GETUNICODEFORMAT = 0x00002006;
enum ANIMATE_CLASSW = "SysAnimate32";
enum ANIMATE_CLASSA = "SysAnimate32";
enum ANIMATE_CLASS = "SysAnimate32";
enum ACS_CENTER = 0x00000001;
enum ACS_TRANSPARENT = 0x00000002;
enum ACS_AUTOPLAY = 0x00000004;
enum ACS_TIMER = 0x00000008;
enum ACM_OPENA = 0x00000464;
enum ACM_OPENW = 0x00000467;
enum ACM_OPEN = 0x00000467;
enum ACM_PLAY = 0x00000465;
enum ACM_STOP = 0x00000466;
enum ACM_ISPLAYING = 0x00000468;
enum ACN_START = 0x00000001;
enum ACN_STOP = 0x00000002;
enum MONTHCAL_CLASSW = "SysMonthCal32";
enum MONTHCAL_CLASSA = "SysMonthCal32";
enum MONTHCAL_CLASS = "SysMonthCal32";
enum MCM_FIRST = 0x00001000;
enum MCM_GETCURSEL = 0x00001001;
enum MCM_SETCURSEL = 0x00001002;
enum MCM_GETMAXSELCOUNT = 0x00001003;
enum MCM_SETMAXSELCOUNT = 0x00001004;
enum MCM_GETSELRANGE = 0x00001005;
enum MCM_SETSELRANGE = 0x00001006;
enum MCM_GETMONTHRANGE = 0x00001007;
enum MCM_SETDAYSTATE = 0x00001008;
enum MCM_GETMINREQRECT = 0x00001009;
enum MCM_SETCOLOR = 0x0000100a;
enum MCM_GETCOLOR = 0x0000100b;
enum MCSC_BACKGROUND = 0x00000000;
enum MCSC_TEXT = 0x00000001;
enum MCSC_TITLEBK = 0x00000002;
enum MCSC_TITLETEXT = 0x00000003;
enum MCSC_MONTHBK = 0x00000004;
enum MCSC_TRAILINGTEXT = 0x00000005;
enum MCM_SETTODAY = 0x0000100c;
enum MCM_GETTODAY = 0x0000100d;
enum MCM_HITTEST = 0x0000100e;
enum MCM_SETFIRSTDAYOFWEEK = 0x0000100f;
enum MCM_GETFIRSTDAYOFWEEK = 0x00001010;
enum MCM_GETRANGE = 0x00001011;
enum MCM_SETRANGE = 0x00001012;
enum MCM_GETMONTHDELTA = 0x00001013;
enum MCM_SETMONTHDELTA = 0x00001014;
enum MCM_GETMAXTODAYWIDTH = 0x00001015;
enum MCM_SETUNICODEFORMAT = 0x00002005;
enum MCM_GETUNICODEFORMAT = 0x00002006;
enum MCM_GETCURRENTVIEW = 0x00001016;
enum MCM_GETCALENDARCOUNT = 0x00001017;
enum MCM_GETCALENDARGRIDINFO = 0x00001018;
enum MCM_GETCALID = 0x0000101b;
enum MCM_SETCALID = 0x0000101c;
enum MCM_SIZERECTTOMIN = 0x0000101d;
enum MCM_SETCALENDARBORDER = 0x0000101e;
enum MCM_GETCALENDARBORDER = 0x0000101f;
enum MCM_SETCURRENTVIEW = 0x00001020;
enum MCS_DAYSTATE = 0x00000001;
enum MCS_MULTISELECT = 0x00000002;
enum MCS_WEEKNUMBERS = 0x00000004;
enum MCS_NOTODAYCIRCLE = 0x00000008;
enum MCS_NOTODAY = 0x00000010;
enum MCS_NOTRAILINGDATES = 0x00000040;
enum MCS_SHORTDAYSOFWEEK = 0x00000080;
enum MCS_NOSELCHANGEONNAV = 0x00000100;
enum GMR_VISIBLE = 0x00000000;
enum GMR_DAYSTATE = 0x00000001;
enum DATETIMEPICK_CLASSW = "SysDateTimePick32";
enum DATETIMEPICK_CLASSA = "SysDateTimePick32";
enum DATETIMEPICK_CLASS = "SysDateTimePick32";
enum DTM_FIRST = 0x00001000;
enum DTM_GETSYSTEMTIME = 0x00001001;
enum DTM_SETSYSTEMTIME = 0x00001002;
enum DTM_GETRANGE = 0x00001003;
enum DTM_SETRANGE = 0x00001004;
enum DTM_SETFORMATA = 0x00001005;
enum DTM_SETFORMATW = 0x00001032;
enum DTM_SETFORMAT = 0x00001032;
enum DTM_SETMCCOLOR = 0x00001006;
enum DTM_GETMCCOLOR = 0x00001007;
enum DTM_GETMONTHCAL = 0x00001008;
enum DTM_SETMCFONT = 0x00001009;
enum DTM_GETMCFONT = 0x0000100a;
enum DTM_SETMCSTYLE = 0x0000100b;
enum DTM_GETMCSTYLE = 0x0000100c;
enum DTM_CLOSEMONTHCAL = 0x0000100d;
enum DTM_GETDATETIMEPICKERINFO = 0x0000100e;
enum DTM_GETIDEALSIZE = 0x0000100f;
enum DTS_UPDOWN = 0x00000001;
enum DTS_SHOWNONE = 0x00000002;
enum DTS_SHORTDATEFORMAT = 0x00000000;
enum DTS_LONGDATEFORMAT = 0x00000004;
enum DTS_SHORTDATECENTURYFORMAT = 0x0000000c;
enum DTS_TIMEFORMAT = 0x00000009;
enum DTS_APPCANPARSE = 0x00000010;
enum DTS_RIGHTALIGN = 0x00000020;
enum GDTR_MIN = 0x00000001;
enum GDTR_MAX = 0x00000002;
enum GDT_ERROR = 0xffffffffffffffff;
enum IPM_CLEARADDRESS = 0x00000464;
enum IPM_SETADDRESS = 0x00000465;
enum IPM_GETADDRESS = 0x00000466;
enum IPM_SETRANGE = 0x00000467;
enum IPM_SETFOCUS = 0x00000468;
enum IPM_ISBLANK = 0x00000469;
enum WC_IPADDRESSW = "SysIPAddress32";
enum WC_IPADDRESSA = "SysIPAddress32";
enum WC_IPADDRESS = "SysIPAddress32";
enum WC_PAGESCROLLERW = "SysPager";
enum WC_PAGESCROLLERA = "SysPager";
enum WC_PAGESCROLLER = "SysPager";
enum PGS_VERT = 0x00000000;
enum PGS_HORZ = 0x00000001;
enum PGS_AUTOSCROLL = 0x00000002;
enum PGS_DRAGNDROP = 0x00000004;
enum PGF_INVISIBLE = 0x00000000;
enum PGF_NORMAL = 0x00000001;
enum PGF_GRAYED = 0x00000002;
enum PGF_DEPRESSED = 0x00000004;
enum PGF_HOT = 0x00000008;
enum PGB_TOPORLEFT = 0x00000000;
enum PGB_BOTTOMORRIGHT = 0x00000001;
enum PGM_SETCHILD = 0x00001401;
enum PGM_RECALCSIZE = 0x00001402;
enum PGM_FORWARDMOUSE = 0x00001403;
enum PGM_SETBKCOLOR = 0x00001404;
enum PGM_GETBKCOLOR = 0x00001405;
enum PGM_SETBORDER = 0x00001406;
enum PGM_GETBORDER = 0x00001407;
enum PGM_SETPOS = 0x00001408;
enum PGM_GETPOS = 0x00001409;
enum PGM_SETBUTTONSIZE = 0x0000140a;
enum PGM_GETBUTTONSIZE = 0x0000140b;
enum PGM_GETBUTTONSTATE = 0x0000140c;
enum PGM_GETDROPTARGET = 0x00002004;
enum PGM_SETSCROLLINFO = 0x0000140d;
enum WC_NATIVEFONTCTLW = "NativeFontCtl";
enum WC_NATIVEFONTCTLA = "NativeFontCtl";
enum WC_NATIVEFONTCTL = "NativeFontCtl";
enum NFS_EDIT = 0x00000001;
enum NFS_STATIC = 0x00000002;
enum NFS_LISTCOMBO = 0x00000004;
enum NFS_BUTTON = 0x00000008;
enum NFS_ALL = 0x00000010;
enum NFS_USEFONTASSOC = 0x00000020;
enum WC_BUTTONA = "Button";
enum WC_BUTTONW = "Button";
enum WC_BUTTON = "Button";
enum BCM_GETIDEALSIZE = 0x00001601;
enum BCM_SETIMAGELIST = 0x00001602;
enum BCM_GETIMAGELIST = 0x00001603;
enum BCM_SETTEXTMARGIN = 0x00001604;
enum BCM_GETTEXTMARGIN = 0x00001605;
enum BCN_HOTITEMCHANGE = 0xfffffb1f;
enum BST_HOT = 0x00000200;
enum BST_DROPDOWNPUSHED = 0x00000400;
enum BS_SPLITBUTTON = 0x0000000c;
enum BS_DEFSPLITBUTTON = 0x0000000d;
enum BS_COMMANDLINK = 0x0000000e;
enum BS_DEFCOMMANDLINK = 0x0000000f;
enum BCSIF_GLYPH = 0x00000001;
enum BCSIF_IMAGE = 0x00000002;
enum BCSIF_STYLE = 0x00000004;
enum BCSIF_SIZE = 0x00000008;
enum BCSS_NOSPLIT = 0x00000001;
enum BCSS_STRETCH = 0x00000002;
enum BCSS_ALIGNLEFT = 0x00000004;
enum BCSS_IMAGE = 0x00000008;
enum BCM_SETDROPDOWNSTATE = 0x00001606;
enum BCM_SETSPLITINFO = 0x00001607;
enum BCM_GETSPLITINFO = 0x00001608;
enum BCM_SETNOTE = 0x00001609;
enum BCM_GETNOTE = 0x0000160a;
enum BCM_GETNOTELENGTH = 0x0000160b;
enum BCM_SETSHIELD = 0x0000160c;
enum BCN_DROPDOWN = 0xfffffb20;
enum WC_STATICA = "Static";
enum WC_STATICW = "Static";
enum WC_STATIC = "Static";
enum WC_EDITA = "Edit";
enum WC_EDITW = "Edit";
enum WC_EDIT = "Edit";
enum ES_EX_ALLOWEOL_CR = 0x00000001;
enum ES_EX_ALLOWEOL_LF = 0x00000002;
enum ES_EX_CONVERT_EOL_ON_PASTE = 0x00000004;
enum ES_EX_ZOOMABLE = 0x00000010;
enum EM_SETCUEBANNER = 0x00001501;
enum EM_GETCUEBANNER = 0x00001502;
enum EM_SHOWBALLOONTIP = 0x00001503;
enum EM_HIDEBALLOONTIP = 0x00001504;
enum EM_SETHILITE = 0x00001505;
enum EM_GETHILITE = 0x00001506;
enum EM_NOSETFOCUS = 0x00001507;
enum EM_TAKEFOCUS = 0x00001508;
enum EM_SETEXTENDEDSTYLE = 0x0000150a;
enum EM_GETEXTENDEDSTYLE = 0x0000150b;
enum EM_SETENDOFLINE = 0x0000150c;
enum EM_GETENDOFLINE = 0x0000150d;
enum EM_ENABLESEARCHWEB = 0x0000150e;
enum EM_SEARCHWEB = 0x0000150f;
enum EM_SETCARETINDEX = 0x00001511;
enum EM_GETCARETINDEX = 0x00001512;
enum EM_FILELINEFROMCHAR = 0x00001513;
enum EM_FILELINEINDEX = 0x00001514;
enum EM_FILELINELENGTH = 0x00001515;
enum EM_GETFILELINE = 0x00001516;
enum EM_GETFILELINECOUNT = 0x00001517;
enum WC_LISTBOXA = "ListBox";
enum WC_LISTBOXW = "ListBox";
enum WC_LISTBOX = "ListBox";
enum WC_COMBOBOXA = "ComboBox";
enum WC_COMBOBOXW = "ComboBox";
enum WC_COMBOBOX = "ComboBox";
enum CB_SETMINVISIBLE = 0x00001701;
enum CB_GETMINVISIBLE = 0x00001702;
enum CB_SETCUEBANNER = 0x00001703;
enum CB_GETCUEBANNER = 0x00001704;
enum WC_SCROLLBARA = "ScrollBar";
enum WC_SCROLLBARW = "ScrollBar";
enum WC_SCROLLBAR = "ScrollBar";
enum TD_WARNING_ICON = 0xffffffffffffffff;
enum TD_ERROR_ICON = 0xfffffffffffffffe;
enum TD_INFORMATION_ICON = 0xfffffffffffffffd;
enum TD_SHIELD_ICON = 0xfffffffffffffffc;
enum WM_MOUSEHOVER = 0x000002a1;
enum WM_MOUSELEAVE = 0x000002a3;
enum HOVER_DEFAULT = 0xffffffff;
enum WSB_PROP_MASK = 0x00000fff;
enum FSB_FLAT_MODE = 0x00000002;
enum FSB_ENCARTA_MODE = 0x00000001;
enum FSB_REGULAR_MODE = 0x00000000;
enum ILDRF_IMAGELOWQUALITY = 0x00000001;
enum ILDRF_OVERLAYLOWQUALITY = 0x00000010;
enum ILR_DEFAULT = 0x00000000;
enum ILR_HORIZONTAL_LEFT = 0x00000000;
enum ILR_HORIZONTAL_CENTER = 0x00000001;
enum ILR_HORIZONTAL_RIGHT = 0x00000002;
enum ILR_VERTICAL_TOP = 0x00000000;
enum ILR_VERTICAL_CENTER = 0x00000010;
enum ILR_VERTICAL_BOTTOM = 0x00000020;
enum ILR_SCALE_CLIP = 0x00000000;
enum ILR_SCALE_ASPECTRATIO = 0x00000100;
enum ILGOS_ALWAYS = 0x00000000;
enum ILGOS_FROMSTANDBY = 0x00000001;
enum ILFIP_ALWAYS = 0x00000000;
enum ILFIP_FROMSTANDBY = 0x00000001;
enum ILDI_PURGE = 0x00000001;
enum ILDI_STANDBY = 0x00000002;
enum ILDI_RESETACCESS = 0x00000004;
enum ILDI_QUERYACCESS = 0x00000008;
enum CCHCCCLASS = 0x00000020;
enum CCHCCDESC = 0x00000020;
enum CCHCCTEXT = 0x00000100;
enum CCF_NOTEXT = 0x00000001;
enum ctlFirst = 0x00000400;
enum ctlLast = 0x000004ff;
enum psh1 = 0x00000400;
enum psh2 = 0x00000401;
enum psh3 = 0x00000402;
enum psh4 = 0x00000403;
enum psh5 = 0x00000404;
enum psh6 = 0x00000405;
enum psh7 = 0x00000406;
enum psh8 = 0x00000407;
enum psh9 = 0x00000408;
enum psh10 = 0x00000409;
enum psh11 = 0x0000040a;
enum psh12 = 0x0000040b;
enum psh13 = 0x0000040c;
enum psh14 = 0x0000040d;
enum psh15 = 0x0000040e;
enum pshHelp = 0x0000040e;
enum psh16 = 0x0000040f;
enum chx1 = 0x00000410;
enum chx2 = 0x00000411;
enum chx3 = 0x00000412;
enum chx4 = 0x00000413;
enum chx5 = 0x00000414;
enum chx6 = 0x00000415;
enum chx7 = 0x00000416;
enum chx8 = 0x00000417;
enum chx9 = 0x00000418;
enum chx10 = 0x00000419;
enum chx11 = 0x0000041a;
enum chx12 = 0x0000041b;
enum chx13 = 0x0000041c;
enum chx14 = 0x0000041d;
enum chx15 = 0x0000041e;
enum chx16 = 0x0000041f;
enum rad1 = 0x00000420;
enum rad2 = 0x00000421;
enum rad3 = 0x00000422;
enum rad4 = 0x00000423;
enum rad5 = 0x00000424;
enum rad6 = 0x00000425;
enum rad7 = 0x00000426;
enum rad8 = 0x00000427;
enum rad9 = 0x00000428;
enum rad10 = 0x00000429;
enum rad11 = 0x0000042a;
enum rad12 = 0x0000042b;
enum rad13 = 0x0000042c;
enum rad14 = 0x0000042d;
enum rad15 = 0x0000042e;
enum rad16 = 0x0000042f;
enum grp1 = 0x00000430;
enum grp2 = 0x00000431;
enum grp3 = 0x00000432;
enum grp4 = 0x00000433;
enum frm1 = 0x00000434;
enum frm2 = 0x00000435;
enum frm3 = 0x00000436;
enum frm4 = 0x00000437;
enum rct1 = 0x00000438;
enum rct2 = 0x00000439;
enum rct3 = 0x0000043a;
enum rct4 = 0x0000043b;
enum ico1 = 0x0000043c;
enum ico2 = 0x0000043d;
enum ico3 = 0x0000043e;
enum ico4 = 0x0000043f;
enum stc1 = 0x00000440;
enum stc2 = 0x00000441;
enum stc3 = 0x00000442;
enum stc4 = 0x00000443;
enum stc5 = 0x00000444;
enum stc6 = 0x00000445;
enum stc7 = 0x00000446;
enum stc8 = 0x00000447;
enum stc9 = 0x00000448;
enum stc10 = 0x00000449;
enum stc11 = 0x0000044a;
enum stc12 = 0x0000044b;
enum stc13 = 0x0000044c;
enum stc14 = 0x0000044d;
enum stc15 = 0x0000044e;
enum stc16 = 0x0000044f;
enum stc17 = 0x00000450;
enum stc18 = 0x00000451;
enum stc19 = 0x00000452;
enum stc20 = 0x00000453;
enum stc21 = 0x00000454;
enum stc22 = 0x00000455;
enum stc23 = 0x00000456;
enum stc24 = 0x00000457;
enum stc25 = 0x00000458;
enum stc26 = 0x00000459;
enum stc27 = 0x0000045a;
enum stc28 = 0x0000045b;
enum stc29 = 0x0000045c;
enum stc30 = 0x0000045d;
enum stc31 = 0x0000045e;
enum stc32 = 0x0000045f;
enum lst1 = 0x00000460;
enum lst2 = 0x00000461;
enum lst3 = 0x00000462;
enum lst4 = 0x00000463;
enum lst5 = 0x00000464;
enum lst6 = 0x00000465;
enum lst7 = 0x00000466;
enum lst8 = 0x00000467;
enum lst9 = 0x00000468;
enum lst10 = 0x00000469;
enum lst11 = 0x0000046a;
enum lst12 = 0x0000046b;
enum lst13 = 0x0000046c;
enum lst14 = 0x0000046d;
enum lst15 = 0x0000046e;
enum lst16 = 0x0000046f;
enum cmb1 = 0x00000470;
enum cmb2 = 0x00000471;
enum cmb3 = 0x00000472;
enum cmb4 = 0x00000473;
enum cmb5 = 0x00000474;
enum cmb6 = 0x00000475;
enum cmb7 = 0x00000476;
enum cmb8 = 0x00000477;
enum cmb9 = 0x00000478;
enum cmb10 = 0x00000479;
enum cmb11 = 0x0000047a;
enum cmb12 = 0x0000047b;
enum cmb13 = 0x0000047c;
enum cmb14 = 0x0000047d;
enum cmb15 = 0x0000047e;
enum cmb16 = 0x0000047f;
enum edt1 = 0x00000480;
enum edt2 = 0x00000481;
enum edt3 = 0x00000482;
enum edt4 = 0x00000483;
enum edt5 = 0x00000484;
enum edt6 = 0x00000485;
enum edt7 = 0x00000486;
enum edt8 = 0x00000487;
enum edt9 = 0x00000488;
enum edt10 = 0x00000489;
enum edt11 = 0x0000048a;
enum edt12 = 0x0000048b;
enum edt13 = 0x0000048c;
enum edt14 = 0x0000048d;
enum edt15 = 0x0000048e;
enum edt16 = 0x0000048f;
enum scr1 = 0x00000490;
enum scr2 = 0x00000491;
enum scr3 = 0x00000492;
enum scr4 = 0x00000493;
enum scr5 = 0x00000494;
enum scr6 = 0x00000495;
enum scr7 = 0x00000496;
enum scr8 = 0x00000497;
enum ctl1 = 0x000004a0;
enum FILEOPENORD = 0x00000600;
enum MULTIFILEOPENORD = 0x00000601;
enum PRINTDLGORD = 0x00000602;
enum PRNSETUPDLGORD = 0x00000603;
enum FINDDLGORD = 0x00000604;
enum REPLACEDLGORD = 0x00000605;
enum FONTDLGORD = 0x00000606;
enum FORMATDLGORD31 = 0x00000607;
enum FORMATDLGORD30 = 0x00000608;
enum RUNDLGORD = 0x00000609;
enum PAGESETUPDLGORD = 0x0000060a;
enum NEWFILEOPENORD = 0x0000060b;
enum PRINTDLGEXORD = 0x0000060d;
enum PAGESETUPDLGORDMOTIF = 0x0000060e;
enum COLORMGMTDLGORD = 0x0000060f;
enum NEWFILEOPENV2ORD = 0x00000610;
enum NEWFILEOPENV3ORD = 0x00000611;
enum NEWFORMATDLGWITHLINK = 0x00000637;
enum IDC_MANAGE_LINK = 0x00000638;
enum DA_LAST = 0x7fffffff;
enum DA_ERR = 0xffffffffffffffff;
enum DSA_APPEND = 0x7fffffff;
enum DSA_ERR = 0xffffffffffffffff;
enum DPAM_SORTED = 0x00000001;
enum DPAM_NORMAL = 0x00000002;
enum DPAM_UNION = 0x00000004;
enum DPAM_INTERSECT = 0x00000008;
enum DPAS_SORTED = 0x00000001;
enum DPAS_INSERTBEFORE = 0x00000002;
enum DPAS_INSERTAFTER = 0x00000004;
enum DPA_APPEND = 0x7fffffff;
enum DPA_ERR = 0xffffffffffffffff;
enum MAXPROPPAGES = 0x00000064;
enum PSP_DEFAULT = 0x00000000;
enum PSP_DLGINDIRECT = 0x00000001;
enum PSP_USEHICON = 0x00000002;
enum PSP_USEICONID = 0x00000004;
enum PSP_USETITLE = 0x00000008;
enum PSP_RTLREADING = 0x00000010;
enum PSP_HASHELP = 0x00000020;
enum PSP_USEREFPARENT = 0x00000040;
enum PSP_USECALLBACK = 0x00000080;
enum PSP_PREMATURE = 0x00000400;
enum PSP_HIDEHEADER = 0x00000800;
enum PSP_USEHEADERTITLE = 0x00001000;
enum PSP_USEHEADERSUBTITLE = 0x00002000;
enum PSP_USEFUSIONCONTEXT = 0x00004000;
enum PSH_DEFAULT = 0x00000000;
enum PSH_PROPTITLE = 0x00000001;
enum PSH_USEHICON = 0x00000002;
enum PSH_USEICONID = 0x00000004;
enum PSH_PROPSHEETPAGE = 0x00000008;
enum PSH_WIZARDHASFINISH = 0x00000010;
enum PSH_WIZARD = 0x00000020;
enum PSH_USEPSTARTPAGE = 0x00000040;
enum PSH_NOAPPLYNOW = 0x00000080;
enum PSH_USECALLBACK = 0x00000100;
enum PSH_HASHELP = 0x00000200;
enum PSH_MODELESS = 0x00000400;
enum PSH_RTLREADING = 0x00000800;
enum PSH_WIZARDCONTEXTHELP = 0x00001000;
enum PSH_WIZARD97 = 0x00002000;
enum PSH_WATERMARK = 0x00008000;
enum PSH_USEHBMWATERMARK = 0x00010000;
enum PSH_USEHPLWATERMARK = 0x00020000;
enum PSH_STRETCHWATERMARK = 0x00040000;
enum PSH_HEADER = 0x00080000;
enum PSH_USEHBMHEADER = 0x00100000;
enum PSH_USEPAGELANG = 0x00200000;
enum PSH_WIZARD_LITE = 0x00400000;
enum PSH_NOCONTEXTHELP = 0x02000000;
enum PSH_AEROWIZARD = 0x00004000;
enum PSH_RESIZABLE = 0x04000000;
enum PSH_HEADERBITMAP = 0x08000000;
enum PSH_NOMARGIN = 0x10000000;
enum PSCB_INITIALIZED = 0x00000001;
enum PSCB_PRECREATE = 0x00000002;
enum PSCB_BUTTONPRESSED = 0x00000003;
enum PSNRET_NOERROR = 0x00000000;
enum PSNRET_INVALID = 0x00000001;
enum PSNRET_INVALID_NOCHANGEPAGE = 0x00000002;
enum PSNRET_MESSAGEHANDLED = 0x00000003;
enum PSM_SETCURSEL = 0x00000465;
enum PSM_REMOVEPAGE = 0x00000466;
enum PSM_ADDPAGE = 0x00000467;
enum PSM_CHANGED = 0x00000468;
enum PSM_RESTARTWINDOWS = 0x00000469;
enum PSM_REBOOTSYSTEM = 0x0000046a;
enum PSM_CANCELTOCLOSE = 0x0000046b;
enum PSM_QUERYSIBLINGS = 0x0000046c;
enum PSM_UNCHANGED = 0x0000046d;
enum PSM_APPLY = 0x0000046e;
enum PSM_SETTITLEA = 0x0000046f;
enum PSM_SETTITLEW = 0x00000478;
enum PSM_SETTITLE = 0x00000478;
enum PSM_SETWIZBUTTONS = 0x00000470;
enum PSWIZB_BACK = 0x00000001;
enum PSWIZB_NEXT = 0x00000002;
enum PSWIZB_FINISH = 0x00000004;
enum PSWIZB_DISABLEDFINISH = 0x00000008;
enum PSWIZBF_ELEVATIONREQUIRED = 0x00000001;
enum PSWIZB_CANCEL = 0x00000010;
enum PSM_PRESSBUTTON = 0x00000471;
enum PSBTN_BACK = 0x00000000;
enum PSBTN_NEXT = 0x00000001;
enum PSBTN_FINISH = 0x00000002;
enum PSBTN_OK = 0x00000003;
enum PSBTN_APPLYNOW = 0x00000004;
enum PSBTN_CANCEL = 0x00000005;
enum PSBTN_HELP = 0x00000006;
enum PSBTN_MAX = 0x00000006;
enum PSM_SETCURSELID = 0x00000472;
enum PSM_SETFINISHTEXTA = 0x00000473;
enum PSM_SETFINISHTEXTW = 0x00000479;
enum PSM_SETFINISHTEXT = 0x00000479;
enum PSM_GETTABCONTROL = 0x00000474;
enum PSM_ISDIALOGMESSAGE = 0x00000475;
enum PSM_GETCURRENTPAGEHWND = 0x00000476;
enum PSM_INSERTPAGE = 0x00000477;
enum PSM_SETHEADERTITLEA = 0x0000047d;
enum PSM_SETHEADERTITLEW = 0x0000047e;
enum PSM_SETHEADERTITLE = 0x0000047e;
enum PSM_SETHEADERSUBTITLEA = 0x0000047f;
enum PSM_SETHEADERSUBTITLEW = 0x00000480;
enum PSM_SETHEADERSUBTITLE = 0x00000480;
enum PSM_HWNDTOINDEX = 0x00000481;
enum PSM_INDEXTOHWND = 0x00000482;
enum PSM_PAGETOINDEX = 0x00000483;
enum PSM_INDEXTOPAGE = 0x00000484;
enum PSM_IDTOINDEX = 0x00000485;
enum PSM_INDEXTOID = 0x00000486;
enum PSM_GETRESULT = 0x00000487;
enum PSM_RECALCPAGESIZES = 0x00000488;
enum PSM_SETNEXTTEXTW = 0x00000489;
enum PSM_SETNEXTTEXT = 0x00000489;
enum PSWIZB_SHOW = 0x00000000;
enum PSWIZB_RESTORE = 0x00000001;
enum PSM_SHOWWIZBUTTONS = 0x0000048a;
enum PSM_ENABLEWIZBUTTONS = 0x0000048b;
enum PSM_SETBUTTONTEXTW = 0x0000048c;
enum PSM_SETBUTTONTEXT = 0x0000048c;
enum ID_PSRESTARTWINDOWS = 0x00000002;
enum WIZ_CXDLG = 0x00000114;
enum WIZ_CYDLG = 0x0000008c;
enum WIZ_CXBMP = 0x00000050;
enum WIZ_BODYX = 0x0000005c;
enum WIZ_BODYCX = 0x000000b8;
enum PROP_SM_CXDLG = 0x000000d4;
enum PROP_SM_CYDLG = 0x000000bc;
enum PROP_MED_CXDLG = 0x000000e3;
enum PROP_MED_CYDLG = 0x000000d7;
enum PROP_LG_CXDLG = 0x000000fc;
enum PROP_LG_CYDLG = 0x000000da;
enum MAX_THEMECOLOR = 0x00000040;
enum MAX_THEMESIZE = 0x00000040;
enum DTBG_CLIPRECT = 0x00000001;
enum DTBG_DRAWSOLID = 0x00000002;
enum DTBG_OMITBORDER = 0x00000004;
enum DTBG_OMITCONTENT = 0x00000008;
enum DTBG_COMPUTINGREGION = 0x00000010;
enum DTBG_MIRRORDC = 0x00000020;
enum DTBG_NOMIRROR = 0x00000040;
enum DTT_GRAYED = 0x00000001;
enum DTT_FLAGS2VALIDBITS = 0x00000001;
enum MAX_INTLIST_COUNT = 0x00000192;
enum ETDT_DISABLE = 0x00000001;
enum ETDT_ENABLE = 0x00000002;
enum ETDT_USETABTEXTURE = 0x00000004;
enum ETDT_USEAEROWIZARDTABTEXTURE = 0x00000008;
enum SZ_THDOCPROP_DISPLAYNAME = "DisplayName";
enum SZ_THDOCPROP_CANONICALNAME = "ThemeName";
enum SZ_THDOCPROP_TOOLTIP = "ToolTip";
enum SZ_THDOCPROP_AUTHOR = "author";
enum WTNCA_NODRAWCAPTION = 0x00000001;
enum WTNCA_NODRAWICON = 0x00000002;
enum WTNCA_NOSYSMENU = 0x00000004;
enum WTNCA_NOMIRRORHELP = 0x00000008;
enum TMTVS_RESERVEDLOW = 0x000186a0;
enum TMTVS_RESERVEDHIGH = 0x00004e1f;
enum VSCLASS_AEROWIZARDSTYLE = "AEROWIZARDSTYLE";
enum VSCLASS_AEROWIZARD = "AEROWIZARD";
enum VSCLASS_BUTTONSTYLE = "BUTTONSTYLE";
enum VSCLASS_BUTTON = "BUTTON";
enum VSCLASS_COMBOBOXSTYLE = "COMBOBOXSTYLE";
enum VSCLASS_COMBOBOX = "COMBOBOX";
enum VSCLASS_COMMUNICATIONSSTYLE = "COMMUNICATIONSSTYLE";
enum VSCLASS_COMMUNICATIONS = "COMMUNICATIONS";
enum VSCLASS_CONTROLPANELSTYLE = "CONTROLPANELSTYLE";
enum VSCLASS_CONTROLPANEL = "CONTROLPANEL";
enum VSCLASS_DATEPICKERSTYLE = "DATEPICKERSTYLE";
enum VSCLASS_DATEPICKER = "DATEPICKER";
enum VSCLASS_DRAGDROPSTYLE = "DRAGDROPSTYLE";
enum VSCLASS_DRAGDROP = "DRAGDROP";
enum VSCLASS_EDITSTYLE = "EDITSTYLE";
enum VSCLASS_EDIT = "EDIT";
enum VSCLASS_EXPLORERBARSTYLE = "EXPLORERBARSTYLE";
enum VSCLASS_EXPLORERBAR = "EXPLORERBAR";
enum VSCLASS_FLYOUTSTYLE = "FLYOUTSTYLE";
enum VSCLASS_FLYOUT = "FLYOUT";
enum VSCLASS_HEADERSTYLE = "HEADERSTYLE";
enum VSCLASS_HEADER = "HEADER";
enum VSCLASS_LISTBOXSTYLE = "LISTBOXSTYLE";
enum VSCLASS_LISTBOX = "LISTBOX";
enum VSCLASS_LISTVIEWSTYLE = "LISTVIEWSTYLE";
enum VSCLASS_LISTVIEW = "LISTVIEW";
enum VSCLASS_MENUSTYLE = "MENUSTYLE";
enum VSCLASS_MENU = "MENU";
enum VSCLASS_NAVIGATION = "NAVIGATION";
enum VSCLASS_PROGRESSSTYLE = "PROGRESSSTYLE";
enum VSCLASS_PROGRESS = "PROGRESS";
enum VSCLASS_REBARSTYLE = "REBARSTYLE";
enum VSCLASS_REBAR = "REBAR";
enum VSCLASS_SCROLLBARSTYLE = "SCROLLBARSTYLE";
enum VSCLASS_SCROLLBAR = "SCROLLBAR";
enum VSCLASS_SPINSTYLE = "SPINSTYLE";
enum VSCLASS_SPIN = "SPIN";
enum VSCLASS_STATUSSTYLE = "STATUSSTYLE";
enum VSCLASS_STATUS = "STATUS";
enum VSCLASS_TABSTYLE = "TABSTYLE";
enum VSCLASS_TAB = "TAB";
enum VSCLASS_TASKDIALOGSTYLE = "TASKDIALOGSTYLE";
enum VSCLASS_TASKDIALOG = "TASKDIALOG";
enum VSCLASS_TEXTSTYLE = "TEXTSTYLE";
enum VSCLASS_TOOLBARSTYLE = "TOOLBARSTYLE";
enum VSCLASS_TOOLBAR = "TOOLBAR";
enum VSCLASS_TOOLTIPSTYLE = "TOOLTIPSTYLE";
enum VSCLASS_TOOLTIP = "TOOLTIP";
enum VSCLASS_TRACKBARSTYLE = "TRACKBARSTYLE";
enum VSCLASS_TRACKBAR = "TRACKBAR";
enum VSCLASS_TREEVIEWSTYLE = "TREEVIEWSTYLE";
enum VSCLASS_TREEVIEW = "TREEVIEW";
enum VSCLASS_USERTILE = "USERTILE";
enum VSCLASS_TEXTSELECTIONGRIPPER = "TEXTSELECTIONGRIPPER";
enum VSCLASS_WINDOWSTYLE = "WINDOWSTYLE";
enum VSCLASS_WINDOW = "WINDOW";
enum VSCLASS_LINK = "LINK";
enum VSCLASS_EMPTYMARKUP = "EMPTYMARKUP";
enum VSCLASS_STATIC = "STATIC";
enum VSCLASS_PAGE = "PAGE";
enum VSCLASS_MONTHCAL = "MONTHCAL";
enum VSCLASS_CLOCK = "CLOCK";
enum VSCLASS_TRAYNOTIFY = "TRAYNOTIFY";
enum VSCLASS_TASKBAR = "TASKBAR";
enum VSCLASS_TASKBAND = "TASKBAND";
enum VSCLASS_STARTPANEL = "STARTPANEL";
enum VSCLASS_MENUBAND = "MENUBAND";
enum EM_GETSEL = 0x000000b0;
enum EM_SETSEL = 0x000000b1;
enum EM_GETRECT = 0x000000b2;
enum EM_SETRECT = 0x000000b3;
enum EM_SETRECTNP = 0x000000b4;
enum EM_SCROLL = 0x000000b5;
enum EM_LINESCROLL = 0x000000b6;
enum EM_GETMODIFY = 0x000000b8;
enum EM_SETMODIFY = 0x000000b9;
enum EM_GETLINECOUNT = 0x000000ba;
enum EM_LINEINDEX = 0x000000bb;
enum EM_SETHANDLE = 0x000000bc;
enum EM_GETHANDLE = 0x000000bd;
enum EM_GETTHUMB = 0x000000be;
enum EM_LINELENGTH = 0x000000c1;
enum EM_REPLACESEL = 0x000000c2;
enum EM_GETLINE = 0x000000c4;
enum EM_LIMITTEXT = 0x000000c5;
enum EM_CANUNDO = 0x000000c6;
enum EM_UNDO = 0x000000c7;
enum EM_FMTLINES = 0x000000c8;
enum EM_LINEFROMCHAR = 0x000000c9;
enum EM_SETTABSTOPS = 0x000000cb;
enum EM_SETPASSWORDCHAR = 0x000000cc;
enum EM_EMPTYUNDOBUFFER = 0x000000cd;
enum EM_GETFIRSTVISIBLELINE = 0x000000ce;
enum EM_SETREADONLY = 0x000000cf;
enum EM_SETWORDBREAKPROC = 0x000000d0;
enum EM_GETWORDBREAKPROC = 0x000000d1;
enum EM_GETPASSWORDCHAR = 0x000000d2;
enum EM_SETMARGINS = 0x000000d3;
enum EM_GETMARGINS = 0x000000d4;
enum EM_SETIMESTATUS = 0x000000d8;
enum EM_GETIMESTATUS = 0x000000d9;
enum EM_ENABLEFEATURE = 0x000000da;
alias THEME_PROPERTY_SYMBOL_ID = uint;
enum : uint
{
    TMT_RESERVEDLOW             = 0x00000000,
    TMT_RESERVEDHIGH            = 0x00001f3f,
    TMT_DIBDATA                 = 0x00000002,
    TMT_GLYPHDIBDATA            = 0x00000008,
    TMT_ENUM                    = 0x000000c8,
    TMT_STRING                  = 0x000000c9,
    TMT_INT                     = 0x000000ca,
    TMT_BOOL                    = 0x000000cb,
    TMT_COLOR                   = 0x000000cc,
    TMT_MARGINS                 = 0x000000cd,
    TMT_FILENAME                = 0x000000ce,
    TMT_SIZE                    = 0x000000cf,
    TMT_POSITION                = 0x000000d0,
    TMT_RECT                    = 0x000000d1,
    TMT_FONT                    = 0x000000d2,
    TMT_INTLIST                 = 0x000000d3,
    TMT_HBITMAP                 = 0x000000d4,
    TMT_DISKSTREAM              = 0x000000d5,
    TMT_STREAM                  = 0x000000d6,
    TMT_BITMAPREF               = 0x000000d7,
    TMT_FLOAT                   = 0x000000d8,
    TMT_FLOATLIST               = 0x000000d9,
    TMT_COLORSCHEMES            = 0x00000191,
    TMT_SIZES                   = 0x00000192,
    TMT_CHARSET                 = 0x00000193,
    TMT_NAME                    = 0x00000258,
    TMT_DISPLAYNAME             = 0x00000259,
    TMT_TOOLTIP                 = 0x0000025a,
    TMT_COMPANY                 = 0x0000025b,
    TMT_AUTHOR                  = 0x0000025c,
    TMT_COPYRIGHT               = 0x0000025d,
    TMT_URL                     = 0x0000025e,
    TMT_VERSION                 = 0x0000025f,
    TMT_DESCRIPTION             = 0x00000260,
    TMT_FIRST_RCSTRING_NAME     = 0x00000259,
    TMT_LAST_RCSTRING_NAME      = 0x00000260,
    TMT_CAPTIONFONT             = 0x00000321,
    TMT_SMALLCAPTIONFONT        = 0x00000322,
    TMT_MENUFONT                = 0x00000323,
    TMT_STATUSFONT              = 0x00000324,
    TMT_MSGBOXFONT              = 0x00000325,
    TMT_ICONTITLEFONT           = 0x00000326,
    TMT_HEADING1FONT            = 0x00000327,
    TMT_HEADING2FONT            = 0x00000328,
    TMT_BODYFONT                = 0x00000329,
    TMT_FIRSTFONT               = 0x00000321,
    TMT_LASTFONT                = 0x00000329,
    TMT_FLATMENUS               = 0x000003e9,
    TMT_FIRSTBOOL               = 0x000003e9,
    TMT_LASTBOOL                = 0x000003e9,
    TMT_SIZINGBORDERWIDTH       = 0x000004b1,
    TMT_SCROLLBARWIDTH          = 0x000004b2,
    TMT_SCROLLBARHEIGHT         = 0x000004b3,
    TMT_CAPTIONBARWIDTH         = 0x000004b4,
    TMT_CAPTIONBARHEIGHT        = 0x000004b5,
    TMT_SMCAPTIONBARWIDTH       = 0x000004b6,
    TMT_SMCAPTIONBARHEIGHT      = 0x000004b7,
    TMT_MENUBARWIDTH            = 0x000004b8,
    TMT_MENUBARHEIGHT           = 0x000004b9,
    TMT_PADDEDBORDERWIDTH       = 0x000004ba,
    TMT_FIRSTSIZE               = 0x000004b1,
    TMT_LASTSIZE                = 0x000004ba,
    TMT_MINCOLORDEPTH           = 0x00000515,
    TMT_FIRSTINT                = 0x00000515,
    TMT_LASTINT                 = 0x00000515,
    TMT_CSSNAME                 = 0x00000579,
    TMT_XMLNAME                 = 0x0000057a,
    TMT_LASTUPDATED             = 0x0000057b,
    TMT_ALIAS                   = 0x0000057c,
    TMT_FIRSTSTRING             = 0x00000579,
    TMT_LASTSTRING              = 0x0000057c,
    TMT_SCROLLBAR               = 0x00000641,
    TMT_BACKGROUND              = 0x00000642,
    TMT_ACTIVECAPTION           = 0x00000643,
    TMT_INACTIVECAPTION         = 0x00000644,
    TMT_MENU                    = 0x00000645,
    TMT_WINDOW                  = 0x00000646,
    TMT_WINDOWFRAME             = 0x00000647,
    TMT_MENUTEXT                = 0x00000648,
    TMT_WINDOWTEXT              = 0x00000649,
    TMT_CAPTIONTEXT             = 0x0000064a,
    TMT_ACTIVEBORDER            = 0x0000064b,
    TMT_INACTIVEBORDER          = 0x0000064c,
    TMT_APPWORKSPACE            = 0x0000064d,
    TMT_HIGHLIGHT               = 0x0000064e,
    TMT_HIGHLIGHTTEXT           = 0x0000064f,
    TMT_BTNFACE                 = 0x00000650,
    TMT_BTNSHADOW               = 0x00000651,
    TMT_GRAYTEXT                = 0x00000652,
    TMT_BTNTEXT                 = 0x00000653,
    TMT_INACTIVECAPTIONTEXT     = 0x00000654,
    TMT_BTNHIGHLIGHT            = 0x00000655,
    TMT_DKSHADOW3D              = 0x00000656,
    TMT_LIGHT3D                 = 0x00000657,
    TMT_INFOTEXT                = 0x00000658,
    TMT_INFOBK                  = 0x00000659,
    TMT_BUTTONALTERNATEFACE     = 0x0000065a,
    TMT_HOTTRACKING             = 0x0000065b,
    TMT_GRADIENTACTIVECAPTION   = 0x0000065c,
    TMT_GRADIENTINACTIVECAPTION = 0x0000065d,
    TMT_MENUHILIGHT             = 0x0000065e,
    TMT_MENUBAR                 = 0x0000065f,
    TMT_FIRSTCOLOR              = 0x00000641,
    TMT_LASTCOLOR               = 0x0000065f,
    TMT_FROMHUE1                = 0x00000709,
    TMT_FROMHUE2                = 0x0000070a,
    TMT_FROMHUE3                = 0x0000070b,
    TMT_FROMHUE4                = 0x0000070c,
    TMT_FROMHUE5                = 0x0000070d,
    TMT_TOHUE1                  = 0x0000070e,
    TMT_TOHUE2                  = 0x0000070f,
    TMT_TOHUE3                  = 0x00000710,
    TMT_TOHUE4                  = 0x00000711,
    TMT_TOHUE5                  = 0x00000712,
    TMT_FROMCOLOR1              = 0x000007d1,
    TMT_FROMCOLOR2              = 0x000007d2,
    TMT_FROMCOLOR3              = 0x000007d3,
    TMT_FROMCOLOR4              = 0x000007d4,
    TMT_FROMCOLOR5              = 0x000007d5,
    TMT_TOCOLOR1                = 0x000007d6,
    TMT_TOCOLOR2                = 0x000007d7,
    TMT_TOCOLOR3                = 0x000007d8,
    TMT_TOCOLOR4                = 0x000007d9,
    TMT_TOCOLOR5                = 0x000007da,
    TMT_TRANSPARENT             = 0x00000899,
    TMT_AUTOSIZE                = 0x0000089a,
    TMT_BORDERONLY              = 0x0000089b,
    TMT_COMPOSITED              = 0x0000089c,
    TMT_BGFILL                  = 0x0000089d,
    TMT_GLYPHTRANSPARENT        = 0x0000089e,
    TMT_GLYPHONLY               = 0x0000089f,
    TMT_ALWAYSSHOWSIZINGBAR     = 0x000008a0,
    TMT_MIRRORIMAGE             = 0x000008a1,
    TMT_UNIFORMSIZING           = 0x000008a2,
    TMT_INTEGRALSIZING          = 0x000008a3,
    TMT_SOURCEGROW              = 0x000008a4,
    TMT_SOURCESHRINK            = 0x000008a5,
    TMT_DRAWBORDERS             = 0x000008a6,
    TMT_NOETCHEDEFFECT          = 0x000008a7,
    TMT_TEXTAPPLYOVERLAY        = 0x000008a8,
    TMT_TEXTGLOW                = 0x000008a9,
    TMT_TEXTITALIC              = 0x000008aa,
    TMT_COMPOSITEDOPAQUE        = 0x000008ab,
    TMT_LOCALIZEDMIRRORIMAGE    = 0x000008ac,
    TMT_IMAGECOUNT              = 0x00000961,
    TMT_ALPHALEVEL              = 0x00000962,
    TMT_BORDERSIZE              = 0x00000963,
    TMT_ROUNDCORNERWIDTH        = 0x00000964,
    TMT_ROUNDCORNERHEIGHT       = 0x00000965,
    TMT_GRADIENTRATIO1          = 0x00000966,
    TMT_GRADIENTRATIO2          = 0x00000967,
    TMT_GRADIENTRATIO3          = 0x00000968,
    TMT_GRADIENTRATIO4          = 0x00000969,
    TMT_GRADIENTRATIO5          = 0x0000096a,
    TMT_PROGRESSCHUNKSIZE       = 0x0000096b,
    TMT_PROGRESSSPACESIZE       = 0x0000096c,
    TMT_SATURATION              = 0x0000096d,
    TMT_TEXTBORDERSIZE          = 0x0000096e,
    TMT_ALPHATHRESHOLD          = 0x0000096f,
    TMT_WIDTH                   = 0x00000970,
    TMT_HEIGHT                  = 0x00000971,
    TMT_GLYPHINDEX              = 0x00000972,
    TMT_TRUESIZESTRETCHMARK     = 0x00000973,
    TMT_MINDPI1                 = 0x00000974,
    TMT_MINDPI2                 = 0x00000975,
    TMT_MINDPI3                 = 0x00000976,
    TMT_MINDPI4                 = 0x00000977,
    TMT_MINDPI5                 = 0x00000978,
    TMT_TEXTGLOWSIZE            = 0x00000979,
    TMT_FRAMESPERSECOND         = 0x0000097a,
    TMT_PIXELSPERFRAME          = 0x0000097b,
    TMT_ANIMATIONDELAY          = 0x0000097c,
    TMT_GLOWINTENSITY           = 0x0000097d,
    TMT_OPACITY                 = 0x0000097e,
    TMT_COLORIZATIONCOLOR       = 0x0000097f,
    TMT_COLORIZATIONOPACITY     = 0x00000980,
    TMT_MINDPI6                 = 0x00000981,
    TMT_MINDPI7                 = 0x00000982,
    TMT_GLYPHFONT               = 0x00000a29,
    TMT_IMAGEFILE               = 0x00000bb9,
    TMT_IMAGEFILE1              = 0x00000bba,
    TMT_IMAGEFILE2              = 0x00000bbb,
    TMT_IMAGEFILE3              = 0x00000bbc,
    TMT_IMAGEFILE4              = 0x00000bbd,
    TMT_IMAGEFILE5              = 0x00000bbe,
    TMT_GLYPHIMAGEFILE          = 0x00000bc0,
    TMT_IMAGEFILE6              = 0x00000bc1,
    TMT_IMAGEFILE7              = 0x00000bc2,
    TMT_TEXT                    = 0x00000c81,
    TMT_CLASSICVALUE            = 0x00000c82,
    TMT_OFFSET                  = 0x00000d49,
    TMT_TEXTSHADOWOFFSET        = 0x00000d4a,
    TMT_MINSIZE                 = 0x00000d4b,
    TMT_MINSIZE1                = 0x00000d4c,
    TMT_MINSIZE2                = 0x00000d4d,
    TMT_MINSIZE3                = 0x00000d4e,
    TMT_MINSIZE4                = 0x00000d4f,
    TMT_MINSIZE5                = 0x00000d50,
    TMT_NORMALSIZE              = 0x00000d51,
    TMT_MINSIZE6                = 0x00000d52,
    TMT_MINSIZE7                = 0x00000d53,
    TMT_SIZINGMARGINS           = 0x00000e11,
    TMT_CONTENTMARGINS          = 0x00000e12,
    TMT_CAPTIONMARGINS          = 0x00000e13,
    TMT_BORDERCOLOR             = 0x00000ed9,
    TMT_FILLCOLOR               = 0x00000eda,
    TMT_TEXTCOLOR               = 0x00000edb,
    TMT_EDGELIGHTCOLOR          = 0x00000edc,
    TMT_EDGEHIGHLIGHTCOLOR      = 0x00000edd,
    TMT_EDGESHADOWCOLOR         = 0x00000ede,
    TMT_EDGEDKSHADOWCOLOR       = 0x00000edf,
    TMT_EDGEFILLCOLOR           = 0x00000ee0,
    TMT_TRANSPARENTCOLOR        = 0x00000ee1,
    TMT_GRADIENTCOLOR1          = 0x00000ee2,
    TMT_GRADIENTCOLOR2          = 0x00000ee3,
    TMT_GRADIENTCOLOR3          = 0x00000ee4,
    TMT_GRADIENTCOLOR4          = 0x00000ee5,
    TMT_GRADIENTCOLOR5          = 0x00000ee6,
    TMT_SHADOWCOLOR             = 0x00000ee7,
    TMT_GLOWCOLOR               = 0x00000ee8,
    TMT_TEXTBORDERCOLOR         = 0x00000ee9,
    TMT_TEXTSHADOWCOLOR         = 0x00000eea,
    TMT_GLYPHTEXTCOLOR          = 0x00000eeb,
    TMT_GLYPHTRANSPARENTCOLOR   = 0x00000eec,
    TMT_FILLCOLORHINT           = 0x00000eed,
    TMT_BORDERCOLORHINT         = 0x00000eee,
    TMT_ACCENTCOLORHINT         = 0x00000eef,
    TMT_TEXTCOLORHINT           = 0x00000ef0,
    TMT_HEADING1TEXTCOLOR       = 0x00000ef1,
    TMT_HEADING2TEXTCOLOR       = 0x00000ef2,
    TMT_BODYTEXTCOLOR           = 0x00000ef3,
    TMT_BGTYPE                  = 0x00000fa1,
    TMT_BORDERTYPE              = 0x00000fa2,
    TMT_FILLTYPE                = 0x00000fa3,
    TMT_SIZINGTYPE              = 0x00000fa4,
    TMT_HALIGN                  = 0x00000fa5,
    TMT_CONTENTALIGNMENT        = 0x00000fa6,
    TMT_VALIGN                  = 0x00000fa7,
    TMT_OFFSETTYPE              = 0x00000fa8,
    TMT_ICONEFFECT              = 0x00000fa9,
    TMT_TEXTSHADOWTYPE          = 0x00000faa,
    TMT_IMAGELAYOUT             = 0x00000fab,
    TMT_GLYPHTYPE               = 0x00000fac,
    TMT_IMAGESELECTTYPE         = 0x00000fad,
    TMT_GLYPHFONTSIZINGTYPE     = 0x00000fae,
    TMT_TRUESIZESCALINGTYPE     = 0x00000faf,
    TMT_USERPICTURE             = 0x00001389,
    TMT_DEFAULTPANESIZE         = 0x0000138a,
    TMT_BLENDCOLOR              = 0x0000138b,
    TMT_CUSTOMSPLITRECT         = 0x0000138c,
    TMT_ANIMATIONBUTTONRECT     = 0x0000138d,
    TMT_ANIMATIONDURATION       = 0x0000138e,
    TMT_TRANSITIONDURATIONS     = 0x00001770,
    TMT_SCALEDBACKGROUND        = 0x00001b59,
    TMT_ATLASIMAGE              = 0x00001f40,
    TMT_ATLASINPUTIMAGE         = 0x00001f41,
    TMT_ATLASRECT               = 0x00001f42,
}

alias SET_THEME_APP_PROPERTIES_FLAGS = uint;
enum : uint
{
    ALLOW_NONCLIENT  = 0x00000001,
    ALLOW_CONTROLS   = 0x00000002,
    ALLOW_WEBCONTENT = 0x00000004,
    VALIDBITS        = 0x00000007,
}

alias DRAGLISTINFO_NOTIFICATION_FLAGS = uint;
enum : uint
{
    DL_BEGINDRAG  = 0x00000485,
    DL_CANCELDRAG = 0x00000488,
    DL_DRAGGING   = 0x00000486,
    DL_DROPPED    = 0x00000487,
}

alias WORD_BREAK_ACTION = uint;
enum : uint
{
    WB_CLASSIFY      = 0x00000003,
    WB_ISDELIMITER   = 0x00000002,
    WB_LEFT          = 0x00000000,
    WB_LEFTBREAK     = 0x00000006,
    WB_MOVEWORDLEFT  = 0x00000004,
    WB_MOVEWORDRIGHT = 0x00000005,
    WB_RIGHT         = 0x00000001,
    WB_RIGHTBREAK    = 0x00000007,
}

alias DPAMM_MESSAGE = uint;
enum : uint
{
    DPAMM_MERGE  = 0x00000001,
    DPAMM_DELETE = 0x00000002,
    DPAMM_INSERT = 0x00000003,
}

alias DLG_DIR_LIST_FILE_TYPE = uint;
enum : uint
{
    DDL_ARCHIVE   = 0x00000020,
    DDL_DIRECTORY = 0x00000010,
    DDL_DRIVES    = 0x00004000,
    DDL_EXCLUSIVE = 0x00008000,
    DDL_HIDDEN    = 0x00000002,
    DDL_READONLY  = 0x00000001,
    DDL_READWRITE = 0x00000000,
    DDL_SYSTEM    = 0x00000004,
    DDL_POSTMSGS  = 0x00002000,
}

alias OPEN_THEME_DATA_FLAGS = uint;
enum : uint
{
    OTD_FORCE_RECT_SIZING = 0x00000001,
    OTD_NONCLIENT         = 0x00000002,
}

alias GET_THEME_BITMAP_FLAGS = uint;
enum : uint
{
    GBF_DIRECT    = 0x00000001,
    GBF_COPY      = 0x00000002,
    GBF_VALIDBITS = 0x00000003,
}

alias ENABLE_SCROLL_BAR_ARROWS = uint;
enum : uint
{
    ESB_DISABLE_BOTH  = 0x00000003,
    ESB_DISABLE_DOWN  = 0x00000002,
    ESB_DISABLE_LEFT  = 0x00000001,
    ESB_DISABLE_LTUP  = 0x00000001,
    ESB_DISABLE_RIGHT = 0x00000002,
    ESB_DISABLE_RTDN  = 0x00000002,
    ESB_DISABLE_UP    = 0x00000001,
    ESB_ENABLE_BOTH   = 0x00000000,
}

alias IMAGE_LIST_DRAW_STYLE = uint;
enum : uint
{
    ILD_BLEND    = 0x00000004,
    ILD_BLEND50  = 0x00000004,
    ILD_FOCUS    = 0x00000002,
    ILD_MASK     = 0x00000010,
    ILD_NORMAL   = 0x00000000,
    ILD_SELECTED = 0x00000004,
}

alias WSB_PROP = int;
enum : int
{
    WSB_PROP_CXHSCROLL = 0x00000002,
    WSB_PROP_CXHTHUMB  = 0x00000010,
    WSB_PROP_CXVSCROLL = 0x00000008,
    WSB_PROP_CYHSCROLL = 0x00000004,
    WSB_PROP_CYVSCROLL = 0x00000001,
    WSB_PROP_CYVTHUMB  = 0x00000020,
    WSB_PROP_HBKGCOLOR = 0x00000080,
    WSB_PROP_HSTYLE    = 0x00000200,
    WSB_PROP_PALETTE   = 0x00000800,
    WSB_PROP_VBKGCOLOR = 0x00000040,
    WSB_PROP_VSTYLE    = 0x00000100,
    WSB_PROP_WINSTYLE  = 0x00000400,
}

alias PSPCB_MESSAGE = uint;
enum : uint
{
    PSPCB_ADDREF        = 0x00000000,
    PSPCB_CREATE        = 0x00000002,
    PSPCB_RELEASE       = 0x00000001,
    PSPCB_SI_INITDIALOG = 0x00000401,
}

alias HEADER_CONTROL_NOTIFICATION_BUTTON = uint;
enum : uint
{
    HEADER_CONTROL_NOTIFICATION_BUTTON_LEFT   = 0x00000000,
    HEADER_CONTROL_NOTIFICATION_BUTTON_RIGHT  = 0x00000001,
    HEADER_CONTROL_NOTIFICATION_BUTTON_MIDDLE = 0x00000002,
}

alias IMAGE_LIST_COPY_FLAGS = uint;
enum : uint
{
    ILCF_MOVE = 0x00000000,
    ILCF_SWAP = 0x00000001,
}

alias DLG_BUTTON_CHECK_STATE = uint;
enum : uint
{
    BST_CHECKED       = 0x00000001,
    BST_INDETERMINATE = 0x00000002,
    BST_UNCHECKED     = 0x00000000,
}

alias DRAW_THEME_PARENT_BACKGROUND_FLAGS = uint;
enum : uint
{
    DTPB_WINDOWDC          = 0x00000001,
    DTPB_USECTLCOLORSTATIC = 0x00000002,
    DTPB_USEERASEBKGND     = 0x00000004,
}

alias IMAGE_LIST_ITEM_FLAGS = uint;
enum : uint
{
    ILIF_ALPHA      = 0x00000001,
    ILIF_LOWQUALITY = 0x00000002,
}

alias HDI_MASK = uint;
enum : uint
{
    HDI_WIDTH      = 0x00000001,
    HDI_HEIGHT     = 0x00000001,
    HDI_TEXT       = 0x00000002,
    HDI_FORMAT     = 0x00000004,
    HDI_LPARAM     = 0x00000008,
    HDI_BITMAP     = 0x00000010,
    HDI_IMAGE      = 0x00000020,
    HDI_DI_SETITEM = 0x00000040,
    HDI_ORDER      = 0x00000080,
    HDI_FILTER     = 0x00000100,
    HDI_STATE      = 0x00000200,
}

alias NMREBAR_MASK_FLAGS = uint;
enum : uint
{
    RBNM_ID     = 0x00000001,
    RBNM_LPARAM = 0x00000004,
    RBNM_STYLE  = 0x00000002,
}

alias EDITBALLOONTIP_ICON = uint;
enum : uint
{
    TTI_ERROR         = 0x00000003,
    TTI_INFO          = 0x00000001,
    TTI_NONE          = 0x00000000,
    TTI_WARNING       = 0x00000002,
    TTI_INFO_LARGE    = 0x00000004,
    TTI_WARNING_LARGE = 0x00000005,
    TTI_ERROR_LARGE   = 0x00000006,
}

alias LVCOLUMNW_FORMAT = uint;
enum : uint
{
    LVCFMT_LEFT            = 0x00000000,
    LVCFMT_RIGHT           = 0x00000001,
    LVCFMT_CENTER          = 0x00000002,
    LVCFMT_JUSTIFYMASK     = 0x00000003,
    LVCFMT_IMAGE           = 0x00000800,
    LVCFMT_BITMAP_ON_RIGHT = 0x00001000,
    LVCFMT_COL_HAS_IMAGES  = 0x00008000,
    LVCFMT_FIXED_WIDTH     = 0x00000100,
    LVCFMT_NO_DPI_SCALE    = 0x00040000,
    LVCFMT_FIXED_RATIO     = 0x00080000,
    LVCFMT_SPLITBUTTON     = 0x01000000,
}

alias NMPGSCROLL_KEYS = ushort;
enum : ushort
{
    PGK_NONE    = 0x0000,
    PGK_SHIFT   = 0x0001,
    PGK_CONTROL = 0x0002,
    PGK_MENU    = 0x0004,
}

alias COMBOBOX_EX_ITEM_FLAGS = uint;
enum : uint
{
    CBEIF_DI_SETITEM    = 0x10000000,
    CBEIF_IMAGE         = 0x00000002,
    CBEIF_INDENT        = 0x00000010,
    CBEIF_LPARAM        = 0x00000020,
    CBEIF_OVERLAY       = 0x00000008,
    CBEIF_SELECTEDIMAGE = 0x00000004,
    CBEIF_TEXT          = 0x00000001,
}

alias TVITEMEXW_CHILDREN = int;
enum : int
{
    I_ZERO             = 0x00000000,
    I_ONE_OR_MORE      = 0x00000001,
    I_CHILDRENCALLBACK = 0xffffffff,
    I_CHILDRENAUTO     = 0xfffffffe,
}

alias TVITEM_MASK = uint;
enum : uint
{
    TVIF_CHILDREN      = 0x00000040,
    TVIF_DI_SETITEM    = 0x00001000,
    TVIF_HANDLE        = 0x00000010,
    TVIF_IMAGE         = 0x00000002,
    TVIF_PARAM         = 0x00000004,
    TVIF_SELECTEDIMAGE = 0x00000020,
    TVIF_STATE         = 0x00000008,
    TVIF_TEXT          = 0x00000001,
    TVIF_EXPANDEDIMAGE = 0x00000200,
    TVIF_INTEGRAL      = 0x00000080,
    TVIF_STATEEX       = 0x00000100,
}

alias TCITEMHEADERA_MASK = uint;
enum : uint
{
    TCIF_IMAGE      = 0x00000002,
    TCIF_RTLREADING = 0x00000004,
    TCIF_TEXT       = 0x00000001,
    TCIF_PARAM      = 0x00000008,
    TCIF_STATE      = 0x00000010,
}

alias TCHITTESTINFO_FLAGS = uint;
enum : uint
{
    TCHT_NOWHERE     = 0x00000001,
    TCHT_ONITEM      = 0x00000006,
    TCHT_ONITEMICON  = 0x00000002,
    TCHT_ONITEMLABEL = 0x00000004,
}

alias COMBOBOXINFO_BUTTON_STATE = uint;
enum : uint
{
    STATE_SYSTEM_INVISIBLE   = 0x00008000,
    STATE_SYSTEM_PRESSED     = 0x00000008,
    STATE_SYSTEM_FOCUSABLE   = 0x00100000,
    STATE_SYSTEM_OFFSCREEN   = 0x00010000,
    STATE_SYSTEM_UNAVAILABLE = 0x00000001,
}

alias NMCUSTOMDRAW_DRAW_STAGE = uint;
enum : uint
{
    CDDS_POSTPAINT     = 0x00000002,
    CDDS_PREERASE      = 0x00000003,
    CDDS_PREPAINT      = 0x00000001,
    CDDS_ITEMPOSTERASE = 0x00010004,
    CDDS_ITEMPOSTPAINT = 0x00010002,
    CDDS_ITEMPREERASE  = 0x00010003,
    CDDS_ITEMPREPAINT  = 0x00010001,
    CDDS_SUBITEM       = 0x00020000,
}

alias MCGRIDINFO_PART = uint;
enum : uint
{
    MCGIP_CALENDARCONTROL = 0x00000000,
    MCGIP_NEXT            = 0x00000001,
    MCGIP_PREV            = 0x00000002,
    MCGIP_FOOTER          = 0x00000003,
    MCGIP_CALENDAR        = 0x00000004,
    MCGIP_CALENDARHEADER  = 0x00000005,
    MCGIP_CALENDARBODY    = 0x00000006,
    MCGIP_CALENDARROW     = 0x00000007,
    MCGIP_CALENDARCELL    = 0x00000008,
}

alias LVITEMA_GROUP_ID = int;
enum : int
{
    I_GROUPIDCALLBACK = 0xffffffff,
    I_GROUPIDNONE     = 0xfffffffe,
}

alias NMTBHOTITEM_FLAGS = uint;
enum : uint
{
    HICF_ACCELERATOR    = 0x00000004,
    HICF_ARROWKEYS      = 0x00000002,
    HICF_DUPACCEL       = 0x00000008,
    HICF_ENTERING       = 0x00000010,
    HICF_LEAVING        = 0x00000020,
    HICF_LMOUSE         = 0x00000080,
    HICF_MOUSE          = 0x00000001,
    HICF_OTHER          = 0x00000000,
    HICF_RESELECT       = 0x00000040,
    HICF_TOGGLEDROPDOWN = 0x00000100,
}

alias TOOLTIP_FLAGS = uint;
enum : uint
{
    TTF_IDISHWND    = 0x00000001,
    TTF_CENTERTIP   = 0x00000002,
    TTF_RTLREADING  = 0x00000004,
    TTF_SUBCLASS    = 0x00000010,
    TTF_TRACK       = 0x00000020,
    TTF_ABSOLUTE    = 0x00000080,
    TTF_TRANSPARENT = 0x00000100,
    TTF_PARSELINKS  = 0x00001000,
    TTF_DI_SETITEM  = 0x00008000,
}

alias LVTILEVIEWINFO_FLAGS = uint;
enum : uint
{
    LVTVIF_AUTOSIZE    = 0x00000000,
    LVTVIF_FIXEDWIDTH  = 0x00000001,
    LVTVIF_FIXEDHEIGHT = 0x00000002,
    LVTVIF_FIXEDSIZE   = 0x00000003,
}

alias LVTILEVIEWINFO_MASK = uint;
enum : uint
{
    LVTVIM_TILESIZE    = 0x00000001,
    LVTVIM_COLUMNS     = 0x00000002,
    LVTVIM_LABELMARGIN = 0x00000004,
}

alias NMPGSCROLL_DIR = uint;
enum : uint
{
    PGF_SCROLLDOWN  = 0x00000002,
    PGF_SCROLLLEFT  = 0x00000004,
    PGF_SCROLLRIGHT = 0x00000008,
    PGF_SCROLLUP    = 0x00000001,
}

alias LVCOLUMNW_MASK = uint;
enum : uint
{
    LVCF_FMT          = 0x00000001,
    LVCF_WIDTH        = 0x00000002,
    LVCF_TEXT         = 0x00000004,
    LVCF_SUBITEM      = 0x00000008,
    LVCF_IMAGE        = 0x00000010,
    LVCF_ORDER        = 0x00000020,
    LVCF_MINWIDTH     = 0x00000040,
    LVCF_DEFAULTWIDTH = 0x00000080,
    LVCF_IDEALWIDTH   = 0x00000100,
}

alias LVFINDINFOW_FLAGS = uint;
enum : uint
{
    LVFI_PARAM     = 0x00000001,
    LVFI_PARTIAL   = 0x00000008,
    LVFI_STRING    = 0x00000002,
    LVFI_SUBSTRING = 0x00000004,
    LVFI_WRAP      = 0x00000020,
    LVFI_NEARESTXY = 0x00000040,
}

alias BUTTON_IMAGELIST_ALIGN = uint;
enum : uint
{
    BUTTON_IMAGELIST_ALIGN_LEFT   = 0x00000000,
    BUTTON_IMAGELIST_ALIGN_RIGHT  = 0x00000001,
    BUTTON_IMAGELIST_ALIGN_TOP    = 0x00000002,
    BUTTON_IMAGELIST_ALIGN_BOTTOM = 0x00000003,
    BUTTON_IMAGELIST_ALIGN_CENTER = 0x00000004,
}

alias TBBUTTONINFOW_MASK = uint;
enum : uint
{
    TBIF_BYINDEX = 0x80000000,
    TBIF_COMMAND = 0x00000020,
    TBIF_IMAGE   = 0x00000001,
    TBIF_LPARAM  = 0x00000010,
    TBIF_SIZE    = 0x00000040,
    TBIF_STATE   = 0x00000004,
    TBIF_STYLE   = 0x00000008,
    TBIF_TEXT    = 0x00000002,
}

alias TBINSERTMARK_FLAGS = uint;
enum : uint
{
    TBIMHT_NONE       = 0x00000000,
    TBIMHT_AFTER      = 0x00000001,
    TBIMHT_BACKGROUND = 0x00000002,
}

alias LVGROUP_MASK = uint;
enum : uint
{
    LVGF_NONE   = 0x00000000,
    LVGF_HEADER = 0x00000001,
    LVGF_FOOTER = 0x00000002,
    LVGF_STATE  = 0x00000004,
}

alias BP_PAINTPARAMS_FLAGS = uint;
enum : uint
{
    BPPF_ERASE     = 0x00000001,
    BPPF_NOCLIP    = 0x00000002,
    BPPF_NONCLIENT = 0x00000004,
}

alias TVHITTESTINFO_FLAGS = uint;
enum : uint
{
    TVHT_ABOVE           = 0x00000100,
    TVHT_BELOW           = 0x00000200,
    TVHT_NOWHERE         = 0x00000001,
    TVHT_ONITEM          = 0x00000046,
    TVHT_ONITEMBUTTON    = 0x00000010,
    TVHT_ONITEMICON      = 0x00000002,
    TVHT_ONITEMINDENT    = 0x00000008,
    TVHT_ONITEMLABEL     = 0x00000004,
    TVHT_ONITEMRIGHT     = 0x00000020,
    TVHT_ONITEMSTATEICON = 0x00000040,
    TVHT_TOLEFT          = 0x00000800,
    TVHT_TORIGHT         = 0x00000400,
}

alias DRAWITEMSTRUCT_CTL_TYPE = uint;
enum : uint
{
    ODT_BUTTON   = 0x00000004,
    ODT_COMBOBOX = 0x00000003,
    ODT_LISTBOX  = 0x00000002,
    ODT_LISTVIEW = 0x00000066,
    ODT_MENU     = 0x00000001,
    ODT_STATIC   = 0x00000005,
    ODT_TAB      = 0x00000065,
}

alias NMPGCALCSIZE_FLAGS = uint;
enum : uint
{
    PGF_CALCHEIGHT = 0x00000002,
    PGF_CALCWIDTH  = 0x00000001,
}

alias MCGRIDINFO_FLAGS = uint;
enum : uint
{
    MCGIF_DATE = 0x00000001,
    MCGIF_RECT = 0x00000002,
    MCGIF_NAME = 0x00000004,
}

alias LVHITTESTINFO_FLAGS = uint;
enum : uint
{
    LVHT_ABOVE               = 0x00000008,
    LVHT_BELOW               = 0x00000010,
    LVHT_NOWHERE             = 0x00000001,
    LVHT_ONITEMICON          = 0x00000002,
    LVHT_ONITEMLABEL         = 0x00000004,
    LVHT_ONITEMSTATEICON     = 0x00000008,
    LVHT_TOLEFT              = 0x00000040,
    LVHT_TORIGHT             = 0x00000020,
    LVHT_EX_GROUP_HEADER     = 0x10000000,
    LVHT_EX_GROUP_FOOTER     = 0x20000000,
    LVHT_EX_GROUP_COLLAPSE   = 0x40000000,
    LVHT_EX_GROUP_BACKGROUND = 0x80000000,
    LVHT_EX_GROUP_STATEICON  = 0x01000000,
    LVHT_EX_GROUP_SUBSETLINK = 0x02000000,
    LVHT_EX_GROUP            = 0xf3000000,
    LVHT_EX_ONCONTENTS       = 0x04000000,
    LVHT_EX_FOOTER           = 0x08000000,
}

alias INITCOMMONCONTROLSEX_ICC = uint;
enum : uint
{
    ICC_ANIMATE_CLASS      = 0x00000080,
    ICC_BAR_CLASSES        = 0x00000004,
    ICC_COOL_CLASSES       = 0x00000400,
    ICC_DATE_CLASSES       = 0x00000100,
    ICC_HOTKEY_CLASS       = 0x00000040,
    ICC_INTERNET_CLASSES   = 0x00000800,
    ICC_LINK_CLASS         = 0x00008000,
    ICC_LISTVIEW_CLASSES   = 0x00000001,
    ICC_NATIVEFNTCTL_CLASS = 0x00002000,
    ICC_PAGESCROLLER_CLASS = 0x00001000,
    ICC_PROGRESS_CLASS     = 0x00000020,
    ICC_STANDARD_CLASSES   = 0x00004000,
    ICC_TAB_CLASSES        = 0x00000008,
    ICC_TREEVIEW_CLASSES   = 0x00000002,
    ICC_UPDOWN_CLASS       = 0x00000010,
    ICC_USEREX_CLASSES     = 0x00000200,
    ICC_WIN95_CLASSES      = 0x000000ff,
}

alias NMLVCUSTOMDRAW_ITEM_TYPE = uint;
enum : uint
{
    LVCDI_ITEM      = 0x00000000,
    LVCDI_GROUP     = 0x00000001,
    LVCDI_ITEMSLIST = 0x00000002,
}

alias NMTBDISPINFOW_MASK = uint;
enum : uint
{
    TBNF_IMAGE      = 0x00000001,
    TBNF_TEXT       = 0x00000002,
    TBNF_DI_SETITEM = 0x10000000,
}

alias NMLVEMPTYMARKUP_FLAGS = uint;
enum : uint
{
    EMF_CENTERED = 0x00000001,
}

alias LVFOOTERITEM_MASK = uint;
enum : uint
{
    LVFIF_TEXT  = 0x00000001,
    LVFIF_STATE = 0x00000002,
}

alias IMAGELIST_CREATION_FLAGS = uint;
enum : uint
{
    ILC_MASK             = 0x00000001,
    ILC_COLOR            = 0x00000000,
    ILC_COLORDDB         = 0x000000fe,
    ILC_COLOR4           = 0x00000004,
    ILC_COLOR8           = 0x00000008,
    ILC_COLOR16          = 0x00000010,
    ILC_COLOR24          = 0x00000018,
    ILC_COLOR32          = 0x00000020,
    ILC_PALETTE          = 0x00000800,
    ILC_MIRROR           = 0x00002000,
    ILC_PERITEMMIRROR    = 0x00008000,
    ILC_ORIGINALSIZE     = 0x00010000,
    ILC_HIGHQUALITYSCALE = 0x00020000,
}

alias DTTOPTS_FLAGS = uint;
enum : uint
{
    DTT_TEXTCOLOR    = 0x00000001,
    DTT_BORDERCOLOR  = 0x00000002,
    DTT_SHADOWCOLOR  = 0x00000004,
    DTT_SHADOWTYPE   = 0x00000008,
    DTT_SHADOWOFFSET = 0x00000010,
    DTT_BORDERSIZE   = 0x00000020,
    DTT_FONTPROP     = 0x00000040,
    DTT_COLORPROP    = 0x00000080,
    DTT_STATEID      = 0x00000100,
    DTT_CALCRECT     = 0x00000200,
    DTT_APPLYOVERLAY = 0x00000400,
    DTT_GLOWSIZE     = 0x00000800,
    DTT_CALLBACK     = 0x00001000,
    DTT_COMPOSITED   = 0x00002000,
    DTT_VALIDBITS    = 0x00002fff,
}

alias NMLVGETINFOTIP_FLAGS = uint;
enum : uint
{
    LVGIT_UNFOLDED = 0x00000001,
    LVGIT_ZERO     = 0x00000000,
}

alias LIST_VIEW_ITEM_STATE_FLAGS = uint;
enum : uint
{
    LVIS_FOCUSED        = 0x00000001,
    LVIS_SELECTED       = 0x00000002,
    LVIS_CUT            = 0x00000004,
    LVIS_DROPHILITED    = 0x00000008,
    LVIS_GLOW           = 0x00000010,
    LVIS_ACTIVATING     = 0x00000020,
    LVIS_OVERLAYMASK    = 0x00000f00,
    LVIS_STATEIMAGEMASK = 0x0000f000,
}

alias NM_TREEVIEW_ACTION = uint;
enum : uint
{
    TVE_COLLAPSE      = 0x00000001,
    TVE_EXPAND        = 0x00000002,
    TVE_TOGGLE        = 0x00000003,
    TVE_EXPANDPARTIAL = 0x00004000,
    TVE_COLLAPSERESET = 0x00008000,
    TVC_UNKNOWN       = 0x00000000,
    TVC_BYMOUSE       = 0x00000001,
    TVC_BYKEYBOARD    = 0x00000002,
}

alias MONTH_CALDENDAR_MESSAGES_VIEW = uint;
enum : uint
{
    MCMV_MONTH   = 0x00000000,
    MCMV_YEAR    = 0x00000001,
    MCMV_DECADE  = 0x00000002,
    MCMV_CENTURY = 0x00000003,
    MCMV_MAX     = 0x00000003,
}

alias TAB_CONTROL_ITEM_STATE = uint;
enum : uint
{
    TCIS_BUTTONPRESSED = 0x00000001,
    TCIS_HIGHLIGHTED   = 0x00000002,
}

alias TREE_VIEW_ITEM_STATE_FLAGS = uint;
enum : uint
{
    TVIS_SELECTED       = 0x00000002,
    TVIS_CUT            = 0x00000004,
    TVIS_DROPHILITED    = 0x00000008,
    TVIS_BOLD           = 0x00000010,
    TVIS_EXPANDED       = 0x00000020,
    TVIS_EXPANDEDONCE   = 0x00000040,
    TVIS_EXPANDPARTIAL  = 0x00000080,
    TVIS_OVERLAYMASK    = 0x00000f00,
    TVIS_STATEIMAGEMASK = 0x0000f000,
    TVIS_USERMASK       = 0x0000f000,
    TVIS_EX_FLAT        = 0x00000001,
    TVIS_EX_DISABLED    = 0x00000002,
    TVIS_EX_ALL         = 0x00000002,
}

alias HEADER_CONTROL_FORMAT_FLAGS = int;
enum : int
{
    HDF_LEFT            = 0x00000000,
    HDF_RIGHT           = 0x00000001,
    HDF_CENTER          = 0x00000002,
    HDF_JUSTIFYMASK     = 0x00000003,
    HDF_RTLREADING      = 0x00000004,
    HDF_BITMAP          = 0x00002000,
    HDF_STRING          = 0x00004000,
    HDF_OWNERDRAW       = 0x00008000,
    HDF_IMAGE           = 0x00000800,
    HDF_BITMAP_ON_RIGHT = 0x00001000,
    HDF_SORTUP          = 0x00000400,
    HDF_SORTDOWN        = 0x00000200,
    HDF_CHECKBOX        = 0x00000040,
    HDF_CHECKED         = 0x00000080,
    HDF_FIXEDWIDTH      = 0x00000100,
    HDF_SPLITBUTTON     = 0x01000000,
}

alias HEADER_CONTROL_FORMAT_TYPE = uint;
enum : uint
{
    HDFT_ISSTRING   = 0x00000000,
    HDFT_ISNUMBER   = 0x00000001,
    HDFT_ISDATE     = 0x00000002,
    HDFT_HASNOVALUE = 0x00008000,
}

alias HEADER_CONTROL_FORMAT_STATE = uint;
enum : uint
{
    HDIS_FOCUSED = 0x00000001,
}

alias HEADER_HITTEST_INFO_FLAGS = uint;
enum : uint
{
    HHT_NOWHERE         = 0x00000001,
    HHT_ONHEADER        = 0x00000002,
    HHT_ONDIVIDER       = 0x00000004,
    HHT_ONDIVOPEN       = 0x00000008,
    HHT_ONFILTER        = 0x00000010,
    HHT_ONFILTERBUTTON  = 0x00000020,
    HHT_ABOVE           = 0x00000100,
    HHT_BELOW           = 0x00000200,
    HHT_TORIGHT         = 0x00000400,
    HHT_TOLEFT          = 0x00000800,
    HHT_ONITEMSTATEICON = 0x00001000,
    HHT_ONDROPDOWN      = 0x00002000,
    HHT_ONOVERFLOW      = 0x00004000,
}

alias IMAGE_LIST_WRITE_STREAM_FLAGS = uint;
enum : uint
{
    ILP_NORMAL    = 0x00000000,
    ILP_DOWNLEVEL = 0x00000001,
}

alias LIST_ITEM_FLAGS = uint;
enum : uint
{
    LIF_ITEMINDEX = 0x00000001,
    LIF_STATE     = 0x00000002,
    LIF_ITEMID    = 0x00000004,
    LIF_URL       = 0x00000008,
}

alias LIST_ITEM_STATE_FLAGS = uint;
enum : uint
{
    LIS_FOCUSED       = 0x00000001,
    LIS_ENABLED       = 0x00000002,
    LIS_VISITED       = 0x00000004,
    LIS_HOTTRACK      = 0x00000008,
    LIS_DEFAULTCOLORS = 0x00000010,
}

alias LIST_VIEW_BACKGROUND_IMAGE_FLAGS = uint;
enum : uint
{
    LVBKIF_SOURCE_NONE     = 0x00000000,
    LVBKIF_SOURCE_HBITMAP  = 0x00000001,
    LVBKIF_SOURCE_URL      = 0x00000002,
    LVBKIF_SOURCE_MASK     = 0x00000003,
    LVBKIF_STYLE_NORMAL    = 0x00000000,
    LVBKIF_STYLE_TILE      = 0x00000010,
    LVBKIF_STYLE_MASK      = 0x00000010,
    LVBKIF_FLAG_TILEOFFSET = 0x00000100,
    LVBKIF_TYPE_WATERMARK  = 0x10000000,
    LVBKIF_FLAG_ALPHABLEND = 0x20000000,
}

alias LIST_VIEW_GROUP_STATE_FLAGS = uint;
enum : uint
{
    LVGS_NORMAL            = 0x00000000,
    LVGS_COLLAPSED         = 0x00000001,
    LVGS_HIDDEN            = 0x00000002,
    LVGS_NOHEADER          = 0x00000004,
    LVGS_COLLAPSIBLE       = 0x00000008,
    LVGS_FOCUSED           = 0x00000010,
    LVGS_SELECTED          = 0x00000020,
    LVGS_SUBSETED          = 0x00000040,
    LVGS_SUBSETLINKFOCUSED = 0x00000080,
}

alias LIST_VIEW_GROUP_ALIGN_FLAGS = uint;
enum : uint
{
    LVGA_HEADER_LEFT   = 0x00000001,
    LVGA_HEADER_CENTER = 0x00000002,
    LVGA_HEADER_RIGHT  = 0x00000004,
    LVGA_FOOTER_LEFT   = 0x00000008,
    LVGA_FOOTER_CENTER = 0x00000010,
    LVGA_FOOTER_RIGHT  = 0x00000020,
}

alias LIST_VIEW_INSERT_MARK_FLAGS = uint;
enum : uint
{
    LVIM_AFTER = 0x00000001,
}

alias LIST_VIEW_ITEM_COLUMN_FORMAT_FLAGS = int;
enum : int
{
    LVCFMT_LINE_BREAK         = 0x00100000,
    LVCFMT_FILL               = 0x00200000,
    LVCFMT_WRAP               = 0x00400000,
    LVCFMT_NO_TITLE           = 0x00800000,
    LVCFMT_TILE_PLACEMENTMASK = 0x00300000,
}

alias MCHITTESTINFO_HIT_FLAGS = uint;
enum : uint
{
    MCHT_TITLE            = 0x00010000,
    MCHT_CALENDAR         = 0x00020000,
    MCHT_TODAYLINK        = 0x00030000,
    MCHT_CALENDARCONTROL  = 0x00100000,
    MCHT_NEXT             = 0x01000000,
    MCHT_PREV             = 0x02000000,
    MCHT_NOWHERE          = 0x00000000,
    MCHT_TITLEBK          = 0x00010000,
    MCHT_TITLEMONTH       = 0x00010001,
    MCHT_TITLEYEAR        = 0x00010002,
    MCHT_TITLEBTNNEXT     = 0x01010003,
    MCHT_TITLEBTNPREV     = 0x02010003,
    MCHT_CALENDARBK       = 0x00020000,
    MCHT_CALENDARDATE     = 0x00020001,
    MCHT_CALENDARDATENEXT = 0x01020001,
    MCHT_CALENDARDATEPREV = 0x02020001,
    MCHT_CALENDARDAY      = 0x00020002,
    MCHT_CALENDARWEEKNUM  = 0x00020003,
    MCHT_CALENDARDATEMIN  = 0x00020004,
    MCHT_CALENDARDATEMAX  = 0x00020005,
}

alias NMCUSTOMDRAW_DRAW_STATE_FLAGS = uint;
enum : uint
{
    CDIS_SELECTED         = 0x00000001,
    CDIS_GRAYED           = 0x00000002,
    CDIS_DISABLED         = 0x00000004,
    CDIS_CHECKED          = 0x00000008,
    CDIS_FOCUS            = 0x00000010,
    CDIS_DEFAULT          = 0x00000020,
    CDIS_HOT              = 0x00000040,
    CDIS_MARKED           = 0x00000080,
    CDIS_INDETERMINATE    = 0x00000100,
    CDIS_SHOWKEYBOARDCUES = 0x00000200,
    CDIS_NEARHOT          = 0x00000400,
    CDIS_OTHERSIDEHOT     = 0x00000800,
    CDIS_DROPHILITED      = 0x00001000,
}

alias NMDATETIMECHANGE_FLAGS = uint;
enum : uint
{
    GDT_NONE  = 0x00000001,
    GDT_VALID = 0x00000000,
}

alias LIST_VIEW_ITEM_FLAGS = uint;
enum : uint
{
    LVIF_TEXT        = 0x00000001,
    LVIF_IMAGE       = 0x00000002,
    LVIF_PARAM       = 0x00000004,
    LVIF_STATE       = 0x00000008,
    LVIF_INDENT      = 0x00000010,
    LVIF_NORECOMPUTE = 0x00000800,
    LVIF_GROUPID     = 0x00000100,
    LVIF_COLUMNS     = 0x00000200,
    LVIF_COLFMT      = 0x00010000,
    LVIF_DI_SETITEM  = 0x00001000,
}

alias ODA_FLAGS = uint;
enum : uint
{
    ODA_DRAWENTIRE = 0x00000001,
    ODA_SELECT     = 0x00000002,
    ODA_FOCUS      = 0x00000004,
}

alias ODS_FLAGS = uint;
enum : uint
{
    ODS_SELECTED     = 0x00000001,
    ODS_GRAYED       = 0x00000002,
    ODS_DISABLED     = 0x00000004,
    ODS_CHECKED      = 0x00000008,
    ODS_FOCUS        = 0x00000010,
    ODS_DEFAULT      = 0x00000020,
    ODS_COMBOBOXEDIT = 0x00001000,
    ODS_HOTLIGHT     = 0x00000040,
    ODS_INACTIVE     = 0x00000080,
    ODS_NOACCEL      = 0x00000100,
    ODS_NOFOCUSRECT  = 0x00000200,
}

alias HIT_TEST_BACKGROUND_OPTIONS = uint;
enum : uint
{
    HTTB_BACKGROUNDSEG         = 0x00000000,
    HTTB_FIXEDBORDER           = 0x00000002,
    HTTB_CAPTION               = 0x00000004,
    HTTB_RESIZINGBORDER_LEFT   = 0x00000010,
    HTTB_RESIZINGBORDER_TOP    = 0x00000020,
    HTTB_RESIZINGBORDER_RIGHT  = 0x00000040,
    HTTB_RESIZINGBORDER_BOTTOM = 0x00000080,
    HTTB_RESIZINGBORDER        = 0x000000f0,
    HTTB_SIZINGTEMPLATE        = 0x00000100,
    HTTB_SYSTEMSIZINGMARGINS   = 0x00000200,
}

alias HPROPSHEETPAGE = void*;
alias HIMAGELIST = void*;
alias HSYNTHETICPOINTERDEVICE = void*;
alias HTREEITEM = void*;
alias HDSA = void*;
alias HDPA = void*;
struct TBBUTTON
{
    int iBitmap;
    int idCommand;
    ubyte fsState;
    ubyte fsStyle;
    ubyte[6] bReserved;
    ulong dwData;
    long iString;
}
alias LPFNPSPCALLBACKA = uint function(HWND, PSPCB_MESSAGE, PROPSHEETPAGEA*);
alias LPFNPSPCALLBACKW = uint function(HWND, PSPCB_MESSAGE, PROPSHEETPAGEW*);
struct PROPSHEETPAGEA_V1
{
    uint dwSize;
    uint dwFlags;
    HINSTANCE hInstance;
    union
    {
        const(char)* pszTemplate;
        DLGTEMPLATE* pResource;
    }
    union
    {
        HICON hIcon;
        const(char)* pszIcon;
    }
    const(char)* pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKA pfnCallback;
    uint* pcRefParent;
}
struct PROPSHEETPAGEA_V2
{
    uint dwSize;
    uint dwFlags;
    HINSTANCE hInstance;
    union
    {
        const(char)* pszTemplate;
        DLGTEMPLATE* pResource;
    }
    union
    {
        HICON hIcon;
        const(char)* pszIcon;
    }
    const(char)* pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKA pfnCallback;
    uint* pcRefParent;
    const(char)* pszHeaderTitle;
    const(char)* pszHeaderSubTitle;
}
struct PROPSHEETPAGEA_V3
{
    uint dwSize;
    uint dwFlags;
    HINSTANCE hInstance;
    union
    {
        const(char)* pszTemplate;
        DLGTEMPLATE* pResource;
    }
    union
    {
        HICON hIcon;
        const(char)* pszIcon;
    }
    const(char)* pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKA pfnCallback;
    uint* pcRefParent;
    const(char)* pszHeaderTitle;
    const(char)* pszHeaderSubTitle;
    HANDLE hActCtx;
}
struct PROPSHEETPAGEA
{
    uint dwSize;
    uint dwFlags;
    HINSTANCE hInstance;
    union
    {
        const(char)* pszTemplate;
        DLGTEMPLATE* pResource;
    }
    union
    {
        HICON hIcon;
        const(char)* pszIcon;
    }
    const(char)* pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKA pfnCallback;
    uint* pcRefParent;
    const(char)* pszHeaderTitle;
    const(char)* pszHeaderSubTitle;
    HANDLE hActCtx;
    union
    {
        HBITMAP hbmHeader;
        const(char)* pszbmHeader;
    }
}
struct PROPSHEETPAGEW_V1
{
    uint dwSize;
    uint dwFlags;
    HINSTANCE hInstance;
    union
    {
        const(wchar)* pszTemplate;
        DLGTEMPLATE* pResource;
    }
    union
    {
        HICON hIcon;
        const(wchar)* pszIcon;
    }
    const(wchar)* pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKW pfnCallback;
    uint* pcRefParent;
}
struct PROPSHEETPAGEW_V2
{
    uint dwSize;
    uint dwFlags;
    HINSTANCE hInstance;
    union
    {
        const(wchar)* pszTemplate;
        DLGTEMPLATE* pResource;
    }
    union
    {
        HICON hIcon;
        const(wchar)* pszIcon;
    }
    const(wchar)* pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKW pfnCallback;
    uint* pcRefParent;
    const(wchar)* pszHeaderTitle;
    const(wchar)* pszHeaderSubTitle;
}
struct PROPSHEETPAGEW_V3
{
    uint dwSize;
    uint dwFlags;
    HINSTANCE hInstance;
    union
    {
        const(wchar)* pszTemplate;
        DLGTEMPLATE* pResource;
    }
    union
    {
        HICON hIcon;
        const(wchar)* pszIcon;
    }
    const(wchar)* pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKW pfnCallback;
    uint* pcRefParent;
    const(wchar)* pszHeaderTitle;
    const(wchar)* pszHeaderSubTitle;
    HANDLE hActCtx;
}
struct PROPSHEETPAGEW
{
    uint dwSize;
    uint dwFlags;
    HINSTANCE hInstance;
    union
    {
        const(wchar)* pszTemplate;
        DLGTEMPLATE* pResource;
    }
    union
    {
        HICON hIcon;
        const(wchar)* pszIcon;
    }
    const(wchar)* pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKW pfnCallback;
    uint* pcRefParent;
    const(wchar)* pszHeaderTitle;
    const(wchar)* pszHeaderSubTitle;
    HANDLE hActCtx;
    union
    {
        HBITMAP hbmHeader;
        const(wchar)* pszbmHeader;
    }
}
alias PFNPROPSHEETCALLBACK = int function(HWND, uint, LPARAM);
struct PROPSHEETHEADERA_V1
{
    uint dwSize;
    uint dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;
    union
    {
        HICON hIcon;
        const(char)* pszIcon;
    }
    const(char)* pszCaption;
    uint nPages;
    union
    {
        uint nStartPage;
        const(char)* pStartPage;
    }
    union
    {
        PROPSHEETPAGEA* ppsp;
        HPROPSHEETPAGE* phpage;
    }
    PFNPROPSHEETCALLBACK pfnCallback;
}
struct PROPSHEETHEADERA_V2
{
    uint dwSize;
    uint dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;
    union
    {
        HICON hIcon;
        const(char)* pszIcon;
    }
    const(char)* pszCaption;
    uint nPages;
    union
    {
        uint nStartPage;
        const(char)* pStartPage;
    }
    union
    {
        PROPSHEETPAGEA* ppsp;
        HPROPSHEETPAGE* phpage;
    }
    PFNPROPSHEETCALLBACK pfnCallback;
    union
    {
        HBITMAP hbmWatermark;
        const(char)* pszbmWatermark;
    }
    HPALETTE hplWatermark;
    union
    {
        HBITMAP hbmHeader;
        const(char)* pszbmHeader;
    }
}
struct PROPSHEETHEADERW_V1
{
    uint dwSize;
    uint dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;
    union
    {
        HICON hIcon;
        const(wchar)* pszIcon;
    }
    const(wchar)* pszCaption;
    uint nPages;
    union
    {
        uint nStartPage;
        const(wchar)* pStartPage;
    }
    union
    {
        PROPSHEETPAGEW* ppsp;
        HPROPSHEETPAGE* phpage;
    }
    PFNPROPSHEETCALLBACK pfnCallback;
}
struct PROPSHEETHEADERW_V2
{
    uint dwSize;
    uint dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;
    union
    {
        HICON hIcon;
        const(wchar)* pszIcon;
    }
    const(wchar)* pszCaption;
    uint nPages;
    union
    {
        uint nStartPage;
        const(wchar)* pStartPage;
    }
    union
    {
        PROPSHEETPAGEW* ppsp;
        HPROPSHEETPAGE* phpage;
    }
    PFNPROPSHEETCALLBACK pfnCallback;
    union
    {
        HBITMAP hbmWatermark;
        const(wchar)* pszbmWatermark;
    }
    HPALETTE hplWatermark;
    union
    {
        HBITMAP hbmHeader;
        const(wchar)* pszbmHeader;
    }
}
alias LPFNSVADDPROPSHEETPAGE = BOOL function(HPROPSHEETPAGE, LPARAM);
alias LPFNADDPROPSHEETPAGES = BOOL function(void*, LPFNSVADDPROPSHEETPAGE, LPARAM);
struct PSHNOTIFY
{
    NMHDR hdr;
    LPARAM lParam;
}
struct INITCOMMONCONTROLSEX
{
    uint dwSize;
    INITCOMMONCONTROLSEX_ICC dwICC;
}
struct COLORSCHEME
{
    uint dwSize;
    COLORREF clrBtnHighlight;
    COLORREF clrBtnShadow;
}
struct NMTOOLTIPSCREATED
{
    NMHDR hdr;
    HWND hwndToolTips;
}
struct NMMOUSE
{
    NMHDR hdr;
    ulong dwItemSpec;
    ulong dwItemData;
    POINT pt;
    LPARAM dwHitInfo;
}
struct NMOBJECTNOTIFY
{
    NMHDR hdr;
    int iItem;
    const(GUID)* piid;
    void* pObject;
    HRESULT hResult;
    uint dwFlags;
}
struct NMKEY
{
    NMHDR hdr;
    uint nVKey;
    uint uFlags;
}
struct NMCHAR
{
    NMHDR hdr;
    uint ch;
    uint dwItemPrev;
    uint dwItemNext;
}
struct NMCUSTOMTEXT
{
    NMHDR hdr;
    HDC hDC;
    const(wchar)* lpString;
    int nCount;
    RECT* lpRect;
    uint uFormat;
    BOOL fLink;
}
struct NMCUSTOMDRAW
{
    NMHDR hdr;
    NMCUSTOMDRAW_DRAW_STAGE dwDrawStage;
    HDC hdc;
    RECT rc;
    ulong dwItemSpec;
    NMCUSTOMDRAW_DRAW_STATE_FLAGS uItemState;
    LPARAM lItemlParam;
}
struct NMTTCUSTOMDRAW
{
    NMCUSTOMDRAW nmcd;
    uint uDrawFlags;
}
struct NMCUSTOMSPLITRECTINFO
{
    NMHDR hdr;
    RECT rcClient;
    RECT rcButton;
    RECT rcSplit;
}
struct IMAGELISTDRAWPARAMS
{
    uint cbSize;
    HIMAGELIST himl;
    int i;
    HDC hdcDst;
    int x;
    int y;
    int cx;
    int cy;
    int xBitmap;
    int yBitmap;
    COLORREF rgbBk;
    COLORREF rgbFg;
    uint fStyle;
    uint dwRop;
    uint fState;
    uint Frame;
    COLORREF crEffect;
}
struct IMAGEINFO
{
    HBITMAP hbmImage;
    HBITMAP hbmMask;
    int Unused1;
    int Unused2;
    RECT rcImage;
}
struct HD_TEXTFILTERA
{
    PSTR pszText;
    int cchTextMax;
}
struct HD_TEXTFILTERW
{
    PWSTR pszText;
    int cchTextMax;
}
struct HDITEMA
{
    HDI_MASK mask;
    int cxy;
    PSTR pszText;
    HBITMAP hbm;
    int cchTextMax;
    HEADER_CONTROL_FORMAT_FLAGS fmt;
    LPARAM lParam;
    int iImage;
    int iOrder;
    HEADER_CONTROL_FORMAT_TYPE type;
    void* pvFilter;
    HEADER_CONTROL_FORMAT_STATE state;
}
struct HDITEMW
{
    HDI_MASK mask;
    int cxy;
    PWSTR pszText;
    HBITMAP hbm;
    int cchTextMax;
    HEADER_CONTROL_FORMAT_FLAGS fmt;
    LPARAM lParam;
    int iImage;
    int iOrder;
    HEADER_CONTROL_FORMAT_TYPE type;
    void* pvFilter;
    HEADER_CONTROL_FORMAT_STATE state;
}
struct HDLAYOUT
{
    RECT* prc;
    WINDOWPOS* pwpos;
}
struct HDHITTESTINFO
{
    POINT pt;
    HEADER_HITTEST_INFO_FLAGS flags;
    int iItem;
}
struct NMHEADERA
{
    NMHDR hdr;
    int iItem;
    HEADER_CONTROL_NOTIFICATION_BUTTON iButton;
    HDITEMA* pitem;
}
struct NMHEADERW
{
    NMHDR hdr;
    int iItem;
    HEADER_CONTROL_NOTIFICATION_BUTTON iButton;
    HDITEMW* pitem;
}
struct NMHDDISPINFOW
{
    NMHDR hdr;
    int iItem;
    HDI_MASK mask;
    PWSTR pszText;
    int cchTextMax;
    int iImage;
    LPARAM lParam;
}
struct NMHDDISPINFOA
{
    NMHDR hdr;
    int iItem;
    HDI_MASK mask;
    PSTR pszText;
    int cchTextMax;
    int iImage;
    LPARAM lParam;
}
struct NMHDFILTERBTNCLICK
{
    NMHDR hdr;
    int iItem;
    RECT rc;
}
/+ [CONFLICTED] struct TBBUTTON
{
    int iBitmap;
    int idCommand;
    ubyte fsState;
    ubyte fsStyle;
    ubyte[2] bReserved;
    ulong dwData;
    long iString;
}
+/
struct COLORMAP
{
    COLORREF from;
    COLORREF to;
}
struct NMTBCUSTOMDRAW
{
    NMCUSTOMDRAW nmcd;
    HBRUSH hbrMonoDither;
    HBRUSH hbrLines;
    HPEN hpenLines;
    COLORREF clrText;
    COLORREF clrMark;
    COLORREF clrTextHighlight;
    COLORREF clrBtnFace;
    COLORREF clrBtnHighlight;
    COLORREF clrHighlightHotTrack;
    RECT rcText;
    int nStringBkMode;
    int nHLStringBkMode;
    int iListGap;
}
struct TBADDBITMAP
{
    HINSTANCE hInst;
    ulong nID;
}
struct TBSAVEPARAMSA
{
    HKEY hkr;
    const(char)* pszSubKey;
    const(char)* pszValueName;
}
struct TBSAVEPARAMSW
{
    HKEY hkr;
    const(wchar)* pszSubKey;
    const(wchar)* pszValueName;
}
struct TBINSERTMARK
{
    int iButton;
    TBINSERTMARK_FLAGS dwFlags;
}
struct TBREPLACEBITMAP
{
    HINSTANCE hInstOld;
    ulong nIDOld;
    HINSTANCE hInstNew;
    ulong nIDNew;
    int nButtons;
}
struct TBBUTTONINFOA
{
    uint cbSize;
    TBBUTTONINFOW_MASK dwMask;
    int idCommand;
    int iImage;
    ubyte fsState;
    ubyte fsStyle;
    ushort cx;
    ulong lParam;
    PSTR pszText;
    int cchText;
}
struct TBBUTTONINFOW
{
    uint cbSize;
    TBBUTTONINFOW_MASK dwMask;
    int idCommand;
    int iImage;
    ubyte fsState;
    ubyte fsStyle;
    ushort cx;
    ulong lParam;
    PWSTR pszText;
    int cchText;
}
struct TBMETRICS
{
    uint cbSize;
    uint dwMask;
    int cxPad;
    int cyPad;
    int cxBarPad;
    int cyBarPad;
    int cxButtonSpacing;
    int cyButtonSpacing;
}
struct NMTBHOTITEM
{
    NMHDR hdr;
    int idOld;
    int idNew;
    NMTBHOTITEM_FLAGS dwFlags;
}
struct NMTBSAVE
{
    NMHDR hdr;
    uint* pData;
    uint* pCurrent;
    uint cbData;
    int iItem;
    int cButtons;
    TBBUTTON tbButton;
}
struct NMTBRESTORE
{
    NMHDR hdr;
    uint* pData;
    uint* pCurrent;
    uint cbData;
    int iItem;
    int cButtons;
    int cbBytesPerRecord;
    TBBUTTON tbButton;
}
struct NMTBGETINFOTIPA
{
    NMHDR hdr;
    PSTR pszText;
    int cchTextMax;
    int iItem;
    LPARAM lParam;
}
struct NMTBGETINFOTIPW
{
    NMHDR hdr;
    PWSTR pszText;
    int cchTextMax;
    int iItem;
    LPARAM lParam;
}
struct NMTBDISPINFOA
{
    NMHDR hdr;
    NMTBDISPINFOW_MASK dwMask;
    int idCommand;
    ulong lParam;
    int iImage;
    PSTR pszText;
    int cchText;
}
struct NMTBDISPINFOW
{
    NMHDR hdr;
    NMTBDISPINFOW_MASK dwMask;
    int idCommand;
    ulong lParam;
    int iImage;
    PWSTR pszText;
    int cchText;
}
struct NMTOOLBARA
{
    NMHDR hdr;
    int iItem;
    TBBUTTON tbButton;
    int cchText;
    PSTR pszText;
    RECT rcButton;
}
struct NMTOOLBARW
{
    NMHDR hdr;
    int iItem;
    TBBUTTON tbButton;
    int cchText;
    PWSTR pszText;
    RECT rcButton;
}
struct REBARINFO
{
    uint cbSize;
    uint fMask;
    HIMAGELIST himl;
}
struct REBARBANDINFOA
{
    uint cbSize;
    uint fMask;
    uint fStyle;
    COLORREF clrFore;
    COLORREF clrBack;
    PSTR lpText;
    uint cch;
    int iImage;
    HWND hwndChild;
    uint cxMinChild;
    uint cyMinChild;
    uint cx;
    HBITMAP hbmBack;
    uint wID;
    uint cyChild;
    uint cyMaxChild;
    uint cyIntegral;
    uint cxIdeal;
    LPARAM lParam;
    uint cxHeader;
    RECT rcChevronLocation;
    uint uChevronState;
}
struct REBARBANDINFOW
{
    uint cbSize;
    uint fMask;
    uint fStyle;
    COLORREF clrFore;
    COLORREF clrBack;
    PWSTR lpText;
    uint cch;
    int iImage;
    HWND hwndChild;
    uint cxMinChild;
    uint cyMinChild;
    uint cx;
    HBITMAP hbmBack;
    uint wID;
    uint cyChild;
    uint cyMaxChild;
    uint cyIntegral;
    uint cxIdeal;
    LPARAM lParam;
    uint cxHeader;
    RECT rcChevronLocation;
    uint uChevronState;
}
struct NMREBARCHILDSIZE
{
    NMHDR hdr;
    uint uBand;
    uint wID;
    RECT rcChild;
    RECT rcBand;
}
struct NMREBAR
{
    NMHDR hdr;
    NMREBAR_MASK_FLAGS dwMask;
    uint uBand;
    uint fStyle;
    uint wID;
    LPARAM lParam;
}
struct NMRBAUTOSIZE
{
    NMHDR hdr;
    BOOL fChanged;
    RECT rcTarget;
    RECT rcActual;
}
struct NMREBARCHEVRON
{
    NMHDR hdr;
    uint uBand;
    uint wID;
    LPARAM lParam;
    RECT rc;
    LPARAM lParamNM;
}
struct NMREBARSPLITTER
{
    NMHDR hdr;
    RECT rcSizing;
}
struct NMREBARAUTOBREAK
{
    NMHDR hdr;
    uint uBand;
    uint wID;
    LPARAM lParam;
    uint uMsg;
    uint fStyleCurrent;
    BOOL fAutoBreak;
}
struct RBHITTESTINFO
{
    POINT pt;
    uint flags;
    int iBand;
}
struct TTTOOLINFOA
{
    uint cbSize;
    TOOLTIP_FLAGS uFlags;
    HWND hwnd;
    ulong uId;
    RECT rect;
    HINSTANCE hinst;
    PSTR lpszText;
    LPARAM lParam;
    void* lpReserved;
}
struct TTTOOLINFOW
{
    uint cbSize;
    TOOLTIP_FLAGS uFlags;
    HWND hwnd;
    ulong uId;
    RECT rect;
    HINSTANCE hinst;
    PWSTR lpszText;
    LPARAM lParam;
    void* lpReserved;
}
struct TTGETTITLE
{
    uint dwSize;
    uint uTitleBitmap;
    uint cch;
    PWSTR pszTitle;
}
struct TTHITTESTINFOA
{
    HWND hwnd;
    POINT pt;
    TTTOOLINFOA ti;
}
struct TTHITTESTINFOW
{
    HWND hwnd;
    POINT pt;
    TTTOOLINFOW ti;
}
struct NMTTDISPINFOA
{
    NMHDR hdr;
    PSTR lpszText;
    CHAR[80] szText;
    HINSTANCE hinst;
    TOOLTIP_FLAGS uFlags;
    LPARAM lParam;
}
struct NMTTDISPINFOW
{
    NMHDR hdr;
    PWSTR lpszText;
    wchar[80] szText;
    HINSTANCE hinst;
    TOOLTIP_FLAGS uFlags;
    LPARAM lParam;
}
struct NMTRBTHUMBPOSCHANGING
{
    NMHDR hdr;
    uint dwPos;
    int nReason;
}
struct DRAGLISTINFO
{
    DRAGLISTINFO_NOTIFICATION_FLAGS uNotification;
    HWND hWnd;
    POINT ptCursor;
}
struct UDACCEL
{
    uint nSec;
    uint nInc;
}
struct NMUPDOWN
{
    NMHDR hdr;
    int iPos;
    int iDelta;
}
struct PBRANGE
{
    int iLow;
    int iHigh;
}
struct LITEM
{
    LIST_ITEM_FLAGS mask;
    int iLink;
    LIST_ITEM_STATE_FLAGS state;
    LIST_ITEM_STATE_FLAGS stateMask;
    wchar[48] szID;
    wchar[2084] szUrl;
}
struct LHITTESTINFO
{
    POINT pt;
    LITEM item;
}
struct NMLINK
{
    NMHDR hdr;
    LITEM item;
}
struct LVITEMA
{
    LIST_VIEW_ITEM_FLAGS mask;
    int iItem;
    int iSubItem;
    LIST_VIEW_ITEM_STATE_FLAGS state;
    LIST_VIEW_ITEM_STATE_FLAGS stateMask;
    PSTR pszText;
    int cchTextMax;
    int iImage;
    LPARAM lParam;
    int iIndent;
    LVITEMA_GROUP_ID iGroupId;
    uint cColumns;
    uint* puColumns;
    LIST_VIEW_ITEM_COLUMN_FORMAT_FLAGS* piColFmt;
    int iGroup;
}
struct LVITEMW
{
    LIST_VIEW_ITEM_FLAGS mask;
    int iItem;
    int iSubItem;
    LIST_VIEW_ITEM_STATE_FLAGS state;
    LIST_VIEW_ITEM_STATE_FLAGS stateMask;
    PWSTR pszText;
    int cchTextMax;
    int iImage;
    LPARAM lParam;
    int iIndent;
    LVITEMA_GROUP_ID iGroupId;
    uint cColumns;
    uint* puColumns;
    LIST_VIEW_ITEM_COLUMN_FORMAT_FLAGS* piColFmt;
    int iGroup;
}
struct LVFINDINFOA
{
    LVFINDINFOW_FLAGS flags;
    const(char)* psz;
    LPARAM lParam;
    POINT pt;
    uint vkDirection;
}
struct LVFINDINFOW
{
    LVFINDINFOW_FLAGS flags;
    const(wchar)* psz;
    LPARAM lParam;
    POINT pt;
    uint vkDirection;
}
struct LVHITTESTINFO
{
    POINT pt;
    LVHITTESTINFO_FLAGS flags;
    int iItem;
    int iSubItem;
    int iGroup;
}
struct LVCOLUMNA
{
    LVCOLUMNW_MASK mask;
    LVCOLUMNW_FORMAT fmt;
    int cx;
    PSTR pszText;
    int cchTextMax;
    int iSubItem;
    int iImage;
    int iOrder;
    int cxMin;
    int cxDefault;
    int cxIdeal;
}
struct LVCOLUMNW
{
    LVCOLUMNW_MASK mask;
    LVCOLUMNW_FORMAT fmt;
    int cx;
    PWSTR pszText;
    int cchTextMax;
    int iSubItem;
    int iImage;
    int iOrder;
    int cxMin;
    int cxDefault;
    int cxIdeal;
}
alias PFNLVCOMPARE = int function(LPARAM, LPARAM, LPARAM);
struct LVBKIMAGEA
{
    LIST_VIEW_BACKGROUND_IMAGE_FLAGS ulFlags;
    HBITMAP hbm;
    PSTR pszImage;
    uint cchImageMax;
    int xOffsetPercent;
    int yOffsetPercent;
}
struct LVBKIMAGEW
{
    LIST_VIEW_BACKGROUND_IMAGE_FLAGS ulFlags;
    HBITMAP hbm;
    PWSTR pszImage;
    uint cchImageMax;
    int xOffsetPercent;
    int yOffsetPercent;
}
struct LVGROUP
{
    uint cbSize;
    LVGROUP_MASK mask;
    PWSTR pszHeader;
    int cchHeader;
    PWSTR pszFooter;
    int cchFooter;
    int iGroupId;
    LIST_VIEW_GROUP_STATE_FLAGS stateMask;
    LIST_VIEW_GROUP_STATE_FLAGS state;
    LIST_VIEW_GROUP_ALIGN_FLAGS uAlign;
    PWSTR pszSubtitle;
    uint cchSubtitle;
    PWSTR pszTask;
    uint cchTask;
    PWSTR pszDescriptionTop;
    uint cchDescriptionTop;
    PWSTR pszDescriptionBottom;
    uint cchDescriptionBottom;
    int iTitleImage;
    int iExtendedImage;
    int iFirstItem;
    uint cItems;
    PWSTR pszSubsetTitle;
    uint cchSubsetTitle;
}
struct LVGROUPMETRICS
{
    uint cbSize;
    uint mask;
    uint Left;
    uint Top;
    uint Right;
    uint Bottom;
    COLORREF crLeft;
    COLORREF crTop;
    COLORREF crRight;
    COLORREF crBottom;
    COLORREF crHeader;
    COLORREF crFooter;
}
alias PFNLVGROUPCOMPARE = int function(int, int, void*);
struct LVINSERTGROUPSORTED
{
    PFNLVGROUPCOMPARE pfnGroupCompare;
    void* pvData;
    LVGROUP lvGroup;
}
struct LVTILEVIEWINFO
{
    uint cbSize;
    LVTILEVIEWINFO_MASK dwMask;
    LVTILEVIEWINFO_FLAGS dwFlags;
    SIZE sizeTile;
    int cLines;
    RECT rcLabelMargin;
}
struct LVTILEINFO
{
    uint cbSize;
    int iItem;
    uint cColumns;
    uint* puColumns;
    int* piColFmt;
}
struct LVINSERTMARK
{
    uint cbSize;
    LIST_VIEW_INSERT_MARK_FLAGS dwFlags;
    int iItem;
    uint dwReserved;
}
struct LVSETINFOTIP
{
    uint cbSize;
    uint dwFlags;
    PWSTR pszText;
    int iItem;
    int iSubItem;
}
struct LVFOOTERINFO
{
    uint mask;
    PWSTR pszText;
    int cchTextMax;
    uint cItems;
}
struct LVFOOTERITEM
{
    LVFOOTERITEM_MASK mask;
    int iItem;
    PWSTR pszText;
    int cchTextMax;
    uint state;
    uint stateMask;
}
struct LVITEMINDEX
{
    int iItem;
    int iGroup;
}
struct NMLISTVIEW
{
    NMHDR hdr;
    int iItem;
    int iSubItem;
    uint uNewState;
    uint uOldState;
    LIST_VIEW_ITEM_FLAGS uChanged;
    POINT ptAction;
    LPARAM lParam;
}
struct NMITEMACTIVATE
{
    NMHDR hdr;
    int iItem;
    int iSubItem;
    uint uNewState;
    uint uOldState;
    uint uChanged;
    POINT ptAction;
    LPARAM lParam;
    uint uKeyFlags;
}
struct NMLVCUSTOMDRAW
{
    NMCUSTOMDRAW nmcd;
    COLORREF clrText;
    COLORREF clrTextBk;
    int iSubItem;
    NMLVCUSTOMDRAW_ITEM_TYPE dwItemType;
    COLORREF clrFace;
    int iIconEffect;
    int iIconPhase;
    int iPartId;
    int iStateId;
    RECT rcText;
    LIST_VIEW_GROUP_ALIGN_FLAGS uAlign;
}
struct NMLVCACHEHINT
{
    NMHDR hdr;
    int iFrom;
    int iTo;
}
struct NMLVFINDITEMA
{
    NMHDR hdr;
    int iStart;
    LVFINDINFOA lvfi;
}
struct NMLVFINDITEMW
{
    NMHDR hdr;
    int iStart;
    LVFINDINFOW lvfi;
}
struct NMLVODSTATECHANGE
{
    NMHDR hdr;
    int iFrom;
    int iTo;
    LIST_VIEW_ITEM_STATE_FLAGS uNewState;
    LIST_VIEW_ITEM_STATE_FLAGS uOldState;
}
struct NMLVDISPINFOA
{
    NMHDR hdr;
    LVITEMA item;
}
struct NMLVDISPINFOW
{
    NMHDR hdr;
    LVITEMW item;
}
struct NMLVKEYDOWN
{
    align (1):
    NMHDR hdr;
    ushort wVKey;
    uint flags;
}
struct NMLVLINK
{
    NMHDR hdr;
    LITEM link;
    int iItem;
    int iSubItem;
}
struct NMLVGETINFOTIPA
{
    NMHDR hdr;
    NMLVGETINFOTIP_FLAGS dwFlags;
    PSTR pszText;
    int cchTextMax;
    int iItem;
    int iSubItem;
    LPARAM lParam;
}
struct NMLVGETINFOTIPW
{
    NMHDR hdr;
    NMLVGETINFOTIP_FLAGS dwFlags;
    PWSTR pszText;
    int cchTextMax;
    int iItem;
    int iSubItem;
    LPARAM lParam;
}
struct NMLVSCROLL
{
    NMHDR hdr;
    int dx;
    int dy;
}
struct NMLVEMPTYMARKUP
{
    NMHDR hdr;
    NMLVEMPTYMARKUP_FLAGS dwFlags;
    wchar[2084] szMarkup;
}
struct NMTVSTATEIMAGECHANGING
{
    NMHDR hdr;
    HTREEITEM hti;
    int iOldStateImageIndex;
    int iNewStateImageIndex;
}
struct TVITEMA
{
    TVITEM_MASK mask;
    HTREEITEM hItem;
    TREE_VIEW_ITEM_STATE_FLAGS state;
    TREE_VIEW_ITEM_STATE_FLAGS stateMask;
    PSTR pszText;
    int cchTextMax;
    int iImage;
    int iSelectedImage;
    TVITEMEXW_CHILDREN cChildren;
    LPARAM lParam;
}
struct TVITEMW
{
    TVITEM_MASK mask;
    HTREEITEM hItem;
    TREE_VIEW_ITEM_STATE_FLAGS state;
    TREE_VIEW_ITEM_STATE_FLAGS stateMask;
    PWSTR pszText;
    int cchTextMax;
    int iImage;
    int iSelectedImage;
    TVITEMEXW_CHILDREN cChildren;
    LPARAM lParam;
}
struct TVITEMEXA
{
    TVITEM_MASK mask;
    HTREEITEM hItem;
    uint state;
    uint stateMask;
    PSTR pszText;
    int cchTextMax;
    int iImage;
    int iSelectedImage;
    TVITEMEXW_CHILDREN cChildren;
    LPARAM lParam;
    int iIntegral;
    uint uStateEx;
    HWND hwnd;
    int iExpandedImage;
    int iReserved;
}
struct TVITEMEXW
{
    TVITEM_MASK mask;
    HTREEITEM hItem;
    uint state;
    uint stateMask;
    PWSTR pszText;
    int cchTextMax;
    int iImage;
    int iSelectedImage;
    TVITEMEXW_CHILDREN cChildren;
    LPARAM lParam;
    int iIntegral;
    uint uStateEx;
    HWND hwnd;
    int iExpandedImage;
    int iReserved;
}
struct TVINSERTSTRUCTA
{
    HTREEITEM hParent;
    HTREEITEM hInsertAfter;
    union
    {
        TVITEMEXA itemex;
        TVITEMA item;
    }
}
struct TVINSERTSTRUCTW
{
    HTREEITEM hParent;
    HTREEITEM hInsertAfter;
    union
    {
        TVITEMEXW itemex;
        TVITEMW item;
    }
}
struct TVHITTESTINFO
{
    POINT pt;
    TVHITTESTINFO_FLAGS flags;
    HTREEITEM hItem;
}
alias TVITEMPART = int;
enum : int
{
    TVGIPR_BUTTON = 0x00000001,
}

struct TVGETITEMPARTRECTINFO
{
    HTREEITEM hti;
    RECT* prc;
    TVITEMPART partID;
}
alias PFNTVCOMPARE = int function(LPARAM, LPARAM, LPARAM);
struct TVSORTCB
{
    HTREEITEM hParent;
    PFNTVCOMPARE lpfnCompare;
    LPARAM lParam;
}
struct NMTREEVIEWA
{
    NMHDR hdr;
    NM_TREEVIEW_ACTION action;
    TVITEMA itemOld;
    TVITEMA itemNew;
    POINT ptDrag;
}
struct NMTREEVIEWW
{
    NMHDR hdr;
    NM_TREEVIEW_ACTION action;
    TVITEMW itemOld;
    TVITEMW itemNew;
    POINT ptDrag;
}
struct NMTVDISPINFOA
{
    NMHDR hdr;
    TVITEMA item;
}
struct NMTVDISPINFOW
{
    NMHDR hdr;
    TVITEMW item;
}
struct NMTVDISPINFOEXA
{
    NMHDR hdr;
    TVITEMEXA item;
}
struct NMTVDISPINFOEXW
{
    NMHDR hdr;
    TVITEMEXW item;
}
struct NMTVKEYDOWN
{
    align (1):
    NMHDR hdr;
    ushort wVKey;
    uint flags;
}
struct NMTVCUSTOMDRAW
{
    NMCUSTOMDRAW nmcd;
    COLORREF clrText;
    COLORREF clrTextBk;
    int iLevel;
}
struct NMTVGETINFOTIPA
{
    NMHDR hdr;
    PSTR pszText;
    int cchTextMax;
    HTREEITEM hItem;
    LPARAM lParam;
}
struct NMTVGETINFOTIPW
{
    NMHDR hdr;
    PWSTR pszText;
    int cchTextMax;
    HTREEITEM hItem;
    LPARAM lParam;
}
struct NMTVITEMCHANGE
{
    NMHDR hdr;
    uint uChanged;
    HTREEITEM hItem;
    uint uStateNew;
    uint uStateOld;
    LPARAM lParam;
}
struct NMTVASYNCDRAW
{
    NMHDR hdr;
    IMAGELISTDRAWPARAMS* pimldp;
    HRESULT hr;
    HTREEITEM hItem;
    LPARAM lParam;
    uint dwRetFlags;
    int iRetImageIndex;
}
struct COMBOBOXEXITEMA
{
    COMBOBOX_EX_ITEM_FLAGS mask;
    long iItem;
    PSTR pszText;
    int cchTextMax;
    int iImage;
    int iSelectedImage;
    int iOverlay;
    int iIndent;
    LPARAM lParam;
}
struct COMBOBOXEXITEMW
{
    COMBOBOX_EX_ITEM_FLAGS mask;
    long iItem;
    PWSTR pszText;
    int cchTextMax;
    int iImage;
    int iSelectedImage;
    int iOverlay;
    int iIndent;
    LPARAM lParam;
}
struct NMCOMBOBOXEXA
{
    NMHDR hdr;
    COMBOBOXEXITEMA ceItem;
}
struct NMCOMBOBOXEXW
{
    NMHDR hdr;
    COMBOBOXEXITEMW ceItem;
}
struct NMCBEDRAGBEGINW
{
    NMHDR hdr;
    int iItemid;
    wchar[260] szText;
}
struct NMCBEDRAGBEGINA
{
    NMHDR hdr;
    int iItemid;
    CHAR[260] szText;
}
struct NMCBEENDEDITW
{
    NMHDR hdr;
    BOOL fChanged;
    int iNewSelection;
    wchar[260] szText;
    int iWhy;
}
struct NMCBEENDEDITA
{
    NMHDR hdr;
    BOOL fChanged;
    int iNewSelection;
    CHAR[260] szText;
    int iWhy;
}
struct TCITEMHEADERA
{
    TCITEMHEADERA_MASK mask;
    uint lpReserved1;
    uint lpReserved2;
    PSTR pszText;
    int cchTextMax;
    int iImage;
}
struct TCITEMHEADERW
{
    TCITEMHEADERA_MASK mask;
    uint lpReserved1;
    uint lpReserved2;
    PWSTR pszText;
    int cchTextMax;
    int iImage;
}
struct TCITEMA
{
    TCITEMHEADERA_MASK mask;
    TAB_CONTROL_ITEM_STATE dwState;
    TAB_CONTROL_ITEM_STATE dwStateMask;
    PSTR pszText;
    int cchTextMax;
    int iImage;
    LPARAM lParam;
}
struct TCITEMW
{
    TCITEMHEADERA_MASK mask;
    TAB_CONTROL_ITEM_STATE dwState;
    TAB_CONTROL_ITEM_STATE dwStateMask;
    PWSTR pszText;
    int cchTextMax;
    int iImage;
    LPARAM lParam;
}
struct TCHITTESTINFO
{
    POINT pt;
    TCHITTESTINFO_FLAGS flags;
}
struct NMTCKEYDOWN
{
    align (1):
    NMHDR hdr;
    ushort wVKey;
    uint flags;
}
struct MCHITTESTINFO
{
    uint cbSize;
    POINT pt;
    MCHITTESTINFO_HIT_FLAGS uHit;
    SYSTEMTIME st;
    RECT rc;
    int iOffset;
    int iRow;
    int iCol;
}
struct MCGRIDINFO
{
    uint cbSize;
    MCGRIDINFO_PART dwPart;
    MCGRIDINFO_FLAGS dwFlags;
    int iCalendar;
    int iRow;
    int iCol;
    BOOL bSelected;
    SYSTEMTIME stStart;
    SYSTEMTIME stEnd;
    RECT rc;
    PWSTR pszName;
    ulong cchName;
}
struct NMSELCHANGE
{
    NMHDR nmhdr;
    SYSTEMTIME stSelStart;
    SYSTEMTIME stSelEnd;
}
struct NMDAYSTATE
{
    NMHDR nmhdr;
    SYSTEMTIME stStart;
    int cDayState;
    uint* prgDayState;
}
struct NMVIEWCHANGE
{
    NMHDR nmhdr;
    MONTH_CALDENDAR_MESSAGES_VIEW dwOldView;
    MONTH_CALDENDAR_MESSAGES_VIEW dwNewView;
}
struct DATETIMEPICKERINFO
{
    uint cbSize;
    RECT rcCheck;
    uint stateCheck;
    RECT rcButton;
    uint stateButton;
    HWND hwndEdit;
    HWND hwndUD;
    HWND hwndDropDown;
}
struct NMDATETIMECHANGE
{
    NMHDR nmhdr;
    NMDATETIMECHANGE_FLAGS dwFlags;
    SYSTEMTIME st;
}
struct NMDATETIMESTRINGA
{
    NMHDR nmhdr;
    const(char)* pszUserString;
    SYSTEMTIME st;
    uint dwFlags;
}
struct NMDATETIMESTRINGW
{
    NMHDR nmhdr;
    const(wchar)* pszUserString;
    SYSTEMTIME st;
    uint dwFlags;
}
struct NMDATETIMEWMKEYDOWNA
{
    NMHDR nmhdr;
    int nVirtKey;
    const(char)* pszFormat;
    SYSTEMTIME st;
}
struct NMDATETIMEWMKEYDOWNW
{
    NMHDR nmhdr;
    int nVirtKey;
    const(wchar)* pszFormat;
    SYSTEMTIME st;
}
struct NMDATETIMEFORMATA
{
    NMHDR nmhdr;
    const(char)* pszFormat;
    SYSTEMTIME st;
    const(char)* pszDisplay;
    CHAR[64] szDisplay;
}
struct NMDATETIMEFORMATW
{
    NMHDR nmhdr;
    const(wchar)* pszFormat;
    SYSTEMTIME st;
    const(wchar)* pszDisplay;
    wchar[64] szDisplay;
}
struct NMDATETIMEFORMATQUERYA
{
    NMHDR nmhdr;
    const(char)* pszFormat;
    SIZE szMax;
}
struct NMDATETIMEFORMATQUERYW
{
    NMHDR nmhdr;
    const(wchar)* pszFormat;
    SIZE szMax;
}
struct NMIPADDRESS
{
    NMHDR hdr;
    int iField;
    int iValue;
}
struct NMPGSCROLL
{
    align (1):
    NMHDR hdr;
    NMPGSCROLL_KEYS fwKeys;
    RECT rcParent;
    NMPGSCROLL_DIR iDir;
    int iXpos;
    int iYpos;
    int iScroll;
}
struct NMPGCALCSIZE
{
    NMHDR hdr;
    NMPGCALCSIZE_FLAGS dwFlag;
    int iWidth;
    int iHeight;
}
struct NMPGHOTITEM
{
    NMHDR hdr;
    int idOld;
    int idNew;
    uint dwFlags;
}
struct BUTTON_IMAGELIST
{
    HIMAGELIST himl;
    RECT margin;
    BUTTON_IMAGELIST_ALIGN uAlign;
}
struct NMBCHOTITEM
{
    NMHDR hdr;
    NMTBHOTITEM_FLAGS dwFlags;
}
struct BUTTON_SPLITINFO
{
    uint mask;
    HIMAGELIST himlGlyph;
    uint uSplitStyle;
    SIZE size;
}
struct NMBCDROPDOWN
{
    NMHDR hdr;
    RECT rcButton;
}
struct EDITBALLOONTIP
{
    uint cbStruct;
    const(wchar)* pszTitle;
    const(wchar)* pszText;
    EDITBALLOONTIP_ICON ttiIcon;
}
alias EC_ENDOFLINE = int;
enum : int
{
    EC_ENDOFLINE_DETECTFROMCONTENT = 0x00000000,
    EC_ENDOFLINE_CRLF              = 0x00000001,
    EC_ENDOFLINE_CR                = 0x00000002,
    EC_ENDOFLINE_LF                = 0x00000003,
}

alias EC_SEARCHWEB_ENTRYPOINT = int;
enum : int
{
    EC_SEARCHWEB_ENTRYPOINT_EXTERNAL    = 0x00000000,
    EC_SEARCHWEB_ENTRYPOINT_CONTEXTMENU = 0x00000001,
}

struct NMSEARCHWEB
{
    NMHDR hdr;
    EC_SEARCHWEB_ENTRYPOINT entrypoint;
    BOOL hasQueryText;
    BOOL invokeSucceeded;
}
alias PFTASKDIALOGCALLBACK = HRESULT function(HWND, uint, WPARAM, LPARAM, long);
alias TASKDIALOG_FLAGS = int;
enum : int
{
    TDF_ENABLE_HYPERLINKS           = 0x00000001,
    TDF_USE_HICON_MAIN              = 0x00000002,
    TDF_USE_HICON_FOOTER            = 0x00000004,
    TDF_ALLOW_DIALOG_CANCELLATION   = 0x00000008,
    TDF_USE_COMMAND_LINKS           = 0x00000010,
    TDF_USE_COMMAND_LINKS_NO_ICON   = 0x00000020,
    TDF_EXPAND_FOOTER_AREA          = 0x00000040,
    TDF_EXPANDED_BY_DEFAULT         = 0x00000080,
    TDF_VERIFICATION_FLAG_CHECKED   = 0x00000100,
    TDF_SHOW_PROGRESS_BAR           = 0x00000200,
    TDF_SHOW_MARQUEE_PROGRESS_BAR   = 0x00000400,
    TDF_CALLBACK_TIMER              = 0x00000800,
    TDF_POSITION_RELATIVE_TO_WINDOW = 0x00001000,
    TDF_RTL_LAYOUT                  = 0x00002000,
    TDF_NO_DEFAULT_RADIO_BUTTON     = 0x00004000,
    TDF_CAN_BE_MINIMIZED            = 0x00008000,
    TDF_NO_SET_FOREGROUND           = 0x00010000,
    TDF_SIZE_TO_CONTENT             = 0x01000000,
}

alias TASKDIALOG_MESSAGES = int;
enum : int
{
    TDM_NAVIGATE_PAGE                       = 0x00000465,
    TDM_CLICK_BUTTON                        = 0x00000466,
    TDM_SET_MARQUEE_PROGRESS_BAR            = 0x00000467,
    TDM_SET_PROGRESS_BAR_STATE              = 0x00000468,
    TDM_SET_PROGRESS_BAR_RANGE              = 0x00000469,
    TDM_SET_PROGRESS_BAR_POS                = 0x0000046a,
    TDM_SET_PROGRESS_BAR_MARQUEE            = 0x0000046b,
    TDM_SET_ELEMENT_TEXT                    = 0x0000046c,
    TDM_CLICK_RADIO_BUTTON                  = 0x0000046e,
    TDM_ENABLE_BUTTON                       = 0x0000046f,
    TDM_ENABLE_RADIO_BUTTON                 = 0x00000470,
    TDM_CLICK_VERIFICATION                  = 0x00000471,
    TDM_UPDATE_ELEMENT_TEXT                 = 0x00000472,
    TDM_SET_BUTTON_ELEVATION_REQUIRED_STATE = 0x00000473,
    TDM_UPDATE_ICON                         = 0x00000474,
}

alias TASKDIALOG_NOTIFICATIONS = int;
enum : int
{
    TDN_CREATED                = 0x00000000,
    TDN_NAVIGATED              = 0x00000001,
    TDN_BUTTON_CLICKED         = 0x00000002,
    TDN_HYPERLINK_CLICKED      = 0x00000003,
    TDN_TIMER                  = 0x00000004,
    TDN_DESTROYED              = 0x00000005,
    TDN_RADIO_BUTTON_CLICKED   = 0x00000006,
    TDN_DIALOG_CONSTRUCTED     = 0x00000007,
    TDN_VERIFICATION_CLICKED   = 0x00000008,
    TDN_HELP                   = 0x00000009,
    TDN_EXPANDO_BUTTON_CLICKED = 0x0000000a,
}

struct TASKDIALOG_BUTTON
{
    align (1):
    int nButtonID;
    const(wchar)* pszButtonText;
}
alias TASKDIALOG_ELEMENTS = int;
enum : int
{
    TDE_CONTENT              = 0x00000000,
    TDE_EXPANDED_INFORMATION = 0x00000001,
    TDE_FOOTER               = 0x00000002,
    TDE_MAIN_INSTRUCTION     = 0x00000003,
}

alias TASKDIALOG_ICON_ELEMENTS = int;
enum : int
{
    TDIE_ICON_MAIN   = 0x00000000,
    TDIE_ICON_FOOTER = 0x00000001,
}

alias TASKDIALOG_COMMON_BUTTON_FLAGS = int;
enum : int
{
    TDCBF_OK_BUTTON     = 0x00000001,
    TDCBF_YES_BUTTON    = 0x00000002,
    TDCBF_NO_BUTTON     = 0x00000004,
    TDCBF_CANCEL_BUTTON = 0x00000008,
    TDCBF_RETRY_BUTTON  = 0x00000010,
    TDCBF_CLOSE_BUTTON  = 0x00000020,
}

struct TASKDIALOGCONFIG
{
    align (1):
    uint cbSize;
    HWND hwndParent;
    HINSTANCE hInstance;
    TASKDIALOG_FLAGS dwFlags;
    TASKDIALOG_COMMON_BUTTON_FLAGS dwCommonButtons;
    const(wchar)* pszWindowTitle;
    union
    {
        align (1):
        HICON hMainIcon;
        const(wchar)* pszMainIcon;
    }
    const(wchar)* pszMainInstruction;
    const(wchar)* pszContent;
    uint cButtons;
    const(TASKDIALOG_BUTTON)* pButtons;
    int nDefaultButton;
    uint cRadioButtons;
    const(TASKDIALOG_BUTTON)* pRadioButtons;
    int nDefaultRadioButton;
    const(wchar)* pszVerificationText;
    const(wchar)* pszExpandedInformation;
    const(wchar)* pszExpandedControlText;
    const(wchar)* pszCollapsedControlText;
    union
    {
        align (1):
        HICON hFooterIcon;
        const(wchar)* pszFooterIcon;
    }
    const(wchar)* pszFooter;
    PFTASKDIALOGCALLBACK pfCallback;
    long lpCallbackData;
    uint cxWidth;
}
alias PFNDAENUMCALLBACK = int function(void*, void*);
alias PFNDAENUMCALLBACKCONST = int function(const(void)*, void*);
alias PFNDACOMPARE = int function(void*, void*, LPARAM);
alias PFNDACOMPARECONST = int function(const(void)*, const(void)*, LPARAM);
struct DPASTREAMINFO
{
    int iPos;
    void* pvItem;
}
alias PFNDPASTREAM = HRESULT function(DPASTREAMINFO*, IStream, void*);
alias PFNDPAMERGE = void* function(DPAMM_MESSAGE, void*, void*, LPARAM);
alias PFNDPAMERGECONST = void* function(DPAMM_MESSAGE, const(void)*, const(void)*, LPARAM);
alias _LI_METRIC = int;
enum : int
{
    LIM_SMALL = 0x00000000,
    LIM_LARGE = 0x00000001,
}

enum CLSID_ImageList = GUID(0x7c476ba2, 0x2b1, 0x48f4, [0x80, 0x48, 0xb2, 0x46, 0x19, 0xdd, 0xc0, 0x58]);
struct ImageList
{
}
enum IID_IImageList = GUID(0x46eb5926, 0x582e, 0x4017, [0x9f, 0xdf, 0xe8, 0x99, 0x8d, 0xaa, 0x9, 0x50]);
interface IImageList : IUnknown
{
    HRESULT Add(HBITMAP, HBITMAP, int*);
    HRESULT ReplaceIcon(int, HICON, int*);
    HRESULT SetOverlayImage(int, int);
    HRESULT Replace(int, HBITMAP, HBITMAP);
    HRESULT AddMasked(HBITMAP, COLORREF, int*);
    HRESULT Draw(IMAGELISTDRAWPARAMS*);
    HRESULT Remove(int);
    HRESULT GetIcon(int, uint, HICON*);
    HRESULT GetImageInfo(int, IMAGEINFO*);
    HRESULT Copy(int, IUnknown, int, uint);
    HRESULT Merge(int, IUnknown, int, int, int, const(GUID)*, void**);
    HRESULT Clone(const(GUID)*, void**);
    HRESULT GetImageRect(int, RECT*);
    HRESULT GetIconSize(int*, int*);
    HRESULT SetIconSize(int, int);
    HRESULT GetImageCount(int*);
    HRESULT SetImageCount(uint);
    HRESULT SetBkColor(COLORREF, COLORREF*);
    HRESULT GetBkColor(COLORREF*);
    HRESULT BeginDrag(int, int, int);
    HRESULT EndDrag();
    HRESULT DragEnter(HWND, int, int);
    HRESULT DragLeave(HWND);
    HRESULT DragMove(int, int);
    HRESULT SetDragCursorImage(IUnknown, int, int, int);
    HRESULT DragShowNolock(BOOL);
    HRESULT GetDragImage(POINT*, POINT*, const(GUID)*, void**);
    HRESULT GetItemFlags(int, IMAGE_LIST_ITEM_FLAGS*);
    HRESULT GetOverlayImage(int, int*);
}
struct IMAGELISTSTATS
{
    uint cbSize;
    int cAlloc;
    int cUsed;
    int cStandby;
}
enum IID_IImageList2 = GUID(0x192b9d83, 0x50fc, 0x457b, [0x90, 0xa0, 0x2b, 0x82, 0xa8, 0xb5, 0xda, 0xe1]);
interface IImageList2 : IImageList
{
    HRESULT Resize(int, int);
    HRESULT GetOriginalSize(int, uint, int*, int*);
    HRESULT SetOriginalSize(int, int, int);
    HRESULT SetCallback(IUnknown);
    HRESULT GetCallback(const(GUID)*, void**);
    HRESULT ForceImagePresent(int, uint);
    HRESULT DiscardImages(int, int, uint);
    HRESULT PreloadImages(IMAGELISTDRAWPARAMS*);
    HRESULT GetStatistics(IMAGELISTSTATS*);
    HRESULT Initialize(int, int, IMAGELIST_CREATION_FLAGS, int, int);
    HRESULT Replace2(int, HBITMAP, HBITMAP, IUnknown, uint);
    HRESULT ReplaceFromImageList(int, IImageList, int, IUnknown, uint);
}
alias TA_PROPERTY = int;
enum : int
{
    TAP_FLAGS              = 0x00000000,
    TAP_TRANSFORMCOUNT     = 0x00000001,
    TAP_STAGGERDELAY       = 0x00000002,
    TAP_STAGGERDELAYCAP    = 0x00000003,
    TAP_STAGGERDELAYFACTOR = 0x00000004,
    TAP_ZORDER             = 0x00000005,
}

alias TA_PROPERTY_FLAG = uint;
enum : uint
{
    TAPF_NONE            = 0x00000000,
    TAPF_HASSTAGGER      = 0x00000001,
    TAPF_ISRTLAWARE      = 0x00000002,
    TAPF_ALLOWCOLLECTION = 0x00000004,
    TAPF_HASBACKGROUND   = 0x00000008,
    TAPF_HASPERSPECTIVE  = 0x00000010,
}

alias TA_TRANSFORM_TYPE = int;
enum : int
{
    TATT_TRANSLATE_2D = 0x00000000,
    TATT_SCALE_2D     = 0x00000001,
    TATT_OPACITY      = 0x00000002,
    TATT_CLIP         = 0x00000003,
}

alias TA_TRANSFORM_FLAG = int;
enum : int
{
    TATF_NONE              = 0x00000000,
    TATF_TARGETVALUES_USER = 0x00000001,
    TATF_HASINITIALVALUES  = 0x00000002,
    TATF_HASORIGINVALUES   = 0x00000004,
}

struct TA_TRANSFORM
{
    TA_TRANSFORM_TYPE eTransformType;
    uint dwTimingFunctionId;
    uint dwStartTime;
    uint dwDurationTime;
    TA_TRANSFORM_FLAG eFlags;
}
struct TA_TRANSFORM_2D
{
    TA_TRANSFORM header;
    float rX;
    float rY;
    float rInitialX;
    float rInitialY;
    float rOriginX;
    float rOriginY;
}
struct TA_TRANSFORM_OPACITY
{
    TA_TRANSFORM header;
    float rOpacity;
    float rInitialOpacity;
}
struct TA_TRANSFORM_CLIP
{
    TA_TRANSFORM header;
    float rLeft;
    float rTop;
    float rRight;
    float rBottom;
    float rInitialLeft;
    float rInitialTop;
    float rInitialRight;
    float rInitialBottom;
}
alias TA_TIMINGFUNCTION_TYPE = int;
enum : int
{
    TTFT_UNDEFINED    = 0x00000000,
    TTFT_CUBIC_BEZIER = 0x00000001,
}

struct TA_TIMINGFUNCTION
{
    TA_TIMINGFUNCTION_TYPE eTimingFunctionType;
}
struct TA_CUBIC_BEZIER
{
    TA_TIMINGFUNCTION header;
    float rX0;
    float rY0;
    float rX1;
    float rY1;
}
struct DTBGOPTS
{
    uint dwSize;
    uint dwFlags;
    RECT rcClip;
}
alias THEMESIZE = int;
enum : int
{
    TS_MIN  = 0x00000000,
    TS_TRUE = 0x00000001,
    TS_DRAW = 0x00000002,
}

struct MARGINS
{
    int cxLeftWidth;
    int cxRightWidth;
    int cyTopHeight;
    int cyBottomHeight;
}
struct INTLIST
{
    int iValueCount;
    int[402] iValues;
}
alias PROPERTYORIGIN = int;
enum : int
{
    PO_STATE    = 0x00000000,
    PO_PART     = 0x00000001,
    PO_CLASS    = 0x00000002,
    PO_GLOBAL   = 0x00000003,
    PO_NOTFOUND = 0x00000004,
}

alias WINDOWTHEMEATTRIBUTETYPE = int;
enum : int
{
    WTA_NONCLIENT = 0x00000001,
}

struct WTA_OPTIONS
{
    uint dwFlags;
    uint dwMask;
}
alias DTT_CALLBACK_PROC = int function(HDC, PWSTR, int, RECT*, uint, LPARAM);
struct DTTOPTS
{
    uint dwSize;
    DTTOPTS_FLAGS dwFlags;
    COLORREF crText;
    COLORREF crBorder;
    COLORREF crShadow;
    int iTextShadowType;
    POINT ptShadowOffset;
    int iBorderSize;
    int iFontPropId;
    int iColorPropId;
    int iStateId;
    BOOL fApplyOverlay;
    int iGlowSize;
    DTT_CALLBACK_PROC pfnDrawTextCallback;
    LPARAM lParam;
}
alias BP_BUFFERFORMAT = int;
enum : int
{
    BPBF_COMPATIBLEBITMAP = 0x00000000,
    BPBF_DIB              = 0x00000001,
    BPBF_TOPDOWNDIB       = 0x00000002,
    BPBF_TOPDOWNMONODIB   = 0x00000003,
}

alias BP_ANIMATIONSTYLE = int;
enum : int
{
    BPAS_NONE   = 0x00000000,
    BPAS_LINEAR = 0x00000001,
    BPAS_CUBIC  = 0x00000002,
    BPAS_SINE   = 0x00000003,
}

struct BP_ANIMATIONPARAMS
{
    uint cbSize;
    uint dwFlags;
    BP_ANIMATIONSTYLE style;
    uint dwDuration;
}
struct BP_PAINTPARAMS
{
    uint cbSize;
    BP_PAINTPARAMS_FLAGS dwFlags;
    const(RECT)* prcExclude;
    const(BLENDFUNCTION)* pBlendFunction;
}
alias AEROWIZARDPARTS = int;
enum : int
{
    AW_TITLEBAR    = 0x00000001,
    AW_HEADERAREA  = 0x00000002,
    AW_CONTENTAREA = 0x00000003,
    AW_COMMANDAREA = 0x00000004,
    AW_BUTTON      = 0x00000005,
}

alias TITLEBARSTATES = int;
enum : int
{
    AW_S_TITLEBAR_ACTIVE   = 0x00000001,
    AW_S_TITLEBAR_INACTIVE = 0x00000002,
}

alias HEADERAREASTATES = int;
enum : int
{
    AW_S_HEADERAREA_NOMARGIN = 0x00000001,
}

alias CONTENTAREASTATES = int;
enum : int
{
    AW_S_CONTENTAREA_NOMARGIN = 0x00000001,
}

alias BUTTONPARTS = int;
enum : int
{
    BP_PUSHBUTTON             = 0x00000001,
    BP_RADIOBUTTON            = 0x00000002,
    BP_CHECKBOX               = 0x00000003,
    BP_GROUPBOX               = 0x00000004,
    BP_USERBUTTON             = 0x00000005,
    BP_COMMANDLINK            = 0x00000006,
    BP_COMMANDLINKGLYPH       = 0x00000007,
    BP_RADIOBUTTON_HCDISABLED = 0x00000008,
    BP_CHECKBOX_HCDISABLED    = 0x00000009,
    BP_GROUPBOX_HCDISABLED    = 0x0000000a,
    BP_PUSHBUTTONDROPDOWN     = 0x0000000b,
}

alias PUSHBUTTONSTATES = int;
enum : int
{
    PBS_NORMAL              = 0x00000001,
    PBS_HOT                 = 0x00000002,
    PBS_PRESSED             = 0x00000003,
    PBS_DISABLED            = 0x00000004,
    PBS_DEFAULTED           = 0x00000005,
    PBS_DEFAULTED_ANIMATING = 0x00000006,
}

alias RADIOBUTTONSTATES = int;
enum : int
{
    RBS_UNCHECKEDNORMAL   = 0x00000001,
    RBS_UNCHECKEDHOT      = 0x00000002,
    RBS_UNCHECKEDPRESSED  = 0x00000003,
    RBS_UNCHECKEDDISABLED = 0x00000004,
    RBS_CHECKEDNORMAL     = 0x00000005,
    RBS_CHECKEDHOT        = 0x00000006,
    RBS_CHECKEDPRESSED    = 0x00000007,
    RBS_CHECKEDDISABLED   = 0x00000008,
}

alias CHECKBOXSTATES = int;
enum : int
{
    CBS_UNCHECKEDNORMAL   = 0x00000001,
    CBS_UNCHECKEDHOT      = 0x00000002,
    CBS_UNCHECKEDPRESSED  = 0x00000003,
    CBS_UNCHECKEDDISABLED = 0x00000004,
    CBS_CHECKEDNORMAL     = 0x00000005,
    CBS_CHECKEDHOT        = 0x00000006,
    CBS_CHECKEDPRESSED    = 0x00000007,
    CBS_CHECKEDDISABLED   = 0x00000008,
    CBS_MIXEDNORMAL       = 0x00000009,
    CBS_MIXEDHOT          = 0x0000000a,
    CBS_MIXEDPRESSED      = 0x0000000b,
    CBS_MIXEDDISABLED     = 0x0000000c,
    CBS_IMPLICITNORMAL    = 0x0000000d,
    CBS_IMPLICITHOT       = 0x0000000e,
    CBS_IMPLICITPRESSED   = 0x0000000f,
    CBS_IMPLICITDISABLED  = 0x00000010,
    CBS_EXCLUDEDNORMAL    = 0x00000011,
    CBS_EXCLUDEDHOT       = 0x00000012,
    CBS_EXCLUDEDPRESSED   = 0x00000013,
    CBS_EXCLUDEDDISABLED  = 0x00000014,
}

alias GROUPBOXSTATES = int;
enum : int
{
    GBS_NORMAL   = 0x00000001,
    GBS_DISABLED = 0x00000002,
}

alias COMMANDLINKSTATES = int;
enum : int
{
    CMDLS_NORMAL              = 0x00000001,
    CMDLS_HOT                 = 0x00000002,
    CMDLS_PRESSED             = 0x00000003,
    CMDLS_DISABLED            = 0x00000004,
    CMDLS_DEFAULTED           = 0x00000005,
    CMDLS_DEFAULTED_ANIMATING = 0x00000006,
}

alias COMMANDLINKGLYPHSTATES = int;
enum : int
{
    CMDLGS_NORMAL    = 0x00000001,
    CMDLGS_HOT       = 0x00000002,
    CMDLGS_PRESSED   = 0x00000003,
    CMDLGS_DISABLED  = 0x00000004,
    CMDLGS_DEFAULTED = 0x00000005,
}

alias PUSHBUTTONDROPDOWNSTATES = int;
enum : int
{
    PBDDS_NORMAL   = 0x00000001,
    PBDDS_DISABLED = 0x00000002,
}

alias COMBOBOXPARTS = int;
enum : int
{
    CP_DROPDOWNBUTTON        = 0x00000001,
    CP_BACKGROUND            = 0x00000002,
    CP_TRANSPARENTBACKGROUND = 0x00000003,
    CP_BORDER                = 0x00000004,
    CP_READONLY              = 0x00000005,
    CP_DROPDOWNBUTTONRIGHT   = 0x00000006,
    CP_DROPDOWNBUTTONLEFT    = 0x00000007,
    CP_CUEBANNER             = 0x00000008,
    CP_DROPDOWNITEM          = 0x00000009,
}

alias COMBOBOXSTYLESTATES = int;
enum : int
{
    CBXS_NORMAL   = 0x00000001,
    CBXS_HOT      = 0x00000002,
    CBXS_PRESSED  = 0x00000003,
    CBXS_DISABLED = 0x00000004,
}

alias DROPDOWNBUTTONRIGHTSTATES = int;
enum : int
{
    CBXSR_NORMAL   = 0x00000001,
    CBXSR_HOT      = 0x00000002,
    CBXSR_PRESSED  = 0x00000003,
    CBXSR_DISABLED = 0x00000004,
}

alias DROPDOWNBUTTONLEFTSTATES = int;
enum : int
{
    CBXSL_NORMAL   = 0x00000001,
    CBXSL_HOT      = 0x00000002,
    CBXSL_PRESSED  = 0x00000003,
    CBXSL_DISABLED = 0x00000004,
}

alias TRANSPARENTBACKGROUNDSTATES = int;
enum : int
{
    CBTBS_NORMAL   = 0x00000001,
    CBTBS_HOT      = 0x00000002,
    CBTBS_DISABLED = 0x00000003,
    CBTBS_FOCUSED  = 0x00000004,
}

alias BORDERSTATES = int;
enum : int
{
    CBB_NORMAL   = 0x00000001,
    CBB_HOT      = 0x00000002,
    CBB_FOCUSED  = 0x00000003,
    CBB_DISABLED = 0x00000004,
}

alias READONLYSTATES = int;
enum : int
{
    CBRO_NORMAL   = 0x00000001,
    CBRO_HOT      = 0x00000002,
    CBRO_PRESSED  = 0x00000003,
    CBRO_DISABLED = 0x00000004,
}

alias CUEBANNERSTATES = int;
enum : int
{
    CBCB_NORMAL   = 0x00000001,
    CBCB_HOT      = 0x00000002,
    CBCB_PRESSED  = 0x00000003,
    CBCB_DISABLED = 0x00000004,
}

alias DROPDOWNITEMSTATES = int;
enum : int
{
    CBDI_NORMAL      = 0x00000001,
    CBDI_HIGHLIGHTED = 0x00000002,
}

alias COMMUNICATIONSPARTS = int;
enum : int
{
    CSST_TAB = 0x00000001,
}

alias TABSTATES = int;
enum : int
{
    CSTB_NORMAL   = 0x00000001,
    CSTB_HOT      = 0x00000002,
    CSTB_SELECTED = 0x00000003,
}

alias CONTROLPANELPARTS = int;
enum : int
{
    CPANEL_NAVIGATIONPANE      = 0x00000001,
    CPANEL_CONTENTPANE         = 0x00000002,
    CPANEL_NAVIGATIONPANELABEL = 0x00000003,
    CPANEL_CONTENTPANELABEL    = 0x00000004,
    CPANEL_TITLE               = 0x00000005,
    CPANEL_BODYTEXT            = 0x00000006,
    CPANEL_HELPLINK            = 0x00000007,
    CPANEL_TASKLINK            = 0x00000008,
    CPANEL_GROUPTEXT           = 0x00000009,
    CPANEL_CONTENTLINK         = 0x0000000a,
    CPANEL_SECTIONTITLELINK    = 0x0000000b,
    CPANEL_LARGECOMMANDAREA    = 0x0000000c,
    CPANEL_SMALLCOMMANDAREA    = 0x0000000d,
    CPANEL_BUTTON              = 0x0000000e,
    CPANEL_MESSAGETEXT         = 0x0000000f,
    CPANEL_NAVIGATIONPANELINE  = 0x00000010,
    CPANEL_CONTENTPANELINE     = 0x00000011,
    CPANEL_BANNERAREA          = 0x00000012,
    CPANEL_BODYTITLE           = 0x00000013,
}

alias HELPLINKSTATES = int;
enum : int
{
    CPHL_NORMAL   = 0x00000001,
    CPHL_HOT      = 0x00000002,
    CPHL_PRESSED  = 0x00000003,
    CPHL_DISABLED = 0x00000004,
}

alias TASKLINKSTATES = int;
enum : int
{
    CPTL_NORMAL   = 0x00000001,
    CPTL_HOT      = 0x00000002,
    CPTL_PRESSED  = 0x00000003,
    CPTL_DISABLED = 0x00000004,
    CPTL_PAGE     = 0x00000005,
}

alias CONTENTLINKSTATES = int;
enum : int
{
    CPCL_NORMAL   = 0x00000001,
    CPCL_HOT      = 0x00000002,
    CPCL_PRESSED  = 0x00000003,
    CPCL_DISABLED = 0x00000004,
}

alias SECTIONTITLELINKSTATES = int;
enum : int
{
    CPSTL_NORMAL = 0x00000001,
    CPSTL_HOT    = 0x00000002,
}

alias DATEPICKERPARTS = int;
enum : int
{
    DP_DATETEXT                = 0x00000001,
    DP_DATEBORDER              = 0x00000002,
    DP_SHOWCALENDARBUTTONRIGHT = 0x00000003,
}

alias DATETEXTSTATES = int;
enum : int
{
    DPDT_NORMAL   = 0x00000001,
    DPDT_DISABLED = 0x00000002,
    DPDT_SELECTED = 0x00000003,
}

alias DATEBORDERSTATES = int;
enum : int
{
    DPDB_NORMAL   = 0x00000001,
    DPDB_HOT      = 0x00000002,
    DPDB_FOCUSED  = 0x00000003,
    DPDB_DISABLED = 0x00000004,
}

alias SHOWCALENDARBUTTONRIGHTSTATES = int;
enum : int
{
    DPSCBR_NORMAL   = 0x00000001,
    DPSCBR_HOT      = 0x00000002,
    DPSCBR_PRESSED  = 0x00000003,
    DPSCBR_DISABLED = 0x00000004,
}

alias DRAGDROPPARTS = int;
enum : int
{
    DD_COPY           = 0x00000001,
    DD_MOVE           = 0x00000002,
    DD_UPDATEMETADATA = 0x00000003,
    DD_CREATELINK     = 0x00000004,
    DD_WARNING        = 0x00000005,
    DD_NONE           = 0x00000006,
    DD_IMAGEBG        = 0x00000007,
    DD_TEXTBG         = 0x00000008,
}

alias COPYSTATES = int;
enum : int
{
    DDCOPY_HIGHLIGHT   = 0x00000001,
    DDCOPY_NOHIGHLIGHT = 0x00000002,
}

alias MOVESTATES = int;
enum : int
{
    DDMOVE_HIGHLIGHT   = 0x00000001,
    DDMOVE_NOHIGHLIGHT = 0x00000002,
}

alias UPDATEMETADATASTATES = int;
enum : int
{
    DDUPDATEMETADATA_HIGHLIGHT   = 0x00000001,
    DDUPDATEMETADATA_NOHIGHLIGHT = 0x00000002,
}

alias CREATELINKSTATES = int;
enum : int
{
    DDCREATELINK_HIGHLIGHT   = 0x00000001,
    DDCREATELINK_NOHIGHLIGHT = 0x00000002,
}

alias WARNINGSTATES = int;
enum : int
{
    DDWARNING_HIGHLIGHT   = 0x00000001,
    DDWARNING_NOHIGHLIGHT = 0x00000002,
}

alias NONESTATES = int;
enum : int
{
    DDNONE_HIGHLIGHT   = 0x00000001,
    DDNONE_NOHIGHLIGHT = 0x00000002,
}

alias EDITPARTS = int;
enum : int
{
    EP_EDITTEXT             = 0x00000001,
    EP_CARET                = 0x00000002,
    EP_BACKGROUND           = 0x00000003,
    EP_PASSWORD             = 0x00000004,
    EP_BACKGROUNDWITHBORDER = 0x00000005,
    EP_EDITBORDER_NOSCROLL  = 0x00000006,
    EP_EDITBORDER_HSCROLL   = 0x00000007,
    EP_EDITBORDER_VSCROLL   = 0x00000008,
    EP_EDITBORDER_HVSCROLL  = 0x00000009,
}

alias EDITTEXTSTATES = int;
enum : int
{
    ETS_NORMAL    = 0x00000001,
    ETS_HOT       = 0x00000002,
    ETS_SELECTED  = 0x00000003,
    ETS_DISABLED  = 0x00000004,
    ETS_FOCUSED   = 0x00000005,
    ETS_READONLY  = 0x00000006,
    ETS_ASSIST    = 0x00000007,
    ETS_CUEBANNER = 0x00000008,
}

alias BACKGROUNDSTATES = int;
enum : int
{
    EBS_NORMAL   = 0x00000001,
    EBS_HOT      = 0x00000002,
    EBS_DISABLED = 0x00000003,
    EBS_FOCUSED  = 0x00000004,
    EBS_READONLY = 0x00000005,
    EBS_ASSIST   = 0x00000006,
}

alias BACKGROUNDWITHBORDERSTATES = int;
enum : int
{
    EBWBS_NORMAL   = 0x00000001,
    EBWBS_HOT      = 0x00000002,
    EBWBS_DISABLED = 0x00000003,
    EBWBS_FOCUSED  = 0x00000004,
}

alias EDITBORDER_NOSCROLLSTATES = int;
enum : int
{
    EPSN_NORMAL   = 0x00000001,
    EPSN_HOT      = 0x00000002,
    EPSN_FOCUSED  = 0x00000003,
    EPSN_DISABLED = 0x00000004,
}

alias EDITBORDER_HSCROLLSTATES = int;
enum : int
{
    EPSH_NORMAL   = 0x00000001,
    EPSH_HOT      = 0x00000002,
    EPSH_FOCUSED  = 0x00000003,
    EPSH_DISABLED = 0x00000004,
}

alias EDITBORDER_VSCROLLSTATES = int;
enum : int
{
    EPSV_NORMAL   = 0x00000001,
    EPSV_HOT      = 0x00000002,
    EPSV_FOCUSED  = 0x00000003,
    EPSV_DISABLED = 0x00000004,
}

alias EDITBORDER_HVSCROLLSTATES = int;
enum : int
{
    EPSHV_NORMAL   = 0x00000001,
    EPSHV_HOT      = 0x00000002,
    EPSHV_FOCUSED  = 0x00000003,
    EPSHV_DISABLED = 0x00000004,
}

alias EXPLORERBARPARTS = int;
enum : int
{
    EBP_HEADERBACKGROUND       = 0x00000001,
    EBP_HEADERCLOSE            = 0x00000002,
    EBP_HEADERPIN              = 0x00000003,
    EBP_IEBARMENU              = 0x00000004,
    EBP_NORMALGROUPBACKGROUND  = 0x00000005,
    EBP_NORMALGROUPCOLLAPSE    = 0x00000006,
    EBP_NORMALGROUPEXPAND      = 0x00000007,
    EBP_NORMALGROUPHEAD        = 0x00000008,
    EBP_SPECIALGROUPBACKGROUND = 0x00000009,
    EBP_SPECIALGROUPCOLLAPSE   = 0x0000000a,
    EBP_SPECIALGROUPEXPAND     = 0x0000000b,
    EBP_SPECIALGROUPHEAD       = 0x0000000c,
}

alias HEADERCLOSESTATES = int;
enum : int
{
    EBHC_NORMAL  = 0x00000001,
    EBHC_HOT     = 0x00000002,
    EBHC_PRESSED = 0x00000003,
}

alias HEADERPINSTATES = int;
enum : int
{
    EBHP_NORMAL          = 0x00000001,
    EBHP_HOT             = 0x00000002,
    EBHP_PRESSED         = 0x00000003,
    EBHP_SELECTEDNORMAL  = 0x00000004,
    EBHP_SELECTEDHOT     = 0x00000005,
    EBHP_SELECTEDPRESSED = 0x00000006,
}

alias IEBARMENUSTATES = int;
enum : int
{
    EBM_NORMAL  = 0x00000001,
    EBM_HOT     = 0x00000002,
    EBM_PRESSED = 0x00000003,
}

alias NORMALGROUPCOLLAPSESTATES = int;
enum : int
{
    EBNGC_NORMAL  = 0x00000001,
    EBNGC_HOT     = 0x00000002,
    EBNGC_PRESSED = 0x00000003,
}

alias NORMALGROUPEXPANDSTATES = int;
enum : int
{
    EBNGE_NORMAL  = 0x00000001,
    EBNGE_HOT     = 0x00000002,
    EBNGE_PRESSED = 0x00000003,
}

alias SPECIALGROUPCOLLAPSESTATES = int;
enum : int
{
    EBSGC_NORMAL  = 0x00000001,
    EBSGC_HOT     = 0x00000002,
    EBSGC_PRESSED = 0x00000003,
}

alias SPECIALGROUPEXPANDSTATES = int;
enum : int
{
    EBSGE_NORMAL  = 0x00000001,
    EBSGE_HOT     = 0x00000002,
    EBSGE_PRESSED = 0x00000003,
}

alias FLYOUTPARTS = int;
enum : int
{
    FLYOUT_HEADER     = 0x00000001,
    FLYOUT_BODY       = 0x00000002,
    FLYOUT_LABEL      = 0x00000003,
    FLYOUT_LINK       = 0x00000004,
    FLYOUT_DIVIDER    = 0x00000005,
    FLYOUT_WINDOW     = 0x00000006,
    FLYOUT_LINKAREA   = 0x00000007,
    FLYOUT_LINKHEADER = 0x00000008,
}

alias LABELSTATES = int;
enum : int
{
    FLS_NORMAL     = 0x00000001,
    FLS_SELECTED   = 0x00000002,
    FLS_EMPHASIZED = 0x00000003,
    FLS_DISABLED   = 0x00000004,
}

alias LINKSTATES = int;
enum : int
{
    FLYOUTLINK_NORMAL = 0x00000001,
    FLYOUTLINK_HOVER  = 0x00000002,
}

alias BODYSTATES = int;
enum : int
{
    FBS_NORMAL     = 0x00000001,
    FBS_EMPHASIZED = 0x00000002,
}

alias LINKHEADERSTATES = int;
enum : int
{
    FLH_NORMAL = 0x00000001,
    FLH_HOVER  = 0x00000002,
}

alias HEADERPARTS = int;
enum : int
{
    HP_HEADERITEM           = 0x00000001,
    HP_HEADERITEMLEFT       = 0x00000002,
    HP_HEADERITEMRIGHT      = 0x00000003,
    HP_HEADERSORTARROW      = 0x00000004,
    HP_HEADERDROPDOWN       = 0x00000005,
    HP_HEADERDROPDOWNFILTER = 0x00000006,
    HP_HEADEROVERFLOW       = 0x00000007,
}

alias HEADERSTYLESTATES = int;
enum : int
{
    HBG_DETAILS = 0x00000001,
    HBG_ICON    = 0x00000002,
}

alias HEADERITEMSTATES = int;
enum : int
{
    HIS_NORMAL            = 0x00000001,
    HIS_HOT               = 0x00000002,
    HIS_PRESSED           = 0x00000003,
    HIS_SORTEDNORMAL      = 0x00000004,
    HIS_SORTEDHOT         = 0x00000005,
    HIS_SORTEDPRESSED     = 0x00000006,
    HIS_ICONNORMAL        = 0x00000007,
    HIS_ICONHOT           = 0x00000008,
    HIS_ICONPRESSED       = 0x00000009,
    HIS_ICONSORTEDNORMAL  = 0x0000000a,
    HIS_ICONSORTEDHOT     = 0x0000000b,
    HIS_ICONSORTEDPRESSED = 0x0000000c,
}

alias HEADERITEMLEFTSTATES = int;
enum : int
{
    HILS_NORMAL  = 0x00000001,
    HILS_HOT     = 0x00000002,
    HILS_PRESSED = 0x00000003,
}

alias HEADERITEMRIGHTSTATES = int;
enum : int
{
    HIRS_NORMAL  = 0x00000001,
    HIRS_HOT     = 0x00000002,
    HIRS_PRESSED = 0x00000003,
}

alias HEADERSORTARROWSTATES = int;
enum : int
{
    HSAS_SORTEDUP   = 0x00000001,
    HSAS_SORTEDDOWN = 0x00000002,
}

alias HEADERDROPDOWNSTATES = int;
enum : int
{
    HDDS_NORMAL  = 0x00000001,
    HDDS_SOFTHOT = 0x00000002,
    HDDS_HOT     = 0x00000003,
}

alias HEADERDROPDOWNFILTERSTATES = int;
enum : int
{
    HDDFS_NORMAL  = 0x00000001,
    HDDFS_SOFTHOT = 0x00000002,
    HDDFS_HOT     = 0x00000003,
}

alias HEADEROVERFLOWSTATES = int;
enum : int
{
    HOFS_NORMAL = 0x00000001,
    HOFS_HOT    = 0x00000002,
}

alias LISTBOXPARTS = int;
enum : int
{
    LBCP_BORDER_HSCROLL  = 0x00000001,
    LBCP_BORDER_HVSCROLL = 0x00000002,
    LBCP_BORDER_NOSCROLL = 0x00000003,
    LBCP_BORDER_VSCROLL  = 0x00000004,
    LBCP_ITEM            = 0x00000005,
}

alias BORDER_HSCROLLSTATES = int;
enum : int
{
    LBPSH_NORMAL   = 0x00000001,
    LBPSH_FOCUSED  = 0x00000002,
    LBPSH_HOT      = 0x00000003,
    LBPSH_DISABLED = 0x00000004,
}

alias BORDER_HVSCROLLSTATES = int;
enum : int
{
    LBPSHV_NORMAL   = 0x00000001,
    LBPSHV_FOCUSED  = 0x00000002,
    LBPSHV_HOT      = 0x00000003,
    LBPSHV_DISABLED = 0x00000004,
}

alias BORDER_NOSCROLLSTATES = int;
enum : int
{
    LBPSN_NORMAL   = 0x00000001,
    LBPSN_FOCUSED  = 0x00000002,
    LBPSN_HOT      = 0x00000003,
    LBPSN_DISABLED = 0x00000004,
}

alias BORDER_VSCROLLSTATES = int;
enum : int
{
    LBPSV_NORMAL   = 0x00000001,
    LBPSV_FOCUSED  = 0x00000002,
    LBPSV_HOT      = 0x00000003,
    LBPSV_DISABLED = 0x00000004,
}

alias ITEMSTATES = int;
enum : int
{
    LBPSI_HOT              = 0x00000001,
    LBPSI_HOTSELECTED      = 0x00000002,
    LBPSI_SELECTED         = 0x00000003,
    LBPSI_SELECTEDNOTFOCUS = 0x00000004,
}

alias LISTVIEWPARTS = int;
enum : int
{
    LVP_LISTITEM         = 0x00000001,
    LVP_LISTGROUP        = 0x00000002,
    LVP_LISTDETAIL       = 0x00000003,
    LVP_LISTSORTEDDETAIL = 0x00000004,
    LVP_EMPTYTEXT        = 0x00000005,
    LVP_GROUPHEADER      = 0x00000006,
    LVP_GROUPHEADERLINE  = 0x00000007,
    LVP_EXPANDBUTTON     = 0x00000008,
    LVP_COLLAPSEBUTTON   = 0x00000009,
    LVP_COLUMNDETAIL     = 0x0000000a,
}

alias LISTITEMSTATES = int;
enum : int
{
    LISS_NORMAL           = 0x00000001,
    LISS_HOT              = 0x00000002,
    LISS_SELECTED         = 0x00000003,
    LISS_DISABLED         = 0x00000004,
    LISS_SELECTEDNOTFOCUS = 0x00000005,
    LISS_HOTSELECTED      = 0x00000006,
}

alias GROUPHEADERSTATES = int;
enum : int
{
    LVGH_OPEN                       = 0x00000001,
    LVGH_OPENHOT                    = 0x00000002,
    LVGH_OPENSELECTED               = 0x00000003,
    LVGH_OPENSELECTEDHOT            = 0x00000004,
    LVGH_OPENSELECTEDNOTFOCUSED     = 0x00000005,
    LVGH_OPENSELECTEDNOTFOCUSEDHOT  = 0x00000006,
    LVGH_OPENMIXEDSELECTION         = 0x00000007,
    LVGH_OPENMIXEDSELECTIONHOT      = 0x00000008,
    LVGH_CLOSE                      = 0x00000009,
    LVGH_CLOSEHOT                   = 0x0000000a,
    LVGH_CLOSESELECTED              = 0x0000000b,
    LVGH_CLOSESELECTEDHOT           = 0x0000000c,
    LVGH_CLOSESELECTEDNOTFOCUSED    = 0x0000000d,
    LVGH_CLOSESELECTEDNOTFOCUSEDHOT = 0x0000000e,
    LVGH_CLOSEMIXEDSELECTION        = 0x0000000f,
    LVGH_CLOSEMIXEDSELECTIONHOT     = 0x00000010,
}

alias GROUPHEADERLINESTATES = int;
enum : int
{
    LVGHL_OPEN                       = 0x00000001,
    LVGHL_OPENHOT                    = 0x00000002,
    LVGHL_OPENSELECTED               = 0x00000003,
    LVGHL_OPENSELECTEDHOT            = 0x00000004,
    LVGHL_OPENSELECTEDNOTFOCUSED     = 0x00000005,
    LVGHL_OPENSELECTEDNOTFOCUSEDHOT  = 0x00000006,
    LVGHL_OPENMIXEDSELECTION         = 0x00000007,
    LVGHL_OPENMIXEDSELECTIONHOT      = 0x00000008,
    LVGHL_CLOSE                      = 0x00000009,
    LVGHL_CLOSEHOT                   = 0x0000000a,
    LVGHL_CLOSESELECTED              = 0x0000000b,
    LVGHL_CLOSESELECTEDHOT           = 0x0000000c,
    LVGHL_CLOSESELECTEDNOTFOCUSED    = 0x0000000d,
    LVGHL_CLOSESELECTEDNOTFOCUSEDHOT = 0x0000000e,
    LVGHL_CLOSEMIXEDSELECTION        = 0x0000000f,
    LVGHL_CLOSEMIXEDSELECTIONHOT     = 0x00000010,
}

alias EXPANDBUTTONSTATES = int;
enum : int
{
    LVEB_NORMAL = 0x00000001,
    LVEB_HOVER  = 0x00000002,
    LVEB_PUSHED = 0x00000003,
}

alias COLLAPSEBUTTONSTATES = int;
enum : int
{
    LVCB_NORMAL = 0x00000001,
    LVCB_HOVER  = 0x00000002,
    LVCB_PUSHED = 0x00000003,
}

alias MENUPARTS = int;
enum : int
{
    MENU_MENUITEM_TMSCHEMA        = 0x00000001,
    MENU_MENUDROPDOWN_TMSCHEMA    = 0x00000002,
    MENU_MENUBARITEM_TMSCHEMA     = 0x00000003,
    MENU_MENUBARDROPDOWN_TMSCHEMA = 0x00000004,
    MENU_CHEVRON_TMSCHEMA         = 0x00000005,
    MENU_SEPARATOR_TMSCHEMA       = 0x00000006,
    MENU_BARBACKGROUND            = 0x00000007,
    MENU_BARITEM                  = 0x00000008,
    MENU_POPUPBACKGROUND          = 0x00000009,
    MENU_POPUPBORDERS             = 0x0000000a,
    MENU_POPUPCHECK               = 0x0000000b,
    MENU_POPUPCHECKBACKGROUND     = 0x0000000c,
    MENU_POPUPGUTTER              = 0x0000000d,
    MENU_POPUPITEM                = 0x0000000e,
    MENU_POPUPSEPARATOR           = 0x0000000f,
    MENU_POPUPSUBMENU             = 0x00000010,
    MENU_SYSTEMCLOSE              = 0x00000011,
    MENU_SYSTEMMAXIMIZE           = 0x00000012,
    MENU_SYSTEMMINIMIZE           = 0x00000013,
    MENU_SYSTEMRESTORE            = 0x00000014,
}

alias BARBACKGROUNDSTATES = int;
enum : int
{
    MB_ACTIVE   = 0x00000001,
    MB_INACTIVE = 0x00000002,
}

alias BARITEMSTATES = int;
enum : int
{
    MBI_NORMAL         = 0x00000001,
    MBI_HOT            = 0x00000002,
    MBI_PUSHED         = 0x00000003,
    MBI_DISABLED       = 0x00000004,
    MBI_DISABLEDHOT    = 0x00000005,
    MBI_DISABLEDPUSHED = 0x00000006,
}

alias POPUPCHECKSTATES = int;
enum : int
{
    MC_CHECKMARKNORMAL   = 0x00000001,
    MC_CHECKMARKDISABLED = 0x00000002,
    MC_BULLETNORMAL      = 0x00000003,
    MC_BULLETDISABLED    = 0x00000004,
}

alias POPUPCHECKBACKGROUNDSTATES = int;
enum : int
{
    MCB_DISABLED = 0x00000001,
    MCB_NORMAL   = 0x00000002,
    MCB_BITMAP   = 0x00000003,
}

alias POPUPITEMSTATES = int;
enum : int
{
    MPI_NORMAL      = 0x00000001,
    MPI_HOT         = 0x00000002,
    MPI_DISABLED    = 0x00000003,
    MPI_DISABLEDHOT = 0x00000004,
}

alias POPUPSUBMENUSTATES = int;
enum : int
{
    MSM_NORMAL   = 0x00000001,
    MSM_DISABLED = 0x00000002,
}

alias SYSTEMCLOSESTATES = int;
enum : int
{
    MSYSC_NORMAL   = 0x00000001,
    MSYSC_DISABLED = 0x00000002,
}

alias SYSTEMMAXIMIZESTATES = int;
enum : int
{
    MSYSMX_NORMAL   = 0x00000001,
    MSYSMX_DISABLED = 0x00000002,
}

alias SYSTEMMINIMIZESTATES = int;
enum : int
{
    MSYSMN_NORMAL   = 0x00000001,
    MSYSMN_DISABLED = 0x00000002,
}

alias SYSTEMRESTORESTATES = int;
enum : int
{
    MSYSR_NORMAL   = 0x00000001,
    MSYSR_DISABLED = 0x00000002,
}

alias NAVIGATIONPARTS = int;
enum : int
{
    NAV_BACKBUTTON    = 0x00000001,
    NAV_FORWARDBUTTON = 0x00000002,
    NAV_MENUBUTTON    = 0x00000003,
}

alias NAV_BACKBUTTONSTATES = int;
enum : int
{
    NAV_BB_NORMAL   = 0x00000001,
    NAV_BB_HOT      = 0x00000002,
    NAV_BB_PRESSED  = 0x00000003,
    NAV_BB_DISABLED = 0x00000004,
}

alias NAV_FORWARDBUTTONSTATES = int;
enum : int
{
    NAV_FB_NORMAL   = 0x00000001,
    NAV_FB_HOT      = 0x00000002,
    NAV_FB_PRESSED  = 0x00000003,
    NAV_FB_DISABLED = 0x00000004,
}

alias NAV_MENUBUTTONSTATES = int;
enum : int
{
    NAV_MB_NORMAL   = 0x00000001,
    NAV_MB_HOT      = 0x00000002,
    NAV_MB_PRESSED  = 0x00000003,
    NAV_MB_DISABLED = 0x00000004,
}

alias PROGRESSPARTS = int;
enum : int
{
    PP_BAR                = 0x00000001,
    PP_BARVERT            = 0x00000002,
    PP_CHUNK              = 0x00000003,
    PP_CHUNKVERT          = 0x00000004,
    PP_FILL               = 0x00000005,
    PP_FILLVERT           = 0x00000006,
    PP_PULSEOVERLAY       = 0x00000007,
    PP_MOVEOVERLAY        = 0x00000008,
    PP_PULSEOVERLAYVERT   = 0x00000009,
    PP_MOVEOVERLAYVERT    = 0x0000000a,
    PP_TRANSPARENTBAR     = 0x0000000b,
    PP_TRANSPARENTBARVERT = 0x0000000c,
}

alias TRANSPARENTBARSTATES = int;
enum : int
{
    PBBS_NORMAL  = 0x00000001,
    PBBS_PARTIAL = 0x00000002,
}

alias TRANSPARENTBARVERTSTATES = int;
enum : int
{
    PBBVS_NORMAL  = 0x00000001,
    PBBVS_PARTIAL = 0x00000002,
}

alias FILLSTATES = int;
enum : int
{
    PBFS_NORMAL  = 0x00000001,
    PBFS_ERROR   = 0x00000002,
    PBFS_PAUSED  = 0x00000003,
    PBFS_PARTIAL = 0x00000004,
}

alias FILLVERTSTATES = int;
enum : int
{
    PBFVS_NORMAL  = 0x00000001,
    PBFVS_ERROR   = 0x00000002,
    PBFVS_PAUSED  = 0x00000003,
    PBFVS_PARTIAL = 0x00000004,
}

alias REBARPARTS = int;
enum : int
{
    RP_GRIPPER      = 0x00000001,
    RP_GRIPPERVERT  = 0x00000002,
    RP_BAND         = 0x00000003,
    RP_CHEVRON      = 0x00000004,
    RP_CHEVRONVERT  = 0x00000005,
    RP_BACKGROUND   = 0x00000006,
    RP_SPLITTER     = 0x00000007,
    RP_SPLITTERVERT = 0x00000008,
}

alias CHEVRONSTATES = int;
enum : int
{
    CHEVS_NORMAL  = 0x00000001,
    CHEVS_HOT     = 0x00000002,
    CHEVS_PRESSED = 0x00000003,
}

alias CHEVRONVERTSTATES = int;
enum : int
{
    CHEVSV_NORMAL  = 0x00000001,
    CHEVSV_HOT     = 0x00000002,
    CHEVSV_PRESSED = 0x00000003,
}

alias SPLITTERSTATES = int;
enum : int
{
    SPLITS_NORMAL  = 0x00000001,
    SPLITS_HOT     = 0x00000002,
    SPLITS_PRESSED = 0x00000003,
}

alias SPLITTERVERTSTATES = int;
enum : int
{
    SPLITSV_NORMAL  = 0x00000001,
    SPLITSV_HOT     = 0x00000002,
    SPLITSV_PRESSED = 0x00000003,
}

alias SCROLLBARPARTS = int;
enum : int
{
    SBP_ARROWBTN       = 0x00000001,
    SBP_THUMBBTNHORZ   = 0x00000002,
    SBP_THUMBBTNVERT   = 0x00000003,
    SBP_LOWERTRACKHORZ = 0x00000004,
    SBP_UPPERTRACKHORZ = 0x00000005,
    SBP_LOWERTRACKVERT = 0x00000006,
    SBP_UPPERTRACKVERT = 0x00000007,
    SBP_GRIPPERHORZ    = 0x00000008,
    SBP_GRIPPERVERT    = 0x00000009,
    SBP_SIZEBOX        = 0x0000000a,
    SBP_SIZEBOXBKGND   = 0x0000000b,
}

alias ARROWBTNSTATES = int;
enum : int
{
    ABS_UPNORMAL      = 0x00000001,
    ABS_UPHOT         = 0x00000002,
    ABS_UPPRESSED     = 0x00000003,
    ABS_UPDISABLED    = 0x00000004,
    ABS_DOWNNORMAL    = 0x00000005,
    ABS_DOWNHOT       = 0x00000006,
    ABS_DOWNPRESSED   = 0x00000007,
    ABS_DOWNDISABLED  = 0x00000008,
    ABS_LEFTNORMAL    = 0x00000009,
    ABS_LEFTHOT       = 0x0000000a,
    ABS_LEFTPRESSED   = 0x0000000b,
    ABS_LEFTDISABLED  = 0x0000000c,
    ABS_RIGHTNORMAL   = 0x0000000d,
    ABS_RIGHTHOT      = 0x0000000e,
    ABS_RIGHTPRESSED  = 0x0000000f,
    ABS_RIGHTDISABLED = 0x00000010,
    ABS_UPHOVER       = 0x00000011,
    ABS_DOWNHOVER     = 0x00000012,
    ABS_LEFTHOVER     = 0x00000013,
    ABS_RIGHTHOVER    = 0x00000014,
}

alias SCROLLBARSTYLESTATES = int;
enum : int
{
    SCRBS_NORMAL   = 0x00000001,
    SCRBS_HOT      = 0x00000002,
    SCRBS_PRESSED  = 0x00000003,
    SCRBS_DISABLED = 0x00000004,
    SCRBS_HOVER    = 0x00000005,
}

alias SIZEBOXSTATES = int;
enum : int
{
    SZB_RIGHTALIGN           = 0x00000001,
    SZB_LEFTALIGN            = 0x00000002,
    SZB_TOPRIGHTALIGN        = 0x00000003,
    SZB_TOPLEFTALIGN         = 0x00000004,
    SZB_HALFBOTTOMRIGHTALIGN = 0x00000005,
    SZB_HALFBOTTOMLEFTALIGN  = 0x00000006,
    SZB_HALFTOPRIGHTALIGN    = 0x00000007,
    SZB_HALFTOPLEFTALIGN     = 0x00000008,
}

alias SPINPARTS = int;
enum : int
{
    SPNP_UP       = 0x00000001,
    SPNP_DOWN     = 0x00000002,
    SPNP_UPHORZ   = 0x00000003,
    SPNP_DOWNHORZ = 0x00000004,
}

alias UPSTATES = int;
enum : int
{
    UPS_NORMAL   = 0x00000001,
    UPS_HOT      = 0x00000002,
    UPS_PRESSED  = 0x00000003,
    UPS_DISABLED = 0x00000004,
}

alias DOWNSTATES = int;
enum : int
{
    DNS_NORMAL   = 0x00000001,
    DNS_HOT      = 0x00000002,
    DNS_PRESSED  = 0x00000003,
    DNS_DISABLED = 0x00000004,
}

alias UPHORZSTATES = int;
enum : int
{
    UPHZS_NORMAL   = 0x00000001,
    UPHZS_HOT      = 0x00000002,
    UPHZS_PRESSED  = 0x00000003,
    UPHZS_DISABLED = 0x00000004,
}

alias DOWNHORZSTATES = int;
enum : int
{
    DNHZS_NORMAL   = 0x00000001,
    DNHZS_HOT      = 0x00000002,
    DNHZS_PRESSED  = 0x00000003,
    DNHZS_DISABLED = 0x00000004,
}

alias STATUSPARTS = int;
enum : int
{
    SP_PANE        = 0x00000001,
    SP_GRIPPERPANE = 0x00000002,
    SP_GRIPPER     = 0x00000003,
}

alias TABPARTS = int;
enum : int
{
    TABP_TABITEM             = 0x00000001,
    TABP_TABITEMLEFTEDGE     = 0x00000002,
    TABP_TABITEMRIGHTEDGE    = 0x00000003,
    TABP_TABITEMBOTHEDGE     = 0x00000004,
    TABP_TOPTABITEM          = 0x00000005,
    TABP_TOPTABITEMLEFTEDGE  = 0x00000006,
    TABP_TOPTABITEMRIGHTEDGE = 0x00000007,
    TABP_TOPTABITEMBOTHEDGE  = 0x00000008,
    TABP_PANE                = 0x00000009,
    TABP_BODY                = 0x0000000a,
    TABP_AEROWIZARDBODY      = 0x0000000b,
}

alias TABITEMSTATES = int;
enum : int
{
    TIS_NORMAL   = 0x00000001,
    TIS_HOT      = 0x00000002,
    TIS_SELECTED = 0x00000003,
    TIS_DISABLED = 0x00000004,
    TIS_FOCUSED  = 0x00000005,
}

alias TABITEMLEFTEDGESTATES = int;
enum : int
{
    TILES_NORMAL   = 0x00000001,
    TILES_HOT      = 0x00000002,
    TILES_SELECTED = 0x00000003,
    TILES_DISABLED = 0x00000004,
    TILES_FOCUSED  = 0x00000005,
}

alias TABITEMRIGHTEDGESTATES = int;
enum : int
{
    TIRES_NORMAL   = 0x00000001,
    TIRES_HOT      = 0x00000002,
    TIRES_SELECTED = 0x00000003,
    TIRES_DISABLED = 0x00000004,
    TIRES_FOCUSED  = 0x00000005,
}

alias TABITEMBOTHEDGESTATES = int;
enum : int
{
    TIBES_NORMAL   = 0x00000001,
    TIBES_HOT      = 0x00000002,
    TIBES_SELECTED = 0x00000003,
    TIBES_DISABLED = 0x00000004,
    TIBES_FOCUSED  = 0x00000005,
}

alias TOPTABITEMSTATES = int;
enum : int
{
    TTIS_NORMAL   = 0x00000001,
    TTIS_HOT      = 0x00000002,
    TTIS_SELECTED = 0x00000003,
    TTIS_DISABLED = 0x00000004,
    TTIS_FOCUSED  = 0x00000005,
}

alias TOPTABITEMLEFTEDGESTATES = int;
enum : int
{
    TTILES_NORMAL   = 0x00000001,
    TTILES_HOT      = 0x00000002,
    TTILES_SELECTED = 0x00000003,
    TTILES_DISABLED = 0x00000004,
    TTILES_FOCUSED  = 0x00000005,
}

alias TOPTABITEMRIGHTEDGESTATES = int;
enum : int
{
    TTIRES_NORMAL   = 0x00000001,
    TTIRES_HOT      = 0x00000002,
    TTIRES_SELECTED = 0x00000003,
    TTIRES_DISABLED = 0x00000004,
    TTIRES_FOCUSED  = 0x00000005,
}

alias TOPTABITEMBOTHEDGESTATES = int;
enum : int
{
    TTIBES_NORMAL   = 0x00000001,
    TTIBES_HOT      = 0x00000002,
    TTIBES_SELECTED = 0x00000003,
    TTIBES_DISABLED = 0x00000004,
    TTIBES_FOCUSED  = 0x00000005,
}

alias TASKDIALOGPARTS = int;
enum : int
{
    TDLG_PRIMARYPANEL        = 0x00000001,
    TDLG_MAININSTRUCTIONPANE = 0x00000002,
    TDLG_MAINICON            = 0x00000003,
    TDLG_CONTENTPANE         = 0x00000004,
    TDLG_CONTENTICON         = 0x00000005,
    TDLG_EXPANDEDCONTENT     = 0x00000006,
    TDLG_COMMANDLINKPANE     = 0x00000007,
    TDLG_SECONDARYPANEL      = 0x00000008,
    TDLG_CONTROLPANE         = 0x00000009,
    TDLG_BUTTONSECTION       = 0x0000000a,
    TDLG_BUTTONWRAPPER       = 0x0000000b,
    TDLG_EXPANDOTEXT         = 0x0000000c,
    TDLG_EXPANDOBUTTON       = 0x0000000d,
    TDLG_VERIFICATIONTEXT    = 0x0000000e,
    TDLG_FOOTNOTEPANE        = 0x0000000f,
    TDLG_FOOTNOTEAREA        = 0x00000010,
    TDLG_FOOTNOTESEPARATOR   = 0x00000011,
    TDLG_EXPANDEDFOOTERAREA  = 0x00000012,
    TDLG_PROGRESSBAR         = 0x00000013,
    TDLG_IMAGEALIGNMENT      = 0x00000014,
    TDLG_RADIOBUTTONPANE     = 0x00000015,
}

alias CONTENTPANESTATES = int;
enum : int
{
    TDLGCPS_STANDALONE = 0x00000001,
}

alias EXPANDOBUTTONSTATES = int;
enum : int
{
    TDLGEBS_NORMAL           = 0x00000001,
    TDLGEBS_HOVER            = 0x00000002,
    TDLGEBS_PRESSED          = 0x00000003,
    TDLGEBS_EXPANDEDNORMAL   = 0x00000004,
    TDLGEBS_EXPANDEDHOVER    = 0x00000005,
    TDLGEBS_EXPANDEDPRESSED  = 0x00000006,
    TDLGEBS_NORMALDISABLED   = 0x00000007,
    TDLGEBS_EXPANDEDDISABLED = 0x00000008,
}

alias TEXTSTYLEPARTS = int;
enum : int
{
    TEXT_MAININSTRUCTION = 0x00000001,
    TEXT_INSTRUCTION     = 0x00000002,
    TEXT_BODYTITLE       = 0x00000003,
    TEXT_BODYTEXT        = 0x00000004,
    TEXT_SECONDARYTEXT   = 0x00000005,
    TEXT_HYPERLINKTEXT   = 0x00000006,
    TEXT_EXPANDED        = 0x00000007,
    TEXT_LABEL           = 0x00000008,
    TEXT_CONTROLLABEL    = 0x00000009,
}

alias HYPERLINKTEXTSTATES = int;
enum : int
{
    TS_HYPERLINK_NORMAL   = 0x00000001,
    TS_HYPERLINK_HOT      = 0x00000002,
    TS_HYPERLINK_PRESSED  = 0x00000003,
    TS_HYPERLINK_DISABLED = 0x00000004,
}

alias CONTROLLABELSTATES = int;
enum : int
{
    TS_CONTROLLABEL_NORMAL   = 0x00000001,
    TS_CONTROLLABEL_DISABLED = 0x00000002,
}

alias TOOLBARPARTS = int;
enum : int
{
    TP_BUTTON              = 0x00000001,
    TP_DROPDOWNBUTTON      = 0x00000002,
    TP_SPLITBUTTON         = 0x00000003,
    TP_SPLITBUTTONDROPDOWN = 0x00000004,
    TP_SEPARATOR           = 0x00000005,
    TP_SEPARATORVERT       = 0x00000006,
    TP_DROPDOWNBUTTONGLYPH = 0x00000007,
}

alias TOOLBARSTYLESTATES = int;
enum : int
{
    TS_NORMAL       = 0x00000001,
    TS_HOT          = 0x00000002,
    TS_PRESSED      = 0x00000003,
    TS_DISABLED     = 0x00000004,
    TS_CHECKED      = 0x00000005,
    TS_HOTCHECKED   = 0x00000006,
    TS_NEARHOT      = 0x00000007,
    TS_OTHERSIDEHOT = 0x00000008,
}

alias TOOLTIPPARTS = int;
enum : int
{
    TTP_STANDARD      = 0x00000001,
    TTP_STANDARDTITLE = 0x00000002,
    TTP_BALLOON       = 0x00000003,
    TTP_BALLOONTITLE  = 0x00000004,
    TTP_CLOSE         = 0x00000005,
    TTP_BALLOONSTEM   = 0x00000006,
    TTP_WRENCH        = 0x00000007,
}

alias CLOSESTATES = int;
enum : int
{
    TTCS_NORMAL  = 0x00000001,
    TTCS_HOT     = 0x00000002,
    TTCS_PRESSED = 0x00000003,
}

alias STANDARDSTATES = int;
enum : int
{
    TTSS_NORMAL = 0x00000001,
    TTSS_LINK   = 0x00000002,
}

alias BALLOONSTATES = int;
enum : int
{
    TTBS_NORMAL = 0x00000001,
    TTBS_LINK   = 0x00000002,
}

alias BALLOONSTEMSTATES = int;
enum : int
{
    TTBSS_POINTINGUPLEFTWALL    = 0x00000001,
    TTBSS_POINTINGUPCENTERED    = 0x00000002,
    TTBSS_POINTINGUPRIGHTWALL   = 0x00000003,
    TTBSS_POINTINGDOWNRIGHTWALL = 0x00000004,
    TTBSS_POINTINGDOWNCENTERED  = 0x00000005,
    TTBSS_POINTINGDOWNLEFTWALL  = 0x00000006,
}

alias WRENCHSTATES = int;
enum : int
{
    TTWS_NORMAL  = 0x00000001,
    TTWS_HOT     = 0x00000002,
    TTWS_PRESSED = 0x00000003,
}

alias TRACKBARPARTS = int;
enum : int
{
    TKP_TRACK       = 0x00000001,
    TKP_TRACKVERT   = 0x00000002,
    TKP_THUMB       = 0x00000003,
    TKP_THUMBBOTTOM = 0x00000004,
    TKP_THUMBTOP    = 0x00000005,
    TKP_THUMBVERT   = 0x00000006,
    TKP_THUMBLEFT   = 0x00000007,
    TKP_THUMBRIGHT  = 0x00000008,
    TKP_TICS        = 0x00000009,
    TKP_TICSVERT    = 0x0000000a,
}

alias TRACKBARSTYLESTATES = int;
enum : int
{
    TKS_NORMAL = 0x00000001,
}

alias TRACKSTATES = int;
enum : int
{
    TRS_NORMAL = 0x00000001,
}

alias TRACKVERTSTATES = int;
enum : int
{
    TRVS_NORMAL = 0x00000001,
}

alias THUMBSTATES = int;
enum : int
{
    TUS_NORMAL   = 0x00000001,
    TUS_HOT      = 0x00000002,
    TUS_PRESSED  = 0x00000003,
    TUS_FOCUSED  = 0x00000004,
    TUS_DISABLED = 0x00000005,
}

alias THUMBBOTTOMSTATES = int;
enum : int
{
    TUBS_NORMAL   = 0x00000001,
    TUBS_HOT      = 0x00000002,
    TUBS_PRESSED  = 0x00000003,
    TUBS_FOCUSED  = 0x00000004,
    TUBS_DISABLED = 0x00000005,
}

alias THUMBTOPSTATES = int;
enum : int
{
    TUTS_NORMAL   = 0x00000001,
    TUTS_HOT      = 0x00000002,
    TUTS_PRESSED  = 0x00000003,
    TUTS_FOCUSED  = 0x00000004,
    TUTS_DISABLED = 0x00000005,
}

alias THUMBVERTSTATES = int;
enum : int
{
    TUVS_NORMAL   = 0x00000001,
    TUVS_HOT      = 0x00000002,
    TUVS_PRESSED  = 0x00000003,
    TUVS_FOCUSED  = 0x00000004,
    TUVS_DISABLED = 0x00000005,
}

alias THUMBLEFTSTATES = int;
enum : int
{
    TUVLS_NORMAL   = 0x00000001,
    TUVLS_HOT      = 0x00000002,
    TUVLS_PRESSED  = 0x00000003,
    TUVLS_FOCUSED  = 0x00000004,
    TUVLS_DISABLED = 0x00000005,
}

alias THUMBRIGHTSTATES = int;
enum : int
{
    TUVRS_NORMAL   = 0x00000001,
    TUVRS_HOT      = 0x00000002,
    TUVRS_PRESSED  = 0x00000003,
    TUVRS_FOCUSED  = 0x00000004,
    TUVRS_DISABLED = 0x00000005,
}

alias TICSSTATES = int;
enum : int
{
    TSS_NORMAL = 0x00000001,
}

alias TICSVERTSTATES = int;
enum : int
{
    TSVS_NORMAL = 0x00000001,
}

alias TREEVIEWPARTS = int;
enum : int
{
    TVP_TREEITEM = 0x00000001,
    TVP_GLYPH    = 0x00000002,
    TVP_BRANCH   = 0x00000003,
    TVP_HOTGLYPH = 0x00000004,
}

alias TREEITEMSTATES = int;
enum : int
{
    TREIS_NORMAL           = 0x00000001,
    TREIS_HOT              = 0x00000002,
    TREIS_SELECTED         = 0x00000003,
    TREIS_DISABLED         = 0x00000004,
    TREIS_SELECTEDNOTFOCUS = 0x00000005,
    TREIS_HOTSELECTED      = 0x00000006,
}

alias GLYPHSTATES = int;
enum : int
{
    GLPS_CLOSED = 0x00000001,
    GLPS_OPENED = 0x00000002,
}

alias HOTGLYPHSTATES = int;
enum : int
{
    HGLPS_CLOSED = 0x00000001,
    HGLPS_OPENED = 0x00000002,
}

alias USERTILEPARTS = int;
enum : int
{
    UTP_STROKEBACKGROUND = 0x00000001,
    UTP_HOVERBACKGROUND  = 0x00000002,
}

alias HOVERBACKGROUNDSTATES = int;
enum : int
{
    UTS_NORMAL  = 0x00000001,
    UTS_HOT     = 0x00000002,
    UTS_PRESSED = 0x00000003,
}

alias TEXTSELECTIONGRIPPERPARTS = int;
enum : int
{
    TSGP_GRIPPER = 0x00000001,
}

alias GRIPPERSTATES = int;
enum : int
{
    TSGS_NORMAL   = 0x00000001,
    TSGS_CENTERED = 0x00000002,
}

alias WINDOWPARTS = int;
enum : int
{
    WP_CAPTION                        = 0x00000001,
    WP_SMALLCAPTION                   = 0x00000002,
    WP_MINCAPTION                     = 0x00000003,
    WP_SMALLMINCAPTION                = 0x00000004,
    WP_MAXCAPTION                     = 0x00000005,
    WP_SMALLMAXCAPTION                = 0x00000006,
    WP_FRAMELEFT                      = 0x00000007,
    WP_FRAMERIGHT                     = 0x00000008,
    WP_FRAMEBOTTOM                    = 0x00000009,
    WP_SMALLFRAMELEFT                 = 0x0000000a,
    WP_SMALLFRAMERIGHT                = 0x0000000b,
    WP_SMALLFRAMEBOTTOM               = 0x0000000c,
    WP_SYSBUTTON                      = 0x0000000d,
    WP_MDISYSBUTTON                   = 0x0000000e,
    WP_MINBUTTON                      = 0x0000000f,
    WP_MDIMINBUTTON                   = 0x00000010,
    WP_MAXBUTTON                      = 0x00000011,
    WP_CLOSEBUTTON                    = 0x00000012,
    WP_SMALLCLOSEBUTTON               = 0x00000013,
    WP_MDICLOSEBUTTON                 = 0x00000014,
    WP_RESTOREBUTTON                  = 0x00000015,
    WP_MDIRESTOREBUTTON               = 0x00000016,
    WP_HELPBUTTON                     = 0x00000017,
    WP_MDIHELPBUTTON                  = 0x00000018,
    WP_HORZSCROLL                     = 0x00000019,
    WP_HORZTHUMB                      = 0x0000001a,
    WP_VERTSCROLL                     = 0x0000001b,
    WP_VERTTHUMB                      = 0x0000001c,
    WP_DIALOG                         = 0x0000001d,
    WP_CAPTIONSIZINGTEMPLATE          = 0x0000001e,
    WP_SMALLCAPTIONSIZINGTEMPLATE     = 0x0000001f,
    WP_FRAMELEFTSIZINGTEMPLATE        = 0x00000020,
    WP_SMALLFRAMELEFTSIZINGTEMPLATE   = 0x00000021,
    WP_FRAMERIGHTSIZINGTEMPLATE       = 0x00000022,
    WP_SMALLFRAMERIGHTSIZINGTEMPLATE  = 0x00000023,
    WP_FRAMEBOTTOMSIZINGTEMPLATE      = 0x00000024,
    WP_SMALLFRAMEBOTTOMSIZINGTEMPLATE = 0x00000025,
    WP_FRAME                          = 0x00000026,
    WP_BORDER                         = 0x00000027,
}

alias FRAMESTATES = int;
enum : int
{
    FS_ACTIVE   = 0x00000001,
    FS_INACTIVE = 0x00000002,
}

alias CAPTIONSTATES = int;
enum : int
{
    CS_ACTIVE   = 0x00000001,
    CS_INACTIVE = 0x00000002,
    CS_DISABLED = 0x00000003,
}

alias MAXCAPTIONSTATES = int;
enum : int
{
    MXCS_ACTIVE   = 0x00000001,
    MXCS_INACTIVE = 0x00000002,
    MXCS_DISABLED = 0x00000003,
}

alias MINCAPTIONSTATES = int;
enum : int
{
    MNCS_ACTIVE   = 0x00000001,
    MNCS_INACTIVE = 0x00000002,
    MNCS_DISABLED = 0x00000003,
}

alias HORZSCROLLSTATES = int;
enum : int
{
    HSS_NORMAL   = 0x00000001,
    HSS_HOT      = 0x00000002,
    HSS_PUSHED   = 0x00000003,
    HSS_DISABLED = 0x00000004,
}

alias HORZTHUMBSTATES = int;
enum : int
{
    HTS_NORMAL   = 0x00000001,
    HTS_HOT      = 0x00000002,
    HTS_PUSHED   = 0x00000003,
    HTS_DISABLED = 0x00000004,
}

alias VERTSCROLLSTATES = int;
enum : int
{
    VSS_NORMAL   = 0x00000001,
    VSS_HOT      = 0x00000002,
    VSS_PUSHED   = 0x00000003,
    VSS_DISABLED = 0x00000004,
}

alias VERTTHUMBSTATES = int;
enum : int
{
    VTS_NORMAL   = 0x00000001,
    VTS_HOT      = 0x00000002,
    VTS_PUSHED   = 0x00000003,
    VTS_DISABLED = 0x00000004,
}

alias SYSBUTTONSTATES = int;
enum : int
{
    SBS_NORMAL   = 0x00000001,
    SBS_HOT      = 0x00000002,
    SBS_PUSHED   = 0x00000003,
    SBS_DISABLED = 0x00000004,
}

alias MINBUTTONSTATES = int;
enum : int
{
    MINBS_NORMAL   = 0x00000001,
    MINBS_HOT      = 0x00000002,
    MINBS_PUSHED   = 0x00000003,
    MINBS_DISABLED = 0x00000004,
}

alias MAXBUTTONSTATES = int;
enum : int
{
    MAXBS_NORMAL   = 0x00000001,
    MAXBS_HOT      = 0x00000002,
    MAXBS_PUSHED   = 0x00000003,
    MAXBS_DISABLED = 0x00000004,
}

alias RESTOREBUTTONSTATES = int;
enum : int
{
    RBS_NORMAL   = 0x00000001,
    RBS_HOT      = 0x00000002,
    RBS_PUSHED   = 0x00000003,
    RBS_DISABLED = 0x00000004,
}

alias HELPBUTTONSTATES = int;
enum : int
{
    HBS_NORMAL   = 0x00000001,
    HBS_HOT      = 0x00000002,
    HBS_PUSHED   = 0x00000003,
    HBS_DISABLED = 0x00000004,
}

alias CLOSEBUTTONSTATES = int;
enum : int
{
    CBS_NORMAL   = 0x00000001,
    CBS_HOT      = 0x00000002,
    CBS_PUSHED   = 0x00000003,
    CBS_DISABLED = 0x00000004,
}

alias SMALLCLOSEBUTTONSTATES = int;
enum : int
{
    SCBS_NORMAL   = 0x00000001,
    SCBS_HOT      = 0x00000002,
    SCBS_PUSHED   = 0x00000003,
    SCBS_DISABLED = 0x00000004,
}

alias FRAMEBOTTOMSTATES = int;
enum : int
{
    FRB_ACTIVE   = 0x00000001,
    FRB_INACTIVE = 0x00000002,
}

alias FRAMELEFTSTATES = int;
enum : int
{
    FRL_ACTIVE   = 0x00000001,
    FRL_INACTIVE = 0x00000002,
}

alias FRAMERIGHTSTATES = int;
enum : int
{
    FRR_ACTIVE   = 0x00000001,
    FRR_INACTIVE = 0x00000002,
}

alias SMALLCAPTIONSTATES = int;
enum : int
{
    SCS_ACTIVE   = 0x00000001,
    SCS_INACTIVE = 0x00000002,
    SCS_DISABLED = 0x00000003,
}

alias SMALLFRAMEBOTTOMSTATES = int;
enum : int
{
    SFRB_ACTIVE   = 0x00000001,
    SFRB_INACTIVE = 0x00000002,
}

alias SMALLFRAMELEFTSTATES = int;
enum : int
{
    SFRL_ACTIVE   = 0x00000001,
    SFRL_INACTIVE = 0x00000002,
}

alias SMALLFRAMERIGHTSTATES = int;
enum : int
{
    SFRR_ACTIVE   = 0x00000001,
    SFRR_INACTIVE = 0x00000002,
}

alias MDICLOSEBUTTONSTATES = int;
enum : int
{
    MDCL_NORMAL   = 0x00000001,
    MDCL_HOT      = 0x00000002,
    MDCL_PUSHED   = 0x00000003,
    MDCL_DISABLED = 0x00000004,
}

alias MDIMINBUTTONSTATES = int;
enum : int
{
    MDMI_NORMAL   = 0x00000001,
    MDMI_HOT      = 0x00000002,
    MDMI_PUSHED   = 0x00000003,
    MDMI_DISABLED = 0x00000004,
}

alias MDIRESTOREBUTTONSTATES = int;
enum : int
{
    MDRE_NORMAL   = 0x00000001,
    MDRE_HOT      = 0x00000002,
    MDRE_PUSHED   = 0x00000003,
    MDRE_DISABLED = 0x00000004,
}

alias BGTYPE = int;
enum : int
{
    BT_IMAGEFILE  = 0x00000000,
    BT_BORDERFILL = 0x00000001,
    BT_NONE       = 0x00000002,
}

alias IMAGELAYOUT = int;
enum : int
{
    IL_VERTICAL   = 0x00000000,
    IL_HORIZONTAL = 0x00000001,
}

alias BORDERTYPE = int;
enum : int
{
    BT_RECT      = 0x00000000,
    BT_ROUNDRECT = 0x00000001,
    BT_ELLIPSE   = 0x00000002,
}

alias FILLTYPE = int;
enum : int
{
    FT_SOLID          = 0x00000000,
    FT_VERTGRADIENT   = 0x00000001,
    FT_HORZGRADIENT   = 0x00000002,
    FT_RADIALGRADIENT = 0x00000003,
    FT_TILEIMAGE      = 0x00000004,
}

alias SIZINGTYPE = int;
enum : int
{
    ST_TRUESIZE = 0x00000000,
    ST_STRETCH  = 0x00000001,
    ST_TILE     = 0x00000002,
}

alias HALIGN = int;
enum : int
{
    HA_LEFT   = 0x00000000,
    HA_CENTER = 0x00000001,
    HA_RIGHT  = 0x00000002,
}

alias CONTENTALIGNMENT = int;
enum : int
{
    CA_LEFT   = 0x00000000,
    CA_CENTER = 0x00000001,
    CA_RIGHT  = 0x00000002,
}

alias VALIGN = int;
enum : int
{
    VA_TOP    = 0x00000000,
    VA_CENTER = 0x00000001,
    VA_BOTTOM = 0x00000002,
}

alias OFFSETTYPE = int;
enum : int
{
    OT_TOPLEFT           = 0x00000000,
    OT_TOPRIGHT          = 0x00000001,
    OT_TOPMIDDLE         = 0x00000002,
    OT_BOTTOMLEFT        = 0x00000003,
    OT_BOTTOMRIGHT       = 0x00000004,
    OT_BOTTOMMIDDLE      = 0x00000005,
    OT_MIDDLELEFT        = 0x00000006,
    OT_MIDDLERIGHT       = 0x00000007,
    OT_LEFTOFCAPTION     = 0x00000008,
    OT_RIGHTOFCAPTION    = 0x00000009,
    OT_LEFTOFLASTBUTTON  = 0x0000000a,
    OT_RIGHTOFLASTBUTTON = 0x0000000b,
    OT_ABOVELASTBUTTON   = 0x0000000c,
    OT_BELOWLASTBUTTON   = 0x0000000d,
}

alias ICONEFFECT = int;
enum : int
{
    ICE_NONE   = 0x00000000,
    ICE_GLOW   = 0x00000001,
    ICE_SHADOW = 0x00000002,
    ICE_PULSE  = 0x00000003,
    ICE_ALPHA  = 0x00000004,
}

alias TEXTSHADOWTYPE = int;
enum : int
{
    TST_NONE       = 0x00000000,
    TST_SINGLE     = 0x00000001,
    TST_CONTINUOUS = 0x00000002,
}

alias GLYPHTYPE = int;
enum : int
{
    GT_NONE       = 0x00000000,
    GT_IMAGEGLYPH = 0x00000001,
    GT_FONTGLYPH  = 0x00000002,
}

alias IMAGESELECTTYPE = int;
enum : int
{
    IST_NONE = 0x00000000,
    IST_SIZE = 0x00000001,
    IST_DPI  = 0x00000002,
}

alias TRUESIZESCALINGTYPE = int;
enum : int
{
    TSST_NONE = 0x00000000,
    TSST_SIZE = 0x00000001,
    TSST_DPI  = 0x00000002,
}

alias GLYPHFONTSIZINGTYPE = int;
enum : int
{
    GFST_NONE = 0x00000000,
    GFST_SIZE = 0x00000001,
    GFST_DPI  = 0x00000002,
}

alias LINKPARTS = int;
enum : int
{
    LP_HYPERLINK = 0x00000001,
}

alias HYPERLINKSTATES = int;
enum : int
{
    HLS_NORMALTEXT = 0x00000001,
    HLS_LINKTEXT   = 0x00000002,
}

alias EMPTYMARKUPPARTS = int;
enum : int
{
    EMP_MARKUPTEXT = 0x00000001,
}

alias MARKUPTEXTSTATES = int;
enum : int
{
    EMT_NORMALTEXT = 0x00000001,
    EMT_LINKTEXT   = 0x00000002,
}

alias STATICPARTS = int;
enum : int
{
    STAT_TEXT = 0x00000001,
}

alias PAGEPARTS = int;
enum : int
{
    PGRP_UP       = 0x00000001,
    PGRP_DOWN     = 0x00000002,
    PGRP_UPHORZ   = 0x00000003,
    PGRP_DOWNHORZ = 0x00000004,
}

alias MONTHCALPARTS = int;
enum : int
{
    MC_BACKGROUND            = 0x00000001,
    MC_BORDERS               = 0x00000002,
    MC_GRIDBACKGROUND        = 0x00000003,
    MC_COLHEADERSPLITTER     = 0x00000004,
    MC_GRIDCELLBACKGROUND    = 0x00000005,
    MC_GRIDCELL              = 0x00000006,
    MC_GRIDCELLUPPER         = 0x00000007,
    MC_TRAILINGGRIDCELL      = 0x00000008,
    MC_TRAILINGGRIDCELLUPPER = 0x00000009,
    MC_NAVNEXT               = 0x0000000a,
    MC_NAVPREV               = 0x0000000b,
}

alias GRIDCELLBACKGROUNDSTATES = int;
enum : int
{
    MCGCB_SELECTED           = 0x00000001,
    MCGCB_HOT                = 0x00000002,
    MCGCB_SELECTEDHOT        = 0x00000003,
    MCGCB_SELECTEDNOTFOCUSED = 0x00000004,
    MCGCB_TODAY              = 0x00000005,
    MCGCB_TODAYSELECTED      = 0x00000006,
}

alias GRIDCELLSTATES = int;
enum : int
{
    MCGC_HOT           = 0x00000001,
    MCGC_HASSTATE      = 0x00000002,
    MCGC_HASSTATEHOT   = 0x00000003,
    MCGC_TODAY         = 0x00000004,
    MCGC_TODAYSELECTED = 0x00000005,
    MCGC_SELECTED      = 0x00000006,
    MCGC_SELECTEDHOT   = 0x00000007,
}

alias GRIDCELLUPPERSTATES = int;
enum : int
{
    MCGCU_HOT         = 0x00000001,
    MCGCU_HASSTATE    = 0x00000002,
    MCGCU_HASSTATEHOT = 0x00000003,
    MCGCU_SELECTED    = 0x00000004,
    MCGCU_SELECTEDHOT = 0x00000005,
}

alias TRAILINGGRIDCELLSTATES = int;
enum : int
{
    MCTGC_HOT           = 0x00000001,
    MCTGC_HASSTATE      = 0x00000002,
    MCTGC_HASSTATEHOT   = 0x00000003,
    MCTGC_TODAY         = 0x00000004,
    MCTGC_TODAYSELECTED = 0x00000005,
    MCTGC_SELECTED      = 0x00000006,
    MCTGC_SELECTEDHOT   = 0x00000007,
}

alias TRAILINGGRIDCELLUPPERSTATES = int;
enum : int
{
    MCTGCU_HOT         = 0x00000001,
    MCTGCU_HASSTATE    = 0x00000002,
    MCTGCU_HASSTATEHOT = 0x00000003,
    MCTGCU_SELECTED    = 0x00000004,
    MCTGCU_SELECTEDHOT = 0x00000005,
}

alias NAVNEXTSTATES = int;
enum : int
{
    MCNN_NORMAL   = 0x00000001,
    MCNN_HOT      = 0x00000002,
    MCNN_PRESSED  = 0x00000003,
    MCNN_DISABLED = 0x00000004,
}

alias NAVPREVSTATES = int;
enum : int
{
    MCNP_NORMAL   = 0x00000001,
    MCNP_HOT      = 0x00000002,
    MCNP_PRESSED  = 0x00000003,
    MCNP_DISABLED = 0x00000004,
}

alias CLOCKPARTS = int;
enum : int
{
    CLP_TIME = 0x00000001,
}

alias CLOCKSTATES = int;
enum : int
{
    CLS_NORMAL  = 0x00000001,
    CLS_HOT     = 0x00000002,
    CLS_PRESSED = 0x00000003,
}

alias TRAYNOTIFYPARTS = int;
enum : int
{
    TNP_BACKGROUND     = 0x00000001,
    TNP_ANIMBACKGROUND = 0x00000002,
}

alias TASKBARPARTS = int;
enum : int
{
    TBP_BACKGROUNDBOTTOM = 0x00000001,
    TBP_BACKGROUNDRIGHT  = 0x00000002,
    TBP_BACKGROUNDTOP    = 0x00000003,
    TBP_BACKGROUNDLEFT   = 0x00000004,
    TBP_SIZINGBARBOTTOM  = 0x00000005,
    TBP_SIZINGBARRIGHT   = 0x00000006,
    TBP_SIZINGBARTOP     = 0x00000007,
    TBP_SIZINGBARLEFT    = 0x00000008,
}

alias TASKBANDPARTS = int;
enum : int
{
    TDP_GROUPCOUNT           = 0x00000001,
    TDP_FLASHBUTTON          = 0x00000002,
    TDP_FLASHBUTTONGROUPMENU = 0x00000003,
}

alias STARTPANELPARTS = int;
enum : int
{
    SPP_USERPANE                  = 0x00000001,
    SPP_MOREPROGRAMS              = 0x00000002,
    SPP_MOREPROGRAMSARROW         = 0x00000003,
    SPP_PROGLIST                  = 0x00000004,
    SPP_PROGLISTSEPARATOR         = 0x00000005,
    SPP_PLACESLIST                = 0x00000006,
    SPP_PLACESLISTSEPARATOR       = 0x00000007,
    SPP_LOGOFF                    = 0x00000008,
    SPP_LOGOFFBUTTONS             = 0x00000009,
    SPP_USERPICTURE               = 0x0000000a,
    SPP_PREVIEW                   = 0x0000000b,
    SPP_MOREPROGRAMSTAB           = 0x0000000c,
    SPP_NSCHOST                   = 0x0000000d,
    SPP_SOFTWAREEXPLORER          = 0x0000000e,
    SPP_OPENBOX                   = 0x0000000f,
    SPP_SEARCHVIEW                = 0x00000010,
    SPP_MOREPROGRAMSARROWBACK     = 0x00000011,
    SPP_TOPMATCH                  = 0x00000012,
    SPP_LOGOFFSPLITBUTTONDROPDOWN = 0x00000013,
}

alias MOREPROGRAMSTABSTATES = int;
enum : int
{
    SPMPT_NORMAL   = 0x00000001,
    SPMPT_HOT      = 0x00000002,
    SPMPT_SELECTED = 0x00000003,
    SPMPT_DISABLED = 0x00000004,
    SPMPT_FOCUSED  = 0x00000005,
}

alias SOFTWAREEXPLORERSTATES = int;
enum : int
{
    SPSE_NORMAL   = 0x00000001,
    SPSE_HOT      = 0x00000002,
    SPSE_SELECTED = 0x00000003,
    SPSE_DISABLED = 0x00000004,
    SPSE_FOCUSED  = 0x00000005,
}

alias OPENBOXSTATES = int;
enum : int
{
    SPOB_NORMAL   = 0x00000001,
    SPOB_HOT      = 0x00000002,
    SPOB_SELECTED = 0x00000003,
    SPOB_DISABLED = 0x00000004,
    SPOB_FOCUSED  = 0x00000005,
}

alias MOREPROGRAMSARROWSTATES = int;
enum : int
{
    SPS_NORMAL  = 0x00000001,
    SPS_HOT     = 0x00000002,
    SPS_PRESSED = 0x00000003,
}

alias MOREPROGRAMSARROWBACKSTATES = int;
enum : int
{
    SPSB_NORMAL  = 0x00000001,
    SPSB_HOT     = 0x00000002,
    SPSB_PRESSED = 0x00000003,
}

alias LOGOFFBUTTONSSTATES = int;
enum : int
{
    SPLS_NORMAL  = 0x00000001,
    SPLS_HOT     = 0x00000002,
    SPLS_PRESSED = 0x00000003,
}

alias MENUBANDPARTS = int;
enum : int
{
    MDP_NEWAPPBUTTON = 0x00000001,
    MDP_SEPERATOR    = 0x00000002,
}

alias MENUBANDSTATES = int;
enum : int
{
    MDS_NORMAL     = 0x00000001,
    MDS_HOT        = 0x00000002,
    MDS_PRESSED    = 0x00000003,
    MDS_DISABLED   = 0x00000004,
    MDS_CHECKED    = 0x00000005,
    MDS_HOTCHECKED = 0x00000006,
}

struct CCSTYLEA
{
    uint flStyle;
    uint flExtStyle;
    CHAR[256] szText;
    ushort lgid;
    ushort wReserved1;
}
struct CCSTYLEW
{
    uint flStyle;
    uint flExtStyle;
    wchar[256] szText;
    ushort lgid;
    ushort wReserved1;
}
alias LPFNCCSTYLEA = BOOL function(HWND, CCSTYLEA*);
alias LPFNCCSTYLEW = BOOL function(HWND, CCSTYLEW*);
alias LPFNCCSIZETOTEXTA = int function(uint, uint, HFONT, PSTR);
alias LPFNCCSIZETOTEXTW = int function(uint, uint, HFONT, PWSTR);
struct CCSTYLEFLAGA
{
    uint flStyle;
    uint flStyleMask;
    PSTR pszStyle;
}
struct CCSTYLEFLAGW
{
    uint flStyle;
    uint flStyleMask;
    PWSTR pszStyle;
}
struct CCINFOA
{
    CHAR[32] szClass;
    uint flOptions;
    CHAR[32] szDesc;
    uint cxDefault;
    uint cyDefault;
    uint flStyleDefault;
    uint flExtStyleDefault;
    uint flCtrlTypeMask;
    CHAR[256] szTextDefault;
    int cStyleFlags;
    CCSTYLEFLAGA* aStyleFlags;
    LPFNCCSTYLEA lpfnStyle;
    LPFNCCSIZETOTEXTA lpfnSizeToText;
    uint dwReserved1;
    uint dwReserved2;
}
struct CCINFOW
{
    wchar[32] szClass;
    uint flOptions;
    wchar[32] szDesc;
    uint cxDefault;
    uint cyDefault;
    uint flStyleDefault;
    uint flExtStyleDefault;
    uint flCtrlTypeMask;
    int cStyleFlags;
    CCSTYLEFLAGW* aStyleFlags;
    wchar[256] szTextDefault;
    LPFNCCSTYLEW lpfnStyle;
    LPFNCCSIZETOTEXTW lpfnSizeToText;
    uint dwReserved1;
    uint dwReserved2;
}
alias LPFNCCINFOA = uint function(CCINFOA*);
alias LPFNCCINFOW = uint function(CCINFOW*);
alias EDITWORDBREAKPROCA = int function(PSTR, int, int, WORD_BREAK_ACTION);
alias EDITWORDBREAKPROCW = int function(PWSTR, int, int, WORD_BREAK_ACTION);
struct NMHDR
{
    HWND hwndFrom;
    ulong idFrom;
    uint code;
}
struct MEASUREITEMSTRUCT
{
    DRAWITEMSTRUCT_CTL_TYPE CtlType;
    uint CtlID;
    uint itemID;
    uint itemWidth;
    uint itemHeight;
    ulong itemData;
}
struct DRAWITEMSTRUCT
{
    DRAWITEMSTRUCT_CTL_TYPE CtlType;
    uint CtlID;
    uint itemID;
    ODA_FLAGS itemAction;
    ODS_FLAGS itemState;
    HWND hwndItem;
    HDC hDC;
    RECT rcItem;
    ulong itemData;
}
struct DELETEITEMSTRUCT
{
    DRAWITEMSTRUCT_CTL_TYPE CtlType;
    uint CtlID;
    uint itemID;
    HWND hwndItem;
    ulong itemData;
}
struct COMPAREITEMSTRUCT
{
    DRAWITEMSTRUCT_CTL_TYPE CtlType;
    uint CtlID;
    HWND hwndItem;
    uint itemID1;
    ulong itemData1;
    uint itemID2;
    ulong itemData2;
    uint dwLocaleId;
}
alias POINTER_FEEDBACK_MODE = int;
enum : int
{
    POINTER_FEEDBACK_DEFAULT  = 0x00000001,
    POINTER_FEEDBACK_INDIRECT = 0x00000002,
    POINTER_FEEDBACK_NONE     = 0x00000003,
}

struct USAGE_PROPERTIES
{
    ushort level;
    ushort page;
    ushort usage;
    int logicalMinimum;
    int logicalMaximum;
    ushort unit;
    ushort exponent;
    ubyte count;
    int physicalMinimum;
    int physicalMaximum;
}
struct POINTER_TYPE_INFO
{
    POINTER_INPUT_TYPE type;
    union
    {
        POINTER_TOUCH_INFO touchInfo;
        POINTER_PEN_INFO penInfo;
    }
}
struct TOUCH_HIT_TESTING_PROXIMITY_EVALUATION
{
    ushort score;
    POINT adjustedPoint;
}
struct TOUCH_HIT_TESTING_INPUT
{
    uint pointerId;
    POINT point;
    RECT boundingBox;
    RECT nonOccludedBoundingBox;
    uint orientation;
}
alias FEEDBACK_TYPE = int;
enum : int
{
    FEEDBACK_TOUCH_CONTACTVISUALIZATION = 0x00000001,
    FEEDBACK_PEN_BARRELVISUALIZATION    = 0x00000002,
    FEEDBACK_PEN_TAP                    = 0x00000003,
    FEEDBACK_PEN_DOUBLETAP              = 0x00000004,
    FEEDBACK_PEN_PRESSANDHOLD           = 0x00000005,
    FEEDBACK_PEN_RIGHTTAP               = 0x00000006,
    FEEDBACK_TOUCH_TAP                  = 0x00000007,
    FEEDBACK_TOUCH_DOUBLETAP            = 0x00000008,
    FEEDBACK_TOUCH_PRESSANDHOLD         = 0x00000009,
    FEEDBACK_TOUCH_RIGHTTAP             = 0x0000000a,
    FEEDBACK_GESTURE_PRESSANDTAP        = 0x0000000b,
    FEEDBACK_MAX                        = 0xffffffff,
}

struct COMBOBOXINFO
{
    uint cbSize;
    RECT rcItem;
    RECT rcButton;
    COMBOBOXINFO_BUTTON_STATE stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
}
alias POINTER_DEVICE_TYPE = int;
enum : int
{
    POINTER_DEVICE_TYPE_INTEGRATED_PEN = 0x00000001,
    POINTER_DEVICE_TYPE_EXTERNAL_PEN   = 0x00000002,
    POINTER_DEVICE_TYPE_TOUCH          = 0x00000003,
    POINTER_DEVICE_TYPE_TOUCH_PAD      = 0x00000004,
    POINTER_DEVICE_TYPE_MAX            = 0xffffffff,
}

struct POINTER_DEVICE_INFO
{
    uint displayOrientation;
    HANDLE device;
    POINTER_DEVICE_TYPE pointerDeviceType;
    HMONITOR monitor;
    uint startingCursorId;
    ushort maxActiveContacts;
    wchar[520] productString;
}
struct POINTER_DEVICE_PROPERTY
{
    int logicalMin;
    int logicalMax;
    int physicalMin;
    int physicalMax;
    uint unit;
    uint unitExponent;
    ushort usagePageId;
    ushort usageId;
}
alias POINTER_DEVICE_CURSOR_TYPE = int;
enum : int
{
    POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = 0x00000000,
    POINTER_DEVICE_CURSOR_TYPE_TIP     = 0x00000001,
    POINTER_DEVICE_CURSOR_TYPE_ERASER  = 0x00000002,
    POINTER_DEVICE_CURSOR_TYPE_MAX     = 0xffffffff,
}

struct POINTER_DEVICE_CURSOR_INFO
{
    uint cursorId;
    POINTER_DEVICE_CURSOR_TYPE cursor;
}
