module windows.win32.media.mediaplayer;

import windows.win32.guid : GUID;
import windows.win32.foundation : BOOL, BSTR, HRESULT, HWND, LPARAM, LRESULT, PWSTR, RECT, SIZE, SYSTEMTIME, WPARAM;
import windows.win32.graphics.gdi : HDC;
import windows.win32.media.mediafoundation : IMFActivate;
import windows.win32.system.com_ : BLOB, IDispatch, IStream, IUnknown, VARIANT;
import windows.win32.system.ole : IEnumVARIANT;
import windows.win32.ui.windowsandmessaging : MSG;

version (Windows):
extern (Windows):

enum CLSID_XFeedsManager = GUID(0xfe6b11c3, 0xc72e, 0x4061, [0x86, 0xc6, 0x9d, 0x16, 0x31, 0x21, 0xf2, 0x29]);
enum WMPGC_FLAGS_ALLOW_PREROLL = 0x00000001;
enum WMPGC_FLAGS_SUPPRESS_DIALOGS = 0x00000002;
enum WMPGC_FLAGS_IGNORE_AV_SYNC = 0x00000004;
enum WMPGC_FLAGS_DISABLE_PLUGINS = 0x00000008;
enum WMPGC_FLAGS_USE_CUSTOM_GRAPH = 0x00000010;
enum WMPUE_EC_USER = 0x00008100;
enum WMP_MDRT_FLAGS_UNREPORTED_DELETED_ITEMS = 0x00000001;
enum WMP_MDRT_FLAGS_UNREPORTED_ADDED_ITEMS = 0x00000002;
enum IOCTL_WMP_METADATA_ROUND_TRIP = 0x31504d57;
enum IOCTL_WMP_DEVICE_CAN_SYNC = 0x32504d57;
enum EFFECT_CANGOFULLSCREEN = 0x00000001;
enum EFFECT_HASPROPERTYPAGE = 0x00000002;
enum EFFECT_VARIABLEFREQSTEP = 0x00000004;
enum EFFECT_WINDOWEDONLY = 0x00000008;
enum EFFECT2_FULLSCREENEXCLUSIVE = 0x00000010;
enum SA_BUFFER_SIZE = 0x00000400;
enum PLUGIN_INSTALLREGKEY = "Software\\Microsoft\\MediaPlayer\\UIPlugins";
enum PLUGIN_INSTALLREGKEY_FRIENDLYNAME = "FriendlyName";
enum PLUGIN_INSTALLREGKEY_DESCRIPTION = "Description";
enum PLUGIN_INSTALLREGKEY_CAPABILITIES = "Capabilities";
enum PLUGIN_INSTALLREGKEY_UNINSTALL = "UninstallPath";
enum PLUGIN_TYPE_BACKGROUND = 0x00000001;
enum PLUGIN_TYPE_SEPARATEWINDOW = 0x00000002;
enum PLUGIN_TYPE_DISPLAYAREA = 0x00000003;
enum PLUGIN_TYPE_SETTINGSAREA = 0x00000004;
enum PLUGIN_TYPE_METADATAAREA = 0x00000005;
enum PLUGIN_FLAGS_HASPROPERTYPAGE = 0x80000000;
enum PLUGIN_FLAGS_INSTALLAUTORUN = 0x40000000;
enum PLUGIN_FLAGS_LAUNCHPROPERTYPAGE = 0x20000000;
enum PLUGIN_FLAGS_ACCEPTSMEDIA = 0x10000000;
enum PLUGIN_FLAGS_ACCEPTSPLAYLISTS = 0x08000000;
enum PLUGIN_FLAGS_HASPRESETS = 0x04000000;
enum PLUGIN_FLAGS_HIDDEN = 0x02000000;
enum PLUGIN_MISC_PRESETCOUNT = "PresetCount";
enum PLUGIN_MISC_PRESETNAMES = "PresetNames";
enum PLUGIN_MISC_CURRENTPRESET = "CurrentPreset";
enum PLUGIN_SEPARATEWINDOW_RESIZABLE = "Resizable";
enum PLUGIN_SEPARATEWINDOW_DEFAULTWIDTH = "DefaultWidth";
enum PLUGIN_SEPARATEWINDOW_DEFAULTHEIGHT = "DefaultHeight";
enum PLUGIN_SEPARATEWINDOW_MINWIDTH = "MinWidth";
enum PLUGIN_SEPARATEWINDOW_MINHEIGHT = "MinHeight";
enum PLUGIN_SEPARATEWINDOW_MAXWIDTH = "MaxWidth";
enum PLUGIN_SEPARATEWINDOW_MAXHEIGHT = "MaxHeight";
enum PLUGIN_MISC_QUERYDESTROY = "QueryDestroy";
enum PLUGIN_ALL_MEDIASENDTO = "MediaSendTo";
enum PLUGIN_ALL_PLAYLISTSENDTO = "PlaylistSendTo";
enum SUBSCRIPTION_CAP_DEVICEAVAILABLE = 0x00000010;
enum SUBSCRIPTION_CAP_BACKGROUNDPROCESSING = 0x00000008;
enum SUBSCRIPTION_CAP_IS_CONTENTPARTNER = 0x00000040;
enum SUBSCRIPTION_CAP_ALTLOGIN = 0x00000080;
enum SUBSCRIPTION_CAP_ALLOWPLAY = 0x00000001;
enum SUBSCRIPTION_CAP_ALLOWCDBURN = 0x00000002;
enum SUBSCRIPTION_CAP_ALLOWPDATRANSFER = 0x00000004;
enum SUBSCRIPTION_CAP_PREPAREFORSYNC = 0x00000020;
enum SUBSCRIPTION_V1_CAPS = 0x0000000f;
enum SUBSCRIPTION_CAP_UILESSMODE_ALLOWPLAY = 0x00000100;
enum WMP_SUBSCR_DL_TYPE_BACKGROUND = "background";
enum WMP_SUBSCR_DL_TYPE_REALTIME = "real time";
enum DISPID_FEEDS_RootFolder = 0x00001000;
enum DISPID_FEEDS_IsSubscribed = 0x00001001;
enum DISPID_FEEDS_ExistsFeed = 0x00001002;
enum DISPID_FEEDS_GetFeed = 0x00001003;
enum DISPID_FEEDS_ExistsFolder = 0x00001004;
enum DISPID_FEEDS_GetFolder = 0x00001005;
enum DISPID_FEEDS_DeleteFeed = 0x00001006;
enum DISPID_FEEDS_DeleteFolder = 0x00001007;
enum DISPID_FEEDS_GetFeedByUrl = 0x00001008;
enum DISPID_FEEDS_BackgroundSync = 0x00001009;
enum DISPID_FEEDS_BackgroundSyncStatus = 0x0000100a;
enum DISPID_FEEDS_DefaultInterval = 0x0000100b;
enum DISPID_FEEDS_AsyncSyncAll = 0x0000100c;
enum DISPID_FEEDS_Normalize = 0x0000100d;
enum DISPID_FEEDS_ItemCountLimit = 0x0000100e;
enum DISPID_FEEDSENUM_Count = 0x00002000;
enum DISPID_FEEDSENUM_Item = 0x00002001;
enum DISPID_FEEDFOLDER_Feeds = 0x00003000;
enum DISPID_FEEDFOLDER_Subfolders = 0x00003001;
enum DISPID_FEEDFOLDER_CreateFeed = 0x00003002;
enum DISPID_FEEDFOLDER_CreateSubfolder = 0x00003003;
enum DISPID_FEEDFOLDER_ExistsFeed = 0x00003004;
enum DISPID_FEEDFOLDER_GetFeed = 0x00003005;
enum DISPID_FEEDFOLDER_ExistsSubfolder = 0x00003006;
enum DISPID_FEEDFOLDER_GetSubfolder = 0x00003007;
enum DISPID_FEEDFOLDER_Delete = 0x00003008;
enum DISPID_FEEDFOLDER_Name = 0x00003009;
enum DISPID_FEEDFOLDER_Rename = 0x0000300a;
enum DISPID_FEEDFOLDER_Path = 0x0000300b;
enum DISPID_FEEDFOLDER_Move = 0x0000300c;
enum DISPID_FEEDFOLDER_Parent = 0x0000300d;
enum DISPID_FEEDFOLDER_IsRoot = 0x0000300e;
enum DISPID_FEEDFOLDER_TotalUnreadItemCount = 0x0000300f;
enum DISPID_FEEDFOLDER_TotalItemCount = 0x00003010;
enum DISPID_FEEDFOLDER_GetWatcher = 0x00003011;
enum DISPID_FEED_Xml = 0x00004000;
enum DISPID_FEED_Name = 0x00004001;
enum DISPID_FEED_Rename = 0x00004002;
enum DISPID_FEED_Url = 0x00004003;
enum DISPID_FEED_LocalId = 0x00004004;
enum DISPID_FEED_Path = 0x00004005;
enum DISPID_FEED_Move = 0x00004006;
enum DISPID_FEED_Parent = 0x00004007;
enum DISPID_FEED_LastWriteTime = 0x00004008;
enum DISPID_FEED_Delete = 0x00004009;
enum DISPID_FEED_Download = 0x0000400a;
enum DISPID_FEED_AsyncDownload = 0x0000400b;
enum DISPID_FEED_CancelAsyncDownload = 0x0000400c;
enum DISPID_FEED_Interval = 0x0000400d;
enum DISPID_FEED_SyncSetting = 0x0000400e;
enum DISPID_FEED_LastDownloadTime = 0x0000400f;
enum DISPID_FEED_LocalEnclosurePath = 0x00004010;
enum DISPID_FEED_Items = 0x00004011;
enum DISPID_FEED_GetItem = 0x00004012;
enum DISPID_FEED_Title = 0x00004013;
enum DISPID_FEED_Description = 0x00004014;
enum DISPID_FEED_Link = 0x00004015;
enum DISPID_FEED_Image = 0x00004016;
enum DISPID_FEED_LastBuildDate = 0x00004017;
enum DISPID_FEED_PubDate = 0x00004018;
enum DISPID_FEED_Ttl = 0x00004019;
enum DISPID_FEED_Language = 0x0000401a;
enum DISPID_FEED_Copyright = 0x0000401b;
enum DISPID_FEED_DownloadEnclosuresAutomatically = 0x0000401c;
enum DISPID_FEED_DownloadStatus = 0x0000401d;
enum DISPID_FEED_LastDownloadError = 0x0000401e;
enum DISPID_FEED_Merge = 0x0000401f;
enum DISPID_FEED_DownloadUrl = 0x00004020;
enum DISPID_FEED_IsList = 0x00004021;
enum DISPID_FEED_MarkAllItemsRead = 0x00004022;
enum DISPID_FEED_GetWatcher = 0x00004023;
enum DISPID_FEED_UnreadItemCount = 0x00004024;
enum DISPID_FEED_ItemCount = 0x00004025;
enum DISPID_FEED_MaxItemCount = 0x00004026;
enum DISPID_FEED_GetItemByEffectiveId = 0x00004027;
enum DISPID_FEED_LastItemDownloadTime = 0x00004028;
enum DISPID_FEED_Username = 0x00004029;
enum DISPID_FEED_Password = 0x0000402a;
enum DISPID_FEED_SetCredentials = 0x0000402b;
enum DISPID_FEED_ClearCredentials = 0x0000402c;
enum DISPID_FEEDITEM_Xml = 0x00005000;
enum DISPID_FEEDITEM_Title = 0x00005001;
enum DISPID_FEEDITEM_Link = 0x00005002;
enum DISPID_FEEDITEM_Guid = 0x00005003;
enum DISPID_FEEDITEM_Description = 0x00005004;
enum DISPID_FEEDITEM_PubDate = 0x00005005;
enum DISPID_FEEDITEM_Comments = 0x00005006;
enum DISPID_FEEDITEM_Author = 0x00005007;
enum DISPID_FEEDITEM_Enclosure = 0x00005008;
enum DISPID_FEEDITEM_IsRead = 0x00005009;
enum DISPID_FEEDITEM_LocalId = 0x0000500a;
enum DISPID_FEEDITEM_Parent = 0x0000500b;
enum DISPID_FEEDITEM_Delete = 0x0000500c;
enum DISPID_FEEDITEM_DownloadUrl = 0x0000500d;
enum DISPID_FEEDITEM_LastDownloadTime = 0x0000500e;
enum DISPID_FEEDITEM_Modified = 0x0000500f;
enum DISPID_FEEDITEM_EffectiveId = 0x00005010;
enum DISPID_FEEDENCLOSURE_Url = 0x00006000;
enum DISPID_FEEDENCLOSURE_Type = 0x00006001;
enum DISPID_FEEDENCLOSURE_Length = 0x00006002;
enum DISPID_FEEDENCLOSURE_AsyncDownload = 0x00006003;
enum DISPID_FEEDENCLOSURE_CancelAsyncDownload = 0x00006004;
enum DISPID_FEEDENCLOSURE_DownloadStatus = 0x00006005;
enum DISPID_FEEDENCLOSURE_LastDownloadError = 0x00006006;
enum DISPID_FEEDENCLOSURE_LocalPath = 0x00006007;
enum DISPID_FEEDENCLOSURE_Parent = 0x00006008;
enum DISPID_FEEDENCLOSURE_DownloadUrl = 0x00006009;
enum DISPID_FEEDENCLOSURE_DownloadMimeType = 0x0000600a;
enum DISPID_FEEDENCLOSURE_RemoveFile = 0x0000600b;
enum DISPID_FEEDENCLOSURE_SetFile = 0x0000600c;
enum DISPID_FEEDFOLDEREVENTS_Error = 0x00007000;
enum DISPID_FEEDFOLDEREVENTS_FolderAdded = 0x00007001;
enum DISPID_FEEDFOLDEREVENTS_FolderDeleted = 0x00007002;
enum DISPID_FEEDFOLDEREVENTS_FolderRenamed = 0x00007003;
enum DISPID_FEEDFOLDEREVENTS_FolderMovedFrom = 0x00007004;
enum DISPID_FEEDFOLDEREVENTS_FolderMovedTo = 0x00007005;
enum DISPID_FEEDFOLDEREVENTS_FolderItemCountChanged = 0x00007006;
enum DISPID_FEEDFOLDEREVENTS_FeedAdded = 0x00007007;
enum DISPID_FEEDFOLDEREVENTS_FeedDeleted = 0x00007008;
enum DISPID_FEEDFOLDEREVENTS_FeedRenamed = 0x00007009;
enum DISPID_FEEDFOLDEREVENTS_FeedUrlChanged = 0x0000700a;
enum DISPID_FEEDFOLDEREVENTS_FeedMovedFrom = 0x0000700b;
enum DISPID_FEEDFOLDEREVENTS_FeedMovedTo = 0x0000700c;
enum DISPID_FEEDFOLDEREVENTS_FeedDownloading = 0x0000700d;
enum DISPID_FEEDFOLDEREVENTS_FeedDownloadCompleted = 0x0000700e;
enum DISPID_FEEDFOLDEREVENTS_FeedItemCountChanged = 0x0000700f;
enum DISPID_FEEDEVENTS_Error = 0x00008000;
enum DISPID_FEEDEVENTS_FeedDeleted = 0x00008001;
enum DISPID_FEEDEVENTS_FeedRenamed = 0x00008002;
enum DISPID_FEEDEVENTS_FeedUrlChanged = 0x00008003;
enum DISPID_FEEDEVENTS_FeedMoved = 0x00008004;
enum DISPID_FEEDEVENTS_FeedDownloading = 0x00008005;
enum DISPID_FEEDEVENTS_FeedDownloadCompleted = 0x00008006;
enum DISPID_FEEDEVENTS_FeedItemCountChanged = 0x00008007;
enum DISPID_DELTA = 0x00000032;
enum DISPID_WMPCORE_BASE = 0x00000000;
enum DISPID_WMPCORE_URL = 0x00000001;
enum DISPID_WMPCORE_OPENSTATE = 0x00000002;
enum DISPID_WMPCORE_CLOSE = 0x00000003;
enum DISPID_WMPCORE_CONTROLS = 0x00000004;
enum DISPID_WMPCORE_SETTINGS = 0x00000005;
enum DISPID_WMPCORE_CURRENTMEDIA = 0x00000006;
enum DISPID_WMPCORE_NETWORK = 0x00000007;
enum DISPID_WMPCORE_MEDIACOLLECTION = 0x00000008;
enum DISPID_WMPCORE_PLAYLISTCOLLECTION = 0x00000009;
enum DISPID_WMPCORE_PLAYSTATE = 0x0000000a;
enum DISPID_WMPCORE_VERSIONINFO = 0x0000000b;
enum DISPID_WMPCORE_LAUNCHURL = 0x0000000c;
enum DISPID_WMPCORE_CURRENTPLAYLIST = 0x0000000d;
enum DISPID_WMPCORE_CDROMCOLLECTION = 0x0000000e;
enum DISPID_WMPCORE_CLOSEDCAPTION = 0x0000000f;
enum DISPID_WMPCORE_ISONLINE = 0x00000010;
enum DISPID_WMPCORE_ERROR = 0x00000011;
enum DISPID_WMPCORE_STATUS = 0x00000012;
enum DISPID_WMPCORE_LAST = 0x00000012;
enum DISPID_WMPOCX_BASE = 0x00000012;
enum DISPID_WMPOCX_ENABLED = 0x00000013;
enum DISPID_WMPOCX_TRANSPARENTATSTART = 0x00000014;
enum DISPID_WMPOCX_FULLSCREEN = 0x00000015;
enum DISPID_WMPOCX_ENABLECONTEXTMENU = 0x00000016;
enum DISPID_WMPOCX_UIMODE = 0x00000017;
enum DISPID_WMPOCX_LAST = 0x00000017;
enum DISPID_WMPOCX2_BASE = 0x00000017;
enum DISPID_WMPOCX2_STRETCHTOFIT = 0x00000018;
enum DISPID_WMPOCX2_WINDOWLESSVIDEO = 0x00000019;
enum DISPID_WMPOCX4_ISREMOTE = 0x0000001a;
enum DISPID_WMPOCX4_PLAYERAPPLICATION = 0x0000001b;
enum DISPID_WMPOCX4_OPENPLAYER = 0x0000001c;
enum DISPID_WMPCORE2_BASE = 0x00000027;
enum DISPID_WMPCORE2_DVD = 0x00000028;
enum DISPID_WMPCORE3_NEWPLAYLIST = 0x00000029;
enum DISPID_WMPCORE3_NEWMEDIA = 0x0000002a;
enum DISPID_WMPCONTROLS_PLAY = 0x00000033;
enum DISPID_WMPCONTROLS_STOP = 0x00000034;
enum DISPID_WMPCONTROLS_PAUSE = 0x00000035;
enum DISPID_WMPCONTROLS_FASTFORWARD = 0x00000036;
enum DISPID_WMPCONTROLS_FASTREVERSE = 0x00000037;
enum DISPID_WMPCONTROLS_CURRENTPOSITION = 0x00000038;
enum DISPID_WMPCONTROLS_CURRENTPOSITIONSTRING = 0x00000039;
enum DISPID_WMPCONTROLS_NEXT = 0x0000003a;
enum DISPID_WMPCONTROLS_PREVIOUS = 0x0000003b;
enum DISPID_WMPCONTROLS_CURRENTITEM = 0x0000003c;
enum DISPID_WMPCONTROLS_CURRENTMARKER = 0x0000003d;
enum DISPID_WMPCONTROLS_ISAVAILABLE = 0x0000003e;
enum DISPID_WMPCONTROLS_PLAYITEM = 0x0000003f;
enum DISPID_WMPCONTROLS2_STEP = 0x00000040;
enum DISPID_WMPCONTROLS3_AUDIOLANGUAGECOUNT = 0x00000041;
enum DISPID_WMPCONTROLS3_GETAUDIOLANGUAGEID = 0x00000042;
enum DISPID_WMPCONTROLS3_GETAUDIOLANGUAGEDESC = 0x00000043;
enum DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGE = 0x00000044;
enum DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGEINDEX = 0x00000045;
enum DISPID_WMPCONTROLS3_GETLANGUAGENAME = 0x00000046;
enum DISPID_WMPCONTROLS3_CURRENTPOSITIONTIMECODE = 0x00000047;
enum DISPID_WMPCONTROLSFAKE_TIMECOMPRESSION = 0x00000048;
enum DISPID_WMPSETTINGS_AUTOSTART = 0x00000065;
enum DISPID_WMPSETTINGS_BALANCE = 0x00000066;
enum DISPID_WMPSETTINGS_INVOKEURLS = 0x00000067;
enum DISPID_WMPSETTINGS_MUTE = 0x00000068;
enum DISPID_WMPSETTINGS_PLAYCOUNT = 0x00000069;
enum DISPID_WMPSETTINGS_RATE = 0x0000006a;
enum DISPID_WMPSETTINGS_VOLUME = 0x0000006b;
enum DISPID_WMPSETTINGS_BASEURL = 0x0000006c;
enum DISPID_WMPSETTINGS_DEFAULTFRAME = 0x0000006d;
enum DISPID_WMPSETTINGS_GETMODE = 0x0000006e;
enum DISPID_WMPSETTINGS_SETMODE = 0x0000006f;
enum DISPID_WMPSETTINGS_ENABLEERRORDIALOGS = 0x00000070;
enum DISPID_WMPSETTINGS_ISAVAILABLE = 0x00000071;
enum DISPID_WMPSETTINGS2_DEFAULTAUDIOLANGUAGE = 0x00000072;
enum DISPID_WMPSETTINGS2_LIBRARYACCESSRIGHTS = 0x00000073;
enum DISPID_WMPSETTINGS2_REQUESTLIBRARYACCESSRIGHTS = 0x00000074;
enum DISPID_WMPPLAYLIST_COUNT = 0x000000c9;
enum DISPID_WMPPLAYLIST_NAME = 0x000000ca;
enum DISPID_WMPPLAYLIST_GETITEMINFO = 0x000000cb;
enum DISPID_WMPPLAYLIST_SETITEMINFO = 0x000000cc;
enum DISPID_WMPPLAYLIST_CLEAR = 0x000000cd;
enum DISPID_WMPPLAYLIST_INSERTITEM = 0x000000ce;
enum DISPID_WMPPLAYLIST_APPENDITEM = 0x000000cf;
enum DISPID_WMPPLAYLIST_REMOVEITEM = 0x000000d0;
enum DISPID_WMPPLAYLIST_MOVEITEM = 0x000000d1;
enum DISPID_WMPPLAYLIST_ATTRIBUTECOUNT = 0x000000d2;
enum DISPID_WMPPLAYLIST_ATTRIBUTENAME = 0x000000d3;
enum DISPID_WMPPLAYLIST_ITEM = 0x000000d4;
enum DISPID_WMPPLAYLIST_ISIDENTICAL = 0x000000d5;
enum DISPID_WMPCDROM_DRIVESPECIFIER = 0x000000fb;
enum DISPID_WMPCDROM_PLAYLIST = 0x000000fc;
enum DISPID_WMPCDROM_EJECT = 0x000000fd;
enum DISPID_WMPCDROMCOLLECTION_COUNT = 0x0000012d;
enum DISPID_WMPCDROMCOLLECTION_ITEM = 0x0000012e;
enum DISPID_WMPCDROMCOLLECTION_GETBYDRIVESPECIFIER = 0x0000012f;
enum DISPID_WMPCDROMCOLLECTION_STARTMONITORINGCDROMS = 0x00000130;
enum DISPID_WMPCDROMCOLLECTION_STOPMONITORINGCDROMS = 0x00000131;
enum DISPID_WMPSTRINGCOLLECTION_COUNT = 0x00000191;
enum DISPID_WMPSTRINGCOLLECTION_ITEM = 0x00000192;
enum DISPID_WMPMEDIACOLLECTION_ADD = 0x000001c4;
enum DISPID_WMPMEDIACOLLECTION_GETALL = 0x000001c5;
enum DISPID_WMPMEDIACOLLECTION_GETBYNAME = 0x000001c6;
enum DISPID_WMPMEDIACOLLECTION_GETBYGENRE = 0x000001c7;
enum DISPID_WMPMEDIACOLLECTION_GETBYAUTHOR = 0x000001c8;
enum DISPID_WMPMEDIACOLLECTION_GETBYALBUM = 0x000001c9;
enum DISPID_WMPMEDIACOLLECTION_GETBYATTRIBUTE = 0x000001ca;
enum DISPID_WMPMEDIACOLLECTION_REMOVE = 0x000001cb;
enum DISPID_WMPMEDIACOLLECTION_GETATTRIBUTESTRINGCOLLECTION = 0x000001cd;
enum DISPID_WMPMEDIACOLLECTION_NEWQUERY = 0x000001ce;
enum DISPID_WMPMEDIACOLLECTION_STARTMONITORING = 0x000001cf;
enum DISPID_WMPMEDIACOLLECTION_STOPMONITORING = 0x000001d0;
enum DISPID_WMPMEDIACOLLECTION_STARTCONTENTSCAN = 0x000001d1;
enum DISPID_WMPMEDIACOLLECTION_STOPCONTENTSCAN = 0x000001d2;
enum DISPID_WMPMEDIACOLLECTION_STARTSEARCH = 0x000001d3;
enum DISPID_WMPMEDIACOLLECTION_STOPSEARCH = 0x000001d4;
enum DISPID_WMPMEDIACOLLECTION_UPDATEMETADATA = 0x000001d5;
enum DISPID_WMPMEDIACOLLECTION_GETMEDIAATOM = 0x000001d6;
enum DISPID_WMPMEDIACOLLECTION_SETDELETED = 0x000001d7;
enum DISPID_WMPMEDIACOLLECTION_ISDELETED = 0x000001d8;
enum DISPID_WMPMEDIACOLLECTION_GETBYQUERYDESCRIPTION = 0x000001d9;
enum DISPID_WMPMEDIACOLLECTION_FREEZECOLLECTIONCHANGE = 0x000001da;
enum DISPID_WMPMEDIACOLLECTION_UNFREEZECOLLECTIONCHANGE = 0x000001db;
enum DISPID_WMPMEDIACOLLECTION_POSTCOLLECTIONCHANGE = 0x000001dc;
enum DISPID_WMPPLAYLISTARRAY_COUNT = 0x000001f5;
enum DISPID_WMPPLAYLISTARRAY_ITEM = 0x000001f6;
enum DISPID_WMPPLAYLISTCOLLECTION_NEWPLAYLIST = 0x00000228;
enum DISPID_WMPPLAYLISTCOLLECTION_GETALL = 0x00000229;
enum DISPID_WMPPLAYLISTCOLLECTION_GETBYNAME = 0x0000022a;
enum DISPID_WMPPLAYLISTCOLLECTION_GETBYQUERYDESCRIPTION = 0x0000022b;
enum DISPID_WMPPLAYLISTCOLLECTION_REMOVE = 0x0000022c;
enum DISPID_WMPPLAYLISTCOLLECTION_NEWQUERY = 0x0000022d;
enum DISPID_WMPPLAYLISTCOLLECTION_STARTMONITORING = 0x0000022e;
enum DISPID_WMPPLAYLISTCOLLECTION_STOPMONITORING = 0x0000022f;
enum DISPID_WMPPLAYLISTCOLLECTION_SETDELETED = 0x00000230;
enum DISPID_WMPPLAYLISTCOLLECTION_ISDELETED = 0x00000231;
enum DISPID_WMPPLAYLISTCOLLECTION_IMPORTPLAYLIST = 0x00000232;
enum DISPID_WMPMEDIA_SOURCEURL = 0x000002ef;
enum DISPID_WMPMEDIA_IMAGESOURCEWIDTH = 0x000002f0;
enum DISPID_WMPMEDIA_IMAGESOURCEHEIGHT = 0x000002f1;
enum DISPID_WMPMEDIA_MARKERCOUNT = 0x000002f2;
enum DISPID_WMPMEDIA_GETMARKERTIME = 0x000002f3;
enum DISPID_WMPMEDIA_GETMARKERNAME = 0x000002f4;
enum DISPID_WMPMEDIA_DURATION = 0x000002f5;
enum DISPID_WMPMEDIA_DURATIONSTRING = 0x000002f6;
enum DISPID_WMPMEDIA_ATTRIBUTECOUNT = 0x000002f7;
enum DISPID_WMPMEDIA_GETATTRIBUTENAME = 0x000002f8;
enum DISPID_WMPMEDIA_GETITEMINFO = 0x000002f9;
enum DISPID_WMPMEDIA_SETITEMINFO = 0x000002fa;
enum DISPID_WMPMEDIA_ISIDENTICAL = 0x000002fb;
enum DISPID_WMPMEDIA_NAME = 0x000002fc;
enum DISPID_WMPMEDIA_GETITEMINFOBYATOM = 0x000002fd;
enum DISPID_WMPMEDIA_ISMEMBEROF = 0x000002fe;
enum DISPID_WMPMEDIA_ISREADONLYITEM = 0x000002ff;
enum DISPID_WMPMEDIA2_ERROR = 0x00000300;
enum DISPID_WMPMEDIA3_GETATTRIBUTECOUNTBYTYPE = 0x00000301;
enum DISPID_WMPMEDIA3_GETITEMINFOBYTYPE = 0x00000302;
enum DISPID_WMPNETWORK_BANDWIDTH = 0x00000321;
enum DISPID_WMPNETWORK_RECOVEREDPACKETS = 0x00000322;
enum DISPID_WMPNETWORK_SOURCEPROTOCOL = 0x00000323;
enum DISPID_WMPNETWORK_RECEIVEDPACKETS = 0x00000324;
enum DISPID_WMPNETWORK_LOSTPACKETS = 0x00000325;
enum DISPID_WMPNETWORK_RECEPTIONQUALITY = 0x00000326;
enum DISPID_WMPNETWORK_BUFFERINGCOUNT = 0x00000327;
enum DISPID_WMPNETWORK_BUFFERINGPROGRESS = 0x00000328;
enum DISPID_WMPNETWORK_BUFFERINGTIME = 0x00000329;
enum DISPID_WMPNETWORK_FRAMERATE = 0x0000032a;
enum DISPID_WMPNETWORK_MAXBITRATE = 0x0000032b;
enum DISPID_WMPNETWORK_BITRATE = 0x0000032c;
enum DISPID_WMPNETWORK_GETPROXYSETTINGS = 0x0000032d;
enum DISPID_WMPNETWORK_SETPROXYSETTINGS = 0x0000032e;
enum DISPID_WMPNETWORK_GETPROXYNAME = 0x0000032f;
enum DISPID_WMPNETWORK_SETPROXYNAME = 0x00000330;
enum DISPID_WMPNETWORK_GETPROXYPORT = 0x00000331;
enum DISPID_WMPNETWORK_SETPROXYPORT = 0x00000332;
enum DISPID_WMPNETWORK_GETPROXYEXCEPTIONLIST = 0x00000333;
enum DISPID_WMPNETWORK_SETPROXYEXCEPTIONLIST = 0x00000334;
enum DISPID_WMPNETWORK_GETPROXYBYPASSFORLOCAL = 0x00000335;
enum DISPID_WMPNETWORK_SETPROXYBYPASSFORLOCAL = 0x00000336;
enum DISPID_WMPNETWORK_MAXBANDWIDTH = 0x00000337;
enum DISPID_WMPNETWORK_DOWNLOADPROGRESS = 0x00000338;
enum DISPID_WMPNETWORK_ENCODEDFRAMERATE = 0x00000339;
enum DISPID_WMPNETWORK_FRAMESSKIPPED = 0x0000033a;
enum DISPID_WMPERROR_CLEARERRORQUEUE = 0x00000353;
enum DISPID_WMPERROR_ERRORCOUNT = 0x00000354;
enum DISPID_WMPERROR_ITEM = 0x00000355;
enum DISPID_WMPERROR_WEBHELP = 0x00000356;
enum DISPID_WMPERRORITEM_ERRORCODE = 0x00000385;
enum DISPID_WMPERRORITEM_ERRORDESCRIPTION = 0x00000386;
enum DISPID_WMPERRORITEM_ERRORCONTEXT = 0x00000387;
enum DISPID_WMPERRORITEM_REMEDY = 0x00000388;
enum DISPID_WMPERRORITEM_CUSTOMURL = 0x00000389;
enum DISPID_WMPERRORITEM2_CONDITION = 0x0000038a;
enum DISPID_WMPCLOSEDCAPTION_SAMISTYLE = 0x000003b7;
enum DISPID_WMPCLOSEDCAPTION_SAMILANG = 0x000003b8;
enum DISPID_WMPCLOSEDCAPTION_SAMIFILENAME = 0x000003b9;
enum DISPID_WMPCLOSEDCAPTION_CAPTIONINGID = 0x000003ba;
enum DISPID_WMPCLOSEDCAPTION2_GETLANGCOUNT = 0x000003bb;
enum DISPID_WMPCLOSEDCAPTION2_GETLANGNAME = 0x000003bc;
enum DISPID_WMPCLOSEDCAPTION2_GETLANGID = 0x000003bd;
enum DISPID_WMPCLOSEDCAPTION2_GETSTYLECOUNT = 0x000003be;
enum DISPID_WMPCLOSEDCAPTION2_GETSTYLENAME = 0x000003bf;
enum DISPID_WMPDVD_ISAVAILABLE = 0x000003e9;
enum DISPID_WMPDVD_DOMAIN = 0x000003ea;
enum DISPID_WMPDVD_TOPMENU = 0x000003eb;
enum DISPID_WMPDVD_TITLEMENU = 0x000003ec;
enum DISPID_WMPDVD_BACK = 0x000003ed;
enum DISPID_WMPDVD_RESUME = 0x000003ee;
enum DISPID_WMPMETADATA_PICTURE_MIMETYPE = 0x0000041b;
enum DISPID_WMPMETADATA_PICTURE_PICTURETYPE = 0x0000041c;
enum DISPID_WMPMETADATA_PICTURE_DESCRIPTION = 0x0000041d;
enum DISPID_WMPMETADATA_PICTURE_URL = 0x0000041e;
enum DISPID_WMPMETADATA_TEXT_TEXT = 0x0000041f;
enum DISPID_WMPMETADATA_TEXT_DESCRIPTION = 0x00000420;
enum DISPID_WMPPLAYERAPP_SWITCHTOPLAYERAPPLICATION = 0x0000044d;
enum DISPID_WMPPLAYERAPP_SWITCHTOCONTROL = 0x0000044e;
enum DISPID_WMPPLAYERAPP_PLAYERDOCKED = 0x0000044f;
enum DISPID_WMPPLAYERAPP_HASDISPLAY = 0x00000450;
enum DISPID_WMPPLAYERAPP_REMOTESTATUS = 0x00000451;
enum DISPID_WMPDOWNLOADMANAGER_GETDOWNLOADCOLLECTION = 0x0000047f;
enum DISPID_WMPDOWNLOADMANAGER_CREATEDOWNLOADCOLLECTION = 0x00000480;
enum DISPID_WMPDOWNLOADCOLLECTION_ID = 0x000004b1;
enum DISPID_WMPDOWNLOADCOLLECTION_COUNT = 0x000004b2;
enum DISPID_WMPDOWNLOADCOLLECTION_ITEM = 0x000004b3;
enum DISPID_WMPDOWNLOADCOLLECTION_STARTDOWNLOAD = 0x000004b4;
enum DISPID_WMPDOWNLOADCOLLECTION_REMOVEITEM = 0x000004b5;
enum DISPID_WMPDOWNLOADCOLLECTION_CLEAR = 0x000004b6;
enum DISPID_WMPDOWNLOADITEM_SOURCEURL = 0x000004e3;
enum DISPID_WMPDOWNLOADITEM_SIZE = 0x000004e4;
enum DISPID_WMPDOWNLOADITEM_TYPE = 0x000004e5;
enum DISPID_WMPDOWNLOADITEM_PROGRESS = 0x000004e6;
enum DISPID_WMPDOWNLOADITEM_DOWNLOADSTATE = 0x000004e7;
enum DISPID_WMPDOWNLOADITEM_PAUSE = 0x000004e8;
enum DISPID_WMPDOWNLOADITEM_RESUME = 0x000004e9;
enum DISPID_WMPDOWNLOADITEM_CANCEL = 0x000004ea;
enum DISPID_WMPDOWNLOADITEM2_GETITEMINFO = 0x00000515;
enum DISPID_WMPQUERY_ADDCONDITION = 0x00000547;
enum DISPID_WMPQUERY_BEGINNEXTGROUP = 0x00000548;
enum DISPID_WMPMEDIACOLLECTION2_CREATEQUERY = 0x00000579;
enum DISPID_WMPMEDIACOLLECTION2_GETPLAYLISTBYQUERY = 0x0000057a;
enum DISPID_WMPMEDIACOLLECTION2_GETSTRINGCOLLBYQUERY = 0x0000057b;
enum DISPID_WMPMEDIACOLLECTION2_GETBYATTRANDMEDIATYPE = 0x0000057c;
enum DISPID_WMPSTRINGCOLLECTION2_ISIDENTICAL = 0x000005ab;
enum DISPID_WMPSTRINGCOLLECTION2_GETITEMINFO = 0x000005ac;
enum DISPID_WMPSTRINGCOLLECTION2_GETATTRCOUNTBYTYPE = 0x000005ad;
enum DISPID_WMPSTRINGCOLLECTION2_GETITEMINFOBYTYPE = 0x000005ae;
enum DISPID_WMPCORE_MIN = 0x00000001;
enum DISPID_WMPCORE_MAX = 0x000005ae;
enum WMPCOREEVENT_BASE = 0x00001388;
enum DISPID_WMPCOREEVENT_OPENSTATECHANGE = 0x00001389;
enum DISPID_WMPCOREEVENT_STATUSCHANGE = 0x0000138a;
enum WMPCOREEVENT_CONTROL_BASE = 0x000013ec;
enum DISPID_WMPCOREEVENT_PLAYSTATECHANGE = 0x000013ed;
enum DISPID_WMPCOREEVENT_AUDIOLANGUAGECHANGE = 0x000013ee;
enum WMPCOREEVENT_SEEK_BASE = 0x00001450;
enum DISPID_WMPCOREEVENT_ENDOFSTREAM = 0x00001451;
enum DISPID_WMPCOREEVENT_POSITIONCHANGE = 0x00001452;
enum DISPID_WMPCOREEVENT_MARKERHIT = 0x00001453;
enum DISPID_WMPCOREEVENT_DURATIONUNITCHANGE = 0x00001454;
enum WMPCOREEVENT_CONTENT_BASE = 0x000014b4;
enum DISPID_WMPCOREEVENT_SCRIPTCOMMAND = 0x000014b5;
enum WMPCOREEVENT_NETWORK_BASE = 0x00001518;
enum DISPID_WMPCOREEVENT_DISCONNECT = 0x00001519;
enum DISPID_WMPCOREEVENT_BUFFERING = 0x0000151a;
enum DISPID_WMPCOREEVENT_NEWSTREAM = 0x0000151b;
enum WMPCOREEVENT_ERROR_BASE = 0x0000157c;
enum DISPID_WMPCOREEVENT_ERROR = 0x0000157d;
enum WMPCOREEVENT_WARNING_BASE = 0x000015e0;
enum DISPID_WMPCOREEVENT_WARNING = 0x000015e1;
enum WMPCOREEVENT_CDROM_BASE = 0x00001644;
enum DISPID_WMPCOREEVENT_CDROMMEDIACHANGE = 0x00001645;
enum WMPCOREEVENT_PLAYLIST_BASE = 0x000016a8;
enum DISPID_WMPCOREEVENT_PLAYLISTCHANGE = 0x000016a9;
enum DISPID_WMPCOREEVENT_MEDIACHANGE = 0x000016aa;
enum DISPID_WMPCOREEVENT_CURRENTMEDIAITEMAVAILABLE = 0x000016ab;
enum DISPID_WMPCOREEVENT_CURRENTPLAYLISTCHANGE = 0x000016ac;
enum DISPID_WMPCOREEVENT_CURRENTPLAYLISTITEMAVAILABLE = 0x000016ad;
enum DISPID_WMPCOREEVENT_CURRENTITEMCHANGE = 0x000016ae;
enum DISPID_WMPCOREEVENT_MEDIACOLLECTIONCHANGE = 0x000016af;
enum DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGADDED = 0x000016b0;
enum DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGREMOVED = 0x000016b1;
enum DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONCHANGE = 0x000016b2;
enum DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTADDED = 0x000016b3;
enum DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTREMOVED = 0x000016b4;
enum DISPID_WMPCOREEVENT_MEDIACOLLECTIONCONTENTSCANADDEDITEM = 0x000016b5;
enum DISPID_WMPCOREEVENT_MEDIACOLLECTIONCONTENTSCANPROGRESS = 0x000016b6;
enum DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHFOUNDITEM = 0x000016b7;
enum DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHPROGRESS = 0x000016b8;
enum DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHCOMPLETE = 0x000016b9;
enum DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTSETASDELETED = 0x000016ba;
enum DISPID_WMPCOREEVENT_MODECHANGE = 0x000016bb;
enum DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGCHANGED = 0x000016bc;
enum DISPID_WMPCOREEVENT_MEDIAERROR = 0x000016bd;
enum DISPID_WMPCOREEVENT_DOMAINCHANGE = 0x000016be;
enum DISPID_WMPCOREEVENT_OPENPLAYLISTSWITCH = 0x000016bf;
enum DISPID_WMPCOREEVENT_STRINGCOLLECTIONCHANGE = 0x000016c0;
enum DISPID_WMPCOREEVENT_MEDIACOLLECTIONMEDIAADDED = 0x000016c1;
enum DISPID_WMPCOREEVENT_MEDIACOLLECTIONMEDIAREMOVED = 0x000016c2;
enum WMPOCXEVENT_BASE = 0x00001964;
enum DISPID_WMPOCXEVENT_SWITCHEDTOPLAYERAPPLICATION = 0x00001965;
enum DISPID_WMPOCXEVENT_SWITCHEDTOCONTROL = 0x00001966;
enum DISPID_WMPOCXEVENT_PLAYERDOCKEDSTATECHANGE = 0x00001967;
enum DISPID_WMPOCXEVENT_PLAYERRECONNECT = 0x00001968;
enum DISPID_WMPOCXEVENT_CLICK = 0x00001969;
enum DISPID_WMPOCXEVENT_DOUBLECLICK = 0x0000196a;
enum DISPID_WMPOCXEVENT_KEYDOWN = 0x0000196b;
enum DISPID_WMPOCXEVENT_KEYPRESS = 0x0000196c;
enum DISPID_WMPOCXEVENT_KEYUP = 0x0000196d;
enum DISPID_WMPOCXEVENT_MOUSEDOWN = 0x0000196e;
enum DISPID_WMPOCXEVENT_MOUSEMOVE = 0x0000196f;
enum DISPID_WMPOCXEVENT_MOUSEUP = 0x00001970;
enum DISPID_WMPOCXEVENT_DEVICECONNECT = 0x00001971;
enum DISPID_WMPOCXEVENT_DEVICEDISCONNECT = 0x00001972;
enum DISPID_WMPOCXEVENT_DEVICESTATUSCHANGE = 0x00001973;
enum DISPID_WMPOCXEVENT_DEVICESYNCSTATECHANGE = 0x00001974;
enum DISPID_WMPOCXEVENT_DEVICESYNCERROR = 0x00001975;
enum DISPID_WMPOCXEVENT_CREATEPARTNERSHIPCOMPLETE = 0x00001976;
enum DISPID_WMPOCXEVENT_CDROMRIPSTATECHANGE = 0x00001977;
enum DISPID_WMPOCXEVENT_CDROMRIPMEDIAERROR = 0x00001978;
enum DISPID_WMPOCXEVENT_CDROMBURNSTATECHANGE = 0x00001979;
enum DISPID_WMPOCXEVENT_CDROMBURNMEDIAERROR = 0x0000197a;
enum DISPID_WMPOCXEVENT_CDROMBURNERROR = 0x0000197b;
enum DISPID_WMPOCXEVENT_LIBRARYCONNECT = 0x0000197c;
enum DISPID_WMPOCXEVENT_LIBRARYDISCONNECT = 0x0000197d;
enum DISPID_WMPOCXEVENT_FOLDERSCANSTATECHANGE = 0x0000197e;
enum DISPID_WMPOCXEVENT_DEVICEESTIMATION = 0x0000197f;
enum DISPID_WMPCONTROLS_BASE = 0x00000032;
enum DISPID_WMPSETTINGS_BASE = 0x00000064;
enum DISPID_WMPPLAYLIST_BASE = 0x000000c8;
enum DISPID_WMPCDROM_BASE = 0x000000fa;
enum DISPID_WMPCDROMCOLLECTION_BASE = 0x0000012c;
enum DISPID_WMPSTRINGCOLLECTION_BASE = 0x00000190;
enum DISPID_WMPMEDIACOLLECTION_BASE = 0x000001c2;
enum DISPID_WMPPLAYLISTARRAY_BASE = 0x000001f4;
enum DISPID_WMPPLAYLISTCOLLECTION_BASE = 0x00000226;
enum DISPID_WMPMEDIA_BASE = 0x000002ee;
enum DISPID_WMPNETWORK_BASE = 0x00000320;
enum DISPID_WMPERROR_BASE = 0x00000352;
enum DISPID_WMPERRORITEM_BASE = 0x00000384;
enum DISPID_WMPCLOSEDCAPTION_BASE = 0x000003b6;
enum DISPID_WMPDVD_BASE = 0x000003e8;
enum DISPID_WMPMETADATA_BASE = 0x0000041a;
enum DISPID_WMPPLAYERAPP_BASE = 0x0000044c;
enum DISPID_WMPDOWNLOADMANAGER_BASE = 0x0000047e;
enum DISPID_WMPDOWNLOADCOLLECTION_BASE = 0x000004b0;
enum DISPID_WMPDOWNLOADITEM_BASE = 0x000004e2;
enum DISPID_WMPDOWNLOADITEM2_BASE = 0x00000514;
enum DISPID_WMPQUERY_BASE = 0x00000546;
enum DISPID_WMPMEDIACOLLECTION2_BASE = 0x00000578;
enum DISPID_WMPSTRINGCOLLECTION2_BASE = 0x000005aa;
enum CLSID_WMPSkinManager = GUID(0xb2a7fd52, 0x301f, 0x4348, [0xb9, 0x3a, 0x63, 0x8c, 0x6d, 0xe4, 0x92, 0x29]);
enum CLSID_WMPMediaPluginRegistrar = GUID(0x5569e7f5, 0x424b, 0x4b93, [0x89, 0xca, 0x79, 0xd1, 0x79, 0x24, 0x68, 0x9a]);
enum WMP_PLUGINTYPE_DSP = GUID(0x6434baea, 0x4954, 0x498d, [0xab, 0xd5, 0x2b, 0x7, 0x12, 0x3e, 0x1f, 0x4]);
enum WMP_PLUGINTYPE_DSP_OUTOFPROC = GUID(0xef29b174, 0xc347, 0x44cc, [0x9a, 0x4f, 0x23, 0x99, 0x11, 0x8f, 0xf3, 0x8c]);
enum WMP_PLUGINTYPE_RENDERING = GUID(0xa8554541, 0x115d, 0x406a, [0xa4, 0xc7, 0x51, 0x11, 0x1c, 0x33, 0x1, 0x83]);
enum kfltTimedLevelMaximumFrequency = 22050.000000;
enum kfltTimedLevelMinimumFrequency = 20.000000;
enum g_szContentPartnerInfo_LoginState = "LoginState";
enum g_szContentPartnerInfo_MediaPlayerAccountType = "MediaPlayerAccountType";
enum g_szContentPartnerInfo_AccountType = "AccountType";
enum g_szContentPartnerInfo_HasCachedCredentials = "HasCachedCredentials";
enum g_szContentPartnerInfo_LicenseRefreshAdvanceWarning = "LicenseRefreshAdvanceWarning";
enum g_szContentPartnerInfo_PurchasedTrackRequiresReDownload = "PurchasedTrackRequiresReDownload";
enum g_szContentPartnerInfo_MaximumTrackPurchasePerPurchase = "MaximumNumberOfTracksPerPurchase";
enum g_szContentPartnerInfo_AccountBalance = "AccountBalance";
enum g_szContentPartnerInfo_UserName = "UserName";
enum g_szMediaPlayerTask_Burn = "Burn";
enum g_szMediaPlayerTask_Browse = "Browse";
enum g_szMediaPlayerTask_Sync = "Sync";
enum g_szItemInfo_PopupURL = "Popup";
enum g_szItemInfo_AuthenticationSuccessURL = "AuthenticationSuccessURL";
enum g_szItemInfo_LoginFailureURL = "LoginFailureURL";
enum g_szItemInfo_HTMLViewURL = "HTMLViewURL";
enum g_szItemInfo_PopupCaption = "PopupCaption";
enum g_szItemInfo_ALTLoginURL = "ALTLoginURL";
enum g_szItemInfo_ALTLoginCaption = "ALTLoginCaption";
enum g_szItemInfo_ForgetPasswordURL = "ForgotPassword";
enum g_szItemInfo_CreateAccountURL = "CreateAccount";
enum g_szItemInfo_ArtistArtURL = "ArtistArt";
enum g_szItemInfo_AlbumArtURL = "AlbumArt";
enum g_szItemInfo_ListArtURL = "ListArt";
enum g_szItemInfo_GenreArtURL = "GenreArt";
enum g_szItemInfo_SubGenreArtURL = "SubGenreArt";
enum g_szItemInfo_RadioArtURL = "RadioArt";
enum g_szItemInfo_TreeListIconURL = "CPListIDIcon";
enum g_szItemInfo_ErrorDescription = "CPErrorDescription";
enum g_szItemInfo_ErrorURL = "CPErrorURL";
enum g_szItemInfo_ErrorURLLinkText = "CPErrorURLLinkText";
enum g_szUnknownLocation = "UnknownLocation";
enum g_szRootLocation = "RootLocation";
enum g_szFlyoutMenu = "FlyoutMenu";
enum g_szOnlineStore = "OnlineStore";
enum g_szVideoRecent = "VideoRecent";
enum g_szVideoRoot = "VideoRoot";
enum g_szCPListID = "CPListID";
enum g_szAllCPListIDs = "AllCPListIDs";
enum g_szCPTrackID = "CPTrackID";
enum g_szAllCPTrackIDs = "AllCPTrackIDs";
enum g_szCPArtistID = "CPArtistID";
enum g_szAllCPArtistIDs = "AllCPArtistIDs";
enum g_szCPAlbumID = "CPAlbumID";
enum g_szAllCPAlbumIDs = "AllCPAlbumIDs";
enum g_szCPGenreID = "CPGenreID";
enum g_szAllCPGenreIDs = "AllCPGenreIDs";
enum g_szCPAlbumSubGenreID = "CPAlbumSubGenreID";
enum g_szAllCPAlbumSubGenreIDs = "AllCPAlbumSubGenreIDs";
enum g_szReleaseDateYear = "ReleaseDateYear";
enum g_szAllReleaseDateYears = "AllReleaseDateYears";
enum g_szCPRadioID = "CPRadioID";
enum g_szAllCPRadioIDs = "AllCPRadioIDs";
enum g_szAuthor = "Author";
enum g_szAllAuthors = "AllAuthors";
enum g_szWMParentalRating = "WMParentalRating";
enum g_szAllWMParentalRatings = "AllWMParentalRatings";
enum g_szAllUserEffectiveRatingStarss = "AllUserEffectiveRatingStarss";
enum g_szUserEffectiveRatingStars = "UserEffectiveRatingStars";
enum g_szUserPlaylist = "UserPlaylist";
enum g_szViewMode_Report = "ViewModeReport";
enum g_szViewMode_Details = "ViewModeDetails";
enum g_szViewMode_Icon = "ViewModeIcon";
enum g_szViewMode_Tile = "ViewModeTile";
enum g_szViewMode_OrderedList = "ViewModeOrderedList";
enum g_szContentPrice_Unknown = "PriceUnknown";
enum g_szContentPrice_CannotBuy = "PriceCannotBuy";
enum g_szContentPrice_Free = "PriceFree";
enum g_szRefreshLicensePlay = "RefreshForPlay";
enum g_szRefreshLicenseBurn = "RefreshForBurn";
enum g_szRefreshLicenseSync = "RefreshForSync";
enum g_szVerifyPermissionSync = "VerifyPermissionSync";
enum g_szStationEvent_Started = "TrackStarted";
enum g_szStationEvent_Complete = "TrackComplete";
enum g_szStationEvent_Skipped = "TrackSkipped";
enum WMProfile_V40_DialUpMBR = GUID(0xfd7f47f1, 0x72a6, 0x45a4, [0x80, 0xf0, 0x3a, 0xec, 0xef, 0xc3, 0x2c, 0x7]);
enum WMProfile_V40_IntranetMBR = GUID(0x82cd3321, 0xa94a, 0x4ffc, [0x9c, 0x2b, 0x9, 0x2c, 0x10, 0xca, 0x16, 0xe7]);
enum WMProfile_V40_2856100MBR = GUID(0x5a1c2206, 0xdc5e, 0x4186, [0xbe, 0xb2, 0x4c, 0x5a, 0x99, 0x4b, 0x13, 0x2e]);
enum WMProfile_V40_6VoiceAudio = GUID(0xd508978a, 0x11a0, 0x4d15, [0xb0, 0xda, 0xac, 0xdc, 0x99, 0xd4, 0xf8, 0x90]);
enum WMProfile_V40_16AMRadio = GUID(0xf4be81f, 0xd57d, 0x41e1, [0xb2, 0xe3, 0x2f, 0xad, 0x98, 0x6b, 0xfe, 0xc2]);
enum WMProfile_V40_288FMRadioMono = GUID(0x7fa57fc8, 0x6ea4, 0x4645, [0x8a, 0xbf, 0xb6, 0xe5, 0xa8, 0xf8, 0x14, 0xa1]);
enum WMProfile_V40_288FMRadioStereo = GUID(0x22fcf466, 0xaa40, 0x431f, [0xa2, 0x89, 0x6, 0xd0, 0xea, 0x1a, 0x1e, 0x40]);
enum WMProfile_V40_56DialUpStereo = GUID(0xe8026f87, 0xe905, 0x4594, [0xa3, 0xc7, 0x0, 0xd0, 0x0, 0x41, 0xd1, 0xd9]);
enum WMProfile_V40_64Audio = GUID(0x4820b3f7, 0xcbec, 0x41dc, [0x93, 0x91, 0x78, 0x59, 0x87, 0x14, 0xc8, 0xe5]);
enum WMProfile_V40_96Audio = GUID(0xefa0ee3, 0x9e64, 0x41e2, [0x83, 0x7f, 0x3c, 0x0, 0x38, 0xf3, 0x27, 0xba]);
enum WMProfile_V40_128Audio = GUID(0x93ddbe12, 0x13dc, 0x4e32, [0xa3, 0x5e, 0x40, 0x37, 0x8e, 0x34, 0x27, 0x9a]);
enum WMProfile_V40_288VideoVoice = GUID(0xbb2bc274, 0xeb6, 0x4da9, [0xb5, 0x50, 0xec, 0xf7, 0xf2, 0xb9, 0x94, 0x8f]);
enum WMProfile_V40_288VideoAudio = GUID(0xac617f2d, 0x6cbe, 0x4e84, [0x8e, 0x9a, 0xce, 0x15, 0x1a, 0x12, 0xa3, 0x54]);
enum WMProfile_V40_288VideoWebServer = GUID(0xabf2f00d, 0xd555, 0x4815, [0x94, 0xce, 0x82, 0x75, 0xf3, 0xa7, 0xb, 0xfe]);
enum WMProfile_V40_56DialUpVideo = GUID(0xe21713bb, 0x652f, 0x4dab, [0x99, 0xde, 0x71, 0xe0, 0x44, 0x0, 0x27, 0xf]);
enum WMProfile_V40_56DialUpVideoWebServer = GUID(0xb756ff10, 0x520f, 0x4749, [0xa3, 0x99, 0xb7, 0x80, 0xe2, 0xfc, 0x92, 0x50]);
enum WMProfile_V40_100Video = GUID(0x8f99ddd8, 0x6684, 0x456b, [0xa0, 0xa3, 0x33, 0xe1, 0x31, 0x68, 0x95, 0xf0]);
enum WMProfile_V40_250Video = GUID(0x541841c3, 0x9339, 0x4f7b, [0x9a, 0x22, 0xb1, 0x15, 0x40, 0x89, 0x4e, 0x42]);
enum WMProfile_V40_512Video = GUID(0x70440e6d, 0xc4ef, 0x4f84, [0x8c, 0xd0, 0xd5, 0xc2, 0x86, 0x86, 0xe7, 0x84]);
enum WMProfile_V40_1MBVideo = GUID(0xb4482a4c, 0xcc17, 0x4b07, [0xa9, 0x4e, 0x98, 0x18, 0xd5, 0xe0, 0xf1, 0x3f]);
enum WMProfile_V40_3MBVideo = GUID(0x55374ac0, 0x309b, 0x4396, [0xb8, 0x8f, 0xe6, 0xe2, 0x92, 0x11, 0x3f, 0x28]);
enum WMProfile_V70_DialUpMBR = GUID(0x5b16e74b, 0x4068, 0x45b5, [0xb8, 0xe, 0x7b, 0xf8, 0xc8, 0xd, 0x2c, 0x2f]);
enum WMProfile_V70_IntranetMBR = GUID(0x45880dc, 0x34b6, 0x4ca9, [0xa3, 0x26, 0x73, 0x55, 0x7e, 0xd1, 0x43, 0xf3]);
enum WMProfile_V70_2856100MBR = GUID(0x7df7a25, 0x3fe2, 0x4a5b, [0x8b, 0x1e, 0x34, 0x8b, 0x7, 0x21, 0xca, 0x70]);
enum WMProfile_V70_288VideoVoice = GUID(0xb952f38e, 0x7dbc, 0x4533, [0xa9, 0xca, 0xb0, 0xb, 0x1c, 0x6e, 0x98, 0x0]);
enum WMProfile_V70_288VideoAudio = GUID(0x58bba0ee, 0x896a, 0x4948, [0x99, 0x53, 0x85, 0xb7, 0x36, 0xf8, 0x39, 0x47]);
enum WMProfile_V70_288VideoWebServer = GUID(0x70a32e2b, 0xe2df, 0x4ebd, [0x91, 0x5, 0xd9, 0xca, 0x19, 0x4a, 0x2d, 0x50]);
enum WMProfile_V70_56VideoWebServer = GUID(0xdef99e40, 0x57bc, 0x4ab3, [0xb2, 0xd1, 0xb6, 0xe3, 0xca, 0xf6, 0x42, 0x57]);
enum WMProfile_V70_64VideoISDN = GUID(0xc2b7a7e9, 0x7b8e, 0x4992, [0xa1, 0xa1, 0x6, 0x82, 0x17, 0xa3, 0xb3, 0x11]);
enum WMProfile_V70_100Video = GUID(0xd9f3c932, 0x5ea9, 0x4c6d, [0x89, 0xb4, 0x26, 0x86, 0xe5, 0x15, 0x42, 0x6e]);
enum WMProfile_V70_256Video = GUID(0xafe69b3a, 0x403f, 0x4a1b, [0x80, 0x7, 0xe, 0x21, 0xcf, 0xb3, 0xdf, 0x84]);
enum WMProfile_V70_384Video = GUID(0xf3d45fbb, 0x8782, 0x44df, [0x97, 0xc6, 0x86, 0x78, 0xe2, 0xf9, 0xb1, 0x3d]);
enum WMProfile_V70_768Video = GUID(0x326ebb6, 0xf76e, 0x4964, [0xb0, 0xdb, 0xe7, 0x29, 0x97, 0x8d, 0x35, 0xee]);
enum WMProfile_V70_1500Video = GUID(0xb89164a, 0x5490, 0x4686, [0x9e, 0x37, 0x5a, 0x80, 0x88, 0x4e, 0x51, 0x46]);
enum WMProfile_V70_2000Video = GUID(0xaa980124, 0xbf10, 0x4e4f, [0x9a, 0xfd, 0x43, 0x29, 0xa7, 0x39, 0x5c, 0xff]);
enum WMProfile_V70_700FilmContentVideo = GUID(0x7a747920, 0x2449, 0x4d76, [0x99, 0xcb, 0xfd, 0xb0, 0xc9, 0x4, 0x84, 0xd4]);
enum WMProfile_V70_1500FilmContentVideo = GUID(0xf6a5f6df, 0xee3f, 0x434c, [0xa4, 0x33, 0x52, 0x3c, 0xe5, 0x5f, 0x51, 0x6b]);
enum WMProfile_V70_6VoiceAudio = GUID(0xeaba9fbf, 0xb64f, 0x49b3, [0xaa, 0xc, 0x73, 0xfb, 0xdd, 0x15, 0xa, 0xd0]);
enum WMProfile_V70_288FMRadioMono = GUID(0xc012a833, 0xa03b, 0x44a5, [0x96, 0xdc, 0xed, 0x95, 0xcc, 0x65, 0x58, 0x2d]);
enum WMProfile_V70_288FMRadioStereo = GUID(0xe96d67c9, 0x1a39, 0x4dc4, [0xb9, 0x0, 0xb1, 0x18, 0x4d, 0xc8, 0x36, 0x20]);
enum WMProfile_V70_56DialUpStereo = GUID(0x674ee767, 0x949, 0x4fac, [0x87, 0x5e, 0xf4, 0xc9, 0xc2, 0x92, 0x1, 0x3b]);
enum WMProfile_V70_64AudioISDN = GUID(0x91dea458, 0x9d60, 0x4212, [0x9c, 0x59, 0xd4, 0x9, 0x19, 0xc9, 0x39, 0xe4]);
enum WMProfile_V70_64Audio = GUID(0xb29cffc6, 0xf131, 0x41db, [0xb5, 0xe8, 0x99, 0xd8, 0xb0, 0xb9, 0x45, 0xf4]);
enum WMProfile_V70_96Audio = GUID(0xa9d4b819, 0x16cc, 0x4a59, [0x9f, 0x37, 0x69, 0x3d, 0xbb, 0x3, 0x2, 0xd6]);
enum WMProfile_V70_128Audio = GUID(0xc64cf5da, 0xdf45, 0x40d3, [0x80, 0x27, 0xde, 0x69, 0x8d, 0x68, 0xdc, 0x66]);
enum WMProfile_V70_225VideoPDA = GUID(0xf55ea573, 0x4c02, 0x42b5, [0x90, 0x26, 0xa8, 0x26, 0xc, 0x43, 0x8a, 0x9f]);
enum WMProfile_V70_150VideoPDA = GUID(0xf472967, 0xe3c6, 0x4797, [0x96, 0x94, 0xf0, 0x30, 0x4c, 0x5e, 0x2f, 0x17]);
enum WMProfile_V80_255VideoPDA = GUID(0xfeedbcdf, 0x3fac, 0x4c93, [0xac, 0xd, 0x47, 0x94, 0x1e, 0xc7, 0x2c, 0xb]);
enum WMProfile_V80_150VideoPDA = GUID(0xaee16dfa, 0x2c14, 0x4a2f, [0xad, 0x3f, 0xa3, 0x3, 0x40, 0x31, 0x78, 0x4f]);
enum WMProfile_V80_28856VideoMBR = GUID(0xd66920c4, 0xc21f, 0x4ec8, [0xa0, 0xb4, 0x95, 0xcf, 0x2b, 0xd5, 0x7f, 0xc4]);
enum WMProfile_V80_100768VideoMBR = GUID(0x5bdb5a0e, 0x979e, 0x47d3, [0x95, 0x96, 0x73, 0xb3, 0x86, 0x39, 0x2a, 0x55]);
enum WMProfile_V80_288100VideoMBR = GUID(0xd8722c69, 0x2419, 0x4b36, [0xb4, 0xe0, 0x6e, 0x17, 0xb6, 0x5, 0x64, 0xe5]);
enum WMProfile_V80_288Video = GUID(0x3df678d9, 0x1352, 0x4186, [0xbb, 0xf8, 0x74, 0xf0, 0xc1, 0x9b, 0x6a, 0xe2]);
enum WMProfile_V80_56Video = GUID(0x254e8a96, 0x2612, 0x405c, [0x80, 0x39, 0xf0, 0xbf, 0x72, 0x5c, 0xed, 0x7d]);
enum WMProfile_V80_100Video = GUID(0xa2e300b4, 0xc2d4, 0x4fc0, [0xb5, 0xdd, 0xec, 0xbd, 0x94, 0x8d, 0xc0, 0xdf]);
enum WMProfile_V80_256Video = GUID(0xbbc75500, 0x33d2, 0x4466, [0xb8, 0x6b, 0x12, 0x2b, 0x20, 0x1c, 0xc9, 0xae]);
enum WMProfile_V80_384Video = GUID(0x29b00c2b, 0x9a9, 0x48bd, [0xad, 0x9, 0xcd, 0xae, 0x11, 0x7d, 0x1d, 0xa7]);
enum WMProfile_V80_768Video = GUID(0x74d01102, 0xe71a, 0x4820, [0x8f, 0xd, 0x13, 0xd2, 0xec, 0x1e, 0x48, 0x72]);
enum WMProfile_V80_700NTSCVideo = GUID(0xc8c2985f, 0xe5d9, 0x4538, [0x9e, 0x23, 0x9b, 0x21, 0xbf, 0x78, 0xf7, 0x45]);
enum WMProfile_V80_1400NTSCVideo = GUID(0x931d1bee, 0x617a, 0x4bcd, [0x99, 0x5, 0xcc, 0xd0, 0x78, 0x66, 0x83, 0xee]);
enum WMProfile_V80_384PALVideo = GUID(0x9227c692, 0xae62, 0x4f72, [0xa7, 0xea, 0x73, 0x60, 0x62, 0xd0, 0xe2, 0x1e]);
enum WMProfile_V80_700PALVideo = GUID(0xec298949, 0x639b, 0x45e2, [0x96, 0xfd, 0x4a, 0xb3, 0x2d, 0x59, 0x19, 0xc2]);
enum WMProfile_V80_288MonoAudio = GUID(0x7ea3126d, 0xe1ba, 0x4716, [0x89, 0xaf, 0xf6, 0x5c, 0xee, 0xc, 0xc, 0x67]);
enum WMProfile_V80_288StereoAudio = GUID(0x7e4cab5c, 0x35dc, 0x45bb, [0xa7, 0xc0, 0x19, 0xb2, 0x80, 0x70, 0xd0, 0xcc]);
enum WMProfile_V80_32StereoAudio = GUID(0x60907f9f, 0xb352, 0x47e5, [0xb2, 0x10, 0xe, 0xf1, 0xf4, 0x7e, 0x9f, 0x9d]);
enum WMProfile_V80_48StereoAudio = GUID(0x5ee06be5, 0x492b, 0x480a, [0x8a, 0x8f, 0x12, 0xf3, 0x73, 0xec, 0xf9, 0xd4]);
enum WMProfile_V80_64StereoAudio = GUID(0x9bb5bc4, 0x3176, 0x457f, [0x8d, 0xd6, 0x3c, 0xd9, 0x19, 0x12, 0x3e, 0x2d]);
enum WMProfile_V80_96StereoAudio = GUID(0x1fc81930, 0x61f2, 0x436f, [0x9d, 0x33, 0x34, 0x9f, 0x2a, 0x1c, 0xf, 0x10]);
enum WMProfile_V80_128StereoAudio = GUID(0x407b9450, 0x8bdc, 0x4ee5, [0x88, 0xb8, 0x6f, 0x52, 0x7b, 0xd9, 0x41, 0xf2]);
enum WMProfile_V80_288VideoOnly = GUID(0x8c45b4c7, 0x4aeb, 0x4f78, [0xa5, 0xec, 0x88, 0x42, 0xb, 0x9d, 0xad, 0xef]);
enum WMProfile_V80_56VideoOnly = GUID(0x6e2a6955, 0x81df, 0x4943, [0xba, 0x50, 0x68, 0xa9, 0x86, 0xa7, 0x8, 0xf6]);
enum WMProfile_V80_FAIRVBRVideo = GUID(0x3510a862, 0x5850, 0x4886, [0x83, 0x5f, 0xd7, 0x8e, 0xc6, 0xa6, 0x40, 0x42]);
enum WMProfile_V80_HIGHVBRVideo = GUID(0xf10d9d3, 0x3b04, 0x4fb0, [0xa3, 0xd3, 0x88, 0xd4, 0xac, 0x85, 0x4a, 0xcc]);
enum WMProfile_V80_BESTVBRVideo = GUID(0x48439ba, 0x309c, 0x440e, [0x9c, 0xb4, 0x3d, 0xcc, 0xa3, 0x75, 0x64, 0x23]);
enum CLSID_WindowsMediaPlayer = GUID(0x6bf52a52, 0x394a, 0x11d3, [0xb1, 0x53, 0x0, 0xc0, 0x4f, 0x79, 0xfa, 0xa6]);
struct WindowsMediaPlayer
{
}
alias WMPOpenState = int;
enum : int
{
    wmposUndefined               = 0x00000000,
    wmposPlaylistChanging        = 0x00000001,
    wmposPlaylistLocating        = 0x00000002,
    wmposPlaylistConnecting      = 0x00000003,
    wmposPlaylistLoading         = 0x00000004,
    wmposPlaylistOpening         = 0x00000005,
    wmposPlaylistOpenNoMedia     = 0x00000006,
    wmposPlaylistChanged         = 0x00000007,
    wmposMediaChanging           = 0x00000008,
    wmposMediaLocating           = 0x00000009,
    wmposMediaConnecting         = 0x0000000a,
    wmposMediaLoading            = 0x0000000b,
    wmposMediaOpening            = 0x0000000c,
    wmposMediaOpen               = 0x0000000d,
    wmposBeginCodecAcquisition   = 0x0000000e,
    wmposEndCodecAcquisition     = 0x0000000f,
    wmposBeginLicenseAcquisition = 0x00000010,
    wmposEndLicenseAcquisition   = 0x00000011,
    wmposBeginIndividualization  = 0x00000012,
    wmposEndIndividualization    = 0x00000013,
    wmposMediaWaiting            = 0x00000014,
    wmposOpeningUnknownURL       = 0x00000015,
}

alias WMPPlayState = int;
enum : int
{
    wmppsUndefined     = 0x00000000,
    wmppsStopped       = 0x00000001,
    wmppsPaused        = 0x00000002,
    wmppsPlaying       = 0x00000003,
    wmppsScanForward   = 0x00000004,
    wmppsScanReverse   = 0x00000005,
    wmppsBuffering     = 0x00000006,
    wmppsWaiting       = 0x00000007,
    wmppsMediaEnded    = 0x00000008,
    wmppsTransitioning = 0x00000009,
    wmppsReady         = 0x0000000a,
    wmppsReconnecting  = 0x0000000b,
    wmppsLast          = 0x0000000c,
}

alias WMPPlaylistChangeEventType = int;
enum : int
{
    wmplcUnknown    = 0x00000000,
    wmplcClear      = 0x00000001,
    wmplcInfoChange = 0x00000002,
    wmplcMove       = 0x00000003,
    wmplcDelete     = 0x00000004,
    wmplcInsert     = 0x00000005,
    wmplcAppend     = 0x00000006,
    wmplcPrivate    = 0x00000007,
    wmplcNameChange = 0x00000008,
    wmplcMorph      = 0x00000009,
    wmplcSort       = 0x0000000a,
    wmplcLast       = 0x0000000b,
}

enum IID_IWMPErrorItem = GUID(0x3614c646, 0x3b3b, 0x4de7, [0xa8, 0x1e, 0x93, 0xe, 0x3f, 0x21, 0x27, 0xb3]);
interface IWMPErrorItem : IDispatch
{
    HRESULT get_errorCode(int*);
    HRESULT get_errorDescription(BSTR*);
    HRESULT get_errorContext(VARIANT*);
    HRESULT get_remedy(int*);
    HRESULT get_customUrl(BSTR*);
}
enum IID_IWMPError = GUID(0xa12dcf7d, 0x14ab, 0x4c1b, [0xa8, 0xcd, 0x63, 0x90, 0x9f, 0x6, 0x2, 0x5b]);
interface IWMPError : IDispatch
{
    HRESULT clearErrorQueue();
    HRESULT get_errorCount(int*);
    HRESULT get_item(int, IWMPErrorItem*);
    HRESULT webHelp();
}
enum IID_IWMPMedia = GUID(0x94d55e95, 0x3fac, 0x11d3, [0xb1, 0x55, 0x0, 0xc0, 0x4f, 0x79, 0xfa, 0xa6]);
interface IWMPMedia : IDispatch
{
    HRESULT get_isIdentical(IWMPMedia, short*);
    HRESULT get_sourceURL(BSTR*);
    HRESULT get_name(BSTR*);
    HRESULT put_name(BSTR);
    HRESULT get_imageSourceWidth(int*);
    HRESULT get_imageSourceHeight(int*);
    HRESULT get_markerCount(int*);
    HRESULT getMarkerTime(int, double*);
    HRESULT getMarkerName(int, BSTR*);
    HRESULT get_duration(double*);
    HRESULT get_durationString(BSTR*);
    HRESULT get_attributeCount(int*);
    HRESULT getAttributeName(int, BSTR*);
    HRESULT getItemInfo(BSTR, BSTR*);
    HRESULT setItemInfo(BSTR, BSTR);
    HRESULT getItemInfoByAtom(int, BSTR*);
    HRESULT isMemberOf(IWMPPlaylist, short*);
    HRESULT isReadOnlyItem(BSTR, short*);
}
enum IID_IWMPControls = GUID(0x74c09e02, 0xf828, 0x11d2, [0xa7, 0x4b, 0x0, 0xa0, 0xc9, 0x5, 0xf3, 0x6e]);
interface IWMPControls : IDispatch
{
    HRESULT get_isAvailable(BSTR, short*);
    HRESULT play();
    HRESULT stop();
    HRESULT pause();
    HRESULT fastForward();
    HRESULT fastReverse();
    HRESULT get_currentPosition(double*);
    HRESULT put_currentPosition(double);
    HRESULT get_currentPositionString(BSTR*);
    HRESULT next();
    HRESULT previous();
    HRESULT get_currentItem(IWMPMedia*);
    HRESULT put_currentItem(IWMPMedia);
    HRESULT get_currentMarker(int*);
    HRESULT put_currentMarker(int);
    HRESULT playItem(IWMPMedia);
}
enum IID_IWMPSettings = GUID(0x9104d1ab, 0x80c9, 0x4fed, [0xab, 0xf0, 0x2e, 0x64, 0x17, 0xa6, 0xdf, 0x14]);
interface IWMPSettings : IDispatch
{
    HRESULT get_isAvailable(BSTR, short*);
    HRESULT get_autoStart(short*);
    HRESULT put_autoStart(short);
    HRESULT get_baseURL(BSTR*);
    HRESULT put_baseURL(BSTR);
    HRESULT get_defaultFrame(BSTR*);
    HRESULT put_defaultFrame(BSTR);
    HRESULT get_invokeURLs(short*);
    HRESULT put_invokeURLs(short);
    HRESULT get_mute(short*);
    HRESULT put_mute(short);
    HRESULT get_playCount(int*);
    HRESULT put_playCount(int);
    HRESULT get_rate(double*);
    HRESULT put_rate(double);
    HRESULT get_balance(int*);
    HRESULT put_balance(int);
    HRESULT get_volume(int*);
    HRESULT put_volume(int);
    HRESULT getMode(BSTR, short*);
    HRESULT setMode(BSTR, short);
    HRESULT get_enableErrorDialogs(short*);
    HRESULT put_enableErrorDialogs(short);
}
enum IID_IWMPClosedCaption = GUID(0x4f2df574, 0xc588, 0x11d3, [0x9e, 0xd0, 0x0, 0xc0, 0x4f, 0xb6, 0xe9, 0x37]);
interface IWMPClosedCaption : IDispatch
{
    HRESULT get_SAMIStyle(BSTR*);
    HRESULT put_SAMIStyle(BSTR);
    HRESULT get_SAMILang(BSTR*);
    HRESULT put_SAMILang(BSTR);
    HRESULT get_SAMIFileName(BSTR*);
    HRESULT put_SAMIFileName(BSTR);
    HRESULT get_captioningId(BSTR*);
    HRESULT put_captioningId(BSTR);
}
enum IID_IWMPPlaylist = GUID(0xd5f0f4f1, 0x130c, 0x11d3, [0xb1, 0x4e, 0x0, 0xc0, 0x4f, 0x79, 0xfa, 0xa6]);
interface IWMPPlaylist : IDispatch
{
    HRESULT get_count(int*);
    HRESULT get_name(BSTR*);
    HRESULT put_name(BSTR);
    HRESULT get_attributeCount(int*);
    HRESULT get_attributeName(int, BSTR*);
    HRESULT get_item(int, IWMPMedia*);
    HRESULT getItemInfo(BSTR, BSTR*);
    HRESULT setItemInfo(BSTR, BSTR);
    HRESULT get_isIdentical(IWMPPlaylist, short*);
    HRESULT clear();
    HRESULT insertItem(int, IWMPMedia);
    HRESULT appendItem(IWMPMedia);
    HRESULT removeItem(IWMPMedia);
    HRESULT moveItem(int, int);
}
enum IID_IWMPCdrom = GUID(0xcfab6e98, 0x8730, 0x11d3, [0xb3, 0x88, 0x0, 0xc0, 0x4f, 0x68, 0x57, 0x4b]);
interface IWMPCdrom : IDispatch
{
    HRESULT get_driveSpecifier(BSTR*);
    HRESULT get_playlist(IWMPPlaylist*);
    HRESULT eject();
}
enum IID_IWMPCdromCollection = GUID(0xee4c8fe2, 0x34b2, 0x11d3, [0xa3, 0xbf, 0x0, 0x60, 0x97, 0xc9, 0xb3, 0x44]);
interface IWMPCdromCollection : IDispatch
{
    HRESULT get_count(int*);
    HRESULT item(int, IWMPCdrom*);
    HRESULT getByDriveSpecifier(BSTR, IWMPCdrom*);
}
enum IID_IWMPStringCollection = GUID(0x4a976298, 0x8c0d, 0x11d3, [0xb3, 0x89, 0x0, 0xc0, 0x4f, 0x68, 0x57, 0x4b]);
interface IWMPStringCollection : IDispatch
{
    HRESULT get_count(int*);
    HRESULT item(int, BSTR*);
}
enum IID_IWMPMediaCollection = GUID(0x8363bc22, 0xb4b4, 0x4b19, [0x98, 0x9d, 0x1c, 0xd7, 0x65, 0x74, 0x9d, 0xd1]);
interface IWMPMediaCollection : IDispatch
{
    HRESULT add(BSTR, IWMPMedia*);
    HRESULT getAll(IWMPPlaylist*);
    HRESULT getByName(BSTR, IWMPPlaylist*);
    HRESULT getByGenre(BSTR, IWMPPlaylist*);
    HRESULT getByAuthor(BSTR, IWMPPlaylist*);
    HRESULT getByAlbum(BSTR, IWMPPlaylist*);
    HRESULT getByAttribute(BSTR, BSTR, IWMPPlaylist*);
    HRESULT remove(IWMPMedia, short);
    HRESULT getAttributeStringCollection(BSTR, BSTR, IWMPStringCollection*);
    HRESULT getMediaAtom(BSTR, int*);
    HRESULT setDeleted(IWMPMedia, short);
    HRESULT isDeleted(IWMPMedia, short*);
}
enum IID_IWMPPlaylistArray = GUID(0x679409c0, 0x99f7, 0x11d3, [0x9f, 0xb7, 0x0, 0x10, 0x5a, 0xa6, 0x20, 0xbb]);
interface IWMPPlaylistArray : IDispatch
{
    HRESULT get_count(int*);
    HRESULT item(int, IWMPPlaylist*);
}
enum IID_IWMPPlaylistCollection = GUID(0x10a13217, 0x23a7, 0x439b, [0xb1, 0xc0, 0xd8, 0x47, 0xc7, 0x9b, 0x77, 0x74]);
interface IWMPPlaylistCollection : IDispatch
{
    HRESULT newPlaylist(BSTR, IWMPPlaylist*);
    HRESULT getAll(IWMPPlaylistArray*);
    HRESULT getByName(BSTR, IWMPPlaylistArray*);
    HRESULT remove(IWMPPlaylist);
    HRESULT setDeleted(IWMPPlaylist, short);
    HRESULT isDeleted(IWMPPlaylist, short*);
    HRESULT importPlaylist(IWMPPlaylist, IWMPPlaylist*);
}
enum IID_IWMPNetwork = GUID(0xec21b779, 0xedef, 0x462d, [0xbb, 0xa4, 0xad, 0x9d, 0xde, 0x2b, 0x29, 0xa7]);
interface IWMPNetwork : IDispatch
{
    HRESULT get_bandWidth(int*);
    HRESULT get_recoveredPackets(int*);
    HRESULT get_sourceProtocol(BSTR*);
    HRESULT get_receivedPackets(int*);
    HRESULT get_lostPackets(int*);
    HRESULT get_receptionQuality(int*);
    HRESULT get_bufferingCount(int*);
    HRESULT get_bufferingProgress(int*);
    HRESULT get_bufferingTime(int*);
    HRESULT put_bufferingTime(int);
    HRESULT get_frameRate(int*);
    HRESULT get_maxBitRate(int*);
    HRESULT get_bitRate(int*);
    HRESULT getProxySettings(BSTR, int*);
    HRESULT setProxySettings(BSTR, int);
    HRESULT getProxyName(BSTR, BSTR*);
    HRESULT setProxyName(BSTR, BSTR);
    HRESULT getProxyPort(BSTR, int*);
    HRESULT setProxyPort(BSTR, int);
    HRESULT getProxyExceptionList(BSTR, BSTR*);
    HRESULT setProxyExceptionList(BSTR, BSTR);
    HRESULT getProxyBypassForLocal(BSTR, short*);
    HRESULT setProxyBypassForLocal(BSTR, short);
    HRESULT get_maxBandwidth(int*);
    HRESULT put_maxBandwidth(int);
    HRESULT get_downloadProgress(int*);
    HRESULT get_encodedFrameRate(int*);
    HRESULT get_framesSkipped(int*);
}
enum IID_IWMPCore = GUID(0xd84cca99, 0xcce2, 0x11d2, [0x9e, 0xcc, 0x0, 0x0, 0xf8, 0x8, 0x59, 0x81]);
interface IWMPCore : IDispatch
{
    HRESULT close();
    HRESULT get_URL(BSTR*);
    HRESULT put_URL(BSTR);
    HRESULT get_openState(WMPOpenState*);
    HRESULT get_playState(WMPPlayState*);
    HRESULT get_controls(IWMPControls*);
    HRESULT get_settings(IWMPSettings*);
    HRESULT get_currentMedia(IWMPMedia*);
    HRESULT put_currentMedia(IWMPMedia);
    HRESULT get_mediaCollection(IWMPMediaCollection*);
    HRESULT get_playlistCollection(IWMPPlaylistCollection*);
    HRESULT get_versionInfo(BSTR*);
    HRESULT launchURL(BSTR);
    HRESULT get_network(IWMPNetwork*);
    HRESULT get_currentPlaylist(IWMPPlaylist*);
    HRESULT put_currentPlaylist(IWMPPlaylist);
    HRESULT get_cdromCollection(IWMPCdromCollection*);
    HRESULT get_closedCaption(IWMPClosedCaption*);
    HRESULT get_isOnline(short*);
    HRESULT get_error(IWMPError*);
    HRESULT get_status(BSTR*);
}
enum IID_IWMPPlayer = GUID(0x6bf52a4f, 0x394a, 0x11d3, [0xb1, 0x53, 0x0, 0xc0, 0x4f, 0x79, 0xfa, 0xa6]);
interface IWMPPlayer : IWMPCore
{
    HRESULT get_enabled(short*);
    HRESULT put_enabled(short);
    HRESULT get_fullScreen(short*);
    HRESULT put_fullScreen(short);
    HRESULT get_enableContextMenu(short*);
    HRESULT put_enableContextMenu(short);
    HRESULT put_uiMode(BSTR);
    HRESULT get_uiMode(BSTR*);
}
enum IID_IWMPPlayer2 = GUID(0xe6b01d1, 0xd407, 0x4c85, [0xbf, 0x5f, 0x1c, 0x1, 0xf6, 0x15, 0x2, 0x80]);
interface IWMPPlayer2 : IWMPCore
{
    HRESULT get_enabled(short*);
    HRESULT put_enabled(short);
    HRESULT get_fullScreen(short*);
    HRESULT put_fullScreen(short);
    HRESULT get_enableContextMenu(short*);
    HRESULT put_enableContextMenu(short);
    HRESULT put_uiMode(BSTR);
    HRESULT get_uiMode(BSTR*);
    HRESULT get_stretchToFit(short*);
    HRESULT put_stretchToFit(short);
    HRESULT get_windowlessVideo(short*);
    HRESULT put_windowlessVideo(short);
}
enum IID_IWMPMedia2 = GUID(0xab7c88bb, 0x143e, 0x4ea4, [0xac, 0xc3, 0xe4, 0x35, 0xb, 0x21, 0x6, 0xc3]);
interface IWMPMedia2 : IWMPMedia
{
    HRESULT get_error(IWMPErrorItem*);
}
enum IID_IWMPControls2 = GUID(0x6f030d25, 0x890, 0x480f, [0x97, 0x75, 0x1f, 0x7e, 0x40, 0xab, 0x5b, 0x8e]);
interface IWMPControls2 : IWMPControls
{
    HRESULT step(int);
}
enum IID_IWMPDVD = GUID(0x8da61686, 0x4668, 0x4a5c, [0xae, 0x5d, 0x80, 0x31, 0x93, 0x29, 0x3d, 0xbe]);
interface IWMPDVD : IDispatch
{
    HRESULT get_isAvailable(BSTR, short*);
    HRESULT get_domain(BSTR*);
    HRESULT topMenu();
    HRESULT titleMenu();
    HRESULT back();
    HRESULT resume();
}
enum IID_IWMPCore2 = GUID(0xbc17e5b7, 0x7561, 0x4c18, [0xbb, 0x90, 0x17, 0xd4, 0x85, 0x77, 0x56, 0x59]);
interface IWMPCore2 : IWMPCore
{
    HRESULT get_dvd(IWMPDVD*);
}
enum IID_IWMPPlayer3 = GUID(0x54062b68, 0x52a, 0x4c25, [0xa3, 0x9f, 0x8b, 0x63, 0x34, 0x65, 0x11, 0xd4]);
interface IWMPPlayer3 : IWMPCore2
{
    HRESULT get_enabled(short*);
    HRESULT put_enabled(short);
    HRESULT get_fullScreen(short*);
    HRESULT put_fullScreen(short);
    HRESULT get_enableContextMenu(short*);
    HRESULT put_enableContextMenu(short);
    HRESULT put_uiMode(BSTR);
    HRESULT get_uiMode(BSTR*);
    HRESULT get_stretchToFit(short*);
    HRESULT put_stretchToFit(short);
    HRESULT get_windowlessVideo(short*);
    HRESULT put_windowlessVideo(short);
}
enum IID_IWMPErrorItem2 = GUID(0xf75ccec0, 0xc67c, 0x475c, [0x93, 0x1e, 0x87, 0x19, 0x87, 0xb, 0xee, 0x7d]);
interface IWMPErrorItem2 : IWMPErrorItem
{
    HRESULT get_condition(int*);
}
enum IID_IWMPRemoteMediaServices = GUID(0xcbb92747, 0x741f, 0x44fe, [0xab, 0x5b, 0xf1, 0xa4, 0x8f, 0x3b, 0x2a, 0x59]);
interface IWMPRemoteMediaServices : IUnknown
{
    HRESULT GetServiceType(BSTR*);
    HRESULT GetApplicationName(BSTR*);
    HRESULT GetScriptableObject(BSTR*, IDispatch*);
    HRESULT GetCustomUIMode(BSTR*);
}
enum IID_IWMPSkinManager = GUID(0x76f2fa6, 0xed30, 0x448b, [0x8c, 0xc5, 0x3f, 0x3e, 0xf3, 0x52, 0x9c, 0x7a]);
interface IWMPSkinManager : IUnknown
{
    HRESULT SetVisualStyle(BSTR);
}
enum IID_IWMPMetadataPicture = GUID(0x5c29bbe0, 0xf87d, 0x4c45, [0xaa, 0x28, 0xa7, 0xf, 0x2, 0x30, 0xff, 0xa9]);
interface IWMPMetadataPicture : IDispatch
{
    HRESULT get_mimeType(BSTR*);
    HRESULT get_pictureType(BSTR*);
    HRESULT get_description(BSTR*);
    HRESULT get_URL(BSTR*);
}
enum IID_IWMPMetadataText = GUID(0x769a72db, 0x13d2, 0x45e2, [0x9c, 0x48, 0x53, 0xca, 0x9d, 0x5b, 0x74, 0x50]);
interface IWMPMetadataText : IDispatch
{
    HRESULT get_description(BSTR*);
    HRESULT get_text(BSTR*);
}
enum IID_IWMPMedia3 = GUID(0xf118efc7, 0xf03a, 0x4fb4, [0x99, 0xc9, 0x1c, 0x2, 0xa5, 0xc1, 0x6, 0x5b]);
interface IWMPMedia3 : IWMPMedia2
{
    HRESULT getAttributeCountByType(BSTR, BSTR, int*);
    HRESULT getItemInfoByType(BSTR, BSTR, int, VARIANT*);
}
enum IID_IWMPSettings2 = GUID(0xfda937a4, 0xeece, 0x4da5, [0xa0, 0xb6, 0x39, 0xbf, 0x89, 0xad, 0xe2, 0xc2]);
interface IWMPSettings2 : IWMPSettings
{
    HRESULT get_defaultAudioLanguage(int*);
    HRESULT get_mediaAccessRights(BSTR*);
    HRESULT requestMediaAccessRights(BSTR, short*);
}
enum IID_IWMPControls3 = GUID(0xa1d1110e, 0xd545, 0x476a, [0x9a, 0x78, 0xac, 0x3e, 0x4c, 0xb1, 0xe6, 0xbd]);
interface IWMPControls3 : IWMPControls2
{
    HRESULT get_audioLanguageCount(int*);
    HRESULT getAudioLanguageID(int, int*);
    HRESULT getAudioLanguageDescription(int, BSTR*);
    HRESULT get_currentAudioLanguage(int*);
    HRESULT put_currentAudioLanguage(int);
    HRESULT get_currentAudioLanguageIndex(int*);
    HRESULT put_currentAudioLanguageIndex(int);
    HRESULT getLanguageName(int, BSTR*);
    HRESULT get_currentPositionTimecode(BSTR*);
    HRESULT put_currentPositionTimecode(BSTR);
}
enum IID_IWMPClosedCaption2 = GUID(0x350ba78b, 0x6bc8, 0x4113, [0xa5, 0xf5, 0x31, 0x20, 0x56, 0x93, 0x4e, 0xb6]);
interface IWMPClosedCaption2 : IWMPClosedCaption
{
    HRESULT get_SAMILangCount(int*);
    HRESULT getSAMILangName(int, BSTR*);
    HRESULT getSAMILangID(int, int*);
    HRESULT get_SAMIStyleCount(int*);
    HRESULT getSAMIStyleName(int, BSTR*);
}
enum IID_IWMPPlayerApplication = GUID(0x40897764, 0xceab, 0x47be, [0xad, 0x4a, 0x8e, 0x28, 0x53, 0x7f, 0x9b, 0xbf]);
interface IWMPPlayerApplication : IDispatch
{
    HRESULT switchToPlayerApplication();
    HRESULT switchToControl();
    HRESULT get_playerDocked(short*);
    HRESULT get_hasDisplay(short*);
}
enum IID_IWMPCore3 = GUID(0x7587c667, 0x628f, 0x499f, [0x88, 0xe7, 0x6a, 0x6f, 0x4e, 0x88, 0x84, 0x64]);
interface IWMPCore3 : IWMPCore2
{
    HRESULT newPlaylist(BSTR, BSTR, IWMPPlaylist*);
    HRESULT newMedia(BSTR, IWMPMedia*);
}
enum IID_IWMPPlayer4 = GUID(0x6c497d62, 0x8919, 0x413c, [0x82, 0xdb, 0xe9, 0x35, 0xfb, 0x3e, 0xc5, 0x84]);
interface IWMPPlayer4 : IWMPCore3
{
    HRESULT get_enabled(short*);
    HRESULT put_enabled(short);
    HRESULT get_fullScreen(short*);
    HRESULT put_fullScreen(short);
    HRESULT get_enableContextMenu(short*);
    HRESULT put_enableContextMenu(short);
    HRESULT put_uiMode(BSTR);
    HRESULT get_uiMode(BSTR*);
    HRESULT get_stretchToFit(short*);
    HRESULT put_stretchToFit(short);
    HRESULT get_windowlessVideo(short*);
    HRESULT put_windowlessVideo(short);
    HRESULT get_isRemote(short*);
    HRESULT get_playerApplication(IWMPPlayerApplication*);
    HRESULT openPlayer(BSTR);
}
enum IID_IWMPPlayerServices = GUID(0x1d01fbdb, 0xade2, 0x4c8d, [0x98, 0x42, 0xc1, 0x90, 0xb9, 0x5c, 0x33, 0x6]);
interface IWMPPlayerServices : IUnknown
{
    HRESULT activateUIPlugin(BSTR);
    HRESULT setTaskPane(BSTR);
    HRESULT setTaskPaneURL(BSTR, BSTR, BSTR);
}
alias WMPSyncState = int;
enum : int
{
    wmpssUnknown       = 0x00000000,
    wmpssSynchronizing = 0x00000001,
    wmpssStopped       = 0x00000002,
    wmpssEstimating    = 0x00000003,
    wmpssLast          = 0x00000004,
}

alias WMPDeviceStatus = int;
enum : int
{
    wmpdsUnknown             = 0x00000000,
    wmpdsPartnershipExists   = 0x00000001,
    wmpdsPartnershipDeclined = 0x00000002,
    wmpdsPartnershipAnother  = 0x00000003,
    wmpdsManualDevice        = 0x00000004,
    wmpdsNewDevice           = 0x00000005,
    wmpdsLast                = 0x00000006,
}

enum IID_IWMPSyncDevice = GUID(0x82a2986c, 0x293, 0x4fd0, [0xb2, 0x79, 0xb2, 0x1b, 0x86, 0xc0, 0x58, 0xbe]);
interface IWMPSyncDevice : IUnknown
{
    HRESULT get_friendlyName(BSTR*);
    HRESULT put_friendlyName(BSTR);
    HRESULT get_deviceName(BSTR*);
    HRESULT get_deviceId(BSTR*);
    HRESULT get_partnershipIndex(int*);
    HRESULT get_connected(short*);
    HRESULT get_status(WMPDeviceStatus*);
    HRESULT get_syncState(WMPSyncState*);
    HRESULT get_progress(int*);
    HRESULT getItemInfo(BSTR, BSTR*);
    HRESULT createPartnership(short);
    HRESULT deletePartnership();
    HRESULT start();
    HRESULT stop();
    HRESULT showSettings();
    HRESULT isIdentical(IWMPSyncDevice, short*);
}
enum IID_IWMPSyncServices = GUID(0x8b5050ff, 0xe0a4, 0x4808, [0xb3, 0xa8, 0x89, 0x3a, 0x9e, 0x1e, 0xd8, 0x94]);
interface IWMPSyncServices : IUnknown
{
    HRESULT get_deviceCount(int*);
    HRESULT getDevice(int, IWMPSyncDevice*);
}
enum IID_IWMPPlayerServices2 = GUID(0x1bb1592f, 0xf040, 0x418a, [0x9f, 0x71, 0x17, 0xc7, 0x51, 0x2b, 0x4d, 0x70]);
interface IWMPPlayerServices2 : IWMPPlayerServices
{
    HRESULT setBackgroundProcessingPriority(BSTR);
}
alias WMPRipState = int;
enum : int
{
    wmprsUnknown = 0x00000000,
    wmprsRipping = 0x00000001,
    wmprsStopped = 0x00000002,
}

alias WMPBurnFormat = int;
enum : int
{
    wmpbfAudioCD = 0x00000000,
    wmpbfDataCD  = 0x00000001,
}

alias WMPBurnState = int;
enum : int
{
    wmpbsUnknown              = 0x00000000,
    wmpbsBusy                 = 0x00000001,
    wmpbsReady                = 0x00000002,
    wmpbsWaitingForDisc       = 0x00000003,
    wmpbsRefreshStatusPending = 0x00000004,
    wmpbsPreparingToBurn      = 0x00000005,
    wmpbsBurning              = 0x00000006,
    wmpbsStopped              = 0x00000007,
    wmpbsErasing              = 0x00000008,
    wmpbsDownloading          = 0x00000009,
}

alias WMPStringCollectionChangeEventType = int;
enum : int
{
    wmpsccetUnknown      = 0x00000000,
    wmpsccetInsert       = 0x00000001,
    wmpsccetChange       = 0x00000002,
    wmpsccetDelete       = 0x00000003,
    wmpsccetClear        = 0x00000004,
    wmpsccetBeginUpdates = 0x00000005,
    wmpsccetEndUpdates   = 0x00000006,
}

enum IID_IWMPCdromRip = GUID(0x56e2294f, 0x69ed, 0x4629, [0xa8, 0x69, 0xae, 0xa7, 0x2c, 0xd, 0xcc, 0x2c]);
interface IWMPCdromRip : IUnknown
{
    HRESULT get_ripState(WMPRipState*);
    HRESULT get_ripProgress(int*);
    HRESULT startRip();
    HRESULT stopRip();
}
enum IID_IWMPCdromBurn = GUID(0xbd94dbeb, 0x417f, 0x4928, [0xaa, 0x6, 0x8, 0x7d, 0x56, 0xed, 0x9b, 0x59]);
interface IWMPCdromBurn : IUnknown
{
    HRESULT isAvailable(BSTR, short*);
    HRESULT getItemInfo(BSTR, BSTR*);
    HRESULT get_label(BSTR*);
    HRESULT put_label(BSTR);
    HRESULT get_burnFormat(WMPBurnFormat*);
    HRESULT put_burnFormat(WMPBurnFormat);
    HRESULT get_burnPlaylist(IWMPPlaylist*);
    HRESULT put_burnPlaylist(IWMPPlaylist);
    HRESULT refreshStatus();
    HRESULT get_burnState(WMPBurnState*);
    HRESULT get_burnProgress(int*);
    HRESULT startBurn();
    HRESULT stopBurn();
    HRESULT erase();
}
enum IID_IWMPQuery = GUID(0xa00918f3, 0xa6b0, 0x4bfb, [0x91, 0x89, 0xfd, 0x83, 0x4c, 0x7b, 0xc5, 0xa5]);
interface IWMPQuery : IDispatch
{
    HRESULT addCondition(BSTR, BSTR, BSTR);
    HRESULT beginNextGroup();
}
enum IID_IWMPMediaCollection2 = GUID(0x8ba957f5, 0xfd8c, 0x4791, [0xb8, 0x2d, 0xf8, 0x40, 0x40, 0x1e, 0xe4, 0x74]);
interface IWMPMediaCollection2 : IWMPMediaCollection
{
    HRESULT createQuery(IWMPQuery*);
    HRESULT getPlaylistByQuery(IWMPQuery, BSTR, BSTR, short, IWMPPlaylist*);
    HRESULT getStringCollectionByQuery(BSTR, IWMPQuery, BSTR, BSTR, short, IWMPStringCollection*);
    HRESULT getByAttributeAndMediaType(BSTR, BSTR, BSTR, IWMPPlaylist*);
}
enum IID_IWMPStringCollection2 = GUID(0x46ad648d, 0x53f1, 0x4a74, [0x92, 0xe2, 0x2a, 0x1b, 0x68, 0xd6, 0x3f, 0xd4]);
interface IWMPStringCollection2 : IWMPStringCollection
{
    HRESULT isIdentical(IWMPStringCollection2, short*);
    HRESULT getItemInfo(int, BSTR, BSTR*);
    HRESULT getAttributeCountByType(int, BSTR, BSTR, int*);
    HRESULT getItemInfoByType(int, BSTR, BSTR, int, VARIANT*);
}
alias WMPLibraryType = int;
enum : int
{
    wmpltUnknown        = 0x00000000,
    wmpltAll            = 0x00000001,
    wmpltLocal          = 0x00000002,
    wmpltRemote         = 0x00000003,
    wmpltDisc           = 0x00000004,
    wmpltPortableDevice = 0x00000005,
}

enum IID_IWMPLibrary = GUID(0x3df47861, 0x7df1, 0x4c1f, [0xa8, 0x1b, 0x4c, 0x26, 0xf0, 0xf7, 0xa7, 0xc6]);
interface IWMPLibrary : IUnknown
{
    HRESULT get_name(BSTR*);
    HRESULT get_type(WMPLibraryType*);
    HRESULT get_mediaCollection(IWMPMediaCollection*);
    HRESULT isIdentical(IWMPLibrary, short*);
}
enum IID_IWMPLibraryServices = GUID(0x39c2f8d5, 0x1cf2, 0x4d5e, [0xae, 0x9, 0xd7, 0x34, 0x92, 0xcf, 0x9e, 0xaa]);
interface IWMPLibraryServices : IUnknown
{
    HRESULT getCountByType(WMPLibraryType, int*);
    HRESULT getLibraryByType(WMPLibraryType, int, IWMPLibrary*);
}
enum IID_IWMPLibrarySharingServices = GUID(0x82cba86b, 0x9f04, 0x474b, [0xa3, 0x65, 0xd6, 0xdd, 0x14, 0x66, 0xe5, 0x41]);
interface IWMPLibrarySharingServices : IUnknown
{
    HRESULT isLibraryShared(short*);
    HRESULT isLibrarySharingEnabled(short*);
    HRESULT showLibrarySharing();
}
alias WMPFolderScanState = int;
enum : int
{
    wmpfssUnknown  = 0x00000000,
    wmpfssScanning = 0x00000001,
    wmpfssUpdating = 0x00000002,
    wmpfssStopped  = 0x00000003,
}

enum IID_IWMPFolderMonitorServices = GUID(0x788c8743, 0xe57f, 0x439d, [0xa4, 0x68, 0x5b, 0xc7, 0x7f, 0x2e, 0x59, 0xc6]);
interface IWMPFolderMonitorServices : IUnknown
{
    HRESULT get_count(int*);
    HRESULT item(int, BSTR*);
    HRESULT add(BSTR);
    HRESULT remove(int);
    HRESULT get_scanState(WMPFolderScanState*);
    HRESULT get_currentFolder(BSTR*);
    HRESULT get_scannedFilesCount(int*);
    HRESULT get_addedFilesCount(int*);
    HRESULT get_updateProgress(int*);
    HRESULT startScan();
    HRESULT stopScan();
}
enum IID_IWMPSyncDevice2 = GUID(0x88afb4b2, 0x140a, 0x44d2, [0x91, 0xe6, 0x45, 0x43, 0xda, 0x46, 0x7c, 0xd1]);
interface IWMPSyncDevice2 : IWMPSyncDevice
{
    HRESULT setItemInfo(BSTR, BSTR);
}
enum IID_IWMPSyncDevice3 = GUID(0xb22c85f9, 0x263c, 0x4372, [0xa0, 0xda, 0xb5, 0x18, 0xdb, 0x9b, 0x40, 0x98]);
interface IWMPSyncDevice3 : IWMPSyncDevice2
{
    HRESULT estimateSyncSize(IWMPPlaylist, IWMPPlaylist);
    HRESULT cancelEstimation();
}
enum IID_IWMPLibrary2 = GUID(0xdd578a4e, 0x79b1, 0x426c, [0xbf, 0x8f, 0x3a, 0xdd, 0x90, 0x72, 0x50, 0xb]);
interface IWMPLibrary2 : IWMPLibrary
{
    HRESULT getItemInfo(BSTR, BSTR*);
}
enum CLSID_WMPLib = GUID(0x6bf52a50, 0x394a, 0x11d3, [0xb1, 0x53, 0x0, 0xc0, 0x4f, 0x79, 0xfa, 0xa6]);
struct WMPLib
{
}
enum CLSID_WMPRemoteMediaServices = GUID(0xdf333473, 0x2cf7, 0x4be2, [0x90, 0x7f, 0x9a, 0xad, 0x56, 0x61, 0x36, 0x4f]);
struct WMPRemoteMediaServices
{
}
enum IID_IWMPEvents = GUID(0x19a6627b, 0xda9e, 0x47c1, [0xbb, 0x23, 0x0, 0xb5, 0xe6, 0x68, 0x23, 0x6a]);
interface IWMPEvents : IUnknown
{
    void OpenStateChange(int);
    void PlayStateChange(int);
    void AudioLanguageChange(int);
    void StatusChange();
    void ScriptCommand(BSTR, BSTR);
    void NewStream();
    void Disconnect(int);
    void Buffering(short);
    void Error();
    void Warning(int, int, BSTR);
    void EndOfStream(int);
    void PositionChange(double, double);
    void MarkerHit(int);
    void DurationUnitChange(int);
    void CdromMediaChange(int);
    void PlaylistChange(IDispatch, WMPPlaylistChangeEventType);
    void CurrentPlaylistChange(WMPPlaylistChangeEventType);
    void CurrentPlaylistItemAvailable(BSTR);
    void MediaChange(IDispatch);
    void CurrentMediaItemAvailable(BSTR);
    void CurrentItemChange(IDispatch);
    void MediaCollectionChange();
    void MediaCollectionAttributeStringAdded(BSTR, BSTR);
    void MediaCollectionAttributeStringRemoved(BSTR, BSTR);
    void MediaCollectionAttributeStringChanged(BSTR, BSTR, BSTR);
    void PlaylistCollectionChange();
    void PlaylistCollectionPlaylistAdded(BSTR);
    void PlaylistCollectionPlaylistRemoved(BSTR);
    void PlaylistCollectionPlaylistSetAsDeleted(BSTR, short);
    void ModeChange(BSTR, short);
    void MediaError(IDispatch);
    void OpenPlaylistSwitch(IDispatch);
    void DomainChange(BSTR);
    void SwitchedToPlayerApplication();
    void SwitchedToControl();
    void PlayerDockedStateChange();
    void PlayerReconnect();
    void Click(short, short, int, int);
    void DoubleClick(short, short, int, int);
    void KeyDown(short, short);
    void KeyPress(short);
    void KeyUp(short, short);
    void MouseDown(short, short, int, int);
    void MouseMove(short, short, int, int);
    void MouseUp(short, short, int, int);
}
enum IID_IWMPEvents2 = GUID(0x1e7601fa, 0x47ea, 0x4107, [0x9e, 0xa9, 0x90, 0x4, 0xed, 0x96, 0x84, 0xff]);
interface IWMPEvents2 : IWMPEvents
{
    void DeviceConnect(IWMPSyncDevice);
    void DeviceDisconnect(IWMPSyncDevice);
    void DeviceStatusChange(IWMPSyncDevice, WMPDeviceStatus);
    void DeviceSyncStateChange(IWMPSyncDevice, WMPSyncState);
    void DeviceSyncError(IWMPSyncDevice, IDispatch);
    void CreatePartnershipComplete(IWMPSyncDevice, HRESULT);
}
enum IID_IWMPEvents3 = GUID(0x1f504270, 0xa66b, 0x4223, [0x8e, 0x96, 0x26, 0xa0, 0x6c, 0x63, 0xd6, 0x9f]);
interface IWMPEvents3 : IWMPEvents2
{
    void CdromRipStateChange(IWMPCdromRip, WMPRipState);
    void CdromRipMediaError(IWMPCdromRip, IDispatch);
    void CdromBurnStateChange(IWMPCdromBurn, WMPBurnState);
    void CdromBurnMediaError(IWMPCdromBurn, IDispatch);
    void CdromBurnError(IWMPCdromBurn, HRESULT);
    void LibraryConnect(IWMPLibrary);
    void LibraryDisconnect(IWMPLibrary);
    void FolderScanStateChange(WMPFolderScanState);
    void StringCollectionChange(IDispatch, WMPStringCollectionChangeEventType, int);
    void MediaCollectionMediaAdded(IDispatch);
    void MediaCollectionMediaRemoved(IDispatch);
}
enum IID_IWMPEvents4 = GUID(0x26dabcfa, 0x306b, 0x404d, [0x9a, 0x6f, 0x63, 0xa, 0x84, 0x5, 0x4, 0x8d]);
interface IWMPEvents4 : IWMPEvents3
{
    void DeviceEstimation(IWMPSyncDevice, HRESULT, long, long);
}
enum IID__WMPOCXEvents = GUID(0x6bf52a51, 0x394a, 0x11d3, [0xb1, 0x53, 0x0, 0xc0, 0x4f, 0x79, 0xfa, 0xa6]);
interface _WMPOCXEvents : IDispatch
{
}
enum IID_IWMPNodeRealEstate = GUID(0x42751198, 0x5a50, 0x4460, [0xbc, 0xb4, 0x70, 0x9f, 0x8b, 0xdc, 0x8e, 0x59]);
interface IWMPNodeRealEstate : IUnknown
{
    HRESULT GetDesiredSize(SIZE*);
    HRESULT SetRects(const(RECT)*, const(RECT)*, const(RECT)*);
    HRESULT GetRects(RECT*, RECT*, RECT*);
    HRESULT SetWindowless(BOOL);
    HRESULT GetWindowless(BOOL*);
    HRESULT SetFullScreen(BOOL);
    HRESULT GetFullScreen(BOOL*);
}
enum IID_IWMPNodeRealEstateHost = GUID(0x1491087d, 0x2c6b, 0x44c8, [0xb0, 0x19, 0xb3, 0xc9, 0x29, 0xd2, 0xad, 0xa9]);
interface IWMPNodeRealEstateHost : IUnknown
{
    HRESULT OnDesiredSizeChange(SIZE*);
    HRESULT OnFullScreenTransition(BOOL);
}
enum IID_IWMPNodeWindowed = GUID(0x96740bfa, 0xc56a, 0x45d1, [0xa3, 0xa4, 0x76, 0x29, 0x14, 0xd4, 0xad, 0xe9]);
interface IWMPNodeWindowed : IUnknown
{
    HRESULT SetOwnerWindow(long);
    HRESULT GetOwnerWindow(long*);
}
enum IID_IWMPNodeWindowedHost = GUID(0xa300415a, 0x54aa, 0x4081, [0xad, 0xbf, 0x3b, 0x13, 0x61, 0xd, 0x89, 0x58]);
interface IWMPNodeWindowedHost : IUnknown
{
    HRESULT OnWindowMessageFromRenderer(uint, WPARAM, LPARAM, LRESULT*, BOOL*);
}
enum IID_IWMPWindowMessageSink = GUID(0x3a0daa30, 0x908d, 0x4789, [0xba, 0x87, 0xae, 0xd8, 0x79, 0xb5, 0xc4, 0x9b]);
interface IWMPWindowMessageSink : IUnknown
{
    HRESULT OnWindowMessage(uint, WPARAM, LPARAM, LRESULT*, BOOL*);
}
enum IID_IWMPNodeWindowless = GUID(0x9b9199ad, 0x780c, 0x4eda, [0xb8, 0x16, 0x26, 0x1e, 0xba, 0x5d, 0x15, 0x75]);
interface IWMPNodeWindowless : IWMPWindowMessageSink
{
    HRESULT OnDraw(long, const(RECT)*);
}
enum IID_IWMPNodeWindowlessHost = GUID(0xbe7017c6, 0xce34, 0x4901, [0x81, 0x6, 0x77, 0x3, 0x81, 0xaa, 0x6e, 0x3e]);
interface IWMPNodeWindowlessHost : IUnknown
{
    HRESULT InvalidateRect(const(RECT)*, BOOL);
}
enum IID_IWMPVideoRenderConfig = GUID(0x6d6cf803, 0x1ec0, 0x4c8d, [0xb3, 0xca, 0xf1, 0x8e, 0x27, 0x28, 0x20, 0x74]);
interface IWMPVideoRenderConfig : IUnknown
{
    HRESULT put_presenterActivate(IMFActivate);
}
enum IID_IWMPAudioRenderConfig = GUID(0xe79c6349, 0x5997, 0x4ce4, [0x91, 0x7c, 0x22, 0xa3, 0x39, 0x1e, 0xc5, 0x64]);
interface IWMPAudioRenderConfig : IUnknown
{
    HRESULT get_audioOutputDevice(BSTR*);
    HRESULT put_audioOutputDevice(BSTR);
}
enum IID_IWMPRenderConfig = GUID(0x959506c1, 0x314, 0x4ec5, [0x9e, 0x61, 0x85, 0x28, 0xdb, 0x5e, 0x54, 0x78]);
interface IWMPRenderConfig : IUnknown
{
    HRESULT put_inProcOnly(BOOL);
    HRESULT get_inProcOnly(BOOL*);
}
alias WMPServices_StreamState = int;
enum : int
{
    WMPServices_StreamState_Stop  = 0x00000000,
    WMPServices_StreamState_Pause = 0x00000001,
    WMPServices_StreamState_Play  = 0x00000002,
}

enum IID_IWMPServices = GUID(0xafb6b76b, 0x1e20, 0x4198, [0x83, 0xb3, 0x19, 0x1d, 0xb6, 0xe0, 0xb1, 0x49]);
interface IWMPServices : IUnknown
{
    HRESULT GetStreamTime(long*);
    HRESULT GetStreamState(WMPServices_StreamState*);
}
enum IID_IWMPMediaPluginRegistrar = GUID(0x68e27045, 0x5bd, 0x40b2, [0x97, 0x20, 0x23, 0x8, 0x8c, 0x78, 0xe3, 0x90]);
interface IWMPMediaPluginRegistrar : IUnknown
{
    HRESULT WMPRegisterPlayerPlugin(PWSTR, PWSTR, PWSTR, uint, GUID, GUID, uint, void*);
    HRESULT WMPUnRegisterPlayerPlugin(GUID, GUID);
}
alias WMPPlugin_Caps = int;
enum : int
{
    WMPPlugin_Caps_CannotConvertFormats = 0x00000001,
}

enum IID_IWMPPlugin = GUID(0xf1392a70, 0x24c, 0x42bb, [0xa9, 0x98, 0x73, 0xdf, 0xdf, 0xe7, 0xd5, 0xa7]);
interface IWMPPlugin : IUnknown
{
    HRESULT Init(ulong);
    HRESULT Shutdown();
    HRESULT GetID(GUID*);
    HRESULT GetCaps(uint*);
    HRESULT AdviseWMPServices(IWMPServices);
    HRESULT UnAdviseWMPServices();
}
enum IID_IWMPPluginEnable = GUID(0x5fca444c, 0x7ad1, 0x479d, [0xa4, 0xef, 0x40, 0x56, 0x6a, 0x53, 0x9, 0xd6]);
interface IWMPPluginEnable : IUnknown
{
    HRESULT SetEnable(BOOL);
    HRESULT GetEnable(BOOL*);
}
enum IID_IWMPGraphCreation = GUID(0xbfb377e5, 0xc594, 0x4369, [0xa9, 0x70, 0xde, 0x89, 0x6d, 0x5e, 0xce, 0x74]);
interface IWMPGraphCreation : IUnknown
{
    HRESULT GraphCreationPreRender(IUnknown, IUnknown);
    HRESULT GraphCreationPostRender(IUnknown);
    HRESULT GetGraphCreationFlags(uint*);
}
enum IID_IWMPConvert = GUID(0xd683162f, 0x57d4, 0x4108, [0x83, 0x73, 0x4a, 0x96, 0x76, 0xd1, 0xc2, 0xe9]);
interface IWMPConvert : IUnknown
{
    HRESULT ConvertFile(BSTR, BSTR, BSTR*);
    HRESULT GetErrorURL(BSTR*);
}
enum IID_IWMPTranscodePolicy = GUID(0xb64cbac3, 0x401c, 0x4327, [0xa3, 0xe8, 0xb9, 0xfe, 0xb3, 0xa8, 0xc2, 0x5c]);
interface IWMPTranscodePolicy : IUnknown
{
    HRESULT allowTranscode(short*);
}
enum IID_IWMPUserEventSink = GUID(0xcfccfa72, 0xc343, 0x48c3, [0xa2, 0xde, 0xb7, 0xa4, 0x40, 0x2e, 0x39, 0xf2]);
interface IWMPUserEventSink : IUnknown
{
    HRESULT NotifyUserEvent(int);
}
enum CLSID_FeedsManager = GUID(0xfaeb54c4, 0xf66f, 0x4806, [0x83, 0xa0, 0x80, 0x52, 0x99, 0xf5, 0xe3, 0xad]);
struct FeedsManager
{
}
enum CLSID_FeedFolderWatcher = GUID(0x281001ed, 0x7765, 0x4cb0, [0x84, 0xaf, 0xe9, 0xb3, 0x87, 0xaf, 0x1, 0xff]);
struct FeedFolderWatcher
{
}
enum CLSID_FeedWatcher = GUID(0x18a6737b, 0xf433, 0x4687, [0x89, 0xbc, 0xa1, 0xb4, 0xdf, 0xb9, 0xf1, 0x23]);
struct FeedWatcher
{
}
alias FEEDS_BACKGROUNDSYNC_ACTION = int;
enum : int
{
    FBSA_DISABLE = 0x00000000,
    FBSA_ENABLE  = 0x00000001,
    FBSA_RUNNOW  = 0x00000002,
}

alias FEEDS_BACKGROUNDSYNC_STATUS = int;
enum : int
{
    FBSS_DISABLED = 0x00000000,
    FBSS_ENABLED  = 0x00000001,
}

alias FEEDS_EVENTS_SCOPE = int;
enum : int
{
    FES_ALL                    = 0x00000000,
    FES_SELF_ONLY              = 0x00000001,
    FES_SELF_AND_CHILDREN_ONLY = 0x00000002,
}

alias FEEDS_EVENTS_MASK = int;
enum : int
{
    FEM_FOLDEREVENTS = 0x00000001,
    FEM_FEEDEVENTS   = 0x00000002,
}

alias FEEDS_XML_SORT_PROPERTY = int;
enum : int
{
    FXSP_NONE         = 0x00000000,
    FXSP_PUBDATE      = 0x00000001,
    FXSP_DOWNLOADTIME = 0x00000002,
}

alias FEEDS_XML_SORT_ORDER = int;
enum : int
{
    FXSO_NONE       = 0x00000000,
    FXSO_ASCENDING  = 0x00000001,
    FXSO_DESCENDING = 0x00000002,
}

alias FEEDS_XML_FILTER_FLAGS = int;
enum : int
{
    FXFF_ALL    = 0x00000000,
    FXFF_UNREAD = 0x00000001,
    FXFF_READ   = 0x00000002,
}

alias FEEDS_XML_INCLUDE_FLAGS = int;
enum : int
{
    FXIF_NONE          = 0x00000000,
    FXIF_CF_EXTENSIONS = 0x00000001,
}

alias FEEDS_DOWNLOAD_STATUS = int;
enum : int
{
    FDS_NONE            = 0x00000000,
    FDS_PENDING         = 0x00000001,
    FDS_DOWNLOADING     = 0x00000002,
    FDS_DOWNLOADED      = 0x00000003,
    FDS_DOWNLOAD_FAILED = 0x00000004,
}

alias FEEDS_SYNC_SETTING = int;
enum : int
{
    FSS_DEFAULT   = 0x00000000,
    FSS_INTERVAL  = 0x00000001,
    FSS_MANUAL    = 0x00000002,
    FSS_SUGGESTED = 0x00000003,
}

alias FEEDS_DOWNLOAD_ERROR = int;
enum : int
{
    FDE_NONE                         = 0x00000000,
    FDE_DOWNLOAD_FAILED              = 0x00000001,
    FDE_INVALID_FEED_FORMAT          = 0x00000002,
    FDE_NORMALIZATION_FAILED         = 0x00000003,
    FDE_PERSISTENCE_FAILED           = 0x00000004,
    FDE_DOWNLOAD_BLOCKED             = 0x00000005,
    FDE_CANCELED                     = 0x00000006,
    FDE_UNSUPPORTED_AUTH             = 0x00000007,
    FDE_BACKGROUND_DOWNLOAD_DISABLED = 0x00000008,
    FDE_NOT_EXIST                    = 0x00000009,
    FDE_UNSUPPORTED_MSXML            = 0x0000000a,
    FDE_UNSUPPORTED_DTD              = 0x0000000b,
    FDE_DOWNLOAD_SIZE_LIMIT_EXCEEDED = 0x0000000c,
    FDE_ACCESS_DENIED                = 0x0000000d,
    FDE_AUTH_FAILED                  = 0x0000000e,
    FDE_INVALID_AUTH                 = 0x0000000f,
}

alias FEEDS_EVENTS_ITEM_COUNT_FLAGS = int;
enum : int
{
    FEICF_READ_ITEM_COUNT_CHANGED   = 0x00000001,
    FEICF_UNREAD_ITEM_COUNT_CHANGED = 0x00000002,
}

alias FEEDS_ERROR_CODE = int;
enum : int
{
    FEC_E_ERRORBASE                 = 0xc0040200,
    FEC_E_INVALIDMSXMLPROPERTY      = 0xc0040200,
    FEC_E_DOWNLOADSIZELIMITEXCEEDED = 0xc0040201,
}

enum IID_IXFeedsManager = GUID(0x5357e238, 0xfb12, 0x4aca, [0xa9, 0x30, 0xca, 0xb7, 0x83, 0x2b, 0x84, 0xbf]);
interface IXFeedsManager : IUnknown
{
    HRESULT RootFolder(const(GUID)*, void**);
    HRESULT IsSubscribed(const(wchar)*, BOOL*);
    HRESULT ExistsFeed(const(wchar)*, BOOL*);
    HRESULT GetFeed(const(wchar)*, const(GUID)*, void**);
    HRESULT GetFeedByUrl(const(wchar)*, const(GUID)*, void**);
    HRESULT ExistsFolder(const(wchar)*, BOOL*);
    HRESULT GetFolder(const(wchar)*, const(GUID)*, void**);
    HRESULT DeleteFeed(const(wchar)*);
    HRESULT DeleteFolder(const(wchar)*);
    HRESULT BackgroundSync(FEEDS_BACKGROUNDSYNC_ACTION);
    HRESULT BackgroundSyncStatus(FEEDS_BACKGROUNDSYNC_STATUS*);
    HRESULT DefaultInterval(uint*);
    HRESULT SetDefaultInterval(uint);
    HRESULT AsyncSyncAll();
    HRESULT Normalize(IStream, IStream*);
    HRESULT ItemCountLimit(uint*);
}
enum IID_IXFeedsEnum = GUID(0xdc43a9d5, 0x5015, 0x4301, [0x8c, 0x96, 0xa4, 0x74, 0x34, 0xb4, 0xd6, 0x58]);
interface IXFeedsEnum : IUnknown
{
    HRESULT Count(uint*);
    HRESULT Item(uint, const(GUID)*, void**);
}
enum IID_IXFeedFolder = GUID(0x4c963678, 0x3a51, 0x4b88, [0x85, 0x31, 0x98, 0xb9, 0xb, 0x65, 0x8, 0xf2]);
interface IXFeedFolder : IUnknown
{
    HRESULT Feeds(IXFeedsEnum*);
    HRESULT Subfolders(IXFeedsEnum*);
    HRESULT CreateFeed(const(wchar)*, const(wchar)*, const(GUID)*, void**);
    HRESULT CreateSubfolder(const(wchar)*, const(GUID)*, void**);
    HRESULT ExistsFeed(const(wchar)*, BOOL*);
    HRESULT ExistsSubfolder(const(wchar)*, BOOL*);
    HRESULT GetFeed(const(wchar)*, const(GUID)*, void**);
    HRESULT GetSubfolder(const(wchar)*, const(GUID)*, void**);
    HRESULT Delete();
    HRESULT Name(PWSTR*);
    HRESULT Rename(const(wchar)*);
    HRESULT Path(PWSTR*);
    HRESULT Move(const(wchar)*);
    HRESULT Parent(const(GUID)*, void**);
    HRESULT IsRoot(BOOL*);
    HRESULT GetWatcher(FEEDS_EVENTS_SCOPE, FEEDS_EVENTS_MASK, const(GUID)*, void**);
    HRESULT TotalUnreadItemCount(uint*);
    HRESULT TotalItemCount(uint*);
}
enum IID_IXFeedFolderEvents = GUID(0x7964b769, 0x234a, 0x4bb1, [0xa5, 0xf4, 0x90, 0x45, 0x4c, 0x8a, 0xd0, 0x7e]);
interface IXFeedFolderEvents : IUnknown
{
    HRESULT Error();
    HRESULT FolderAdded(const(wchar)*);
    HRESULT FolderDeleted(const(wchar)*);
    HRESULT FolderRenamed(const(wchar)*, const(wchar)*);
    HRESULT FolderMovedFrom(const(wchar)*, const(wchar)*);
    HRESULT FolderMovedTo(const(wchar)*, const(wchar)*);
    HRESULT FolderItemCountChanged(const(wchar)*, int);
    HRESULT FeedAdded(const(wchar)*);
    HRESULT FeedDeleted(const(wchar)*);
    HRESULT FeedRenamed(const(wchar)*, const(wchar)*);
    HRESULT FeedUrlChanged(const(wchar)*);
    HRESULT FeedMovedFrom(const(wchar)*, const(wchar)*);
    HRESULT FeedMovedTo(const(wchar)*, const(wchar)*);
    HRESULT FeedDownloading(const(wchar)*);
    HRESULT FeedDownloadCompleted(const(wchar)*, FEEDS_DOWNLOAD_ERROR);
    HRESULT FeedItemCountChanged(const(wchar)*, int);
}
enum IID_IXFeed = GUID(0xa44179a4, 0xe0f6, 0x403b, [0xaf, 0x8d, 0xd0, 0x80, 0xf4, 0x25, 0xa4, 0x51]);
interface IXFeed : IUnknown
{
    HRESULT Xml(uint, FEEDS_XML_SORT_PROPERTY, FEEDS_XML_SORT_ORDER, FEEDS_XML_FILTER_FLAGS, FEEDS_XML_INCLUDE_FLAGS, IStream*);
    HRESULT Name(PWSTR*);
    HRESULT Rename(const(wchar)*);
    HRESULT Url(PWSTR*);
    HRESULT SetUrl(const(wchar)*);
    HRESULT LocalId(GUID*);
    HRESULT Path(PWSTR*);
    HRESULT Move(const(wchar)*);
    HRESULT Parent(const(GUID)*, void**);
    HRESULT LastWriteTime(SYSTEMTIME*);
    HRESULT Delete();
    HRESULT Download();
    HRESULT AsyncDownload();
    HRESULT CancelAsyncDownload();
    HRESULT SyncSetting(FEEDS_SYNC_SETTING*);
    HRESULT SetSyncSetting(FEEDS_SYNC_SETTING);
    HRESULT Interval(uint*);
    HRESULT SetInterval(uint);
    HRESULT LastDownloadTime(SYSTEMTIME*);
    HRESULT LocalEnclosurePath(PWSTR*);
    HRESULT Items(IXFeedsEnum*);
    HRESULT GetItem(uint, const(GUID)*, void**);
    HRESULT MarkAllItemsRead();
    HRESULT MaxItemCount(uint*);
    HRESULT SetMaxItemCount(uint);
    HRESULT DownloadEnclosuresAutomatically(BOOL*);
    HRESULT SetDownloadEnclosuresAutomatically(BOOL);
    HRESULT DownloadStatus(FEEDS_DOWNLOAD_STATUS*);
    HRESULT LastDownloadError(FEEDS_DOWNLOAD_ERROR*);
    HRESULT Merge(IStream, const(wchar)*);
    HRESULT DownloadUrl(PWSTR*);
    HRESULT Title(PWSTR*);
    HRESULT Description(PWSTR*);
    HRESULT Link(PWSTR*);
    HRESULT Image(PWSTR*);
    HRESULT LastBuildDate(SYSTEMTIME*);
    HRESULT PubDate(SYSTEMTIME*);
    HRESULT Ttl(uint*);
    HRESULT Language(PWSTR*);
    HRESULT Copyright(PWSTR*);
    HRESULT IsList(BOOL*);
    HRESULT GetWatcher(FEEDS_EVENTS_SCOPE, FEEDS_EVENTS_MASK, const(GUID)*, void**);
    HRESULT UnreadItemCount(uint*);
    HRESULT ItemCount(uint*);
}
enum IID_IXFeed2 = GUID(0xce528e77, 0x3716, 0x4eb7, [0x95, 0x6d, 0xf5, 0xe3, 0x75, 0x2, 0xe1, 0x2a]);
interface IXFeed2 : IXFeed
{
    HRESULT GetItemByEffectiveId(uint, const(GUID)*, void**);
    HRESULT LastItemDownloadTime(SYSTEMTIME*);
    HRESULT Username(PWSTR*);
    HRESULT Password(PWSTR*);
    HRESULT SetCredentials(const(wchar)*, const(wchar)*);
    HRESULT ClearCredentials();
}
enum IID_IXFeedEvents = GUID(0x1630852e, 0x1263, 0x465b, [0x98, 0xe5, 0xfe, 0x60, 0xff, 0xec, 0x4a, 0xc2]);
interface IXFeedEvents : IUnknown
{
    HRESULT Error();
    HRESULT FeedDeleted(const(wchar)*);
    HRESULT FeedRenamed(const(wchar)*, const(wchar)*);
    HRESULT FeedUrlChanged(const(wchar)*);
    HRESULT FeedMoved(const(wchar)*, const(wchar)*);
    HRESULT FeedDownloading(const(wchar)*);
    HRESULT FeedDownloadCompleted(const(wchar)*, FEEDS_DOWNLOAD_ERROR);
    HRESULT FeedItemCountChanged(const(wchar)*, int);
}
enum IID_IXFeedItem = GUID(0xe757b2f5, 0xe73e, 0x434e, [0xa1, 0xbf, 0x2b, 0xd7, 0xc3, 0xe6, 0xf, 0xcb]);
interface IXFeedItem : IUnknown
{
    HRESULT Xml(FEEDS_XML_INCLUDE_FLAGS, IStream*);
    HRESULT Title(PWSTR*);
    HRESULT Link(PWSTR*);
    HRESULT Guid(PWSTR*);
    HRESULT Description(PWSTR*);
    HRESULT PubDate(SYSTEMTIME*);
    HRESULT Comments(PWSTR*);
    HRESULT Author(PWSTR*);
    HRESULT Enclosure(const(GUID)*, void**);
    HRESULT IsRead(BOOL*);
    HRESULT SetIsRead(BOOL);
    HRESULT LocalId(uint*);
    HRESULT Parent(const(GUID)*, void**);
    HRESULT Delete();
    HRESULT DownloadUrl(PWSTR*);
    HRESULT LastDownloadTime(SYSTEMTIME*);
    HRESULT Modified(SYSTEMTIME*);
}
enum IID_IXFeedItem2 = GUID(0x6cda2dc7, 0x9013, 0x4522, [0x99, 0x70, 0x2a, 0x9d, 0xd9, 0xea, 0xd5, 0xa3]);
interface IXFeedItem2 : IXFeedItem
{
    HRESULT EffectiveId(uint*);
}
enum IID_IXFeedEnclosure = GUID(0xbfbfb953, 0x644f, 0x4792, [0xb6, 0x9c, 0xdf, 0xac, 0xa4, 0xcb, 0xf8, 0x9a]);
interface IXFeedEnclosure : IUnknown
{
    HRESULT Url(PWSTR*);
    HRESULT Type(PWSTR*);
    HRESULT Length(uint*);
    HRESULT AsyncDownload();
    HRESULT CancelAsyncDownload();
    HRESULT DownloadStatus(FEEDS_DOWNLOAD_STATUS*);
    HRESULT LastDownloadError(FEEDS_DOWNLOAD_ERROR*);
    HRESULT LocalPath(PWSTR*);
    HRESULT Parent(const(GUID)*, void**);
    HRESULT DownloadUrl(PWSTR*);
    HRESULT DownloadMimeType(PWSTR*);
    HRESULT RemoveFile();
    HRESULT SetFile(const(wchar)*, const(wchar)*, const(wchar)*, const(wchar)*);
}
enum IID_IFeedsManager = GUID(0xa74029cc, 0x1f1a, 0x4906, [0x88, 0xf0, 0x81, 0x6, 0x38, 0xd8, 0x65, 0x91]);
interface IFeedsManager : IDispatch
{
    HRESULT get_RootFolder(IDispatch*);
    HRESULT IsSubscribed(BSTR, short*);
    HRESULT ExistsFeed(BSTR, short*);
    HRESULT GetFeed(BSTR, IDispatch*);
    HRESULT GetFeedByUrl(BSTR, IDispatch*);
    HRESULT ExistsFolder(BSTR, short*);
    HRESULT GetFolder(BSTR, IDispatch*);
    HRESULT DeleteFeed(BSTR);
    HRESULT DeleteFolder(BSTR);
    HRESULT BackgroundSync(FEEDS_BACKGROUNDSYNC_ACTION);
    HRESULT get_BackgroundSyncStatus(FEEDS_BACKGROUNDSYNC_STATUS*);
    HRESULT get_DefaultInterval(int*);
    HRESULT put_DefaultInterval(int);
    HRESULT AsyncSyncAll();
    HRESULT Normalize(BSTR, BSTR*);
    HRESULT get_ItemCountLimit(int*);
}
enum IID_IFeedsEnum = GUID(0xe3cd0028, 0x2eed, 0x4c60, [0x8f, 0xae, 0xa3, 0x22, 0x53, 0x9, 0xa8, 0x36]);
interface IFeedsEnum : IDispatch
{
    HRESULT get_Count(int*);
    HRESULT Item(int, IDispatch*);
    HRESULT get__NewEnum(IEnumVARIANT*);
}
enum IID_IFeedFolder = GUID(0x81f04ad1, 0x4194, 0x4d7d, [0x86, 0xd6, 0x11, 0x81, 0x3c, 0xec, 0x16, 0x3c]);
interface IFeedFolder : IDispatch
{
    HRESULT get_Feeds(IDispatch*);
    HRESULT get_Subfolders(IDispatch*);
    HRESULT CreateFeed(BSTR, BSTR, IDispatch*);
    HRESULT CreateSubfolder(BSTR, IDispatch*);
    HRESULT ExistsFeed(BSTR, short*);
    HRESULT GetFeed(BSTR, IDispatch*);
    HRESULT ExistsSubfolder(BSTR, short*);
    HRESULT GetSubfolder(BSTR, IDispatch*);
    HRESULT Delete();
    HRESULT get_Name(BSTR*);
    HRESULT Rename(BSTR);
    HRESULT get_Path(BSTR*);
    HRESULT Move(BSTR);
    HRESULT get_Parent(IDispatch*);
    HRESULT get_IsRoot(short*);
    HRESULT get_TotalUnreadItemCount(int*);
    HRESULT get_TotalItemCount(int*);
    HRESULT GetWatcher(FEEDS_EVENTS_SCOPE, FEEDS_EVENTS_MASK, IDispatch*);
}
enum IID_IFeedFolderEvents = GUID(0x20a59fa6, 0xa844, 0x4630, [0x9e, 0x98, 0x17, 0x5f, 0x70, 0xb4, 0xd5, 0x5b]);
interface IFeedFolderEvents : IDispatch
{
    HRESULT Error();
    HRESULT FolderAdded(const(BSTR));
    HRESULT FolderDeleted(const(BSTR));
    HRESULT FolderRenamed(const(BSTR), const(BSTR));
    HRESULT FolderMovedFrom(const(BSTR), const(BSTR));
    HRESULT FolderMovedTo(const(BSTR), const(BSTR));
    HRESULT FolderItemCountChanged(const(BSTR), int);
    HRESULT FeedAdded(const(BSTR));
    HRESULT FeedDeleted(const(BSTR));
    HRESULT FeedRenamed(const(BSTR), const(BSTR));
    HRESULT FeedUrlChanged(const(BSTR));
    HRESULT FeedMovedFrom(const(BSTR), const(BSTR));
    HRESULT FeedMovedTo(const(BSTR), const(BSTR));
    HRESULT FeedDownloading(const(BSTR));
    HRESULT FeedDownloadCompleted(const(BSTR), FEEDS_DOWNLOAD_ERROR);
    HRESULT FeedItemCountChanged(const(BSTR), int);
}
enum IID_IFeed = GUID(0xf7f915d8, 0x2ede, 0x42bc, [0x98, 0xe7, 0xa5, 0xd0, 0x50, 0x63, 0xa7, 0x57]);
interface IFeed : IDispatch
{
    HRESULT Xml(int, FEEDS_XML_SORT_PROPERTY, FEEDS_XML_SORT_ORDER, FEEDS_XML_FILTER_FLAGS, FEEDS_XML_INCLUDE_FLAGS, BSTR*);
    HRESULT get_Name(BSTR*);
    HRESULT Rename(BSTR);
    HRESULT get_Url(BSTR*);
    HRESULT put_Url(BSTR);
    HRESULT get_LocalId(BSTR*);
    HRESULT get_Path(BSTR*);
    HRESULT Move(BSTR);
    HRESULT get_Parent(IDispatch*);
    HRESULT get_LastWriteTime(double*);
    HRESULT Delete();
    HRESULT Download();
    HRESULT AsyncDownload();
    HRESULT CancelAsyncDownload();
    HRESULT get_SyncSetting(FEEDS_SYNC_SETTING*);
    HRESULT put_SyncSetting(FEEDS_SYNC_SETTING);
    HRESULT get_Interval(int*);
    HRESULT put_Interval(int);
    HRESULT get_LastDownloadTime(double*);
    HRESULT get_LocalEnclosurePath(BSTR*);
    HRESULT get_Items(IDispatch*);
    HRESULT GetItem(int, IDispatch*);
    HRESULT get_Title(BSTR*);
    HRESULT get_Description(BSTR*);
    HRESULT get_Link(BSTR*);
    HRESULT get_Image(BSTR*);
    HRESULT get_LastBuildDate(double*);
    HRESULT get_PubDate(double*);
    HRESULT get_Ttl(int*);
    HRESULT get_Language(BSTR*);
    HRESULT get_Copyright(BSTR*);
    HRESULT get_MaxItemCount(int*);
    HRESULT put_MaxItemCount(int);
    HRESULT get_DownloadEnclosuresAutomatically(short*);
    HRESULT put_DownloadEnclosuresAutomatically(short);
    HRESULT get_DownloadStatus(FEEDS_DOWNLOAD_STATUS*);
    HRESULT get_LastDownloadError(FEEDS_DOWNLOAD_ERROR*);
    HRESULT Merge(BSTR, BSTR);
    HRESULT get_DownloadUrl(BSTR*);
    HRESULT get_IsList(short*);
    HRESULT MarkAllItemsRead();
    HRESULT GetWatcher(FEEDS_EVENTS_SCOPE, FEEDS_EVENTS_MASK, IDispatch*);
    HRESULT get_UnreadItemCount(int*);
    HRESULT get_ItemCount(int*);
}
enum IID_IFeed2 = GUID(0x33f2ea09, 0x1398, 0x4ab9, [0xb6, 0xa4, 0xf9, 0x4b, 0x49, 0xd0, 0xa4, 0x2e]);
interface IFeed2 : IFeed
{
    HRESULT GetItemByEffectiveId(int, IDispatch*);
    HRESULT get_LastItemDownloadTime(double*);
    HRESULT get_Username(BSTR*);
    HRESULT get_Password(BSTR*);
    HRESULT SetCredentials(BSTR, BSTR);
    HRESULT ClearCredentials();
}
enum IID_IFeedEvents = GUID(0xabf35c99, 0x681, 0x47ea, [0x9a, 0x8c, 0x14, 0x36, 0xa3, 0x75, 0xa9, 0x9e]);
interface IFeedEvents : IDispatch
{
    HRESULT Error();
    HRESULT FeedDeleted(const(BSTR));
    HRESULT FeedRenamed(const(BSTR), const(BSTR));
    HRESULT FeedUrlChanged(const(BSTR));
    HRESULT FeedMoved(const(BSTR), const(BSTR));
    HRESULT FeedDownloading(const(BSTR));
    HRESULT FeedDownloadCompleted(const(BSTR), FEEDS_DOWNLOAD_ERROR);
    HRESULT FeedItemCountChanged(const(BSTR), int);
}
enum IID_IFeedItem = GUID(0xa1e6cad, 0xa47, 0x4da2, [0xa1, 0x3d, 0x5b, 0xaa, 0xa5, 0xc8, 0xbd, 0x4f]);
interface IFeedItem : IDispatch
{
    HRESULT Xml(FEEDS_XML_INCLUDE_FLAGS, BSTR*);
    HRESULT get_Title(BSTR*);
    HRESULT get_Link(BSTR*);
    HRESULT get_Guid(BSTR*);
    HRESULT get_Description(BSTR*);
    HRESULT get_PubDate(double*);
    HRESULT get_Comments(BSTR*);
    HRESULT get_Author(BSTR*);
    HRESULT get_Enclosure(IDispatch*);
    HRESULT get_IsRead(short*);
    HRESULT put_IsRead(short);
    HRESULT get_LocalId(int*);
    HRESULT get_Parent(IDispatch*);
    HRESULT Delete();
    HRESULT get_DownloadUrl(BSTR*);
    HRESULT get_LastDownloadTime(double*);
    HRESULT get_Modified(double*);
}
enum IID_IFeedItem2 = GUID(0x79ac9ef4, 0xf9c1, 0x4d2b, [0xa5, 0xb, 0xa7, 0xff, 0xba, 0x4d, 0xcf, 0x37]);
interface IFeedItem2 : IFeedItem
{
    HRESULT get_EffectiveId(int*);
}
enum IID_IFeedEnclosure = GUID(0x361c26f7, 0x90a4, 0x4e67, [0xae, 0x9, 0x3a, 0x36, 0xa5, 0x46, 0x43, 0x6a]);
interface IFeedEnclosure : IDispatch
{
    HRESULT get_Url(BSTR*);
    HRESULT get_Type(BSTR*);
    HRESULT get_Length(int*);
    HRESULT AsyncDownload();
    HRESULT CancelAsyncDownload();
    HRESULT get_DownloadStatus(FEEDS_DOWNLOAD_STATUS*);
    HRESULT get_LastDownloadError(FEEDS_DOWNLOAD_ERROR*);
    HRESULT get_LocalPath(BSTR*);
    HRESULT get_Parent(IDispatch*);
    HRESULT get_DownloadUrl(BSTR*);
    HRESULT get_DownloadMimeType(BSTR*);
    HRESULT RemoveFile();
    HRESULT SetFile(BSTR, BSTR, BSTR, BSTR);
}
alias PlayerState = int;
enum : int
{
    stop_state  = 0x00000000,
    pause_state = 0x00000001,
    play_state  = 0x00000002,
}

struct TimedLevel
{
    ubyte[2048] frequency;
    ubyte[2048] waveform;
    int state;
    long timeStamp;
}
enum IID_IWMPEffects = GUID(0xd3984c13, 0xc3cb, 0x48e2, [0x8b, 0xe5, 0x51, 0x68, 0x34, 0xb, 0x4f, 0x35]);
interface IWMPEffects : IUnknown
{
    HRESULT Render(TimedLevel*, HDC, RECT*);
    HRESULT MediaInfo(int, int, BSTR);
    HRESULT GetCapabilities(uint*);
    HRESULT GetTitle(BSTR*);
    HRESULT GetPresetTitle(int, BSTR*);
    HRESULT GetPresetCount(int*);
    HRESULT SetCurrentPreset(int);
    HRESULT GetCurrentPreset(int*);
    HRESULT DisplayPropertyPage(HWND);
    HRESULT GoFullscreen(BOOL);
    HRESULT RenderFullScreen(TimedLevel*);
}
enum IID_IWMPEffects2 = GUID(0x695386ec, 0xaa3c, 0x4618, [0xa5, 0xe1, 0xdd, 0x9a, 0x8b, 0x98, 0x76, 0x32]);
interface IWMPEffects2 : IWMPEffects
{
    HRESULT SetCore(IWMPCore);
    HRESULT Create(HWND);
    HRESULT Destroy();
    HRESULT NotifyNewMedia(IWMPMedia);
    HRESULT OnWindowMessage(uint, WPARAM, LPARAM, LRESULT*);
    HRESULT RenderWindowed(TimedLevel*, BOOL);
}
enum IID_IWMPPluginUI = GUID(0x4c5e8f9f, 0xad3e, 0x4bf9, [0x97, 0x53, 0xfc, 0xd3, 0xd, 0x6d, 0x38, 0xdd]);
interface IWMPPluginUI : IUnknown
{
    HRESULT SetCore(IWMPCore);
    HRESULT Create(HWND, HWND*);
    HRESULT Destroy();
    HRESULT DisplayPropertyPage(HWND);
    HRESULT GetProperty(const(wchar)*, VARIANT*);
    HRESULT SetProperty(const(wchar)*, const(VARIANT)*);
    HRESULT TranslateAccelerator(MSG*);
}
alias WMPPartnerNotification = int;
enum : int
{
    wmpsnBackgroundProcessingBegin = 0x00000001,
    wmpsnBackgroundProcessingEnd   = 0x00000002,
    wmpsnCatalogDownloadFailure    = 0x00000003,
    wmpsnCatalogDownloadComplete   = 0x00000004,
}

alias WMPCallbackNotification = int;
enum : int
{
    wmpcnLoginStateChange     = 0x00000001,
    wmpcnAuthResult           = 0x00000002,
    wmpcnLicenseUpdated       = 0x00000003,
    wmpcnNewCatalogAvailable  = 0x00000004,
    wmpcnNewPluginAvailable   = 0x00000005,
    wmpcnDisableRadioSkipping = 0x00000006,
}

alias WMPTaskType = int;
enum : int
{
    wmpttBrowse  = 0x00000001,
    wmpttSync    = 0x00000002,
    wmpttBurn    = 0x00000003,
    wmpttCurrent = 0x00000004,
}

struct WMPContextMenuInfo
{
    uint dwID;
    BSTR bstrMenuText;
    BSTR bstrHelpText;
}
enum IID_IWMPContentContainer = GUID(0xad7f4d9c, 0x1a9f, 0x4ed2, [0x98, 0x15, 0xec, 0xc0, 0xb5, 0x8c, 0xb6, 0x16]);
interface IWMPContentContainer : IUnknown
{
    HRESULT GetID(uint*);
    HRESULT GetPrice(BSTR*);
    HRESULT GetType(BSTR*);
    HRESULT GetContentCount(uint*);
    HRESULT GetContentPrice(uint, BSTR*);
    HRESULT GetContentID(uint, uint*);
}
alias WMPTransactionType = int;
enum : int
{
    wmpttNoTransaction = 0x00000000,
    wmpttDownload      = 0x00000001,
    wmpttBuy           = 0x00000002,
}

enum IID_IWMPContentContainerList = GUID(0xa9937f78, 0x802, 0x4af8, [0x8b, 0x8d, 0xe3, 0xf0, 0x45, 0xbc, 0x8a, 0xb5]);
interface IWMPContentContainerList : IUnknown
{
    HRESULT GetTransactionType(WMPTransactionType*);
    HRESULT GetContainerCount(uint*);
    HRESULT GetContainer(uint, IWMPContentContainer*);
}
alias WMPTemplateSize = int;
enum : int
{
    wmptsSmall  = 0x00000000,
    wmptsMedium = 0x00000001,
    wmptsLarge  = 0x00000002,
}

alias WMPStreamingType = int;
enum : int
{
    wmpstUnknown = 0x00000000,
    wmpstMusic   = 0x00000001,
    wmpstVideo   = 0x00000002,
    wmpstRadio   = 0x00000003,
}

alias WMPAccountType = int;
enum : int
{
    wmpatBuyOnly      = 0x00000001,
    wmpatSubscription = 0x00000002,
    wmpatJanus        = 0x00000003,
}

enum IID_IWMPContentPartnerCallback = GUID(0x9e8f7da2, 0x695, 0x403c, [0xb6, 0x97, 0xda, 0x10, 0xfa, 0xfa, 0xa6, 0x76]);
interface IWMPContentPartnerCallback : IUnknown
{
    HRESULT Notify(WMPCallbackNotification, VARIANT*);
    HRESULT BuyComplete(HRESULT, uint);
    HRESULT DownloadTrack(uint, BSTR, uint, BSTR, HRESULT);
    HRESULT GetCatalogVersion(uint*, uint*, uint*);
    HRESULT UpdateDeviceComplete(BSTR);
    HRESULT ChangeView(BSTR, BSTR, BSTR);
    HRESULT AddListContents(uint, uint, uint*);
    HRESULT ListContentsComplete(uint, HRESULT);
    HRESULT SendMessageComplete(BSTR, BSTR, BSTR);
    HRESULT GetContentIDsInLibrary(uint*, uint**);
    HRESULT RefreshLicenseComplete(uint, uint, HRESULT);
    HRESULT ShowPopup(int, BSTR);
    HRESULT VerifyPermissionComplete(BSTR, VARIANT*, HRESULT);
}
enum IID_IWMPContentPartner = GUID(0x55455073, 0x41b5, 0x4e75, [0x87, 0xb8, 0xf1, 0x3b, 0xdb, 0x29, 0x1d, 0x8]);
interface IWMPContentPartner : IUnknown
{
    HRESULT SetCallback(IWMPContentPartnerCallback);
    HRESULT Notify(WMPPartnerNotification, VARIANT*);
    HRESULT GetItemInfo(BSTR, VARIANT*, VARIANT*);
    HRESULT GetContentPartnerInfo(BSTR, VARIANT*);
    HRESULT GetCommands(BSTR, VARIANT*, BSTR, uint, uint*, uint*, WMPContextMenuInfo**);
    HRESULT InvokeCommand(uint, BSTR, VARIANT*, BSTR, uint, uint*);
    HRESULT CanBuySilent(IWMPContentContainerList, BSTR*, short*);
    HRESULT Buy(IWMPContentContainerList, uint);
    HRESULT GetStreamingURL(WMPStreamingType, VARIANT*, BSTR*);
    HRESULT Download(IWMPContentContainerList, uint);
    HRESULT DownloadTrackComplete(HRESULT, uint, BSTR);
    HRESULT RefreshLicense(uint, short, BSTR, WMPStreamingType, uint, BSTR, VARIANT*);
    HRESULT GetCatalogURL(uint, uint, uint, uint*, BSTR*, VARIANT*);
    HRESULT GetTemplate(WMPTaskType, BSTR, VARIANT*, BSTR, VARIANT*, BSTR, BSTR, BSTR*, WMPTemplateSize*);
    HRESULT UpdateDevice(BSTR);
    HRESULT GetListContents(BSTR, VARIANT*, BSTR, BSTR, uint);
    HRESULT Login(BLOB, BLOB, short, short);
    HRESULT Authenticate(BLOB, BLOB);
    HRESULT Logout();
    HRESULT SendMessage(BSTR, BSTR);
    HRESULT StationEvent(BSTR, uint, uint, uint, BSTR, uint);
    HRESULT CompareContainerListPrices(IWMPContentContainerList, IWMPContentContainerList, int*);
    HRESULT VerifyPermission(BSTR, VARIANT*);
}
alias WMPSubscriptionServiceEvent = int;
enum : int
{
    wmpsseCurrentBegin = 0x00000001,
    wmpsseCurrentEnd   = 0x00000002,
    wmpsseFullBegin    = 0x00000003,
    wmpsseFullEnd      = 0x00000004,
}

enum IID_IWMPSubscriptionService = GUID(0x376055f8, 0x2a59, 0x4a73, [0x95, 0x1, 0xdc, 0xa5, 0x27, 0x3a, 0x7a, 0x10]);
interface IWMPSubscriptionService : IUnknown
{
    HRESULT allowPlay(HWND, IWMPMedia, BOOL*);
    HRESULT allowCDBurn(HWND, IWMPPlaylist, BOOL*);
    HRESULT allowPDATransfer(HWND, IWMPPlaylist, BOOL*);
    HRESULT startBackgroundProcessing(HWND);
}
enum IID_IWMPSubscriptionServiceCallback = GUID(0xdd01d127, 0x2dc2, 0x4c3a, [0x87, 0x6e, 0x63, 0x31, 0x20, 0x79, 0xf9, 0xb0]);
interface IWMPSubscriptionServiceCallback : IUnknown
{
    HRESULT onComplete(HRESULT);
}
enum IID_IWMPSubscriptionService2 = GUID(0xa94c120e, 0xd600, 0x4ec6, [0xb0, 0x5e, 0xec, 0x9d, 0x56, 0xd8, 0x4d, 0xe0]);
interface IWMPSubscriptionService2 : IWMPSubscriptionService
{
    HRESULT stopBackgroundProcessing();
    HRESULT serviceEvent(WMPSubscriptionServiceEvent);
    HRESULT deviceAvailable(BSTR, IWMPSubscriptionServiceCallback);
    HRESULT prepareForSync(BSTR, BSTR, IWMPSubscriptionServiceCallback);
}
alias WMPSubscriptionDownloadState = int;
enum : int
{
    wmpsdlsDownloading = 0x00000000,
    wmpsdlsPaused      = 0x00000001,
    wmpsdlsProcessing  = 0x00000002,
    wmpsdlsCompleted   = 0x00000003,
    wmpsdlsCancelled   = 0x00000004,
}

enum IID_IWMPDownloadItem = GUID(0xc9470e8e, 0x3f6b, 0x46a9, [0xa0, 0xa9, 0x45, 0x28, 0x15, 0xc3, 0x42, 0x97]);
interface IWMPDownloadItem : IDispatch
{
    HRESULT get_sourceURL(BSTR*);
    HRESULT get_size(int*);
    HRESULT get_type(BSTR*);
    HRESULT get_progress(int*);
    HRESULT get_downloadState(WMPSubscriptionDownloadState*);
    HRESULT pause();
    HRESULT resume();
    HRESULT cancel();
}
enum IID_IWMPDownloadItem2 = GUID(0x9fbb3336, 0x6da3, 0x479d, [0xb8, 0xff, 0x67, 0xd4, 0x6e, 0x20, 0xa9, 0x87]);
interface IWMPDownloadItem2 : IWMPDownloadItem
{
    HRESULT getItemInfo(BSTR, BSTR*);
}
enum IID_IWMPDownloadCollection = GUID(0xa319c7f, 0x85f9, 0x436c, [0xb8, 0x8e, 0x82, 0xfd, 0x88, 0x0, 0xe, 0x1c]);
interface IWMPDownloadCollection : IDispatch
{
    HRESULT get_id(int*);
    HRESULT get_count(int*);
    HRESULT item(int, IWMPDownloadItem2*);
    HRESULT startDownload(BSTR, BSTR, IWMPDownloadItem2*);
    HRESULT removeItem(int);
    HRESULT Clear();
}
enum IID_IWMPDownloadManager = GUID(0xe15e9ad1, 0x8f20, 0x4cc4, [0x9e, 0xc7, 0x1a, 0x32, 0x8c, 0xa8, 0x6a, 0xd]);
interface IWMPDownloadManager : IDispatch
{
    HRESULT getDownloadCollection(int, IWMPDownloadCollection*);
    HRESULT createDownloadCollection(IWMPDownloadCollection*);
}
struct WMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE
{
    align (1):
    uint dwChangesSinceTransactionID;
    uint dwResultSetStartingIndex;
}
struct WMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC
{
    align (1):
    uint dwCurrentTransactionID;
    uint dwReturnedObjectCount;
    uint dwUnretrievedObjectCount;
    uint dwDeletedObjectStartingOffset;
    uint dwFlags;
    wchar[1] wsObjectPathnameList;
}
