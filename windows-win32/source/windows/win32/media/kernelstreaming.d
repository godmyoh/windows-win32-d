module windows.win32.media.kernelstreaming;

import windows.win32.guid : GUID;
import windows.win32.foundation : BOOL, CHAR, HANDLE, HRESULT, LUID, RECT, SIZE;
import windows.win32.media_ : TIMECODE_SAMPLE;
import windows.win32.system.com_ : IUnknown;

version (Windows):
extern (Windows):

uint KsCreateAllocator(HANDLE, KSALLOCATOR_FRAMING*, HANDLE*);
uint KsCreateClock(HANDLE, KSCLOCK_CREATE*, HANDLE*);
uint KsCreatePin(HANDLE, KSPIN_CONNECT*, uint, HANDLE*);
uint KsCreateTopologyNode(HANDLE, KSNODE_CREATE*, uint, HANDLE*);
HRESULT KsCreateAllocator2(HANDLE, KSALLOCATOR_FRAMING*, HANDLE*);
HRESULT KsCreateClock2(HANDLE, KSCLOCK_CREATE*, HANDLE*);
HRESULT KsCreatePin2(HANDLE, KSPIN_CONNECT*, uint, HANDLE*);
HRESULT KsCreateTopologyNode2(HANDLE, KSNODE_CREATE*, uint, HANDLE*);
enum IOCTL_KS_PROPERTY = 0x002f0003;
enum IOCTL_KS_ENABLE_EVENT = 0x002f0007;
enum IOCTL_KS_DISABLE_EVENT = 0x002f000b;
enum IOCTL_KS_METHOD = 0x002f000f;
enum IOCTL_KS_WRITE_STREAM = 0x002f8013;
enum IOCTL_KS_READ_STREAM = 0x002f4017;
enum IOCTL_KS_RESET_STATE = 0x002f001b;
enum KSPRIORITY_LOW = 0x00000001;
enum KSPRIORITY_NORMAL = 0x40000000;
enum KSPRIORITY_HIGH = 0x80000000;
enum KSPRIORITY_EXCLUSIVE = 0xffffffff;
enum KSMETHOD_TYPE_NONE = 0x00000000;
enum KSMETHOD_TYPE_READ = 0x00000001;
enum KSMETHOD_TYPE_WRITE = 0x00000002;
enum KSMETHOD_TYPE_MODIFY = 0x00000003;
enum KSMETHOD_TYPE_SOURCE = 0x00000004;
enum KSMETHOD_TYPE_SEND = 0x00000001;
enum KSMETHOD_TYPE_SETSUPPORT = 0x00000100;
enum KSMETHOD_TYPE_BASICSUPPORT = 0x00000200;
enum KSMETHOD_TYPE_TOPOLOGY = 0x10000000;
enum KSPROPERTY_TYPE_GET = 0x00000001;
enum KSPROPERTY_TYPE_GETPAYLOADSIZE = 0x00000004;
enum KSPROPERTY_TYPE_SET = 0x00000002;
enum KSPROPERTY_TYPE_SETSUPPORT = 0x00000100;
enum KSPROPERTY_TYPE_BASICSUPPORT = 0x00000200;
enum KSPROPERTY_TYPE_RELATIONS = 0x00000400;
enum KSPROPERTY_TYPE_SERIALIZESET = 0x00000800;
enum KSPROPERTY_TYPE_UNSERIALIZESET = 0x00001000;
enum KSPROPERTY_TYPE_SERIALIZERAW = 0x00002000;
enum KSPROPERTY_TYPE_UNSERIALIZERAW = 0x00004000;
enum KSPROPERTY_TYPE_SERIALIZESIZE = 0x00008000;
enum KSPROPERTY_TYPE_DEFAULTVALUES = 0x00010000;
enum KSPROPERTY_TYPE_TOPOLOGY = 0x10000000;
enum KSPROPERTY_TYPE_HIGHPRIORITY = 0x08000000;
enum KSPROPERTY_TYPE_FSFILTERSCOPE = 0x40000000;
enum KSPROPERTY_TYPE_COPYPAYLOAD = 0x80000000;
enum KSPROPERTY_MEMBER_RANGES = 0x00000001;
enum KSPROPERTY_MEMBER_STEPPEDRANGES = 0x00000002;
enum KSPROPERTY_MEMBER_VALUES = 0x00000003;
enum KSPROPERTY_MEMBER_FLAG_DEFAULT = 0x00000001;
enum KSPROPERTY_MEMBER_FLAG_BASICSUPPORT_MULTICHANNEL = 0x00000002;
enum KSPROPERTY_MEMBER_FLAG_BASICSUPPORT_UNIFORM = 0x00000004;
enum KSEVENTF_EVENT_HANDLE = 0x00000001;
enum KSEVENTF_SEMAPHORE_HANDLE = 0x00000002;
enum KSEVENTF_EVENT_OBJECT = 0x00000004;
enum KSEVENTF_SEMAPHORE_OBJECT = 0x00000008;
enum KSEVENTF_DPC = 0x00000010;
enum KSEVENTF_WORKITEM = 0x00000020;
enum KSEVENTF_KSWORKITEM = 0x00000080;
enum KSEVENT_TYPE_ENABLE = 0x00000001;
enum KSEVENT_TYPE_ONESHOT = 0x00000002;
enum KSEVENT_TYPE_ENABLEBUFFERED = 0x00000004;
enum KSEVENT_TYPE_SETSUPPORT = 0x00000100;
enum KSEVENT_TYPE_BASICSUPPORT = 0x00000200;
enum KSEVENT_TYPE_QUERYBUFFER = 0x00000400;
enum KSEVENT_TYPE_TOPOLOGY = 0x10000000;
enum KSRELATIVEEVENT_FLAG_HANDLE = 0x00000001;
enum KSRELATIVEEVENT_FLAG_POINTER = 0x00000002;
enum KSMEDIUM_TYPE_ANYINSTANCE = 0x00000000;
enum KSMEDIUM_STANDARD_DEVIO = 0x00000000;
enum KSPROPERTY_PIN_FLAGS_ATTRIBUTE_RANGE_AWARE = 0x00000001;
enum KSPROPERTY_PIN_FLAGS_MASK = 0x00000001;
enum KSDATAFORMAT_BIT_TEMPORAL_COMPRESSION = 0x00000000;
enum KSDATAFORMAT_BIT_ATTRIBUTES = 0x00000001;
enum KSDATARANGE_BIT_ATTRIBUTES = 0x00000001;
enum KSDATARANGE_BIT_REQUIRED_ATTRIBUTES = 0x00000002;
enum KSATTRIBUTE_REQUIRED = 0x00000001;
enum KSSTRING_Filter = "{9B365890-165F-11D0-A195-0020AFD156E4}";
enum KSSTRING_Pin = "{146F1A80-4791-11D0-A5D6-28DB04C10000}";
enum KSSTRING_Clock = "{53172480-4791-11D0-A5D6-28DB04C10000}";
enum KSSTRING_Allocator = "{642F5D00-4791-11D0-A5D6-28DB04C10000}";
enum KSSTRING_AllocatorEx = "{091BB63B-603F-11D1-B067-00A0C9062802}";
enum KSSTRING_TopologyNode = "{0621061A-EE75-11D0-B915-00A0C9223196}";
enum KSALLOCATOR_REQUIREMENTF_INPLACE_MODIFIER = 0x00000001;
enum KSALLOCATOR_REQUIREMENTF_SYSTEM_MEMORY = 0x00000002;
enum KSALLOCATOR_REQUIREMENTF_FRAME_INTEGRITY = 0x00000004;
enum KSALLOCATOR_REQUIREMENTF_MUST_ALLOCATE = 0x00000008;
enum KSALLOCATOR_REQUIREMENTF_SYSTEM_MEMORY_CUSTOM_ALLOCATION = 0x00000010;
enum KSALLOCATOR_REQUIREMENTF_PREFERENCES_ONLY = 0x80000000;
enum KSALLOCATOR_OPTIONF_COMPATIBLE = 0x00000001;
enum KSALLOCATOR_OPTIONF_SYSTEM_MEMORY = 0x00000002;
enum KSALLOCATOR_OPTIONF_VALID = 0x00000003;
enum KSALLOCATOR_FLAG_PARTIAL_READ_SUPPORT = 0x00000010;
enum KSALLOCATOR_FLAG_DEVICE_SPECIFIC = 0x00000020;
enum KSALLOCATOR_FLAG_CAN_ALLOCATE = 0x00000040;
enum KSALLOCATOR_FLAG_INSIST_ON_FRAMESIZE_RATIO = 0x00000080;
enum KSALLOCATOR_FLAG_NO_FRAME_INTEGRITY = 0x00000100;
enum KSALLOCATOR_FLAG_MULTIPLE_OUTPUT = 0x00000200;
enum KSALLOCATOR_FLAG_CYCLE = 0x00000400;
enum KSALLOCATOR_FLAG_ALLOCATOR_EXISTS = 0x00000800;
enum KSALLOCATOR_FLAG_INDEPENDENT_RANGES = 0x00001000;
enum KSALLOCATOR_FLAG_ATTENTION_STEPPING = 0x00002000;
enum KSALLOCATOR_FLAG_ENABLE_CACHED_MDL = 0x00004000;
enum KSALLOCATOR_FLAG_2D_BUFFER_REQUIRED = 0x00008000;
enum KSSTREAM_HEADER_OPTIONSF_SPLICEPOINT = 0x00000001;
enum KSSTREAM_HEADER_OPTIONSF_PREROLL = 0x00000002;
enum KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY = 0x00000004;
enum KSSTREAM_HEADER_OPTIONSF_TYPECHANGED = 0x00000008;
enum KSSTREAM_HEADER_OPTIONSF_TIMEVALID = 0x00000010;
enum KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY = 0x00000040;
enum KSSTREAM_HEADER_OPTIONSF_FLUSHONPAUSE = 0x00000080;
enum KSSTREAM_HEADER_OPTIONSF_DURATIONVALID = 0x00000100;
enum KSSTREAM_HEADER_OPTIONSF_ENDOFSTREAM = 0x00000200;
enum KSSTREAM_HEADER_OPTIONSF_BUFFEREDTRANSFER = 0x00000400;
enum KSSTREAM_HEADER_OPTIONSF_VRAM_DATA_TRANSFER = 0x00000800;
enum KSSTREAM_HEADER_OPTIONSF_METADATA = 0x00001000;
enum KSSTREAM_HEADER_OPTIONSF_ENDOFPHOTOSEQUENCE = 0x00002000;
enum KSSTREAM_HEADER_OPTIONSF_FRAMEINFO = 0x00004000;
enum KSSTREAM_HEADER_OPTIONSF_PERSIST_SAMPLE = 0x00008000;
enum KSSTREAM_HEADER_OPTIONSF_SAMPLE_PERSISTED = 0x00010000;
enum KSSTREAM_HEADER_TRACK_COMPLETION_NUMBERS = 0x00020000;
enum KSSTREAM_HEADER_OPTIONSF_SECUREBUFFERTRANSFER = 0x00040000;
enum KSSTREAM_HEADER_OPTIONSF_LOOPEDDATA = 0x80000000;
enum KSSTREAM_UVC_SECURE_ATTRIBUTE_SIZE = 0x00002000;
enum KSFRAMETIME_VARIABLESIZE = 0x00000001;
enum KSRATE_NOPRESENTATIONSTART = 0x00000001;
enum KSRATE_NOPRESENTATIONDURATION = 0x00000002;
enum NANOSECONDS = 0x00989680;
enum KSPROBE_STREAMREAD = 0x00000000;
enum KSPROBE_STREAMWRITE = 0x00000001;
enum KSPROBE_ALLOCATEMDL = 0x00000010;
enum KSPROBE_PROBEANDLOCK = 0x00000020;
enum KSPROBE_SYSTEMADDRESS = 0x00000040;
enum KSPROBE_MODIFY = 0x00000200;
enum KSPROBE_ALLOWFORMATCHANGE = 0x00000080;
enum KSSTREAM_READ = 0x00000000;
enum KSSTREAM_WRITE = 0x00000001;
enum KSSTREAM_PAGED_DATA = 0x00000000;
enum KSSTREAM_NONPAGED_DATA = 0x00000100;
enum KSSTREAM_SYNCHRONOUS = 0x00001000;
enum KSSTREAM_FAILUREEXCEPTION = 0x00002000;
enum KSEVENT_ENTRY_DELETED = 0x00000001;
enum KSEVENT_ENTRY_ONESHOT = 0x00000002;
enum KSEVENT_ENTRY_BUFFERED = 0x00000004;
enum KSDISPATCH_FASTIO = 0x80000000;
enum KSCREATE_ITEM_SECURITYCHANGED = 0x00000001;
enum KSCREATE_ITEM_WILDCARD = 0x00000002;
enum KSCREATE_ITEM_NOPARAMETERS = 0x00000004;
enum KSCREATE_ITEM_FREEONSTOP = 0x00000008;
enum BUS_INTERFACE_REFERENCE_VERSION = 0x00000100;
enum IOCTL_KS_HANDSHAKE = 0x002f001f;
enum MIN_DEV_VER_FOR_QI = 0x00000100;
enum KSDEVICE_DESCRIPTOR_VERSION = 0x00000100;
enum KSDEVICE_DESCRIPTOR_VERSION_2 = 0x00000110;
enum MIN_DEV_VER_FOR_FLAGS = 0x00000110;
enum KSDEVICE_FLAG_ENABLE_REMOTE_WAKEUP = 0x00000001;
enum KSDEVICE_FLAG_LOWPOWER_PASSTHROUGH = 0x00000002;
enum KSDEVICE_FLAG_ENABLE_QUERYINTERFACE = 0x00000004;
enum KSFILTER_FLAG_DISPATCH_LEVEL_PROCESSING = 0x00000001;
enum KSFILTER_FLAG_CRITICAL_PROCESSING = 0x00000002;
enum KSFILTER_FLAG_HYPERCRITICAL_PROCESSING = 0x00000004;
enum KSFILTER_FLAG_RECEIVE_ZERO_LENGTH_SAMPLES = 0x00000008;
enum KSFILTER_FLAG_DENY_USERMODE_ACCESS = 0x80000000;
enum KSFILTER_FLAG_PRIORITIZE_REFERENCEGUID = 0x00000010;
enum KSPIN_FLAG_DISPATCH_LEVEL_PROCESSING = 0x00000001;
enum KSPIN_FLAG_CRITICAL_PROCESSING = 0x00000002;
enum KSPIN_FLAG_HYPERCRITICAL_PROCESSING = 0x00000004;
enum KSPIN_FLAG_ASYNCHRONOUS_PROCESSING = 0x00000008;
enum KSPIN_FLAG_DO_NOT_INITIATE_PROCESSING = 0x00000010;
enum KSPIN_FLAG_INITIATE_PROCESSING_ON_EVERY_ARRIVAL = 0x00000020;
enum KSPIN_FLAG_FRAMES_NOT_REQUIRED_FOR_PROCESSING = 0x00000040;
enum KSPIN_FLAG_ENFORCE_FIFO = 0x00000080;
enum KSPIN_FLAG_GENERATE_MAPPINGS = 0x00000100;
enum KSPIN_FLAG_DISTINCT_TRAILING_EDGE = 0x00000200;
enum KSPIN_FLAG_PROCESS_IN_RUN_STATE_ONLY = 0x00010000;
enum KSPIN_FLAG_SPLITTER = 0x00020000;
enum KSPIN_FLAG_USE_STANDARD_TRANSPORT = 0x00040000;
enum KSPIN_FLAG_DO_NOT_USE_STANDARD_TRANSPORT = 0x00080000;
enum KSPIN_FLAG_FIXED_FORMAT = 0x00100000;
enum KSPIN_FLAG_GENERATE_EOS_EVENTS = 0x00200000;
enum KSPIN_FLAG_IMPLEMENT_CLOCK = 0x00400000;
enum KSPIN_FLAG_SOME_FRAMES_REQUIRED_FOR_PROCESSING = 0x00800000;
enum KSPIN_FLAG_PROCESS_IF_ANY_IN_RUN_STATE = 0x01000000;
enum KSPIN_FLAG_DENY_USERMODE_ACCESS = 0x80000000;
enum RT_STRING = 0x00000006;
enum RT_RCDATA = 0x0000000a;
enum WAVE_FORMAT_EXTENSIBLE = 0x0000fffe;
enum KSDSOUND_BUFFER_PRIMARY = 0x00000001;
enum KSDSOUND_BUFFER_STATIC = 0x00000002;
enum KSDSOUND_BUFFER_LOCHARDWARE = 0x00000004;
enum KSDSOUND_BUFFER_LOCSOFTWARE = 0x00000008;
enum KSDSOUND_BUFFER_CTRL_3D = 0x00000001;
enum KSDSOUND_BUFFER_CTRL_FREQUENCY = 0x00000002;
enum KSDSOUND_BUFFER_CTRL_PAN = 0x00000004;
enum KSDSOUND_BUFFER_CTRL_VOLUME = 0x00000008;
enum KSDSOUND_BUFFER_CTRL_POSITIONNOTIFY = 0x00000010;
//enum DEVPKEY_KsAudio_PacketSize_Constraints = [MISSING];
//enum DEVPKEY_KsAudio_Controller_DeviceInterface_Path = [MISSING];
//enum DEVPKEY_KsAudio_PacketSize_Constraints2 = [MISSING];
enum KSAUDIO_STEREO_SPEAKER_GEOMETRY_HEADPHONE = 0xffffffffffffffff;
enum KSAUDIO_STEREO_SPEAKER_GEOMETRY_MIN = 0x00000005;
enum KSAUDIO_STEREO_SPEAKER_GEOMETRY_NARROW = 0x0000000a;
enum KSAUDIO_STEREO_SPEAKER_GEOMETRY_WIDE = 0x00000014;
enum KSAUDIO_STEREO_SPEAKER_GEOMETRY_MAX = 0x000000b4;
enum KSDSOUND_3D_MODE_NORMAL = 0x00000000;
enum KSDSOUND_3D_MODE_HEADRELATIVE = 0x00000001;
enum KSDSOUND_3D_MODE_DISABLE = 0x00000002;
enum KSDSOUND_BUFFER_CTRL_HRTF_3D = 0x40000000;
enum KSAUDIO_QUALITY_WORST = 0x00000000;
enum KSAUDIO_QUALITY_PC = 0x00000001;
enum KSAUDIO_QUALITY_BASIC = 0x00000002;
enum KSAUDIO_QUALITY_ADVANCED = 0x00000003;
enum KSAUDIO_CPU_RESOURCES_NOT_HOST_CPU = 0x00000000;
enum KSAUDIO_CPU_RESOURCES_HOST_CPU = 0x7fffffff;
enum SPEAKER_FRONT_LEFT = 0x00000001;
enum SPEAKER_FRONT_RIGHT = 0x00000002;
enum SPEAKER_FRONT_CENTER = 0x00000004;
enum SPEAKER_LOW_FREQUENCY = 0x00000008;
enum SPEAKER_BACK_LEFT = 0x00000010;
enum SPEAKER_BACK_RIGHT = 0x00000020;
enum SPEAKER_FRONT_LEFT_OF_CENTER = 0x00000040;
enum SPEAKER_FRONT_RIGHT_OF_CENTER = 0x00000080;
enum SPEAKER_BACK_CENTER = 0x00000100;
enum SPEAKER_SIDE_LEFT = 0x00000200;
enum SPEAKER_SIDE_RIGHT = 0x00000400;
enum SPEAKER_TOP_CENTER = 0x00000800;
enum SPEAKER_TOP_FRONT_LEFT = 0x00001000;
enum SPEAKER_TOP_FRONT_CENTER = 0x00002000;
enum SPEAKER_TOP_FRONT_RIGHT = 0x00004000;
enum SPEAKER_TOP_BACK_LEFT = 0x00008000;
enum SPEAKER_TOP_BACK_CENTER = 0x00010000;
enum SPEAKER_TOP_BACK_RIGHT = 0x00020000;
enum SPEAKER_RESERVED = 0x7ffc0000;
enum SPEAKER_ALL = 0x80000000;
enum KSAUDIO_SPEAKER_DIRECTOUT = 0x00000000;
enum KSAUDIO_SPEAKER_MONO = 0x00000004;
enum KSAUDIO_SPEAKER_GROUND_FRONT_LEFT = 0x00000001;
enum KSAUDIO_SPEAKER_GROUND_FRONT_CENTER = 0x00000004;
enum KSAUDIO_SPEAKER_GROUND_FRONT_RIGHT = 0x00000002;
enum KSAUDIO_SPEAKER_GROUND_REAR_LEFT = 0x00000010;
enum KSAUDIO_SPEAKER_GROUND_REAR_RIGHT = 0x00000020;
enum KSAUDIO_SPEAKER_TOP_MIDDLE = 0x00000800;
enum KSAUDIO_SPEAKER_SUPER_WOOFER = 0x00000008;
enum KSNODEPIN_STANDARD_IN = 0x00000001;
enum KSNODEPIN_STANDARD_OUT = 0x00000000;
enum KSNODEPIN_SUM_MUX_IN = 0x00000001;
enum KSNODEPIN_SUM_MUX_OUT = 0x00000000;
enum KSNODEPIN_DEMUX_IN = 0x00000000;
enum KSNODEPIN_DEMUX_OUT = 0x00000001;
enum KSNODEPIN_AEC_RENDER_IN = 0x00000001;
enum KSNODEPIN_AEC_RENDER_OUT = 0x00000000;
enum KSNODEPIN_AEC_CAPTURE_IN = 0x00000002;
enum KSNODEPIN_AEC_CAPTURE_OUT = 0x00000003;
enum AEC_STATUS_FD_HISTORY_UNINITIALIZED = 0x00000000;
enum AEC_STATUS_FD_HISTORY_CONTINUOUSLY_CONVERGED = 0x00000001;
enum AEC_STATUS_FD_HISTORY_PREVIOUSLY_DIVERGED = 0x00000002;
enum AEC_STATUS_FD_CURRENTLY_CONVERGED = 0x00000008;
enum AEC_MODE_PASS_THROUGH = 0x00000000;
enum AEC_MODE_HALF_DUPLEX = 0x00000001;
enum AEC_MODE_FULL_DUPLEX = 0x00000002;
enum KSPROPERTY_WAVE_QUEUED_POSITION = 0x00000001;
enum KSMETHOD_WAVE_QUEUED_BREAKLOOP = 0x00000001;
enum KSWAVE_COMPATCAPS_INPUT = 0x00000000;
enum KSWAVE_COMPATCAPS_OUTPUT = 0x00000001;
enum KSWAVE_BUFFER_ATTRIBUTEF_LOOPING = 0x00000001;
enum KSWAVE_BUFFER_ATTRIBUTEF_STATIC = 0x00000002;
enum SYSAUDIO_FLAGS_DONT_COMBINE_PINS = 0x00000001;
enum SYSAUDIO_FLAGS_CLEAR_PREFERRED = 0x00000002;
enum KSMPEGVIDMODE_PANSCAN = 0x00000001;
enum KSMPEGVIDMODE_LTRBOX = 0x00000002;
enum KSMPEGVIDMODE_SCALE = 0x00000004;
enum KSAC3_ALTERNATE_AUDIO_1 = 0x00000001;
enum KSAC3_ALTERNATE_AUDIO_2 = 0x00000002;
enum KSAC3_ALTERNATE_AUDIO_BOTH = 0x00000003;
enum KSAC3_SERVICE_MAIN_AUDIO = 0x00000000;
enum KSAC3_SERVICE_NO_DIALOG = 0x00000001;
enum KSAC3_SERVICE_VISUALLY_IMPAIRED = 0x00000002;
enum KSAC3_SERVICE_HEARING_IMPAIRED = 0x00000003;
enum KSAC3_SERVICE_DIALOG_ONLY = 0x00000004;
enum KSAC3_SERVICE_COMMENTARY = 0x00000005;
enum KSAC3_SERVICE_EMERGENCY_FLASH = 0x00000006;
enum KSAC3_SERVICE_VOICE_OVER = 0x00000007;
enum KSAUDDECOUTMODE_STEREO_ANALOG = 0x00000001;
enum KSAUDDECOUTMODE_PCM_51 = 0x00000002;
enum KSAUDDECOUTMODE_SPDIFF = 0x00000004;
enum KS_DVD_CGMS_RESERVED_MASK = 0x00000078;
enum KS_DVD_CGMS_COPY_PROTECT_MASK = 0x00000018;
enum KS_DVD_CGMS_COPY_PERMITTED = 0x00000000;
enum KS_DVD_CGMS_COPY_ONCE = 0x00000010;
enum KS_DVD_CGMS_NO_COPY = 0x00000018;
enum KS_DVD_COPYRIGHT_MASK = 0x00000040;
enum KS_DVD_NOT_COPYRIGHTED = 0x00000000;
enum KS_DVD_COPYRIGHTED = 0x00000040;
enum KS_DVD_SECTOR_PROTECT_MASK = 0x00000020;
enum KS_DVD_SECTOR_NOT_PROTECTED = 0x00000000;
enum KS_DVD_SECTOR_PROTECTED = 0x00000020;
enum KS_BI_RGB = 0x00000000;
enum KS_BI_RLE8 = 0x00000001;
enum KS_BI_RLE4 = 0x00000002;
enum KS_BI_BITFIELDS = 0x00000003;
enum KS_BI_JPEG = 0x00000004;
enum KS_iPALETTE_COLORS = 0x00000100;
enum KS_iEGA_COLORS = 0x00000010;
enum KS_iMASK_COLORS = 0x00000003;
enum KS_iTRUECOLOR = 0x00000010;
enum KS_iRED = 0x00000000;
enum KS_iGREEN = 0x00000001;
enum KS_iBLUE = 0x00000002;
enum KS_iPALETTE = 0x00000008;
enum KS_iMAXBITS = 0x00000008;
enum KS_VBIDATARATE_NABTS = 0x00576428;
enum KS_VBIDATARATE_CC = 0x0007aec5;
enum KS_TVTUNER_CHANGE_BEGIN_TUNE = 0x00000001;
enum KS_TVTUNER_CHANGE_END_TUNE = 0x00000002;
enum KS_INTERLACE_IsInterlaced = 0x00000001;
enum KS_INTERLACE_1FieldPerSample = 0x00000002;
enum KS_INTERLACE_Field1First = 0x00000004;
enum KS_INTERLACE_UNUSED = 0x00000008;
enum KS_INTERLACE_FieldPatternMask = 0x00000030;
enum KS_INTERLACE_FieldPatField1Only = 0x00000000;
enum KS_INTERLACE_FieldPatField2Only = 0x00000010;
enum KS_INTERLACE_FieldPatBothRegular = 0x00000020;
enum KS_INTERLACE_FieldPatBothIrregular = 0x00000030;
enum KS_INTERLACE_DisplayModeMask = 0x000000c0;
enum KS_INTERLACE_DisplayModeBobOnly = 0x00000000;
enum KS_INTERLACE_DisplayModeWeaveOnly = 0x00000040;
enum KS_INTERLACE_DisplayModeBobOrWeave = 0x00000080;
enum KS_COPYPROTECT_RestrictDuplication = 0x00000001;
enum KS_MPEG2_DoPanScan = 0x00000001;
enum KS_MPEG2_DVDLine21Field1 = 0x00000002;
enum KS_MPEG2_DVDLine21Field2 = 0x00000004;
enum KS_MPEG2_SourceIsLetterboxed = 0x00000008;
enum KS_MPEG2_FilmCameraMode = 0x00000010;
enum KS_MPEG2_LetterboxAnalogOut = 0x00000020;
enum KS_MPEG2_DSS_UserData = 0x00000040;
enum KS_MPEG2_DVB_UserData = 0x00000080;
enum KS_MPEG2_27MhzTimebase = 0x00000100;
enum KS_MPEG2_WidescreenAnalogOut = 0x00000200;
enum KS_AMCONTROL_USED = 0x00000001;
enum KS_AMCONTROL_PAD_TO_4x3 = 0x00000002;
enum KS_AMCONTROL_PAD_TO_16x9 = 0x00000004;
enum KS_AMCONTROL_COLORINFO_PRESENT = 0x00000080;
enum KS_MAX_SIZE_MPEG1_SEQUENCE_INFO = 0x0000008c;
enum KS_MPEGAUDIOINFO_27MhzTimebase = 0x00000001;
enum KS_VIDEOSTREAM_PREVIEW = 0x00000001;
enum KS_VIDEOSTREAM_CAPTURE = 0x00000002;
enum KS_VIDEOSTREAM_VBI = 0x00000010;
enum KS_VIDEOSTREAM_NABTS = 0x00000020;
enum KS_VIDEOSTREAM_CC = 0x00000100;
enum KS_VIDEOSTREAM_EDS = 0x00000200;
enum KS_VIDEOSTREAM_TELETEXT = 0x00000400;
enum KS_VIDEOSTREAM_STILL = 0x00001000;
enum KS_VIDEOSTREAM_IS_VPE = 0x00008000;
enum KS_VIDEO_ALLOC_VPE_SYSTEM = 0x00000001;
enum KS_VIDEO_ALLOC_VPE_DISPLAY = 0x00000002;
enum KS_VIDEO_ALLOC_VPE_AGP = 0x00000004;
enum KS_VBICAP_PROTECTION_MV_PRESENT = 0x00000001;
enum KS_VBICAP_PROTECTION_MV_HARDWARE = 0x00000002;
enum KS_VBICAP_PROTECTION_MV_DETECTED = 0x00000004;
enum KS_NABTS_GROUPID_ORIGINAL_CONTENT_BASE = 0x00000800;
enum KS_NABTS_GROUPID_ORIGINAL_CONTENT_ADVERTISER_BASE = 0x00000810;
enum KS_NABTS_GROUPID_PRODUCTION_COMPANY_CONTENT_BASE = 0x00000820;
enum KS_NABTS_GROUPID_PRODUCTION_COMPANY_ADVERTISER_BASE = 0x00000830;
enum KS_NABTS_GROUPID_SYNDICATED_SHOW_CONTENT_BASE = 0x00000840;
enum KS_NABTS_GROUPID_SYNDICATED_SHOW_ADVERTISER_BASE = 0x00000850;
enum KS_NABTS_GROUPID_NETWORK_WIDE_CONTENT_BASE = 0x00000860;
enum KS_NABTS_GROUPID_NETWORK_WIDE_ADVERTISER_BASE = 0x00000870;
enum KS_NABTS_GROUPID_TELEVISION_STATION_CONTENT_BASE = 0x00000880;
enum KS_NABTS_GROUPID_TELEVISION_STATION_ADVERTISER_BASE = 0x00000890;
enum KS_NABTS_GROUPID_LOCAL_CABLE_SYSTEM_CONTENT_BASE = 0x000008a0;
enum KS_NABTS_GROUPID_LOCAL_CABLE_SYSTEM_ADVERTISER_BASE = 0x000008b0;
enum KS_NABTS_GROUPID_MICROSOFT_RESERVED_TEST_DATA_BASE = 0x000008f0;
enum MAX_NABTS_VBI_LINES_PER_FIELD = 0x0000000b;
enum NABTS_LINES_PER_BUNDLE = 0x00000010;
enum NABTS_PAYLOAD_PER_LINE = 0x0000001c;
enum NABTS_BYTES_PER_LINE = 0x00000024;
enum KS_CC_SUBSTREAM_ODD = 0x00000001;
enum KS_CC_SUBSTREAM_EVEN = 0x00000002;
enum KS_CC_SUBSTREAM_FIELD1_MASK = 0x000000f0;
enum KS_CC_SUBSTREAM_SERVICE_CC1 = 0x00000010;
enum KS_CC_SUBSTREAM_SERVICE_CC2 = 0x00000020;
enum KS_CC_SUBSTREAM_SERVICE_T1 = 0x00000040;
enum KS_CC_SUBSTREAM_SERVICE_T2 = 0x00000080;
enum KS_CC_SUBSTREAM_FIELD2_MASK = 0x00001f00;
enum KS_CC_SUBSTREAM_SERVICE_CC3 = 0x00000100;
enum KS_CC_SUBSTREAM_SERVICE_CC4 = 0x00000200;
enum KS_CC_SUBSTREAM_SERVICE_T3 = 0x00000400;
enum KS_CC_SUBSTREAM_SERVICE_T4 = 0x00000800;
enum KS_CC_SUBSTREAM_SERVICE_XDS = 0x00001000;
enum CC_MAX_HW_DECODE_LINES = 0x0000000c;
enum NABTS_BUFFER_PICTURENUMBER_SUPPORT = 0x00000001;
enum WST_TVTUNER_CHANGE_BEGIN_TUNE = 0x00001000;
enum WST_TVTUNER_CHANGE_END_TUNE = 0x00002000;
enum MAX_WST_VBI_LINES_PER_FIELD = 0x00000011;
enum WST_BYTES_PER_LINE = 0x0000002a;
enum KS_VIDEO_FLAG_FIELD_MASK = 0x00000003;
enum KS_VIDEO_FLAG_FRAME = 0x00000000;
enum KS_VIDEO_FLAG_FIELD1 = 0x00000001;
enum KS_VIDEO_FLAG_FIELD2 = 0x00000002;
enum KS_VIDEO_FLAG_FIELD1FIRST = 0x00000004;
enum KS_VIDEO_FLAG_WEAVE = 0x00000008;
enum KS_VIDEO_FLAG_IPB_MASK = 0x00000030;
enum KS_VIDEO_FLAG_I_FRAME = 0x00000000;
enum KS_VIDEO_FLAG_P_FRAME = 0x00000010;
enum KS_VIDEO_FLAG_B_FRAME = 0x00000020;
enum KS_VIDEO_FLAG_REPEAT_FIELD = 0x00000040;
enum KS_VBI_FLAG_FRAME = 0x00000000;
enum KS_VBI_FLAG_FIELD1 = 0x00000001;
enum KS_VBI_FLAG_FIELD2 = 0x00000002;
enum KS_VBI_FLAG_MV_PRESENT = 0x00000100;
enum KS_VBI_FLAG_MV_HARDWARE = 0x00000200;
enum KS_VBI_FLAG_MV_DETECTED = 0x00000400;
enum KS_VBI_FLAG_TVTUNER_CHANGE = 0x00000010;
enum KS_VBI_FLAG_VBIINFOHEADER_CHANGE = 0x00000020;
enum KS_AnalogVideo_NTSC_Mask = 0x00000007;
enum KS_AnalogVideo_PAL_Mask = 0x00100ff0;
enum KS_AnalogVideo_SECAM_Mask = 0x000ff000;
enum KSPROPERTY_VIDEOPROCAMP_FLAGS_AUTO = 0x00000001;
enum KSPROPERTY_VIDEOPROCAMP_FLAGS_MANUAL = 0x00000002;
enum KSPROPERTY_CAMERACONTROL_FLAGS_AUTO = 0x00000001;
enum KSPROPERTY_CAMERACONTROL_FLAGS_MANUAL = 0x00000002;
enum KSPROPERTY_CAMERACONTROL_FLAGS_ASYNCHRONOUS = 0x00000004;
enum KSPROPERTY_CAMERACONTROL_FLAGS_ABSOLUTE = 0x00000000;
enum KSPROPERTY_CAMERACONTROL_FLAGS_RELATIVE = 0x00000010;
enum KSPROPERTY_CAMERACONTROL_FLASH_OFF = 0x00000000;
enum KSPROPERTY_CAMERACONTROL_FLASH_ON = 0x00000001;
enum KSPROPERTY_CAMERACONTROL_FLASH_AUTO = 0x00000002;
enum KSPROPERTY_CAMERACONTROL_FLASH_FLAGS_AUTO = 0x00000001;
enum KSPROPERTY_CAMERACONTROL_FLASH_FLAGS_MANUAL = 0x00000002;
enum KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_OFF = 0x00000000;
enum KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_HIGH = 0x00000001;
enum KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_MEDIUM = 0x00000002;
enum KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_LOW = 0x00000003;
enum KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_AUTO = 0x00000004;
enum KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_FLAGS_AUTO = 0x00000001;
enum KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_FLAGS_MANUAL = 0x00000002;
enum KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_FLAGS_AUTO = 0x00000001;
enum KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_FLAGS_MANUAL = 0x00000002;
enum KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_FLAGS_ASYNC = 0xffffffff80000000;
enum KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_CONFIG_FOCUS = 0x00000100;
enum KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_CONFIG_EXPOSURE = 0x00000200;
enum KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_CONFIG_WB = 0x00000400;
enum KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_CONVERGEMODE = 0x40000000;
enum KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_EXCLUSIVE_WITH_RECORD = 0x00000001;
enum KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_SEQUENCE_EXCLUSIVE_WITH_RECORD = 0x00000002;
enum KSCAMERA_EXTENDEDPROP_FILTERSCOPE = 0xffffffff;
enum KSCAMERA_EXTENDEDPROP_CAPS_RESERVED = 0xff00000000000000;
enum KSCAMERA_EXTENDEDPROP_CAPS_ASYNCCONTROL = 0x8000000000000000;
enum KSCAMERA_EXTENDEDPROP_CAPS_CANCELLABLE = 0x4000000000000000;
enum KSCAMERA_EXTENDEDPROP_FLAG_CANCELOPERATION = 0x8000000000000000;
enum KSCAMERA_EXTENDEDPROP_CAPS_MASK = 0xff00000000000000;
enum KSCAMERA_EXTENDEDPROP_FLAG_MASK = 0xff00000000000000;
enum KSCAMERA_EXTENDEDPROP_PHOTOMODE_NORMAL = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_PHOTOMODE_SEQUENCE = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_WARMSTART_MODE_DISABLED = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_WARMSTART_MODE_ENABLED = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_DISABLE = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_2X = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_4X = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_8X = 0x0000000000000004;
enum KSCAMERA_EXTENDEDPROP_PHOTOTHUMBNAIL_16X = 0x0000000000000008;
enum KSCAMERA_EXTENDEDPROP_SCENEMODE_AUTO = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_SCENEMODE_MACRO = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_SCENEMODE_PORTRAIT = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_SCENEMODE_SPORT = 0x0000000000000004;
enum KSCAMERA_EXTENDEDPROP_SCENEMODE_SNOW = 0x0000000000000008;
enum KSCAMERA_EXTENDEDPROP_SCENEMODE_NIGHT = 0x0000000000000010;
enum KSCAMERA_EXTENDEDPROP_SCENEMODE_BEACH = 0x0000000000000020;
enum KSCAMERA_EXTENDEDPROP_SCENEMODE_SUNSET = 0x0000000000000040;
enum KSCAMERA_EXTENDEDPROP_SCENEMODE_CANDLELIGHT = 0x0000000000000080;
enum KSCAMERA_EXTENDEDPROP_SCENEMODE_LANDSCAPE = 0x0000000000000100;
enum KSCAMERA_EXTENDEDPROP_SCENEMODE_NIGHTPORTRAIT = 0x0000000000000200;
enum KSCAMERA_EXTENDEDPROP_SCENEMODE_BACKLIT = 0x0000000000000400;
enum KSCAMERA_EXTENDEDPROP_SCENEMODE_MANUAL = 0x0080000000000000;
enum KSCAMERA_EXTENDEDPROP_VIDEOTORCH_OFF = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_VIDEOTORCH_ON = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_VIDEOTORCH_ON_ADJUSTABLEPOWER = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_FLASH_OFF = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_FLASH_ON = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_FLASH_ON_ADJUSTABLEPOWER = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_FLASH_AUTO = 0x0000000000000004;
enum KSCAMERA_EXTENDEDPROP_FLASH_AUTO_ADJUSTABLEPOWER = 0x0000000000000008;
enum KSCAMERA_EXTENDEDPROP_FLASH_REDEYEREDUCTION = 0x0000000000000010;
enum KSCAMERA_EXTENDEDPROP_FLASH_SINGLEFLASH = 0x0000000000000020;
enum KSCAMERA_EXTENDEDPROP_FLASH_MULTIFLASHSUPPORTED = 0x0000000000000040;
enum KSCAMERA_EXTENDEDPROP_OPTIMIZATION_PHOTO = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_OPTIMIZATION_VIDEO = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_OPTIMIZATION_DEFAULT = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_OPTIMIZATION_QUALITY = 0x0000000000000004;
enum KSCAMERA_EXTENDEDPROP_OPTIMIZATION_LATENCY = 0x0000000000000008;
enum KSCAMERA_EXTENDEDPROP_OPTIMIZATION_POWER = 0x0000000000000010;
enum KSCAMERA_EXTENDEDPROP_VIDEOPROCFLAG_AUTO = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_VIDEOPROCFLAG_MANUAL = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_VIDEOPROCFLAG_LOCK = 0x0000000000000004;
enum KSCAMERA_EXTENDEDPROP_FOCUS_CONTINUOUS = 0x0000000000000100;
enum KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_MACRO = 0x0000000000010000;
enum KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_NORMAL = 0x0000000000020000;
enum KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_FULLRANGE = 0x0000000000040000;
enum KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_INFINITY = 0x0000000000080000;
enum KSCAMERA_EXTENDEDPROP_FOCUS_RANGE_HYPERFOCAL = 0x0000000000100000;
enum KSCAMERA_EXTENDEDPROP_FOCUS_DISTANCE_INFINITY = 0x0000000001000000;
enum KSCAMERA_EXTENDEDPROP_FOCUS_DISTANCE_HYPERFOCAL = 0x0000000002000000;
enum KSCAMERA_EXTENDEDPROP_FOCUS_DISTANCE_NEAREST = 0x0000000004000000;
enum KSCAMERA_EXTENDEDPROP_ISO_AUTO = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_ISO_50 = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_ISO_80 = 0x0000000000000004;
enum KSCAMERA_EXTENDEDPROP_ISO_100 = 0x0000000000000008;
enum KSCAMERA_EXTENDEDPROP_ISO_200 = 0x0000000000000010;
enum KSCAMERA_EXTENDEDPROP_ISO_400 = 0x0000000000000020;
enum KSCAMERA_EXTENDEDPROP_ISO_800 = 0x0000000000000040;
enum KSCAMERA_EXTENDEDPROP_ISO_1600 = 0x0000000000000080;
enum KSCAMERA_EXTENDEDPROP_ISO_3200 = 0x0000000000000100;
enum KSCAMERA_EXTENDEDPROP_ISO_6400 = 0x0000000000000200;
enum KSCAMERA_EXTENDEDPROP_ISO_12800 = 0x0000000000000400;
enum KSCAMERA_EXTENDEDPROP_ISO_25600 = 0x0000000000000800;
enum KSCAMERA_EXTENDEDPROP_FOCUS_CONTINUOUSLOCK = 0x0000000000000200;
enum KSCAMERA_EXTENDEDPROP_FOCUS_UNLOCK = 0x0000000000000400;
enum KSCAMERA_EXTENDEDPROP_FOCUS_DRIVERFALLBACK_OFF = 0x0000000000000800;
enum KSCAMERA_EXTENDEDPROP_FOCUS_REGIONBASED = 0x0000000000001000;
enum KSCAMERA_EXTENDEDPROP_ISO_MANUAL = 0x0080000000000000;
enum KSCAMERA_EXTENDEDPROP_FLASH_ASSISTANT_OFF = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_FLASH_ASSISTANT_ON = 0x0000000000000080;
enum KSCAMERA_EXTENDEDPROP_FLASH_ASSISTANT_AUTO = 0x0000000000000100;
enum KSCAMERA_EXTENDEDPROP_EVCOMP_SIXTHSTEP = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_EVCOMP_QUARTERSTEP = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_EVCOMP_THIRDSTEP = 0x0000000000000004;
enum KSCAMERA_EXTENDEDPROP_EVCOMP_HALFSTEP = 0x0000000000000008;
enum KSCAMERA_EXTENDEDPROP_EVCOMP_FULLSTEP = 0x0000000000000010;
enum KSCAMERA_EXTENDEDPROP_PHOTOMODE_SEQUENCE_SUB_NONE = 0x00000000;
enum KSCAMERA_EXTENDEDPROP_PHOTOMODE_SEQUENCE_SUB_VARIABLE = 0x00000001;
enum KSCAMERA_EXTENDEDPROP_METADATA_MEMORYTYPE_MASK = 0x00000000000000ff;
enum KSCAMERA_EXTENDEDPROP_METADATA_SYSTEMMEMORY = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_METADATA_ALIGNMENTREQUIRED = 0x0000000000000100;
enum KSCAMERA_METADATA_FRAMEILLUMINATION_FLAG_ON = 0x00000001;
enum KSCAMERA_METADATA_CAPTURESTATS_FLAG_EXPOSURETIME = 0x00000001;
enum KSCAMERA_METADATA_CAPTURESTATS_FLAG_EXPOSURECOMPENSATION = 0x00000002;
enum KSCAMERA_METADATA_CAPTURESTATS_FLAG_ISOSPEED = 0x00000004;
enum KSCAMERA_METADATA_CAPTURESTATS_FLAG_FOCUSSTATE = 0x00000008;
enum KSCAMERA_METADATA_CAPTURESTATS_FLAG_LENSPOSITION = 0x00000010;
enum KSCAMERA_METADATA_CAPTURESTATS_FLAG_WHITEBALANCE = 0x00000020;
enum KSCAMERA_METADATA_CAPTURESTATS_FLAG_FLASH = 0x00000040;
enum KSCAMERA_METADATA_CAPTURESTATS_FLAG_FLASHPOWER = 0x00000080;
enum KSCAMERA_METADATA_CAPTURESTATS_FLAG_ZOOMFACTOR = 0x00000100;
enum KSCAMERA_METADATA_CAPTURESTATS_FLAG_SCENEMODE = 0x00000200;
enum KSCAMERA_METADATA_CAPTURESTATS_FLAG_SENSORFRAMERATE = 0x00000400;
enum KSCAMERA_EXTENDEDPROP_FOCUSPRIORITY_OFF = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_FOCUSPRIORITY_ON = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_PHOTOCONFIRMATION_OFF = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_PHOTOCONFIRMATION_ON = 0x0000000000000001;
enum KSCAMERA_PERFRAMESETTING_AUTO = 0x0000000100000000;
enum KSCAMERA_PERFRAMESETTING_MANUAL = 0x0000000200000000;
enum KSCAMERA_EXTENDEDPROP_VIDEOSTABILIZATION_OFF = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_VIDEOSTABILIZATION_ON = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_VIDEOSTABILIZATION_AUTO = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_VFR_OFF = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_VFR_ON = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_FACEDETECTION_OFF = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_FACEDETECTION_ON = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_FACEDETECTION_PREVIEW = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_FACEDETECTION_VIDEO = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_FACEDETECTION_PHOTO = 0x0000000000000004;
enum KSCAMERA_EXTENDEDPROP_FACEDETECTION_BLINK = 0x0000000000000008;
enum KSCAMERA_EXTENDEDPROP_FACEDETECTION_SMILE = 0x0000000000000010;
enum KSCAMERA_EXTENDEDPROP_VIDEOHDR_OFF = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_VIDEOHDR_ON = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_VIDEOHDR_AUTO = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_HISTOGRAM_OFF = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_HISTOGRAM_ON = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_OIS_OFF = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_OIS_ON = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_OIS_AUTO = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_OFF = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_AUTO = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_HDR = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_FNF = 0x0000000000000004;
enum KSCAMERA_EXTENDEDPROP_ADVANCEDPHOTO_ULTRALOWLIGHT = 0x0000000000000008;
enum KSCAMERA_EXTENDEDPROP_ZOOM_DEFAULT = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_ZOOM_DIRECT = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_ZOOM_SMOOTH = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_FACEAUTH_MODE_DISABLED = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_FACEAUTH_MODE_ALTERNATIVE_FRAME_ILLUMINATION = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_FACEAUTH_MODE_BACKGROUND_SUBTRACTION = 0x0000000000000004;
enum KSCAMERA_EXTENDEDPROP_SECUREMODE_DISABLED = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_SECUREMODE_ENABLED = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_VIDEOTEMPORALDENOISING_AUTO = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_VIDEOTEMPORALDENOISING_OFF = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_VIDEOTEMPORALDENOISING_ON = 0x0000000000000004;
enum KSCAMERA_EXTENDEDPROP_IRTORCHMODE_OFF = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_IRTORCHMODE_ALWAYS_ON = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_IRTORCHMODE_ALTERNATING_FRAME_ILLUMINATION = 0x0000000000000004;
enum KSCAMERA_EXTENDEDPROP_RELATIVEPANELOPTIMIZATION_OFF = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_RELATIVEPANELOPTIMIZATION_ON = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_RELATIVEPANELOPTIMIZATION_DYNAMIC = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_EYEGAZECORRECTION_OFF = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_EYEGAZECORRECTION_ON = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_EYEGAZECORRECTION_STARE = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_OFF = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_BLUR = 0x0000000000000001;
enum KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_MASK = 0x0000000000000002;
enum KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_SHALLOWFOCUS = 0x0000000000000004;
enum KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_MANUAL = 0x0000000000000000;
enum KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_AUTOFACEFRAMING = 0x0000000000000001;
enum KSCAMERAPROFILE_FLAGS_VIDEOSTABLIZATION = 0x0000000000000001;
enum KSCAMERAPROFILE_FLAGS_VIDEOHDR = 0x0000000000000002;
enum KSCAMERAPROFILE_FLAGS_PHOTOHDR = 0x0000000000000004;
enum KSCAMERAPROFILE_FLAGS_FACEDETECTION = 0x0000000000000008;
enum KSCAMERAPROFILE_FLAGS_VARIABLEPHOTOSEQUENCE = 0x0000000000000010;
enum KSCAMERAPROFILE_FLAGS_PREVIEW_RES_MUSTMATCH = 0x0000000000000020;
enum KSDEVICE_PROFILE_TYPE_UNKNOWN = 0x00000000;
enum KSDEVICE_PROFILE_TYPE_CAMERA = 0x00000001;
enum KSCameraProfileSensorType_RGB = 0x00000001;
enum KSCameraProfileSensorType_Infrared = 0x00000002;
enum KSCameraProfileSensorType_Depth = 0x00000004;
enum KSCameraProfileSensorType_PoseTracking = 0x00000008;
enum KSCameraProfileSensorType_ImageSegmentation = 0x00000010;
enum KSCameraProfileSensorType_Custom = 0x00000080;
enum KS_TVAUDIO_MODE_MONO = 0x00000001;
enum KS_TVAUDIO_MODE_STEREO = 0x00000002;
enum KS_TVAUDIO_MODE_LANG_A = 0x00000010;
enum KS_TVAUDIO_MODE_LANG_B = 0x00000020;
enum KS_TVAUDIO_MODE_LANG_C = 0x00000040;
enum KS_TVAUDIO_PRESET_STEREO = 0x00000200;
enum KS_TVAUDIO_PRESET_LANG_A = 0x00001000;
enum KS_TVAUDIO_PRESET_LANG_B = 0x00002000;
enum KS_TVAUDIO_PRESET_LANG_C = 0x00004000;
enum KS_AM_UseNewCSSKey = 0x00000001;
enum MAX_SINK_DESCRIPTION_NAME_LENGTH = 0x00000020;
enum JACKDESC2_PRESENCE_DETECT_CAPABILITY = 0x00000001;
enum JACKDESC2_DYNAMIC_FORMAT_CHANGE_CAPABILITY = 0x00000002;
enum KSPROPERTY_AUDIO_BUFFER_DURATION = 0x00000001;
enum MAX_RESOURCEGROUPID_LENGTH = 0x00000100;
enum AUDIOMODULE_MAX_DATA_SIZE = 0x0000fa00;
enum AUDIOMODULE_MAX_NAME_CCH_SIZE = 0x00000080;
enum AllocatorStrategy_DontCare = 0x00000000;
enum AllocatorStrategy_MinimizeNumberOfFrames = 0x00000001;
enum AllocatorStrategy_MinimizeFrameSize = 0x00000002;
enum AllocatorStrategy_MinimizeNumberOfAllocators = 0x00000004;
enum AllocatorStrategy_MaximizeSpeed = 0x00000008;
enum PipeFactor_None = 0x00000000;
enum PipeFactor_UserModeUpstream = 0x00000001;
enum PipeFactor_UserModeDownstream = 0x00000002;
enum PipeFactor_MemoryTypes = 0x00000004;
enum PipeFactor_Flags = 0x00000008;
enum PipeFactor_PhysicalRanges = 0x00000010;
enum PipeFactor_OptimalRanges = 0x00000020;
enum PipeFactor_FixedCompression = 0x00000040;
enum PipeFactor_UnknownCompression = 0x00000080;
enum PipeFactor_Buffers = 0x00000100;
enum PipeFactor_Align = 0x00000200;
enum PipeFactor_PhysicalEnd = 0x00000400;
enum PipeFactor_LogicalEnd = 0x00000800;
enum KSPROPERTY_MEMORY_TRANSPORT = 0x00000001;
struct IKsPin
{
}
struct IKsAllocator
{
}
struct IKsAllocatorEx
{
}
struct KSSTREAM_HEADER
{
    uint Size;
    uint TypeSpecificFlags;
    KSTIME PresentationTime;
    long Duration;
    uint FrameExtent;
    uint DataUsed;
    void* Data;
    uint OptionsFlags;
    uint Reserved;
}
struct KSNODEPROPERTY_AUDIO_3D_LISTENER
{
    KSNODEPROPERTY NodeProperty;
    void* ListenerId;
}
struct KSNODEPROPERTY_AUDIO_PROPERTY
{
    KSNODEPROPERTY NodeProperty;
    void* AppContext;
    uint Length;
}
enum IID_IKsControl = GUID(0x28f54685, 0x6fd, 0x11d2, [0xb2, 0x7a, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
interface IKsControl : IUnknown
{
    HRESULT KsProperty(KSIDENTIFIER*, uint, void*, uint, uint*);
    HRESULT KsMethod(KSIDENTIFIER*, uint, void*, uint, uint*);
    HRESULT KsEvent(KSIDENTIFIER*, uint, void*, uint, uint*);
}
enum IID_IKsFormatSupport = GUID(0x3cb4a69d, 0xbb6f, 0x4d2b, [0x95, 0xb7, 0x45, 0x2d, 0x2c, 0x15, 0x5d, 0xb5]);
interface IKsFormatSupport : IUnknown
{
    HRESULT IsFormatSupported(KSDATAFORMAT*, uint, BOOL*);
    HRESULT GetDevicePreferredFormat(KSDATAFORMAT**);
}
enum IID_IKsJackDescription = GUID(0x4509f757, 0x2d46, 0x4637, [0x8e, 0x62, 0xce, 0x7d, 0xb9, 0x44, 0xf5, 0x7b]);
interface IKsJackDescription : IUnknown
{
    HRESULT GetJackCount(uint*);
    HRESULT GetJackDescription(uint, KSJACK_DESCRIPTION*);
}
enum IID_IKsJackDescription2 = GUID(0x478f3a9b, 0xe0c9, 0x4827, [0x92, 0x28, 0x6f, 0x55, 0x5, 0xff, 0xe7, 0x6a]);
interface IKsJackDescription2 : IUnknown
{
    HRESULT GetJackCount(uint*);
    HRESULT GetJackDescription2(uint, KSJACK_DESCRIPTION2*);
}
enum IID_IKsJackSinkInformation = GUID(0xd9bd72ed, 0x290f, 0x4581, [0x9f, 0xf3, 0x61, 0x2, 0x7a, 0x8f, 0xe5, 0x32]);
interface IKsJackSinkInformation : IUnknown
{
    HRESULT GetJackSinkInformation(KSJACK_SINK_INFORMATION*);
}
enum IID_IKsJackContainerId = GUID(0xc99af463, 0xd629, 0x4ec4, [0x8c, 0x0, 0xe5, 0x4d, 0x68, 0x15, 0x42, 0x48]);
interface IKsJackContainerId : IUnknown
{
    HRESULT GetJackContainerId(GUID*);
}
enum CLSID_GUID_NULL = GUID(0x0, 0x0, 0x0, [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]);
struct GUID_NULL
{
}
alias KSRESET = int;
enum : int
{
    KSRESET_BEGIN = 0x00000000,
    KSRESET_END   = 0x00000001,
}

alias KSSTATE = int;
enum : int
{
    KSSTATE_STOP    = 0x00000000,
    KSSTATE_ACQUIRE = 0x00000001,
    KSSTATE_PAUSE   = 0x00000002,
    KSSTATE_RUN     = 0x00000003,
}

struct KSPRIORITY
{
    uint PriorityClass;
    uint PrioritySubClass;
}
struct KSIDENTIFIER
{
    union
    {
        struct
        {
            GUID Set;
            uint Id;
            uint Flags;
        }
        long Alignment;
    }
}
struct KSP_NODE
{
    KSIDENTIFIER Property;
    uint NodeId;
    uint Reserved;
}
struct KSM_NODE
{
    KSIDENTIFIER Method;
    uint NodeId;
    uint Reserved;
}
struct KSE_NODE
{
    KSIDENTIFIER Event;
    uint NodeId;
    uint Reserved;
}
enum CLSID_KSPROPTYPESETID_General = GUID(0x97e99ba0, 0xbdea, 0x11cf, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSPROPTYPESETID_General
{
}
struct KSMULTIPLE_ITEM
{
    uint Size;
    uint Count;
}
struct KSPROPERTY_DESCRIPTION
{
    uint AccessFlags;
    uint DescriptionSize;
    KSIDENTIFIER PropTypeSet;
    uint MembersListCount;
    uint Reserved;
}
struct KSPROPERTY_MEMBERSHEADER
{
    uint MembersFlags;
    uint MembersSize;
    uint MembersCount;
    uint Flags;
}
union KSPROPERTY_BOUNDS_LONG
{
    struct
    {
        int SignedMinimum;
        int SignedMaximum;
    }
    struct
    {
        uint UnsignedMinimum;
        uint UnsignedMaximum;
    }
}
union KSPROPERTY_BOUNDS_LONGLONG
{
    struct
    {
        long SignedMinimum;
        long SignedMaximum;
    }
    struct
    {
        ulong UnsignedMinimum;
        ulong UnsignedMaximum;
    }
}
struct KSPROPERTY_STEPPING_LONG
{
    uint SteppingDelta;
    uint Reserved;
    KSPROPERTY_BOUNDS_LONG Bounds;
}
struct KSPROPERTY_STEPPING_LONGLONG
{
    ulong SteppingDelta;
    KSPROPERTY_BOUNDS_LONGLONG Bounds;
}
struct KSEVENTDATA
{
    uint NotificationType;
    union
    {
        struct _EventHandle_e__Struct
        {
            HANDLE Event;
            ulong[2] Reserved;
        }
        struct _SemaphoreHandle_e__Struct
        {
            HANDLE Semaphore;
            uint Reserved;
            int Adjustment;
        }
        struct _Alignment_e__Struct
        {
            void* Unused;
            long[2] Alignment;
        }
    }
}
struct KSQUERYBUFFER
{
    KSIDENTIFIER Event;
    KSEVENTDATA* EventData;
    void* Reserved;
}
struct KSRELATIVEEVENT
{
    uint Size;
    uint Flags;
    union
    {
        HANDLE ObjectHandle;
        void* ObjectPointer;
    }
    void* Reserved;
    KSIDENTIFIER Event;
    KSEVENTDATA EventData;
}
struct KSEVENT_TIME_MARK
{
    KSEVENTDATA EventData;
    long MarkTime;
}
struct KSEVENT_TIME_INTERVAL
{
    KSEVENTDATA EventData;
    long TimeBase;
    long Interval;
}
struct KSINTERVAL
{
    long TimeBase;
    long Interval;
}
enum CLSID_KSPROPSETID_General = GUID(0x1464eda5, 0x6a8f, 0x11d1, [0x9a, 0xa7, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSPROPSETID_General
{
}
alias KSPROPERTY_GENERAL = int;
enum : int
{
    KSPROPERTY_GENERAL_COMPONENTID = 0x00000000,
}

struct KSCOMPONENTID
{
    GUID Manufacturer;
    GUID Product;
    GUID Component;
    GUID Name;
    uint Version;
    uint Revision;
}
enum CLSID_KSMETHODSETID_StreamIo = GUID(0x65d003ca, 0x1523, 0x11d2, [0xb2, 0x7a, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSMETHODSETID_StreamIo
{
}
alias KSMETHOD_STREAMIO = int;
enum : int
{
    KSMETHOD_STREAMIO_READ  = 0x00000000,
    KSMETHOD_STREAMIO_WRITE = 0x00000001,
}

enum CLSID_KSPROPSETID_MediaSeeking = GUID(0xee904f0c, 0xd09b, 0x11d0, [0xab, 0xe9, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSPROPSETID_MediaSeeking
{
}
alias KSPROPERTY_MEDIASEEKING = int;
enum : int
{
    KSPROPERTY_MEDIASEEKING_CAPABILITIES      = 0x00000000,
    KSPROPERTY_MEDIASEEKING_FORMATS           = 0x00000001,
    KSPROPERTY_MEDIASEEKING_TIMEFORMAT        = 0x00000002,
    KSPROPERTY_MEDIASEEKING_POSITION          = 0x00000003,
    KSPROPERTY_MEDIASEEKING_STOPPOSITION      = 0x00000004,
    KSPROPERTY_MEDIASEEKING_POSITIONS         = 0x00000005,
    KSPROPERTY_MEDIASEEKING_DURATION          = 0x00000006,
    KSPROPERTY_MEDIASEEKING_AVAILABLE         = 0x00000007,
    KSPROPERTY_MEDIASEEKING_PREROLL           = 0x00000008,
    KSPROPERTY_MEDIASEEKING_CONVERTTIMEFORMAT = 0x00000009,
}

alias KS_SEEKING_FLAGS = int;
enum : int
{
    KS_SEEKING_NoPositioning          = 0x00000000,
    KS_SEEKING_AbsolutePositioning    = 0x00000001,
    KS_SEEKING_RelativePositioning    = 0x00000002,
    KS_SEEKING_IncrementalPositioning = 0x00000003,
    KS_SEEKING_PositioningBitsMask    = 0x00000003,
    KS_SEEKING_SeekToKeyFrame         = 0x00000004,
    KS_SEEKING_ReturnTime             = 0x00000008,
}

alias KS_SEEKING_CAPABILITIES = int;
enum : int
{
    KS_SEEKING_CanSeekAbsolute  = 0x00000001,
    KS_SEEKING_CanSeekForwards  = 0x00000002,
    KS_SEEKING_CanSeekBackwards = 0x00000004,
    KS_SEEKING_CanGetCurrentPos = 0x00000008,
    KS_SEEKING_CanGetStopPos    = 0x00000010,
    KS_SEEKING_CanGetDuration   = 0x00000020,
    KS_SEEKING_CanPlayBackwards = 0x00000040,
}

struct KSPROPERTY_POSITIONS
{
    long Current;
    long Stop;
    KS_SEEKING_FLAGS CurrentFlags;
    KS_SEEKING_FLAGS StopFlags;
}
struct KSPROPERTY_MEDIAAVAILABLE
{
    long Earliest;
    long Latest;
}
struct KSP_TIMEFORMAT
{
    KSIDENTIFIER Property;
    GUID SourceFormat;
    GUID TargetFormat;
    long Time;
}
enum CLSID_KSPROPSETID_Topology = GUID(0x720d4ac0, 0x7533, 0x11d0, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSPROPSETID_Topology
{
}
alias KSPROPERTY_TOPOLOGY = int;
enum : int
{
    KSPROPERTY_TOPOLOGY_CATEGORIES  = 0x00000000,
    KSPROPERTY_TOPOLOGY_NODES       = 0x00000001,
    KSPROPERTY_TOPOLOGY_CONNECTIONS = 0x00000002,
    KSPROPERTY_TOPOLOGY_NAME        = 0x00000003,
}

enum CLSID_KSCATEGORY_BRIDGE = GUID(0x85aff00, 0x62ce, 0x11cf, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSCATEGORY_BRIDGE
{
}
enum CLSID_KSCATEGORY_CAPTURE = GUID(0x65e8773d, 0x8f56, 0x11d0, [0xa3, 0xb9, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSCATEGORY_CAPTURE
{
}
enum CLSID_KSCATEGORY_VIDEO_CAMERA = GUID(0xe5323777, 0xf976, 0x4f5b, [0x9b, 0x55, 0xb9, 0x46, 0x99, 0xc4, 0x6e, 0x44]);
struct KSCATEGORY_VIDEO_CAMERA
{
}
enum CLSID_KSCATEGORY_SENSOR_CAMERA = GUID(0x24e552d7, 0x6523, 0x47f7, [0xa6, 0x47, 0xd3, 0x46, 0x5b, 0xf1, 0xf5, 0xca]);
struct KSCATEGORY_SENSOR_CAMERA
{
}
enum CLSID_KSCATEGORY_NETWORK_CAMERA = GUID(0xb8238652, 0xb500, 0x41eb, [0xb4, 0xf3, 0x42, 0x34, 0xf7, 0xf5, 0xae, 0x99]);
struct KSCATEGORY_NETWORK_CAMERA
{
}
enum CLSID_KSCATEGORY_SENSOR_GROUP = GUID(0x669c7214, 0xa88, 0x4311, [0xa7, 0xf3, 0x4e, 0x79, 0x82, 0xe, 0x33, 0xbd]);
struct KSCATEGORY_SENSOR_GROUP
{
}
enum CLSID_KSCATEGORY_RENDER = GUID(0x65e8773e, 0x8f56, 0x11d0, [0xa3, 0xb9, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSCATEGORY_RENDER
{
}
enum CLSID_KSCATEGORY_MIXER = GUID(0xad809c00, 0x7b88, 0x11d0, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSCATEGORY_MIXER
{
}
enum CLSID_KSCATEGORY_SPLITTER = GUID(0xa4252a0, 0x7e70, 0x11d0, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSCATEGORY_SPLITTER
{
}
enum CLSID_KSCATEGORY_DATACOMPRESSOR = GUID(0x1e84c900, 0x7e70, 0x11d0, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSCATEGORY_DATACOMPRESSOR
{
}
enum CLSID_KSCATEGORY_DATADECOMPRESSOR = GUID(0x2721ae20, 0x7e70, 0x11d0, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSCATEGORY_DATADECOMPRESSOR
{
}
enum CLSID_KSCATEGORY_DATATRANSFORM = GUID(0x2eb07ea0, 0x7e70, 0x11d0, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSCATEGORY_DATATRANSFORM
{
}
enum CLSID_KSMFT_CATEGORY_VIDEO_DECODER = GUID(0xd6c02d4b, 0x6833, 0x45b4, [0x97, 0x1a, 0x5, 0xa4, 0xb0, 0x4b, 0xab, 0x91]);
struct KSMFT_CATEGORY_VIDEO_DECODER
{
}
enum CLSID_KSMFT_CATEGORY_VIDEO_ENCODER = GUID(0xf79eac7d, 0xe545, 0x4387, [0xbd, 0xee, 0xd6, 0x47, 0xd7, 0xbd, 0xe4, 0x2a]);
struct KSMFT_CATEGORY_VIDEO_ENCODER
{
}
enum CLSID_KSMFT_CATEGORY_VIDEO_EFFECT = GUID(0x12e17c21, 0x532c, 0x4a6e, [0x8a, 0x1c, 0x40, 0x82, 0x5a, 0x73, 0x63, 0x97]);
struct KSMFT_CATEGORY_VIDEO_EFFECT
{
}
enum CLSID_KSMFT_CATEGORY_MULTIPLEXER = GUID(0x59c561e, 0x5ae, 0x4b61, [0xb6, 0x9d, 0x55, 0xb6, 0x1e, 0xe5, 0x4a, 0x7b]);
struct KSMFT_CATEGORY_MULTIPLEXER
{
}
enum CLSID_KSMFT_CATEGORY_DEMULTIPLEXER = GUID(0xa8700a7a, 0x939b, 0x44c5, [0x99, 0xd7, 0x76, 0x22, 0x6b, 0x23, 0xb3, 0xf1]);
struct KSMFT_CATEGORY_DEMULTIPLEXER
{
}
enum CLSID_KSMFT_CATEGORY_AUDIO_DECODER = GUID(0x9ea73fb4, 0xef7a, 0x4559, [0x8d, 0x5d, 0x71, 0x9d, 0x8f, 0x4, 0x26, 0xc7]);
struct KSMFT_CATEGORY_AUDIO_DECODER
{
}
enum CLSID_KSMFT_CATEGORY_AUDIO_ENCODER = GUID(0x91c64bd0, 0xf91e, 0x4d8c, [0x92, 0x76, 0xdb, 0x24, 0x82, 0x79, 0xd9, 0x75]);
struct KSMFT_CATEGORY_AUDIO_ENCODER
{
}
enum CLSID_KSMFT_CATEGORY_AUDIO_EFFECT = GUID(0x11064c48, 0x3648, 0x4ed0, [0x93, 0x2e, 0x5, 0xce, 0x8a, 0xc8, 0x11, 0xb7]);
struct KSMFT_CATEGORY_AUDIO_EFFECT
{
}
enum CLSID_KSMFT_CATEGORY_VIDEO_PROCESSOR = GUID(0x302ea3fc, 0xaa5f, 0x47f9, [0x9f, 0x7a, 0xc2, 0x18, 0x8b, 0xb1, 0x63, 0x2]);
struct KSMFT_CATEGORY_VIDEO_PROCESSOR
{
}
enum CLSID_KSMFT_CATEGORY_OTHER = GUID(0x90175d57, 0xb7ea, 0x4901, [0xae, 0xb3, 0x93, 0x3a, 0x87, 0x47, 0x75, 0x6f]);
struct KSMFT_CATEGORY_OTHER
{
}
enum CLSID_KSCATEGORY_COMMUNICATIONSTRANSFORM = GUID(0xcf1dda2c, 0x9743, 0x11d0, [0xa3, 0xee, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSCATEGORY_COMMUNICATIONSTRANSFORM
{
}
enum CLSID_KSCATEGORY_INTERFACETRANSFORM = GUID(0xcf1dda2d, 0x9743, 0x11d0, [0xa3, 0xee, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSCATEGORY_INTERFACETRANSFORM
{
}
enum CLSID_KSCATEGORY_MEDIUMTRANSFORM = GUID(0xcf1dda2e, 0x9743, 0x11d0, [0xa3, 0xee, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSCATEGORY_MEDIUMTRANSFORM
{
}
enum CLSID_KSCATEGORY_FILESYSTEM = GUID(0x760fed5e, 0x9357, 0x11d0, [0xa3, 0xcc, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSCATEGORY_FILESYSTEM
{
}
enum CLSID_KSCATEGORY_CLOCK = GUID(0x53172480, 0x4791, 0x11d0, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSCATEGORY_CLOCK
{
}
enum CLSID_KSCATEGORY_PROXY = GUID(0x97ebaaca, 0x95bd, 0x11d0, [0xa3, 0xea, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSCATEGORY_PROXY
{
}
enum CLSID_KSCATEGORY_QUALITY = GUID(0x97ebaacb, 0x95bd, 0x11d0, [0xa3, 0xea, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSCATEGORY_QUALITY
{
}
struct KSTOPOLOGY_CONNECTION
{
    uint FromNode;
    uint FromNodePin;
    uint ToNode;
    uint ToNodePin;
}
struct KSTOPOLOGY
{
    uint CategoriesCount;
    const(GUID)* Categories;
    uint TopologyNodesCount;
    const(GUID)* TopologyNodes;
    uint TopologyConnectionsCount;
    const(KSTOPOLOGY_CONNECTION)* TopologyConnections;
    const(GUID)* TopologyNodesNames;
    uint Reserved;
}
struct KSNODE_CREATE
{
    uint CreateFlags;
    uint Node;
}
enum CLSID_KSTIME_FORMAT_FRAME = GUID(0x7b785570, 0x8c82, 0x11cf, [0xbc, 0xc, 0x0, 0xaa, 0x0, 0xac, 0x74, 0xf6]);
struct KSTIME_FORMAT_FRAME
{
}
enum CLSID_KSTIME_FORMAT_BYTE = GUID(0x7b785571, 0x8c82, 0x11cf, [0xbc, 0xc, 0x0, 0xaa, 0x0, 0xac, 0x74, 0xf6]);
struct KSTIME_FORMAT_BYTE
{
}
enum CLSID_KSTIME_FORMAT_SAMPLE = GUID(0x7b785572, 0x8c82, 0x11cf, [0xbc, 0xc, 0x0, 0xaa, 0x0, 0xac, 0x74, 0xf6]);
struct KSTIME_FORMAT_SAMPLE
{
}
enum CLSID_KSTIME_FORMAT_FIELD = GUID(0x7b785573, 0x8c82, 0x11cf, [0xbc, 0xc, 0x0, 0xaa, 0x0, 0xac, 0x74, 0xf6]);
struct KSTIME_FORMAT_FIELD
{
}
enum CLSID_KSTIME_FORMAT_MEDIA_TIME = GUID(0x7b785574, 0x8c82, 0x11cf, [0xbc, 0xc, 0x0, 0xaa, 0x0, 0xac, 0x74, 0xf6]);
struct KSTIME_FORMAT_MEDIA_TIME
{
}
enum CLSID_KSINTERFACESETID_Standard = GUID(0x1a8766a0, 0x62ce, 0x11cf, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSINTERFACESETID_Standard
{
}
alias KSINTERFACE_STANDARD = int;
enum : int
{
    KSINTERFACE_STANDARD_STREAMING        = 0x00000000,
    KSINTERFACE_STANDARD_LOOPED_STREAMING = 0x00000001,
    KSINTERFACE_STANDARD_CONTROL          = 0x00000002,
}

enum CLSID_KSINTERFACESETID_FileIo = GUID(0x8c6f932c, 0xe771, 0x11d0, [0xb8, 0xff, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSINTERFACESETID_FileIo
{
}
alias KSINTERFACE_FILEIO = int;
enum : int
{
    KSINTERFACE_FILEIO_STREAMING = 0x00000000,
}

enum CLSID_KSMEDIUMSETID_Standard = GUID(0x4747b320, 0x62ce, 0x11cf, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSMEDIUMSETID_Standard
{
}
enum CLSID_KSPROPSETID_Pin = GUID(0x8c134960, 0x51ad, 0x11cf, [0x87, 0x8a, 0x94, 0xf8, 0x1, 0xc1, 0x0, 0x0]);
struct KSPROPSETID_Pin
{
}
alias KSPROPERTY_PIN = int;
enum : int
{
    KSPROPERTY_PIN_CINSTANCES            = 0x00000000,
    KSPROPERTY_PIN_CTYPES                = 0x00000001,
    KSPROPERTY_PIN_DATAFLOW              = 0x00000002,
    KSPROPERTY_PIN_DATARANGES            = 0x00000003,
    KSPROPERTY_PIN_DATAINTERSECTION      = 0x00000004,
    KSPROPERTY_PIN_INTERFACES            = 0x00000005,
    KSPROPERTY_PIN_MEDIUMS               = 0x00000006,
    KSPROPERTY_PIN_COMMUNICATION         = 0x00000007,
    KSPROPERTY_PIN_GLOBALCINSTANCES      = 0x00000008,
    KSPROPERTY_PIN_NECESSARYINSTANCES    = 0x00000009,
    KSPROPERTY_PIN_PHYSICALCONNECTION    = 0x0000000a,
    KSPROPERTY_PIN_CATEGORY              = 0x0000000b,
    KSPROPERTY_PIN_NAME                  = 0x0000000c,
    KSPROPERTY_PIN_CONSTRAINEDDATARANGES = 0x0000000d,
    KSPROPERTY_PIN_PROPOSEDATAFORMAT     = 0x0000000e,
    KSPROPERTY_PIN_PROPOSEDATAFORMAT2    = 0x0000000f,
    KSPROPERTY_PIN_MODEDATAFORMATS       = 0x00000010,
}

struct KSP_PIN
{
    KSIDENTIFIER Property;
    uint PinId;
    union
    {
        uint Reserved;
        uint Flags;
    }
}
struct KSE_PIN
{
    KSIDENTIFIER Event;
    uint PinId;
    uint Reserved;
}
struct KSPIN_CINSTANCES
{
    uint PossibleCount;
    uint CurrentCount;
}
alias KSPIN_DATAFLOW = int;
enum : int
{
    KSPIN_DATAFLOW_IN  = 0x00000001,
    KSPIN_DATAFLOW_OUT = 0x00000002,
}

union KSDATAFORMAT
{
    struct
    {
        uint FormatSize;
        uint Flags;
        uint SampleSize;
        uint Reserved;
        GUID MajorFormat;
        GUID SubFormat;
        GUID Specifier;
    }
    long Alignment;
}
struct KSATTRIBUTE
{
    uint Size;
    uint Flags;
    GUID Attribute;
}
alias KSPIN_COMMUNICATION = int;
enum : int
{
    KSPIN_COMMUNICATION_NONE   = 0x00000000,
    KSPIN_COMMUNICATION_SINK   = 0x00000001,
    KSPIN_COMMUNICATION_SOURCE = 0x00000002,
    KSPIN_COMMUNICATION_BOTH   = 0x00000003,
    KSPIN_COMMUNICATION_BRIDGE = 0x00000004,
}

struct KSPIN_CONNECT
{
    KSIDENTIFIER Interface;
    KSIDENTIFIER Medium;
    uint PinId;
    HANDLE PinToHandle;
    KSPRIORITY Priority;
}
struct KSPIN_PHYSICALCONNECTION
{
    uint Size;
    uint Pin;
    wchar[1] SymbolicLinkName;
}
enum CLSID_KSEVENTSETID_PinCapsChange = GUID(0xdd4f192e, 0x3b78, 0x49ad, [0xa5, 0x34, 0x2c, 0x31, 0x5b, 0x82, 0x20, 0x0]);
struct KSEVENTSETID_PinCapsChange
{
}
alias KSEVENT_PINCAPS_CHANGENOTIFICATIONS = int;
enum : int
{
    KSEVENT_PINCAPS_FORMATCHANGE   = 0x00000000,
    KSEVENT_PINCAPS_JACKINFOCHANGE = 0x00000001,
}

enum CLSID_KSEVENTSETID_VolumeLimit = GUID(0xda168465, 0x3a7c, 0x4858, [0x9d, 0x4a, 0x3e, 0x8e, 0x24, 0x70, 0x1a, 0xef]);
struct KSEVENTSETID_VolumeLimit
{
}
alias KSEVENT_VOLUMELIMIT = int;
enum : int
{
    KSEVENT_VOLUMELIMIT_CHANGED = 0x00000000,
}

enum CLSID_KSNAME_Filter = GUID(0x9b365890, 0x165f, 0x11d0, [0xa1, 0x95, 0x0, 0x20, 0xaf, 0xd1, 0x56, 0xe4]);
struct KSNAME_Filter
{
}
enum CLSID_KSNAME_Pin = GUID(0x146f1a80, 0x4791, 0x11d0, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSNAME_Pin
{
}
enum CLSID_KSNAME_Clock = GUID(0x53172480, 0x4791, 0x11d0, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSNAME_Clock
{
}
enum CLSID_KSNAME_Allocator = GUID(0x642f5d00, 0x4791, 0x11d0, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSNAME_Allocator
{
}
enum CLSID_KSNAME_TopologyNode = GUID(0x621061a, 0xee75, 0x11d0, [0xb9, 0x15, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNAME_TopologyNode
{
}
enum CLSID_KSDATAFORMAT_TYPE_STREAM = GUID(0xe436eb83, 0x524f, 0x11ce, [0x9f, 0x53, 0x0, 0x20, 0xaf, 0xb, 0xa7, 0x70]);
struct KSDATAFORMAT_TYPE_STREAM
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_NONE = GUID(0xe436eb8e, 0x524f, 0x11ce, [0x9f, 0x53, 0x0, 0x20, 0xaf, 0xb, 0xa7, 0x70]);
struct KSDATAFORMAT_SUBTYPE_NONE
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_FILENAME = GUID(0xaa797b40, 0xe974, 0x11cf, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSDATAFORMAT_SPECIFIER_FILENAME
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_FILEHANDLE = GUID(0x65e8773c, 0x8f56, 0x11d0, [0xa3, 0xb9, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSDATAFORMAT_SPECIFIER_FILEHANDLE
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_NONE = GUID(0xf6417d6, 0xc318, 0x11d0, [0xa4, 0x3f, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSDATAFORMAT_SPECIFIER_NONE
{
}
enum CLSID_KSPROPSETID_Quality = GUID(0xd16ad380, 0xac1a, 0x11cf, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSPROPSETID_Quality
{
}
alias KSPROPERTY_QUALITY = int;
enum : int
{
    KSPROPERTY_QUALITY_REPORT = 0x00000000,
    KSPROPERTY_QUALITY_ERROR  = 0x00000001,
}

enum CLSID_KSPROPSETID_Connection = GUID(0x1d58c920, 0xac9b, 0x11cf, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSPROPSETID_Connection
{
}
alias KSPROPERTY_CONNECTION = int;
enum : int
{
    KSPROPERTY_CONNECTION_STATE               = 0x00000000,
    KSPROPERTY_CONNECTION_PRIORITY            = 0x00000001,
    KSPROPERTY_CONNECTION_DATAFORMAT          = 0x00000002,
    KSPROPERTY_CONNECTION_ALLOCATORFRAMING    = 0x00000003,
    KSPROPERTY_CONNECTION_PROPOSEDATAFORMAT   = 0x00000004,
    KSPROPERTY_CONNECTION_ACQUIREORDERING     = 0x00000005,
    KSPROPERTY_CONNECTION_ALLOCATORFRAMING_EX = 0x00000006,
    KSPROPERTY_CONNECTION_STARTAT             = 0x00000007,
}

enum CLSID_KSPROPSETID_MemoryTransport = GUID(0xa3d1c5d, 0x5243, 0x4819, [0x9e, 0xd0, 0xae, 0xe8, 0x4, 0x4c, 0xee, 0x2b]);
struct KSPROPSETID_MemoryTransport
{
}
struct KSALLOCATOR_FRAMING
{
    union
    {
        uint OptionsFlags;
        uint RequirementsFlags;
    }
    uint PoolType;
    uint Frames;
    uint FrameSize;
    union
    {
        uint FileAlignment;
        int FramePitch;
    }
    uint Reserved;
}
struct KS_FRAMING_RANGE
{
    uint MinFrameSize;
    uint MaxFrameSize;
    uint Stepping;
}
struct KS_FRAMING_RANGE_WEIGHTED
{
    KS_FRAMING_RANGE Range;
    uint InPlaceWeight;
    uint NotInPlaceWeight;
}
struct KS_COMPRESSION
{
    uint RatioNumerator;
    uint RatioDenominator;
    uint RatioConstantMargin;
}
struct KS_FRAMING_ITEM
{
    GUID MemoryType;
    GUID BusType;
    uint MemoryFlags;
    uint BusFlags;
    uint Flags;
    uint Frames;
    union
    {
        uint FileAlignment;
        int FramePitch;
    }
    uint MemoryTypeWeight;
    KS_FRAMING_RANGE PhysicalRange;
    KS_FRAMING_RANGE_WEIGHTED FramingRange;
}
struct KSALLOCATOR_FRAMING_EX
{
    uint CountItems;
    uint PinFlags;
    KS_COMPRESSION OutputCompression;
    uint PinWeight;
    KS_FRAMING_ITEM[1] FramingItem;
}
enum CLSID_KSMEMORY_TYPE_SYSTEM = GUID(0x91bb638, 0x603f, 0x11d1, [0xb0, 0x67, 0x0, 0xa0, 0xc9, 0x6, 0x28, 0x2]);
struct KSMEMORY_TYPE_SYSTEM
{
}
enum CLSID_KSMEMORY_TYPE_USER = GUID(0x8cb0fc28, 0x7893, 0x11d1, [0xb0, 0x69, 0x0, 0xa0, 0xc9, 0x6, 0x28, 0x2]);
struct KSMEMORY_TYPE_USER
{
}
enum CLSID_KSMEMORY_TYPE_KERNEL_PAGED = GUID(0xd833f8f8, 0x7894, 0x11d1, [0xb0, 0x69, 0x0, 0xa0, 0xc9, 0x6, 0x28, 0x2]);
struct KSMEMORY_TYPE_KERNEL_PAGED
{
}
enum CLSID_KSMEMORY_TYPE_KERNEL_NONPAGED = GUID(0x4a6d5fc4, 0x7895, 0x11d1, [0xb0, 0x69, 0x0, 0xa0, 0xc9, 0x6, 0x28, 0x2]);
struct KSMEMORY_TYPE_KERNEL_NONPAGED
{
}
enum CLSID_KSMEMORY_TYPE_DEVICE_UNKNOWN = GUID(0x91bb639, 0x603f, 0x11d1, [0xb0, 0x67, 0x0, 0xa0, 0xc9, 0x6, 0x28, 0x2]);
struct KSMEMORY_TYPE_DEVICE_UNKNOWN
{
}
enum CLSID_KSEVENTSETID_StreamAllocator = GUID(0x75d95571, 0x73c, 0x11d0, [0xa1, 0x61, 0x0, 0x20, 0xaf, 0xd1, 0x56, 0xe4]);
struct KSEVENTSETID_StreamAllocator
{
}
alias KSEVENT_STREAMALLOCATOR = int;
enum : int
{
    KSEVENT_STREAMALLOCATOR_INTERNAL_FREEFRAME = 0x00000000,
    KSEVENT_STREAMALLOCATOR_FREEFRAME          = 0x00000001,
}

enum CLSID_KSMETHODSETID_StreamAllocator = GUID(0xcf6e4341, 0xec87, 0x11cf, [0xa1, 0x30, 0x0, 0x20, 0xaf, 0xd1, 0x56, 0xe4]);
struct KSMETHODSETID_StreamAllocator
{
}
alias KSMETHOD_STREAMALLOCATOR = int;
enum : int
{
    KSMETHOD_STREAMALLOCATOR_ALLOC = 0x00000000,
    KSMETHOD_STREAMALLOCATOR_FREE  = 0x00000001,
}

enum CLSID_KSPROPSETID_StreamAllocator = GUID(0xcf6e4342, 0xec87, 0x11cf, [0xa1, 0x30, 0x0, 0x20, 0xaf, 0xd1, 0x56, 0xe4]);
struct KSPROPSETID_StreamAllocator
{
}
struct KSSTREAMALLOCATOR_STATUS
{
    KSALLOCATOR_FRAMING Framing;
    uint AllocatedFrames;
    uint Reserved;
}
struct KSSTREAMALLOCATOR_STATUS_EX
{
    KSALLOCATOR_FRAMING_EX Framing;
    uint AllocatedFrames;
    uint Reserved;
}
struct KSTIME
{
    long Time;
    uint Numerator;
    uint Denominator;
}
/+ [CONFLICTED] struct KSSTREAM_HEADER
{
    uint Size;
    uint TypeSpecificFlags;
    KSTIME PresentationTime;
    long Duration;
    uint FrameExtent;
    uint DataUsed;
    void* Data;
    uint OptionsFlags;
}
+/
struct KSSTREAM_METADATA_INFO
{
    uint BufferSize;
    uint UsedSize;
    void* Data;
    void* SystemVa;
    uint Flags;
    uint Reserved;
}
struct KSSTREAM_UVC_METADATATYPE_TIMESTAMP
{
    uint PresentationTimeStamp;
    uint SourceClockReference;
    union
    {
        struct
        {
            ushort _bitfield0;
        }
        ushort SCRToken;
    }
    ushort Reserved0;
    uint Reserved1;
}
struct KSSTREAM_UVC_METADATA
{
    KSSTREAM_UVC_METADATATYPE_TIMESTAMP StartOfFrameTimestamp;
    KSSTREAM_UVC_METADATATYPE_TIMESTAMP EndOfFrameTimestamp;
}
alias KSPIN_MDL_CACHING_EVENT = int;
enum : int
{
    KSPIN_MDL_CACHING_NOTIFY_CLEANUP         = 0x00000000,
    KSPIN_MDL_CACHING_NOTIFY_CLEANALL_WAIT   = 0x00000001,
    KSPIN_MDL_CACHING_NOTIFY_CLEANALL_NOWAIT = 0x00000002,
    KSPIN_MDL_CACHING_NOTIFY_ADDSAMPLE       = 0x00000003,
}

struct KSPIN_MDL_CACHING_NOTIFICATION
{
    KSPIN_MDL_CACHING_EVENT Event;
    void* Buffer;
}
struct KSPIN_MDL_CACHING_NOTIFICATION32
{
    KSPIN_MDL_CACHING_EVENT Event;
    uint Buffer;
}
enum CLSID_KSPROPSETID_StreamInterface = GUID(0x1fdd8ee1, 0x9cd3, 0x11d0, [0x82, 0xaa, 0x0, 0x0, 0xf8, 0x22, 0xfe, 0x8a]);
struct KSPROPSETID_StreamInterface
{
}
alias KSPROPERTY_STREAMINTERFACE = int;
enum : int
{
    KSPROPERTY_STREAMINTERFACE_HEADERSIZE = 0x00000000,
}

enum CLSID_KSPROPSETID_Stream = GUID(0x65aaba60, 0x98ae, 0x11cf, [0xa1, 0xd, 0x0, 0x20, 0xaf, 0xd1, 0x56, 0xe4]);
struct KSPROPSETID_Stream
{
}
alias KSPROPERTY_STREAM = int;
enum : int
{
    KSPROPERTY_STREAM_ALLOCATOR          = 0x00000000,
    KSPROPERTY_STREAM_QUALITY            = 0x00000001,
    KSPROPERTY_STREAM_DEGRADATION        = 0x00000002,
    KSPROPERTY_STREAM_MASTERCLOCK        = 0x00000003,
    KSPROPERTY_STREAM_TIMEFORMAT         = 0x00000004,
    KSPROPERTY_STREAM_PRESENTATIONTIME   = 0x00000005,
    KSPROPERTY_STREAM_PRESENTATIONEXTENT = 0x00000006,
    KSPROPERTY_STREAM_FRAMETIME          = 0x00000007,
    KSPROPERTY_STREAM_RATECAPABILITY     = 0x00000008,
    KSPROPERTY_STREAM_RATE               = 0x00000009,
    KSPROPERTY_STREAM_PIPE_ID            = 0x0000000a,
}

alias KSPPROPERTY_ALLOCATOR_MDLCACHING = int;
enum : int
{
    KSPROPERTY_ALLOCATOR_CLEANUP_CACHEDMDLPAGES = 0x00000001,
}

enum CLSID_KSPROPSETID_PinMDLCacheClearProp = GUID(0xbd718a7b, 0x97fc, 0x40c7, [0x88, 0xce, 0xd3, 0xff, 0x6, 0xf5, 0x5b, 0x16]);
struct KSPROPSETID_PinMDLCacheClearProp
{
}
struct KSQUALITY_MANAGER
{
    HANDLE QualityManager;
    void* Context;
}
struct KSFRAMETIME
{
    long Duration;
    uint FrameFlags;
    uint Reserved;
}
struct KSRATE
{
    long PresentationStart;
    long Duration;
    KSIDENTIFIER Interface;
    int Rate;
    uint Flags;
}
struct KSRATE_CAPABILITY
{
    KSIDENTIFIER Property;
    KSRATE Rate;
}
enum CLSID_KSPROPSETID_Clock = GUID(0xdf12a4c0, 0xac17, 0x11cf, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSPROPSETID_Clock
{
}
struct KSCLOCK_CREATE
{
    uint CreateFlags;
}
struct KSCORRELATED_TIME
{
    long Time;
    long SystemTime;
}
struct KSRESOLUTION
{
    long Granularity;
    long Error;
}
alias KSPROPERTY_CLOCK = int;
enum : int
{
    KSPROPERTY_CLOCK_TIME                   = 0x00000000,
    KSPROPERTY_CLOCK_PHYSICALTIME           = 0x00000001,
    KSPROPERTY_CLOCK_CORRELATEDTIME         = 0x00000002,
    KSPROPERTY_CLOCK_CORRELATEDPHYSICALTIME = 0x00000003,
    KSPROPERTY_CLOCK_RESOLUTION             = 0x00000004,
    KSPROPERTY_CLOCK_STATE                  = 0x00000005,
}

enum CLSID_KSEVENTSETID_Clock = GUID(0x364d8e20, 0x62c7, 0x11cf, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSEVENTSETID_Clock
{
}
alias KSEVENT_CLOCK_POSITION = int;
enum : int
{
    KSEVENT_CLOCK_INTERVAL_MARK = 0x00000000,
    KSEVENT_CLOCK_POSITION_MARK = 0x00000001,
}

enum CLSID_KSEVENTSETID_Connection = GUID(0x7f4bcbe0, 0x9ea5, 0x11cf, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSEVENTSETID_Connection
{
}
alias KSEVENT_CONNECTION = int;
enum : int
{
    KSEVENT_CONNECTION_POSITIONUPDATE    = 0x00000000,
    KSEVENT_CONNECTION_DATADISCONTINUITY = 0x00000001,
    KSEVENT_CONNECTION_TIMEDISCONTINUITY = 0x00000002,
    KSEVENT_CONNECTION_PRIORITY          = 0x00000003,
    KSEVENT_CONNECTION_ENDOFSTREAM       = 0x00000004,
}

struct KSQUALITY
{
    void* Context;
    uint Proportion;
    long DeltaTime;
}
struct KSERROR
{
    void* Context;
    uint Status;
}
alias KSDEVICE_THERMAL_STATE = int;
enum : int
{
    KSDEVICE_THERMAL_STATE_LOW  = 0x00000000,
    KSDEVICE_THERMAL_STATE_HIGH = 0x00000001,
}

enum CLSID_KSEVENTSETID_Device = GUID(0x288296ec, 0x9f94, 0x41b4, [0xa1, 0x53, 0xaa, 0x31, 0xae, 0xec, 0xb3, 0x3f]);
struct KSEVENTSETID_Device
{
}
alias KSEVENT_DEVICE = int;
enum : int
{
    KSEVENT_DEVICE_LOST         = 0x00000000,
    KSEVENT_DEVICE_PREEMPTED    = 0x00000001,
    KSEVENT_DEVICE_THERMAL_HIGH = 0x00000002,
    KSEVENT_DEVICE_THERMAL_LOW  = 0x00000003,
}

enum CLSID_KSDEGRADESETID_Standard = GUID(0x9f564180, 0x704c, 0x11d0, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSDEGRADESETID_Standard
{
}
alias KSDEGRADE_STANDARD = int;
enum : int
{
    KSDEGRADE_STANDARD_SAMPLE      = 0x00000000,
    KSDEGRADE_STANDARD_QUALITY     = 0x00000001,
    KSDEGRADE_STANDARD_COMPUTATION = 0x00000002,
    KSDEGRADE_STANDARD_SKIP        = 0x00000003,
}

struct KSPROPERTY_SERIALHDR
{
    align (1):
    GUID PropertySet;
    uint Count;
}
struct KSPROPERTY_SERIAL
{
    KSIDENTIFIER PropTypeSet;
    uint Id;
    uint PropertyLength;
}
union MF_MDL_SHARED_PAYLOAD_KEY
{
    struct _combined_e__Struct
    {
        uint pHandle;
        uint fHandle;
        ulong uPayload;
    }
    GUID GMDLHandle;
}
struct KSMULTIPLE_DATA_PROP
{
    KSIDENTIFIER Property;
    KSMULTIPLE_ITEM MultipleItem;
}
enum CLSID_KSMEDIUMSETID_MidiBus = GUID(0x5908040, 0x3246, 0x11d0, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSMEDIUMSETID_MidiBus
{
}
enum CLSID_KSMEDIUMSETID_VPBus = GUID(0xa18c15ec, 0xce43, 0x11d0, [0xab, 0xe7, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSMEDIUMSETID_VPBus
{
}
enum CLSID_KSINTERFACESETID_Media = GUID(0x3a13eb40, 0x30a7, 0x11d0, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSINTERFACESETID_Media
{
}
alias KSINTERFACE_MEDIA = int;
enum : int
{
    KSINTERFACE_MEDIA_MUSIC         = 0x00000000,
    KSINTERFACE_MEDIA_WAVE_BUFFERED = 0x00000001,
    KSINTERFACE_MEDIA_WAVE_QUEUED   = 0x00000002,
}

enum CLSID_KSCOMPONENTID_USBAUDIO = GUID(0x8f1275f0, 0x26e9, 0x4264, [0xba, 0x4d, 0x39, 0xff, 0xf0, 0x1d, 0x94, 0xaa]);
struct KSCOMPONENTID_USBAUDIO
{
}
enum CLSID_KSNODETYPE_INPUT_UNDEFINED = GUID(0xdff21be0, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_INPUT_UNDEFINED
{
}
enum CLSID_KSNODETYPE_MICROPHONE = GUID(0xdff21be1, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_MICROPHONE
{
}
enum CLSID_KSNODETYPE_DESKTOP_MICROPHONE = GUID(0xdff21be2, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_DESKTOP_MICROPHONE
{
}
enum CLSID_KSNODETYPE_PERSONAL_MICROPHONE = GUID(0xdff21be3, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_PERSONAL_MICROPHONE
{
}
enum CLSID_KSNODETYPE_OMNI_DIRECTIONAL_MICROPHONE = GUID(0xdff21be4, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_OMNI_DIRECTIONAL_MICROPHONE
{
}
enum CLSID_KSNODETYPE_MICROPHONE_ARRAY = GUID(0xdff21be5, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_MICROPHONE_ARRAY
{
}
enum CLSID_KSNODETYPE_PROCESSING_MICROPHONE_ARRAY = GUID(0xdff21be6, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_PROCESSING_MICROPHONE_ARRAY
{
}
enum CLSID_KSCATEGORY_MICROPHONE_ARRAY_PROCESSOR = GUID(0x830a44f2, 0xa32d, 0x476b, [0xbe, 0x97, 0x42, 0x84, 0x56, 0x73, 0xb3, 0x5a]);
struct KSCATEGORY_MICROPHONE_ARRAY_PROCESSOR
{
}
enum CLSID_KSNODETYPE_OUTPUT_UNDEFINED = GUID(0xdff21ce0, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_OUTPUT_UNDEFINED
{
}
enum CLSID_KSNODETYPE_SPEAKER = GUID(0xdff21ce1, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_SPEAKER
{
}
enum CLSID_KSNODETYPE_HEADPHONES = GUID(0xdff21ce2, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_HEADPHONES
{
}
enum CLSID_KSNODETYPE_HEAD_MOUNTED_DISPLAY_AUDIO = GUID(0xdff21ce3, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_HEAD_MOUNTED_DISPLAY_AUDIO
{
}
enum CLSID_KSNODETYPE_DESKTOP_SPEAKER = GUID(0xdff21ce4, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_DESKTOP_SPEAKER
{
}
enum CLSID_KSNODETYPE_ROOM_SPEAKER = GUID(0xdff21ce5, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_ROOM_SPEAKER
{
}
enum CLSID_KSNODETYPE_COMMUNICATION_SPEAKER = GUID(0xdff21ce6, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_COMMUNICATION_SPEAKER
{
}
enum CLSID_KSNODETYPE_LOW_FREQUENCY_EFFECTS_SPEAKER = GUID(0xdff21ce7, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_LOW_FREQUENCY_EFFECTS_SPEAKER
{
}
enum CLSID_KSNODETYPE_BIDIRECTIONAL_UNDEFINED = GUID(0xdff21de0, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_BIDIRECTIONAL_UNDEFINED
{
}
enum CLSID_KSNODETYPE_HANDSET = GUID(0xdff21de1, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_HANDSET
{
}
enum CLSID_KSNODETYPE_HEADSET = GUID(0xdff21de2, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_HEADSET
{
}
enum CLSID_KSNODETYPE_SPEAKERPHONE_NO_ECHO_REDUCTION = GUID(0xdff21de3, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_SPEAKERPHONE_NO_ECHO_REDUCTION
{
}
enum CLSID_KSNODETYPE_ECHO_SUPPRESSING_SPEAKERPHONE = GUID(0xdff21de4, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_ECHO_SUPPRESSING_SPEAKERPHONE
{
}
enum CLSID_KSNODETYPE_ECHO_CANCELING_SPEAKERPHONE = GUID(0xdff21de5, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_ECHO_CANCELING_SPEAKERPHONE
{
}
enum CLSID_KSNODETYPE_TELEPHONY_UNDEFINED = GUID(0xdff21ee0, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_TELEPHONY_UNDEFINED
{
}
enum CLSID_KSNODETYPE_PHONE_LINE = GUID(0xdff21ee1, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_PHONE_LINE
{
}
enum CLSID_KSNODETYPE_TELEPHONE = GUID(0xdff21ee2, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_TELEPHONE
{
}
enum CLSID_KSNODETYPE_DOWN_LINE_PHONE = GUID(0xdff21ee3, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_DOWN_LINE_PHONE
{
}
enum CLSID_KSNODETYPE_EXTERNAL_UNDEFINED = GUID(0xdff21fe0, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_EXTERNAL_UNDEFINED
{
}
enum CLSID_KSNODETYPE_ANALOG_CONNECTOR = GUID(0xdff21fe1, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_ANALOG_CONNECTOR
{
}
enum CLSID_KSNODETYPE_DIGITAL_AUDIO_INTERFACE = GUID(0xdff21fe2, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_DIGITAL_AUDIO_INTERFACE
{
}
enum CLSID_KSNODETYPE_LINE_CONNECTOR = GUID(0xdff21fe3, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_LINE_CONNECTOR
{
}
enum CLSID_KSNODETYPE_LEGACY_AUDIO_CONNECTOR = GUID(0xdff21fe4, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_LEGACY_AUDIO_CONNECTOR
{
}
enum CLSID_KSNODETYPE_SPDIF_INTERFACE = GUID(0xdff21fe5, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_SPDIF_INTERFACE
{
}
enum CLSID_KSNODETYPE_1394_DA_STREAM = GUID(0xdff21fe6, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_1394_DA_STREAM
{
}
enum CLSID_KSNODETYPE_1394_DV_STREAM_SOUNDTRACK = GUID(0xdff21fe7, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_1394_DV_STREAM_SOUNDTRACK
{
}
enum CLSID_KSNODETYPE_EMBEDDED_UNDEFINED = GUID(0xdff220e0, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_EMBEDDED_UNDEFINED
{
}
enum CLSID_KSNODETYPE_LEVEL_CALIBRATION_NOISE_SOURCE = GUID(0xdff220e1, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_LEVEL_CALIBRATION_NOISE_SOURCE
{
}
enum CLSID_KSNODETYPE_EQUALIZATION_NOISE = GUID(0xdff220e2, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_EQUALIZATION_NOISE
{
}
enum CLSID_KSNODETYPE_CD_PLAYER = GUID(0xdff220e3, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_CD_PLAYER
{
}
enum CLSID_KSNODETYPE_DAT_IO_DIGITAL_AUDIO_TAPE = GUID(0xdff220e4, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_DAT_IO_DIGITAL_AUDIO_TAPE
{
}
enum CLSID_KSNODETYPE_DCC_IO_DIGITAL_COMPACT_CASSETTE = GUID(0xdff220e5, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_DCC_IO_DIGITAL_COMPACT_CASSETTE
{
}
enum CLSID_KSNODETYPE_MINIDISK = GUID(0xdff220e6, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_MINIDISK
{
}
enum CLSID_KSNODETYPE_ANALOG_TAPE = GUID(0xdff220e7, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_ANALOG_TAPE
{
}
enum CLSID_KSNODETYPE_PHONOGRAPH = GUID(0xdff220e8, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_PHONOGRAPH
{
}
enum CLSID_KSNODETYPE_VCR_AUDIO = GUID(0xdff220e9, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_VCR_AUDIO
{
}
enum CLSID_KSNODETYPE_VIDEO_DISC_AUDIO = GUID(0xdff220ea, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_VIDEO_DISC_AUDIO
{
}
enum CLSID_KSNODETYPE_DVD_AUDIO = GUID(0xdff220eb, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_DVD_AUDIO
{
}
enum CLSID_KSNODETYPE_TV_TUNER_AUDIO = GUID(0xdff220ec, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_TV_TUNER_AUDIO
{
}
enum CLSID_KSNODETYPE_SATELLITE_RECEIVER_AUDIO = GUID(0xdff220ed, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_SATELLITE_RECEIVER_AUDIO
{
}
enum CLSID_KSNODETYPE_CABLE_TUNER_AUDIO = GUID(0xdff220ee, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_CABLE_TUNER_AUDIO
{
}
enum CLSID_KSNODETYPE_DSS_AUDIO = GUID(0xdff220ef, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_DSS_AUDIO
{
}
enum CLSID_KSNODETYPE_RADIO_RECEIVER = GUID(0xdff220f0, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_RADIO_RECEIVER
{
}
enum CLSID_KSNODETYPE_RADIO_TRANSMITTER = GUID(0xdff220f1, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_RADIO_TRANSMITTER
{
}
enum CLSID_KSNODETYPE_MULTITRACK_RECORDER = GUID(0xdff220f2, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_MULTITRACK_RECORDER
{
}
enum CLSID_KSNODETYPE_SYNTHESIZER = GUID(0xdff220f3, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_SYNTHESIZER
{
}
enum CLSID_KSNODETYPE_HDMI_INTERFACE = GUID(0xd1b9cc2a, 0xf519, 0x417f, [0x91, 0xc9, 0x55, 0xfa, 0x65, 0x48, 0x10, 0x1]);
struct KSNODETYPE_HDMI_INTERFACE
{
}
enum CLSID_KSNODETYPE_DISPLAYPORT_INTERFACE = GUID(0xe47e4031, 0x3ea6, 0x418d, [0x8f, 0x9b, 0xb7, 0x38, 0x43, 0xcc, 0xba, 0x97]);
struct KSNODETYPE_DISPLAYPORT_INTERFACE
{
}
enum CLSID_KSNODETYPE_AUDIO_LOOPBACK = GUID(0x8f42c0b2, 0x91ce, 0x4bcf, [0x9c, 0xcd, 0xe, 0x59, 0x90, 0x37, 0xab, 0x35]);
struct KSNODETYPE_AUDIO_LOOPBACK
{
}
enum CLSID_KSNODETYPE_AUDIO_KEYWORDDETECTOR = GUID(0x3817e0b8, 0xdf58, 0x4375, [0xb6, 0x69, 0xc4, 0x96, 0x34, 0x33, 0x1f, 0x9d]);
struct KSNODETYPE_AUDIO_KEYWORDDETECTOR
{
}
enum CLSID_KSNODETYPE_AUDIO_MODULE = GUID(0x45aab42e, 0xcaeb, 0x4052, [0x8a, 0xa9, 0xb3, 0x8c, 0xb5, 0x10, 0x96, 0x19]);
struct KSNODETYPE_AUDIO_MODULE
{
}
enum CLSID_KSNODETYPE_MIDI_JACK = GUID(0x265e0c3f, 0xfa39, 0x4df3, [0xab, 0x4, 0xbe, 0x1, 0xb9, 0x1e, 0x29, 0x9a]);
struct KSNODETYPE_MIDI_JACK
{
}
enum CLSID_KSNODETYPE_MIDI_ELEMENT = GUID(0x1c6fe66, 0x6e48, 0x4c65, [0xac, 0x9b, 0x52, 0xdb, 0x5d, 0x65, 0x6c, 0x7e]);
struct KSNODETYPE_MIDI_ELEMENT
{
}
enum CLSID_KSNODETYPE_AUDIO_ENGINE = GUID(0x35caf6e4, 0xf3b3, 0x4168, [0xbb, 0x4b, 0x55, 0xe7, 0x7a, 0x46, 0x1c, 0x7e]);
struct KSNODETYPE_AUDIO_ENGINE
{
}
enum CLSID_KSNODETYPE_SPEAKERS_STATIC_JACK = GUID(0x28e04f87, 0x4dbe, 0x4f8d, [0x85, 0x89, 0x2, 0x5d, 0x20, 0x9d, 0xfb, 0x4a]);
struct KSNODETYPE_SPEAKERS_STATIC_JACK
{
}
enum CLSID_PINNAME_SPDIF_OUT = GUID(0x3a264481, 0xe52c, 0x4b82, [0x8e, 0x7a, 0xc8, 0xe2, 0xf9, 0x1d, 0xc3, 0x80]);
struct PINNAME_SPDIF_OUT
{
}
enum CLSID_PINNAME_SPDIF_IN = GUID(0x15dc9025, 0x22ad, 0x41b3, [0x88, 0x75, 0xf4, 0xce, 0xb0, 0x29, 0x9e, 0x20]);
struct PINNAME_SPDIF_IN
{
}
enum CLSID_PINNAME_HDMI_OUT = GUID(0x387bfc03, 0xe7ef, 0x4901, [0x86, 0xe0, 0x35, 0xb7, 0xc3, 0x2b, 0x0, 0xef]);
struct PINNAME_HDMI_OUT
{
}
enum CLSID_PINNAME_DISPLAYPORT_OUT = GUID(0x21fbb329, 0x1a4a, 0x48da, [0xa0, 0x76, 0x23, 0x18, 0xa3, 0xc5, 0x9b, 0x26]);
struct PINNAME_DISPLAYPORT_OUT
{
}
enum CLSID_KSNODETYPE_DRM_DESCRAMBLE = GUID(0xffbb6e3f, 0xccfe, 0x4d84, [0x90, 0xd9, 0x42, 0x14, 0x18, 0xb0, 0x3a, 0x8e]);
struct KSNODETYPE_DRM_DESCRAMBLE
{
}
enum CLSID_KSNODETYPE_TELEPHONY_BIDI = GUID(0x686d7cc0, 0xd903, 0x4258, [0xb4, 0x43, 0x3a, 0x3d, 0x35, 0x80, 0x74, 0x1c]);
struct KSNODETYPE_TELEPHONY_BIDI
{
}
enum CLSID_KSNODETYPE_FM_RX = GUID(0x834a733c, 0xf485, 0x41c0, [0xa6, 0x2b, 0x51, 0x30, 0x25, 0x1, 0x4e, 0x40]);
struct KSNODETYPE_FM_RX
{
}
enum CLSID_KSCATEGORY_AUDIO = GUID(0x6994ad04, 0x93ef, 0x11d0, [0xa3, 0xcc, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSCATEGORY_AUDIO
{
}
enum CLSID_KSCATEGORY_VIDEO = GUID(0x6994ad05, 0x93ef, 0x11d0, [0xa3, 0xcc, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSCATEGORY_VIDEO
{
}
enum CLSID_KSCATEGORY_REALTIME = GUID(0xeb115ffc, 0x10c8, 0x4964, [0x83, 0x1d, 0x6d, 0xcb, 0x2, 0xe6, 0xf2, 0x3f]);
struct KSCATEGORY_REALTIME
{
}
enum CLSID_KSCATEGORY_TEXT = GUID(0x6994ad06, 0x93ef, 0x11d0, [0xa3, 0xcc, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSCATEGORY_TEXT
{
}
enum CLSID_KSCATEGORY_NETWORK = GUID(0x67c9cc3c, 0x69c4, 0x11d2, [0x87, 0x59, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSCATEGORY_NETWORK
{
}
enum CLSID_KSCATEGORY_TOPOLOGY = GUID(0xdda54a40, 0x1e4c, 0x11d1, [0xa0, 0x50, 0x40, 0x57, 0x5, 0xc1, 0x0, 0x0]);
struct KSCATEGORY_TOPOLOGY
{
}
enum CLSID_KSCATEGORY_VIRTUAL = GUID(0x3503eac4, 0x1f26, 0x11d1, [0x8a, 0xb0, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSCATEGORY_VIRTUAL
{
}
enum CLSID_KSCATEGORY_ACOUSTIC_ECHO_CANCEL = GUID(0xbf963d80, 0xc559, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSCATEGORY_ACOUSTIC_ECHO_CANCEL
{
}
enum CLSID_KSCATEGORY_WDMAUD_USE_PIN_NAME = GUID(0x47a4fa20, 0xa251, 0x11d1, [0xa0, 0x50, 0x0, 0x0, 0xf8, 0x0, 0x47, 0x88]);
struct KSCATEGORY_WDMAUD_USE_PIN_NAME
{
}
enum CLSID_KSCATEGORY_ESCALANTE_PLATFORM_DRIVER = GUID(0x74f3aea8, 0x9768, 0x11d1, [0x8e, 0x7, 0x0, 0xa0, 0xc9, 0x5e, 0xc2, 0x2e]);
struct KSCATEGORY_ESCALANTE_PLATFORM_DRIVER
{
}
enum CLSID_KSDATAFORMAT_TYPE_VIDEO = GUID(0x73646976, 0x0, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_TYPE_VIDEO
{
}
enum CLSID_KSDATAFORMAT_TYPE_AUDIO = GUID(0x73647561, 0x0, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_TYPE_AUDIO
{
}
enum CLSID_KSDATAFORMAT_TYPE_TEXT = GUID(0x73747874, 0x0, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_TYPE_TEXT
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_WAVEFORMATEX = GUID(0x0, 0x0, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_WAVEFORMATEX
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_ANALOG = GUID(0x6dba3190, 0x67bd, 0x11cf, [0xa0, 0xf7, 0x0, 0x20, 0xaf, 0xd1, 0x56, 0xe4]);
struct KSDATAFORMAT_SUBTYPE_ANALOG
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_PCM = GUID(0x1, 0x0, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_PCM
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_VC_ID = GUID(0xad98d184, 0xaac3, 0x11d0, [0xa4, 0x1c, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSDATAFORMAT_SPECIFIER_VC_ID
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_WAVEFORMATEX = GUID(0x5589f81, 0xc356, 0x11ce, [0xbf, 0x1, 0x0, 0xaa, 0x0, 0x55, 0x59, 0x5a]);
struct KSDATAFORMAT_SPECIFIER_WAVEFORMATEX
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_DSOUND = GUID(0x518590a2, 0xa184, 0x11d0, [0x85, 0x22, 0x0, 0xc0, 0x4f, 0xd9, 0xba, 0xf3]);
struct KSDATAFORMAT_SPECIFIER_DSOUND
{
}
struct KSAUDIO_POSITION
{
    ulong PlayOffset;
    ulong WriteOffset;
}
struct KSAUDIO_PRESENTATION_POSITION
{
    ulong u64PositionInBlocks;
    ulong u64QPCPosition;
}
alias CONSTRICTOR_OPTION = int;
enum : int
{
    CONSTRICTOR_OPTION_DISABLE = 0x00000000,
    CONSTRICTOR_OPTION_MUTE    = 0x00000001,
}

struct KSAUDIO_PACKETSIZE_PROCESSINGMODE_CONSTRAINT
{
    GUID ProcessingMode;
    uint SamplesPerProcessingPacket;
    uint ProcessingPacketDurationInHns;
}
struct KSAUDIO_PACKETSIZE_CONSTRAINTS
{
    uint MinPacketPeriodInHns;
    uint PacketSizeFileAlignment;
    uint Reserved;
    uint NumProcessingModeConstraints;
    KSAUDIO_PACKETSIZE_PROCESSINGMODE_CONSTRAINT[1] ProcessingModeConstraints;
}
struct KSAUDIO_PACKETSIZE_CONSTRAINTS2
{
    uint MinPacketPeriodInHns;
    uint PacketSizeFileAlignment;
    uint MaxPacketSizeInBytes;
    uint NumProcessingModeConstraints;
    KSAUDIO_PACKETSIZE_PROCESSINGMODE_CONSTRAINT[1] ProcessingModeConstraints;
}
alias KSMICARRAY_MICTYPE = int;
enum : int
{
    KSMICARRAY_MICTYPE_OMNIDIRECTIONAL = 0x00000000,
    KSMICARRAY_MICTYPE_SUBCARDIOID     = 0x00000001,
    KSMICARRAY_MICTYPE_CARDIOID        = 0x00000002,
    KSMICARRAY_MICTYPE_SUPERCARDIOID   = 0x00000003,
    KSMICARRAY_MICTYPE_HYPERCARDIOID   = 0x00000004,
    KSMICARRAY_MICTYPE_8SHAPED         = 0x00000005,
    KSMICARRAY_MICTYPE_VENDORDEFINED   = 0x0000000f,
}

struct KSAUDIO_MICROPHONE_COORDINATES
{
    ushort usType;
    short wXCoord;
    short wYCoord;
    short wZCoord;
    short wVerticalAngle;
    short wHorizontalAngle;
}
alias KSMICARRAY_MICARRAYTYPE = int;
enum : int
{
    KSMICARRAY_MICARRAYTYPE_LINEAR = 0x00000000,
    KSMICARRAY_MICARRAYTYPE_PLANAR = 0x00000001,
    KSMICARRAY_MICARRAYTYPE_3D     = 0x00000002,
}

struct KSAUDIO_MIC_ARRAY_GEOMETRY
{
    ushort usVersion;
    ushort usMicArrayType;
    short wVerticalAngleBegin;
    short wVerticalAngleEnd;
    short wHorizontalAngleBegin;
    short wHorizontalAngleEnd;
    ushort usFrequencyBandLo;
    ushort usFrequencyBandHi;
    ushort usNumberOfMicrophones;
    KSAUDIO_MICROPHONE_COORDINATES[1] KsMicCoord;
}
struct DS3DVECTOR
{
    union
    {
        float x;
        float dvX;
    }
    union
    {
        float y;
        float dvY;
    }
    union
    {
        float z;
        float dvZ;
    }
}
enum CLSID_KSPROPSETID_DirectSound3DListener = GUID(0x437b3414, 0xd060, 0x11d0, [0x85, 0x83, 0x0, 0xc0, 0x4f, 0xd9, 0xba, 0xf3]);
struct KSPROPSETID_DirectSound3DListener
{
}
alias KSPROPERTY_DIRECTSOUND3DLISTENER = int;
enum : int
{
    KSPROPERTY_DIRECTSOUND3DLISTENER_ALL            = 0x00000000,
    KSPROPERTY_DIRECTSOUND3DLISTENER_POSITION       = 0x00000001,
    KSPROPERTY_DIRECTSOUND3DLISTENER_VELOCITY       = 0x00000002,
    KSPROPERTY_DIRECTSOUND3DLISTENER_ORIENTATION    = 0x00000003,
    KSPROPERTY_DIRECTSOUND3DLISTENER_DISTANCEFACTOR = 0x00000004,
    KSPROPERTY_DIRECTSOUND3DLISTENER_ROLLOFFFACTOR  = 0x00000005,
    KSPROPERTY_DIRECTSOUND3DLISTENER_DOPPLERFACTOR  = 0x00000006,
    KSPROPERTY_DIRECTSOUND3DLISTENER_BATCH          = 0x00000007,
    KSPROPERTY_DIRECTSOUND3DLISTENER_ALLOCATION     = 0x00000008,
}

struct KSDS3D_LISTENER_ALL
{
    DS3DVECTOR Position;
    DS3DVECTOR Velocity;
    DS3DVECTOR OrientFront;
    DS3DVECTOR OrientTop;
    float DistanceFactor;
    float RolloffFactor;
    float DopplerFactor;
}
struct KSDS3D_LISTENER_ORIENTATION
{
    DS3DVECTOR Front;
    DS3DVECTOR Top;
}
enum CLSID_KSPROPSETID_DirectSound3DBuffer = GUID(0x437b3411, 0xd060, 0x11d0, [0x85, 0x83, 0x0, 0xc0, 0x4f, 0xd9, 0xba, 0xf3]);
struct KSPROPSETID_DirectSound3DBuffer
{
}
alias KSPROPERTY_DIRECTSOUND3DBUFFER = int;
enum : int
{
    KSPROPERTY_DIRECTSOUND3DBUFFER_ALL               = 0x00000000,
    KSPROPERTY_DIRECTSOUND3DBUFFER_POSITION          = 0x00000001,
    KSPROPERTY_DIRECTSOUND3DBUFFER_VELOCITY          = 0x00000002,
    KSPROPERTY_DIRECTSOUND3DBUFFER_CONEANGLES        = 0x00000003,
    KSPROPERTY_DIRECTSOUND3DBUFFER_CONEORIENTATION   = 0x00000004,
    KSPROPERTY_DIRECTSOUND3DBUFFER_CONEOUTSIDEVOLUME = 0x00000005,
    KSPROPERTY_DIRECTSOUND3DBUFFER_MINDISTANCE       = 0x00000006,
    KSPROPERTY_DIRECTSOUND3DBUFFER_MAXDISTANCE       = 0x00000007,
    KSPROPERTY_DIRECTSOUND3DBUFFER_MODE              = 0x00000008,
}

struct KSDS3D_BUFFER_ALL
{
    DS3DVECTOR Position;
    DS3DVECTOR Velocity;
    uint InsideConeAngle;
    uint OutsideConeAngle;
    DS3DVECTOR ConeOrientation;
    int ConeOutsideVolume;
    float MinDistance;
    float MaxDistance;
    uint Mode;
}
struct KSDS3D_BUFFER_CONE_ANGLES
{
    uint InsideConeAngle;
    uint OutsideConeAngle;
}
struct KSDS3D_HRTF_PARAMS_MSG
{
    uint Size;
    uint Enabled;
    BOOL SwapChannels;
    BOOL ZeroAzimuth;
    BOOL CrossFadeOutput;
    uint FilterSize;
}
alias KSDS3D_HRTF_FILTER_QUALITY = int;
enum : int
{
    FULL_FILTER                 = 0x00000000,
    LIGHT_FILTER                = 0x00000001,
    KSDS3D_FILTER_QUALITY_COUNT = 0x00000002,
}

struct KSDS3D_HRTF_INIT_MSG
{
    uint Size;
    KSDS3D_HRTF_FILTER_QUALITY Quality;
    float SampleRate;
    uint MaxFilterSize;
    uint FilterTransientMuteLength;
    uint FilterOverlapBufferLength;
    uint OutputOverlapBufferLength;
    uint Reserved;
}
alias KSDS3D_HRTF_COEFF_FORMAT = int;
enum : int
{
    FLOAT_COEFF        = 0x00000000,
    SHORT_COEFF        = 0x00000001,
    KSDS3D_COEFF_COUNT = 0x00000002,
}

alias KSDS3D_HRTF_FILTER_METHOD = int;
enum : int
{
    DIRECT_FORM                = 0x00000000,
    CASCADE_FORM               = 0x00000001,
    KSDS3D_FILTER_METHOD_COUNT = 0x00000002,
}

alias KSDS3D_HRTF_FILTER_VERSION = int;
enum : int
{
    DS3D_HRTF_VERSION_1 = 0x00000000,
}

struct KSDS3D_HRTF_FILTER_FORMAT_MSG
{
    KSDS3D_HRTF_FILTER_METHOD FilterMethod;
    KSDS3D_HRTF_COEFF_FORMAT CoeffFormat;
    KSDS3D_HRTF_FILTER_VERSION Version;
    uint Reserved;
}
enum CLSID_KSPROPSETID_Hrtf3d = GUID(0xb66decb0, 0xa083, 0x11d0, [0x85, 0x1e, 0x0, 0xc0, 0x4f, 0xd9, 0xba, 0xf3]);
struct KSPROPSETID_Hrtf3d
{
}
alias KSPROPERTY_HRTF3D = int;
enum : int
{
    KSPROPERTY_HRTF3D_PARAMS        = 0x00000000,
    KSPROPERTY_HRTF3D_INITIALIZE    = 0x00000001,
    KSPROPERTY_HRTF3D_FILTER_FORMAT = 0x00000002,
}

struct KSDS3D_ITD_PARAMS
{
    int Channel;
    float VolSmoothScale;
    float TotalDryAttenuation;
    float TotalWetAttenuation;
    int SmoothFrequency;
    int Delay;
}
struct KSDS3D_ITD_PARAMS_MSG
{
    uint Enabled;
    KSDS3D_ITD_PARAMS LeftParams;
    KSDS3D_ITD_PARAMS RightParams;
    uint Reserved;
}
enum CLSID_KSPROPSETID_Itd3d = GUID(0x6429f090, 0x9fd9, 0x11d0, [0xa7, 0x5b, 0x0, 0xa0, 0xc9, 0x3, 0x65, 0xe3]);
struct KSPROPSETID_Itd3d
{
}
alias KSPROPERTY_ITD3D = int;
enum : int
{
    KSPROPERTY_ITD3D_PARAMS = 0x00000000,
}

struct KSDATARANGE_AUDIO
{
    KSDATAFORMAT DataRange;
    uint MaximumChannels;
    uint MinimumBitsPerSample;
    uint MaximumBitsPerSample;
    uint MinimumSampleFrequency;
    uint MaximumSampleFrequency;
}
enum CLSID_KSDATAFORMAT_SUBTYPE_RIFF = GUID(0x4995daee, 0x9ee6, 0x11d0, [0xa4, 0xe, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSDATAFORMAT_SUBTYPE_RIFF
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_RIFFWAVE = GUID(0xe436eb8b, 0x524f, 0x11ce, [0x9f, 0x53, 0x0, 0x20, 0xaf, 0xb, 0xa7, 0x70]);
struct KSDATAFORMAT_SUBTYPE_RIFFWAVE
{
}
enum CLSID_KSPROPSETID_Bibliographic = GUID(0x7ba150e, 0xe2b1, 0x11d0, [0xac, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSPROPSETID_Bibliographic
{
}
alias KSPROPERTY_BIBLIOGRAPHIC = int;
enum : int
{
    KSPROPERTY_BIBLIOGRAPHIC_LEADER                      = 0x52444c20,
    KSPROPERTY_BIBLIOGRAPHIC_LCCN                        = 0x30313020,
    KSPROPERTY_BIBLIOGRAPHIC_ISBN                        = 0x30323020,
    KSPROPERTY_BIBLIOGRAPHIC_ISSN                        = 0x32323020,
    KSPROPERTY_BIBLIOGRAPHIC_CATALOGINGSOURCE            = 0x30343020,
    KSPROPERTY_BIBLIOGRAPHIC_MAINPERSONALNAME            = 0x30303120,
    KSPROPERTY_BIBLIOGRAPHIC_MAINCORPORATEBODY           = 0x30313120,
    KSPROPERTY_BIBLIOGRAPHIC_MAINMEETINGNAME             = 0x31313120,
    KSPROPERTY_BIBLIOGRAPHIC_MAINUNIFORMTITLE            = 0x30333120,
    KSPROPERTY_BIBLIOGRAPHIC_UNIFORMTITLE                = 0x30343220,
    KSPROPERTY_BIBLIOGRAPHIC_TITLESTATEMENT              = 0x35343220,
    KSPROPERTY_BIBLIOGRAPHIC_VARYINGFORMTITLE            = 0x36343220,
    KSPROPERTY_BIBLIOGRAPHIC_PUBLICATION                 = 0x30363220,
    KSPROPERTY_BIBLIOGRAPHIC_PHYSICALDESCRIPTION         = 0x30303320,
    KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYTITLE             = 0x30343420,
    KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENT             = 0x30393420,
    KSPROPERTY_BIBLIOGRAPHIC_GENERALNOTE                 = 0x30303520,
    KSPROPERTY_BIBLIOGRAPHIC_BIBLIOGRAPHYNOTE            = 0x34303520,
    KSPROPERTY_BIBLIOGRAPHIC_CONTENTSNOTE                = 0x35303520,
    KSPROPERTY_BIBLIOGRAPHIC_CREATIONCREDIT              = 0x38303520,
    KSPROPERTY_BIBLIOGRAPHIC_CITATION                    = 0x30313520,
    KSPROPERTY_BIBLIOGRAPHIC_PARTICIPANT                 = 0x31313520,
    KSPROPERTY_BIBLIOGRAPHIC_SUMMARY                     = 0x30323520,
    KSPROPERTY_BIBLIOGRAPHIC_TARGETAUDIENCE              = 0x31323520,
    KSPROPERTY_BIBLIOGRAPHIC_ADDEDFORMAVAILABLE          = 0x30333520,
    KSPROPERTY_BIBLIOGRAPHIC_SYSTEMDETAILS               = 0x38333520,
    KSPROPERTY_BIBLIOGRAPHIC_AWARDS                      = 0x36383520,
    KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYPERSONALNAME      = 0x30303620,
    KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYTOPICALTERM       = 0x30353620,
    KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYGEOGRAPHIC        = 0x31353620,
    KSPROPERTY_BIBLIOGRAPHIC_INDEXTERMGENRE              = 0x35353620,
    KSPROPERTY_BIBLIOGRAPHIC_INDEXTERMCURRICULUM         = 0x38353620,
    KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYUNIFORMTITLE      = 0x30333720,
    KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYRELATED           = 0x30343720,
    KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENTPERSONALNAME = 0x30303820,
    KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENTUNIFORMTITLE = 0x30333820,
}

enum CLSID_KSPROPSETID_TopologyNode = GUID(0x45ffaaa1, 0x6e1b, 0x11d0, [0xbc, 0xf2, 0x44, 0x45, 0x53, 0x54, 0x0, 0x0]);
struct KSPROPSETID_TopologyNode
{
}
alias KSPROPERTY_TOPOLOGYNODE = int;
enum : int
{
    KSPROPERTY_TOPOLOGYNODE_ENABLE = 0x00000001,
    KSPROPERTY_TOPOLOGYNODE_RESET  = 0x00000002,
}

enum CLSID_KSPROPSETID_RtAudio = GUID(0xa855a48c, 0x2f78, 0x4729, [0x90, 0x51, 0x19, 0x68, 0x74, 0x6b, 0x9e, 0xef]);
struct KSPROPSETID_RtAudio
{
}
alias KSPROPERTY_RTAUDIO = int;
enum : int
{
    KSPROPERTY_RTAUDIO_GETPOSITIONFUNCTION           = 0x00000000,
    KSPROPERTY_RTAUDIO_BUFFER                        = 0x00000001,
    KSPROPERTY_RTAUDIO_HWLATENCY                     = 0x00000002,
    KSPROPERTY_RTAUDIO_POSITIONREGISTER              = 0x00000003,
    KSPROPERTY_RTAUDIO_CLOCKREGISTER                 = 0x00000004,
    KSPROPERTY_RTAUDIO_BUFFER_WITH_NOTIFICATION      = 0x00000005,
    KSPROPERTY_RTAUDIO_REGISTER_NOTIFICATION_EVENT   = 0x00000006,
    KSPROPERTY_RTAUDIO_UNREGISTER_NOTIFICATION_EVENT = 0x00000007,
    KSPROPERTY_RTAUDIO_QUERY_NOTIFICATION_SUPPORT    = 0x00000008,
    KSPROPERTY_RTAUDIO_PACKETCOUNT                   = 0x00000009,
    KSPROPERTY_RTAUDIO_PRESENTATION_POSITION         = 0x0000000a,
    KSPROPERTY_RTAUDIO_GETREADPACKET                 = 0x0000000b,
    KSPROPERTY_RTAUDIO_SETWRITEPACKET                = 0x0000000c,
    KSPROPERTY_RTAUDIO_PACKETVREGISTER               = 0x0000000d,
}

struct KSRTAUDIO_BUFFER_PROPERTY
{
    KSIDENTIFIER Property;
    void* BaseAddress;
    uint RequestedBufferSize;
}
struct KSRTAUDIO_BUFFER_PROPERTY32
{
    KSIDENTIFIER Property;
    uint BaseAddress;
    uint RequestedBufferSize;
}
struct KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION
{
    KSIDENTIFIER Property;
    void* BaseAddress;
    uint RequestedBufferSize;
    uint NotificationCount;
}
struct KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32
{
    KSIDENTIFIER Property;
    uint BaseAddress;
    uint RequestedBufferSize;
    uint NotificationCount;
}
struct KSRTAUDIO_BUFFER
{
    void* BufferAddress;
    uint ActualBufferSize;
    BOOL CallMemoryBarrier;
}
struct KSRTAUDIO_BUFFER32
{
    uint BufferAddress;
    uint ActualBufferSize;
    BOOL CallMemoryBarrier;
}
struct KSRTAUDIO_HWLATENCY
{
    uint FifoSize;
    uint ChipsetDelay;
    uint CodecDelay;
}
struct KSRTAUDIO_HWREGISTER_PROPERTY
{
    KSIDENTIFIER Property;
    void* BaseAddress;
}
struct KSRTAUDIO_HWREGISTER_PROPERTY32
{
    KSIDENTIFIER Property;
    uint BaseAddress;
}
struct KSRTAUDIO_HWREGISTER
{
    void* Register;
    uint Width;
    ulong Numerator;
    ulong Denominator;
    uint Accuracy;
}
struct KSRTAUDIO_HWREGISTER32
{
    uint Register;
    uint Width;
    ulong Numerator;
    ulong Denominator;
    uint Accuracy;
}
struct KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY
{
    KSIDENTIFIER Property;
    HANDLE NotificationEvent;
}
struct KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32
{
    KSIDENTIFIER Property;
    uint NotificationEvent;
}
struct KSRTAUDIO_GETREADPACKET_INFO
{
    uint PacketNumber;
    uint Flags;
    ulong PerformanceCounterValue;
    BOOL MoreData;
}
struct KSRTAUDIO_SETWRITEPACKET_INFO
{
    uint PacketNumber;
    uint Flags;
    uint EosPacketLength;
}
struct KSRTAUDIO_PACKETVREGISTER_PROPERTY
{
    KSIDENTIFIER Property;
    void* BaseAddress;
}
struct KSRTAUDIO_PACKETVREGISTER
{
    ulong* CompletedPacketCount;
    ulong* CompletedPacketQPC;
    ulong* CompletedPacketHash;
}
enum CLSID_KSPROPSETID_BtAudio = GUID(0x7fa06c40, 0xb8f6, 0x4c7e, [0x85, 0x56, 0xe8, 0xc3, 0x3a, 0x12, 0xe5, 0x4d]);
struct KSPROPSETID_BtAudio
{
}
alias KSPROPERTY_BTAUDIO = int;
enum : int
{
    KSPROPERTY_ONESHOT_RECONNECT  = 0x00000000,
    KSPROPERTY_ONESHOT_DISCONNECT = 0x00000001,
}

enum CLSID_KSPROPSETID_DrmAudioStream = GUID(0x2f2c8ddd, 0x4198, 0x4fac, [0xba, 0x29, 0x61, 0xbb, 0x5, 0xb7, 0xde, 0x6]);
struct KSPROPSETID_DrmAudioStream
{
}
alias KSPROPERTY_DRMAUDIOSTREAM = int;
enum : int
{
    KSPROPERTY_DRMAUDIOSTREAM_CONTENTID = 0x00000000,
}

enum CLSID_KSPROPSETID_SoundDetector = GUID(0x113c425e, 0xfd17, 0x4057, [0xb4, 0x22, 0xed, 0x40, 0x74, 0xf1, 0xaf, 0xdf]);
struct KSPROPSETID_SoundDetector
{
}
enum CLSID_KSPROPSETID_SoundDetector2 = GUID(0xfe07e322, 0x450c, 0x4bd5, [0x84, 0xca, 0xa9, 0x48, 0x50, 0xe, 0xa6, 0xaa]);
struct KSPROPSETID_SoundDetector2
{
}
enum CLSID_KSPROPSETID_InterleavedAudio = GUID(0xe9ebe550, 0xd619, 0x4c0a, [0x97, 0x6b, 0x70, 0x62, 0x32, 0x2b, 0x30, 0x6]);
struct KSPROPSETID_InterleavedAudio
{
}
alias KSPROPERTY_INTERLEAVEDAUDIO = int;
enum : int
{
    KSPROPERTY_INTERLEAVEDAUDIO_FORMATINFORMATION = 0x00000001,
}

struct INTERLEAVED_AUDIO_FORMAT_INFORMATION
{
    uint Size;
    uint PrimaryChannelCount;
    uint PrimaryChannelStartPosition;
    uint PrimaryChannelMask;
    uint InterleavedChannelCount;
    uint InterleavedChannelStartPosition;
    uint InterleavedChannelMask;
}
struct KSSOUNDDETECTORPROPERTY
{
    KSIDENTIFIER Property;
    GUID EventId;
}
alias KSPROPERTY_SOUNDDETECTOR = int;
enum : int
{
    KSPROPERTY_SOUNDDETECTOR_SUPPORTEDPATTERNS = 0x00000001,
    KSPROPERTY_SOUNDDETECTOR_PATTERNS          = 0x00000002,
    KSPROPERTY_SOUNDDETECTOR_ARMED             = 0x00000003,
    KSPROPERTY_SOUNDDETECTOR_MATCHRESULT       = 0x00000004,
    KSPROPERTY_SOUNDDETECTOR_RESET             = 0x00000005,
    KSPROPERTY_SOUNDDETECTOR_STREAMINGSUPPORT  = 0x00000006,
}

struct SOUNDDETECTOR_PATTERNHEADER
{
    uint Size;
    GUID PatternType;
}
enum CLSID_KSEVENTSETID_SoundDetector = GUID(0x69785c9b, 0xfc2d, 0x49d6, [0xac, 0x32, 0x47, 0x99, 0xf8, 0x7d, 0xe9, 0xf6]);
struct KSEVENTSETID_SoundDetector
{
}
alias KSEVENT_SOUNDDETECTOR = int;
enum : int
{
    KSEVENT_SOUNDDETECTOR_MATCHDETECTED = 0x00000001,
}

enum CLSID_KSNOTIFICATIONID_SoundDetector = GUID(0x6389d844, 0xbb32, 0x4c4c, [0xa8, 0x2, 0xf4, 0xb4, 0xb7, 0x7a, 0xfe, 0xad]);
struct KSNOTIFICATIONID_SoundDetector
{
}
enum CLSID_KSPROPSETID_Audio = GUID(0x45ffaaa0, 0x6e1b, 0x11d0, [0xbc, 0xf2, 0x44, 0x45, 0x53, 0x54, 0x0, 0x0]);
struct KSPROPSETID_Audio
{
}
alias KSPROPERTY_AUDIO = int;
enum : int
{
    KSPROPERTY_AUDIO_LATENCY                                  = 0x00000001,
    KSPROPERTY_AUDIO_COPY_PROTECTION                          = 0x00000002,
    KSPROPERTY_AUDIO_CHANNEL_CONFIG                           = 0x00000003,
    KSPROPERTY_AUDIO_VOLUMELEVEL                              = 0x00000004,
    KSPROPERTY_AUDIO_POSITION                                 = 0x00000005,
    KSPROPERTY_AUDIO_DYNAMIC_RANGE                            = 0x00000006,
    KSPROPERTY_AUDIO_QUALITY                                  = 0x00000007,
    KSPROPERTY_AUDIO_SAMPLING_RATE                            = 0x00000008,
    KSPROPERTY_AUDIO_DYNAMIC_SAMPLING_RATE                    = 0x00000009,
    KSPROPERTY_AUDIO_MIX_LEVEL_TABLE                          = 0x0000000a,
    KSPROPERTY_AUDIO_MIX_LEVEL_CAPS                           = 0x0000000b,
    KSPROPERTY_AUDIO_MUX_SOURCE                               = 0x0000000c,
    KSPROPERTY_AUDIO_MUTE                                     = 0x0000000d,
    KSPROPERTY_AUDIO_BASS                                     = 0x0000000e,
    KSPROPERTY_AUDIO_MID                                      = 0x0000000f,
    KSPROPERTY_AUDIO_TREBLE                                   = 0x00000010,
    KSPROPERTY_AUDIO_BASS_BOOST                               = 0x00000011,
    KSPROPERTY_AUDIO_EQ_LEVEL                                 = 0x00000012,
    KSPROPERTY_AUDIO_NUM_EQ_BANDS                             = 0x00000013,
    KSPROPERTY_AUDIO_EQ_BANDS                                 = 0x00000014,
    KSPROPERTY_AUDIO_AGC                                      = 0x00000015,
    KSPROPERTY_AUDIO_DELAY                                    = 0x00000016,
    KSPROPERTY_AUDIO_LOUDNESS                                 = 0x00000017,
    KSPROPERTY_AUDIO_WIDE_MODE                                = 0x00000018,
    KSPROPERTY_AUDIO_WIDENESS                                 = 0x00000019,
    KSPROPERTY_AUDIO_REVERB_LEVEL                             = 0x0000001a,
    KSPROPERTY_AUDIO_CHORUS_LEVEL                             = 0x0000001b,
    KSPROPERTY_AUDIO_DEV_SPECIFIC                             = 0x0000001c,
    KSPROPERTY_AUDIO_DEMUX_DEST                               = 0x0000001d,
    KSPROPERTY_AUDIO_STEREO_ENHANCE                           = 0x0000001e,
    KSPROPERTY_AUDIO_MANUFACTURE_GUID                         = 0x0000001f,
    KSPROPERTY_AUDIO_PRODUCT_GUID                             = 0x00000020,
    KSPROPERTY_AUDIO_CPU_RESOURCES                            = 0x00000021,
    KSPROPERTY_AUDIO_STEREO_SPEAKER_GEOMETRY                  = 0x00000022,
    KSPROPERTY_AUDIO_SURROUND_ENCODE                          = 0x00000023,
    KSPROPERTY_AUDIO_3D_INTERFACE                             = 0x00000024,
    KSPROPERTY_AUDIO_PEAKMETER                                = 0x00000025,
    KSPROPERTY_AUDIO_ALGORITHM_INSTANCE                       = 0x00000026,
    KSPROPERTY_AUDIO_FILTER_STATE                             = 0x00000027,
    KSPROPERTY_AUDIO_PREFERRED_STATUS                         = 0x00000028,
    KSPROPERTY_AUDIO_PEQ_MAX_BANDS                            = 0x00000029,
    KSPROPERTY_AUDIO_PEQ_NUM_BANDS                            = 0x0000002a,
    KSPROPERTY_AUDIO_PEQ_BAND_CENTER_FREQ                     = 0x0000002b,
    KSPROPERTY_AUDIO_PEQ_BAND_Q_FACTOR                        = 0x0000002c,
    KSPROPERTY_AUDIO_PEQ_BAND_LEVEL                           = 0x0000002d,
    KSPROPERTY_AUDIO_CHORUS_MODULATION_RATE                   = 0x0000002e,
    KSPROPERTY_AUDIO_CHORUS_MODULATION_DEPTH                  = 0x0000002f,
    KSPROPERTY_AUDIO_REVERB_TIME                              = 0x00000030,
    KSPROPERTY_AUDIO_REVERB_DELAY_FEEDBACK                    = 0x00000031,
    KSPROPERTY_AUDIO_POSITIONEX                               = 0x00000032,
    KSPROPERTY_AUDIO_MIC_ARRAY_GEOMETRY                       = 0x00000033,
    KSPROPERTY_AUDIO_PRESENTATION_POSITION                    = 0x00000034,
    KSPROPERTY_AUDIO_WAVERT_CURRENT_WRITE_POSITION            = 0x00000035,
    KSPROPERTY_AUDIO_LINEAR_BUFFER_POSITION                   = 0x00000036,
    KSPROPERTY_AUDIO_PEAKMETER2                               = 0x00000037,
    KSPROPERTY_AUDIO_WAVERT_CURRENT_WRITE_LASTBUFFER_POSITION = 0x00000038,
    KSPROPERTY_AUDIO_VOLUMELIMIT_ENGAGED                      = 0x00000039,
    KSPROPERTY_AUDIO_MIC_SENSITIVITY                          = 0x0000003a,
    KSPROPERTY_AUDIO_MIC_SNR                                  = 0x0000003b,
    KSPROPERTY_AUDIO_MIC_SENSITIVITY2                         = 0x0000003c,
}

struct KSAUDIO_COPY_PROTECTION
{
    BOOL fCopyrighted;
    BOOL fOriginal;
}
struct KSAUDIO_CHANNEL_CONFIG
{
    int ActiveSpeakerPositions;
}
struct KSAUDIO_DYNAMIC_RANGE
{
    uint QuietCompression;
    uint LoudCompression;
}
struct KSAUDIO_MIXLEVEL
{
    BOOL Mute;
    int Level;
}
struct KSAUDIO_MIX_CAPS
{
    BOOL Mute;
    int Minimum;
    int Maximum;
    union
    {
        int Reset;
        int Resolution;
    }
}
struct KSAUDIO_MIXCAP_TABLE
{
    uint InputChannels;
    uint OutputChannels;
    KSAUDIO_MIX_CAPS[1] Capabilities;
}
struct KSAUDIO_POSITIONEX
{
    long TimerFrequency;
    long TimeStamp1;
    KSAUDIO_POSITION Position;
    long TimeStamp2;
}
enum CLSID_KSPROPSETID_TelephonyControl = GUID(0xb6df7eb1, 0xd099, 0x489f, [0xa6, 0xa0, 0xc0, 0x10, 0x6f, 0x8, 0x87, 0xa7]);
struct KSPROPSETID_TelephonyControl
{
}
alias KSPROPERTY_TELEPHONY_CONTROL = int;
enum : int
{
    KSPROPERTY_TELEPHONY_PROVIDERID     = 0x00000000,
    KSPROPERTY_TELEPHONY_CALLINFO       = 0x00000001,
    KSPROPERTY_TELEPHONY_CALLCONTROL    = 0x00000002,
    KSPROPERTY_TELEPHONY_PROVIDERCHANGE = 0x00000003,
    KSPROPERTY_TELEPHONY_CALLHOLD       = 0x00000004,
    KSPROPERTY_TELEPHONY_MUTE_TX        = 0x00000005,
}

alias TELEPHONY_CALLTYPE = int;
enum : int
{
    TELEPHONY_CALLTYPE_CIRCUITSWITCHED     = 0x00000000,
    TELEPHONY_CALLTYPE_PACKETSWITCHED_LTE  = 0x00000001,
    TELEPHONY_CALLTYPE_PACKETSWITCHED_WLAN = 0x00000002,
}

alias TELEPHONY_CALLCONTROLOP = int;
enum : int
{
    TELEPHONY_CALLCONTROLOP_DISABLE = 0x00000000,
    TELEPHONY_CALLCONTROLOP_ENABLE  = 0x00000001,
}

struct KSTELEPHONY_CALLCONTROL
{
    TELEPHONY_CALLTYPE CallType;
    TELEPHONY_CALLCONTROLOP CallControlOp;
}
alias TELEPHONY_PROVIDERCHANGEOP = int;
enum : int
{
    TELEPHONY_PROVIDERCHANGEOP_END    = 0x00000000,
    TELEPHONY_PROVIDERCHANGEOP_BEGIN  = 0x00000001,
    TELEPHONY_PROVIDERCHANGEOP_CANCEL = 0x00000002,
}

struct KSTELEPHONY_PROVIDERCHANGE
{
    TELEPHONY_CALLTYPE CallType;
    TELEPHONY_PROVIDERCHANGEOP ProviderChangeOp;
}
alias TELEPHONY_CALLSTATE = int;
enum : int
{
    TELEPHONY_CALLSTATE_DISABLED           = 0x00000000,
    TELEPHONY_CALLSTATE_ENABLED            = 0x00000001,
    TELEPHONY_CALLSTATE_HOLD               = 0x00000002,
    TELEPHONY_CALLSTATE_PROVIDERTRANSITION = 0x00000003,
}

struct KSTELEPHONY_CALLINFO
{
    TELEPHONY_CALLTYPE CallType;
    TELEPHONY_CALLSTATE CallState;
}
enum CLSID_KSPROPSETID_TelephonyTopology = GUID(0xabf25c7e, 0xe64, 0x4e32, [0xb1, 0x90, 0xd0, 0xf6, 0xd7, 0xc5, 0x3e, 0x97]);
struct KSPROPSETID_TelephonyTopology
{
}
alias KSPROPERTY_TELEPHONY_TOPOLOGY = int;
enum : int
{
    KSPROPERTY_TELEPHONY_ENDPOINTIDPAIR = 0x00000000,
    KSPROPERTY_TELEPHONY_VOLUME         = 0x00000001,
}

struct KSTOPOLOGY_ENDPOINTID
{
    wchar[260] TopologyName;
    uint PinId;
}
struct KSTOPOLOGY_ENDPOINTIDPAIR
{
    KSTOPOLOGY_ENDPOINTID RenderEndpoint;
    KSTOPOLOGY_ENDPOINTID CaptureEndpoint;
}
enum CLSID_KSPROPSETID_FMRXTopology = GUID(0xc46ce8f, 0xdc2d, 0x4204, [0x9d, 0xc9, 0xf5, 0x89, 0x63, 0x36, 0x65, 0x63]);
struct KSPROPSETID_FMRXTopology
{
}
alias KSPROPERTY_FMRX_TOPOLOGY = int;
enum : int
{
    KSPROPERTY_FMRX_ENDPOINTID        = 0x00000000,
    KSPROPERTY_FMRX_VOLUME            = 0x00000001,
    KSPROPERTY_FMRX_ANTENNAENDPOINTID = 0x00000002,
}

enum CLSID_KSPROPSETID_FMRXControl = GUID(0x947bba3a, 0xe8ee, 0x4786, [0x90, 0xc4, 0x84, 0x28, 0x18, 0x5f, 0x5, 0xbe]);
struct KSPROPSETID_FMRXControl
{
}
alias KSPROPERTY_FMRX_CONTROL = int;
enum : int
{
    KSPROPERTY_FMRX_STATE = 0x00000000,
}

enum CLSID_KSEVENTSETID_Telephony = GUID(0xb77f12b4, 0xceb4, 0x4484, [0x8d, 0x5e, 0x52, 0xc1, 0xe7, 0xd8, 0x76, 0x2d]);
struct KSEVENTSETID_Telephony
{
}
alias KSEVENT_TELEPHONY = int;
enum : int
{
    KSEVENT_TELEPHONY_ENDPOINTPAIRS_CHANGED = 0x00000000,
}

enum CLSID_KSNODETYPE_DAC = GUID(0x507ae360, 0xc554, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_DAC
{
}
enum CLSID_KSNODETYPE_ADC = GUID(0x4d837fe0, 0xc555, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_ADC
{
}
enum CLSID_KSNODETYPE_SRC = GUID(0x9db7b9e0, 0xc555, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_SRC
{
}
enum CLSID_KSNODETYPE_SUPERMIX = GUID(0xe573adc0, 0xc555, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_SUPERMIX
{
}
enum CLSID_KSNODETYPE_MUX = GUID(0x2ceaf780, 0xc556, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_MUX
{
}
enum CLSID_KSNODETYPE_DEMUX = GUID(0xc0eb67d4, 0xe807, 0x11d0, [0x95, 0x8a, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSNODETYPE_DEMUX
{
}
enum CLSID_KSNODETYPE_SUM = GUID(0xda441a60, 0xc556, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_SUM
{
}
enum CLSID_KSNODETYPE_MUTE = GUID(0x2b223c0, 0xc557, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_MUTE
{
}
enum CLSID_KSNODETYPE_VOLUME = GUID(0x3a5acc00, 0xc557, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_VOLUME
{
}
enum CLSID_KSNODETYPE_TONE = GUID(0x7607e580, 0xc557, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_TONE
{
}
enum CLSID_KSNODETYPE_EQUALIZER = GUID(0x9d41b4a0, 0xc557, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_EQUALIZER
{
}
enum CLSID_KSNODETYPE_AGC = GUID(0xe88c9ba0, 0xc557, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_AGC
{
}
enum CLSID_KSNODETYPE_NOISE_SUPPRESS = GUID(0xe07f903f, 0x62fd, 0x4e60, [0x8c, 0xdd, 0xde, 0xa7, 0x23, 0x66, 0x65, 0xb5]);
struct KSNODETYPE_NOISE_SUPPRESS
{
}
enum CLSID_KSNODETYPE_DELAY = GUID(0x144981e0, 0xc558, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_DELAY
{
}
enum CLSID_KSNODETYPE_LOUDNESS = GUID(0x41887440, 0xc558, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_LOUDNESS
{
}
enum CLSID_KSNODETYPE_PROLOGIC_DECODER = GUID(0x831c2c80, 0xc558, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_PROLOGIC_DECODER
{
}
enum CLSID_KSNODETYPE_STEREO_WIDE = GUID(0xa9e69800, 0xc558, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_STEREO_WIDE
{
}
enum CLSID_KSNODETYPE_REVERB = GUID(0xef0328e0, 0xc558, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_REVERB
{
}
enum CLSID_KSNODETYPE_CHORUS = GUID(0x20173f20, 0xc559, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_CHORUS
{
}
enum CLSID_KSNODETYPE_3D_EFFECTS = GUID(0x55515860, 0xc559, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_3D_EFFECTS
{
}
enum CLSID_KSNODETYPE_PARAMETRIC_EQUALIZER = GUID(0x19bb3a6a, 0xce2b, 0x4442, [0x87, 0xec, 0x67, 0x27, 0xc3, 0xca, 0xb4, 0x77]);
struct KSNODETYPE_PARAMETRIC_EQUALIZER
{
}
enum CLSID_KSNODETYPE_UPDOWN_MIX = GUID(0xb7edc5cf, 0x7b63, 0x4ee2, [0xa1, 0x0, 0x29, 0xee, 0x2c, 0xb6, 0xb2, 0xde]);
struct KSNODETYPE_UPDOWN_MIX
{
}
enum CLSID_KSNODETYPE_DYN_RANGE_COMPRESSOR = GUID(0x8c8a6a8, 0x601f, 0x4af8, [0x87, 0x93, 0xd9, 0x5, 0xff, 0x4c, 0xa9, 0x7d]);
struct KSNODETYPE_DYN_RANGE_COMPRESSOR
{
}
enum CLSID_KSALGORITHMINSTANCE_SYSTEM_ACOUSTIC_ECHO_CANCEL = GUID(0x1c22c56d, 0x9879, 0x4f5b, [0xa3, 0x89, 0x27, 0x99, 0x6d, 0xdc, 0x28, 0x10]);
struct KSALGORITHMINSTANCE_SYSTEM_ACOUSTIC_ECHO_CANCEL
{
}
enum CLSID_KSALGORITHMINSTANCE_SYSTEM_NOISE_SUPPRESS = GUID(0x5ab0882e, 0x7274, 0x4516, [0x87, 0x7d, 0x4e, 0xee, 0x99, 0xba, 0x4f, 0xd0]);
struct KSALGORITHMINSTANCE_SYSTEM_NOISE_SUPPRESS
{
}
enum CLSID_KSALGORITHMINSTANCE_SYSTEM_AGC = GUID(0x950e55b9, 0x877c, 0x4c67, [0xbe, 0x8, 0xe4, 0x7b, 0x56, 0x11, 0x13, 0xa]);
struct KSALGORITHMINSTANCE_SYSTEM_AGC
{
}
enum CLSID_KSALGORITHMINSTANCE_SYSTEM_MICROPHONE_ARRAY_PROCESSOR = GUID(0xb6f5a0a0, 0x9e61, 0x4f8c, [0x91, 0xe3, 0x76, 0xcf, 0xf, 0x3c, 0x47, 0x1f]);
struct KSALGORITHMINSTANCE_SYSTEM_MICROPHONE_ARRAY_PROCESSOR
{
}
enum CLSID_KSNODETYPE_DEV_SPECIFIC = GUID(0x941c7ac0, 0xc559, 0x11d0, [0x8a, 0x2b, 0x0, 0xa0, 0xc9, 0x25, 0x5a, 0xc1]);
struct KSNODETYPE_DEV_SPECIFIC
{
}
enum CLSID_KSNODETYPE_PROLOGIC_ENCODER = GUID(0x8074c5b2, 0x3c66, 0x11d2, [0xb4, 0x5a, 0x30, 0x78, 0x30, 0x2c, 0x20, 0x30]);
struct KSNODETYPE_PROLOGIC_ENCODER
{
}
enum CLSID_KSNODETYPE_PEAKMETER = GUID(0xa085651e, 0x5f0d, 0x4b36, [0xa8, 0x69, 0xd1, 0x95, 0xd6, 0xab, 0x4b, 0x9e]);
struct KSNODETYPE_PEAKMETER
{
}
enum CLSID_KSAUDFNAME_BASS = GUID(0x185fede0, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_BASS
{
}
enum CLSID_KSAUDFNAME_TREBLE = GUID(0x185fede1, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_TREBLE
{
}
enum CLSID_KSAUDFNAME_MIDRANGE = GUID(0xa2cbe478, 0xae84, 0x49a1, [0x8b, 0x72, 0x4a, 0xd0, 0x9b, 0x78, 0xed, 0x34]);
struct KSAUDFNAME_MIDRANGE
{
}
enum CLSID_KSAUDFNAME_3D_STEREO = GUID(0x185fede2, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_3D_STEREO
{
}
enum CLSID_KSAUDFNAME_MASTER_VOLUME = GUID(0x185fede3, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_MASTER_VOLUME
{
}
enum CLSID_KSAUDFNAME_MASTER_MUTE = GUID(0x185fede4, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_MASTER_MUTE
{
}
enum CLSID_KSAUDFNAME_WAVE_VOLUME = GUID(0x185fede5, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_WAVE_VOLUME
{
}
enum CLSID_KSAUDFNAME_WAVE_MUTE = GUID(0x185fede6, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_WAVE_MUTE
{
}
enum CLSID_KSAUDFNAME_MIDI_VOLUME = GUID(0x185fede7, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_MIDI_VOLUME
{
}
enum CLSID_KSAUDFNAME_MIDI_MUTE = GUID(0x185fede8, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_MIDI_MUTE
{
}
enum CLSID_KSAUDFNAME_CD_VOLUME = GUID(0x185fede9, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_CD_VOLUME
{
}
enum CLSID_KSAUDFNAME_CD_MUTE = GUID(0x185fedea, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_CD_MUTE
{
}
enum CLSID_KSAUDFNAME_LINE_VOLUME = GUID(0x185fedeb, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_LINE_VOLUME
{
}
enum CLSID_KSAUDFNAME_LINE_MUTE = GUID(0x185fedec, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_LINE_MUTE
{
}
enum CLSID_KSAUDFNAME_MIC_VOLUME = GUID(0x185feded, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_MIC_VOLUME
{
}
enum CLSID_KSAUDFNAME_MIC_MUTE = GUID(0x185fedee, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_MIC_MUTE
{
}
enum CLSID_KSAUDFNAME_RECORDING_SOURCE = GUID(0x185fedef, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_RECORDING_SOURCE
{
}
enum CLSID_KSAUDFNAME_PC_SPEAKER_VOLUME = GUID(0x185fedf0, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_PC_SPEAKER_VOLUME
{
}
enum CLSID_KSAUDFNAME_PC_SPEAKER_MUTE = GUID(0x185fedf1, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_PC_SPEAKER_MUTE
{
}
enum CLSID_KSAUDFNAME_MIDI_IN_VOLUME = GUID(0x185fedf2, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_MIDI_IN_VOLUME
{
}
enum CLSID_KSAUDFNAME_CD_IN_VOLUME = GUID(0x185fedf3, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_CD_IN_VOLUME
{
}
enum CLSID_KSAUDFNAME_LINE_IN_VOLUME = GUID(0x185fedf4, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_LINE_IN_VOLUME
{
}
enum CLSID_KSAUDFNAME_MIC_IN_VOLUME = GUID(0x185fedf5, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_MIC_IN_VOLUME
{
}
enum CLSID_KSAUDFNAME_WAVE_IN_VOLUME = GUID(0x185fedf6, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_WAVE_IN_VOLUME
{
}
enum CLSID_KSAUDFNAME_VOLUME_CONTROL = GUID(0x185fedf7, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_VOLUME_CONTROL
{
}
enum CLSID_KSAUDFNAME_MIDI = GUID(0x185fedf8, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_MIDI
{
}
enum CLSID_KSAUDFNAME_LINE_IN = GUID(0x185fedf9, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_LINE_IN
{
}
enum CLSID_KSAUDFNAME_RECORDING_CONTROL = GUID(0x185fedfa, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_RECORDING_CONTROL
{
}
enum CLSID_KSAUDFNAME_CD_AUDIO = GUID(0x185fedfb, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_CD_AUDIO
{
}
enum CLSID_KSAUDFNAME_AUX_VOLUME = GUID(0x185fedfc, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_AUX_VOLUME
{
}
enum CLSID_KSAUDFNAME_AUX_MUTE = GUID(0x185fedfd, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_AUX_MUTE
{
}
enum CLSID_KSAUDFNAME_AUX = GUID(0x185fedfe, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_AUX
{
}
enum CLSID_KSAUDFNAME_PC_SPEAKER = GUID(0x185fedff, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_PC_SPEAKER
{
}
enum CLSID_KSAUDFNAME_WAVE_OUT_MIX = GUID(0x185fee00, 0x9905, 0x11d1, [0x95, 0xa9, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSAUDFNAME_WAVE_OUT_MIX
{
}
enum CLSID_KSAUDFNAME_MONO_OUT = GUID(0xf9b41dc3, 0x96e2, 0x11d2, [0xac, 0x4c, 0x0, 0xc0, 0x4f, 0x8e, 0xfb, 0x68]);
struct KSAUDFNAME_MONO_OUT
{
}
enum CLSID_KSAUDFNAME_STEREO_MIX = GUID(0xdff077, 0x96e3, 0x11d2, [0xac, 0x4c, 0x0, 0xc0, 0x4f, 0x8e, 0xfb, 0x68]);
struct KSAUDFNAME_STEREO_MIX
{
}
enum CLSID_KSAUDFNAME_MONO_MIX = GUID(0xdff078, 0x96e3, 0x11d2, [0xac, 0x4c, 0x0, 0xc0, 0x4f, 0x8e, 0xfb, 0x68]);
struct KSAUDFNAME_MONO_MIX
{
}
enum CLSID_KSAUDFNAME_MONO_OUT_VOLUME = GUID(0x1ad247eb, 0x96e3, 0x11d2, [0xac, 0x4c, 0x0, 0xc0, 0x4f, 0x8e, 0xfb, 0x68]);
struct KSAUDFNAME_MONO_OUT_VOLUME
{
}
enum CLSID_KSAUDFNAME_MONO_OUT_MUTE = GUID(0x1ad247ec, 0x96e3, 0x11d2, [0xac, 0x4c, 0x0, 0xc0, 0x4f, 0x8e, 0xfb, 0x68]);
struct KSAUDFNAME_MONO_OUT_MUTE
{
}
enum CLSID_KSAUDFNAME_STEREO_MIX_VOLUME = GUID(0x1ad247ed, 0x96e3, 0x11d2, [0xac, 0x4c, 0x0, 0xc0, 0x4f, 0x8e, 0xfb, 0x68]);
struct KSAUDFNAME_STEREO_MIX_VOLUME
{
}
enum CLSID_KSAUDFNAME_STEREO_MIX_MUTE = GUID(0x22b0eafd, 0x96e3, 0x11d2, [0xac, 0x4c, 0x0, 0xc0, 0x4f, 0x8e, 0xfb, 0x68]);
struct KSAUDFNAME_STEREO_MIX_MUTE
{
}
enum CLSID_KSAUDFNAME_MONO_MIX_VOLUME = GUID(0x22b0eafe, 0x96e3, 0x11d2, [0xac, 0x4c, 0x0, 0xc0, 0x4f, 0x8e, 0xfb, 0x68]);
struct KSAUDFNAME_MONO_MIX_VOLUME
{
}
enum CLSID_KSAUDFNAME_MONO_MIX_MUTE = GUID(0x2bc31d69, 0x96e3, 0x11d2, [0xac, 0x4c, 0x0, 0xc0, 0x4f, 0x8e, 0xfb, 0x68]);
struct KSAUDFNAME_MONO_MIX_MUTE
{
}
enum CLSID_KSAUDFNAME_MICROPHONE_BOOST = GUID(0x2bc31d6a, 0x96e3, 0x11d2, [0xac, 0x4c, 0x0, 0xc0, 0x4f, 0x8e, 0xfb, 0x68]);
struct KSAUDFNAME_MICROPHONE_BOOST
{
}
enum CLSID_KSAUDFNAME_ALTERNATE_MICROPHONE = GUID(0x2bc31d6b, 0x96e3, 0x11d2, [0xac, 0x4c, 0x0, 0xc0, 0x4f, 0x8e, 0xfb, 0x68]);
struct KSAUDFNAME_ALTERNATE_MICROPHONE
{
}
enum CLSID_KSAUDFNAME_3D_DEPTH = GUID(0x63ff5747, 0x991f, 0x11d2, [0xac, 0x4d, 0x0, 0xc0, 0x4f, 0x8e, 0xfb, 0x68]);
struct KSAUDFNAME_3D_DEPTH
{
}
enum CLSID_KSAUDFNAME_3D_CENTER = GUID(0x9f0670b4, 0x991f, 0x11d2, [0xac, 0x4d, 0x0, 0xc0, 0x4f, 0x8e, 0xfb, 0x68]);
struct KSAUDFNAME_3D_CENTER
{
}
enum CLSID_KSAUDFNAME_VIDEO_VOLUME = GUID(0x9b46e708, 0x992a, 0x11d2, [0xac, 0x4d, 0x0, 0xc0, 0x4f, 0x8e, 0xfb, 0x68]);
struct KSAUDFNAME_VIDEO_VOLUME
{
}
enum CLSID_KSAUDFNAME_VIDEO_MUTE = GUID(0x9b46e709, 0x992a, 0x11d2, [0xac, 0x4d, 0x0, 0xc0, 0x4f, 0x8e, 0xfb, 0x68]);
struct KSAUDFNAME_VIDEO_MUTE
{
}
enum CLSID_KSAUDFNAME_VIDEO = GUID(0x915daec4, 0xa434, 0x11d2, [0xac, 0x52, 0x0, 0xc0, 0x4f, 0x8e, 0xfb, 0x68]);
struct KSAUDFNAME_VIDEO
{
}
enum CLSID_KSAUDFNAME_PEAKMETER = GUID(0x57e24340, 0xfc5b, 0x4612, [0xa5, 0x62, 0x72, 0xb1, 0x1a, 0x29, 0xdf, 0xae]);
struct KSAUDFNAME_PEAKMETER
{
}
enum CLSID_KSMETHODSETID_Wavetable = GUID(0xdcef31eb, 0xd907, 0x11d0, [0x95, 0x83, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSMETHODSETID_Wavetable
{
}
alias KSMETHOD_WAVETABLE = int;
enum : int
{
    KSMETHOD_WAVETABLE_WAVE_ALLOC = 0x00000000,
    KSMETHOD_WAVETABLE_WAVE_FREE  = 0x00000001,
    KSMETHOD_WAVETABLE_WAVE_FIND  = 0x00000002,
    KSMETHOD_WAVETABLE_WAVE_WRITE = 0x00000003,
}

struct KSWAVETABLE_WAVE_DESC
{
    KSIDENTIFIER Identifier;
    uint Size;
    BOOL Looped;
    uint LoopPoint;
    BOOL InROM;
    KSDATAFORMAT Format;
}
enum CLSID_KSPROPSETID_Wave = GUID(0x924e54b0, 0x630f, 0x11cf, [0xad, 0xa7, 0x8, 0x0, 0x3e, 0x30, 0x49, 0x4a]);
struct KSPROPSETID_Wave
{
}
alias KSPROPERTY_WAVE = int;
enum : int
{
    KSPROPERTY_WAVE_COMPATIBLE_CAPABILITIES = 0x00000000,
    KSPROPERTY_WAVE_INPUT_CAPABILITIES      = 0x00000001,
    KSPROPERTY_WAVE_OUTPUT_CAPABILITIES     = 0x00000002,
    KSPROPERTY_WAVE_BUFFER                  = 0x00000003,
    KSPROPERTY_WAVE_FREQUENCY               = 0x00000004,
    KSPROPERTY_WAVE_VOLUME                  = 0x00000005,
    KSPROPERTY_WAVE_PAN                     = 0x00000006,
}

struct KSWAVE_COMPATCAPS
{
    uint ulDeviceType;
}
struct KSWAVE_INPUT_CAPABILITIES
{
    uint MaximumChannelsPerConnection;
    uint MinimumBitsPerSample;
    uint MaximumBitsPerSample;
    uint MinimumSampleFrequency;
    uint MaximumSampleFrequency;
    uint TotalConnections;
    uint ActiveConnections;
}
struct KSWAVE_OUTPUT_CAPABILITIES
{
    uint MaximumChannelsPerConnection;
    uint MinimumBitsPerSample;
    uint MaximumBitsPerSample;
    uint MinimumSampleFrequency;
    uint MaximumSampleFrequency;
    uint TotalConnections;
    uint StaticConnections;
    uint StreamingConnections;
    uint ActiveConnections;
    uint ActiveStaticConnections;
    uint ActiveStreamingConnections;
    uint Total3DConnections;
    uint Static3DConnections;
    uint Streaming3DConnections;
    uint Active3DConnections;
    uint ActiveStatic3DConnections;
    uint ActiveStreaming3DConnections;
    uint TotalSampleMemory;
    uint FreeSampleMemory;
    uint LargestFreeContiguousSampleMemory;
}
struct KSWAVE_VOLUME
{
    int LeftAttenuation;
    int RightAttenuation;
}
struct KSWAVE_BUFFER
{
    uint Attributes;
    uint BufferSize;
    void* BufferAddress;
}
enum CLSID_KSMUSIC_TECHNOLOGY_PORT = GUID(0x86c92e60, 0x62e8, 0x11cf, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSMUSIC_TECHNOLOGY_PORT
{
}
enum CLSID_KSMUSIC_TECHNOLOGY_SQSYNTH = GUID(0xecf4380, 0x62e9, 0x11cf, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSMUSIC_TECHNOLOGY_SQSYNTH
{
}
enum CLSID_KSMUSIC_TECHNOLOGY_FMSYNTH = GUID(0x252c5c80, 0x62e9, 0x11cf, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSMUSIC_TECHNOLOGY_FMSYNTH
{
}
enum CLSID_KSMUSIC_TECHNOLOGY_WAVETABLE = GUID(0x394ec7c0, 0x62e9, 0x11cf, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSMUSIC_TECHNOLOGY_WAVETABLE
{
}
enum CLSID_KSMUSIC_TECHNOLOGY_SWSYNTH = GUID(0x37407736, 0x3620, 0x11d1, [0x85, 0xd3, 0x0, 0x0, 0xf8, 0x75, 0x43, 0x80]);
struct KSMUSIC_TECHNOLOGY_SWSYNTH
{
}
struct KSDATARANGE_MUSIC
{
    KSDATAFORMAT DataRange;
    GUID Technology;
    uint Channels;
    uint Notes;
    uint ChannelMask;
}
enum CLSID_KSPROPSETID_Cyclic = GUID(0x3ffeaea0, 0x2bee, 0x11cf, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSPROPSETID_Cyclic
{
}
alias KSPROPERTY_CYCLIC = int;
enum : int
{
    KSPROPERTY_CYCLIC_POSITION = 0x00000000,
}

enum CLSID_KSEVENTSETID_AudioControlChange = GUID(0xe85e9698, 0xfa2f, 0x11d1, [0x95, 0xbd, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0xd3]);
struct KSEVENTSETID_AudioControlChange
{
}
alias KSEVENT_AUDIO_CONTROL_CHANGE = int;
enum : int
{
    KSEVENT_CONTROL_CHANGE = 0x00000000,
}

enum CLSID_KSEVENTSETID_LoopedStreaming = GUID(0x4682b940, 0xc6ef, 0x11d0, [0x96, 0xd8, 0x0, 0xaa, 0x0, 0x51, 0xe5, 0x1d]);
struct KSEVENTSETID_LoopedStreaming
{
}
alias KSEVENT_LOOPEDSTREAMING = int;
enum : int
{
    KSEVENT_LOOPEDSTREAMING_POSITION = 0x00000000,
}

struct LOOPEDSTREAMING_POSITION_EVENT_DATA
{
    KSEVENTDATA KsEventData;
    ulong Position;
}
struct KSNODEPROPERTY
{
    KSIDENTIFIER Property;
    uint NodeId;
    uint Reserved;
}
struct KSNODEPROPERTY_AUDIO_CHANNEL
{
    KSNODEPROPERTY NodeProperty;
    int Channel;
    uint Reserved;
}
struct KSNODEPROPERTY_AUDIO_DEV_SPECIFIC
{
    KSNODEPROPERTY NodeProperty;
    uint DevSpecificId;
    uint DeviceInfo;
    uint Length;
}
/+ [CONFLICTED] struct KSNODEPROPERTY_AUDIO_3D_LISTENER
{
    KSNODEPROPERTY NodeProperty;
    void* ListenerId;
    uint Reserved;
}
+/
/+ [CONFLICTED] struct KSNODEPROPERTY_AUDIO_PROPERTY
{
    KSNODEPROPERTY NodeProperty;
    void* AppContext;
    uint Length;
    uint Reserved;
}
+/
enum CLSID_KSDATAFORMAT_TYPE_MUSIC = GUID(0xe725d360, 0x62cc, 0x11cf, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSDATAFORMAT_TYPE_MUSIC
{
}
enum CLSID_KSDATAFORMAT_TYPE_MIDI = GUID(0x7364696d, 0x0, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_TYPE_MIDI
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_MIDI = GUID(0x1d262760, 0xe957, 0x11cf, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSDATAFORMAT_SUBTYPE_MIDI
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_MIDI_BUS = GUID(0x2ca15fa0, 0x6cfe, 0x11cf, [0xa5, 0xd6, 0x28, 0xdb, 0x4, 0xc1, 0x0, 0x0]);
struct KSDATAFORMAT_SUBTYPE_MIDI_BUS
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_RIFFMIDI = GUID(0x4995daf0, 0x9ee6, 0x11d0, [0xa4, 0xe, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSDATAFORMAT_SUBTYPE_RIFFMIDI
{
}
struct KSMUSICFORMAT
{
    uint TimeDeltaMs;
    uint ByteCount;
}
enum CLSID_KSDATAFORMAT_TYPE_STANDARD_ELEMENTARY_STREAM = GUID(0x36523b11, 0x8ee5, 0x11d1, [0x8c, 0xa3, 0x0, 0x60, 0xb0, 0x57, 0x66, 0x4a]);
struct KSDATAFORMAT_TYPE_STANDARD_ELEMENTARY_STREAM
{
}
enum CLSID_KSDATAFORMAT_TYPE_STANDARD_PES_PACKET = GUID(0x36523b12, 0x8ee5, 0x11d1, [0x8c, 0xa3, 0x0, 0x60, 0xb0, 0x57, 0x66, 0x4a]);
struct KSDATAFORMAT_TYPE_STANDARD_PES_PACKET
{
}
enum CLSID_KSDATAFORMAT_TYPE_STANDARD_PACK_HEADER = GUID(0x36523b13, 0x8ee5, 0x11d1, [0x8c, 0xa3, 0x0, 0x60, 0xb0, 0x57, 0x66, 0x4a]);
struct KSDATAFORMAT_TYPE_STANDARD_PACK_HEADER
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_VIDEO = GUID(0x36523b21, 0x8ee5, 0x11d1, [0x8c, 0xa3, 0x0, 0x60, 0xb0, 0x57, 0x66, 0x4a]);
struct KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_VIDEO
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_AUDIO = GUID(0x36523b22, 0x8ee5, 0x11d1, [0x8c, 0xa3, 0x0, 0x60, 0xb0, 0x57, 0x66, 0x4a]);
struct KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_AUDIO
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_VIDEO = GUID(0x36523b23, 0x8ee5, 0x11d1, [0x8c, 0xa3, 0x0, 0x60, 0xb0, 0x57, 0x66, 0x4a]);
struct KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_VIDEO
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_AUDIO = GUID(0x36523b24, 0x8ee5, 0x11d1, [0x8c, 0xa3, 0x0, 0x60, 0xb0, 0x57, 0x66, 0x4a]);
struct KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_AUDIO
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_STANDARD_AC3_AUDIO = GUID(0x36523b25, 0x8ee5, 0x11d1, [0x8c, 0xa3, 0x0, 0x60, 0xb0, 0x57, 0x66, 0x4a]);
struct KSDATAFORMAT_SUBTYPE_STANDARD_AC3_AUDIO
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_VIDEO = GUID(0x36523b31, 0x8ee5, 0x11d1, [0x8c, 0xa3, 0x0, 0x60, 0xb0, 0x57, 0x66, 0x4a]);
struct KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_VIDEO
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_AUDIO = GUID(0x36523b32, 0x8ee5, 0x11d1, [0x8c, 0xa3, 0x0, 0x60, 0xb0, 0x57, 0x66, 0x4a]);
struct KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_AUDIO
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_VIDEO = GUID(0x36523b33, 0x8ee5, 0x11d1, [0x8c, 0xa3, 0x0, 0x60, 0xb0, 0x57, 0x66, 0x4a]);
struct KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_VIDEO
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_AUDIO = GUID(0x36523b34, 0x8ee5, 0x11d1, [0x8c, 0xa3, 0x0, 0x60, 0xb0, 0x57, 0x66, 0x4a]);
struct KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_AUDIO
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_DIALECT_AC3_AUDIO = GUID(0x36523b35, 0x8ee5, 0x11d1, [0x8c, 0xa3, 0x0, 0x60, 0xb0, 0x57, 0x66, 0x4a]);
struct KSDATAFORMAT_SPECIFIER_DIALECT_AC3_AUDIO
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_DSS_VIDEO = GUID(0xa0af4f81, 0xe163, 0x11d0, [0xba, 0xd9, 0x0, 0x60, 0x97, 0x44, 0x11, 0x1a]);
struct KSDATAFORMAT_SUBTYPE_DSS_VIDEO
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_DSS_AUDIO = GUID(0xa0af4f82, 0xe163, 0x11d0, [0xba, 0xd9, 0x0, 0x60, 0x97, 0x44, 0x11, 0x1a]);
struct KSDATAFORMAT_SUBTYPE_DSS_AUDIO
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_MPEG1Packet = GUID(0xe436eb80, 0x524f, 0x11ce, [0x9f, 0x53, 0x0, 0x20, 0xaf, 0xb, 0xa7, 0x70]);
struct KSDATAFORMAT_SUBTYPE_MPEG1Packet
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_MPEG1Payload = GUID(0xe436eb81, 0x524f, 0x11ce, [0x9f, 0x53, 0x0, 0x20, 0xaf, 0xb, 0xa7, 0x70]);
struct KSDATAFORMAT_SUBTYPE_MPEG1Payload
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_MPEG1Video = GUID(0xe436eb86, 0x524f, 0x11ce, [0x9f, 0x53, 0x0, 0x20, 0xaf, 0xb, 0xa7, 0x70]);
struct KSDATAFORMAT_SUBTYPE_MPEG1Video
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_MPEG1_VIDEO = GUID(0x5589f82, 0xc356, 0x11ce, [0xbf, 0x1, 0x0, 0xaa, 0x0, 0x55, 0x59, 0x5a]);
struct KSDATAFORMAT_SPECIFIER_MPEG1_VIDEO
{
}
enum CLSID_KSDATAFORMAT_TYPE_MPEG2_PES = GUID(0xe06d8020, 0xdb46, 0x11cf, [0xb4, 0xd1, 0x0, 0x80, 0x5f, 0x6c, 0xbb, 0xea]);
struct KSDATAFORMAT_TYPE_MPEG2_PES
{
}
enum CLSID_KSDATAFORMAT_TYPE_MPEG2_PROGRAM = GUID(0xe06d8022, 0xdb46, 0x11cf, [0xb4, 0xd1, 0x0, 0x80, 0x5f, 0x6c, 0xbb, 0xea]);
struct KSDATAFORMAT_TYPE_MPEG2_PROGRAM
{
}
enum CLSID_KSDATAFORMAT_TYPE_MPEG2_TRANSPORT = GUID(0xe06d8023, 0xdb46, 0x11cf, [0xb4, 0xd1, 0x0, 0x80, 0x5f, 0x6c, 0xbb, 0xea]);
struct KSDATAFORMAT_TYPE_MPEG2_TRANSPORT
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_MPEG2_VIDEO = GUID(0xe06d8026, 0xdb46, 0x11cf, [0xb4, 0xd1, 0x0, 0x80, 0x5f, 0x6c, 0xbb, 0xea]);
struct KSDATAFORMAT_SUBTYPE_MPEG2_VIDEO
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_MPEG2_VIDEO = GUID(0xe06d80e3, 0xdb46, 0x11cf, [0xb4, 0xd1, 0x0, 0x80, 0x5f, 0x6c, 0xbb, 0xea]);
struct KSDATAFORMAT_SPECIFIER_MPEG2_VIDEO
{
}
enum CLSID_KSPROPSETID_Mpeg2Vid = GUID(0xc8e11b60, 0xcc9, 0x11d0, [0xbd, 0x69, 0x0, 0x35, 0x5, 0xc1, 0x3, 0xa9]);
struct KSPROPSETID_Mpeg2Vid
{
}
alias KSPROPERTY_MPEG2VID = int;
enum : int
{
    KSPROPERTY_MPEG2VID_MODES        = 0x00000000,
    KSPROPERTY_MPEG2VID_CUR_MODE     = 0x00000001,
    KSPROPERTY_MPEG2VID_4_3_RECT     = 0x00000002,
    KSPROPERTY_MPEG2VID_16_9_RECT    = 0x00000003,
    KSPROPERTY_MPEG2VID_16_9_PANSCAN = 0x00000004,
}

struct KSMPEGVID_RECT
{
    uint StartX;
    uint StartY;
    uint EndX;
    uint EndY;
}
enum CLSID_KSDATAFORMAT_SUBTYPE_MPEG2_AUDIO = GUID(0xe06d802b, 0xdb46, 0x11cf, [0xb4, 0xd1, 0x0, 0x80, 0x5f, 0x6c, 0xbb, 0xea]);
struct KSDATAFORMAT_SUBTYPE_MPEG2_AUDIO
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_MPEG2_AUDIO = GUID(0xe06d80e5, 0xdb46, 0x11cf, [0xb4, 0xd1, 0x0, 0x80, 0x5f, 0x6c, 0xbb, 0xea]);
struct KSDATAFORMAT_SPECIFIER_MPEG2_AUDIO
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_LPCM_AUDIO = GUID(0xe06d8032, 0xdb46, 0x11cf, [0xb4, 0xd1, 0x0, 0x80, 0x5f, 0x6c, 0xbb, 0xea]);
struct KSDATAFORMAT_SUBTYPE_LPCM_AUDIO
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_LPCM_AUDIO = GUID(0xe06d80e6, 0xdb46, 0x11cf, [0xb4, 0xd1, 0x0, 0x80, 0x5f, 0x6c, 0xbb, 0xea]);
struct KSDATAFORMAT_SPECIFIER_LPCM_AUDIO
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_AC3_AUDIO = GUID(0xe06d802c, 0xdb46, 0x11cf, [0xb4, 0xd1, 0x0, 0x80, 0x5f, 0x6c, 0xbb, 0xea]);
struct KSDATAFORMAT_SUBTYPE_AC3_AUDIO
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_AC3_AUDIO = GUID(0xe06d80e4, 0xdb46, 0x11cf, [0xb4, 0xd1, 0x0, 0x80, 0x5f, 0x6c, 0xbb, 0xea]);
struct KSDATAFORMAT_SPECIFIER_AC3_AUDIO
{
}
enum CLSID_KSPROPSETID_AC3 = GUID(0xbfabe720, 0x6e1f, 0x11d0, [0xbc, 0xf2, 0x44, 0x45, 0x53, 0x54, 0x0, 0x0]);
struct KSPROPSETID_AC3
{
}
alias KSPROPERTY_AC3 = int;
enum : int
{
    KSPROPERTY_AC3_ERROR_CONCEALMENT = 0x00000001,
    KSPROPERTY_AC3_ALTERNATE_AUDIO   = 0x00000002,
    KSPROPERTY_AC3_DOWNMIX           = 0x00000003,
    KSPROPERTY_AC3_BIT_STREAM_MODE   = 0x00000004,
    KSPROPERTY_AC3_DIALOGUE_LEVEL    = 0x00000005,
    KSPROPERTY_AC3_LANGUAGE_CODE     = 0x00000006,
    KSPROPERTY_AC3_ROOM_TYPE         = 0x00000007,
}

struct KSAC3_ERROR_CONCEALMENT
{
    BOOL fRepeatPreviousBlock;
    BOOL fErrorInCurrentBlock;
}
struct KSAC3_ALTERNATE_AUDIO
{
    BOOL fStereo;
    uint DualMode;
}
struct KSAC3_DOWNMIX
{
    BOOL fDownMix;
    BOOL fDolbySurround;
}
struct KSAC3_BIT_STREAM_MODE
{
    int BitStreamMode;
}
struct KSAC3_DIALOGUE_LEVEL
{
    uint DialogueLevel;
}
struct KSAC3_ROOM_TYPE
{
    BOOL fLargeRoom;
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL = GUID(0x92, 0x0, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_WMA_PRO = GUID(0x164, 0x0, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IEC61937_WMA_PRO
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DTS = GUID(0x8, 0x0, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IEC61937_DTS
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_MPEG1 = GUID(0x3, 0xcea, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IEC61937_MPEG1
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_MPEG2 = GUID(0x4, 0xcea, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IEC61937_MPEG2
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_MPEG3 = GUID(0x5, 0xcea, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IEC61937_MPEG3
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_AAC = GUID(0x6, 0xcea, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IEC61937_AAC
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_ATRAC = GUID(0x8, 0xcea, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IEC61937_ATRAC
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_ONE_BIT_AUDIO = GUID(0x9, 0xcea, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IEC61937_ONE_BIT_AUDIO
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS = GUID(0xa, 0xcea, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS_ATMOS = GUID(0x10a, 0xcea, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS_ATMOS
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DTS_HD = GUID(0xb, 0xcea, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IEC61937_DTS_HD
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DTSX_E1 = GUID(0x10b, 0xcea, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IEC61937_DTSX_E1
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DTSX_E2 = GUID(0x30b, 0xcea, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IEC61937_DTSX_E2
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MLP = GUID(0xc, 0xcea, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MLP
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MAT20 = GUID(0x10c, 0xcea, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MAT20
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MAT21 = GUID(0x30c, 0xcea, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MAT21
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DST = GUID(0xd, 0xcea, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IEC61937_DST
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_MPEGLAYER3 = GUID(0x55, 0x0, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_MPEGLAYER3
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_MPEG_HEAAC = GUID(0x1610, 0x0, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_MPEG_HEAAC
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_WMAUDIO2 = GUID(0x161, 0x0, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_WMAUDIO2
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_WMAUDIO3 = GUID(0x162, 0x0, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_WMAUDIO3
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_WMAUDIO_LOSSLESS = GUID(0x163, 0x0, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_WMAUDIO_LOSSLESS
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_DTS_AUDIO = GUID(0xe06d8033, 0xdb46, 0x11cf, [0xb4, 0xd1, 0x0, 0x80, 0x5f, 0x6c, 0xbb, 0xea]);
struct KSDATAFORMAT_SUBTYPE_DTS_AUDIO
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_SDDS_AUDIO = GUID(0xe06d8034, 0xdb46, 0x11cf, [0xb4, 0xd1, 0x0, 0x80, 0x5f, 0x6c, 0xbb, 0xea]);
struct KSDATAFORMAT_SUBTYPE_SDDS_AUDIO
{
}
enum CLSID_KSPROPSETID_AudioDecoderOut = GUID(0x6ca6e020, 0x43bd, 0x11d0, [0xbd, 0x6a, 0x0, 0x35, 0x5, 0xc1, 0x3, 0xa9]);
struct KSPROPSETID_AudioDecoderOut
{
}
alias KSPROPERTY_AUDDECOUT = int;
enum : int
{
    KSPROPERTY_AUDDECOUT_MODES    = 0x00000000,
    KSPROPERTY_AUDDECOUT_CUR_MODE = 0x00000001,
}

enum CLSID_KSDATAFORMAT_SUBTYPE_SUBPICTURE = GUID(0xe06d802d, 0xdb46, 0x11cf, [0xb4, 0xd1, 0x0, 0x80, 0x5f, 0x6c, 0xbb, 0xea]);
struct KSDATAFORMAT_SUBTYPE_SUBPICTURE
{
}
enum CLSID_KSPROPSETID_DvdSubPic = GUID(0xac390460, 0x43af, 0x11d0, [0xbd, 0x6a, 0x0, 0x35, 0x5, 0xc1, 0x3, 0xa9]);
struct KSPROPSETID_DvdSubPic
{
}
alias KSPROPERTY_DVDSUBPIC = int;
enum : int
{
    KSPROPERTY_DVDSUBPIC_PALETTE     = 0x00000000,
    KSPROPERTY_DVDSUBPIC_HLI         = 0x00000001,
    KSPROPERTY_DVDSUBPIC_COMPOSIT_ON = 0x00000002,
}

struct KS_DVD_YCrCb
{
    ubyte Reserved;
    ubyte Y;
    ubyte Cr;
    ubyte Cb;
}
struct KS_DVD_YUV
{
    ubyte Reserved;
    ubyte Y;
    ubyte V;
    ubyte U;
}
struct KSPROPERTY_SPPAL
{
    KS_DVD_YUV[16] sppal;
}
struct KS_COLCON
{
    ubyte _bitfield1;
    ubyte _bitfield2;
    ubyte _bitfield3;
    ubyte _bitfield4;
}
struct KSPROPERTY_SPHLI
{
    ushort HLISS;
    ushort Reserved;
    uint StartPTM;
    uint EndPTM;
    ushort StartX;
    ushort StartY;
    ushort StopX;
    ushort StopY;
    KS_COLCON ColCon;
}
enum CLSID_KSPROPSETID_CopyProt = GUID(0xe8a0a40, 0x6aef, 0x11d0, [0x9e, 0xd0, 0x0, 0xa0, 0x24, 0xca, 0x19, 0xb3]);
struct KSPROPSETID_CopyProt
{
}
alias KSPROPERTY_COPYPROT = int;
enum : int
{
    KSPROPERTY_DVDCOPY_CHLG_KEY       = 0x00000001,
    KSPROPERTY_DVDCOPY_DVD_KEY1       = 0x00000002,
    KSPROPERTY_DVDCOPY_DEC_KEY2       = 0x00000003,
    KSPROPERTY_DVDCOPY_TITLE_KEY      = 0x00000004,
    KSPROPERTY_COPY_MACROVISION       = 0x00000005,
    KSPROPERTY_DVDCOPY_REGION         = 0x00000006,
    KSPROPERTY_DVDCOPY_SET_COPY_STATE = 0x00000007,
    KSPROPERTY_DVDCOPY_DISC_KEY       = 0x00000080,
}

struct KS_DVDCOPY_CHLGKEY
{
    ubyte[10] ChlgKey;
    ubyte[2] Reserved;
}
struct KS_DVDCOPY_BUSKEY
{
    ubyte[5] BusKey;
    ubyte[1] Reserved;
}
struct KS_DVDCOPY_DISCKEY
{
    ubyte[2048] DiscKey;
}
struct KS_DVDCOPY_REGION
{
    ubyte Reserved;
    ubyte RegionData;
    ubyte[2] Reserved2;
}
struct KS_DVDCOPY_TITLEKEY
{
    uint KeyFlags;
    uint[2] ReservedNT;
    ubyte[6] TitleKey;
    ubyte[2] Reserved;
}
struct KS_COPY_MACROVISION
{
    uint MACROVISIONLevel;
}
struct KS_DVDCOPY_SET_COPY_STATE
{
    uint DVDCopyState;
}
alias KS_DVDCOPYSTATE = int;
enum : int
{
    KS_DVDCOPYSTATE_INITIALIZE                  = 0x00000000,
    KS_DVDCOPYSTATE_INITIALIZE_TITLE            = 0x00000001,
    KS_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED = 0x00000002,
    KS_DVDCOPYSTATE_AUTHENTICATION_REQUIRED     = 0x00000003,
    KS_DVDCOPYSTATE_DONE                        = 0x00000004,
}

alias KS_COPY_MACROVISION_LEVEL = int;
enum : int
{
    KS_MACROVISION_DISABLED = 0x00000000,
    KS_MACROVISION_LEVEL1   = 0x00000001,
    KS_MACROVISION_LEVEL2   = 0x00000002,
    KS_MACROVISION_LEVEL3   = 0x00000003,
}

enum CLSID_KSCATEGORY_TVTUNER = GUID(0xa799a800, 0xa46d, 0x11d0, [0xa1, 0x8c, 0x0, 0xa0, 0x24, 0x1, 0xdc, 0xd4]);
struct KSCATEGORY_TVTUNER
{
}
enum CLSID_KSCATEGORY_CROSSBAR = GUID(0xa799a801, 0xa46d, 0x11d0, [0xa1, 0x8c, 0x0, 0xa0, 0x24, 0x1, 0xdc, 0xd4]);
struct KSCATEGORY_CROSSBAR
{
}
enum CLSID_KSCATEGORY_TVAUDIO = GUID(0xa799a802, 0xa46d, 0x11d0, [0xa1, 0x8c, 0x0, 0xa0, 0x24, 0x1, 0xdc, 0xd4]);
struct KSCATEGORY_TVAUDIO
{
}
enum CLSID_KSCATEGORY_VPMUX = GUID(0xa799a803, 0xa46d, 0x11d0, [0xa1, 0x8c, 0x0, 0xa0, 0x24, 0x1, 0xdc, 0xd4]);
struct KSCATEGORY_VPMUX
{
}
enum CLSID_KSCATEGORY_VBICODEC = GUID(0x7dad660, 0x22f1, 0x11d1, [0xa9, 0xf4, 0x0, 0xc0, 0x4f, 0xbb, 0xde, 0x8f]);
struct KSCATEGORY_VBICODEC
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_VPVideo = GUID(0x5a9b6a40, 0x1a22, 0x11d1, [0xba, 0xd9, 0x0, 0x60, 0x97, 0x44, 0x11, 0x1a]);
struct KSDATAFORMAT_SUBTYPE_VPVideo
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_VPVBI = GUID(0x5a9b6a41, 0x1a22, 0x11d1, [0xba, 0xd9, 0x0, 0x60, 0x97, 0x44, 0x11, 0x1a]);
struct KSDATAFORMAT_SUBTYPE_VPVBI
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_VIDEOINFO = GUID(0x5589f80, 0xc356, 0x11ce, [0xbf, 0x1, 0x0, 0xaa, 0x0, 0x55, 0x59, 0x5a]);
struct KSDATAFORMAT_SPECIFIER_VIDEOINFO
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_VIDEOINFO2 = GUID(0xf72a76a0, 0xeb0a, 0x11d0, [0xac, 0xe4, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba]);
struct KSDATAFORMAT_SPECIFIER_VIDEOINFO2
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_H264_VIDEO = GUID(0x2017be05, 0x6629, 0x4248, [0xaa, 0xed, 0x7e, 0x1a, 0x47, 0xbc, 0x9b, 0x9c]);
struct KSDATAFORMAT_SPECIFIER_H264_VIDEO
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_JPEG_IMAGE = GUID(0x692fa379, 0xd3e8, 0x4651, [0xb5, 0xb4, 0xb, 0x94, 0xb0, 0x13, 0xee, 0xaf]);
struct KSDATAFORMAT_SPECIFIER_JPEG_IMAGE
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_IMAGE = GUID(0x692fa379, 0xd3e8, 0x4651, [0xb5, 0xb4, 0xb, 0x94, 0xb0, 0x13, 0xee, 0xaf]);
struct KSDATAFORMAT_SPECIFIER_IMAGE
{
}
enum CLSID_KSDATAFORMAT_TYPE_IMAGE = GUID(0x72178c23, 0xe45b, 0x11d5, [0xbc, 0x2a, 0x0, 0xb0, 0xd0, 0xf3, 0xf4, 0xab]);
struct KSDATAFORMAT_TYPE_IMAGE
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_JPEG = GUID(0x19e4a5aa, 0x5662, 0x4fc5, [0xa0, 0xc0, 0x17, 0x58, 0x2, 0x8e, 0x10, 0x57]);
struct KSDATAFORMAT_SUBTYPE_JPEG
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_IMAGE_RGB32 = GUID(0x16, 0x0, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_IMAGE_RGB32
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_L8 = GUID(0x32, 0x0, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_L8
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_L8_IR = GUID(0x32, 0x2, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_L8_IR
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_L8_CUSTOM = GUID(0x32, 0x8000, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_L8_CUSTOM
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_L16 = GUID(0x51, 0x0, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_L16
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_L16_IR = GUID(0x51, 0x2, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_L16_IR
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_D16 = GUID(0x50, 0x4, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_D16
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_L16_CUSTOM = GUID(0x51, 0x8000, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_L16_CUSTOM
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_MJPG_IR = GUID(0x47504a4d, 0x2, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_MJPG_IR
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_MJPG_DEPTH = GUID(0x47504a4d, 0x4, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_MJPG_DEPTH
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_MJPG_CUSTOM = GUID(0x47504a4d, 0x8000, 0x10, [0x80, 0x0, 0x0, 0xaa, 0x0, 0x38, 0x9b, 0x71]);
struct KSDATAFORMAT_SUBTYPE_MJPG_CUSTOM
{
}
enum CLSID_KSDATAFORMAT_TYPE_ANALOGVIDEO = GUID(0x482dde1, 0x7817, 0x11cf, [0x8a, 0x3, 0x0, 0xaa, 0x0, 0x6e, 0xcb, 0x65]);
struct KSDATAFORMAT_TYPE_ANALOGVIDEO
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_ANALOGVIDEO = GUID(0x482dde0, 0x7817, 0x11cf, [0x8a, 0x3, 0x0, 0xaa, 0x0, 0x6e, 0xcb, 0x65]);
struct KSDATAFORMAT_SPECIFIER_ANALOGVIDEO
{
}
enum CLSID_KSDATAFORMAT_TYPE_ANALOGAUDIO = GUID(0x482dee1, 0x7817, 0x11cf, [0x8a, 0x3, 0x0, 0xaa, 0x0, 0x6e, 0xcb, 0x65]);
struct KSDATAFORMAT_TYPE_ANALOGAUDIO
{
}
enum CLSID_KSDATAFORMAT_SPECIFIER_VBI = GUID(0xf72a76e0, 0xeb0a, 0x11d0, [0xac, 0xe4, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba]);
struct KSDATAFORMAT_SPECIFIER_VBI
{
}
enum CLSID_KSDATAFORMAT_TYPE_VBI = GUID(0xf72a76e1, 0xeb0a, 0x11d0, [0xac, 0xe4, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba]);
struct KSDATAFORMAT_TYPE_VBI
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_RAW8 = GUID(0xca20d9a0, 0x3e3e, 0x11d1, [0x9b, 0xf9, 0x0, 0xc0, 0x4f, 0xbb, 0xde, 0xbf]);
struct KSDATAFORMAT_SUBTYPE_RAW8
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_CC = GUID(0x33214cc1, 0x11f, 0x11d2, [0xb4, 0xb1, 0x0, 0xa0, 0xd1, 0x2, 0xcf, 0xbe]);
struct KSDATAFORMAT_SUBTYPE_CC
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_NABTS = GUID(0xf72a76e2, 0xeb0a, 0x11d0, [0xac, 0xe4, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba]);
struct KSDATAFORMAT_SUBTYPE_NABTS
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_TELETEXT = GUID(0xf72a76e3, 0xeb0a, 0x11d0, [0xac, 0xe4, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba]);
struct KSDATAFORMAT_SUBTYPE_TELETEXT
{
}
struct KS_RGBQUAD
{
    ubyte rgbBlue;
    ubyte rgbGreen;
    ubyte rgbRed;
    ubyte rgbReserved;
}
struct KS_BITMAPINFOHEADER
{
    uint biSize;
    int biWidth;
    int biHeight;
    ushort biPlanes;
    ushort biBitCount;
    uint biCompression;
    uint biSizeImage;
    int biXPelsPerMeter;
    int biYPelsPerMeter;
    uint biClrUsed;
    uint biClrImportant;
}
struct KS_TRUECOLORINFO
{
    uint[3] dwBitMasks;
    KS_RGBQUAD[256] bmiColors;
}
struct KS_VIDEOINFOHEADER
{
    RECT rcSource;
    RECT rcTarget;
    uint dwBitRate;
    uint dwBitErrorRate;
    long AvgTimePerFrame;
    KS_BITMAPINFOHEADER bmiHeader;
}
struct KS_VIDEOINFO
{
    RECT rcSource;
    RECT rcTarget;
    uint dwBitRate;
    uint dwBitErrorRate;
    long AvgTimePerFrame;
    KS_BITMAPINFOHEADER bmiHeader;
    union
    {
        KS_RGBQUAD[256] bmiColors;
        uint[3] dwBitMasks;
        KS_TRUECOLORINFO TrueColorInfo;
    }
}
struct KS_VBIINFOHEADER
{
    uint StartLine;
    uint EndLine;
    uint SamplingFrequency;
    uint MinLineStartTime;
    uint MaxLineStartTime;
    uint ActualLineStartTime;
    uint ActualLineEndTime;
    uint VideoStandard;
    uint SamplesPerLine;
    uint StrideInBytes;
    uint BufferSize;
}
struct KS_ANALOGVIDEOINFO
{
    RECT rcSource;
    RECT rcTarget;
    uint dwActiveWidth;
    uint dwActiveHeight;
    long AvgTimePerFrame;
}
struct KS_TVTUNER_CHANGE_INFO
{
    uint dwFlags;
    uint dwCountryCode;
    uint dwAnalogVideoStandard;
    uint dwChannel;
}
alias KS_MPEG2Level = int;
enum : int
{
    KS_MPEG2Level_Low      = 0x00000000,
    KS_MPEG2Level_Main     = 0x00000001,
    KS_MPEG2Level_High1440 = 0x00000002,
    KS_MPEG2Level_High     = 0x00000003,
}

alias KS_MPEG2Profile = int;
enum : int
{
    KS_MPEG2Profile_Simple            = 0x00000000,
    KS_MPEG2Profile_Main              = 0x00000001,
    KS_MPEG2Profile_SNRScalable       = 0x00000002,
    KS_MPEG2Profile_SpatiallyScalable = 0x00000003,
    KS_MPEG2Profile_High              = 0x00000004,
}

struct KS_VIDEOINFOHEADER2
{
    RECT rcSource;
    RECT rcTarget;
    uint dwBitRate;
    uint dwBitErrorRate;
    long AvgTimePerFrame;
    uint dwInterlaceFlags;
    uint dwCopyProtectFlags;
    uint dwPictAspectRatioX;
    uint dwPictAspectRatioY;
    union
    {
        uint dwControlFlags;
        uint dwReserved1;
    }
    uint dwReserved2;
    KS_BITMAPINFOHEADER bmiHeader;
}
struct KS_MPEG1VIDEOINFO
{
    KS_VIDEOINFOHEADER hdr;
    uint dwStartTimeCode;
    uint cbSequenceHeader;
    ubyte[1] bSequenceHeader;
}
struct KS_MPEGVIDEOINFO2
{
    KS_VIDEOINFOHEADER2 hdr;
    uint dwStartTimeCode;
    uint cbSequenceHeader;
    uint dwProfile;
    uint dwLevel;
    uint dwFlags;
    uint[1] bSequenceHeader;
}
struct KS_H264VIDEOINFO
{
    ushort wWidth;
    ushort wHeight;
    ushort wSARwidth;
    ushort wSARheight;
    ushort wProfile;
    ubyte bLevelIDC;
    ushort wConstrainedToolset;
    uint bmSupportedUsages;
    ushort bmCapabilities;
    uint bmSVCCapabilities;
    uint bmMVCCapabilities;
    uint dwFrameInterval;
    ubyte bMaxCodecConfigDelay;
    ubyte bmSupportedSliceModes;
    ubyte bmSupportedSyncFrameTypes;
    ubyte bResolutionScaling;
    ubyte bSimulcastSupport;
    ubyte bmSupportedRateControlModes;
    ushort wMaxMBperSecOneResolutionNoScalability;
    ushort wMaxMBperSecTwoResolutionsNoScalability;
    ushort wMaxMBperSecThreeResolutionsNoScalability;
    ushort wMaxMBperSecFourResolutionsNoScalability;
    ushort wMaxMBperSecOneResolutionTemporalScalability;
    ushort wMaxMBperSecTwoResolutionsTemporalScalablility;
    ushort wMaxMBperSecThreeResolutionsTemporalScalability;
    ushort wMaxMBperSecFourResolutionsTemporalScalability;
    ushort wMaxMBperSecOneResolutionTemporalQualityScalability;
    ushort wMaxMBperSecTwoResolutionsTemporalQualityScalability;
    ushort wMaxMBperSecThreeResolutionsTemporalQualityScalablity;
    ushort wMaxMBperSecFourResolutionsTemporalQualityScalability;
    ushort wMaxMBperSecOneResolutionTemporalSpatialScalability;
    ushort wMaxMBperSecTwoResolutionsTemporalSpatialScalability;
    ushort wMaxMBperSecThreeResolutionsTemporalSpatialScalablity;
    ushort wMaxMBperSecFourResolutionsTemporalSpatialScalability;
    ushort wMaxMBperSecOneResolutionFullScalability;
    ushort wMaxMBperSecTwoResolutionsFullScalability;
    ushort wMaxMBperSecThreeResolutionsFullScalability;
    ushort wMaxMBperSecFourResolutionsFullScalability;
}
struct KS_MPEGAUDIOINFO
{
    uint dwFlags;
    uint dwReserved1;
    uint dwReserved2;
    uint dwReserved3;
}
struct KS_DATAFORMAT_VIDEOINFOHEADER
{
    KSDATAFORMAT DataFormat;
    KS_VIDEOINFOHEADER VideoInfoHeader;
}
struct KS_DATAFORMAT_VIDEOINFOHEADER2
{
    KSDATAFORMAT DataFormat;
    KS_VIDEOINFOHEADER2 VideoInfoHeader2;
}
struct KS_DATAFORMAT_MPEGVIDEOINFO2
{
    KSDATAFORMAT DataFormat;
    KS_MPEGVIDEOINFO2 MpegVideoInfoHeader2;
}
struct KS_DATAFORMAT_H264VIDEOINFO
{
    KSDATAFORMAT DataFormat;
    KS_H264VIDEOINFO H264VideoInfoHeader;
}
struct KS_DATAFORMAT_IMAGEINFO
{
    KSDATAFORMAT DataFormat;
    KS_BITMAPINFOHEADER ImageInfoHeader;
}
struct KS_DATAFORMAT_VIDEOINFO_PALETTE
{
    KSDATAFORMAT DataFormat;
    KS_VIDEOINFO VideoInfo;
}
struct KS_DATAFORMAT_VBIINFOHEADER
{
    KSDATAFORMAT DataFormat;
    KS_VBIINFOHEADER VBIInfoHeader;
}
struct KS_VIDEO_STREAM_CONFIG_CAPS
{
    GUID guid;
    uint VideoStandard;
    SIZE InputSize;
    SIZE MinCroppingSize;
    SIZE MaxCroppingSize;
    int CropGranularityX;
    int CropGranularityY;
    int CropAlignX;
    int CropAlignY;
    SIZE MinOutputSize;
    SIZE MaxOutputSize;
    int OutputGranularityX;
    int OutputGranularityY;
    int StretchTapsX;
    int StretchTapsY;
    int ShrinkTapsX;
    int ShrinkTapsY;
    long MinFrameInterval;
    long MaxFrameInterval;
    int MinBitsPerSecond;
    int MaxBitsPerSecond;
}
struct KS_DATARANGE_VIDEO
{
    KSDATAFORMAT DataRange;
    BOOL bFixedSizeSamples;
    BOOL bTemporalCompression;
    uint StreamDescriptionFlags;
    uint MemoryAllocationFlags;
    KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
    KS_VIDEOINFOHEADER VideoInfoHeader;
}
struct KS_DATARANGE_VIDEO2
{
    KSDATAFORMAT DataRange;
    BOOL bFixedSizeSamples;
    BOOL bTemporalCompression;
    uint StreamDescriptionFlags;
    uint MemoryAllocationFlags;
    KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
    KS_VIDEOINFOHEADER2 VideoInfoHeader;
}
struct KS_DATARANGE_MPEG1_VIDEO
{
    KSDATAFORMAT DataRange;
    BOOL bFixedSizeSamples;
    BOOL bTemporalCompression;
    uint StreamDescriptionFlags;
    uint MemoryAllocationFlags;
    KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
    KS_MPEG1VIDEOINFO VideoInfoHeader;
}
struct KS_DATARANGE_MPEG2_VIDEO
{
    KSDATAFORMAT DataRange;
    BOOL bFixedSizeSamples;
    BOOL bTemporalCompression;
    uint StreamDescriptionFlags;
    uint MemoryAllocationFlags;
    KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
    KS_MPEGVIDEOINFO2 VideoInfoHeader;
}
struct KS_DATARANGE_H264_VIDEO
{
    KSDATAFORMAT DataRange;
    BOOL bFixedSizeSamples;
    BOOL bTemporalCompression;
    uint StreamDescriptionFlags;
    uint MemoryAllocationFlags;
    KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
    KS_H264VIDEOINFO VideoInfoHeader;
}
struct KS_DATARANGE_IMAGE
{
    KSDATAFORMAT DataRange;
    KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
    KS_BITMAPINFOHEADER ImageInfoHeader;
}
struct KS_DATARANGE_VIDEO_PALETTE
{
    KSDATAFORMAT DataRange;
    BOOL bFixedSizeSamples;
    BOOL bTemporalCompression;
    uint StreamDescriptionFlags;
    uint MemoryAllocationFlags;
    KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
    KS_VIDEOINFO VideoInfo;
}
struct KS_DATARANGE_VIDEO_VBI
{
    KSDATAFORMAT DataRange;
    BOOL bFixedSizeSamples;
    BOOL bTemporalCompression;
    uint StreamDescriptionFlags;
    uint MemoryAllocationFlags;
    KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
    KS_VBIINFOHEADER VBIInfoHeader;
}
struct KS_DATARANGE_ANALOGVIDEO
{
    KSDATAFORMAT DataRange;
    KS_ANALOGVIDEOINFO AnalogVideoInfo;
}
enum CLSID_KSPROPSETID_VBICAP_PROPERTIES = GUID(0xf162c607, 0x7b35, 0x496f, [0xad, 0x7f, 0x2d, 0xca, 0x3b, 0x46, 0xb7, 0x18]);
struct KSPROPSETID_VBICAP_PROPERTIES
{
}
alias KSPROPERTY_VBICAP = int;
enum : int
{
    KSPROPERTY_VBICAP_PROPERTIES_PROTECTION = 0x00000001,
}

struct VBICAP_PROPERTIES_PROTECTION_S
{
    KSIDENTIFIER Property;
    uint StreamIndex;
    uint Status;
}
enum CLSID_KSDATAFORMAT_TYPE_NABTS = GUID(0xe757bca0, 0x39ac, 0x11d1, [0xa9, 0xf5, 0x0, 0xc0, 0x4f, 0xbb, 0xde, 0x8f]);
struct KSDATAFORMAT_TYPE_NABTS
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_NABTS_FEC = GUID(0xe757bca1, 0x39ac, 0x11d1, [0xa9, 0xf5, 0x0, 0xc0, 0x4f, 0xbb, 0xde, 0x8f]);
struct KSDATAFORMAT_SUBTYPE_NABTS_FEC
{
}
struct NABTSFEC_BUFFER
{
    uint dataSize;
    ushort groupID;
    ushort Reserved;
    ubyte[448] data;
}
enum CLSID_KSPROPSETID_VBICodecFiltering = GUID(0xcafeb0ca, 0x8715, 0x11d0, [0xbd, 0x6a, 0x0, 0x35, 0xc0, 0xed, 0xba, 0xbe]);
struct KSPROPSETID_VBICodecFiltering
{
}
alias KSPROPERTY_VBICODECFILTERING = int;
enum : int
{
    KSPROPERTY_VBICODECFILTERING_SCANLINES_REQUESTED_BIT_ARRAY   = 0x00000001,
    KSPROPERTY_VBICODECFILTERING_SCANLINES_DISCOVERED_BIT_ARRAY  = 0x00000002,
    KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_REQUESTED_BIT_ARRAY  = 0x00000003,
    KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_DISCOVERED_BIT_ARRAY = 0x00000004,
    KSPROPERTY_VBICODECFILTERING_STATISTICS                      = 0x00000005,
}

struct VBICODECFILTERING_SCANLINES
{
    uint[32] DwordBitArray;
}
struct VBICODECFILTERING_NABTS_SUBSTREAMS
{
    uint[128] SubstreamMask;
}
struct VBICODECFILTERING_CC_SUBSTREAMS
{
    uint SubstreamMask;
}
struct CC_BYTE_PAIR
{
    ubyte[2] Decoded;
    ushort Reserved;
}
struct CC_HW_FIELD
{
    VBICODECFILTERING_SCANLINES ScanlinesRequested;
    uint fieldFlags;
    long PictureNumber;
    CC_BYTE_PAIR[12] Lines;
}
struct NABTS_BUFFER_LINE
{
    ubyte Confidence;
    ubyte[36] Bytes;
}
struct NABTS_BUFFER
{
    align (1):
    VBICODECFILTERING_SCANLINES ScanlinesRequested;
    long PictureNumber;
    NABTS_BUFFER_LINE[11] NabtsLines;
}
struct WST_BUFFER_LINE
{
    ubyte Confidence;
    ubyte[42] Bytes;
}
struct WST_BUFFER
{
    VBICODECFILTERING_SCANLINES ScanlinesRequested;
    WST_BUFFER_LINE[17] WstLines;
}
struct VBICODECFILTERING_STATISTICS_COMMON
{
    uint InputSRBsProcessed;
    uint OutputSRBsProcessed;
    uint SRBsIgnored;
    uint InputSRBsMissing;
    uint OutputSRBsMissing;
    uint OutputFailures;
    uint InternalErrors;
    uint ExternalErrors;
    uint InputDiscontinuities;
    uint DSPFailures;
    uint TvTunerChanges;
    uint VBIHeaderChanges;
    uint LineConfidenceAvg;
    uint BytesOutput;
}
struct VBICODECFILTERING_STATISTICS_COMMON_PIN
{
    uint SRBsProcessed;
    uint SRBsIgnored;
    uint SRBsMissing;
    uint InternalErrors;
    uint ExternalErrors;
    uint Discontinuities;
    uint LineConfidenceAvg;
    uint BytesOutput;
}
struct VBICODECFILTERING_STATISTICS_NABTS
{
    VBICODECFILTERING_STATISTICS_COMMON Common;
    uint FECBundleBadLines;
    uint FECQueueOverflows;
    uint FECCorrectedLines;
    uint FECUncorrectableLines;
    uint BundlesProcessed;
    uint BundlesSent2IP;
    uint FilteredLines;
}
struct VBICODECFILTERING_STATISTICS_NABTS_PIN
{
    VBICODECFILTERING_STATISTICS_COMMON_PIN Common;
}
struct VBICODECFILTERING_STATISTICS_CC
{
    VBICODECFILTERING_STATISTICS_COMMON Common;
}
struct VBICODECFILTERING_STATISTICS_CC_PIN
{
    VBICODECFILTERING_STATISTICS_COMMON_PIN Common;
}
struct VBICODECFILTERING_STATISTICS_TELETEXT
{
    VBICODECFILTERING_STATISTICS_COMMON Common;
}
struct VBICODECFILTERING_STATISTICS_TELETEXT_PIN
{
    VBICODECFILTERING_STATISTICS_COMMON_PIN Common;
}
struct KSPROPERTY_VBICODECFILTERING_SCANLINES_S
{
    KSIDENTIFIER Property;
    VBICODECFILTERING_SCANLINES Scanlines;
}
struct KSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S
{
    KSIDENTIFIER Property;
    VBICODECFILTERING_NABTS_SUBSTREAMS Substreams;
}
struct KSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S
{
    KSIDENTIFIER Property;
    VBICODECFILTERING_CC_SUBSTREAMS Substreams;
}
struct KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S
{
    KSIDENTIFIER Property;
    VBICODECFILTERING_STATISTICS_COMMON Statistics;
}
struct KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S
{
    KSIDENTIFIER Property;
    VBICODECFILTERING_STATISTICS_COMMON_PIN Statistics;
}
struct KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S
{
    KSIDENTIFIER Property;
    VBICODECFILTERING_STATISTICS_NABTS Statistics;
}
struct KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S
{
    KSIDENTIFIER Property;
    VBICODECFILTERING_STATISTICS_NABTS_PIN Statistics;
}
struct KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S
{
    KSIDENTIFIER Property;
    VBICODECFILTERING_STATISTICS_CC Statistics;
}
struct KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S
{
    KSIDENTIFIER Property;
    VBICODECFILTERING_STATISTICS_CC_PIN Statistics;
}
enum CLSID_PINNAME_VIDEO_CAPTURE = GUID(0xfb6c4281, 0x353, 0x11d1, [0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba]);
struct PINNAME_VIDEO_CAPTURE
{
}
enum CLSID_PINNAME_VIDEO_CC_CAPTURE = GUID(0x1aad8061, 0x12d, 0x11d2, [0xb4, 0xb1, 0x0, 0xa0, 0xd1, 0x2, 0xcf, 0xbe]);
struct PINNAME_VIDEO_CC_CAPTURE
{
}
enum CLSID_PINNAME_VIDEO_NABTS_CAPTURE = GUID(0x29703660, 0x498a, 0x11d2, [0xb4, 0xb1, 0x0, 0xa0, 0xd1, 0x2, 0xcf, 0xbe]);
struct PINNAME_VIDEO_NABTS_CAPTURE
{
}
enum CLSID_PINNAME_VIDEO_PREVIEW = GUID(0xfb6c4282, 0x353, 0x11d1, [0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba]);
struct PINNAME_VIDEO_PREVIEW
{
}
enum CLSID_PINNAME_VIDEO_ANALOGVIDEOIN = GUID(0xfb6c4283, 0x353, 0x11d1, [0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba]);
struct PINNAME_VIDEO_ANALOGVIDEOIN
{
}
enum CLSID_PINNAME_VIDEO_VBI = GUID(0xfb6c4284, 0x353, 0x11d1, [0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba]);
struct PINNAME_VIDEO_VBI
{
}
enum CLSID_PINNAME_VIDEO_VIDEOPORT = GUID(0xfb6c4285, 0x353, 0x11d1, [0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba]);
struct PINNAME_VIDEO_VIDEOPORT
{
}
enum CLSID_PINNAME_VIDEO_NABTS = GUID(0xfb6c4286, 0x353, 0x11d1, [0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba]);
struct PINNAME_VIDEO_NABTS
{
}
enum CLSID_PINNAME_VIDEO_EDS = GUID(0xfb6c4287, 0x353, 0x11d1, [0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba]);
struct PINNAME_VIDEO_EDS
{
}
enum CLSID_PINNAME_VIDEO_TELETEXT = GUID(0xfb6c4288, 0x353, 0x11d1, [0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba]);
struct PINNAME_VIDEO_TELETEXT
{
}
enum CLSID_PINNAME_VIDEO_CC = GUID(0xfb6c4289, 0x353, 0x11d1, [0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba]);
struct PINNAME_VIDEO_CC
{
}
enum CLSID_PINNAME_VIDEO_STILL = GUID(0xfb6c428a, 0x353, 0x11d1, [0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba]);
struct PINNAME_VIDEO_STILL
{
}
enum CLSID_PINNAME_IMAGE = GUID(0x38a0cd98, 0xd49b, 0x4ce8, [0xb4, 0x8a, 0x34, 0x46, 0x67, 0xa1, 0x78, 0x30]);
struct PINNAME_IMAGE
{
}
enum CLSID_PINNAME_VIDEO_TIMECODE = GUID(0xfb6c428b, 0x353, 0x11d1, [0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba]);
struct PINNAME_VIDEO_TIMECODE
{
}
enum CLSID_PINNAME_VIDEO_VIDEOPORT_VBI = GUID(0xfb6c428c, 0x353, 0x11d1, [0x90, 0x5f, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba]);
struct PINNAME_VIDEO_VIDEOPORT_VBI
{
}
alias CAPTURE_MEMORY_ALLOCATION_FLAGS = int;
enum : int
{
    KS_CAPTURE_ALLOC_INVALID       = 0x00000000,
    KS_CAPTURE_ALLOC_SYSTEM        = 0x00000001,
    KS_CAPTURE_ALLOC_VRAM          = 0x00000002,
    KS_CAPTURE_ALLOC_SYSTEM_AGP    = 0x00000004,
    KS_CAPTURE_ALLOC_VRAM_MAPPED   = 0x00000008,
    KS_CAPTURE_ALLOC_SECURE_BUFFER = 0x00000010,
}

enum CLSID_KSPROPSETID_VramCapture = GUID(0xe73face3, 0x2880, 0x4902, [0xb7, 0x99, 0x88, 0xd0, 0xcd, 0x63, 0x4e, 0xf]);
struct KSPROPSETID_VramCapture
{
}
alias KSPROPERTY_VIDMEM_TRANSPORT = int;
enum : int
{
    KSPROPERTY_DISPLAY_ADAPTER_GUID               = 0x00000001,
    KSPROPERTY_PREFERRED_CAPTURE_SURFACE          = 0x00000002,
    KSPROPERTY_CURRENT_CAPTURE_SURFACE            = 0x00000003,
    KSPROPERTY_MAP_CAPTURE_HANDLE_TO_VRAM_ADDRESS = 0x00000004,
}

struct VRAM_SURFACE_INFO
{
    ulong hSurface;
    long VramPhysicalAddress;
    uint cbCaptured;
    uint dwWidth;
    uint dwHeight;
    uint dwLinearSize;
    int lPitch;
    ulong[16] ullReserved;
}
struct VRAM_SURFACE_INFO_PROPERTY_S
{
    KSIDENTIFIER Property;
    VRAM_SURFACE_INFO* pVramSurfaceInfo;
}
struct SECURE_BUFFER_INFO
{
    GUID guidBufferIdentifier;
    uint cbBufferSize;
    uint cbCaptured;
    ulong[16] ullReserved;
}
enum CLSID_KS_SECURE_CAMERA_SCENARIO_ID = GUID(0xae53fc6e, 0x8d89, 0x4488, [0x9d, 0x2e, 0x4d, 0x0, 0x87, 0x31, 0xc5, 0xfd]);
struct KS_SECURE_CAMERA_SCENARIO_ID
{
}
enum CLSID_KSPROPSETID_MPEG4_MediaType_Attributes = GUID(0xff6c4bfa, 0x7a9, 0x4c7b, [0xa2, 0x37, 0x67, 0x2f, 0x9d, 0x68, 0x6, 0x5f]);
struct KSPROPSETID_MPEG4_MediaType_Attributes
{
}
alias KSPROPERTY_MPEG4_MEDIATYPE_ATTRIBUTES = int;
enum : int
{
    KSPROPERTY_MPEG4_MEDIATYPE_SD_BOX = 0x00000001,
}

enum CLSID_KSEVENTSETID_DynamicFormatChange = GUID(0x162ac456, 0x83d7, 0x4239, [0x96, 0xdf, 0xc7, 0x5f, 0xfa, 0x13, 0x8b, 0xc6]);
struct KSEVENTSETID_DynamicFormatChange
{
}
alias KSEVENT_DYNAMICFORMATCHANGE = int;
enum : int
{
    KSEVENT_DYNAMIC_FORMAT_CHANGE = 0x00000000,
}

struct KS_FRAME_INFO
{
    uint ExtendedHeaderSize;
    uint dwFrameFlags;
    long PictureNumber;
    long DropCount;
    HANDLE hDirectDraw;
    HANDLE hSurfaceHandle;
    RECT DirectDrawRect;
    union
    {
        int lSurfacePitch;
        uint Reserved1;
    }
    uint Reserved2;
    union
    {
        struct
        {
            uint Reserved3;
            uint Reserved4;
        }
        ulong FrameCompletionNumber;
    }
}
struct KS_VBI_FRAME_INFO
{
    uint ExtendedHeaderSize;
    uint dwFrameFlags;
    long PictureNumber;
    long DropCount;
    uint dwSamplingFrequency;
    KS_TVTUNER_CHANGE_INFO TvTunerChangeInfo;
    KS_VBIINFOHEADER VBIInfoHeader;
}
alias KS_AnalogVideoStandard = int;
enum : int
{
    KS_AnalogVideo_None        = 0x00000000,
    KS_AnalogVideo_NTSC_M      = 0x00000001,
    KS_AnalogVideo_NTSC_M_J    = 0x00000002,
    KS_AnalogVideo_NTSC_433    = 0x00000004,
    KS_AnalogVideo_PAL_B       = 0x00000010,
    KS_AnalogVideo_PAL_D       = 0x00000020,
    KS_AnalogVideo_PAL_G       = 0x00000040,
    KS_AnalogVideo_PAL_H       = 0x00000080,
    KS_AnalogVideo_PAL_I       = 0x00000100,
    KS_AnalogVideo_PAL_M       = 0x00000200,
    KS_AnalogVideo_PAL_N       = 0x00000400,
    KS_AnalogVideo_PAL_60      = 0x00000800,
    KS_AnalogVideo_SECAM_B     = 0x00001000,
    KS_AnalogVideo_SECAM_D     = 0x00002000,
    KS_AnalogVideo_SECAM_G     = 0x00004000,
    KS_AnalogVideo_SECAM_H     = 0x00008000,
    KS_AnalogVideo_SECAM_K     = 0x00010000,
    KS_AnalogVideo_SECAM_K1    = 0x00020000,
    KS_AnalogVideo_SECAM_L     = 0x00040000,
    KS_AnalogVideo_SECAM_L1    = 0x00080000,
    KS_AnalogVideo_PAL_N_COMBO = 0x00100000,
}

enum CLSID_PROPSETID_ALLOCATOR_CONTROL = GUID(0x53171960, 0x148e, 0x11d2, [0x99, 0x79, 0x0, 0x0, 0xc0, 0xcc, 0x16, 0xba]);
struct PROPSETID_ALLOCATOR_CONTROL
{
}
alias KSPROPERTY_ALLOCATOR_CONTROL = int;
enum : int
{
    KSPROPERTY_ALLOCATOR_CONTROL_HONOR_COUNT        = 0x00000000,
    KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE       = 0x00000001,
    KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS       = 0x00000002,
    KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE = 0x00000003,
}

struct KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S
{
    uint CX;
    uint CY;
}
struct KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S
{
    uint InterleavedCapSupported;
}
struct KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S
{
    uint InterleavedCapPossible;
}
enum CLSID_PROPSETID_VIDCAP_VIDEOPROCAMP = GUID(0xc6e13360, 0x30ac, 0x11d0, [0xa1, 0x8c, 0x0, 0xa0, 0xc9, 0x11, 0x89, 0x56]);
struct PROPSETID_VIDCAP_VIDEOPROCAMP
{
}
alias KSPROPERTY_VIDCAP_VIDEOPROCAMP = int;
enum : int
{
    KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS               = 0x00000000,
    KSPROPERTY_VIDEOPROCAMP_CONTRAST                 = 0x00000001,
    KSPROPERTY_VIDEOPROCAMP_HUE                      = 0x00000002,
    KSPROPERTY_VIDEOPROCAMP_SATURATION               = 0x00000003,
    KSPROPERTY_VIDEOPROCAMP_SHARPNESS                = 0x00000004,
    KSPROPERTY_VIDEOPROCAMP_GAMMA                    = 0x00000005,
    KSPROPERTY_VIDEOPROCAMP_COLORENABLE              = 0x00000006,
    KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE             = 0x00000007,
    KSPROPERTY_VIDEOPROCAMP_BACKLIGHT_COMPENSATION   = 0x00000008,
    KSPROPERTY_VIDEOPROCAMP_GAIN                     = 0x00000009,
    KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER       = 0x0000000a,
    KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER_LIMIT = 0x0000000b,
    KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE_COMPONENT   = 0x0000000c,
    KSPROPERTY_VIDEOPROCAMP_POWERLINE_FREQUENCY      = 0x0000000d,
}

struct KSPROPERTY_VIDEOPROCAMP_S
{
    KSIDENTIFIER Property;
    int Value;
    uint Flags;
    uint Capabilities;
}
struct KSPROPERTY_VIDEOPROCAMP_NODE_S
{
    KSP_NODE NodeProperty;
    int Value;
    uint Flags;
    uint Capabilities;
}
struct KSPROPERTY_VIDEOPROCAMP_S2
{
    KSIDENTIFIER Property;
    int Value1;
    uint Flags;
    uint Capabilities;
    int Value2;
}
struct KSPROPERTY_VIDEOPROCAMP_NODE_S2
{
    KSP_NODE NodeProperty;
    int Value1;
    uint Flags;
    uint Capabilities;
    int Value2;
}
enum CLSID_PROPSETID_VIDCAP_SELECTOR = GUID(0x1abdaeca, 0x68b6, 0x4f83, [0x93, 0x71, 0xb4, 0x13, 0x90, 0x7c, 0x7b, 0x9f]);
struct PROPSETID_VIDCAP_SELECTOR
{
}
alias KSPROPERTY_VIDCAP_SELECTOR = int;
enum : int
{
    KSPROPERTY_SELECTOR_SOURCE_NODE_ID = 0x00000000,
    KSPROPERTY_SELECTOR_NUM_SOURCES    = 0x00000001,
}

struct KSPROPERTY_SELECTOR_S
{
    KSIDENTIFIER Property;
    int Value;
    uint Flags;
    uint Capabilities;
}
struct KSPROPERTY_SELECTOR_NODE_S
{
    KSP_NODE NodeProperty;
    int Value;
    uint Flags;
    uint Capabilities;
}
enum CLSID_PROPSETID_TUNER = GUID(0x6a2e0605, 0x28e4, 0x11d0, [0xa1, 0x8c, 0x0, 0xa0, 0xc9, 0x11, 0x89, 0x56]);
struct PROPSETID_TUNER
{
}
alias KSPROPERTY_TUNER = int;
enum : int
{
    KSPROPERTY_TUNER_CAPS                  = 0x00000000,
    KSPROPERTY_TUNER_MODE_CAPS             = 0x00000001,
    KSPROPERTY_TUNER_MODE                  = 0x00000002,
    KSPROPERTY_TUNER_STANDARD              = 0x00000003,
    KSPROPERTY_TUNER_FREQUENCY             = 0x00000004,
    KSPROPERTY_TUNER_INPUT                 = 0x00000005,
    KSPROPERTY_TUNER_STATUS                = 0x00000006,
    KSPROPERTY_TUNER_IF_MEDIUM             = 0x00000007,
    KSPROPERTY_TUNER_SCAN_CAPS             = 0x00000008,
    KSPROPERTY_TUNER_SCAN_STATUS           = 0x00000009,
    KSPROPERTY_TUNER_STANDARD_MODE         = 0x0000000a,
    KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS = 0x0000000b,
}

alias KSPROPERTY_TUNER_MODES = int;
enum : int
{
    KSPROPERTY_TUNER_MODE_TV       = 0x00000001,
    KSPROPERTY_TUNER_MODE_FM_RADIO = 0x00000002,
    KSPROPERTY_TUNER_MODE_AM_RADIO = 0x00000004,
    KSPROPERTY_TUNER_MODE_DSS      = 0x00000008,
    KSPROPERTY_TUNER_MODE_ATSC     = 0x00000010,
}

alias KS_TUNER_TUNING_FLAGS = int;
enum : int
{
    KS_TUNER_TUNING_EXACT  = 0x00000001,
    KS_TUNER_TUNING_FINE   = 0x00000002,
    KS_TUNER_TUNING_COARSE = 0x00000003,
}

alias KS_TUNER_STRATEGY = int;
enum : int
{
    KS_TUNER_STRATEGY_PLL             = 0x00000001,
    KS_TUNER_STRATEGY_SIGNAL_STRENGTH = 0x00000002,
    KS_TUNER_STRATEGY_DRIVER_TUNES    = 0x00000004,
}

struct KSPROPERTY_TUNER_CAPS_S
{
    KSIDENTIFIER Property;
    uint ModesSupported;
    KSIDENTIFIER VideoMedium;
    KSIDENTIFIER TVAudioMedium;
    KSIDENTIFIER RadioAudioMedium;
}
struct KSPROPERTY_TUNER_IF_MEDIUM_S
{
    KSIDENTIFIER Property;
    KSIDENTIFIER IFMedium;
}
struct KSPROPERTY_TUNER_MODE_CAPS_S
{
    KSIDENTIFIER Property;
    uint Mode;
    uint StandardsSupported;
    uint MinFrequency;
    uint MaxFrequency;
    uint TuningGranularity;
    uint NumberOfInputs;
    uint SettlingTime;
    uint Strategy;
}
struct KSPROPERTY_TUNER_MODE_S
{
    KSIDENTIFIER Property;
    uint Mode;
}
struct KSPROPERTY_TUNER_FREQUENCY_S
{
    KSIDENTIFIER Property;
    uint Frequency;
    uint LastFrequency;
    uint TuningFlags;
    uint VideoSubChannel;
    uint AudioSubChannel;
    uint Channel;
    uint Country;
}
struct KSPROPERTY_TUNER_STANDARD_S
{
    KSIDENTIFIER Property;
    uint Standard;
}
struct KSPROPERTY_TUNER_STANDARD_MODE_S
{
    KSIDENTIFIER Property;
    BOOL AutoDetect;
}
struct KSPROPERTY_TUNER_INPUT_S
{
    KSIDENTIFIER Property;
    uint InputIndex;
}
struct KSPROPERTY_TUNER_STATUS_S
{
    KSIDENTIFIER Property;
    uint CurrentFrequency;
    uint PLLOffset;
    uint SignalStrength;
    uint Busy;
}
alias TunerLockType = int;
enum : int
{
    Tuner_LockType_None                      = 0x00000000,
    Tuner_LockType_Within_Scan_Sensing_Range = 0x00000001,
    Tuner_LockType_Locked                    = 0x00000002,
}

struct TUNER_ANALOG_CAPS_S
{
    uint Mode;
    uint StandardsSupported;
    uint MinFrequency;
    uint MaxFrequency;
    uint TuningGranularity;
    uint SettlingTime;
    uint ScanSensingRange;
    uint FineTuneSensingRange;
}
enum CLSID_EVENTSETID_TUNER = GUID(0x6a2e0606, 0x28e4, 0x11d0, [0xa1, 0x8c, 0x0, 0xa0, 0xc9, 0x11, 0x89, 0x56]);
struct EVENTSETID_TUNER
{
}
alias KSEVENT_TUNER = int;
enum : int
{
    KSEVENT_TUNER_CHANGED       = 0x00000000,
    KSEVENT_TUNER_INITIATE_SCAN = 0x00000001,
}

struct KSPROPERTY_TUNER_SCAN_CAPS_S
{
    KSIDENTIFIER Property;
    BOOL fSupportsHardwareAssistedScanning;
    uint SupportedBroadcastStandards;
    void* GUIDBucket;
    uint lengthofBucket;
}
struct KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S
{
    KSIDENTIFIER Property;
    GUID NetworkType;
    uint BufferSize;
    void* NetworkTunerCapabilities;
}
struct KSPROPERTY_TUNER_SCAN_STATUS_S
{
    KSIDENTIFIER Property;
    TunerLockType LockStatus;
    uint CurrentFrequency;
}
struct KSEVENT_TUNER_INITIATE_SCAN_S
{
    KSEVENTDATA EventData;
    uint StartFrequency;
    uint EndFrequency;
}
enum CLSID_KSNODETYPE_VIDEO_STREAMING = GUID(0xdff229e1, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_VIDEO_STREAMING
{
}
enum CLSID_KSNODETYPE_VIDEO_INPUT_TERMINAL = GUID(0xdff229e2, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_VIDEO_INPUT_TERMINAL
{
}
enum CLSID_KSNODETYPE_VIDEO_OUTPUT_TERMINAL = GUID(0xdff229e3, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_VIDEO_OUTPUT_TERMINAL
{
}
enum CLSID_KSNODETYPE_VIDEO_SELECTOR = GUID(0xdff229e4, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_VIDEO_SELECTOR
{
}
enum CLSID_KSNODETYPE_VIDEO_PROCESSING = GUID(0xdff229e5, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_VIDEO_PROCESSING
{
}
enum CLSID_KSNODETYPE_VIDEO_CAMERA_TERMINAL = GUID(0xdff229e6, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_VIDEO_CAMERA_TERMINAL
{
}
enum CLSID_KSNODETYPE_VIDEO_INPUT_MTT = GUID(0xdff229e7, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_VIDEO_INPUT_MTT
{
}
enum CLSID_KSNODETYPE_VIDEO_OUTPUT_MTT = GUID(0xdff229e8, 0xf70f, 0x11d0, [0xb9, 0x17, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSNODETYPE_VIDEO_OUTPUT_MTT
{
}
enum CLSID_PROPSETID_VIDCAP_VIDEOENCODER = GUID(0x6a2e0610, 0x28e4, 0x11d0, [0xa1, 0x8c, 0x0, 0xa0, 0xc9, 0x11, 0x89, 0x56]);
struct PROPSETID_VIDCAP_VIDEOENCODER
{
}
alias KSPROPERTY_VIDCAP_VIDEOENCODER = int;
enum : int
{
    KSPROPERTY_VIDEOENCODER_CAPS           = 0x00000000,
    KSPROPERTY_VIDEOENCODER_STANDARD       = 0x00000001,
    KSPROPERTY_VIDEOENCODER_COPYPROTECTION = 0x00000002,
    KSPROPERTY_VIDEOENCODER_CC_ENABLE      = 0x00000003,
}

struct KSPROPERTY_VIDEOENCODER_S
{
    KSIDENTIFIER Property;
    int Value;
    uint Flags;
    uint Capabilities;
}
enum CLSID_PROPSETID_VIDCAP_VIDEODECODER = GUID(0xc6e13350, 0x30ac, 0x11d0, [0xa1, 0x8c, 0x0, 0xa0, 0xc9, 0x11, 0x89, 0x56]);
struct PROPSETID_VIDCAP_VIDEODECODER
{
}
alias KSPROPERTY_VIDCAP_VIDEODECODER = int;
enum : int
{
    KSPROPERTY_VIDEODECODER_CAPS          = 0x00000000,
    KSPROPERTY_VIDEODECODER_STANDARD      = 0x00000001,
    KSPROPERTY_VIDEODECODER_STATUS        = 0x00000002,
    KSPROPERTY_VIDEODECODER_OUTPUT_ENABLE = 0x00000003,
    KSPROPERTY_VIDEODECODER_VCR_TIMING    = 0x00000004,
    KSPROPERTY_VIDEODECODER_STATUS2       = 0x00000005,
}

alias KS_VIDEODECODER_FLAGS = int;
enum : int
{
    KS_VIDEODECODER_FLAGS_CAN_DISABLE_OUTPUT  = 0x00000001,
    KS_VIDEODECODER_FLAGS_CAN_USE_VCR_LOCKING = 0x00000002,
    KS_VIDEODECODER_FLAGS_CAN_INDICATE_LOCKED = 0x00000004,
}

struct KSPROPERTY_VIDEODECODER_CAPS_S
{
    KSIDENTIFIER Property;
    uint StandardsSupported;
    uint Capabilities;
    uint SettlingTime;
    uint HSyncPerVSync;
}
struct KSPROPERTY_VIDEODECODER_STATUS_S
{
    KSIDENTIFIER Property;
    uint NumberOfLines;
    uint SignalLocked;
}
struct KSPROPERTY_VIDEODECODER_STATUS2_S
{
    KSIDENTIFIER Property;
    uint NumberOfLines;
    uint SignalLocked;
    uint ChromaLock;
}
struct KSPROPERTY_VIDEODECODER_S
{
    KSIDENTIFIER Property;
    uint Value;
}
enum CLSID_EVENTSETID_VIDEODECODER = GUID(0x6a2e0621, 0x28e4, 0x11d0, [0xa1, 0x8c, 0x0, 0xa0, 0xc9, 0x11, 0x89, 0x56]);
struct EVENTSETID_VIDEODECODER
{
}
alias KSEVENT_VIDEODECODER = int;
enum : int
{
    KSEVENT_VIDEODECODER_CHANGED = 0x00000000,
}

enum CLSID_KSEVENTSETID_CameraAsyncControl = GUID(0x22a11754, 0x9701, 0x4088, [0xb3, 0x3f, 0x6b, 0x9c, 0xbc, 0x52, 0xdf, 0x5e]);
struct KSEVENTSETID_CameraAsyncControl
{
}
alias KSEVENT_CAMERACONTROL = int;
enum : int
{
    KSEVENT_CAMERACONTROL_FOCUS = 0x00000000,
    KSEVENT_CAMERACONTROL_ZOOM  = 0x00000001,
}

enum CLSID_PROPSETID_VIDCAP_CAMERACONTROL = GUID(0xc6e13370, 0x30ac, 0x11d0, [0xa1, 0x8c, 0x0, 0xa0, 0xc9, 0x11, 0x89, 0x56]);
struct PROPSETID_VIDCAP_CAMERACONTROL
{
}
alias KSPROPERTY_VIDCAP_CAMERACONTROL = int;
enum : int
{
    KSPROPERTY_CAMERACONTROL_PAN                    = 0x00000000,
    KSPROPERTY_CAMERACONTROL_TILT                   = 0x00000001,
    KSPROPERTY_CAMERACONTROL_ROLL                   = 0x00000002,
    KSPROPERTY_CAMERACONTROL_ZOOM                   = 0x00000003,
    KSPROPERTY_CAMERACONTROL_EXPOSURE               = 0x00000004,
    KSPROPERTY_CAMERACONTROL_IRIS                   = 0x00000005,
    KSPROPERTY_CAMERACONTROL_FOCUS                  = 0x00000006,
    KSPROPERTY_CAMERACONTROL_SCANMODE               = 0x00000007,
    KSPROPERTY_CAMERACONTROL_PRIVACY                = 0x00000008,
    KSPROPERTY_CAMERACONTROL_PANTILT                = 0x00000009,
    KSPROPERTY_CAMERACONTROL_PAN_RELATIVE           = 0x0000000a,
    KSPROPERTY_CAMERACONTROL_TILT_RELATIVE          = 0x0000000b,
    KSPROPERTY_CAMERACONTROL_ROLL_RELATIVE          = 0x0000000c,
    KSPROPERTY_CAMERACONTROL_ZOOM_RELATIVE          = 0x0000000d,
    KSPROPERTY_CAMERACONTROL_EXPOSURE_RELATIVE      = 0x0000000e,
    KSPROPERTY_CAMERACONTROL_IRIS_RELATIVE          = 0x0000000f,
    KSPROPERTY_CAMERACONTROL_FOCUS_RELATIVE         = 0x00000010,
    KSPROPERTY_CAMERACONTROL_PANTILT_RELATIVE       = 0x00000011,
    KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH           = 0x00000012,
    KSPROPERTY_CAMERACONTROL_AUTO_EXPOSURE_PRIORITY = 0x00000013,
}

alias KS_CameraControlAsyncOperation = int;
enum : int
{
    KS_CAMERACONTROL_ASYNC_START = 0x00000001,
    KS_CAMERACONTROL_ASYNC_STOP  = 0x00000002,
    KS_CAMERACONTROL_ASYNC_RESET = 0x00000003,
}

struct KSPROPERTY_CAMERACONTROL_S_EX
{
    KSIDENTIFIER Property;
    int Value;
    uint Flags;
    uint Capabilities;
    RECT FocusRect;
}
struct KSPROPERTY_CAMERACONTROL_S
{
    KSIDENTIFIER Property;
    int Value;
    uint Flags;
    uint Capabilities;
}
struct KSPROPERTY_CAMERACONTROL_NODE_S
{
    KSP_NODE NodeProperty;
    int Value;
    uint Flags;
    uint Capabilities;
}
struct KSPROPERTY_CAMERACONTROL_S2
{
    KSIDENTIFIER Property;
    int Value1;
    uint Flags;
    uint Capabilities;
    int Value2;
}
struct KSPROPERTY_CAMERACONTROL_NODE_S2
{
    KSP_NODE NodeProperty;
    int Value1;
    uint Flags;
    uint Capabilities;
    int Value2;
}
struct KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S
{
    KSIDENTIFIER Property;
    int lOcularFocalLength;
    int lObjectiveFocalLengthMin;
    int lObjectiveFocalLengthMax;
}
struct KSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S
{
    KSNODEPROPERTY NodeProperty;
    int lOcularFocalLength;
    int lObjectiveFocalLengthMin;
    int lObjectiveFocalLengthMax;
}
enum CLSID_PROPSETID_VIDCAP_CAMERACONTROL_FLASH = GUID(0x785e8f49, 0x63a2, 0x4144, [0xab, 0x70, 0xff, 0xb2, 0x78, 0xfa, 0x26, 0xce]);
struct PROPSETID_VIDCAP_CAMERACONTROL_FLASH
{
}
alias KSPROPERTY_CAMERACONTROL_FLASH = int;
enum : int
{
    KSPROPERTY_CAMERACONTROL_FLASH_PROPERTY_ID = 0x00000000,
}

struct KSPROPERTY_CAMERACONTROL_FLASH_S
{
    uint Flash;
    uint Capabilities;
}
enum CLSID_PROPSETID_VIDCAP_CAMERACONTROL_VIDEO_STABILIZATION = GUID(0x43964bd3, 0x7716, 0x404e, [0x8b, 0xe1, 0xd2, 0x99, 0xb2, 0xe, 0x50, 0xfd]);
struct PROPSETID_VIDCAP_CAMERACONTROL_VIDEO_STABILIZATION
{
}
alias KSPROPERTY_CAMERACONTROL_VIDEO_STABILIZATION_MODE = int;
enum : int
{
    KSPROPERTY_CAMERACONTROL_VIDEO_STABILIZATION_MODE_PROPERTY_ID = 0x00000000,
}

struct KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S
{
    uint VideoStabilizationMode;
    uint Capabilities;
}
enum CLSID_PROPSETID_VIDCAP_CAMERACONTROL_REGION_OF_INTEREST = GUID(0x9d12d198, 0xf86c, 0x4fed, [0xb0, 0x23, 0x5d, 0x87, 0x65, 0x3d, 0xa7, 0x93]);
struct PROPSETID_VIDCAP_CAMERACONTROL_REGION_OF_INTEREST
{
}
alias KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST = int;
enum : int
{
    KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_PROPERTY_ID = 0x00000000,
}

enum CLSID_EVENTSETID_VIDCAP_CAMERACONTROL_REGION_OF_INTEREST = GUID(0x2fdffc5d, 0xc732, 0x4ba6, [0xb5, 0xdf, 0x6b, 0x4d, 0x7f, 0xc8, 0x8b, 0x8b]);
struct EVENTSETID_VIDCAP_CAMERACONTROL_REGION_OF_INTEREST
{
}
struct KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S
{
    RECT FocusRect;
    BOOL AutoFocusLock;
    BOOL AutoExposureLock;
    BOOL AutoWhitebalanceLock;
    union
    {
        uint Capabilities;
        uint Configuration;
    }
}
enum CLSID_PROPSETID_VIDCAP_CAMERACONTROL_IMAGE_PIN_CAPABILITY = GUID(0x9d3d7bbf, 0x5c6d, 0x4138, [0xbb, 0x0, 0x58, 0x4e, 0xdd, 0x20, 0xf7, 0xc5]);
struct PROPSETID_VIDCAP_CAMERACONTROL_IMAGE_PIN_CAPABILITY
{
}
alias KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY = int;
enum : int
{
    KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_PROPERTY_ID = 0x00000000,
}

struct KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S
{
    uint Capabilities;
    uint Reserved0;
}
alias KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY = int;
enum : int
{
    KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOMODE                 = 0x00000000,
    KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOFRAMERATE            = 0x00000001,
    KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOMAXFRAMERATE         = 0x00000002,
    KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOTRIGGERTIME          = 0x00000003,
    KSPROPERTY_CAMERACONTROL_EXTENDED_WARMSTART                 = 0x00000004,
    KSPROPERTY_CAMERACONTROL_EXTENDED_MAXVIDFPS_PHOTORES        = 0x00000005,
    KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOTHUMBNAIL            = 0x00000006,
    KSPROPERTY_CAMERACONTROL_EXTENDED_SCENEMODE                 = 0x00000007,
    KSPROPERTY_CAMERACONTROL_EXTENDED_TORCHMODE                 = 0x00000008,
    KSPROPERTY_CAMERACONTROL_EXTENDED_FLASHMODE                 = 0x00000009,
    KSPROPERTY_CAMERACONTROL_EXTENDED_OPTIMIZATIONHINT          = 0x0000000a,
    KSPROPERTY_CAMERACONTROL_EXTENDED_WHITEBALANCEMODE          = 0x0000000b,
    KSPROPERTY_CAMERACONTROL_EXTENDED_EXPOSUREMODE              = 0x0000000c,
    KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSMODE                 = 0x0000000d,
    KSPROPERTY_CAMERACONTROL_EXTENDED_ISO                       = 0x0000000e,
    KSPROPERTY_CAMERACONTROL_EXTENDED_FIELDOFVIEW               = 0x0000000f,
    KSPROPERTY_CAMERACONTROL_EXTENDED_EVCOMPENSATION            = 0x00000010,
    KSPROPERTY_CAMERACONTROL_EXTENDED_CAMERAANGLEOFFSET         = 0x00000011,
    KSPROPERTY_CAMERACONTROL_EXTENDED_METADATA                  = 0x00000012,
    KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSPRIORITY             = 0x00000013,
    KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSSTATE                = 0x00000014,
    KSPROPERTY_CAMERACONTROL_EXTENDED_ROI_CONFIGCAPS            = 0x00000015,
    KSPROPERTY_CAMERACONTROL_EXTENDED_ROI_ISPCONTROL            = 0x00000016,
    KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOCONFIRMATION         = 0x00000017,
    KSPROPERTY_CAMERACONTROL_EXTENDED_ZOOM                      = 0x00000018,
    KSPROPERTY_CAMERACONTROL_EXTENDED_MCC                       = 0x00000019,
    KSPROPERTY_CAMERACONTROL_EXTENDED_ISO_ADVANCED              = 0x0000001a,
    KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOSTABILIZATION        = 0x0000001b,
    KSPROPERTY_CAMERACONTROL_EXTENDED_VFR                       = 0x0000001c,
    KSPROPERTY_CAMERACONTROL_EXTENDED_FACEDETECTION             = 0x0000001d,
    KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOHDR                  = 0x0000001e,
    KSPROPERTY_CAMERACONTROL_EXTENDED_HISTOGRAM                 = 0x0000001f,
    KSPROPERTY_CAMERACONTROL_EXTENDED_OIS                       = 0x00000020,
    KSPROPERTY_CAMERACONTROL_EXTENDED_ADVANCEDPHOTO             = 0x00000021,
    KSPROPERTY_CAMERACONTROL_EXTENDED_PROFILE                   = 0x00000022,
    KSPROPERTY_CAMERACONTROL_EXTENDED_FACEAUTH_MODE             = 0x00000023,
    KSPROPERTY_CAMERACONTROL_EXTENDED_SECURE_MODE               = 0x00000024,
    KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOTEMPORALDENOISING    = 0x00000025,
    KSPROPERTY_CAMERACONTROL_EXTENDED_IRTORCHMODE               = 0x00000026,
    KSPROPERTY_CAMERACONTROL_EXTENDED_RELATIVEPANELOPTIMIZATION = 0x00000027,
    KSPROPERTY_CAMERACONTROL_EXTENDED_EYEGAZECORRECTION         = 0x00000028,
    KSPROPERTY_CAMERACONTROL_EXTENDED_BACKGROUNDSEGMENTATION    = 0x00000029,
    KSPROPERTY_CAMERACONTROL_EXTENDED_DIGITALWINDOW_CONFIGCAPS  = 0x0000002a,
    KSPROPERTY_CAMERACONTROL_EXTENDED_DIGITALWINDOW             = 0x0000002b,
    KSPROPERTY_CAMERACONTROL_EXTENDED_END                       = 0x0000002c,
    KSPROPERTY_CAMERACONTROL_EXTENDED_END2                      = 0x0000002c,
}

enum CLSID_KSPROPERTYSETID_ExtendedCameraControl = GUID(0x1cb79112, 0xc0d2, 0x4213, [0x9c, 0xa6, 0xcd, 0x4f, 0xdb, 0x92, 0x79, 0x72]);
struct KSPROPERTYSETID_ExtendedCameraControl
{
}
enum CLSID_KSEVENTSETID_ExtendedCameraControl = GUID(0x571c92c9, 0x13a2, 0x47e3, [0xa6, 0x49, 0xd2, 0xa7, 0x78, 0x16, 0x63, 0x84]);
struct KSEVENTSETID_ExtendedCameraControl
{
}
enum CLSID_KSEVENTSETID_CameraEvent = GUID(0x7899b2e0, 0x6b43, 0x4964, [0x9d, 0x2a, 0xa2, 0x1f, 0x40, 0x61, 0xf5, 0x76]);
struct KSEVENTSETID_CameraEvent
{
}
alias KSEVENT_CAMERAEVENT = int;
enum : int
{
    KSEVENT_PHOTO_SAMPLE_SCANNED = 0x00000000,
}

alias KSCAMERA_EXTENDEDPROP_WHITEBALANCE_MODE = int;
enum : int
{
    KSCAMERA_EXTENDEDPROP_WHITEBALANCE_TEMPERATURE = 0x00000001,
    KSCAMERA_EXTENDEDPROP_WHITEBALANCE_PRESET      = 0x00000002,
}

alias KSCAMERA_EXTENDEDPROP_WBPRESET = int;
enum : int
{
    KSCAMERA_EXTENDEDPROP_WBPRESET_CLOUDY      = 0x00000001,
    KSCAMERA_EXTENDEDPROP_WBPRESET_DAYLIGHT    = 0x00000002,
    KSCAMERA_EXTENDEDPROP_WBPRESET_FLASH       = 0x00000003,
    KSCAMERA_EXTENDEDPROP_WBPRESET_FLUORESCENT = 0x00000004,
    KSCAMERA_EXTENDEDPROP_WBPRESET_TUNGSTEN    = 0x00000005,
    KSCAMERA_EXTENDEDPROP_WBPRESET_CANDLELIGHT = 0x00000006,
}

alias KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_FLAGS = int;
enum : int
{
    KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_CLEAR = 0x00000000,
    KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_SET   = 0x00000001,
}

struct KSCAMERA_EXTENDEDPROP_HEADER
{
    uint Version;
    uint PinId;
    uint Size;
    uint Result;
    ulong Flags;
    ulong Capability;
}
// [UNSUPPORTED]
//alias KSCAMERA_EXTENDEDPROP_VALUE = _Value_e__Union;
alias KSCAMERA_EXTENDEDPROP_VALUE = ulong; // [DUMMY]
struct KSCAMERA_MAXVIDEOFPS_FORPHOTORES
{
    uint PhotoResWidth;
    uint PhotoResHeight;
    uint PreviewFPSNum;
    uint PreviewFPSDenom;
    uint CaptureFPSNum;
    uint CaptureFPSDenom;
}
struct KSCAMERA_EXTENDEDPROP_PHOTOMODE
{
    uint RequestedHistoryFrames;
    uint MaxHistoryFrames;
    uint SubMode;
    uint Reserved;
}
struct KSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING
{
    uint Mode;
    int Min;
    int Max;
    int Step;
    KSCAMERA_EXTENDEDPROP_VALUE VideoProc;
    ulong Reserved;
}
struct KSCAMERA_EXTENDEDPROP_EVCOMPENSATION
{
    uint Mode;
    int Min;
    int Max;
    int Value;
    ulong Reserved;
}
struct KSCAMERA_EXTENDEDPROP_FIELDOFVIEW
{
    uint NormalizedFocalLengthX;
    uint NormalizedFocalLengthY;
    uint Flag;
    uint Reserved;
}
struct KSCAMERA_EXTENDEDPROP_CAMERAOFFSET
{
    int PitchAngle;
    int YawAngle;
    uint Flag;
    uint Reserved;
}
struct KSCAMERA_EXTENDEDPROP_METADATAINFO
{
    int BufferAlignment;
    uint MaxMetadataBufferSize;
}
alias KSCAMERA_EXTENDEDPROP_MetadataAlignment = int;
enum : int
{
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_16   = 0x00000004,
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_32   = 0x00000005,
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_64   = 0x00000006,
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_128  = 0x00000007,
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_256  = 0x00000008,
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_512  = 0x00000009,
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_1024 = 0x0000000a,
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_2048 = 0x0000000b,
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_4096 = 0x0000000c,
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_8192 = 0x0000000d,
}

alias KSCAMERA_MetadataId = int;
enum : int
{
    MetadataId_Standard_Start             = 0x00000001,
    MetadataId_PhotoConfirmation          = 0x00000001,
    MetadataId_UsbVideoHeader             = 0x00000002,
    MetadataId_CaptureStats               = 0x00000003,
    MetadataId_CameraExtrinsics           = 0x00000004,
    MetadataId_CameraIntrinsics           = 0x00000005,
    MetadataId_FrameIllumination          = 0x00000006,
    MetadataId_DigitalWindow              = 0x00000007,
    MetadataId_BackgroundSegmentationMask = 0x00000008,
    MetadataId_Standard_End               = 0x00000008,
    MetadataId_Custom_Start               = 0x80000000,
}

struct KSCAMERA_METADATA_ITEMHEADER
{
    uint MetadataId;
    uint Size;
}
struct KSCAMERA_METADATA_PHOTOCONFIRMATION
{
    KSCAMERA_METADATA_ITEMHEADER Header;
    uint PhotoConfirmationIndex;
    uint Reserved;
}
struct KSCAMERA_METADATA_FRAMEILLUMINATION
{
    KSCAMERA_METADATA_ITEMHEADER Header;
    uint Flags;
    uint Reserved;
}
struct KSCAMERA_METADATA_CAPTURESTATS
{
    KSCAMERA_METADATA_ITEMHEADER Header;
    uint Flags;
    uint Reserved;
    ulong ExposureTime;
    ulong ExposureCompensationFlags;
    int ExposureCompensationValue;
    uint IsoSpeed;
    uint FocusState;
    uint LensPosition;
    uint WhiteBalance;
    uint Flash;
    uint FlashPower;
    uint ZoomFactor;
    ulong SceneMode;
    ulong SensorFramerate;
}
alias KSCAMERA_EXTENDEDPROP_FOCUSSTATE = int;
enum : int
{
    KSCAMERA_EXTENDEDPROP_FOCUSSTATE_UNINITIALIZED = 0x00000000,
    KSCAMERA_EXTENDEDPROP_FOCUSSTATE_LOST          = 0x00000001,
    KSCAMERA_EXTENDEDPROP_FOCUSSTATE_SEARCHING     = 0x00000002,
    KSCAMERA_EXTENDEDPROP_FOCUSSTATE_FOCUSED       = 0x00000003,
    KSCAMERA_EXTENDEDPROP_FOCUSSTATE_FAILED        = 0x00000004,
}

struct KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER
{
    uint Size;
    uint ConfigCapCount;
    ulong Reserved;
}
struct KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS
{
    uint ControlId;
    uint MaxNumberOfROIs;
    ulong Capability;
}
struct KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER
{
    uint Size;
    uint ControlCount;
    ulong Reserved;
}
struct KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL
{
    uint ControlId;
    uint ROICount;
    uint Result;
    uint Reserved;
}
struct KSCAMERA_EXTENDEDPROP_ROI_INFO
{
    RECT Region;
    ulong Flags;
    int Weight;
    int RegionOfInterestType;
}
alias KSCAMERA_EXTENDEDPROP_ROITYPE = int;
enum : int
{
    KSCAMERA_EXTENDEDPROP_ROITYPE_UNKNOWN = 0x00000000,
    KSCAMERA_EXTENDEDPROP_ROITYPE_FACE    = 0x00000001,
}

struct KSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE
{
    KSCAMERA_EXTENDEDPROP_ROI_INFO ROIInfo;
    ulong Reserved;
}
struct KSCAMERA_EXTENDEDPROP_ROI_EXPOSURE
{
    KSCAMERA_EXTENDEDPROP_ROI_INFO ROIInfo;
    ulong Reserved;
}
struct KSCAMERA_EXTENDEDPROP_ROI_FOCUS
{
    KSCAMERA_EXTENDEDPROP_ROI_INFO ROIInfo;
    ulong Reserved;
}
enum CLSID_KSPROPERTYSETID_PerFrameSettingControl = GUID(0xf1f3e261, 0xdee6, 0x4537, [0xbf, 0xf5, 0xee, 0x20, 0x6d, 0xb5, 0x4a, 0xac]);
struct KSPROPERTYSETID_PerFrameSettingControl
{
}
alias KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_PROPERTY = int;
enum : int
{
    KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_CAPABILITY = 0x00000000,
    KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_SET        = 0x00000001,
    KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_CLEAR      = 0x00000002,
}

alias KSCAMERA_PERFRAMESETTING_ITEM_TYPE = int;
enum : int
{
    KSCAMERA_PERFRAMESETTING_ITEM_EXPOSURE_TIME         = 0x00000001,
    KSCAMERA_PERFRAMESETTING_ITEM_FLASH                 = 0x00000002,
    KSCAMERA_PERFRAMESETTING_ITEM_EXPOSURE_COMPENSATION = 0x00000003,
    KSCAMERA_PERFRAMESETTING_ITEM_ISO                   = 0x00000004,
    KSCAMERA_PERFRAMESETTING_ITEM_FOCUS                 = 0x00000005,
    KSCAMERA_PERFRAMESETTING_ITEM_PHOTOCONFIRMATION     = 0x00000006,
    KSCAMERA_PERFRAMESETTING_ITEM_CUSTOM                = 0x00000007,
}

struct KSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER
{
    uint Size;
    uint Type;
    ulong Flags;
}
struct KSCAMERA_PERFRAMESETTING_CAP_HEADER
{
    uint Size;
    uint ItemCount;
    ulong Flags;
}
struct KSCAMERA_PERFRAMESETTING_CUSTOM_ITEM
{
    uint Size;
    uint Reserved;
    GUID Id;
}
struct KSCAMERA_PERFRAMESETTING_ITEM_HEADER
{
    uint Size;
    uint Type;
    ulong Flags;
}
struct KSCAMERA_PERFRAMESETTING_FRAME_HEADER
{
    uint Size;
    uint Id;
    uint ItemCount;
    uint Reserved;
}
struct KSCAMERA_PERFRAMESETTING_HEADER
{
    uint Size;
    uint FrameCount;
    GUID Id;
    ulong Flags;
    uint LoopCount;
    uint Reserved;
}
struct KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_SETTING
{
    int OriginX;
    int OriginY;
    int WindowSize;
    uint Reserved;
}
struct KSCAMERA_METADATA_DIGITALWINDOW
{
    KSCAMERA_METADATA_ITEMHEADER Header;
    KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_SETTING Window;
}
struct KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPSHEADER
{
    uint Size;
    uint Count;
}
struct KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_CONFIGCAPS
{
    int ResolutionX;
    int ResolutionY;
    int PorchTop;
    int PorchLeft;
    int PorchBottom;
    int PorchRight;
    int NonUpscalingWindowSize;
    int MinWindowSize;
    int MaxWindowSize;
    int Reserved;
}
struct KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_CONFIGCAPS
{
    SIZE Resolution;
    struct _MaxFrameRate_e__Struct
    {
        int Numerator;
        int Denominator;
    }
    SIZE MaskResolution;
    GUID SubType;
}
struct KSCAMERA_METADATA_BACKGROUNDSEGMENTATIONMASK
{
    KSCAMERA_METADATA_ITEMHEADER Header;
    RECT MaskCoverageBoundingBox;
    SIZE MaskResolution;
    RECT ForegroundBoundingBox;
    ubyte[1] MaskData;
}
struct KSCAMERA_EXTENDEDPROP_PROFILE
{
    GUID ProfileId;
    uint Index;
    uint Reserved;
}
enum CLSID_KSCAMERAPROFILE_Legacy = GUID(0xb4894d81, 0x62b7, 0x4eec, [0x87, 0x40, 0x80, 0x65, 0x8c, 0x4a, 0x9d, 0x3e]);
struct KSCAMERAPROFILE_Legacy
{
}
enum CLSID_KSCAMERAPROFILE_VideoRecording = GUID(0xa0e517e8, 0x8f8c, 0x4f6f, [0x9a, 0x57, 0x46, 0xfc, 0x2f, 0x64, 0x7e, 0xc0]);
struct KSCAMERAPROFILE_VideoRecording
{
}
enum CLSID_KSCAMERAPROFILE_HighQualityPhoto = GUID(0x32440725, 0x961b, 0x4ca3, [0xb5, 0xb2, 0x85, 0x4e, 0x71, 0x9d, 0x9e, 0x1b]);
struct KSCAMERAPROFILE_HighQualityPhoto
{
}
enum CLSID_KSCAMERAPROFILE_BalancedVideoAndPhoto = GUID(0x6b52b017, 0x42c7, 0x4a21, [0xbf, 0xe3, 0x23, 0xf0, 0x9, 0x14, 0x98, 0x87]);
struct KSCAMERAPROFILE_BalancedVideoAndPhoto
{
}
enum CLSID_KSCAMERAPROFILE_VideoConferencing = GUID(0xc5444a88, 0xe1bf, 0x4597, [0xb2, 0xdd, 0x9e, 0x1e, 0xad, 0x86, 0x4b, 0xb8]);
struct KSCAMERAPROFILE_VideoConferencing
{
}
enum CLSID_KSCAMERAPROFILE_PhotoSequence = GUID(0x2399d9d, 0x4ee8, 0x49ba, [0xbc, 0x7, 0x5f, 0xf1, 0x56, 0x53, 0x14, 0x13]);
struct KSCAMERAPROFILE_PhotoSequence
{
}
enum CLSID_KSCAMERAPROFILE_FaceAuth_Mode = GUID(0x81361b22, 0x700b, 0x4546, [0xa2, 0xd4, 0xc5, 0x2e, 0x90, 0x7b, 0xfc, 0x27]);
struct KSCAMERAPROFILE_FaceAuth_Mode
{
}
enum CLSID_KSCAMERAPROFILE_HighFrameRate = GUID(0x566e6113, 0x8c35, 0x48e7, [0xb8, 0x9f, 0xd2, 0x3f, 0xdc, 0x12, 0x19, 0xdc]);
struct KSCAMERAPROFILE_HighFrameRate
{
}
enum CLSID_KSCAMERAPROFILE_HDRWithWCGVideo = GUID(0x4b27c336, 0x4924, 0x4989, [0xb9, 0x94, 0xfd, 0xaf, 0x1d, 0xc7, 0xcd, 0x85]);
struct KSCAMERAPROFILE_HDRWithWCGVideo
{
}
enum CLSID_KSCAMERAPROFILE_HDRWithWCGPhoto = GUID(0x9bf6f1ff, 0xb555, 0x4625, [0xb3, 0x26, 0xa4, 0x6d, 0xef, 0x31, 0x8f, 0xb7]);
struct KSCAMERAPROFILE_HDRWithWCGPhoto
{
}
enum CLSID_KSCAMERAPROFILE_VariablePhotoSequence = GUID(0x9ff2cb56, 0xe75a, 0x49b1, [0xa9, 0x28, 0x99, 0x85, 0xd5, 0x94, 0x6f, 0x87]);
struct KSCAMERAPROFILE_VariablePhotoSequence
{
}
enum CLSID_KSCAMERAPROFILE_VideoHDR8 = GUID(0xd4f3f4ec, 0xbdff, 0x4314, [0xb1, 0xd4, 0x0, 0x8e, 0x28, 0x1f, 0x74, 0xe7]);
struct KSCAMERAPROFILE_VideoHDR8
{
}
enum CLSID_KSCAMERAPROFILE_CompressedCamera = GUID(0xe34cdc1, 0x27ad, 0x437f, [0xab, 0xde, 0x2, 0xb6, 0x29, 0xf3, 0x7b, 0x44]);
struct KSCAMERAPROFILE_CompressedCamera
{
}
struct KSCAMERA_PROFILE_MEDIAINFO
{
    struct _Resolution_e__Struct
    {
        uint X;
        uint Y;
    }
    struct _MaxFrameRate_e__Struct
    {
        uint Numerator;
        uint Denominator;
    }
    ulong Flags;
    uint Data0;
    uint Data1;
    uint Data2;
    uint Data3;
}
struct KSCAMERA_PROFILE_PININFO
{
    GUID PinCategory;
    union
    {
        struct
        {
            ushort PinIndex;
            ushort ProfileSensorType;
        }
        uint Reserved;
    }
    uint MediaInfoCount;
    KSCAMERA_PROFILE_MEDIAINFO* MediaInfos;
}
struct KSCAMERA_PROFILE_INFO
{
    GUID ProfileId;
    uint Index;
    uint PinCount;
    KSCAMERA_PROFILE_PININFO* Pins;
}
struct KSCAMERA_PROFILE_CONCURRENCYINFO
{
    GUID ReferenceGuid;
    uint Reserved;
    uint ProfileCount;
    KSCAMERA_PROFILE_INFO* Profiles;
}
struct KSDEVICE_PROFILE_INFO
{
    uint Type;
    uint Size;
    union
    {
        struct _Camera_e__Struct
        {
            KSCAMERA_PROFILE_INFO Info;
            uint Reserved;
            uint ConcurrencyCount;
            KSCAMERA_PROFILE_CONCURRENCYINFO* Concurrency;
        }
    }
}
struct WNF_KSCAMERA_STREAMSTATE_INFO
{
    uint ProcessId;
    uint SessionId;
    uint StreamState;
    uint Reserved;
}
alias KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE = int;
enum : int
{
    KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE_DISABLE = 0x00000000,
    KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE_HOSTNTP = 0x00000001,
    KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE_CUSTOM  = 0x00000002,
}

struct KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_HEADER
{
    uint Size;
    KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE Type;
}
enum CLSID_KSPROPERTYSETID_NetworkCameraControl = GUID(0xe780f09, 0x5745, 0x4e3a, [0xbc, 0x9f, 0xf2, 0x26, 0xea, 0x43, 0xa6, 0xec]);
struct KSPROPERTYSETID_NetworkCameraControl
{
}
alias KSPROPERTY_NETWORKCAMERACONTROL_PROPERTY = int;
enum : int
{
    KSPROPERTY_NETWORKCAMERACONTROL_NTP             = 0x00000000,
    KSPROPERTY_NETWORKCAMERACONTROL_URI             = 0x00000001,
    KSPROPERTY_NETWORKCAMERACONTROL_METADATA        = 0x00000002,
    KSPROPERTY_NETWORKCAMERACONTROL_EVENTTOPICS_XML = 0x00000003,
}

alias KSPROPERTY_NETWORKCAMERACONTROL_METADATA_TYPE = int;
enum : int
{
    KSPROPERTY_NETWORKCAMERACONTROL_METADATA_TYPE_EVENTSINFO = 0x00000000,
}

struct KSPROPERTY_NETWORKCAMERACONTROL_METADATA_INFO
{
    uint MetadataItems;
    uint Size;
    BOOL PTZStatus;
    BOOL Events;
    BOOL Analytics;
    BOOL Reserved;
}
struct KSPROPERTY_NETWORKCAMERACONTROL_EVENT_INFO
{
    KSCAMERA_METADATA_ITEMHEADER Header;
    wchar[1] EventFilter;
}
enum CLSID_PROPSETID_EXT_DEVICE = GUID(0xb5730a90, 0x1a2c, 0x11cf, [0x8c, 0x23, 0x0, 0xaa, 0x0, 0x6b, 0x68, 0x14]);
struct PROPSETID_EXT_DEVICE
{
}
alias KSPROPERTY_EXTDEVICE = int;
enum : int
{
    KSPROPERTY_EXTDEVICE_ID           = 0x00000000,
    KSPROPERTY_EXTDEVICE_VERSION      = 0x00000001,
    KSPROPERTY_EXTDEVICE_POWER_STATE  = 0x00000002,
    KSPROPERTY_EXTDEVICE_PORT         = 0x00000003,
    KSPROPERTY_EXTDEVICE_CAPABILITIES = 0x00000004,
}

struct DEVCAPS
{
    int CanRecord;
    int CanRecordStrobe;
    int HasAudio;
    int HasVideo;
    int UsesFiles;
    int CanSave;
    int DeviceType;
    int TCRead;
    int TCWrite;
    int CTLRead;
    int IndexRead;
    int Preroll;
    int Postroll;
    int SyncAcc;
    int NormRate;
    int CanPreview;
    int CanMonitorSrc;
    int CanTest;
    int VideoIn;
    int AudioIn;
    int Calibrate;
    int SeekType;
    int SimulatedHardware;
}
struct KSPROPERTY_EXTDEVICE_S
{
    KSIDENTIFIER Property;
    union _u_e__Union
    {
        DEVCAPS Capabilities;
        uint DevPort;
        uint PowerState;
        wchar[260] pawchString;
        uint[2] NodeUniqueID;
    }
}
enum CLSID_PROPSETID_EXT_TRANSPORT = GUID(0xa03cd5f0, 0x3045, 0x11cf, [0x8c, 0x44, 0x0, 0xaa, 0x0, 0x6b, 0x68, 0x14]);
struct PROPSETID_EXT_TRANSPORT
{
}
alias KSPROPERTY_EXTXPORT = int;
enum : int
{
    KSPROPERTY_EXTXPORT_CAPABILITIES       = 0x00000000,
    KSPROPERTY_EXTXPORT_INPUT_SIGNAL_MODE  = 0x00000001,
    KSPROPERTY_EXTXPORT_OUTPUT_SIGNAL_MODE = 0x00000002,
    KSPROPERTY_EXTXPORT_LOAD_MEDIUM        = 0x00000003,
    KSPROPERTY_EXTXPORT_MEDIUM_INFO        = 0x00000004,
    KSPROPERTY_EXTXPORT_STATE              = 0x00000005,
    KSPROPERTY_EXTXPORT_STATE_NOTIFY       = 0x00000006,
    KSPROPERTY_EXTXPORT_TIMECODE_SEARCH    = 0x00000007,
    KSPROPERTY_EXTXPORT_ATN_SEARCH         = 0x00000008,
    KSPROPERTY_EXTXPORT_RTC_SEARCH         = 0x00000009,
    KSPROPERTY_RAW_AVC_CMD                 = 0x0000000a,
}

struct TRANSPORTSTATUS
{
    int Mode;
    int LastError;
    int RecordInhibit;
    int ServoLock;
    int MediaPresent;
    int MediaLength;
    int MediaSize;
    int MediaTrackCount;
    int MediaTrackLength;
    int MediaTrackSide;
    int MediaType;
    int LinkMode;
    int NotifyOn;
}
struct TRANSPORTBASICPARMS
{
    int TimeFormat;
    int TimeReference;
    int Superimpose;
    int EndStopAction;
    int RecordFormat;
    int StepFrames;
    int SetpField;
    int Preroll;
    int RecPreroll;
    int Postroll;
    int EditDelay;
    int PlayTCDelay;
    int RecTCDelay;
    int EditField;
    int FrameServo;
    int ColorFrameServo;
    int ServoRef;
    int WarnGenlock;
    int SetTracking;
    byte[40] VolumeName;
    int[20] Ballistic;
    int Speed;
    int CounterFormat;
    int TunerChannel;
    int TunerNumber;
    int TimerEvent;
    int TimerStartDay;
    int TimerStartTime;
    int TimerStopDay;
    int TimerStopTime;
}
struct TRANSPORTVIDEOPARMS
{
    int OutputMode;
    int Input;
}
struct TRANSPORTAUDIOPARMS
{
    int EnableOutput;
    int EnableRecord;
    int EnableSelsync;
    int Input;
    int MonitorSource;
}
struct MEDIUM_INFO
{
    BOOL MediaPresent;
    uint MediaType;
    BOOL RecordInhibit;
}
struct TRANSPORT_STATE
{
    uint Mode;
    uint State;
}
struct KSPROPERTY_EXTXPORT_S
{
    KSIDENTIFIER Property;
    union _u_e__Union
    {
        uint Capabilities;
        uint SignalMode;
        uint LoadMedium;
        MEDIUM_INFO MediumInfo;
        TRANSPORT_STATE XPrtState;
        struct _Timecode_e__Struct
        {
            ubyte frame;
            ubyte second;
            ubyte minute;
            ubyte hour;
        }
        uint dwTimecode;
        uint dwAbsTrackNumber;
        struct _RawAVC_e__Struct
        {
            uint PayloadSize;
            ubyte[512] Payload;
        }
    }
}
struct KSPROPERTY_EXTXPORT_NODE_S
{
    KSP_NODE NodeProperty;
    union _u_e__Union
    {
        uint Capabilities;
        uint SignalMode;
        uint LoadMedium;
        MEDIUM_INFO MediumInfo;
        TRANSPORT_STATE XPrtState;
        struct _Timecode_e__Struct
        {
            ubyte frame;
            ubyte second;
            ubyte minute;
            ubyte hour;
        }
        uint dwTimecode;
        uint dwAbsTrackNumber;
        struct _RawAVC_e__Struct
        {
            uint PayloadSize;
            ubyte[512] Payload;
        }
    }
}
enum CLSID_PROPSETID_TIMECODE_READER = GUID(0x9b496ce1, 0x811b, 0x11cf, [0x8c, 0x77, 0x0, 0xaa, 0x0, 0x6b, 0x68, 0x14]);
struct PROPSETID_TIMECODE_READER
{
}
alias KSPROPERTY_TIMECODE = int;
enum : int
{
    KSPROPERTY_TIMECODE_READER = 0x00000000,
    KSPROPERTY_ATN_READER      = 0x00000001,
    KSPROPERTY_RTC_READER      = 0x00000002,
}

struct KSPROPERTY_TIMECODE_S
{
    KSIDENTIFIER Property;
    TIMECODE_SAMPLE TimecodeSamp;
}
struct KSPROPERTY_TIMECODE_NODE_S
{
    KSP_NODE NodeProperty;
    TIMECODE_SAMPLE TimecodeSamp;
}
enum CLSID_KSEVENTSETID_EXTDEV_Command = GUID(0x109c7988, 0xb3cb, 0x11d2, [0xb4, 0x8e, 0x0, 0x60, 0x97, 0xb3, 0x39, 0x1b]);
struct KSEVENTSETID_EXTDEV_Command
{
}
alias KSEVENT_DEVCMD = int;
enum : int
{
    KSEVENT_EXTDEV_COMMAND_NOTIFY_INTERIM_READY  = 0x00000000,
    KSEVENT_EXTDEV_COMMAND_CONTROL_INTERIM_READY = 0x00000001,
    KSEVENT_EXTDEV_COMMAND_BUSRESET              = 0x00000002,
    KSEVENT_EXTDEV_TIMECODE_UPDATE               = 0x00000003,
    KSEVENT_EXTDEV_OPERATION_MODE_UPDATE         = 0x00000004,
    KSEVENT_EXTDEV_TRANSPORT_STATE_UPDATE        = 0x00000005,
    KSEVENT_EXTDEV_NOTIFY_REMOVAL                = 0x00000006,
    KSEVENT_EXTDEV_NOTIFY_MEDIUM_CHANGE          = 0x00000007,
}

enum CLSID_PROPSETID_VIDCAP_CROSSBAR = GUID(0x6a2e0640, 0x28e4, 0x11d0, [0xa1, 0x8c, 0x0, 0xa0, 0xc9, 0x11, 0x89, 0x56]);
struct PROPSETID_VIDCAP_CROSSBAR
{
}
alias KSPROPERTY_VIDCAP_CROSSBAR = int;
enum : int
{
    KSPROPERTY_CROSSBAR_CAPS         = 0x00000000,
    KSPROPERTY_CROSSBAR_PININFO      = 0x00000001,
    KSPROPERTY_CROSSBAR_CAN_ROUTE    = 0x00000002,
    KSPROPERTY_CROSSBAR_ROUTE        = 0x00000003,
    KSPROPERTY_CROSSBAR_INPUT_ACTIVE = 0x00000004,
}

struct KSPROPERTY_CROSSBAR_CAPS_S
{
    KSIDENTIFIER Property;
    uint NumberOfInputs;
    uint NumberOfOutputs;
}
struct KSPROPERTY_CROSSBAR_PININFO_S
{
    KSIDENTIFIER Property;
    KSPIN_DATAFLOW Direction;
    uint Index;
    uint PinType;
    uint RelatedPinIndex;
    KSIDENTIFIER Medium;
}
struct KSPROPERTY_CROSSBAR_ROUTE_S
{
    KSIDENTIFIER Property;
    uint IndexInputPin;
    uint IndexOutputPin;
    uint CanRoute;
}
struct KSPROPERTY_CROSSBAR_ACTIVE_S
{
    KSIDENTIFIER Property;
    uint IndexInputPin;
    uint Active;
}
enum CLSID_EVENTSETID_CROSSBAR = GUID(0x6a2e0641, 0x28e4, 0x11d0, [0xa1, 0x8c, 0x0, 0xa0, 0xc9, 0x11, 0x89, 0x56]);
struct EVENTSETID_CROSSBAR
{
}
alias KSEVENT_CROSSBAR = int;
enum : int
{
    KSEVENT_CROSSBAR_CHANGED = 0x00000000,
}

alias KS_PhysicalConnectorType = int;
enum : int
{
    KS_PhysConn_Video_Tuner           = 0x00000001,
    KS_PhysConn_Video_Composite       = 0x00000002,
    KS_PhysConn_Video_SVideo          = 0x00000003,
    KS_PhysConn_Video_RGB             = 0x00000004,
    KS_PhysConn_Video_YRYBY           = 0x00000005,
    KS_PhysConn_Video_SerialDigital   = 0x00000006,
    KS_PhysConn_Video_ParallelDigital = 0x00000007,
    KS_PhysConn_Video_SCSI            = 0x00000008,
    KS_PhysConn_Video_AUX             = 0x00000009,
    KS_PhysConn_Video_1394            = 0x0000000a,
    KS_PhysConn_Video_USB             = 0x0000000b,
    KS_PhysConn_Video_VideoDecoder    = 0x0000000c,
    KS_PhysConn_Video_VideoEncoder    = 0x0000000d,
    KS_PhysConn_Video_SCART           = 0x0000000e,
    KS_PhysConn_Audio_Tuner           = 0x00001000,
    KS_PhysConn_Audio_Line            = 0x00001001,
    KS_PhysConn_Audio_Mic             = 0x00001002,
    KS_PhysConn_Audio_AESDigital      = 0x00001003,
    KS_PhysConn_Audio_SPDIFDigital    = 0x00001004,
    KS_PhysConn_Audio_SCSI            = 0x00001005,
    KS_PhysConn_Audio_AUX             = 0x00001006,
    KS_PhysConn_Audio_1394            = 0x00001007,
    KS_PhysConn_Audio_USB             = 0x00001008,
    KS_PhysConn_Audio_AudioDecoder    = 0x00001009,
}

enum CLSID_PROPSETID_VIDCAP_TVAUDIO = GUID(0x6a2e0650, 0x28e4, 0x11d0, [0xa1, 0x8c, 0x0, 0xa0, 0xc9, 0x11, 0x89, 0x56]);
struct PROPSETID_VIDCAP_TVAUDIO
{
}
alias KSPROPERTY_VIDCAP_TVAUDIO = int;
enum : int
{
    KSPROPERTY_TVAUDIO_CAPS                      = 0x00000000,
    KSPROPERTY_TVAUDIO_MODE                      = 0x00000001,
    KSPROPERTY_TVAUDIO_CURRENTLY_AVAILABLE_MODES = 0x00000002,
}

struct KSPROPERTY_TVAUDIO_CAPS_S
{
    KSIDENTIFIER Property;
    uint Capabilities;
    KSIDENTIFIER InputMedium;
    KSIDENTIFIER OutputMedium;
}
struct KSPROPERTY_TVAUDIO_S
{
    KSIDENTIFIER Property;
    uint Mode;
}
enum CLSID_KSEVENTSETID_VIDCAP_TVAUDIO = GUID(0x6a2e0651, 0x28e4, 0x11d0, [0xa1, 0x8c, 0x0, 0xa0, 0xc9, 0x11, 0x89, 0x56]);
struct KSEVENTSETID_VIDCAP_TVAUDIO
{
}
alias KSEVENT_TVAUDIO = int;
enum : int
{
    KSEVENT_TVAUDIO_CHANGED = 0x00000000,
}

enum CLSID_PROPSETID_VIDCAP_VIDEOCOMPRESSION = GUID(0xc6e13343, 0x30ac, 0x11d0, [0xa1, 0x8c, 0x0, 0xa0, 0xc9, 0x11, 0x89, 0x56]);
struct PROPSETID_VIDCAP_VIDEOCOMPRESSION
{
}
alias KSPROPERTY_VIDCAP_VIDEOCOMPRESSION = int;
enum : int
{
    KSPROPERTY_VIDEOCOMPRESSION_GETINFO              = 0x00000000,
    KSPROPERTY_VIDEOCOMPRESSION_KEYFRAME_RATE        = 0x00000001,
    KSPROPERTY_VIDEOCOMPRESSION_PFRAMES_PER_KEYFRAME = 0x00000002,
    KSPROPERTY_VIDEOCOMPRESSION_QUALITY              = 0x00000003,
    KSPROPERTY_VIDEOCOMPRESSION_OVERRIDE_KEYFRAME    = 0x00000004,
    KSPROPERTY_VIDEOCOMPRESSION_OVERRIDE_FRAME_SIZE  = 0x00000005,
    KSPROPERTY_VIDEOCOMPRESSION_WINDOWSIZE           = 0x00000006,
}

alias KS_CompressionCaps = int;
enum : int
{
    KS_CompressionCaps_CanQuality  = 0x00000001,
    KS_CompressionCaps_CanCrunch   = 0x00000002,
    KS_CompressionCaps_CanKeyFrame = 0x00000004,
    KS_CompressionCaps_CanBFrame   = 0x00000008,
    KS_CompressionCaps_CanWindow   = 0x00000010,
}

alias KS_VideoStreamingHints = int;
enum : int
{
    KS_StreamingHint_FrameInterval  = 0x00000100,
    KS_StreamingHint_KeyFrameRate   = 0x00000200,
    KS_StreamingHint_PFrameRate     = 0x00000400,
    KS_StreamingHint_CompQuality    = 0x00000800,
    KS_StreamingHint_CompWindowSize = 0x00001000,
}

struct KSPROPERTY_VIDEOCOMPRESSION_GETINFO_S
{
    KSIDENTIFIER Property;
    uint StreamIndex;
    int DefaultKeyFrameRate;
    int DefaultPFrameRate;
    int DefaultQuality;
    int NumberOfQualitySettings;
    int Capabilities;
}
struct KSPROPERTY_VIDEOCOMPRESSION_S
{
    KSIDENTIFIER Property;
    uint StreamIndex;
    int Value;
}
struct KSPROPERTY_VIDEOCOMPRESSION_S1
{
    KSIDENTIFIER Property;
    uint StreamIndex;
    int Value;
    uint Flags;
}
enum CLSID_KSDATAFORMAT_SUBTYPE_OVERLAY = GUID(0xe436eb7f, 0x524f, 0x11ce, [0x9f, 0x53, 0x0, 0x20, 0xaf, 0xb, 0xa7, 0x70]);
struct KSDATAFORMAT_SUBTYPE_OVERLAY
{
}
enum CLSID_KSPROPSETID_OverlayUpdate = GUID(0x490ea5cf, 0x7681, 0x11d1, [0xa2, 0x1c, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct KSPROPSETID_OverlayUpdate
{
}
alias KSPROPERTY_OVERLAYUPDATE = int;
enum : int
{
    KSPROPERTY_OVERLAYUPDATE_INTERESTS     = 0x00000000,
    KSPROPERTY_OVERLAYUPDATE_CLIPLIST      = 0x00000001,
    KSPROPERTY_OVERLAYUPDATE_PALETTE       = 0x00000002,
    KSPROPERTY_OVERLAYUPDATE_COLORKEY      = 0x00000004,
    KSPROPERTY_OVERLAYUPDATE_VIDEOPOSITION = 0x00000008,
    KSPROPERTY_OVERLAYUPDATE_DISPLAYCHANGE = 0x00000010,
    KSPROPERTY_OVERLAYUPDATE_COLORREF      = 0x10000000,
}

struct KSDISPLAYCHANGE
{
    uint PelsWidth;
    uint PelsHeight;
    uint BitsPerPel;
    wchar[1] DeviceID;
}
enum CLSID_PROPSETID_VIDCAP_VIDEOCONTROL = GUID(0x6a2e0670, 0x28e4, 0x11d0, [0xa1, 0x8c, 0x0, 0xa0, 0xc9, 0x11, 0x89, 0x56]);
struct PROPSETID_VIDCAP_VIDEOCONTROL
{
}
alias KSPROPERTY_VIDCAP_VIDEOCONTROL = int;
enum : int
{
    KSPROPERTY_VIDEOCONTROL_CAPS              = 0x00000000,
    KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE = 0x00000001,
    KSPROPERTY_VIDEOCONTROL_FRAME_RATES       = 0x00000002,
    KSPROPERTY_VIDEOCONTROL_MODE              = 0x00000003,
}

alias KS_VideoControlFlags = int;
enum : int
{
    KS_VideoControlFlag_FlipHorizontal                 = 0x00000001,
    KS_VideoControlFlag_FlipVertical                   = 0x00000002,
    KS_Obsolete_VideoControlFlag_ExternalTriggerEnable = 0x00000010,
    KS_Obsolete_VideoControlFlag_Trigger               = 0x00000020,
    KS_VideoControlFlag_ExternalTriggerEnable          = 0x00000004,
    KS_VideoControlFlag_Trigger                        = 0x00000008,
    KS_VideoControlFlag_IndependentImagePin            = 0x00000040,
    KS_VideoControlFlag_StillCapturePreviewFrame       = 0x00000080,
    KS_VideoControlFlag_StartPhotoSequenceCapture      = 0x00000100,
    KS_VideoControlFlag_StopPhotoSequenceCapture       = 0x00000200,
}

struct KSPROPERTY_VIDEOCONTROL_CAPS_S
{
    KSIDENTIFIER Property;
    uint StreamIndex;
    uint VideoControlCaps;
}
struct KSPROPERTY_VIDEOCONTROL_MODE_S
{
    KSIDENTIFIER Property;
    uint StreamIndex;
    int Mode;
}
struct KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S
{
    KSIDENTIFIER Property;
    uint StreamIndex;
    uint RangeIndex;
    SIZE Dimensions;
    long CurrentActualFrameRate;
    long CurrentMaxAvailableFrameRate;
}
struct KSPROPERTY_VIDEOCONTROL_FRAME_RATES_S
{
    KSIDENTIFIER Property;
    uint StreamIndex;
    uint RangeIndex;
    SIZE Dimensions;
}
enum CLSID_PROPSETID_VIDCAP_DROPPEDFRAMES = GUID(0xc6e13344, 0x30ac, 0x11d0, [0xa1, 0x8c, 0x0, 0xa0, 0xc9, 0x11, 0x89, 0x56]);
struct PROPSETID_VIDCAP_DROPPEDFRAMES
{
}
alias KSPROPERTY_VIDCAP_DROPPEDFRAMES = int;
enum : int
{
    KSPROPERTY_DROPPEDFRAMES_CURRENT = 0x00000000,
}

struct KSPROPERTY_DROPPEDFRAMES_CURRENT_S
{
    KSIDENTIFIER Property;
    long PictureNumber;
    long DropCount;
    uint AverageFrameSize;
}
enum CLSID_KSPROPSETID_VPConfig = GUID(0xbc29a660, 0x30e3, 0x11d0, [0x9e, 0x69, 0x0, 0xc0, 0x4f, 0xd7, 0xc1, 0x5b]);
struct KSPROPSETID_VPConfig
{
}
enum CLSID_KSPROPSETID_VPVBIConfig = GUID(0xec529b00, 0x1a1f, 0x11d1, [0xba, 0xd9, 0x0, 0x60, 0x97, 0x44, 0x11, 0x1a]);
struct KSPROPSETID_VPVBIConfig
{
}
alias KSPROPERTY_VPCONFIG = int;
enum : int
{
    KSPROPERTY_VPCONFIG_NUMCONNECTINFO       = 0x00000000,
    KSPROPERTY_VPCONFIG_GETCONNECTINFO       = 0x00000001,
    KSPROPERTY_VPCONFIG_SETCONNECTINFO       = 0x00000002,
    KSPROPERTY_VPCONFIG_VPDATAINFO           = 0x00000003,
    KSPROPERTY_VPCONFIG_MAXPIXELRATE         = 0x00000004,
    KSPROPERTY_VPCONFIG_INFORMVPINPUT        = 0x00000005,
    KSPROPERTY_VPCONFIG_NUMVIDEOFORMAT       = 0x00000006,
    KSPROPERTY_VPCONFIG_GETVIDEOFORMAT       = 0x00000007,
    KSPROPERTY_VPCONFIG_SETVIDEOFORMAT       = 0x00000008,
    KSPROPERTY_VPCONFIG_INVERTPOLARITY       = 0x00000009,
    KSPROPERTY_VPCONFIG_DECIMATIONCAPABILITY = 0x0000000a,
    KSPROPERTY_VPCONFIG_SCALEFACTOR          = 0x0000000b,
    KSPROPERTY_VPCONFIG_DDRAWHANDLE          = 0x0000000c,
    KSPROPERTY_VPCONFIG_VIDEOPORTID          = 0x0000000d,
    KSPROPERTY_VPCONFIG_DDRAWSURFACEHANDLE   = 0x0000000e,
    KSPROPERTY_VPCONFIG_SURFACEPARAMS        = 0x0000000f,
}

enum CLSID_CLSID_KsIBasicAudioInterfaceHandler = GUID(0xb9f8ac3e, 0xf71, 0x11d2, [0xb7, 0x2c, 0x0, 0xc0, 0x4f, 0xb6, 0xbd, 0x3d]);
struct CLSID_KsIBasicAudioInterfaceHandler
{
}
alias KS_AMPixAspectRatio = int;
enum : int
{
    KS_PixAspectRatio_NTSC4x3  = 0x00000000,
    KS_PixAspectRatio_NTSC16x9 = 0x00000001,
    KS_PixAspectRatio_PAL4x3   = 0x00000002,
    KS_PixAspectRatio_PAL16x9  = 0x00000003,
}

alias KS_AMVP_SELECTFORMATBY = int;
enum : int
{
    KS_AMVP_DO_NOT_CARE          = 0x00000000,
    KS_AMVP_BEST_BANDWIDTH       = 0x00000001,
    KS_AMVP_INPUT_SAME_AS_OUTPUT = 0x00000002,
}

alias KS_AMVP_MODE = int;
enum : int
{
    KS_AMVP_MODE_WEAVE             = 0x00000000,
    KS_AMVP_MODE_BOBINTERLEAVED    = 0x00000001,
    KS_AMVP_MODE_BOBNONINTERLEAVED = 0x00000002,
    KS_AMVP_MODE_SKIPEVEN          = 0x00000003,
    KS_AMVP_MODE_SKIPODD           = 0x00000004,
}

struct KS_AMVPDIMINFO
{
    uint dwFieldWidth;
    uint dwFieldHeight;
    uint dwVBIWidth;
    uint dwVBIHeight;
    RECT rcValidRegion;
}
struct KS_AMVPDATAINFO
{
    uint dwSize;
    uint dwMicrosecondsPerField;
    KS_AMVPDIMINFO amvpDimInfo;
    uint dwPictAspectRatioX;
    uint dwPictAspectRatioY;
    BOOL bEnableDoubleClock;
    BOOL bEnableVACT;
    BOOL bDataIsInterlaced;
    int lHalfLinesOdd;
    BOOL bFieldPolarityInverted;
    uint dwNumLinesInVREF;
    int lHalfLinesEven;
    uint dwReserved1;
}
struct KS_AMVPSIZE
{
    uint dwWidth;
    uint dwHeight;
}
struct KSVPMAXPIXELRATE
{
    KS_AMVPSIZE Size;
    uint MaxPixelsPerSecond;
    uint Reserved;
}
struct KSVPSIZE_PROP
{
    KSIDENTIFIER Property;
    KS_AMVPSIZE Size;
}
struct KSVPSURFACEPARAMS
{
    uint dwPitch;
    uint dwXOrigin;
    uint dwYOrigin;
}
enum CLSID_KSEVENTSETID_VPNotify = GUID(0x20c5598e, 0xd3c8, 0x11d0, [0x8d, 0xfc, 0x0, 0xc0, 0x4f, 0xd7, 0xc0, 0x8b]);
struct KSEVENTSETID_VPNotify
{
}
alias KSEVENT_VPNOTIFY = int;
enum : int
{
    KSEVENT_VPNOTIFY_FORMATCHANGE = 0x00000000,
}

enum CLSID_KSEVENTSETID_VIDCAPTOSTI = GUID(0xdb47de20, 0xf628, 0x11d1, [0xba, 0x41, 0x0, 0xa0, 0xc9, 0xd, 0x2b, 0x5]);
struct KSEVENTSETID_VIDCAPTOSTI
{
}
alias KSEVENT_VIDCAPTOSTI = int;
enum : int
{
    KSEVENT_VIDCAPTOSTI_EXT_TRIGGER = 0x00000000,
    KSEVENT_VIDCAP_AUTO_UPDATE      = 0x00000001,
    KSEVENT_VIDCAP_SEARCH           = 0x00000002,
}

alias KSPROPERTY_EXTENSION_UNIT = int;
enum : int
{
    KSPROPERTY_EXTENSION_UNIT_INFO         = 0x00000000,
    KSPROPERTY_EXTENSION_UNIT_CONTROL      = 0x00000001,
    KSPROPERTY_EXTENSION_UNIT_PASS_THROUGH = 0x0000ffff,
}

enum CLSID_KSEVENTSETID_VPVBINotify = GUID(0xec529b01, 0x1a1f, 0x11d1, [0xba, 0xd9, 0x0, 0x60, 0x97, 0x44, 0x11, 0x1a]);
struct KSEVENTSETID_VPVBINotify
{
}
alias KSEVENT_VPVBINOTIFY = int;
enum : int
{
    KSEVENT_VPVBINOTIFY_FORMATCHANGE = 0x00000000,
}

enum CLSID_KSDATAFORMAT_TYPE_AUXLine21Data = GUID(0x670aea80, 0x3a82, 0x11d0, [0xb7, 0x9b, 0x0, 0xaa, 0x0, 0x37, 0x67, 0xa7]);
struct KSDATAFORMAT_TYPE_AUXLine21Data
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_Line21_BytePair = GUID(0x6e8d4a22, 0x310c, 0x11d0, [0xb7, 0x9a, 0x0, 0xaa, 0x0, 0x37, 0x67, 0xa7]);
struct KSDATAFORMAT_SUBTYPE_Line21_BytePair
{
}
enum CLSID_KSDATAFORMAT_SUBTYPE_Line21_GOPPacket = GUID(0x6e8d4a23, 0x310c, 0x11d0, [0xb7, 0x9a, 0x0, 0xaa, 0x0, 0x37, 0x67, 0xa7]);
struct KSDATAFORMAT_SUBTYPE_Line21_GOPPacket
{
}
struct KSGOP_USERDATA
{
    uint sc;
    uint reserved1;
    ubyte cFields;
    CHAR[3] l21Data;
}
enum CLSID_KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK = GUID(0xed0b916a, 0x44d, 0x11d1, [0xaa, 0x78, 0x0, 0xc0, 0x4f, 0xc3, 0x1d, 0x60]);
struct KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK
{
}
enum CLSID_KSPROPSETID_TSRateChange = GUID(0xa503c5c0, 0x1d1d, 0x11d1, [0xad, 0x80, 0x44, 0x45, 0x53, 0x54, 0x0, 0x0]);
struct KSPROPSETID_TSRateChange
{
}
alias KS_AM_PROPERTY_TS_RATE_CHANGE = int;
enum : int
{
    KS_AM_RATE_SimpleRateChange = 0x00000001,
    KS_AM_RATE_ExactRateChange  = 0x00000002,
    KS_AM_RATE_MaxFullDataRate  = 0x00000003,
    KS_AM_RATE_Step             = 0x00000004,
}

struct KS_AM_SimpleRateChange
{
    long StartTime;
    int Rate;
}
struct KS_AM_ExactRateChange
{
    long OutputZeroTime;
    int Rate;
}
enum CLSID_KSCATEGORY_ENCODER = GUID(0x19689bf6, 0xc384, 0x48fd, [0xad, 0x51, 0x90, 0xe5, 0x8c, 0x79, 0xf7, 0xb]);
struct KSCATEGORY_ENCODER
{
}
enum CLSID_KSCATEGORY_MULTIPLEXER = GUID(0x7a5de1d3, 0x1a1, 0x452c, [0xb4, 0x81, 0x4f, 0xa2, 0xb9, 0x62, 0x71, 0xe8]);
struct KSCATEGORY_MULTIPLEXER
{
}
enum CLSID_KSPROPSETID_Jack = GUID(0x4509f757, 0x2d46, 0x4637, [0x8e, 0x62, 0xce, 0x7d, 0xb9, 0x44, 0xf5, 0x7b]);
struct KSPROPSETID_Jack
{
}
alias KSPROPERTY_JACK = int;
enum : int
{
    KSPROPERTY_JACK_DESCRIPTION  = 0x00000001,
    KSPROPERTY_JACK_DESCRIPTION2 = 0x00000002,
    KSPROPERTY_JACK_SINK_INFO    = 0x00000003,
    KSPROPERTY_JACK_CONTAINERID  = 0x00000004,
    KSPROPERTY_JACK_DESCRIPTION3 = 0x00000005,
}

alias EPcxConnectionType = int;
enum : int
{
    eConnTypeUnknown               = 0x00000000,
    eConnType3Point5mm             = 0x00000001,
    eConnTypeQuarter               = 0x00000002,
    eConnTypeAtapiInternal         = 0x00000003,
    eConnTypeRCA                   = 0x00000004,
    eConnTypeOptical               = 0x00000005,
    eConnTypeOtherDigital          = 0x00000006,
    eConnTypeOtherAnalog           = 0x00000007,
    eConnTypeMultichannelAnalogDIN = 0x00000008,
    eConnTypeXlrProfessional       = 0x00000009,
    eConnTypeRJ11Modem             = 0x0000000a,
    eConnTypeCombination           = 0x0000000b,
}

alias EPcxGeoLocation = int;
enum : int
{
    eGeoLocRear                = 0x00000001,
    eGeoLocFront               = 0x00000002,
    eGeoLocLeft                = 0x00000003,
    eGeoLocRight               = 0x00000004,
    eGeoLocTop                 = 0x00000005,
    eGeoLocBottom              = 0x00000006,
    eGeoLocRearPanel           = 0x00000007,
    eGeoLocRiser               = 0x00000008,
    eGeoLocInsideMobileLid     = 0x00000009,
    eGeoLocDrivebay            = 0x0000000a,
    eGeoLocHDMI                = 0x0000000b,
    eGeoLocOutsideMobileLid    = 0x0000000c,
    eGeoLocATAPI               = 0x0000000d,
    eGeoLocNotApplicable       = 0x0000000e,
    eGeoLocReserved6           = 0x0000000f,
    EPcxGeoLocation_enum_count = 0x00000010,
}

alias EPcxGenLocation = int;
enum : int
{
    eGenLocPrimaryBox          = 0x00000000,
    eGenLocInternal            = 0x00000001,
    eGenLocSeparate            = 0x00000002,
    eGenLocOther               = 0x00000003,
    EPcxGenLocation_enum_count = 0x00000004,
}

alias EPxcPortConnection = int;
enum : int
{
    ePortConnJack                  = 0x00000000,
    ePortConnIntegratedDevice      = 0x00000001,
    ePortConnBothIntegratedAndJack = 0x00000002,
    ePortConnUnknown               = 0x00000003,
}

struct KSJACK_DESCRIPTION
{
    uint ChannelMapping;
    uint Color;
    EPcxConnectionType ConnectionType;
    EPcxGeoLocation GeoLocation;
    EPcxGenLocation GenLocation;
    EPxcPortConnection PortConnection;
    BOOL IsConnected;
}
alias KSJACK_SINK_CONNECTIONTYPE = int;
enum : int
{
    KSJACK_SINK_CONNECTIONTYPE_HDMI        = 0x00000000,
    KSJACK_SINK_CONNECTIONTYPE_DISPLAYPORT = 0x00000001,
}

struct KSJACK_SINK_INFORMATION
{
    KSJACK_SINK_CONNECTIONTYPE ConnType;
    ushort ManufacturerId;
    ushort ProductId;
    ushort AudioLatency;
    BOOL HDCPCapable;
    BOOL AICapable;
    ubyte SinkDescriptionLength;
    wchar[32] SinkDescription;
    LUID PortId;
}
struct KSJACK_DESCRIPTION2
{
    uint DeviceStateInfo;
    uint JackCapabilities;
}
struct KSJACK_DESCRIPTION3
{
    uint ConfigId;
}
enum CLSID_KSPROPSETID_AudioPosture = GUID(0xa3fb7b0d, 0x474e, 0x4f51, [0xa3, 0x79, 0x51, 0x28, 0x2d, 0xd4, 0xfa, 0x8f]);
struct KSPROPSETID_AudioPosture
{
}
alias KSPROPERTY_AUDIOPOSTURE = int;
enum : int
{
    KSPROPERTY_AUDIOPOSTURE_ORIENTATION = 0x00000001,
}

alias AUDIOPOSTURE_ORIENTATION = int;
enum : int
{
    AUDIOPOSTURE_ORIENTATION_NOTROTATED                        = 0x00000000,
    AUDIOPOSTURE_ORIENTATION_ROTATED90DEGREESCOUNTERCLOCKWISE  = 0x00000001,
    AUDIOPOSTURE_ORIENTATION_ROTATED180DEGREESCOUNTERCLOCKWISE = 0x00000002,
    AUDIOPOSTURE_ORIENTATION_ROTATED270DEGREESCOUNTERCLOCKWISE = 0x00000003,
}

enum CLSID_KSPROPSETID_AudioBufferDuration = GUID(0x4e73c07f, 0x23cc, 0x4955, [0xa7, 0xea, 0x3d, 0xa5, 0x2, 0x49, 0x62, 0x90]);
struct KSPROPSETID_AudioBufferDuration
{
}
enum CLSID_KSPROPSETID_AudioEngine = GUID(0x3a2f82dc, 0x886f, 0x4baa, [0x9e, 0xb4, 0x8, 0x2b, 0x90, 0x25, 0xc5, 0x36]);
struct KSPROPSETID_AudioEngine
{
}
alias KSPROPERTY_AUDIOENGINE = int;
enum : int
{
    KSPROPERTY_AUDIOENGINE_LFXENABLE              = 0x00000000,
    KSPROPERTY_AUDIOENGINE_GFXENABLE              = 0x00000001,
    KSPROPERTY_AUDIOENGINE_MIXFORMAT              = 0x00000002,
    KSPROPERTY_AUDIOENGINE_DEVICEFORMAT           = 0x00000004,
    KSPROPERTY_AUDIOENGINE_SUPPORTEDDEVICEFORMATS = 0x00000005,
    KSPROPERTY_AUDIOENGINE_DESCRIPTOR             = 0x00000006,
    KSPROPERTY_AUDIOENGINE_BUFFER_SIZE_RANGE      = 0x00000007,
    KSPROPERTY_AUDIOENGINE_LOOPBACK_PROTECTION    = 0x00000008,
    KSPROPERTY_AUDIOENGINE_VOLUMELEVEL            = 0x00000009,
    KSPROPERTY_AUDIOENGINE_DEVICECONTROLS         = 0x0000000a,
}

struct KSAUDIOENGINE_DESCRIPTOR
{
    uint nHostPinId;
    uint nOffloadPinId;
    uint nLoopbackPinId;
}
struct KSAUDIOENGINE_BUFFER_SIZE_RANGE
{
    uint MinBufferBytes;
    uint MaxBufferBytes;
}
alias AUDIO_CURVE_TYPE = int;
enum : int
{
    AUDIO_CURVE_TYPE_NONE         = 0x00000000,
    AUDIO_CURVE_TYPE_WINDOWS_FADE = 0x00000001,
}

struct KSAUDIOENGINE_VOLUMELEVEL
{
    int TargetVolume;
    AUDIO_CURVE_TYPE CurveType;
    ulong CurveDuration;
}
alias EDeviceControlUseType = int;
enum : int
{
    eDeviceControlUseMissing   = 0x00000000,
    eDeviceControlUsePrimary   = 0x00000001,
    eDeviceControlUseSecondary = 0x00000002,
}

struct KSAUDIOENGINE_DEVICECONTROLS
{
    EDeviceControlUseType Volume;
    EDeviceControlUseType Mute;
    EDeviceControlUseType PeakMeter;
}
enum CLSID_KSPROPSETID_AudioSignalProcessing = GUID(0x4f67b528, 0x30c9, 0x40de, [0xb2, 0xfb, 0x85, 0x9d, 0xdd, 0x1f, 0x34, 0x70]);
struct KSPROPSETID_AudioSignalProcessing
{
}
alias KSPROPERTY_AUDIOSIGNALPROCESSING = int;
enum : int
{
    KSPROPERTY_AUDIOSIGNALPROCESSING_MODES = 0x00000000,
}

enum CLSID_KSATTRIBUTEID_AUDIOSIGNALPROCESSING_MODE = GUID(0xe1f89eb5, 0x5f46, 0x419b, [0x96, 0x7b, 0xff, 0x67, 0x70, 0xb9, 0x84, 0x1]);
struct KSATTRIBUTEID_AUDIOSIGNALPROCESSING_MODE
{
}
struct KSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE
{
    KSATTRIBUTE AttributeHeader;
    GUID SignalProcessingMode;
}
enum CLSID_AUDIO_SIGNALPROCESSINGMODE_DEFAULT = GUID(0xc18e2f7e, 0x933d, 0x4965, [0xb7, 0xd1, 0x1e, 0xef, 0x22, 0x8d, 0x2a, 0xf3]);
struct AUDIO_SIGNALPROCESSINGMODE_DEFAULT
{
}
enum CLSID_AUDIO_SIGNALPROCESSINGMODE_RAW = GUID(0x9e90ea20, 0xb493, 0x4fd1, [0xa1, 0xa8, 0x7e, 0x13, 0x61, 0xa9, 0x56, 0xcf]);
struct AUDIO_SIGNALPROCESSINGMODE_RAW
{
}
enum CLSID_KSPROPSETID_AudioResourceManagement = GUID(0xd0b305e1, 0xb2cc, 0x484c, [0x8f, 0x23, 0xe5, 0xd2, 0x8a, 0xd9, 0xcf, 0x88]);
struct KSPROPSETID_AudioResourceManagement
{
}
alias KSPROPERTY_AUDIORESOURCEMANAGEMENT = int;
enum : int
{
    KSPROPERTY_AUDIORESOURCEMANAGEMENT_RESOURCEGROUP = 0x00000000,
}

struct AUDIORESOURCEMANAGEMENT_RESOURCEGROUP
{
    BOOL ResourceGroupAcquired;
    wchar[256] ResourceGroupName;
}
enum CLSID_BLUETOOTHLE_MIDI_SERVICE_UUID = GUID(0x3b80e5a, 0xede8, 0x4b33, [0xa7, 0x51, 0x6c, 0xe3, 0x4e, 0xc4, 0xc7, 0x0]);
struct BLUETOOTHLE_MIDI_SERVICE_UUID
{
}
enum CLSID_BLUETOOTH_MIDI_DATAIO_CHARACTERISTIC = GUID(0x7772e5db, 0x3868, 0x4112, [0xa1, 0xa9, 0xf2, 0x66, 0x9d, 0x10, 0x6b, 0xf3]);
struct BLUETOOTH_MIDI_DATAIO_CHARACTERISTIC
{
}
enum CLSID_APO_CLASS_UUID = GUID(0x5989fce8, 0x9cd0, 0x467d, [0x8a, 0x6a, 0x54, 0x19, 0xe3, 0x15, 0x29, 0xd4]);
struct APO_CLASS_UUID
{
}
enum CLSID_AUDIOENDPOINT_CLASS_UUID = GUID(0xc166523c, 0xfe0c, 0x4a94, [0xa5, 0x86, 0xf1, 0xa8, 0xc, 0xfb, 0xbf, 0x3e]);
struct AUDIOENDPOINT_CLASS_UUID
{
}
enum CLSID_AUDIO_SIGNALPROCESSINGMODE_COMMUNICATIONS = GUID(0x98951333, 0xb9cd, 0x48b1, [0xa0, 0xa3, 0xff, 0x40, 0x68, 0x2d, 0x73, 0xf7]);
struct AUDIO_SIGNALPROCESSINGMODE_COMMUNICATIONS
{
}
enum CLSID_AUDIO_SIGNALPROCESSINGMODE_SPEECH = GUID(0xfc1cfc9b, 0xb9d6, 0x4cfa, [0xb5, 0xe0, 0x4b, 0xb2, 0x16, 0x68, 0x78, 0xb2]);
struct AUDIO_SIGNALPROCESSINGMODE_SPEECH
{
}
enum CLSID_AUDIO_SIGNALPROCESSINGMODE_NOTIFICATION = GUID(0x9cf2a70b, 0xf377, 0x403b, [0xbd, 0x6b, 0x36, 0x8, 0x63, 0xe0, 0x35, 0x5c]);
struct AUDIO_SIGNALPROCESSINGMODE_NOTIFICATION
{
}
enum CLSID_AUDIO_SIGNALPROCESSINGMODE_MEDIA = GUID(0x4780004e, 0x7133, 0x41d8, [0x8c, 0x74, 0x66, 0xd, 0xad, 0xd2, 0xc0, 0xee]);
struct AUDIO_SIGNALPROCESSINGMODE_MEDIA
{
}
enum CLSID_AUDIO_SIGNALPROCESSINGMODE_MOVIE = GUID(0xb26feb0d, 0xec94, 0x477c, [0x94, 0x94, 0xd1, 0xab, 0x8e, 0x75, 0x3f, 0x6e]);
struct AUDIO_SIGNALPROCESSINGMODE_MOVIE
{
}
enum CLSID_AUDIO_SIGNALPROCESSINGMODE_FAR_FIELD_SPEECH = GUID(0x28941cba, 0x3be6, 0x4a78, [0x9a, 0x76, 0x30, 0xfd, 0x91, 0x55, 0x9b, 0x64]);
struct AUDIO_SIGNALPROCESSINGMODE_FAR_FIELD_SPEECH
{
}
enum CLSID_AUDIO_EFFECT_TYPE_ACOUSTIC_ECHO_CANCELLATION = GUID(0x6f64adbe, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_ACOUSTIC_ECHO_CANCELLATION
{
}
enum CLSID_AUDIO_EFFECT_TYPE_NOISE_SUPPRESSION = GUID(0x6f64adbf, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_NOISE_SUPPRESSION
{
}
enum CLSID_AUDIO_EFFECT_TYPE_AUTOMATIC_GAIN_CONTROL = GUID(0x6f64adc0, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_AUTOMATIC_GAIN_CONTROL
{
}
enum CLSID_AUDIO_EFFECT_TYPE_BEAMFORMING = GUID(0x6f64adc1, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_BEAMFORMING
{
}
enum CLSID_AUDIO_EFFECT_TYPE_CONSTANT_TONE_REMOVAL = GUID(0x6f64adc2, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_CONSTANT_TONE_REMOVAL
{
}
enum CLSID_AUDIO_EFFECT_TYPE_EQUALIZER = GUID(0x6f64adc3, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_EQUALIZER
{
}
enum CLSID_AUDIO_EFFECT_TYPE_LOUDNESS_EQUALIZER = GUID(0x6f64adc4, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_LOUDNESS_EQUALIZER
{
}
enum CLSID_AUDIO_EFFECT_TYPE_BASS_BOOST = GUID(0x6f64adc5, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_BASS_BOOST
{
}
enum CLSID_AUDIO_EFFECT_TYPE_VIRTUAL_SURROUND = GUID(0x6f64adc6, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_VIRTUAL_SURROUND
{
}
enum CLSID_AUDIO_EFFECT_TYPE_VIRTUAL_HEADPHONES = GUID(0x6f64adc7, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_VIRTUAL_HEADPHONES
{
}
enum CLSID_AUDIO_EFFECT_TYPE_SPEAKER_FILL = GUID(0x6f64adc8, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_SPEAKER_FILL
{
}
enum CLSID_AUDIO_EFFECT_TYPE_ROOM_CORRECTION = GUID(0x6f64adc9, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_ROOM_CORRECTION
{
}
enum CLSID_AUDIO_EFFECT_TYPE_BASS_MANAGEMENT = GUID(0x6f64adca, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_BASS_MANAGEMENT
{
}
enum CLSID_AUDIO_EFFECT_TYPE_ENVIRONMENTAL_EFFECTS = GUID(0x6f64adcb, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_ENVIRONMENTAL_EFFECTS
{
}
enum CLSID_AUDIO_EFFECT_TYPE_SPEAKER_PROTECTION = GUID(0x6f64adcc, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_SPEAKER_PROTECTION
{
}
enum CLSID_AUDIO_EFFECT_TYPE_SPEAKER_COMPENSATION = GUID(0x6f64adcd, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_SPEAKER_COMPENSATION
{
}
enum CLSID_AUDIO_EFFECT_TYPE_DYNAMIC_RANGE_COMPRESSION = GUID(0x6f64adce, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_DYNAMIC_RANGE_COMPRESSION
{
}
enum CLSID_AUDIO_EFFECT_TYPE_FAR_FIELD_BEAMFORMING = GUID(0x6f64adcf, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_FAR_FIELD_BEAMFORMING
{
}
enum CLSID_AUDIO_EFFECT_TYPE_DEEP_NOISE_SUPPRESSION = GUID(0x6f64add0, 0x8211, 0x11e2, [0x8c, 0x70, 0x2c, 0x27, 0xd7, 0xf0, 0x1, 0xfa]);
struct AUDIO_EFFECT_TYPE_DEEP_NOISE_SUPPRESSION
{
}
enum CLSID_KSPROPSETID_AudioModule = GUID(0xc034fdb0, 0xff75, 0x47c8, [0xaa, 0x3c, 0xee, 0x46, 0x71, 0x6b, 0x50, 0xc6]);
struct KSPROPSETID_AudioModule
{
}
alias KSPROPERTY_AUDIOMODULE = int;
enum : int
{
    KSPROPERTY_AUDIOMODULE_DESCRIPTORS            = 0x00000001,
    KSPROPERTY_AUDIOMODULE_COMMAND                = 0x00000002,
    KSPROPERTY_AUDIOMODULE_NOTIFICATION_DEVICE_ID = 0x00000003,
}

struct KSAUDIOMODULE_DESCRIPTOR
{
    GUID ClassId;
    uint InstanceId;
    uint VersionMajor;
    uint VersionMinor;
    wchar[128] Name;
}
struct KSAUDIOMODULE_PROPERTY
{
    KSIDENTIFIER Property;
    GUID ClassId;
    uint InstanceId;
}
enum CLSID_KSNOTIFICATIONID_AudioModule = GUID(0x9c2220f0, 0xd9a6, 0x4d5c, [0xa0, 0x36, 0x57, 0x38, 0x57, 0xfd, 0x50, 0xd2]);
struct KSNOTIFICATIONID_AudioModule
{
}
struct KSAUDIOMODULE_NOTIFICATION
{
    union
    {
        struct _ProviderId_e__Struct
        {
            GUID DeviceId;
            GUID ClassId;
            uint InstanceId;
            uint Reserved;
        }
        long Alignment;
    }
}
alias KSALLOCATORMODE = int;
enum : int
{
    KsAllocatorMode_User   = 0x00000000,
    KsAllocatorMode_Kernel = 0x00000001,
}

alias FRAMING_PROP = int;
enum : int
{
    FramingProp_Uninitialized = 0x00000000,
    FramingProp_None          = 0x00000001,
    FramingProp_Old           = 0x00000002,
    FramingProp_Ex            = 0x00000003,
}

alias FRAMING_CACHE_OPS = int;
enum : int
{
    Framing_Cache_Update   = 0x00000000,
    Framing_Cache_ReadLast = 0x00000001,
    Framing_Cache_ReadOrig = 0x00000002,
    Framing_Cache_Write    = 0x00000003,
}

struct OPTIMAL_WEIGHT_TOTALS
{
    long MinTotalNominator;
    long MaxTotalNominator;
    long TotalDenominator;
}
alias PIPE_STATE = int;
enum : int
{
    PipeState_DontCare           = 0x00000000,
    PipeState_RangeNotFixed      = 0x00000001,
    PipeState_RangeFixed         = 0x00000002,
    PipeState_CompressionUnknown = 0x00000003,
    PipeState_Finalized          = 0x00000004,
}

struct PIPE_DIMENSIONS
{
    KS_COMPRESSION AllocatorPin;
    KS_COMPRESSION MaxExpansionPin;
    KS_COMPRESSION EndPin;
}
alias PIPE_ALLOCATOR_PLACE = int;
enum : int
{
    Pipe_Allocator_None      = 0x00000000,
    Pipe_Allocator_FirstPin  = 0x00000001,
    Pipe_Allocator_LastPin   = 0x00000002,
    Pipe_Allocator_MiddlePin = 0x00000003,
}

alias KS_LogicalMemoryType = int;
enum : int
{
    KS_MemoryTypeDontCare         = 0x00000000,
    KS_MemoryTypeKernelPaged      = 0x00000001,
    KS_MemoryTypeKernelNonPaged   = 0x00000002,
    KS_MemoryTypeDeviceHostMapped = 0x00000003,
    KS_MemoryTypeDeviceSpecific   = 0x00000004,
    KS_MemoryTypeUser             = 0x00000005,
    KS_MemoryTypeAnyHost          = 0x00000006,
}

struct PIPE_TERMINATION
{
    uint Flags;
    uint OutsideFactors;
    uint Weigth;
    KS_FRAMING_RANGE PhysicalRange;
    KS_FRAMING_RANGE_WEIGHTED OptimalRange;
    KS_COMPRESSION Compression;
}
struct ALLOCATOR_PROPERTIES_EX
{
    int cBuffers;
    int cbBuffer;
    int cbAlign;
    int cbPrefix;
    GUID MemoryType;
    GUID BusType;
    PIPE_STATE State;
    PIPE_TERMINATION Input;
    PIPE_TERMINATION Output;
    uint Strategy;
    uint Flags;
    uint Weight;
    KS_LogicalMemoryType LogicalMemoryType;
    PIPE_ALLOCATOR_PLACE AllocatorPlace;
    PIPE_DIMENSIONS Dimensions;
    KS_FRAMING_RANGE PhysicalRange;
    IKsAllocatorEx* PrevSegment;
    uint CountNextSegments;
    IKsAllocatorEx** NextSegments;
    uint InsideFactors;
    uint NumberPins;
}
enum CLSID_CLSID_Proxy = GUID(0x17cca71b, 0xecd7, 0x11d0, [0xb9, 0x8, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
struct CLSID_Proxy
{
}
enum IID_IKsPropertySet = GUID(0x31efac30, 0x515c, 0x11d0, [0xa9, 0xaa, 0x0, 0xaa, 0x0, 0x61, 0xbe, 0x93]);
interface IKsPropertySet : IUnknown
{
    HRESULT Set(const(GUID)*, uint, void*, uint, void*, uint);
    HRESULT Get(const(GUID)*, uint, void*, uint, void*, uint, uint*);
    HRESULT QuerySupported(const(GUID)*, uint, uint*);
}
enum IID_IKsAggregateControl = GUID(0x7f40eac0, 0x3947, 0x11d2, [0x87, 0x4e, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
interface IKsAggregateControl : IUnknown
{
    HRESULT KsAddAggregate(const(GUID)*);
    HRESULT KsRemoveAggregate(const(GUID)*);
}
enum IID_IKsTopology = GUID(0x28f54683, 0x6fd, 0x11d2, [0xb2, 0x7a, 0x0, 0xa0, 0xc9, 0x22, 0x31, 0x96]);
interface IKsTopology : IUnknown
{
    HRESULT CreateNodeInstance(uint, uint, uint, IUnknown, const(GUID)*, void**);
}
