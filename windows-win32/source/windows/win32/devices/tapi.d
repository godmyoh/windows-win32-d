module windows.win32.devices.tapi;

import windows.win32.guid : GUID;
import windows.win32.foundation : BOOL, BSTR, CHAR, HANDLE, HINSTANCE, HRESULT, HWND, PSTR, PWSTR, SYSTEMTIME, WPARAM;
import windows.win32.media.directshow_ : ALLOCATOR_PROPERTIES;
import windows.win32.media.mediafoundation : AM_MEDIA_TYPE;
import windows.win32.system.addressbook : IAddrBook, IMAPITable, IMessage, SPropTagArray, SPropValue;
import windows.win32.system.com_ : CY, IDispatch, IEnumUnknown, IStream, IUnknown, VARIANT;

version (Windows):
extern (Windows):

int lineAccept(uint, const(char)*, uint);
int lineAddProvider(const(char)*, HWND, uint*);
int lineAddProviderA(const(char)*, HWND, uint*);
int lineAddProviderW(const(wchar)*, HWND, uint*);
int lineAddToConference(uint, uint);
int lineAgentSpecific(uint, uint, uint, void*, uint);
int lineAnswer(uint, const(char)*, uint);
int lineBlindTransfer(uint, const(char)*, uint);
int lineBlindTransferA(uint, const(char)*, uint);
int lineBlindTransferW(uint, const(wchar)*, uint);
int lineClose(uint);
int lineCompleteCall(uint, uint*, uint, uint);
int lineCompleteTransfer(uint, uint, uint*, uint);
int lineConfigDialog(uint, HWND, const(char)*);
int lineConfigDialogA(uint, HWND, const(char)*);
int lineConfigDialogW(uint, HWND, const(wchar)*);
int lineConfigDialogEdit(uint, HWND, const(char)*, const(void)*, uint, VARSTRING*);
int lineConfigDialogEditA(uint, HWND, const(char)*, const(void)*, uint, VARSTRING*);
int lineConfigDialogEditW(uint, HWND, const(wchar)*, const(void)*, uint, VARSTRING*);
int lineConfigProvider(HWND, uint);
int lineCreateAgentW(uint, const(wchar)*, const(wchar)*, uint*);
int lineCreateAgentA(uint, const(char)*, const(char)*, uint*);
int lineCreateAgentSessionW(uint, uint, const(wchar)*, uint, GUID*, uint*);
int lineCreateAgentSessionA(uint, uint, const(char)*, uint, GUID*, uint*);
int lineDeallocateCall(uint);
int lineDevSpecific(uint, uint, uint, void*, uint);
int lineDevSpecificFeature(uint, uint, void*, uint);
int lineDial(uint, const(char)*, uint);
int lineDialA(uint, const(char)*, uint);
int lineDialW(uint, const(wchar)*, uint);
int lineDrop(uint, const(char)*, uint);
int lineForward(uint, uint, uint, const(LINEFORWARDLIST)*, uint, uint*, const(LINECALLPARAMS)*);
int lineForwardA(uint, uint, uint, const(LINEFORWARDLIST)*, uint, uint*, const(LINECALLPARAMS)*);
int lineForwardW(uint, uint, uint, const(LINEFORWARDLIST)*, uint, uint*, const(LINECALLPARAMS)*);
int lineGatherDigits(uint, uint, PSTR, uint, const(char)*, uint, uint);
int lineGatherDigitsA(uint, uint, PSTR, uint, const(char)*, uint, uint);
int lineGatherDigitsW(uint, uint, PWSTR, uint, const(wchar)*, uint, uint);
int lineGenerateDigits(uint, uint, const(char)*, uint);
int lineGenerateDigitsA(uint, uint, const(char)*, uint);
int lineGenerateDigitsW(uint, uint, const(wchar)*, uint);
int lineGenerateTone(uint, uint, uint, uint, const(LINEGENERATETONE)*);
int lineGetAddressCaps(uint, uint, uint, uint, uint, LINEADDRESSCAPS*);
int lineGetAddressCapsA(uint, uint, uint, uint, uint, LINEADDRESSCAPS*);
int lineGetAddressCapsW(uint, uint, uint, uint, uint, LINEADDRESSCAPS*);
int lineGetAddressID(uint, uint*, uint, const(char)*, uint);
int lineGetAddressIDA(uint, uint*, uint, const(char)*, uint);
int lineGetAddressIDW(uint, uint*, uint, const(wchar)*, uint);
int lineGetAddressStatus(uint, uint, LINEADDRESSSTATUS*);
int lineGetAddressStatusA(uint, uint, LINEADDRESSSTATUS*);
int lineGetAddressStatusW(uint, uint, LINEADDRESSSTATUS*);
int lineGetAgentActivityListA(uint, uint, LINEAGENTACTIVITYLIST*);
int lineGetAgentActivityListW(uint, uint, LINEAGENTACTIVITYLIST*);
int lineGetAgentCapsA(uint, uint, uint, uint, LINEAGENTCAPS*);
int lineGetAgentCapsW(uint, uint, uint, uint, LINEAGENTCAPS*);
int lineGetAgentGroupListA(uint, uint, LINEAGENTGROUPLIST*);
int lineGetAgentGroupListW(uint, uint, LINEAGENTGROUPLIST*);
int lineGetAgentInfo(uint, uint, LINEAGENTINFO*);
int lineGetAgentSessionInfo(uint, uint, LINEAGENTSESSIONINFO*);
int lineGetAgentSessionList(uint, uint, LINEAGENTSESSIONLIST*);
int lineGetAgentStatusA(uint, uint, LINEAGENTSTATUS*);
int lineGetAgentStatusW(uint, uint, LINEAGENTSTATUS*);
int lineGetAppPriority(const(char)*, uint, LINEEXTENSIONID*, uint, VARSTRING*, uint*);
int lineGetAppPriorityA(const(char)*, uint, LINEEXTENSIONID*, uint, VARSTRING*, uint*);
int lineGetAppPriorityW(const(wchar)*, uint, LINEEXTENSIONID*, uint, VARSTRING*, uint*);
int lineGetCallInfo(uint, LINECALLINFO*);
int lineGetCallInfoA(uint, LINECALLINFO*);
int lineGetCallInfoW(uint, LINECALLINFO*);
int lineGetCallStatus(uint, LINECALLSTATUS*);
int lineGetConfRelatedCalls(uint, LINECALLLIST*);
int lineGetCountry(uint, uint, LINECOUNTRYLIST*);
int lineGetCountryA(uint, uint, LINECOUNTRYLIST*);
int lineGetCountryW(uint, uint, LINECOUNTRYLIST*);
int lineGetDevCaps(uint, uint, uint, uint, LINEDEVCAPS*);
int lineGetDevCapsA(uint, uint, uint, uint, LINEDEVCAPS*);
int lineGetDevCapsW(uint, uint, uint, uint, LINEDEVCAPS*);
int lineGetDevConfig(uint, VARSTRING*, const(char)*);
int lineGetDevConfigA(uint, VARSTRING*, const(char)*);
int lineGetDevConfigW(uint, VARSTRING*, const(wchar)*);
int lineGetGroupListA(uint, LINEAGENTGROUPLIST*);
int lineGetGroupListW(uint, LINEAGENTGROUPLIST*);
int lineGetIcon(uint, const(char)*, long*);
int lineGetIconA(uint, const(char)*, long*);
int lineGetIconW(uint, const(wchar)*, long*);
int lineGetID(uint, uint, uint, uint, VARSTRING*, const(char)*);
int lineGetIDA(uint, uint, uint, uint, VARSTRING*, const(char)*);
int lineGetIDW(uint, uint, uint, uint, VARSTRING*, const(wchar)*);
int lineGetLineDevStatus(uint, LINEDEVSTATUS*);
int lineGetLineDevStatusA(uint, LINEDEVSTATUS*);
int lineGetLineDevStatusW(uint, LINEDEVSTATUS*);
int lineGetMessage(uint, LINEMESSAGE*, uint);
int lineGetNewCalls(uint, uint, uint, LINECALLLIST*);
int lineGetNumRings(uint, uint, uint*);
int lineGetProviderList(uint, LINEPROVIDERLIST*);
int lineGetProviderListA(uint, LINEPROVIDERLIST*);
int lineGetProviderListW(uint, LINEPROVIDERLIST*);
int lineGetProxyStatus(uint, uint, uint, LINEPROXYREQUESTLIST*);
int lineGetQueueInfo(uint, uint, LINEQUEUEINFO*);
int lineGetQueueListA(uint, GUID*, LINEQUEUELIST*);
int lineGetQueueListW(uint, GUID*, LINEQUEUELIST*);
int lineGetRequest(uint, uint, void*);
int lineGetRequestA(uint, uint, void*);
int lineGetRequestW(uint, uint, void*);
int lineGetStatusMessages(uint, uint*, uint*);
int lineGetTranslateCaps(uint, uint, LINETRANSLATECAPS*);
int lineGetTranslateCapsA(uint, uint, LINETRANSLATECAPS*);
int lineGetTranslateCapsW(uint, uint, LINETRANSLATECAPS*);
int lineHandoff(uint, const(char)*, uint);
int lineHandoffA(uint, const(char)*, uint);
int lineHandoffW(uint, const(wchar)*, uint);
int lineHold(uint);
int lineInitialize(uint*, HINSTANCE, LINECALLBACK, const(char)*, uint*);
int lineInitializeExA(uint*, HINSTANCE, LINECALLBACK, const(char)*, uint*, uint*, LINEINITIALIZEEXPARAMS*);
int lineInitializeExW(uint*, HINSTANCE, LINECALLBACK, const(wchar)*, uint*, uint*, LINEINITIALIZEEXPARAMS*);
int lineMakeCall(uint, uint*, const(char)*, uint, const(LINECALLPARAMS)*);
int lineMakeCallA(uint, uint*, const(char)*, uint, const(LINECALLPARAMS)*);
int lineMakeCallW(uint, uint*, const(wchar)*, uint, const(LINECALLPARAMS)*);
int lineMonitorDigits(uint, uint);
int lineMonitorMedia(uint, uint);
int lineMonitorTones(uint, const(LINEMONITORTONE)*, uint);
int lineNegotiateAPIVersion(uint, uint, uint, uint, uint*, LINEEXTENSIONID*);
int lineNegotiateExtVersion(uint, uint, uint, uint, uint, uint*);
int lineOpen(uint, uint, uint*, uint, uint, ulong, uint, uint, const(LINECALLPARAMS)*);
int lineOpenA(uint, uint, uint*, uint, uint, ulong, uint, uint, const(LINECALLPARAMS)*);
int lineOpenW(uint, uint, uint*, uint, uint, ulong, uint, uint, const(LINECALLPARAMS)*);
int linePark(uint, uint, const(char)*, VARSTRING*);
int lineParkA(uint, uint, const(char)*, VARSTRING*);
int lineParkW(uint, uint, const(wchar)*, VARSTRING*);
int linePickup(uint, uint, uint*, const(char)*, const(char)*);
int linePickupA(uint, uint, uint*, const(char)*, const(char)*);
int linePickupW(uint, uint, uint*, const(wchar)*, const(wchar)*);
int linePrepareAddToConference(uint, uint*, const(LINECALLPARAMS)*);
int linePrepareAddToConferenceA(uint, uint*, const(LINECALLPARAMS)*);
int linePrepareAddToConferenceW(uint, uint*, const(LINECALLPARAMS)*);
int lineProxyMessage(uint, uint, uint, uint, uint, uint);
int lineProxyResponse(uint, LINEPROXYREQUEST*, uint);
int lineRedirect(uint, const(char)*, uint);
int lineRedirectA(uint, const(char)*, uint);
int lineRedirectW(uint, const(wchar)*, uint);
int lineRegisterRequestRecipient(uint, uint, uint, uint);
int lineReleaseUserUserInfo(uint);
int lineRemoveFromConference(uint);
int lineRemoveProvider(uint, HWND);
int lineSecureCall(uint);
int lineSendUserUserInfo(uint, const(char)*, uint);
int lineSetAgentActivity(uint, uint, uint);
int lineSetAgentGroup(uint, uint, LINEAGENTGROUPLIST*);
int lineSetAgentMeasurementPeriod(uint, uint, uint);
int lineSetAgentSessionState(uint, uint, uint, uint);
int lineSetAgentStateEx(uint, uint, uint, uint);
int lineSetAgentState(uint, uint, uint, uint);
int lineSetAppPriority(const(char)*, uint, LINEEXTENSIONID*, uint, const(char)*, uint);
int lineSetAppPriorityA(const(char)*, uint, LINEEXTENSIONID*, uint, const(char)*, uint);
int lineSetAppPriorityW(const(wchar)*, uint, LINEEXTENSIONID*, uint, const(wchar)*, uint);
int lineSetAppSpecific(uint, uint);
int lineSetCallData(uint, void*, uint);
int lineSetCallParams(uint, uint, uint, uint, const(LINEDIALPARAMS)*);
int lineSetCallPrivilege(uint, uint);
int lineSetCallQualityOfService(uint, void*, uint, void*, uint);
int lineSetCallTreatment(uint, uint);
int lineSetCurrentLocation(uint, uint);
int lineSetDevConfig(uint, const(void)*, uint, const(char)*);
int lineSetDevConfigA(uint, const(void)*, uint, const(char)*);
int lineSetDevConfigW(uint, const(void)*, uint, const(wchar)*);
int lineSetLineDevStatus(uint, uint, uint);
int lineSetMediaControl(uint, uint, uint, uint, const(LINEMEDIACONTROLDIGIT)*, uint, const(LINEMEDIACONTROLMEDIA)*, uint, const(LINEMEDIACONTROLTONE)*, uint, const(LINEMEDIACONTROLCALLSTATE)*, uint);
int lineSetMediaMode(uint, uint);
int lineSetQueueMeasurementPeriod(uint, uint, uint);
int lineSetNumRings(uint, uint, uint);
int lineSetStatusMessages(uint, uint, uint);
int lineSetTerminal(uint, uint, uint, uint, uint, uint, uint);
int lineSetTollList(uint, uint, const(char)*, uint);
int lineSetTollListA(uint, uint, const(char)*, uint);
int lineSetTollListW(uint, uint, const(wchar)*, uint);
int lineSetupConference(uint, uint, uint*, uint*, uint, const(LINECALLPARAMS)*);
int lineSetupConferenceA(uint, uint, uint*, uint*, uint, const(LINECALLPARAMS)*);
int lineSetupConferenceW(uint, uint, uint*, uint*, uint, const(LINECALLPARAMS)*);
int lineSetupTransfer(uint, uint*, const(LINECALLPARAMS)*);
int lineSetupTransferA(uint, uint*, const(LINECALLPARAMS)*);
int lineSetupTransferW(uint, uint*, const(LINECALLPARAMS)*);
int lineShutdown(uint);
int lineSwapHold(uint, uint);
int lineTranslateAddress(uint, uint, uint, const(char)*, uint, uint, LINETRANSLATEOUTPUT*);
int lineTranslateAddressA(uint, uint, uint, const(char)*, uint, uint, LINETRANSLATEOUTPUT*);
int lineTranslateAddressW(uint, uint, uint, const(wchar)*, uint, uint, LINETRANSLATEOUTPUT*);
int lineTranslateDialog(uint, uint, uint, HWND, const(char)*);
int lineTranslateDialogA(uint, uint, uint, HWND, const(char)*);
int lineTranslateDialogW(uint, uint, uint, HWND, const(wchar)*);
int lineUncompleteCall(uint, uint);
int lineUnhold(uint);
int lineUnpark(uint, uint, uint*, const(char)*);
int lineUnparkA(uint, uint, uint*, const(char)*);
int lineUnparkW(uint, uint, uint*, const(wchar)*);
int phoneClose(uint);
int phoneConfigDialog(uint, HWND, const(char)*);
int phoneConfigDialogA(uint, HWND, const(char)*);
int phoneConfigDialogW(uint, HWND, const(wchar)*);
int phoneDevSpecific(uint, void*, uint);
int phoneGetButtonInfo(uint, uint, PHONEBUTTONINFO*);
int phoneGetButtonInfoA(uint, uint, PHONEBUTTONINFO*);
int phoneGetButtonInfoW(uint, uint, PHONEBUTTONINFO*);
int phoneGetData(uint, uint, void*, uint);
int phoneGetDevCaps(uint, uint, uint, uint, PHONECAPS*);
int phoneGetDevCapsA(uint, uint, uint, uint, PHONECAPS*);
int phoneGetDevCapsW(uint, uint, uint, uint, PHONECAPS*);
int phoneGetDisplay(uint, VARSTRING*);
int phoneGetGain(uint, uint, uint*);
int phoneGetHookSwitch(uint, uint*);
int phoneGetIcon(uint, const(char)*, long*);
int phoneGetIconA(uint, const(char)*, long*);
int phoneGetIconW(uint, const(wchar)*, long*);
int phoneGetID(uint, VARSTRING*, const(char)*);
int phoneGetIDA(uint, VARSTRING*, const(char)*);
int phoneGetIDW(uint, VARSTRING*, const(wchar)*);
int phoneGetLamp(uint, uint, uint*);
int phoneGetMessage(uint, PHONEMESSAGE*, uint);
int phoneGetRing(uint, uint*, uint*);
int phoneGetStatus(uint, PHONESTATUS*);
int phoneGetStatusA(uint, PHONESTATUS*);
int phoneGetStatusW(uint, PHONESTATUS*);
int phoneGetStatusMessages(uint, uint*, uint*, uint*);
int phoneGetVolume(uint, uint, uint*);
int phoneInitialize(uint*, HINSTANCE, PHONECALLBACK, const(char)*, uint*);
int phoneInitializeExA(uint*, HINSTANCE, PHONECALLBACK, const(char)*, uint*, uint*, PHONEINITIALIZEEXPARAMS*);
int phoneInitializeExW(uint*, HINSTANCE, PHONECALLBACK, const(wchar)*, uint*, uint*, PHONEINITIALIZEEXPARAMS*);
int phoneNegotiateAPIVersion(uint, uint, uint, uint, uint*, PHONEEXTENSIONID*);
int phoneNegotiateExtVersion(uint, uint, uint, uint, uint, uint*);
int phoneOpen(uint, uint, uint*, uint, uint, ulong, uint);
int phoneSetButtonInfo(uint, uint, const(PHONEBUTTONINFO)*);
int phoneSetButtonInfoA(uint, uint, const(PHONEBUTTONINFO)*);
int phoneSetButtonInfoW(uint, uint, const(PHONEBUTTONINFO)*);
int phoneSetData(uint, uint, const(void)*, uint);
int phoneSetDisplay(uint, uint, uint, const(char)*, uint);
int phoneSetGain(uint, uint, uint);
int phoneSetHookSwitch(uint, uint, uint);
int phoneSetLamp(uint, uint, uint);
int phoneSetRing(uint, uint, uint);
int phoneSetStatusMessages(uint, uint, uint, uint);
int phoneSetVolume(uint, uint, uint);
int phoneShutdown(uint);
int tapiGetLocationInfo(PSTR, PSTR);
int tapiGetLocationInfoA(PSTR, PSTR);
int tapiGetLocationInfoW(PWSTR, PWSTR);
int tapiRequestDrop(HWND, WPARAM);
int tapiRequestMakeCall(const(char)*, const(char)*, const(char)*, const(char)*);
int tapiRequestMakeCallA(const(char)*, const(char)*, const(char)*, const(char)*);
int tapiRequestMakeCallW(const(wchar)*, const(wchar)*, const(wchar)*, const(wchar)*);
int tapiRequestMediaCall(HWND, WPARAM, const(char)*, const(char)*, uint, uint, const(char)*, const(char)*, const(char)*, const(char)*);
int tapiRequestMediaCallA(HWND, WPARAM, const(char)*, const(char)*, uint, uint, const(char)*, const(char)*, const(char)*, const(char)*);
int tapiRequestMediaCallW(HWND, WPARAM, const(wchar)*, const(wchar)*, uint, uint, const(wchar)*, const(wchar)*, const(wchar)*, const(wchar)*);
HRESULT OpenTnefStream(void*, IStream, byte*, uint, IMessage, ushort, ITnef*);
HRESULT OpenTnefStreamEx(void*, IStream, byte*, uint, IMessage, ushort, IAddrBook, ITnef*);
HRESULT GetTnefStreamCodepage(IStream, uint*, uint*);
enum TAPI_CURRENT_VERSION = 0x00020002;
enum LINE_ADDRESSSTATE = 0x00000000;
enum LINE_CALLINFO = 0x00000001;
enum LINE_CALLSTATE = 0x00000002;
enum LINE_CLOSE = 0x00000003;
enum LINE_DEVSPECIFIC = 0x00000004;
enum LINE_DEVSPECIFICFEATURE = 0x00000005;
enum LINE_GATHERDIGITS = 0x00000006;
enum LINE_GENERATE = 0x00000007;
enum LINE_LINEDEVSTATE = 0x00000008;
enum LINE_MONITORDIGITS = 0x00000009;
enum LINE_MONITORMEDIA = 0x0000000a;
enum LINE_MONITORTONE = 0x0000000b;
enum LINE_REPLY = 0x0000000c;
enum LINE_REQUEST = 0x0000000d;
enum PHONE_BUTTON = 0x0000000e;
enum PHONE_CLOSE = 0x0000000f;
enum PHONE_DEVSPECIFIC = 0x00000010;
enum PHONE_REPLY = 0x00000011;
enum PHONE_STATE = 0x00000012;
enum LINE_CREATE = 0x00000013;
enum PHONE_CREATE = 0x00000014;
enum LINE_AGENTSPECIFIC = 0x00000015;
enum LINE_AGENTSTATUS = 0x00000016;
enum LINE_APPNEWCALL = 0x00000017;
enum LINE_PROXYREQUEST = 0x00000018;
enum LINE_REMOVE = 0x00000019;
enum PHONE_REMOVE = 0x0000001a;
enum LINE_AGENTSESSIONSTATUS = 0x0000001b;
enum LINE_QUEUESTATUS = 0x0000001c;
enum LINE_AGENTSTATUSEX = 0x0000001d;
enum LINE_GROUPSTATUS = 0x0000001e;
enum LINE_PROXYSTATUS = 0x0000001f;
enum LINE_APPNEWCALLHUB = 0x00000020;
enum LINE_CALLHUBCLOSE = 0x00000021;
enum LINE_DEVSPECIFICEX = 0x00000022;
enum INITIALIZE_NEGOTIATION = 0xffffffff;
enum LINEADDRCAPFLAGS_FWDNUMRINGS = 0x00000001;
enum LINEADDRCAPFLAGS_PICKUPGROUPID = 0x00000002;
enum LINEADDRCAPFLAGS_SECURE = 0x00000004;
enum LINEADDRCAPFLAGS_BLOCKIDDEFAULT = 0x00000008;
enum LINEADDRCAPFLAGS_BLOCKIDOVERRIDE = 0x00000010;
enum LINEADDRCAPFLAGS_DIALED = 0x00000020;
enum LINEADDRCAPFLAGS_ORIGOFFHOOK = 0x00000040;
enum LINEADDRCAPFLAGS_DESTOFFHOOK = 0x00000080;
enum LINEADDRCAPFLAGS_FWDCONSULT = 0x00000100;
enum LINEADDRCAPFLAGS_SETUPCONFNULL = 0x00000200;
enum LINEADDRCAPFLAGS_AUTORECONNECT = 0x00000400;
enum LINEADDRCAPFLAGS_COMPLETIONID = 0x00000800;
enum LINEADDRCAPFLAGS_TRANSFERHELD = 0x00001000;
enum LINEADDRCAPFLAGS_TRANSFERMAKE = 0x00002000;
enum LINEADDRCAPFLAGS_CONFERENCEHELD = 0x00004000;
enum LINEADDRCAPFLAGS_CONFERENCEMAKE = 0x00008000;
enum LINEADDRCAPFLAGS_PARTIALDIAL = 0x00010000;
enum LINEADDRCAPFLAGS_FWDSTATUSVALID = 0x00020000;
enum LINEADDRCAPFLAGS_FWDINTEXTADDR = 0x00040000;
enum LINEADDRCAPFLAGS_FWDBUSYNAADDR = 0x00080000;
enum LINEADDRCAPFLAGS_ACCEPTTOALERT = 0x00100000;
enum LINEADDRCAPFLAGS_CONFDROP = 0x00200000;
enum LINEADDRCAPFLAGS_PICKUPCALLWAIT = 0x00400000;
enum LINEADDRCAPFLAGS_PREDICTIVEDIALER = 0x00800000;
enum LINEADDRCAPFLAGS_QUEUE = 0x01000000;
enum LINEADDRCAPFLAGS_ROUTEPOINT = 0x02000000;
enum LINEADDRCAPFLAGS_HOLDMAKESNEW = 0x04000000;
enum LINEADDRCAPFLAGS_NOINTERNALCALLS = 0x08000000;
enum LINEADDRCAPFLAGS_NOEXTERNALCALLS = 0x10000000;
enum LINEADDRCAPFLAGS_SETCALLINGID = 0x20000000;
enum LINEADDRCAPFLAGS_ACDGROUP = 0x40000000;
enum LINEADDRCAPFLAGS_NOPSTNADDRESSTRANSLATION = 0x80000000;
enum LINEADDRESSMODE_ADDRESSID = 0x00000001;
enum LINEADDRESSMODE_DIALABLEADDR = 0x00000002;
enum LINEADDRESSSHARING_PRIVATE = 0x00000001;
enum LINEADDRESSSHARING_BRIDGEDEXCL = 0x00000002;
enum LINEADDRESSSHARING_BRIDGEDNEW = 0x00000004;
enum LINEADDRESSSHARING_BRIDGEDSHARED = 0x00000008;
enum LINEADDRESSSHARING_MONITORED = 0x00000010;
enum LINEADDRESSSTATE_OTHER = 0x00000001;
enum LINEADDRESSSTATE_DEVSPECIFIC = 0x00000002;
enum LINEADDRESSSTATE_INUSEZERO = 0x00000004;
enum LINEADDRESSSTATE_INUSEONE = 0x00000008;
enum LINEADDRESSSTATE_INUSEMANY = 0x00000010;
enum LINEADDRESSSTATE_NUMCALLS = 0x00000020;
enum LINEADDRESSSTATE_FORWARD = 0x00000040;
enum LINEADDRESSSTATE_TERMINALS = 0x00000080;
enum LINEADDRESSSTATE_CAPSCHANGE = 0x00000100;
enum LINEADDRESSTYPE_PHONENUMBER = 0x00000001;
enum LINEADDRESSTYPE_SDP = 0x00000002;
enum LINEADDRESSTYPE_EMAILNAME = 0x00000004;
enum LINEADDRESSTYPE_DOMAINNAME = 0x00000008;
enum LINEADDRESSTYPE_IPADDRESS = 0x00000010;
enum LINEADDRFEATURE_FORWARD = 0x00000001;
enum LINEADDRFEATURE_MAKECALL = 0x00000002;
enum LINEADDRFEATURE_PICKUP = 0x00000004;
enum LINEADDRFEATURE_SETMEDIACONTROL = 0x00000008;
enum LINEADDRFEATURE_SETTERMINAL = 0x00000010;
enum LINEADDRFEATURE_SETUPCONF = 0x00000020;
enum LINEADDRFEATURE_UNCOMPLETECALL = 0x00000040;
enum LINEADDRFEATURE_UNPARK = 0x00000080;
enum LINEADDRFEATURE_PICKUPHELD = 0x00000100;
enum LINEADDRFEATURE_PICKUPGROUP = 0x00000200;
enum LINEADDRFEATURE_PICKUPDIRECT = 0x00000400;
enum LINEADDRFEATURE_PICKUPWAITING = 0x00000800;
enum LINEADDRFEATURE_FORWARDFWD = 0x00001000;
enum LINEADDRFEATURE_FORWARDDND = 0x00002000;
enum LINEAGENTFEATURE_SETAGENTGROUP = 0x00000001;
enum LINEAGENTFEATURE_SETAGENTSTATE = 0x00000002;
enum LINEAGENTFEATURE_SETAGENTACTIVITY = 0x00000004;
enum LINEAGENTFEATURE_AGENTSPECIFIC = 0x00000008;
enum LINEAGENTFEATURE_GETAGENTACTIVITYLIST = 0x00000010;
enum LINEAGENTFEATURE_GETAGENTGROUP = 0x00000020;
enum LINEAGENTSTATE_LOGGEDOFF = 0x00000001;
enum LINEAGENTSTATE_NOTREADY = 0x00000002;
enum LINEAGENTSTATE_READY = 0x00000004;
enum LINEAGENTSTATE_BUSYACD = 0x00000008;
enum LINEAGENTSTATE_BUSYINCOMING = 0x00000010;
enum LINEAGENTSTATE_BUSYOUTBOUND = 0x00000020;
enum LINEAGENTSTATE_BUSYOTHER = 0x00000040;
enum LINEAGENTSTATE_WORKINGAFTERCALL = 0x00000080;
enum LINEAGENTSTATE_UNKNOWN = 0x00000100;
enum LINEAGENTSTATE_UNAVAIL = 0x00000200;
enum LINEAGENTSTATUS_GROUP = 0x00000001;
enum LINEAGENTSTATUS_STATE = 0x00000002;
enum LINEAGENTSTATUS_NEXTSTATE = 0x00000004;
enum LINEAGENTSTATUS_ACTIVITY = 0x00000008;
enum LINEAGENTSTATUS_ACTIVITYLIST = 0x00000010;
enum LINEAGENTSTATUS_GROUPLIST = 0x00000020;
enum LINEAGENTSTATUS_CAPSCHANGE = 0x00000040;
enum LINEAGENTSTATUS_VALIDSTATES = 0x00000080;
enum LINEAGENTSTATUS_VALIDNEXTSTATES = 0x00000100;
enum LINEAGENTSTATEEX_NOTREADY = 0x00000001;
enum LINEAGENTSTATEEX_READY = 0x00000002;
enum LINEAGENTSTATEEX_BUSYACD = 0x00000004;
enum LINEAGENTSTATEEX_BUSYINCOMING = 0x00000008;
enum LINEAGENTSTATEEX_BUSYOUTGOING = 0x00000010;
enum LINEAGENTSTATEEX_UNKNOWN = 0x00000020;
enum LINEAGENTSTATEEX_RELEASED = 0x00000040;
enum LINEAGENTSTATUSEX_NEWAGENT = 0x00000001;
enum LINEAGENTSTATUSEX_STATE = 0x00000002;
enum LINEAGENTSTATUSEX_UPDATEINFO = 0x00000004;
enum LINEAGENTSESSIONSTATE_NOTREADY = 0x00000001;
enum LINEAGENTSESSIONSTATE_READY = 0x00000002;
enum LINEAGENTSESSIONSTATE_BUSYONCALL = 0x00000004;
enum LINEAGENTSESSIONSTATE_BUSYWRAPUP = 0x00000008;
enum LINEAGENTSESSIONSTATE_ENDED = 0x00000010;
enum LINEAGENTSESSIONSTATE_RELEASED = 0x00000020;
enum LINEAGENTSESSIONSTATUS_NEWSESSION = 0x00000001;
enum LINEAGENTSESSIONSTATUS_STATE = 0x00000002;
enum LINEAGENTSESSIONSTATUS_UPDATEINFO = 0x00000004;
enum LINEQUEUESTATUS_UPDATEINFO = 0x00000001;
enum LINEQUEUESTATUS_NEWQUEUE = 0x00000002;
enum LINEQUEUESTATUS_QUEUEREMOVED = 0x00000004;
enum LINEGROUPSTATUS_NEWGROUP = 0x00000001;
enum LINEGROUPSTATUS_GROUPREMOVED = 0x00000002;
enum LINEPROXYSTATUS_OPEN = 0x00000001;
enum LINEPROXYSTATUS_CLOSE = 0x00000002;
enum LINEPROXYSTATUS_ALLOPENFORACD = 0x00000004;
enum LINEANSWERMODE_NONE = 0x00000001;
enum LINEANSWERMODE_DROP = 0x00000002;
enum LINEANSWERMODE_HOLD = 0x00000004;
enum LINEBEARERMODE_VOICE = 0x00000001;
enum LINEBEARERMODE_SPEECH = 0x00000002;
enum LINEBEARERMODE_MULTIUSE = 0x00000004;
enum LINEBEARERMODE_DATA = 0x00000008;
enum LINEBEARERMODE_ALTSPEECHDATA = 0x00000010;
enum LINEBEARERMODE_NONCALLSIGNALING = 0x00000020;
enum LINEBEARERMODE_PASSTHROUGH = 0x00000040;
enum LINEBEARERMODE_RESTRICTEDDATA = 0x00000080;
enum LINEBUSYMODE_STATION = 0x00000001;
enum LINEBUSYMODE_TRUNK = 0x00000002;
enum LINEBUSYMODE_UNKNOWN = 0x00000004;
enum LINEBUSYMODE_UNAVAIL = 0x00000008;
enum LINECALLCOMPLCOND_BUSY = 0x00000001;
enum LINECALLCOMPLCOND_NOANSWER = 0x00000002;
enum LINECALLCOMPLMODE_CAMPON = 0x00000001;
enum LINECALLCOMPLMODE_CALLBACK = 0x00000002;
enum LINECALLCOMPLMODE_INTRUDE = 0x00000004;
enum LINECALLCOMPLMODE_MESSAGE = 0x00000008;
enum LINECALLFEATURE_ACCEPT = 0x00000001;
enum LINECALLFEATURE_ADDTOCONF = 0x00000002;
enum LINECALLFEATURE_ANSWER = 0x00000004;
enum LINECALLFEATURE_BLINDTRANSFER = 0x00000008;
enum LINECALLFEATURE_COMPLETECALL = 0x00000010;
enum LINECALLFEATURE_COMPLETETRANSF = 0x00000020;
enum LINECALLFEATURE_DIAL = 0x00000040;
enum LINECALLFEATURE_DROP = 0x00000080;
enum LINECALLFEATURE_GATHERDIGITS = 0x00000100;
enum LINECALLFEATURE_GENERATEDIGITS = 0x00000200;
enum LINECALLFEATURE_GENERATETONE = 0x00000400;
enum LINECALLFEATURE_HOLD = 0x00000800;
enum LINECALLFEATURE_MONITORDIGITS = 0x00001000;
enum LINECALLFEATURE_MONITORMEDIA = 0x00002000;
enum LINECALLFEATURE_MONITORTONES = 0x00004000;
enum LINECALLFEATURE_PARK = 0x00008000;
enum LINECALLFEATURE_PREPAREADDCONF = 0x00010000;
enum LINECALLFEATURE_REDIRECT = 0x00020000;
enum LINECALLFEATURE_REMOVEFROMCONF = 0x00040000;
enum LINECALLFEATURE_SECURECALL = 0x00080000;
enum LINECALLFEATURE_SENDUSERUSER = 0x00100000;
enum LINECALLFEATURE_SETCALLPARAMS = 0x00200000;
enum LINECALLFEATURE_SETMEDIACONTROL = 0x00400000;
enum LINECALLFEATURE_SETTERMINAL = 0x00800000;
enum LINECALLFEATURE_SETUPCONF = 0x01000000;
enum LINECALLFEATURE_SETUPTRANSFER = 0x02000000;
enum LINECALLFEATURE_SWAPHOLD = 0x04000000;
enum LINECALLFEATURE_UNHOLD = 0x08000000;
enum LINECALLFEATURE_RELEASEUSERUSERINFO = 0x10000000;
enum LINECALLFEATURE_SETTREATMENT = 0x20000000;
enum LINECALLFEATURE_SETQOS = 0x40000000;
enum LINECALLFEATURE_SETCALLDATA = 0x80000000;
enum LINECALLFEATURE2_NOHOLDCONFERENCE = 0x00000001;
enum LINECALLFEATURE2_ONESTEPTRANSFER = 0x00000002;
enum LINECALLFEATURE2_COMPLCAMPON = 0x00000004;
enum LINECALLFEATURE2_COMPLCALLBACK = 0x00000008;
enum LINECALLFEATURE2_COMPLINTRUDE = 0x00000010;
enum LINECALLFEATURE2_COMPLMESSAGE = 0x00000020;
enum LINECALLFEATURE2_TRANSFERNORM = 0x00000040;
enum LINECALLFEATURE2_TRANSFERCONF = 0x00000080;
enum LINECALLFEATURE2_PARKDIRECT = 0x00000100;
enum LINECALLFEATURE2_PARKNONDIRECT = 0x00000200;
enum LINECALLHUBTRACKING_NONE = 0x00000000;
enum LINECALLHUBTRACKING_PROVIDERLEVEL = 0x00000001;
enum LINECALLHUBTRACKING_ALLCALLS = 0x00000002;
enum LINECALLINFOSTATE_OTHER = 0x00000001;
enum LINECALLINFOSTATE_DEVSPECIFIC = 0x00000002;
enum LINECALLINFOSTATE_BEARERMODE = 0x00000004;
enum LINECALLINFOSTATE_RATE = 0x00000008;
enum LINECALLINFOSTATE_MEDIAMODE = 0x00000010;
enum LINECALLINFOSTATE_APPSPECIFIC = 0x00000020;
enum LINECALLINFOSTATE_CALLID = 0x00000040;
enum LINECALLINFOSTATE_RELATEDCALLID = 0x00000080;
enum LINECALLINFOSTATE_ORIGIN = 0x00000100;
enum LINECALLINFOSTATE_REASON = 0x00000200;
enum LINECALLINFOSTATE_COMPLETIONID = 0x00000400;
enum LINECALLINFOSTATE_NUMOWNERINCR = 0x00000800;
enum LINECALLINFOSTATE_NUMOWNERDECR = 0x00001000;
enum LINECALLINFOSTATE_NUMMONITORS = 0x00002000;
enum LINECALLINFOSTATE_TRUNK = 0x00004000;
enum LINECALLINFOSTATE_CALLERID = 0x00008000;
enum LINECALLINFOSTATE_CALLEDID = 0x00010000;
enum LINECALLINFOSTATE_CONNECTEDID = 0x00020000;
enum LINECALLINFOSTATE_REDIRECTIONID = 0x00040000;
enum LINECALLINFOSTATE_REDIRECTINGID = 0x00080000;
enum LINECALLINFOSTATE_DISPLAY = 0x00100000;
enum LINECALLINFOSTATE_USERUSERINFO = 0x00200000;
enum LINECALLINFOSTATE_HIGHLEVELCOMP = 0x00400000;
enum LINECALLINFOSTATE_LOWLEVELCOMP = 0x00800000;
enum LINECALLINFOSTATE_CHARGINGINFO = 0x01000000;
enum LINECALLINFOSTATE_TERMINAL = 0x02000000;
enum LINECALLINFOSTATE_DIALPARAMS = 0x04000000;
enum LINECALLINFOSTATE_MONITORMODES = 0x08000000;
enum LINECALLINFOSTATE_TREATMENT = 0x10000000;
enum LINECALLINFOSTATE_QOS = 0x20000000;
enum LINECALLINFOSTATE_CALLDATA = 0x40000000;
enum LINECALLORIGIN_OUTBOUND = 0x00000001;
enum LINECALLORIGIN_INTERNAL = 0x00000002;
enum LINECALLORIGIN_EXTERNAL = 0x00000004;
enum LINECALLORIGIN_UNKNOWN = 0x00000010;
enum LINECALLORIGIN_UNAVAIL = 0x00000020;
enum LINECALLORIGIN_CONFERENCE = 0x00000040;
enum LINECALLORIGIN_INBOUND = 0x00000080;
enum LINECALLPARAMFLAGS_SECURE = 0x00000001;
enum LINECALLPARAMFLAGS_IDLE = 0x00000002;
enum LINECALLPARAMFLAGS_BLOCKID = 0x00000004;
enum LINECALLPARAMFLAGS_ORIGOFFHOOK = 0x00000008;
enum LINECALLPARAMFLAGS_DESTOFFHOOK = 0x00000010;
enum LINECALLPARAMFLAGS_NOHOLDCONFERENCE = 0x00000020;
enum LINECALLPARAMFLAGS_PREDICTIVEDIAL = 0x00000040;
enum LINECALLPARAMFLAGS_ONESTEPTRANSFER = 0x00000080;
enum LINECALLPARTYID_BLOCKED = 0x00000001;
enum LINECALLPARTYID_OUTOFAREA = 0x00000002;
enum LINECALLPARTYID_NAME = 0x00000004;
enum LINECALLPARTYID_ADDRESS = 0x00000008;
enum LINECALLPARTYID_PARTIAL = 0x00000010;
enum LINECALLPARTYID_UNKNOWN = 0x00000020;
enum LINECALLPARTYID_UNAVAIL = 0x00000040;
enum LINECALLPRIVILEGE_NONE = 0x00000001;
enum LINECALLPRIVILEGE_MONITOR = 0x00000002;
enum LINECALLPRIVILEGE_OWNER = 0x00000004;
enum LINECALLREASON_DIRECT = 0x00000001;
enum LINECALLREASON_FWDBUSY = 0x00000002;
enum LINECALLREASON_FWDNOANSWER = 0x00000004;
enum LINECALLREASON_FWDUNCOND = 0x00000008;
enum LINECALLREASON_PICKUP = 0x00000010;
enum LINECALLREASON_UNPARK = 0x00000020;
enum LINECALLREASON_REDIRECT = 0x00000040;
enum LINECALLREASON_CALLCOMPLETION = 0x00000080;
enum LINECALLREASON_TRANSFER = 0x00000100;
enum LINECALLREASON_REMINDER = 0x00000200;
enum LINECALLREASON_UNKNOWN = 0x00000400;
enum LINECALLREASON_UNAVAIL = 0x00000800;
enum LINECALLREASON_INTRUDE = 0x00001000;
enum LINECALLREASON_PARKED = 0x00002000;
enum LINECALLREASON_CAMPEDON = 0x00004000;
enum LINECALLREASON_ROUTEREQUEST = 0x00008000;
enum LINECALLSELECT_LINE = 0x00000001;
enum LINECALLSELECT_ADDRESS = 0x00000002;
enum LINECALLSELECT_CALL = 0x00000004;
enum LINECALLSELECT_DEVICEID = 0x00000008;
enum LINECALLSELECT_CALLID = 0x00000010;
enum LINECALLSTATE_IDLE = 0x00000001;
enum LINECALLSTATE_OFFERING = 0x00000002;
enum LINECALLSTATE_ACCEPTED = 0x00000004;
enum LINECALLSTATE_DIALTONE = 0x00000008;
enum LINECALLSTATE_DIALING = 0x00000010;
enum LINECALLSTATE_RINGBACK = 0x00000020;
enum LINECALLSTATE_BUSY = 0x00000040;
enum LINECALLSTATE_SPECIALINFO = 0x00000080;
enum LINECALLSTATE_CONNECTED = 0x00000100;
enum LINECALLSTATE_PROCEEDING = 0x00000200;
enum LINECALLSTATE_ONHOLD = 0x00000400;
enum LINECALLSTATE_CONFERENCED = 0x00000800;
enum LINECALLSTATE_ONHOLDPENDCONF = 0x00001000;
enum LINECALLSTATE_ONHOLDPENDTRANSFER = 0x00002000;
enum LINECALLSTATE_DISCONNECTED = 0x00004000;
enum LINECALLSTATE_UNKNOWN = 0x00008000;
enum LINECALLTREATMENT_SILENCE = 0x00000001;
enum LINECALLTREATMENT_RINGBACK = 0x00000002;
enum LINECALLTREATMENT_BUSY = 0x00000003;
enum LINECALLTREATMENT_MUSIC = 0x00000004;
enum LINECARDOPTION_PREDEFINED = 0x00000001;
enum LINECARDOPTION_HIDDEN = 0x00000002;
enum LINECONNECTEDMODE_ACTIVE = 0x00000001;
enum LINECONNECTEDMODE_INACTIVE = 0x00000002;
enum LINECONNECTEDMODE_ACTIVEHELD = 0x00000004;
enum LINECONNECTEDMODE_INACTIVEHELD = 0x00000008;
enum LINECONNECTEDMODE_CONFIRMED = 0x00000010;
enum LINEDEVCAPFLAGS_CROSSADDRCONF = 0x00000001;
enum LINEDEVCAPFLAGS_HIGHLEVCOMP = 0x00000002;
enum LINEDEVCAPFLAGS_LOWLEVCOMP = 0x00000004;
enum LINEDEVCAPFLAGS_MEDIACONTROL = 0x00000008;
enum LINEDEVCAPFLAGS_MULTIPLEADDR = 0x00000010;
enum LINEDEVCAPFLAGS_CLOSEDROP = 0x00000020;
enum LINEDEVCAPFLAGS_DIALBILLING = 0x00000040;
enum LINEDEVCAPFLAGS_DIALQUIET = 0x00000080;
enum LINEDEVCAPFLAGS_DIALDIALTONE = 0x00000100;
enum LINEDEVCAPFLAGS_MSP = 0x00000200;
enum LINEDEVCAPFLAGS_CALLHUB = 0x00000400;
enum LINEDEVCAPFLAGS_CALLHUBTRACKING = 0x00000800;
enum LINEDEVCAPFLAGS_PRIVATEOBJECTS = 0x00001000;
enum LINEDEVCAPFLAGS_LOCAL = 0x00002000;
enum LINEDEVSTATE_OTHER = 0x00000001;
enum LINEDEVSTATE_RINGING = 0x00000002;
enum LINEDEVSTATE_CONNECTED = 0x00000004;
enum LINEDEVSTATE_DISCONNECTED = 0x00000008;
enum LINEDEVSTATE_MSGWAITON = 0x00000010;
enum LINEDEVSTATE_MSGWAITOFF = 0x00000020;
enum LINEDEVSTATE_INSERVICE = 0x00000040;
enum LINEDEVSTATE_OUTOFSERVICE = 0x00000080;
enum LINEDEVSTATE_MAINTENANCE = 0x00000100;
enum LINEDEVSTATE_OPEN = 0x00000200;
enum LINEDEVSTATE_CLOSE = 0x00000400;
enum LINEDEVSTATE_NUMCALLS = 0x00000800;
enum LINEDEVSTATE_NUMCOMPLETIONS = 0x00001000;
enum LINEDEVSTATE_TERMINALS = 0x00002000;
enum LINEDEVSTATE_ROAMMODE = 0x00004000;
enum LINEDEVSTATE_BATTERY = 0x00008000;
enum LINEDEVSTATE_SIGNAL = 0x00010000;
enum LINEDEVSTATE_DEVSPECIFIC = 0x00020000;
enum LINEDEVSTATE_REINIT = 0x00040000;
enum LINEDEVSTATE_LOCK = 0x00080000;
enum LINEDEVSTATE_CAPSCHANGE = 0x00100000;
enum LINEDEVSTATE_CONFIGCHANGE = 0x00200000;
enum LINEDEVSTATE_TRANSLATECHANGE = 0x00400000;
enum LINEDEVSTATE_COMPLCANCEL = 0x00800000;
enum LINEDEVSTATE_REMOVED = 0x01000000;
enum LINEDEVSTATUSFLAGS_CONNECTED = 0x00000001;
enum LINEDEVSTATUSFLAGS_MSGWAIT = 0x00000002;
enum LINEDEVSTATUSFLAGS_INSERVICE = 0x00000004;
enum LINEDEVSTATUSFLAGS_LOCKED = 0x00000008;
enum LINEDIALTONEMODE_NORMAL = 0x00000001;
enum LINEDIALTONEMODE_SPECIAL = 0x00000002;
enum LINEDIALTONEMODE_INTERNAL = 0x00000004;
enum LINEDIALTONEMODE_EXTERNAL = 0x00000008;
enum LINEDIALTONEMODE_UNKNOWN = 0x00000010;
enum LINEDIALTONEMODE_UNAVAIL = 0x00000020;
enum LINEDIGITMODE_PULSE = 0x00000001;
enum LINEDIGITMODE_DTMF = 0x00000002;
enum LINEDIGITMODE_DTMFEND = 0x00000004;
enum LINEDISCONNECTMODE_NORMAL = 0x00000001;
enum LINEDISCONNECTMODE_UNKNOWN = 0x00000002;
enum LINEDISCONNECTMODE_REJECT = 0x00000004;
enum LINEDISCONNECTMODE_PICKUP = 0x00000008;
enum LINEDISCONNECTMODE_FORWARDED = 0x00000010;
enum LINEDISCONNECTMODE_BUSY = 0x00000020;
enum LINEDISCONNECTMODE_NOANSWER = 0x00000040;
enum LINEDISCONNECTMODE_BADADDRESS = 0x00000080;
enum LINEDISCONNECTMODE_UNREACHABLE = 0x00000100;
enum LINEDISCONNECTMODE_CONGESTION = 0x00000200;
enum LINEDISCONNECTMODE_INCOMPATIBLE = 0x00000400;
enum LINEDISCONNECTMODE_UNAVAIL = 0x00000800;
enum LINEDISCONNECTMODE_NODIALTONE = 0x00001000;
enum LINEDISCONNECTMODE_NUMBERCHANGED = 0x00002000;
enum LINEDISCONNECTMODE_OUTOFORDER = 0x00004000;
enum LINEDISCONNECTMODE_TEMPFAILURE = 0x00008000;
enum LINEDISCONNECTMODE_QOSUNAVAIL = 0x00010000;
enum LINEDISCONNECTMODE_BLOCKED = 0x00020000;
enum LINEDISCONNECTMODE_DONOTDISTURB = 0x00040000;
enum LINEDISCONNECTMODE_CANCELLED = 0x00080000;
enum LINEDISCONNECTMODE_DESTINATIONBARRED = 0x00100000;
enum LINEDISCONNECTMODE_FDNRESTRICT = 0x00200000;
enum LINEERR_ALLOCATED = 0x80000001;
enum LINEERR_BADDEVICEID = 0x80000002;
enum LINEERR_BEARERMODEUNAVAIL = 0x80000003;
enum LINEERR_CALLUNAVAIL = 0x80000005;
enum LINEERR_COMPLETIONOVERRUN = 0x80000006;
enum LINEERR_CONFERENCEFULL = 0x80000007;
enum LINEERR_DIALBILLING = 0x80000008;
enum LINEERR_DIALDIALTONE = 0x80000009;
enum LINEERR_DIALPROMPT = 0x8000000a;
enum LINEERR_DIALQUIET = 0x8000000b;
enum LINEERR_INCOMPATIBLEAPIVERSION = 0x8000000c;
enum LINEERR_INCOMPATIBLEEXTVERSION = 0x8000000d;
enum LINEERR_INIFILECORRUPT = 0x8000000e;
enum LINEERR_INUSE = 0x8000000f;
enum LINEERR_INVALADDRESS = 0x80000010;
enum LINEERR_INVALADDRESSID = 0x80000011;
enum LINEERR_INVALADDRESSMODE = 0x80000012;
enum LINEERR_INVALADDRESSSTATE = 0x80000013;
enum LINEERR_INVALAPPHANDLE = 0x80000014;
enum LINEERR_INVALAPPNAME = 0x80000015;
enum LINEERR_INVALBEARERMODE = 0x80000016;
enum LINEERR_INVALCALLCOMPLMODE = 0x80000017;
enum LINEERR_INVALCALLHANDLE = 0x80000018;
enum LINEERR_INVALCALLPARAMS = 0x80000019;
enum LINEERR_INVALCALLPRIVILEGE = 0x8000001a;
enum LINEERR_INVALCALLSELECT = 0x8000001b;
enum LINEERR_INVALCALLSTATE = 0x8000001c;
enum LINEERR_INVALCALLSTATELIST = 0x8000001d;
enum LINEERR_INVALCARD = 0x8000001e;
enum LINEERR_INVALCOMPLETIONID = 0x8000001f;
enum LINEERR_INVALCONFCALLHANDLE = 0x80000020;
enum LINEERR_INVALCONSULTCALLHANDLE = 0x80000021;
enum LINEERR_INVALCOUNTRYCODE = 0x80000022;
enum LINEERR_INVALDEVICECLASS = 0x80000023;
enum LINEERR_INVALDEVICEHANDLE = 0x80000024;
enum LINEERR_INVALDIALPARAMS = 0x80000025;
enum LINEERR_INVALDIGITLIST = 0x80000026;
enum LINEERR_INVALDIGITMODE = 0x80000027;
enum LINEERR_INVALDIGITS = 0x80000028;
enum LINEERR_INVALEXTVERSION = 0x80000029;
enum LINEERR_INVALGROUPID = 0x8000002a;
enum LINEERR_INVALLINEHANDLE = 0x8000002b;
enum LINEERR_INVALLINESTATE = 0x8000002c;
enum LINEERR_INVALLOCATION = 0x8000002d;
enum LINEERR_INVALMEDIALIST = 0x8000002e;
enum LINEERR_INVALMEDIAMODE = 0x8000002f;
enum LINEERR_INVALMESSAGEID = 0x80000030;
enum LINEERR_INVALPARAM = 0x80000032;
enum LINEERR_INVALPARKID = 0x80000033;
enum LINEERR_INVALPARKMODE = 0x80000034;
enum LINEERR_INVALPOINTER = 0x80000035;
enum LINEERR_INVALPRIVSELECT = 0x80000036;
enum LINEERR_INVALRATE = 0x80000037;
enum LINEERR_INVALREQUESTMODE = 0x80000038;
enum LINEERR_INVALTERMINALID = 0x80000039;
enum LINEERR_INVALTERMINALMODE = 0x8000003a;
enum LINEERR_INVALTIMEOUT = 0x8000003b;
enum LINEERR_INVALTONE = 0x8000003c;
enum LINEERR_INVALTONELIST = 0x8000003d;
enum LINEERR_INVALTONEMODE = 0x8000003e;
enum LINEERR_INVALTRANSFERMODE = 0x8000003f;
enum LINEERR_LINEMAPPERFAILED = 0x80000040;
enum LINEERR_NOCONFERENCE = 0x80000041;
enum LINEERR_NODEVICE = 0x80000042;
enum LINEERR_NODRIVER = 0x80000043;
enum LINEERR_NOMEM = 0x80000044;
enum LINEERR_NOREQUEST = 0x80000045;
enum LINEERR_NOTOWNER = 0x80000046;
enum LINEERR_NOTREGISTERED = 0x80000047;
enum LINEERR_OPERATIONFAILED = 0x80000048;
enum LINEERR_OPERATIONUNAVAIL = 0x80000049;
enum LINEERR_RATEUNAVAIL = 0x8000004a;
enum LINEERR_RESOURCEUNAVAIL = 0x8000004b;
enum LINEERR_REQUESTOVERRUN = 0x8000004c;
enum LINEERR_STRUCTURETOOSMALL = 0x8000004d;
enum LINEERR_TARGETNOTFOUND = 0x8000004e;
enum LINEERR_TARGETSELF = 0x8000004f;
enum LINEERR_UNINITIALIZED = 0x80000050;
enum LINEERR_USERUSERINFOTOOBIG = 0x80000051;
enum LINEERR_REINIT = 0x80000052;
enum LINEERR_ADDRESSBLOCKED = 0x80000053;
enum LINEERR_BILLINGREJECTED = 0x80000054;
enum LINEERR_INVALFEATURE = 0x80000055;
enum LINEERR_NOMULTIPLEINSTANCE = 0x80000056;
enum LINEERR_INVALAGENTID = 0x80000057;
enum LINEERR_INVALAGENTGROUP = 0x80000058;
enum LINEERR_INVALPASSWORD = 0x80000059;
enum LINEERR_INVALAGENTSTATE = 0x8000005a;
enum LINEERR_INVALAGENTACTIVITY = 0x8000005b;
enum LINEERR_DIALVOICEDETECT = 0x8000005c;
enum LINEERR_USERCANCELLED = 0x8000005d;
enum LINEERR_INVALADDRESSTYPE = 0x8000005e;
enum LINEERR_INVALAGENTSESSIONSTATE = 0x8000005f;
enum LINEERR_DISCONNECTED = 0x80000060;
enum LINEERR_SERVICE_NOT_RUNNING = 0x80000061;
enum LINEFEATURE_DEVSPECIFIC = 0x00000001;
enum LINEFEATURE_DEVSPECIFICFEAT = 0x00000002;
enum LINEFEATURE_FORWARD = 0x00000004;
enum LINEFEATURE_MAKECALL = 0x00000008;
enum LINEFEATURE_SETMEDIACONTROL = 0x00000010;
enum LINEFEATURE_SETTERMINAL = 0x00000020;
enum LINEFEATURE_SETDEVSTATUS = 0x00000040;
enum LINEFEATURE_FORWARDFWD = 0x00000080;
enum LINEFEATURE_FORWARDDND = 0x00000100;
enum LINEFORWARDMODE_UNCOND = 0x00000001;
enum LINEFORWARDMODE_UNCONDINTERNAL = 0x00000002;
enum LINEFORWARDMODE_UNCONDEXTERNAL = 0x00000004;
enum LINEFORWARDMODE_UNCONDSPECIFIC = 0x00000008;
enum LINEFORWARDMODE_BUSY = 0x00000010;
enum LINEFORWARDMODE_BUSYINTERNAL = 0x00000020;
enum LINEFORWARDMODE_BUSYEXTERNAL = 0x00000040;
enum LINEFORWARDMODE_BUSYSPECIFIC = 0x00000080;
enum LINEFORWARDMODE_NOANSW = 0x00000100;
enum LINEFORWARDMODE_NOANSWINTERNAL = 0x00000200;
enum LINEFORWARDMODE_NOANSWEXTERNAL = 0x00000400;
enum LINEFORWARDMODE_NOANSWSPECIFIC = 0x00000800;
enum LINEFORWARDMODE_BUSYNA = 0x00001000;
enum LINEFORWARDMODE_BUSYNAINTERNAL = 0x00002000;
enum LINEFORWARDMODE_BUSYNAEXTERNAL = 0x00004000;
enum LINEFORWARDMODE_BUSYNASPECIFIC = 0x00008000;
enum LINEFORWARDMODE_UNKNOWN = 0x00010000;
enum LINEFORWARDMODE_UNAVAIL = 0x00020000;
enum LINEGATHERTERM_BUFFERFULL = 0x00000001;
enum LINEGATHERTERM_TERMDIGIT = 0x00000002;
enum LINEGATHERTERM_FIRSTTIMEOUT = 0x00000004;
enum LINEGATHERTERM_INTERTIMEOUT = 0x00000008;
enum LINEGATHERTERM_CANCEL = 0x00000010;
enum LINEGENERATETERM_DONE = 0x00000001;
enum LINEGENERATETERM_CANCEL = 0x00000002;
enum LINEINITIALIZEEXOPTION_USEHIDDENWINDOW = 0x00000001;
enum LINEINITIALIZEEXOPTION_USEEVENT = 0x00000002;
enum LINEINITIALIZEEXOPTION_USECOMPLETIONPORT = 0x00000003;
enum LINEINITIALIZEEXOPTION_CALLHUBTRACKING = 0x80000000;
enum LINELOCATIONOPTION_PULSEDIAL = 0x00000001;
enum LINEMAPPER = 0xffffffff;
enum LINEMEDIACONTROL_NONE = 0x00000001;
enum LINEMEDIACONTROL_START = 0x00000002;
enum LINEMEDIACONTROL_RESET = 0x00000004;
enum LINEMEDIACONTROL_PAUSE = 0x00000008;
enum LINEMEDIACONTROL_RESUME = 0x00000010;
enum LINEMEDIACONTROL_RATEUP = 0x00000020;
enum LINEMEDIACONTROL_RATEDOWN = 0x00000040;
enum LINEMEDIACONTROL_RATENORMAL = 0x00000080;
enum LINEMEDIACONTROL_VOLUMEUP = 0x00000100;
enum LINEMEDIACONTROL_VOLUMEDOWN = 0x00000200;
enum LINEMEDIACONTROL_VOLUMENORMAL = 0x00000400;
enum LINEMEDIAMODE_UNKNOWN = 0x00000002;
enum LINEMEDIAMODE_INTERACTIVEVOICE = 0x00000004;
enum LINEMEDIAMODE_AUTOMATEDVOICE = 0x00000008;
enum LINEMEDIAMODE_DATAMODEM = 0x00000010;
enum LINEMEDIAMODE_G3FAX = 0x00000020;
enum LINEMEDIAMODE_TDD = 0x00000040;
enum LINEMEDIAMODE_G4FAX = 0x00000080;
enum LINEMEDIAMODE_DIGITALDATA = 0x00000100;
enum LINEMEDIAMODE_TELETEX = 0x00000200;
enum LINEMEDIAMODE_VIDEOTEX = 0x00000400;
enum LINEMEDIAMODE_TELEX = 0x00000800;
enum LINEMEDIAMODE_MIXED = 0x00001000;
enum LINEMEDIAMODE_ADSI = 0x00002000;
enum LINEMEDIAMODE_VOICEVIEW = 0x00004000;
enum LINEMEDIAMODE_VIDEO = 0x00008000;
enum LAST_LINEMEDIAMODE = 0x00008000;
enum LINEOFFERINGMODE_ACTIVE = 0x00000001;
enum LINEOFFERINGMODE_INACTIVE = 0x00000002;
enum LINEOPENOPTION_SINGLEADDRESS = 0x80000000;
enum LINEOPENOPTION_PROXY = 0x40000000;
enum LINEPARKMODE_DIRECTED = 0x00000001;
enum LINEPARKMODE_NONDIRECTED = 0x00000002;
enum LINEPROXYREQUEST_SETAGENTGROUP = 0x00000001;
enum LINEPROXYREQUEST_SETAGENTSTATE = 0x00000002;
enum LINEPROXYREQUEST_SETAGENTACTIVITY = 0x00000003;
enum LINEPROXYREQUEST_GETAGENTCAPS = 0x00000004;
enum LINEPROXYREQUEST_GETAGENTSTATUS = 0x00000005;
enum LINEPROXYREQUEST_AGENTSPECIFIC = 0x00000006;
enum LINEPROXYREQUEST_GETAGENTACTIVITYLIST = 0x00000007;
enum LINEPROXYREQUEST_GETAGENTGROUPLIST = 0x00000008;
enum LINEPROXYREQUEST_CREATEAGENT = 0x00000009;
enum LINEPROXYREQUEST_SETAGENTMEASUREMENTPERIOD = 0x0000000a;
enum LINEPROXYREQUEST_GETAGENTINFO = 0x0000000b;
enum LINEPROXYREQUEST_CREATEAGENTSESSION = 0x0000000c;
enum LINEPROXYREQUEST_GETAGENTSESSIONLIST = 0x0000000d;
enum LINEPROXYREQUEST_SETAGENTSESSIONSTATE = 0x0000000e;
enum LINEPROXYREQUEST_GETAGENTSESSIONINFO = 0x0000000f;
enum LINEPROXYREQUEST_GETQUEUELIST = 0x00000010;
enum LINEPROXYREQUEST_SETQUEUEMEASUREMENTPERIOD = 0x00000011;
enum LINEPROXYREQUEST_GETQUEUEINFO = 0x00000012;
enum LINEPROXYREQUEST_GETGROUPLIST = 0x00000013;
enum LINEPROXYREQUEST_SETAGENTSTATEEX = 0x00000014;
enum LINEREMOVEFROMCONF_NONE = 0x00000001;
enum LINEREMOVEFROMCONF_LAST = 0x00000002;
enum LINEREMOVEFROMCONF_ANY = 0x00000003;
enum LINEREQUESTMODE_MAKECALL = 0x00000001;
enum LINEREQUESTMODE_MEDIACALL = 0x00000002;
enum LINEREQUESTMODE_DROP = 0x00000004;
enum LAST_LINEREQUESTMODE = 0x00000002;
enum LINEROAMMODE_UNKNOWN = 0x00000001;
enum LINEROAMMODE_UNAVAIL = 0x00000002;
enum LINEROAMMODE_HOME = 0x00000004;
enum LINEROAMMODE_ROAMA = 0x00000008;
enum LINEROAMMODE_ROAMB = 0x00000010;
enum LINESPECIALINFO_NOCIRCUIT = 0x00000001;
enum LINESPECIALINFO_CUSTIRREG = 0x00000002;
enum LINESPECIALINFO_REORDER = 0x00000004;
enum LINESPECIALINFO_UNKNOWN = 0x00000008;
enum LINESPECIALINFO_UNAVAIL = 0x00000010;
enum LINETERMDEV_PHONE = 0x00000001;
enum LINETERMDEV_HEADSET = 0x00000002;
enum LINETERMDEV_SPEAKER = 0x00000004;
enum LINETERMMODE_BUTTONS = 0x00000001;
enum LINETERMMODE_LAMPS = 0x00000002;
enum LINETERMMODE_DISPLAY = 0x00000004;
enum LINETERMMODE_RINGER = 0x00000008;
enum LINETERMMODE_HOOKSWITCH = 0x00000010;
enum LINETERMMODE_MEDIATOLINE = 0x00000020;
enum LINETERMMODE_MEDIAFROMLINE = 0x00000040;
enum LINETERMMODE_MEDIABIDIRECT = 0x00000080;
enum LINETERMSHARING_PRIVATE = 0x00000001;
enum LINETERMSHARING_SHAREDEXCL = 0x00000002;
enum LINETERMSHARING_SHAREDCONF = 0x00000004;
enum LINETOLLLISTOPTION_ADD = 0x00000001;
enum LINETOLLLISTOPTION_REMOVE = 0x00000002;
enum LINETONEMODE_CUSTOM = 0x00000001;
enum LINETONEMODE_RINGBACK = 0x00000002;
enum LINETONEMODE_BUSY = 0x00000004;
enum LINETONEMODE_BEEP = 0x00000008;
enum LINETONEMODE_BILLING = 0x00000010;
enum LINETRANSFERMODE_TRANSFER = 0x00000001;
enum LINETRANSFERMODE_CONFERENCE = 0x00000002;
enum LINETRANSLATEOPTION_CARDOVERRIDE = 0x00000001;
enum LINETRANSLATEOPTION_CANCELCALLWAITING = 0x00000002;
enum LINETRANSLATEOPTION_FORCELOCAL = 0x00000004;
enum LINETRANSLATEOPTION_FORCELD = 0x00000008;
enum LINETRANSLATERESULT_CANONICAL = 0x00000001;
enum LINETRANSLATERESULT_INTERNATIONAL = 0x00000002;
enum LINETRANSLATERESULT_LONGDISTANCE = 0x00000004;
enum LINETRANSLATERESULT_LOCAL = 0x00000008;
enum LINETRANSLATERESULT_INTOLLLIST = 0x00000010;
enum LINETRANSLATERESULT_NOTINTOLLLIST = 0x00000020;
enum LINETRANSLATERESULT_DIALBILLING = 0x00000040;
enum LINETRANSLATERESULT_DIALQUIET = 0x00000080;
enum LINETRANSLATERESULT_DIALDIALTONE = 0x00000100;
enum LINETRANSLATERESULT_DIALPROMPT = 0x00000200;
enum LINETRANSLATERESULT_VOICEDETECT = 0x00000400;
enum LINETRANSLATERESULT_NOTRANSLATION = 0x00000800;
enum PHONEBUTTONFUNCTION_UNKNOWN = 0x00000000;
enum PHONEBUTTONFUNCTION_CONFERENCE = 0x00000001;
enum PHONEBUTTONFUNCTION_TRANSFER = 0x00000002;
enum PHONEBUTTONFUNCTION_DROP = 0x00000003;
enum PHONEBUTTONFUNCTION_HOLD = 0x00000004;
enum PHONEBUTTONFUNCTION_RECALL = 0x00000005;
enum PHONEBUTTONFUNCTION_DISCONNECT = 0x00000006;
enum PHONEBUTTONFUNCTION_CONNECT = 0x00000007;
enum PHONEBUTTONFUNCTION_MSGWAITON = 0x00000008;
enum PHONEBUTTONFUNCTION_MSGWAITOFF = 0x00000009;
enum PHONEBUTTONFUNCTION_SELECTRING = 0x0000000a;
enum PHONEBUTTONFUNCTION_ABBREVDIAL = 0x0000000b;
enum PHONEBUTTONFUNCTION_FORWARD = 0x0000000c;
enum PHONEBUTTONFUNCTION_PICKUP = 0x0000000d;
enum PHONEBUTTONFUNCTION_RINGAGAIN = 0x0000000e;
enum PHONEBUTTONFUNCTION_PARK = 0x0000000f;
enum PHONEBUTTONFUNCTION_REJECT = 0x00000010;
enum PHONEBUTTONFUNCTION_REDIRECT = 0x00000011;
enum PHONEBUTTONFUNCTION_MUTE = 0x00000012;
enum PHONEBUTTONFUNCTION_VOLUMEUP = 0x00000013;
enum PHONEBUTTONFUNCTION_VOLUMEDOWN = 0x00000014;
enum PHONEBUTTONFUNCTION_SPEAKERON = 0x00000015;
enum PHONEBUTTONFUNCTION_SPEAKEROFF = 0x00000016;
enum PHONEBUTTONFUNCTION_FLASH = 0x00000017;
enum PHONEBUTTONFUNCTION_DATAON = 0x00000018;
enum PHONEBUTTONFUNCTION_DATAOFF = 0x00000019;
enum PHONEBUTTONFUNCTION_DONOTDISTURB = 0x0000001a;
enum PHONEBUTTONFUNCTION_INTERCOM = 0x0000001b;
enum PHONEBUTTONFUNCTION_BRIDGEDAPP = 0x0000001c;
enum PHONEBUTTONFUNCTION_BUSY = 0x0000001d;
enum PHONEBUTTONFUNCTION_CALLAPP = 0x0000001e;
enum PHONEBUTTONFUNCTION_DATETIME = 0x0000001f;
enum PHONEBUTTONFUNCTION_DIRECTORY = 0x00000020;
enum PHONEBUTTONFUNCTION_COVER = 0x00000021;
enum PHONEBUTTONFUNCTION_CALLID = 0x00000022;
enum PHONEBUTTONFUNCTION_LASTNUM = 0x00000023;
enum PHONEBUTTONFUNCTION_NIGHTSRV = 0x00000024;
enum PHONEBUTTONFUNCTION_SENDCALLS = 0x00000025;
enum PHONEBUTTONFUNCTION_MSGINDICATOR = 0x00000026;
enum PHONEBUTTONFUNCTION_REPDIAL = 0x00000027;
enum PHONEBUTTONFUNCTION_SETREPDIAL = 0x00000028;
enum PHONEBUTTONFUNCTION_SYSTEMSPEED = 0x00000029;
enum PHONEBUTTONFUNCTION_STATIONSPEED = 0x0000002a;
enum PHONEBUTTONFUNCTION_CAMPON = 0x0000002b;
enum PHONEBUTTONFUNCTION_SAVEREPEAT = 0x0000002c;
enum PHONEBUTTONFUNCTION_QUEUECALL = 0x0000002d;
enum PHONEBUTTONFUNCTION_NONE = 0x0000002e;
enum PHONEBUTTONFUNCTION_SEND = 0x0000002f;
enum PHONEBUTTONMODE_DUMMY = 0x00000001;
enum PHONEBUTTONMODE_CALL = 0x00000002;
enum PHONEBUTTONMODE_FEATURE = 0x00000004;
enum PHONEBUTTONMODE_KEYPAD = 0x00000008;
enum PHONEBUTTONMODE_LOCAL = 0x00000010;
enum PHONEBUTTONMODE_DISPLAY = 0x00000020;
enum PHONEBUTTONSTATE_UP = 0x00000001;
enum PHONEBUTTONSTATE_DOWN = 0x00000002;
enum PHONEBUTTONSTATE_UNKNOWN = 0x00000004;
enum PHONEBUTTONSTATE_UNAVAIL = 0x00000008;
enum PHONEERR_ALLOCATED = 0x90000001;
enum PHONEERR_BADDEVICEID = 0x90000002;
enum PHONEERR_INCOMPATIBLEAPIVERSION = 0x90000003;
enum PHONEERR_INCOMPATIBLEEXTVERSION = 0x90000004;
enum PHONEERR_INIFILECORRUPT = 0x90000005;
enum PHONEERR_INUSE = 0x90000006;
enum PHONEERR_INVALAPPHANDLE = 0x90000007;
enum PHONEERR_INVALAPPNAME = 0x90000008;
enum PHONEERR_INVALBUTTONLAMPID = 0x90000009;
enum PHONEERR_INVALBUTTONMODE = 0x9000000a;
enum PHONEERR_INVALBUTTONSTATE = 0x9000000b;
enum PHONEERR_INVALDATAID = 0x9000000c;
enum PHONEERR_INVALDEVICECLASS = 0x9000000d;
enum PHONEERR_INVALEXTVERSION = 0x9000000e;
enum PHONEERR_INVALHOOKSWITCHDEV = 0x9000000f;
enum PHONEERR_INVALHOOKSWITCHMODE = 0x90000010;
enum PHONEERR_INVALLAMPMODE = 0x90000011;
enum PHONEERR_INVALPARAM = 0x90000012;
enum PHONEERR_INVALPHONEHANDLE = 0x90000013;
enum PHONEERR_INVALPHONESTATE = 0x90000014;
enum PHONEERR_INVALPOINTER = 0x90000015;
enum PHONEERR_INVALPRIVILEGE = 0x90000016;
enum PHONEERR_INVALRINGMODE = 0x90000017;
enum PHONEERR_NODEVICE = 0x90000018;
enum PHONEERR_NODRIVER = 0x90000019;
enum PHONEERR_NOMEM = 0x9000001a;
enum PHONEERR_NOTOWNER = 0x9000001b;
enum PHONEERR_OPERATIONFAILED = 0x9000001c;
enum PHONEERR_OPERATIONUNAVAIL = 0x9000001d;
enum PHONEERR_RESOURCEUNAVAIL = 0x9000001f;
enum PHONEERR_REQUESTOVERRUN = 0x90000020;
enum PHONEERR_STRUCTURETOOSMALL = 0x90000021;
enum PHONEERR_UNINITIALIZED = 0x90000022;
enum PHONEERR_REINIT = 0x90000023;
enum PHONEERR_DISCONNECTED = 0x90000024;
enum PHONEERR_SERVICE_NOT_RUNNING = 0x90000025;
enum PHONEFEATURE_GETBUTTONINFO = 0x00000001;
enum PHONEFEATURE_GETDATA = 0x00000002;
enum PHONEFEATURE_GETDISPLAY = 0x00000004;
enum PHONEFEATURE_GETGAINHANDSET = 0x00000008;
enum PHONEFEATURE_GETGAINSPEAKER = 0x00000010;
enum PHONEFEATURE_GETGAINHEADSET = 0x00000020;
enum PHONEFEATURE_GETHOOKSWITCHHANDSET = 0x00000040;
enum PHONEFEATURE_GETHOOKSWITCHSPEAKER = 0x00000080;
enum PHONEFEATURE_GETHOOKSWITCHHEADSET = 0x00000100;
enum PHONEFEATURE_GETLAMP = 0x00000200;
enum PHONEFEATURE_GETRING = 0x00000400;
enum PHONEFEATURE_GETVOLUMEHANDSET = 0x00000800;
enum PHONEFEATURE_GETVOLUMESPEAKER = 0x00001000;
enum PHONEFEATURE_GETVOLUMEHEADSET = 0x00002000;
enum PHONEFEATURE_SETBUTTONINFO = 0x00004000;
enum PHONEFEATURE_SETDATA = 0x00008000;
enum PHONEFEATURE_SETDISPLAY = 0x00010000;
enum PHONEFEATURE_SETGAINHANDSET = 0x00020000;
enum PHONEFEATURE_SETGAINSPEAKER = 0x00040000;
enum PHONEFEATURE_SETGAINHEADSET = 0x00080000;
enum PHONEFEATURE_SETHOOKSWITCHHANDSET = 0x00100000;
enum PHONEFEATURE_SETHOOKSWITCHSPEAKER = 0x00200000;
enum PHONEFEATURE_SETHOOKSWITCHHEADSET = 0x00400000;
enum PHONEFEATURE_SETLAMP = 0x00800000;
enum PHONEFEATURE_SETRING = 0x01000000;
enum PHONEFEATURE_SETVOLUMEHANDSET = 0x02000000;
enum PHONEFEATURE_SETVOLUMESPEAKER = 0x04000000;
enum PHONEFEATURE_SETVOLUMEHEADSET = 0x08000000;
enum PHONEFEATURE_GENERICPHONE = 0x10000000;
enum PHONEHOOKSWITCHDEV_HANDSET = 0x00000001;
enum PHONEHOOKSWITCHDEV_SPEAKER = 0x00000002;
enum PHONEHOOKSWITCHDEV_HEADSET = 0x00000004;
enum PHONEHOOKSWITCHMODE_ONHOOK = 0x00000001;
enum PHONEHOOKSWITCHMODE_MIC = 0x00000002;
enum PHONEHOOKSWITCHMODE_SPEAKER = 0x00000004;
enum PHONEHOOKSWITCHMODE_MICSPEAKER = 0x00000008;
enum PHONEHOOKSWITCHMODE_UNKNOWN = 0x00000010;
enum PHONEINITIALIZEEXOPTION_USEHIDDENWINDOW = 0x00000001;
enum PHONEINITIALIZEEXOPTION_USEEVENT = 0x00000002;
enum PHONEINITIALIZEEXOPTION_USECOMPLETIONPORT = 0x00000003;
enum PHONELAMPMODE_DUMMY = 0x00000001;
enum PHONELAMPMODE_OFF = 0x00000002;
enum PHONELAMPMODE_STEADY = 0x00000004;
enum PHONELAMPMODE_WINK = 0x00000008;
enum PHONELAMPMODE_FLASH = 0x00000010;
enum PHONELAMPMODE_FLUTTER = 0x00000020;
enum PHONELAMPMODE_BROKENFLUTTER = 0x00000040;
enum PHONELAMPMODE_UNKNOWN = 0x00000080;
enum PHONEPRIVILEGE_MONITOR = 0x00000001;
enum PHONEPRIVILEGE_OWNER = 0x00000002;
enum PHONESTATE_OTHER = 0x00000001;
enum PHONESTATE_CONNECTED = 0x00000002;
enum PHONESTATE_DISCONNECTED = 0x00000004;
enum PHONESTATE_OWNER = 0x00000008;
enum PHONESTATE_MONITORS = 0x00000010;
enum PHONESTATE_DISPLAY = 0x00000020;
enum PHONESTATE_LAMP = 0x00000040;
enum PHONESTATE_RINGMODE = 0x00000080;
enum PHONESTATE_RINGVOLUME = 0x00000100;
enum PHONESTATE_HANDSETHOOKSWITCH = 0x00000200;
enum PHONESTATE_HANDSETVOLUME = 0x00000400;
enum PHONESTATE_HANDSETGAIN = 0x00000800;
enum PHONESTATE_SPEAKERHOOKSWITCH = 0x00001000;
enum PHONESTATE_SPEAKERVOLUME = 0x00002000;
enum PHONESTATE_SPEAKERGAIN = 0x00004000;
enum PHONESTATE_HEADSETHOOKSWITCH = 0x00008000;
enum PHONESTATE_HEADSETVOLUME = 0x00010000;
enum PHONESTATE_HEADSETGAIN = 0x00020000;
enum PHONESTATE_SUSPEND = 0x00040000;
enum PHONESTATE_RESUME = 0x00080000;
enum PHONESTATE_DEVSPECIFIC = 0x00100000;
enum PHONESTATE_REINIT = 0x00200000;
enum PHONESTATE_CAPSCHANGE = 0x00400000;
enum PHONESTATE_REMOVED = 0x00800000;
enum PHONESTATUSFLAGS_CONNECTED = 0x00000001;
enum PHONESTATUSFLAGS_SUSPENDED = 0x00000002;
enum STRINGFORMAT_ASCII = 0x00000001;
enum STRINGFORMAT_DBCS = 0x00000002;
enum STRINGFORMAT_UNICODE = 0x00000003;
enum STRINGFORMAT_BINARY = 0x00000004;
enum TAPI_REPLY = 0x00000463;
enum TAPIERR_CONNECTED = 0x00000000;
enum TAPIERR_DROPPED = 0xffffffffffffffff;
enum TAPIERR_NOREQUESTRECIPIENT = 0xfffffffffffffffe;
enum TAPIERR_REQUESTQUEUEFULL = 0xfffffffffffffffd;
enum TAPIERR_INVALDESTADDRESS = 0xfffffffffffffffc;
enum TAPIERR_INVALWINDOWHANDLE = 0xfffffffffffffffb;
enum TAPIERR_INVALDEVICECLASS = 0xfffffffffffffffa;
enum TAPIERR_INVALDEVICEID = 0xfffffffffffffff9;
enum TAPIERR_DEVICECLASSUNAVAIL = 0xfffffffffffffff8;
enum TAPIERR_DEVICEIDUNAVAIL = 0xfffffffffffffff7;
enum TAPIERR_DEVICEINUSE = 0xfffffffffffffff6;
enum TAPIERR_DESTBUSY = 0xfffffffffffffff5;
enum TAPIERR_DESTNOANSWER = 0xfffffffffffffff4;
enum TAPIERR_DESTUNAVAIL = 0xfffffffffffffff3;
enum TAPIERR_UNKNOWNWINHANDLE = 0xfffffffffffffff2;
enum TAPIERR_UNKNOWNREQUESTID = 0xfffffffffffffff1;
enum TAPIERR_REQUESTFAILED = 0xfffffffffffffff0;
enum TAPIERR_REQUESTCANCELLED = 0xffffffffffffffef;
enum TAPIERR_INVALPOINTER = 0xffffffffffffffee;
enum TAPIERR_NOTADMIN = 0xffffffffffffffed;
enum TAPIERR_MMCWRITELOCKED = 0xffffffffffffffec;
enum TAPIERR_PROVIDERALREADYINSTALLED = 0xffffffffffffffeb;
enum TAPIERR_SCP_ALREADY_EXISTS = 0xffffffffffffffea;
enum TAPIERR_SCP_DOES_NOT_EXIST = 0xffffffffffffffe9;
enum TAPIMAXDESTADDRESSSIZE = 0x00000050;
enum TAPIMAXAPPNAMESIZE = 0x00000028;
enum TAPIMAXCALLEDPARTYSIZE = 0x00000028;
enum TAPIMAXCOMMENTSIZE = 0x00000050;
enum TAPIMAXDEVICECLASSSIZE = 0x00000028;
enum TAPIMAXDEVICEIDSIZE = 0x00000028;
enum INTERFACEMASK = 0x00ff0000;
enum DISPIDMASK = 0x0000ffff;
enum IDISPTAPI = 0x00010000;
enum IDISPTAPICALLCENTER = 0x00020000;
enum IDISPCALLINFO = 0x00010000;
enum IDISPBASICCALLCONTROL = 0x00020000;
enum IDISPLEGACYCALLMEDIACONTROL = 0x00030000;
enum IDISPAGGREGATEDMSPCALLOBJ = 0x00040000;
enum IDISPADDRESS = 0x00010000;
enum IDISPADDRESSCAPABILITIES = 0x00020000;
enum IDISPMEDIASUPPORT = 0x00030000;
enum IDISPADDRESSTRANSLATION = 0x00040000;
enum IDISPLEGACYADDRESSMEDIACONTROL = 0x00050000;
enum IDISPAGGREGATEDMSPADDRESSOBJ = 0x00060000;
enum IDISPPHONE = 0x00010000;
enum IDISPAPC = 0x00020000;
enum IDISPMULTITRACK = 0x00010000;
enum IDISPMEDIACONTROL = 0x00020000;
enum IDISPMEDIARECORD = 0x00030000;
enum IDISPMEDIAPLAYBACK = 0x00040000;
enum IDISPFILETRACK = 0x00010000;
enum TAPIMEDIATYPE_AUDIO = 0x00000008;
enum TAPIMEDIATYPE_VIDEO = 0x00008000;
enum TAPIMEDIATYPE_DATAMODEM = 0x00000010;
enum TAPIMEDIATYPE_G3FAX = 0x00000020;
enum TAPIMEDIATYPE_MULTITRACK = 0x00010000;
enum TSPI_MESSAGE_BASE = 0x000001f4;
enum LINETSPIOPTION_NONREENTRANT = 0x00000001;
enum TUISPIDLL_OBJECT_LINEID = 0x00000001;
enum TUISPIDLL_OBJECT_PHONEID = 0x00000002;
enum TUISPIDLL_OBJECT_PROVIDERID = 0x00000003;
enum TUISPIDLL_OBJECT_DIALOGINSTANCE = 0x00000004;
enum PRIVATEOBJECT_NONE = 0x00000001;
enum PRIVATEOBJECT_CALLID = 0x00000002;
enum PRIVATEOBJECT_LINE = 0x00000003;
enum PRIVATEOBJECT_CALL = 0x00000004;
enum PRIVATEOBJECT_PHONE = 0x00000005;
enum PRIVATEOBJECT_ADDRESS = 0x00000006;
enum LINEQOSREQUESTTYPE_SERVICELEVEL = 0x00000001;
enum LINEQOSSERVICELEVEL_NEEDED = 0x00000001;
enum LINEQOSSERVICELEVEL_IFAVAILABLE = 0x00000002;
enum LINEQOSSERVICELEVEL_BESTEFFORT = 0x00000003;
enum LINEEQOSINFO_NOQOS = 0x00000001;
enum LINEEQOSINFO_ADMISSIONFAILURE = 0x00000002;
enum LINEEQOSINFO_POLICYFAILURE = 0x00000003;
enum LINEEQOSINFO_GENERICERROR = 0x00000004;
enum TSPI_PROC_BASE = 0x000001f4;
enum TSPI_LINEACCEPT = 0x000001f4;
enum TSPI_LINEADDTOCONFERENCE = 0x000001f5;
enum TSPI_LINEANSWER = 0x000001f6;
enum TSPI_LINEBLINDTRANSFER = 0x000001f7;
enum TSPI_LINECLOSE = 0x000001f8;
enum TSPI_LINECLOSECALL = 0x000001f9;
enum TSPI_LINECOMPLETECALL = 0x000001fa;
enum TSPI_LINECOMPLETETRANSFER = 0x000001fb;
enum TSPI_LINECONDITIONALMEDIADETECTION = 0x000001fc;
enum TSPI_LINECONFIGDIALOG = 0x000001fd;
enum TSPI_LINEDEVSPECIFIC = 0x000001fe;
enum TSPI_LINEDEVSPECIFICFEATURE = 0x000001ff;
enum TSPI_LINEDIAL = 0x00000200;
enum TSPI_LINEDROP = 0x00000201;
enum TSPI_LINEFORWARD = 0x00000202;
enum TSPI_LINEGATHERDIGITS = 0x00000203;
enum TSPI_LINEGENERATEDIGITS = 0x00000204;
enum TSPI_LINEGENERATETONE = 0x00000205;
enum TSPI_LINEGETADDRESSCAPS = 0x00000206;
enum TSPI_LINEGETADDRESSID = 0x00000207;
enum TSPI_LINEGETADDRESSSTATUS = 0x00000208;
enum TSPI_LINEGETCALLADDRESSID = 0x00000209;
enum TSPI_LINEGETCALLINFO = 0x0000020a;
enum TSPI_LINEGETCALLSTATUS = 0x0000020b;
enum TSPI_LINEGETDEVCAPS = 0x0000020c;
enum TSPI_LINEGETDEVCONFIG = 0x0000020d;
enum TSPI_LINEGETEXTENSIONID = 0x0000020e;
enum TSPI_LINEGETICON = 0x0000020f;
enum TSPI_LINEGETID = 0x00000210;
enum TSPI_LINEGETLINEDEVSTATUS = 0x00000211;
enum TSPI_LINEGETNUMADDRESSIDS = 0x00000212;
enum TSPI_LINEHOLD = 0x00000213;
enum TSPI_LINEMAKECALL = 0x00000214;
enum TSPI_LINEMONITORDIGITS = 0x00000215;
enum TSPI_LINEMONITORMEDIA = 0x00000216;
enum TSPI_LINEMONITORTONES = 0x00000217;
enum TSPI_LINENEGOTIATEEXTVERSION = 0x00000218;
enum TSPI_LINENEGOTIATETSPIVERSION = 0x00000219;
enum TSPI_LINEOPEN = 0x0000021a;
enum TSPI_LINEPARK = 0x0000021b;
enum TSPI_LINEPICKUP = 0x0000021c;
enum TSPI_LINEPREPAREADDTOCONFERENCE = 0x0000021d;
enum TSPI_LINEREDIRECT = 0x0000021e;
enum TSPI_LINEREMOVEFROMCONFERENCE = 0x0000021f;
enum TSPI_LINESECURECALL = 0x00000220;
enum TSPI_LINESELECTEXTVERSION = 0x00000221;
enum TSPI_LINESENDUSERUSERINFO = 0x00000222;
enum TSPI_LINESETAPPSPECIFIC = 0x00000223;
enum TSPI_LINESETCALLPARAMS = 0x00000224;
enum TSPI_LINESETDEFAULTMEDIADETECTION = 0x00000225;
enum TSPI_LINESETDEVCONFIG = 0x00000226;
enum TSPI_LINESETMEDIACONTROL = 0x00000227;
enum TSPI_LINESETMEDIAMODE = 0x00000228;
enum TSPI_LINESETSTATUSMESSAGES = 0x00000229;
enum TSPI_LINESETTERMINAL = 0x0000022a;
enum TSPI_LINESETUPCONFERENCE = 0x0000022b;
enum TSPI_LINESETUPTRANSFER = 0x0000022c;
enum TSPI_LINESWAPHOLD = 0x0000022d;
enum TSPI_LINEUNCOMPLETECALL = 0x0000022e;
enum TSPI_LINEUNHOLD = 0x0000022f;
enum TSPI_LINEUNPARK = 0x00000230;
enum TSPI_PHONECLOSE = 0x00000231;
enum TSPI_PHONECONFIGDIALOG = 0x00000232;
enum TSPI_PHONEDEVSPECIFIC = 0x00000233;
enum TSPI_PHONEGETBUTTONINFO = 0x00000234;
enum TSPI_PHONEGETDATA = 0x00000235;
enum TSPI_PHONEGETDEVCAPS = 0x00000236;
enum TSPI_PHONEGETDISPLAY = 0x00000237;
enum TSPI_PHONEGETEXTENSIONID = 0x00000238;
enum TSPI_PHONEGETGAIN = 0x00000239;
enum TSPI_PHONEGETHOOKSWITCH = 0x0000023a;
enum TSPI_PHONEGETICON = 0x0000023b;
enum TSPI_PHONEGETID = 0x0000023c;
enum TSPI_PHONEGETLAMP = 0x0000023d;
enum TSPI_PHONEGETRING = 0x0000023e;
enum TSPI_PHONEGETSTATUS = 0x0000023f;
enum TSPI_PHONEGETVOLUME = 0x00000240;
enum TSPI_PHONENEGOTIATEEXTVERSION = 0x00000241;
enum TSPI_PHONENEGOTIATETSPIVERSION = 0x00000242;
enum TSPI_PHONEOPEN = 0x00000243;
enum TSPI_PHONESELECTEXTVERSION = 0x00000244;
enum TSPI_PHONESETBUTTONINFO = 0x00000245;
enum TSPI_PHONESETDATA = 0x00000246;
enum TSPI_PHONESETDISPLAY = 0x00000247;
enum TSPI_PHONESETGAIN = 0x00000248;
enum TSPI_PHONESETHOOKSWITCH = 0x00000249;
enum TSPI_PHONESETLAMP = 0x0000024a;
enum TSPI_PHONESETRING = 0x0000024b;
enum TSPI_PHONESETSTATUSMESSAGES = 0x0000024c;
enum TSPI_PHONESETVOLUME = 0x0000024d;
enum TSPI_PROVIDERCONFIG = 0x0000024e;
enum TSPI_PROVIDERINIT = 0x0000024f;
enum TSPI_PROVIDERINSTALL = 0x00000250;
enum TSPI_PROVIDERREMOVE = 0x00000251;
enum TSPI_PROVIDERSHUTDOWN = 0x00000252;
enum TSPI_PROVIDERENUMDEVICES = 0x00000253;
enum TSPI_LINEDROPONCLOSE = 0x00000254;
enum TSPI_LINEDROPNOOWNER = 0x00000255;
enum TSPI_PROVIDERCREATELINEDEVICE = 0x00000256;
enum TSPI_PROVIDERCREATEPHONEDEVICE = 0x00000257;
enum TSPI_LINESETCURRENTLOCATION = 0x00000258;
enum TSPI_LINECONFIGDIALOGEDIT = 0x00000259;
enum TSPI_LINERELEASEUSERUSERINFO = 0x0000025a;
enum TSPI_LINEGETCALLID = 0x0000025b;
enum TSPI_LINEGETCALLHUBTRACKING = 0x0000025c;
enum TSPI_LINESETCALLHUBTRACKING = 0x0000025d;
enum TSPI_LINERECEIVEMSPDATA = 0x0000025e;
enum TSPI_LINEMSPIDENTIFY = 0x0000025f;
enum TSPI_LINECREATEMSPINSTANCE = 0x00000260;
enum TSPI_LINECLOSEMSPINSTANCE = 0x00000261;
enum IDISPDIROBJECT = 0x00010000;
enum IDISPDIROBJCONFERENCE = 0x00020000;
enum IDISPDIROBJUSER = 0x00030000;
enum IDISPDIRECTORY = 0x00010000;
enum IDISPILSCONFIG = 0x00020000;
enum RENDBIND_AUTHENTICATE = 0x00000001;
enum RENDBIND_DEFAULTDOMAINNAME = 0x00000002;
enum RENDBIND_DEFAULTUSERNAME = 0x00000004;
enum RENDBIND_DEFAULTPASSWORD = 0x00000008;
enum RENDBIND_DEFAULTCREDENTIALS = 0x0000000e;
enum STRM_INITIAL = 0x00000000;
enum STRM_TERMINALSELECTED = 0x00000001;
enum STRM_CONFIGURED = 0x00000002;
enum STRM_RUNNING = 0x00000004;
enum STRM_PAUSED = 0x00000008;
enum STRM_STOPPED = 0x00000010;
enum TAPI_E_NOTENOUGHMEMORY = 0xffffffff80040001;
enum TAPI_E_NOITEMS = 0xffffffff80040002;
enum TAPI_E_NOTSUPPORTED = 0xffffffff80040003;
enum TAPI_E_INVALIDMEDIATYPE = 0xffffffff80040004;
enum TAPI_E_OPERATIONFAILED = 0xffffffff80040005;
enum TAPI_E_ALLOCATED = 0xffffffff80040006;
enum TAPI_E_CALLUNAVAIL = 0xffffffff80040007;
enum TAPI_E_COMPLETIONOVERRUN = 0xffffffff80040008;
enum TAPI_E_CONFERENCEFULL = 0xffffffff80040009;
enum TAPI_E_DIALMODIFIERNOTSUPPORTED = 0xffffffff8004000a;
enum TAPI_E_INUSE = 0xffffffff8004000b;
enum TAPI_E_INVALADDRESS = 0xffffffff8004000c;
enum TAPI_E_INVALADDRESSSTATE = 0xffffffff8004000d;
enum TAPI_E_INVALCALLPARAMS = 0xffffffff8004000e;
enum TAPI_E_INVALCALLPRIVILEGE = 0xffffffff8004000f;
enum TAPI_E_INVALCALLSTATE = 0xffffffff80040010;
enum TAPI_E_INVALCARD = 0xffffffff80040011;
enum TAPI_E_INVALCOMPLETIONID = 0xffffffff80040012;
enum TAPI_E_INVALCOUNTRYCODE = 0xffffffff80040013;
enum TAPI_E_INVALDEVICECLASS = 0xffffffff80040014;
enum TAPI_E_INVALDIALPARAMS = 0xffffffff80040015;
enum TAPI_E_INVALDIGITS = 0xffffffff80040016;
enum TAPI_E_INVALGROUPID = 0xffffffff80040017;
enum TAPI_E_INVALLOCATION = 0xffffffff80040018;
enum TAPI_E_INVALMESSAGEID = 0xffffffff80040019;
enum TAPI_E_INVALPARKID = 0xffffffff8004001a;
enum TAPI_E_INVALRATE = 0xffffffff8004001b;
enum TAPI_E_INVALTIMEOUT = 0xffffffff8004001c;
enum TAPI_E_INVALTONE = 0xffffffff8004001d;
enum TAPI_E_INVALLIST = 0xffffffff8004001e;
enum TAPI_E_INVALMODE = 0xffffffff8004001f;
enum TAPI_E_NOCONFERENCE = 0xffffffff80040020;
enum TAPI_E_NODEVICE = 0xffffffff80040021;
enum TAPI_E_NOREQUEST = 0xffffffff80040022;
enum TAPI_E_NOTOWNER = 0xffffffff80040023;
enum TAPI_E_NOTREGISTERED = 0xffffffff80040024;
enum TAPI_E_REQUESTOVERRUN = 0xffffffff80040025;
enum TAPI_E_TARGETNOTFOUND = 0xffffffff80040026;
enum TAPI_E_TARGETSELF = 0xffffffff80040027;
enum TAPI_E_USERUSERINFOTOOBIG = 0xffffffff80040028;
enum TAPI_E_REINIT = 0xffffffff80040029;
enum TAPI_E_ADDRESSBLOCKED = 0xffffffff8004002a;
enum TAPI_E_BILLINGREJECTED = 0xffffffff8004002b;
enum TAPI_E_INVALFEATURE = 0xffffffff8004002c;
enum TAPI_E_INVALBUTTONLAMPID = 0xffffffff8004002d;
enum TAPI_E_INVALBUTTONSTATE = 0xffffffff8004002e;
enum TAPI_E_INVALDATAID = 0xffffffff8004002f;
enum TAPI_E_INVALHOOKSWITCHDEV = 0xffffffff80040030;
enum TAPI_E_DROPPED = 0xffffffff80040031;
enum TAPI_E_NOREQUESTRECIPIENT = 0xffffffff80040032;
enum TAPI_E_REQUESTQUEUEFULL = 0xffffffff80040033;
enum TAPI_E_DESTBUSY = 0xffffffff80040034;
enum TAPI_E_DESTNOANSWER = 0xffffffff80040035;
enum TAPI_E_DESTUNAVAIL = 0xffffffff80040036;
enum TAPI_E_REQUESTFAILED = 0xffffffff80040037;
enum TAPI_E_REQUESTCANCELLED = 0xffffffff80040038;
enum TAPI_E_INVALPRIVILEGE = 0xffffffff80040039;
enum TAPI_E_INVALIDDIRECTION = 0xffffffff8004003a;
enum TAPI_E_INVALIDTERMINAL = 0xffffffff8004003b;
enum TAPI_E_INVALIDTERMINALCLASS = 0xffffffff8004003c;
enum TAPI_E_NODRIVER = 0xffffffff8004003d;
enum TAPI_E_MAXSTREAMS = 0xffffffff8004003e;
enum TAPI_E_NOTERMINALSELECTED = 0xffffffff8004003f;
enum TAPI_E_TERMINALINUSE = 0xffffffff80040040;
enum TAPI_E_NOTSTOPPED = 0xffffffff80040041;
enum TAPI_E_MAXTERMINALS = 0xffffffff80040042;
enum TAPI_E_INVALIDSTREAM = 0xffffffff80040043;
enum TAPI_E_TIMEOUT = 0xffffffff80040044;
enum TAPI_E_CALLCENTER_GROUP_REMOVED = 0xffffffff80040045;
enum TAPI_E_CALLCENTER_QUEUE_REMOVED = 0xffffffff80040046;
enum TAPI_E_CALLCENTER_NO_AGENT_ID = 0xffffffff80040047;
enum TAPI_E_CALLCENTER_INVALAGENTID = 0xffffffff80040048;
enum TAPI_E_CALLCENTER_INVALAGENTGROUP = 0xffffffff80040049;
enum TAPI_E_CALLCENTER_INVALPASSWORD = 0xffffffff8004004a;
enum TAPI_E_CALLCENTER_INVALAGENTSTATE = 0xffffffff8004004b;
enum TAPI_E_CALLCENTER_INVALAGENTACTIVITY = 0xffffffff8004004c;
enum TAPI_E_REGISTRY_SETTING_CORRUPT = 0xffffffff8004004d;
enum TAPI_E_TERMINAL_PEER = 0xffffffff8004004e;
enum TAPI_E_PEER_NOT_SET = 0xffffffff8004004f;
enum TAPI_E_NOEVENT = 0xffffffff80040050;
enum TAPI_E_INVALADDRESSTYPE = 0xffffffff80040051;
enum TAPI_E_RESOURCEUNAVAIL = 0xffffffff80040052;
enum TAPI_E_PHONENOTOPEN = 0xffffffff80040053;
enum TAPI_E_CALLNOTSELECTED = 0xffffffff80040054;
enum TAPI_E_WRONGEVENT = 0xffffffff80040055;
enum TAPI_E_NOFORMAT = 0xffffffff80040056;
enum TAPI_E_INVALIDSTREAMSTATE = 0xffffffff80040057;
enum TAPI_E_WRONG_STATE = 0xffffffff80040058;
enum TAPI_E_NOT_INITIALIZED = 0xffffffff80040059;
enum TAPI_E_SERVICE_NOT_RUNNING = 0xffffffff8004005a;
enum OPENTNEFSTREAM = "OpenTnefStream";
enum OPENTNEFSTREAMEX = "OpenTnefStreamEx";
enum GETTNEFSTREAMCODEPAGE = "GetTnefStreamCodePage";
enum cbDisplayName = 0x00000029;
enum cbEmailName = 0x0000000b;
enum cbSeverName = 0x0000000c;
enum cbTYPE = 0x00000010;
enum cbMaxIdData = 0x000000c8;
enum prioLow = 0x00000003;
enum prioNorm = 0x00000002;
enum prioHigh = 0x00000001;
enum atypNull = 0x00000000;
enum atypFile = 0x00000001;
enum atypOle = 0x00000002;
enum atypPicture = 0x00000003;
enum atypMax = 0x00000004;
alias LINECALLBACK = void function(uint, uint, ulong, ulong, ulong, ulong);
alias PHONECALLBACK = void function(uint, uint, ulong, ulong, ulong, ulong);
struct LINEADDRESSCAPS
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwLineDeviceID;
    uint dwAddressSize;
    uint dwAddressOffset;
    uint dwDevSpecificSize;
    uint dwDevSpecificOffset;
    uint dwAddressSharing;
    uint dwAddressStates;
    uint dwCallInfoStates;
    uint dwCallerIDFlags;
    uint dwCalledIDFlags;
    uint dwConnectedIDFlags;
    uint dwRedirectionIDFlags;
    uint dwRedirectingIDFlags;
    uint dwCallStates;
    uint dwDialToneModes;
    uint dwBusyModes;
    uint dwSpecialInfo;
    uint dwDisconnectModes;
    uint dwMaxNumActiveCalls;
    uint dwMaxNumOnHoldCalls;
    uint dwMaxNumOnHoldPendingCalls;
    uint dwMaxNumConference;
    uint dwMaxNumTransConf;
    uint dwAddrCapFlags;
    uint dwCallFeatures;
    uint dwRemoveFromConfCaps;
    uint dwRemoveFromConfState;
    uint dwTransferModes;
    uint dwParkModes;
    uint dwForwardModes;
    uint dwMaxForwardEntries;
    uint dwMaxSpecificEntries;
    uint dwMinFwdNumRings;
    uint dwMaxFwdNumRings;
    uint dwMaxCallCompletions;
    uint dwCallCompletionConds;
    uint dwCallCompletionModes;
    uint dwNumCompletionMessages;
    uint dwCompletionMsgTextEntrySize;
    uint dwCompletionMsgTextSize;
    uint dwCompletionMsgTextOffset;
    uint dwAddressFeatures;
    uint dwPredictiveAutoTransferStates;
    uint dwNumCallTreatments;
    uint dwCallTreatmentListSize;
    uint dwCallTreatmentListOffset;
    uint dwDeviceClassesSize;
    uint dwDeviceClassesOffset;
    uint dwMaxCallDataSize;
    uint dwCallFeatures2;
    uint dwMaxNoAnswerTimeout;
    uint dwConnectedModes;
    uint dwOfferingModes;
    uint dwAvailableMediaModes;
}
struct LINEADDRESSSTATUS
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwNumInUse;
    uint dwNumActiveCalls;
    uint dwNumOnHoldCalls;
    uint dwNumOnHoldPendCalls;
    uint dwAddressFeatures;
    uint dwNumRingsNoAnswer;
    uint dwForwardNumEntries;
    uint dwForwardSize;
    uint dwForwardOffset;
    uint dwTerminalModesSize;
    uint dwTerminalModesOffset;
    uint dwDevSpecificSize;
    uint dwDevSpecificOffset;
}
struct LINEAGENTACTIVITYENTRY
{
    align (1):
    uint dwID;
    uint dwNameSize;
    uint dwNameOffset;
}
struct LINEAGENTACTIVITYLIST
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwNumEntries;
    uint dwListSize;
    uint dwListOffset;
}
struct LINEAGENTCAPS
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwAgentHandlerInfoSize;
    uint dwAgentHandlerInfoOffset;
    uint dwCapsVersion;
    uint dwFeatures;
    uint dwStates;
    uint dwNextStates;
    uint dwMaxNumGroupEntries;
    uint dwAgentStatusMessages;
    uint dwNumAgentExtensionIDs;
    uint dwAgentExtensionIDListSize;
    uint dwAgentExtensionIDListOffset;
    GUID ProxyGUID;
}
struct LINEAGENTGROUPENTRY
{
    align (1):
    struct _GroupID_e__Struct
    {
        align (1):
        uint dwGroupID1;
        uint dwGroupID2;
        uint dwGroupID3;
        uint dwGroupID4;
    }
    uint dwNameSize;
    uint dwNameOffset;
}
struct LINEAGENTGROUPLIST
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwNumEntries;
    uint dwListSize;
    uint dwListOffset;
}
struct LINEAGENTSTATUS
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwNumEntries;
    uint dwGroupListSize;
    uint dwGroupListOffset;
    uint dwState;
    uint dwNextState;
    uint dwActivityID;
    uint dwActivitySize;
    uint dwActivityOffset;
    uint dwAgentFeatures;
    uint dwValidStates;
    uint dwValidNextStates;
}
struct LINEAPPINFO
{
    align (1):
    uint dwMachineNameSize;
    uint dwMachineNameOffset;
    uint dwUserNameSize;
    uint dwUserNameOffset;
    uint dwModuleFilenameSize;
    uint dwModuleFilenameOffset;
    uint dwFriendlyNameSize;
    uint dwFriendlyNameOffset;
    uint dwMediaModes;
    uint dwAddressID;
}
struct LINEAGENTENTRY
{
    align (1):
    uint hAgent;
    uint dwNameSize;
    uint dwNameOffset;
    uint dwIDSize;
    uint dwIDOffset;
    uint dwPINSize;
    uint dwPINOffset;
}
struct LINEAGENTLIST
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwNumEntries;
    uint dwListSize;
    uint dwListOffset;
}
struct LINEAGENTINFO
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwAgentState;
    uint dwNextAgentState;
    uint dwMeasurementPeriod;
    CY cyOverallCallRate;
    uint dwNumberOfACDCalls;
    uint dwNumberOfIncomingCalls;
    uint dwNumberOfOutgoingCalls;
    uint dwTotalACDTalkTime;
    uint dwTotalACDCallTime;
    uint dwTotalACDWrapUpTime;
}
struct LINEAGENTSESSIONENTRY
{
    align (1):
    uint hAgentSession;
    uint hAgent;
    GUID GroupID;
    uint dwWorkingAddressID;
}
struct LINEAGENTSESSIONLIST
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwNumEntries;
    uint dwListSize;
    uint dwListOffset;
}
struct LINEAGENTSESSIONINFO
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwAgentSessionState;
    uint dwNextAgentSessionState;
    double dateSessionStartTime;
    uint dwSessionDuration;
    uint dwNumberOfCalls;
    uint dwTotalTalkTime;
    uint dwAverageTalkTime;
    uint dwTotalCallTime;
    uint dwAverageCallTime;
    uint dwTotalWrapUpTime;
    uint dwAverageWrapUpTime;
    CY cyACDCallRate;
    uint dwLongestTimeToAnswer;
    uint dwAverageTimeToAnswer;
}
struct LINEQUEUEENTRY
{
    align (1):
    uint dwQueueID;
    uint dwNameSize;
    uint dwNameOffset;
}
struct LINEQUEUELIST
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwNumEntries;
    uint dwListSize;
    uint dwListOffset;
}
struct LINEQUEUEINFO
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwMeasurementPeriod;
    uint dwTotalCallsQueued;
    uint dwCurrentCallsQueued;
    uint dwTotalCallsAbandoned;
    uint dwTotalCallsFlowedIn;
    uint dwTotalCallsFlowedOut;
    uint dwLongestEverWaitTime;
    uint dwCurrentLongestWaitTime;
    uint dwAverageWaitTime;
    uint dwFinalDisposition;
}
struct LINEPROXYREQUESTLIST
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwNumEntries;
    uint dwListSize;
    uint dwListOffset;
}
struct LINEDIALPARAMS
{
    align (1):
    uint dwDialPause;
    uint dwDialSpeed;
    uint dwDigitDuration;
    uint dwWaitForDialtone;
}
struct LINECALLINFO
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint hLine;
    uint dwLineDeviceID;
    uint dwAddressID;
    uint dwBearerMode;
    uint dwRate;
    uint dwMediaMode;
    uint dwAppSpecific;
    uint dwCallID;
    uint dwRelatedCallID;
    uint dwCallParamFlags;
    uint dwCallStates;
    uint dwMonitorDigitModes;
    uint dwMonitorMediaModes;
    LINEDIALPARAMS DialParams;
    uint dwOrigin;
    uint dwReason;
    uint dwCompletionID;
    uint dwNumOwners;
    uint dwNumMonitors;
    uint dwCountryCode;
    uint dwTrunk;
    uint dwCallerIDFlags;
    uint dwCallerIDSize;
    uint dwCallerIDOffset;
    uint dwCallerIDNameSize;
    uint dwCallerIDNameOffset;
    uint dwCalledIDFlags;
    uint dwCalledIDSize;
    uint dwCalledIDOffset;
    uint dwCalledIDNameSize;
    uint dwCalledIDNameOffset;
    uint dwConnectedIDFlags;
    uint dwConnectedIDSize;
    uint dwConnectedIDOffset;
    uint dwConnectedIDNameSize;
    uint dwConnectedIDNameOffset;
    uint dwRedirectionIDFlags;
    uint dwRedirectionIDSize;
    uint dwRedirectionIDOffset;
    uint dwRedirectionIDNameSize;
    uint dwRedirectionIDNameOffset;
    uint dwRedirectingIDFlags;
    uint dwRedirectingIDSize;
    uint dwRedirectingIDOffset;
    uint dwRedirectingIDNameSize;
    uint dwRedirectingIDNameOffset;
    uint dwAppNameSize;
    uint dwAppNameOffset;
    uint dwDisplayableAddressSize;
    uint dwDisplayableAddressOffset;
    uint dwCalledPartySize;
    uint dwCalledPartyOffset;
    uint dwCommentSize;
    uint dwCommentOffset;
    uint dwDisplaySize;
    uint dwDisplayOffset;
    uint dwUserUserInfoSize;
    uint dwUserUserInfoOffset;
    uint dwHighLevelCompSize;
    uint dwHighLevelCompOffset;
    uint dwLowLevelCompSize;
    uint dwLowLevelCompOffset;
    uint dwChargingInfoSize;
    uint dwChargingInfoOffset;
    uint dwTerminalModesSize;
    uint dwTerminalModesOffset;
    uint dwDevSpecificSize;
    uint dwDevSpecificOffset;
    uint dwCallTreatment;
    uint dwCallDataSize;
    uint dwCallDataOffset;
    uint dwSendingFlowspecSize;
    uint dwSendingFlowspecOffset;
    uint dwReceivingFlowspecSize;
    uint dwReceivingFlowspecOffset;
}
struct LINECALLLIST
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwCallsNumEntries;
    uint dwCallsSize;
    uint dwCallsOffset;
}
struct LINECALLPARAMS
{
    align (1):
    uint dwTotalSize;
    uint dwBearerMode;
    uint dwMinRate;
    uint dwMaxRate;
    uint dwMediaMode;
    uint dwCallParamFlags;
    uint dwAddressMode;
    uint dwAddressID;
    LINEDIALPARAMS DialParams;
    uint dwOrigAddressSize;
    uint dwOrigAddressOffset;
    uint dwDisplayableAddressSize;
    uint dwDisplayableAddressOffset;
    uint dwCalledPartySize;
    uint dwCalledPartyOffset;
    uint dwCommentSize;
    uint dwCommentOffset;
    uint dwUserUserInfoSize;
    uint dwUserUserInfoOffset;
    uint dwHighLevelCompSize;
    uint dwHighLevelCompOffset;
    uint dwLowLevelCompSize;
    uint dwLowLevelCompOffset;
    uint dwDevSpecificSize;
    uint dwDevSpecificOffset;
    uint dwPredictiveAutoTransferStates;
    uint dwTargetAddressSize;
    uint dwTargetAddressOffset;
    uint dwSendingFlowspecSize;
    uint dwSendingFlowspecOffset;
    uint dwReceivingFlowspecSize;
    uint dwReceivingFlowspecOffset;
    uint dwDeviceClassSize;
    uint dwDeviceClassOffset;
    uint dwDeviceConfigSize;
    uint dwDeviceConfigOffset;
    uint dwCallDataSize;
    uint dwCallDataOffset;
    uint dwNoAnswerTimeout;
    uint dwCallingPartyIDSize;
    uint dwCallingPartyIDOffset;
}
struct LINECALLSTATUS
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwCallState;
    uint dwCallStateMode;
    uint dwCallPrivilege;
    uint dwCallFeatures;
    uint dwDevSpecificSize;
    uint dwDevSpecificOffset;
    uint dwCallFeatures2;
    SYSTEMTIME tStateEntryTime;
}
struct LINECALLTREATMENTENTRY
{
    align (1):
    uint dwCallTreatmentID;
    uint dwCallTreatmentNameSize;
    uint dwCallTreatmentNameOffset;
}
struct LINECARDENTRY
{
    align (1):
    uint dwPermanentCardID;
    uint dwCardNameSize;
    uint dwCardNameOffset;
    uint dwCardNumberDigits;
    uint dwSameAreaRuleSize;
    uint dwSameAreaRuleOffset;
    uint dwLongDistanceRuleSize;
    uint dwLongDistanceRuleOffset;
    uint dwInternationalRuleSize;
    uint dwInternationalRuleOffset;
    uint dwOptions;
}
struct LINECOUNTRYENTRY
{
    align (1):
    uint dwCountryID;
    uint dwCountryCode;
    uint dwNextCountryID;
    uint dwCountryNameSize;
    uint dwCountryNameOffset;
    uint dwSameAreaRuleSize;
    uint dwSameAreaRuleOffset;
    uint dwLongDistanceRuleSize;
    uint dwLongDistanceRuleOffset;
    uint dwInternationalRuleSize;
    uint dwInternationalRuleOffset;
}
struct LINECOUNTRYLIST
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwNumCountries;
    uint dwCountryListSize;
    uint dwCountryListOffset;
}
struct LINEDEVCAPS
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwProviderInfoSize;
    uint dwProviderInfoOffset;
    uint dwSwitchInfoSize;
    uint dwSwitchInfoOffset;
    uint dwPermanentLineID;
    uint dwLineNameSize;
    uint dwLineNameOffset;
    uint dwStringFormat;
    uint dwAddressModes;
    uint dwNumAddresses;
    uint dwBearerModes;
    uint dwMaxRate;
    uint dwMediaModes;
    uint dwGenerateToneModes;
    uint dwGenerateToneMaxNumFreq;
    uint dwGenerateDigitModes;
    uint dwMonitorToneMaxNumFreq;
    uint dwMonitorToneMaxNumEntries;
    uint dwMonitorDigitModes;
    uint dwGatherDigitsMinTimeout;
    uint dwGatherDigitsMaxTimeout;
    uint dwMedCtlDigitMaxListSize;
    uint dwMedCtlMediaMaxListSize;
    uint dwMedCtlToneMaxListSize;
    uint dwMedCtlCallStateMaxListSize;
    uint dwDevCapFlags;
    uint dwMaxNumActiveCalls;
    uint dwAnswerMode;
    uint dwRingModes;
    uint dwLineStates;
    uint dwUUIAcceptSize;
    uint dwUUIAnswerSize;
    uint dwUUIMakeCallSize;
    uint dwUUIDropSize;
    uint dwUUISendUserUserInfoSize;
    uint dwUUICallInfoSize;
    LINEDIALPARAMS MinDialParams;
    LINEDIALPARAMS MaxDialParams;
    LINEDIALPARAMS DefaultDialParams;
    uint dwNumTerminals;
    uint dwTerminalCapsSize;
    uint dwTerminalCapsOffset;
    uint dwTerminalTextEntrySize;
    uint dwTerminalTextSize;
    uint dwTerminalTextOffset;
    uint dwDevSpecificSize;
    uint dwDevSpecificOffset;
    uint dwLineFeatures;
    uint dwSettableDevStatus;
    uint dwDeviceClassesSize;
    uint dwDeviceClassesOffset;
    GUID PermanentLineGuid;
}
struct LINEDEVSTATUS
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwNumOpens;
    uint dwOpenMediaModes;
    uint dwNumActiveCalls;
    uint dwNumOnHoldCalls;
    uint dwNumOnHoldPendCalls;
    uint dwLineFeatures;
    uint dwNumCallCompletions;
    uint dwRingMode;
    uint dwSignalLevel;
    uint dwBatteryLevel;
    uint dwRoamMode;
    uint dwDevStatusFlags;
    uint dwTerminalModesSize;
    uint dwTerminalModesOffset;
    uint dwDevSpecificSize;
    uint dwDevSpecificOffset;
    uint dwAvailableMediaModes;
    uint dwAppInfoSize;
    uint dwAppInfoOffset;
}
struct LINEEXTENSIONID
{
    align (1):
    uint dwExtensionID0;
    uint dwExtensionID1;
    uint dwExtensionID2;
    uint dwExtensionID3;
}
struct LINEFORWARD
{
    align (1):
    uint dwForwardMode;
    uint dwCallerAddressSize;
    uint dwCallerAddressOffset;
    uint dwDestCountryCode;
    uint dwDestAddressSize;
    uint dwDestAddressOffset;
}
struct LINEFORWARDLIST
{
    align (1):
    uint dwTotalSize;
    uint dwNumEntries;
    LINEFORWARD[1] ForwardList;
}
struct LINEGENERATETONE
{
    align (1):
    uint dwFrequency;
    uint dwCadenceOn;
    uint dwCadenceOff;
    uint dwVolume;
}
struct LINEINITIALIZEEXPARAMS
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwOptions;
    union _Handles_e__Union
    {
        align (1):
        HANDLE hEvent;
        HANDLE hCompletionPort;
    }
    uint dwCompletionKey;
}
struct LINELOCATIONENTRY
{
    align (1):
    uint dwPermanentLocationID;
    uint dwLocationNameSize;
    uint dwLocationNameOffset;
    uint dwCountryCode;
    uint dwCityCodeSize;
    uint dwCityCodeOffset;
    uint dwPreferredCardID;
    uint dwLocalAccessCodeSize;
    uint dwLocalAccessCodeOffset;
    uint dwLongDistanceAccessCodeSize;
    uint dwLongDistanceAccessCodeOffset;
    uint dwTollPrefixListSize;
    uint dwTollPrefixListOffset;
    uint dwCountryID;
    uint dwOptions;
    uint dwCancelCallWaitingSize;
    uint dwCancelCallWaitingOffset;
}
struct LINEMEDIACONTROLCALLSTATE
{
    align (1):
    uint dwCallStates;
    uint dwMediaControl;
}
struct LINEMEDIACONTROLDIGIT
{
    align (1):
    uint dwDigit;
    uint dwDigitModes;
    uint dwMediaControl;
}
struct LINEMEDIACONTROLMEDIA
{
    align (1):
    uint dwMediaModes;
    uint dwDuration;
    uint dwMediaControl;
}
struct LINEMEDIACONTROLTONE
{
    align (1):
    uint dwAppSpecific;
    uint dwDuration;
    uint dwFrequency1;
    uint dwFrequency2;
    uint dwFrequency3;
    uint dwMediaControl;
}
struct LINEMESSAGE
{
    align (1):
    uint hDevice;
    uint dwMessageID;
    ulong dwCallbackInstance;
    ulong dwParam1;
    ulong dwParam2;
    ulong dwParam3;
}
struct LINEMONITORTONE
{
    align (1):
    uint dwAppSpecific;
    uint dwDuration;
    uint dwFrequency1;
    uint dwFrequency2;
    uint dwFrequency3;
}
struct LINEPROVIDERENTRY
{
    align (1):
    uint dwPermanentProviderID;
    uint dwProviderFilenameSize;
    uint dwProviderFilenameOffset;
}
struct LINEPROVIDERLIST
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwNumProviders;
    uint dwProviderListSize;
    uint dwProviderListOffset;
}
struct LINEPROXYREQUEST
{
    align (1):
    uint dwSize;
    uint dwClientMachineNameSize;
    uint dwClientMachineNameOffset;
    uint dwClientUserNameSize;
    uint dwClientUserNameOffset;
    uint dwClientAppAPIVersion;
    uint dwRequestType;
    union
    {
        struct _SetAgentGroup_e__Struct
        {
            align (1):
            uint dwAddressID;
            LINEAGENTGROUPLIST GroupList;
        }
        struct _SetAgentState_e__Struct
        {
            align (1):
            uint dwAddressID;
            uint dwAgentState;
            uint dwNextAgentState;
        }
        struct _SetAgentActivity_e__Struct
        {
            align (1):
            uint dwAddressID;
            uint dwActivityID;
        }
        struct _GetAgentCaps_e__Struct
        {
            align (1):
            uint dwAddressID;
            LINEAGENTCAPS AgentCaps;
        }
        struct _GetAgentStatus_e__Struct
        {
            align (1):
            uint dwAddressID;
            LINEAGENTSTATUS AgentStatus;
        }
        struct _AgentSpecific_e__Struct
        {
            align (1):
            uint dwAddressID;
            uint dwAgentExtensionIDIndex;
            uint dwSize;
            ubyte[1] Params;
        }
        struct _GetAgentActivityList_e__Struct
        {
            align (1):
            uint dwAddressID;
            LINEAGENTACTIVITYLIST ActivityList;
        }
        struct _GetAgentGroupList_e__Struct
        {
            align (1):
            uint dwAddressID;
            LINEAGENTGROUPLIST GroupList;
        }
        struct _CreateAgent_e__Struct
        {
            align (1):
            uint hAgent;
            uint dwAgentIDSize;
            uint dwAgentIDOffset;
            uint dwAgentPINSize;
            uint dwAgentPINOffset;
        }
        struct _SetAgentStateEx_e__Struct
        {
            align (1):
            uint hAgent;
            uint dwAgentState;
            uint dwNextAgentState;
        }
        struct _SetAgentMeasurementPeriod_e__Struct
        {
            align (1):
            uint hAgent;
            uint dwMeasurementPeriod;
        }
        struct _GetAgentInfo_e__Struct
        {
            align (1):
            uint hAgent;
            LINEAGENTINFO AgentInfo;
        }
        struct _CreateAgentSession_e__Struct
        {
            align (1):
            uint hAgentSession;
            uint dwAgentPINSize;
            uint dwAgentPINOffset;
            uint hAgent;
            GUID GroupID;
            uint dwWorkingAddressID;
        }
        struct _GetAgentSessionList_e__Struct
        {
            align (1):
            uint hAgent;
            LINEAGENTSESSIONLIST SessionList;
        }
        struct _GetAgentSessionInfo_e__Struct
        {
            align (1):
            uint hAgentSession;
            LINEAGENTSESSIONINFO SessionInfo;
        }
        struct _SetAgentSessionState_e__Struct
        {
            align (1):
            uint hAgentSession;
            uint dwAgentSessionState;
            uint dwNextAgentSessionState;
        }
        struct _GetQueueList_e__Struct
        {
            align (1):
            GUID GroupID;
            LINEQUEUELIST QueueList;
        }
        struct _SetQueueMeasurementPeriod_e__Struct
        {
            align (1):
            uint dwQueueID;
            uint dwMeasurementPeriod;
        }
        struct _GetQueueInfo_e__Struct
        {
            align (1):
            uint dwQueueID;
            LINEQUEUEINFO QueueInfo;
        }
        struct _GetGroupList_e__Struct
        {
            LINEAGENTGROUPLIST GroupList;
        }
    }
}
struct LINEREQMAKECALL
{
    CHAR[80] szDestAddress;
    CHAR[40] szAppName;
    CHAR[40] szCalledParty;
    CHAR[80] szComment;
}
struct LINEREQMAKECALLW
{
    align (1):
    wchar[80] szDestAddress;
    wchar[40] szAppName;
    wchar[40] szCalledParty;
    wchar[80] szComment;
}
struct LINEREQMEDIACALL
{
    align (1):
    HWND hWnd;
    WPARAM wRequestID;
    CHAR[40] szDeviceClass;
    ubyte[40] ucDeviceID;
    uint dwSize;
    uint dwSecure;
    CHAR[80] szDestAddress;
    CHAR[40] szAppName;
    CHAR[40] szCalledParty;
    CHAR[80] szComment;
}
struct LINEREQMEDIACALLW
{
    align (1):
    HWND hWnd;
    WPARAM wRequestID;
    wchar[40] szDeviceClass;
    ubyte[40] ucDeviceID;
    uint dwSize;
    uint dwSecure;
    wchar[80] szDestAddress;
    wchar[40] szAppName;
    wchar[40] szCalledParty;
    wchar[80] szComment;
}
struct LINETERMCAPS
{
    align (1):
    uint dwTermDev;
    uint dwTermModes;
    uint dwTermSharing;
}
struct LINETRANSLATECAPS
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwNumLocations;
    uint dwLocationListSize;
    uint dwLocationListOffset;
    uint dwCurrentLocationID;
    uint dwNumCards;
    uint dwCardListSize;
    uint dwCardListOffset;
    uint dwCurrentPreferredCardID;
}
struct LINETRANSLATEOUTPUT
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwDialableStringSize;
    uint dwDialableStringOffset;
    uint dwDisplayableStringSize;
    uint dwDisplayableStringOffset;
    uint dwCurrentCountry;
    uint dwDestCountry;
    uint dwTranslateResults;
}
struct PHONEBUTTONINFO
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwButtonMode;
    uint dwButtonFunction;
    uint dwButtonTextSize;
    uint dwButtonTextOffset;
    uint dwDevSpecificSize;
    uint dwDevSpecificOffset;
    uint dwButtonState;
}
struct PHONECAPS
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwProviderInfoSize;
    uint dwProviderInfoOffset;
    uint dwPhoneInfoSize;
    uint dwPhoneInfoOffset;
    uint dwPermanentPhoneID;
    uint dwPhoneNameSize;
    uint dwPhoneNameOffset;
    uint dwStringFormat;
    uint dwPhoneStates;
    uint dwHookSwitchDevs;
    uint dwHandsetHookSwitchModes;
    uint dwSpeakerHookSwitchModes;
    uint dwHeadsetHookSwitchModes;
    uint dwVolumeFlags;
    uint dwGainFlags;
    uint dwDisplayNumRows;
    uint dwDisplayNumColumns;
    uint dwNumRingModes;
    uint dwNumButtonLamps;
    uint dwButtonModesSize;
    uint dwButtonModesOffset;
    uint dwButtonFunctionsSize;
    uint dwButtonFunctionsOffset;
    uint dwLampModesSize;
    uint dwLampModesOffset;
    uint dwNumSetData;
    uint dwSetDataSize;
    uint dwSetDataOffset;
    uint dwNumGetData;
    uint dwGetDataSize;
    uint dwGetDataOffset;
    uint dwDevSpecificSize;
    uint dwDevSpecificOffset;
    uint dwDeviceClassesSize;
    uint dwDeviceClassesOffset;
    uint dwPhoneFeatures;
    uint dwSettableHandsetHookSwitchModes;
    uint dwSettableSpeakerHookSwitchModes;
    uint dwSettableHeadsetHookSwitchModes;
    uint dwMonitoredHandsetHookSwitchModes;
    uint dwMonitoredSpeakerHookSwitchModes;
    uint dwMonitoredHeadsetHookSwitchModes;
    GUID PermanentPhoneGuid;
}
struct PHONEEXTENSIONID
{
    align (1):
    uint dwExtensionID0;
    uint dwExtensionID1;
    uint dwExtensionID2;
    uint dwExtensionID3;
}
struct PHONEINITIALIZEEXPARAMS
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwOptions;
    union _Handles_e__Union
    {
        align (1):
        HANDLE hEvent;
        HANDLE hCompletionPort;
    }
    uint dwCompletionKey;
}
struct PHONEMESSAGE
{
    align (1):
    uint hDevice;
    uint dwMessageID;
    ulong dwCallbackInstance;
    ulong dwParam1;
    ulong dwParam2;
    ulong dwParam3;
}
struct PHONESTATUS
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwStatusFlags;
    uint dwNumOwners;
    uint dwNumMonitors;
    uint dwRingMode;
    uint dwRingVolume;
    uint dwHandsetHookSwitchMode;
    uint dwHandsetVolume;
    uint dwHandsetGain;
    uint dwSpeakerHookSwitchMode;
    uint dwSpeakerVolume;
    uint dwSpeakerGain;
    uint dwHeadsetHookSwitchMode;
    uint dwHeadsetVolume;
    uint dwHeadsetGain;
    uint dwDisplaySize;
    uint dwDisplayOffset;
    uint dwLampModesSize;
    uint dwLampModesOffset;
    uint dwOwnerNameSize;
    uint dwOwnerNameOffset;
    uint dwDevSpecificSize;
    uint dwDevSpecificOffset;
    uint dwPhoneFeatures;
}
struct VARSTRING
{
    align (1):
    uint dwTotalSize;
    uint dwNeededSize;
    uint dwUsedSize;
    uint dwStringFormat;
    uint dwStringSize;
    uint dwStringOffset;
}
struct HDRVCALL__
{
    int unused;
}
struct HDRVLINE__
{
    int unused;
}
struct HDRVPHONE__
{
    int unused;
}
struct HDRVMSPLINE__
{
    int unused;
}
struct HDRVDIALOGINSTANCE__
{
    int unused;
}
struct HTAPICALL__
{
    int unused;
}
struct HTAPILINE__
{
    int unused;
}
struct HTAPIPHONE__
{
    int unused;
}
struct HPROVIDER__
{
    int unused;
}
alias ASYNC_COMPLETION = void function(uint, int);
alias LINEEVENT = void function(HTAPILINE__*, HTAPICALL__*, uint, ulong, ulong, ulong);
alias PHONEEVENT = void function(HTAPIPHONE__*, uint, ulong, ulong, ulong);
alias TUISPIDLLCALLBACK = int function(ulong, uint, void*, uint);
struct TUISPICREATEDIALOGINSTANCEPARAMS
{
    uint dwRequestID;
    HDRVDIALOGINSTANCE__* hdDlgInst;
    uint htDlgInst;
    const(wchar)* lpszUIDLLName;
    void* lpParams;
    uint dwSize;
}
enum CLSID_TAPI = GUID(0x21d6d48e, 0xa88b, 0x11d0, [0x83, 0xdd, 0x0, 0xaa, 0x0, 0x3c, 0xca, 0xbd]);
struct TAPI
{
}
enum CLSID_DispatchMapper = GUID(0xe9225296, 0xc759, 0x11d1, [0xa0, 0x2b, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
struct DispatchMapper
{
}
enum CLSID_RequestMakeCall = GUID(0xac48ffe0, 0xf8c4, 0x11d1, [0xa0, 0x30, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
struct RequestMakeCall
{
}
alias TAPI_TONEMODE = int;
enum : int
{
    TTM_RINGBACK = 0x00000002,
    TTM_BUSY     = 0x00000004,
    TTM_BEEP     = 0x00000008,
    TTM_BILLING  = 0x00000010,
}

alias TAPI_GATHERTERM = int;
enum : int
{
    TGT_BUFFERFULL   = 0x00000001,
    TGT_TERMDIGIT    = 0x00000002,
    TGT_FIRSTTIMEOUT = 0x00000004,
    TGT_INTERTIMEOUT = 0x00000008,
    TGT_CANCEL       = 0x00000010,
}

struct TAPI_CUSTOMTONE
{
    uint dwFrequency;
    uint dwCadenceOn;
    uint dwCadenceOff;
    uint dwVolume;
}
struct TAPI_DETECTTONE
{
    uint dwAppSpecific;
    uint dwDuration;
    uint dwFrequency1;
    uint dwFrequency2;
    uint dwFrequency3;
}
alias ADDRESS_EVENT = int;
enum : int
{
    AE_STATE          = 0x00000000,
    AE_CAPSCHANGE     = 0x00000001,
    AE_RINGING        = 0x00000002,
    AE_CONFIGCHANGE   = 0x00000003,
    AE_FORWARD        = 0x00000004,
    AE_NEWTERMINAL    = 0x00000005,
    AE_REMOVETERMINAL = 0x00000006,
    AE_MSGWAITON      = 0x00000007,
    AE_MSGWAITOFF     = 0x00000008,
    AE_LASTITEM       = 0x00000008,
}

alias ADDRESS_STATE = int;
enum : int
{
    AS_INSERVICE    = 0x00000000,
    AS_OUTOFSERVICE = 0x00000001,
}

alias CALL_STATE = int;
enum : int
{
    CS_IDLE         = 0x00000000,
    CS_INPROGRESS   = 0x00000001,
    CS_CONNECTED    = 0x00000002,
    CS_DISCONNECTED = 0x00000003,
    CS_OFFERING     = 0x00000004,
    CS_HOLD         = 0x00000005,
    CS_QUEUED       = 0x00000006,
    CS_LASTITEM     = 0x00000006,
}

alias CALL_STATE_EVENT_CAUSE = int;
enum : int
{
    CEC_NONE                  = 0x00000000,
    CEC_DISCONNECT_NORMAL     = 0x00000001,
    CEC_DISCONNECT_BUSY       = 0x00000002,
    CEC_DISCONNECT_BADADDRESS = 0x00000003,
    CEC_DISCONNECT_NOANSWER   = 0x00000004,
    CEC_DISCONNECT_CANCELLED  = 0x00000005,
    CEC_DISCONNECT_REJECTED   = 0x00000006,
    CEC_DISCONNECT_FAILED     = 0x00000007,
    CEC_DISCONNECT_BLOCKED    = 0x00000008,
}

alias CALL_MEDIA_EVENT = int;
enum : int
{
    CME_NEW_STREAM      = 0x00000000,
    CME_STREAM_FAIL     = 0x00000001,
    CME_TERMINAL_FAIL   = 0x00000002,
    CME_STREAM_NOT_USED = 0x00000003,
    CME_STREAM_ACTIVE   = 0x00000004,
    CME_STREAM_INACTIVE = 0x00000005,
    CME_LASTITEM        = 0x00000005,
}

alias CALL_MEDIA_EVENT_CAUSE = int;
enum : int
{
    CMC_UNKNOWN            = 0x00000000,
    CMC_BAD_DEVICE         = 0x00000001,
    CMC_CONNECT_FAIL       = 0x00000002,
    CMC_LOCAL_REQUEST      = 0x00000003,
    CMC_REMOTE_REQUEST     = 0x00000004,
    CMC_MEDIA_TIMEOUT      = 0x00000005,
    CMC_MEDIA_RECOVERED    = 0x00000006,
    CMC_QUALITY_OF_SERVICE = 0x00000007,
}

alias DISCONNECT_CODE = int;
enum : int
{
    DC_NORMAL   = 0x00000000,
    DC_NOANSWER = 0x00000001,
    DC_REJECTED = 0x00000002,
}

alias TERMINAL_STATE = int;
enum : int
{
    TS_INUSE    = 0x00000000,
    TS_NOTINUSE = 0x00000001,
}

alias TERMINAL_DIRECTION = int;
enum : int
{
    TD_CAPTURE          = 0x00000000,
    TD_RENDER           = 0x00000001,
    TD_BIDIRECTIONAL    = 0x00000002,
    TD_MULTITRACK_MIXED = 0x00000003,
    TD_NONE             = 0x00000004,
}

alias TERMINAL_TYPE = int;
enum : int
{
    TT_STATIC  = 0x00000000,
    TT_DYNAMIC = 0x00000001,
}

alias CALL_PRIVILEGE = int;
enum : int
{
    CP_OWNER   = 0x00000000,
    CP_MONITOR = 0x00000001,
}

alias TAPI_EVENT = int;
enum : int
{
    TE_TAPIOBJECT         = 0x00000001,
    TE_ADDRESS            = 0x00000002,
    TE_CALLNOTIFICATION   = 0x00000004,
    TE_CALLSTATE          = 0x00000008,
    TE_CALLMEDIA          = 0x00000010,
    TE_CALLHUB            = 0x00000020,
    TE_CALLINFOCHANGE     = 0x00000040,
    TE_PRIVATE            = 0x00000080,
    TE_REQUEST            = 0x00000100,
    TE_AGENT              = 0x00000200,
    TE_AGENTSESSION       = 0x00000400,
    TE_QOSEVENT           = 0x00000800,
    TE_AGENTHANDLER       = 0x00001000,
    TE_ACDGROUP           = 0x00002000,
    TE_QUEUE              = 0x00004000,
    TE_DIGITEVENT         = 0x00008000,
    TE_GENERATEEVENT      = 0x00010000,
    TE_ASRTERMINAL        = 0x00020000,
    TE_TTSTERMINAL        = 0x00040000,
    TE_FILETERMINAL       = 0x00080000,
    TE_TONETERMINAL       = 0x00100000,
    TE_PHONEEVENT         = 0x00200000,
    TE_TONEEVENT          = 0x00400000,
    TE_GATHERDIGITS       = 0x00800000,
    TE_ADDRESSDEVSPECIFIC = 0x01000000,
    TE_PHONEDEVSPECIFIC   = 0x02000000,
}

alias CALL_NOTIFICATION_EVENT = int;
enum : int
{
    CNE_OWNER    = 0x00000000,
    CNE_MONITOR  = 0x00000001,
    CNE_LASTITEM = 0x00000001,
}

alias CALLHUB_EVENT = int;
enum : int
{
    CHE_CALLJOIN    = 0x00000000,
    CHE_CALLLEAVE   = 0x00000001,
    CHE_CALLHUBNEW  = 0x00000002,
    CHE_CALLHUBIDLE = 0x00000003,
    CHE_LASTITEM    = 0x00000003,
}

alias CALLHUB_STATE = int;
enum : int
{
    CHS_ACTIVE = 0x00000000,
    CHS_IDLE   = 0x00000001,
}

alias TAPIOBJECT_EVENT = int;
enum : int
{
    TE_ADDRESSCREATE   = 0x00000000,
    TE_ADDRESSREMOVE   = 0x00000001,
    TE_REINIT          = 0x00000002,
    TE_TRANSLATECHANGE = 0x00000003,
    TE_ADDRESSCLOSE    = 0x00000004,
    TE_PHONECREATE     = 0x00000005,
    TE_PHONEREMOVE     = 0x00000006,
}

alias TAPI_OBJECT_TYPE = int;
enum : int
{
    TOT_NONE     = 0x00000000,
    TOT_TAPI     = 0x00000001,
    TOT_ADDRESS  = 0x00000002,
    TOT_TERMINAL = 0x00000003,
    TOT_CALL     = 0x00000004,
    TOT_CALLHUB  = 0x00000005,
    TOT_PHONE    = 0x00000006,
}

alias QOS_SERVICE_LEVEL = int;
enum : int
{
    QSL_NEEDED       = 0x00000001,
    QSL_IF_AVAILABLE = 0x00000002,
    QSL_BEST_EFFORT  = 0x00000003,
}

alias QOS_EVENT = int;
enum : int
{
    QE_NOQOS            = 0x00000001,
    QE_ADMISSIONFAILURE = 0x00000002,
    QE_POLICYFAILURE    = 0x00000003,
    QE_GENERICERROR     = 0x00000004,
    QE_LASTITEM         = 0x00000004,
}

alias CALLINFOCHANGE_CAUSE = int;
enum : int
{
    CIC_OTHER         = 0x00000000,
    CIC_DEVSPECIFIC   = 0x00000001,
    CIC_BEARERMODE    = 0x00000002,
    CIC_RATE          = 0x00000003,
    CIC_APPSPECIFIC   = 0x00000004,
    CIC_CALLID        = 0x00000005,
    CIC_RELATEDCALLID = 0x00000006,
    CIC_ORIGIN        = 0x00000007,
    CIC_REASON        = 0x00000008,
    CIC_COMPLETIONID  = 0x00000009,
    CIC_NUMOWNERINCR  = 0x0000000a,
    CIC_NUMOWNERDECR  = 0x0000000b,
    CIC_NUMMONITORS   = 0x0000000c,
    CIC_TRUNK         = 0x0000000d,
    CIC_CALLERID      = 0x0000000e,
    CIC_CALLEDID      = 0x0000000f,
    CIC_CONNECTEDID   = 0x00000010,
    CIC_REDIRECTIONID = 0x00000011,
    CIC_REDIRECTINGID = 0x00000012,
    CIC_USERUSERINFO  = 0x00000013,
    CIC_HIGHLEVELCOMP = 0x00000014,
    CIC_LOWLEVELCOMP  = 0x00000015,
    CIC_CHARGINGINFO  = 0x00000016,
    CIC_TREATMENT     = 0x00000017,
    CIC_CALLDATA      = 0x00000018,
    CIC_PRIVILEGE     = 0x00000019,
    CIC_MEDIATYPE     = 0x0000001a,
    CIC_LASTITEM      = 0x0000001a,
}

alias CALLINFO_LONG = int;
enum : int
{
    CIL_MEDIATYPESAVAILABLE      = 0x00000000,
    CIL_BEARERMODE               = 0x00000001,
    CIL_CALLERIDADDRESSTYPE      = 0x00000002,
    CIL_CALLEDIDADDRESSTYPE      = 0x00000003,
    CIL_CONNECTEDIDADDRESSTYPE   = 0x00000004,
    CIL_REDIRECTIONIDADDRESSTYPE = 0x00000005,
    CIL_REDIRECTINGIDADDRESSTYPE = 0x00000006,
    CIL_ORIGIN                   = 0x00000007,
    CIL_REASON                   = 0x00000008,
    CIL_APPSPECIFIC              = 0x00000009,
    CIL_CALLPARAMSFLAGS          = 0x0000000a,
    CIL_CALLTREATMENT            = 0x0000000b,
    CIL_MINRATE                  = 0x0000000c,
    CIL_MAXRATE                  = 0x0000000d,
    CIL_COUNTRYCODE              = 0x0000000e,
    CIL_CALLID                   = 0x0000000f,
    CIL_RELATEDCALLID            = 0x00000010,
    CIL_COMPLETIONID             = 0x00000011,
    CIL_NUMBEROFOWNERS           = 0x00000012,
    CIL_NUMBEROFMONITORS         = 0x00000013,
    CIL_TRUNK                    = 0x00000014,
    CIL_RATE                     = 0x00000015,
    CIL_GENERATEDIGITDURATION    = 0x00000016,
    CIL_MONITORDIGITMODES        = 0x00000017,
    CIL_MONITORMEDIAMODES        = 0x00000018,
}

alias CALLINFO_STRING = int;
enum : int
{
    CIS_CALLERIDNAME            = 0x00000000,
    CIS_CALLERIDNUMBER          = 0x00000001,
    CIS_CALLEDIDNAME            = 0x00000002,
    CIS_CALLEDIDNUMBER          = 0x00000003,
    CIS_CONNECTEDIDNAME         = 0x00000004,
    CIS_CONNECTEDIDNUMBER       = 0x00000005,
    CIS_REDIRECTIONIDNAME       = 0x00000006,
    CIS_REDIRECTIONIDNUMBER     = 0x00000007,
    CIS_REDIRECTINGIDNAME       = 0x00000008,
    CIS_REDIRECTINGIDNUMBER     = 0x00000009,
    CIS_CALLEDPARTYFRIENDLYNAME = 0x0000000a,
    CIS_COMMENT                 = 0x0000000b,
    CIS_DISPLAYABLEADDRESS      = 0x0000000c,
    CIS_CALLINGPARTYID          = 0x0000000d,
}

alias CALLINFO_BUFFER = int;
enum : int
{
    CIB_USERUSERINFO                 = 0x00000000,
    CIB_DEVSPECIFICBUFFER            = 0x00000001,
    CIB_CALLDATABUFFER               = 0x00000002,
    CIB_CHARGINGINFOBUFFER           = 0x00000003,
    CIB_HIGHLEVELCOMPATIBILITYBUFFER = 0x00000004,
    CIB_LOWLEVELCOMPATIBILITYBUFFER  = 0x00000005,
}

alias ADDRESS_CAPABILITY = int;
enum : int
{
    AC_ADDRESSTYPES                 = 0x00000000,
    AC_BEARERMODES                  = 0x00000001,
    AC_MAXACTIVECALLS               = 0x00000002,
    AC_MAXONHOLDCALLS               = 0x00000003,
    AC_MAXONHOLDPENDINGCALLS        = 0x00000004,
    AC_MAXNUMCONFERENCE             = 0x00000005,
    AC_MAXNUMTRANSCONF              = 0x00000006,
    AC_MONITORDIGITSUPPORT          = 0x00000007,
    AC_GENERATEDIGITSUPPORT         = 0x00000008,
    AC_GENERATETONEMODES            = 0x00000009,
    AC_GENERATETONEMAXNUMFREQ       = 0x0000000a,
    AC_MONITORTONEMAXNUMFREQ        = 0x0000000b,
    AC_MONITORTONEMAXNUMENTRIES     = 0x0000000c,
    AC_DEVCAPFLAGS                  = 0x0000000d,
    AC_ANSWERMODES                  = 0x0000000e,
    AC_LINEFEATURES                 = 0x0000000f,
    AC_SETTABLEDEVSTATUS            = 0x00000010,
    AC_PARKSUPPORT                  = 0x00000011,
    AC_CALLERIDSUPPORT              = 0x00000012,
    AC_CALLEDIDSUPPORT              = 0x00000013,
    AC_CONNECTEDIDSUPPORT           = 0x00000014,
    AC_REDIRECTIONIDSUPPORT         = 0x00000015,
    AC_REDIRECTINGIDSUPPORT         = 0x00000016,
    AC_ADDRESSCAPFLAGS              = 0x00000017,
    AC_CALLFEATURES1                = 0x00000018,
    AC_CALLFEATURES2                = 0x00000019,
    AC_REMOVEFROMCONFCAPS           = 0x0000001a,
    AC_REMOVEFROMCONFSTATE          = 0x0000001b,
    AC_TRANSFERMODES                = 0x0000001c,
    AC_ADDRESSFEATURES              = 0x0000001d,
    AC_PREDICTIVEAUTOTRANSFERSTATES = 0x0000001e,
    AC_MAXCALLDATASIZE              = 0x0000001f,
    AC_LINEID                       = 0x00000020,
    AC_ADDRESSID                    = 0x00000021,
    AC_FORWARDMODES                 = 0x00000022,
    AC_MAXFORWARDENTRIES            = 0x00000023,
    AC_MAXSPECIFICENTRIES           = 0x00000024,
    AC_MINFWDNUMRINGS               = 0x00000025,
    AC_MAXFWDNUMRINGS               = 0x00000026,
    AC_MAXCALLCOMPLETIONS           = 0x00000027,
    AC_CALLCOMPLETIONCONDITIONS     = 0x00000028,
    AC_CALLCOMPLETIONMODES          = 0x00000029,
    AC_PERMANENTDEVICEID            = 0x0000002a,
    AC_GATHERDIGITSMINTIMEOUT       = 0x0000002b,
    AC_GATHERDIGITSMAXTIMEOUT       = 0x0000002c,
    AC_GENERATEDIGITMINDURATION     = 0x0000002d,
    AC_GENERATEDIGITMAXDURATION     = 0x0000002e,
    AC_GENERATEDIGITDEFAULTDURATION = 0x0000002f,
}

alias ADDRESS_CAPABILITY_STRING = int;
enum : int
{
    ACS_PROTOCOL              = 0x00000000,
    ACS_ADDRESSDEVICESPECIFIC = 0x00000001,
    ACS_LINEDEVICESPECIFIC    = 0x00000002,
    ACS_PROVIDERSPECIFIC      = 0x00000003,
    ACS_SWITCHSPECIFIC        = 0x00000004,
    ACS_PERMANENTDEVICEGUID   = 0x00000005,
}

alias FULLDUPLEX_SUPPORT = int;
enum : int
{
    FDS_SUPPORTED    = 0x00000000,
    FDS_NOTSUPPORTED = 0x00000001,
    FDS_UNKNOWN      = 0x00000002,
}

alias FINISH_MODE = int;
enum : int
{
    FM_ASTRANSFER   = 0x00000000,
    FM_ASCONFERENCE = 0x00000001,
}

alias PHONE_PRIVILEGE = int;
enum : int
{
    PP_OWNER   = 0x00000000,
    PP_MONITOR = 0x00000001,
}

alias PHONE_HOOK_SWITCH_DEVICE = int;
enum : int
{
    PHSD_HANDSET      = 0x00000001,
    PHSD_SPEAKERPHONE = 0x00000002,
    PHSD_HEADSET      = 0x00000004,
}

alias PHONE_HOOK_SWITCH_STATE = int;
enum : int
{
    PHSS_ONHOOK               = 0x00000001,
    PHSS_OFFHOOK_MIC_ONLY     = 0x00000002,
    PHSS_OFFHOOK_SPEAKER_ONLY = 0x00000004,
    PHSS_OFFHOOK              = 0x00000008,
}

alias PHONE_LAMP_MODE = int;
enum : int
{
    LM_DUMMY         = 0x00000001,
    LM_OFF           = 0x00000002,
    LM_STEADY        = 0x00000004,
    LM_WINK          = 0x00000008,
    LM_FLASH         = 0x00000010,
    LM_FLUTTER       = 0x00000020,
    LM_BROKENFLUTTER = 0x00000040,
    LM_UNKNOWN       = 0x00000080,
}

alias PHONECAPS_LONG = int;
enum : int
{
    PCL_HOOKSWITCHES                = 0x00000000,
    PCL_HANDSETHOOKSWITCHMODES      = 0x00000001,
    PCL_HEADSETHOOKSWITCHMODES      = 0x00000002,
    PCL_SPEAKERPHONEHOOKSWITCHMODES = 0x00000003,
    PCL_DISPLAYNUMROWS              = 0x00000004,
    PCL_DISPLAYNUMCOLUMNS           = 0x00000005,
    PCL_NUMRINGMODES                = 0x00000006,
    PCL_NUMBUTTONLAMPS              = 0x00000007,
    PCL_GENERICPHONE                = 0x00000008,
}

alias PHONECAPS_STRING = int;
enum : int
{
    PCS_PHONENAME    = 0x00000000,
    PCS_PHONEINFO    = 0x00000001,
    PCS_PROVIDERINFO = 0x00000002,
}

alias PHONECAPS_BUFFER = int;
enum : int
{
    PCB_DEVSPECIFICBUFFER = 0x00000000,
}

alias PHONE_BUTTON_STATE = int;
enum : int
{
    PBS_UP      = 0x00000001,
    PBS_DOWN    = 0x00000002,
    PBS_UNKNOWN = 0x00000004,
    PBS_UNAVAIL = 0x00000008,
}

alias PHONE_BUTTON_MODE = int;
enum : int
{
    PBM_DUMMY   = 0x00000000,
    PBM_CALL    = 0x00000001,
    PBM_FEATURE = 0x00000002,
    PBM_KEYPAD  = 0x00000003,
    PBM_LOCAL   = 0x00000004,
    PBM_DISPLAY = 0x00000005,
}

alias PHONE_BUTTON_FUNCTION = int;
enum : int
{
    PBF_UNKNOWN      = 0x00000000,
    PBF_CONFERENCE   = 0x00000001,
    PBF_TRANSFER     = 0x00000002,
    PBF_DROP         = 0x00000003,
    PBF_HOLD         = 0x00000004,
    PBF_RECALL       = 0x00000005,
    PBF_DISCONNECT   = 0x00000006,
    PBF_CONNECT      = 0x00000007,
    PBF_MSGWAITON    = 0x00000008,
    PBF_MSGWAITOFF   = 0x00000009,
    PBF_SELECTRING   = 0x0000000a,
    PBF_ABBREVDIAL   = 0x0000000b,
    PBF_FORWARD      = 0x0000000c,
    PBF_PICKUP       = 0x0000000d,
    PBF_RINGAGAIN    = 0x0000000e,
    PBF_PARK         = 0x0000000f,
    PBF_REJECT       = 0x00000010,
    PBF_REDIRECT     = 0x00000011,
    PBF_MUTE         = 0x00000012,
    PBF_VOLUMEUP     = 0x00000013,
    PBF_VOLUMEDOWN   = 0x00000014,
    PBF_SPEAKERON    = 0x00000015,
    PBF_SPEAKEROFF   = 0x00000016,
    PBF_FLASH        = 0x00000017,
    PBF_DATAON       = 0x00000018,
    PBF_DATAOFF      = 0x00000019,
    PBF_DONOTDISTURB = 0x0000001a,
    PBF_INTERCOM     = 0x0000001b,
    PBF_BRIDGEDAPP   = 0x0000001c,
    PBF_BUSY         = 0x0000001d,
    PBF_CALLAPP      = 0x0000001e,
    PBF_DATETIME     = 0x0000001f,
    PBF_DIRECTORY    = 0x00000020,
    PBF_COVER        = 0x00000021,
    PBF_CALLID       = 0x00000022,
    PBF_LASTNUM      = 0x00000023,
    PBF_NIGHTSRV     = 0x00000024,
    PBF_SENDCALLS    = 0x00000025,
    PBF_MSGINDICATOR = 0x00000026,
    PBF_REPDIAL      = 0x00000027,
    PBF_SETREPDIAL   = 0x00000028,
    PBF_SYSTEMSPEED  = 0x00000029,
    PBF_STATIONSPEED = 0x0000002a,
    PBF_CAMPON       = 0x0000002b,
    PBF_SAVEREPEAT   = 0x0000002c,
    PBF_QUEUECALL    = 0x0000002d,
    PBF_NONE         = 0x0000002e,
    PBF_SEND         = 0x0000002f,
}

alias PHONE_TONE = int;
enum : int
{
    PT_KEYPADZERO       = 0x00000000,
    PT_KEYPADONE        = 0x00000001,
    PT_KEYPADTWO        = 0x00000002,
    PT_KEYPADTHREE      = 0x00000003,
    PT_KEYPADFOUR       = 0x00000004,
    PT_KEYPADFIVE       = 0x00000005,
    PT_KEYPADSIX        = 0x00000006,
    PT_KEYPADSEVEN      = 0x00000007,
    PT_KEYPADEIGHT      = 0x00000008,
    PT_KEYPADNINE       = 0x00000009,
    PT_KEYPADSTAR       = 0x0000000a,
    PT_KEYPADPOUND      = 0x0000000b,
    PT_KEYPADA          = 0x0000000c,
    PT_KEYPADB          = 0x0000000d,
    PT_KEYPADC          = 0x0000000e,
    PT_KEYPADD          = 0x0000000f,
    PT_NORMALDIALTONE   = 0x00000010,
    PT_EXTERNALDIALTONE = 0x00000011,
    PT_BUSY             = 0x00000012,
    PT_RINGBACK         = 0x00000013,
    PT_ERRORTONE        = 0x00000014,
    PT_SILENCE          = 0x00000015,
}

alias PHONE_EVENT = int;
enum : int
{
    PE_DISPLAY        = 0x00000000,
    PE_LAMPMODE       = 0x00000001,
    PE_RINGMODE       = 0x00000002,
    PE_RINGVOLUME     = 0x00000003,
    PE_HOOKSWITCH     = 0x00000004,
    PE_CAPSCHANGE     = 0x00000005,
    PE_BUTTON         = 0x00000006,
    PE_CLOSE          = 0x00000007,
    PE_NUMBERGATHERED = 0x00000008,
    PE_DIALING        = 0x00000009,
    PE_ANSWER         = 0x0000000a,
    PE_DISCONNECT     = 0x0000000b,
    PE_LASTITEM       = 0x0000000b,
}

enum IID_ITTAPI = GUID(0xb1efc382, 0x9355, 0x11d0, [0x83, 0x5c, 0x0, 0xaa, 0x0, 0x3c, 0xca, 0xbd]);
interface ITTAPI : IDispatch
{
    HRESULT Initialize();
    HRESULT Shutdown();
    HRESULT get_Addresses(VARIANT*);
    HRESULT EnumerateAddresses(IEnumAddress*);
    HRESULT RegisterCallNotifications(ITAddress, short, short, int, int, int*);
    HRESULT UnregisterNotifications(int);
    HRESULT get_CallHubs(VARIANT*);
    HRESULT EnumerateCallHubs(IEnumCallHub*);
    HRESULT SetCallHubTracking(VARIANT, short);
    HRESULT EnumeratePrivateTAPIObjects(IEnumUnknown*);
    HRESULT get_PrivateTAPIObjects(VARIANT*);
    HRESULT RegisterRequestRecipient(int, int, short);
    HRESULT SetAssistedTelephonyPriority(BSTR, short);
    HRESULT SetApplicationPriority(BSTR, int, short);
    HRESULT put_EventFilter(int);
    HRESULT get_EventFilter(int*);
}
enum IID_ITTAPI2 = GUID(0x54fbdc8c, 0xd90f, 0x4dad, [0x96, 0x95, 0xb3, 0x73, 0x9, 0x7f, 0x9, 0x4b]);
interface ITTAPI2 : ITTAPI
{
    HRESULT get_Phones(VARIANT*);
    HRESULT EnumeratePhones(IEnumPhone*);
    HRESULT CreateEmptyCollectionObject(ITCollection2*);
}
enum IID_ITMediaSupport = GUID(0xb1efc384, 0x9355, 0x11d0, [0x83, 0x5c, 0x0, 0xaa, 0x0, 0x3c, 0xca, 0xbd]);
interface ITMediaSupport : IDispatch
{
    HRESULT get_MediaTypes(int*);
    HRESULT QueryMediaType(int, short*);
}
enum IID_ITPluggableTerminalClassInfo = GUID(0x41757f4a, 0xcf09, 0x4b34, [0xbc, 0x96, 0xa, 0x79, 0xd2, 0x39, 0x0, 0x76]);
interface ITPluggableTerminalClassInfo : IDispatch
{
    HRESULT get_Name(BSTR*);
    HRESULT get_Company(BSTR*);
    HRESULT get_Version(BSTR*);
    HRESULT get_TerminalClass(BSTR*);
    HRESULT get_CLSID(BSTR*);
    HRESULT get_Direction(TERMINAL_DIRECTION*);
    HRESULT get_MediaTypes(int*);
}
enum IID_ITPluggableTerminalSuperclassInfo = GUID(0x6d54e42c, 0x4625, 0x4359, [0xa6, 0xf7, 0x63, 0x19, 0x99, 0x10, 0x7e, 0x5]);
interface ITPluggableTerminalSuperclassInfo : IDispatch
{
    HRESULT get_Name(BSTR*);
    HRESULT get_CLSID(BSTR*);
}
enum IID_ITTerminalSupport = GUID(0xb1efc385, 0x9355, 0x11d0, [0x83, 0x5c, 0x0, 0xaa, 0x0, 0x3c, 0xca, 0xbd]);
interface ITTerminalSupport : IDispatch
{
    HRESULT get_StaticTerminals(VARIANT*);
    HRESULT EnumerateStaticTerminals(IEnumTerminal*);
    HRESULT get_DynamicTerminalClasses(VARIANT*);
    HRESULT EnumerateDynamicTerminalClasses(IEnumTerminalClass*);
    HRESULT CreateTerminal(BSTR, int, TERMINAL_DIRECTION, ITTerminal*);
    HRESULT GetDefaultStaticTerminal(int, TERMINAL_DIRECTION, ITTerminal*);
}
enum IID_ITTerminalSupport2 = GUID(0xf3eb39bc, 0x1b1f, 0x4e99, [0xa0, 0xc0, 0x56, 0x30, 0x5c, 0x4d, 0xd5, 0x91]);
interface ITTerminalSupport2 : ITTerminalSupport
{
    HRESULT get_PluggableSuperclasses(VARIANT*);
    HRESULT EnumeratePluggableSuperclasses(IEnumPluggableSuperclassInfo*);
    HRESULT get_PluggableTerminalClasses(BSTR, int, VARIANT*);
    HRESULT EnumeratePluggableTerminalClasses(GUID, int, IEnumPluggableTerminalClassInfo*);
}
enum IID_ITAddress = GUID(0xb1efc386, 0x9355, 0x11d0, [0x83, 0x5c, 0x0, 0xaa, 0x0, 0x3c, 0xca, 0xbd]);
interface ITAddress : IDispatch
{
    HRESULT get_State(ADDRESS_STATE*);
    HRESULT get_AddressName(BSTR*);
    HRESULT get_ServiceProviderName(BSTR*);
    HRESULT get_TAPIObject(ITTAPI*);
    HRESULT CreateCall(BSTR, int, int, ITBasicCallControl*);
    HRESULT get_Calls(VARIANT*);
    HRESULT EnumerateCalls(IEnumCall*);
    HRESULT get_DialableAddress(BSTR*);
    HRESULT CreateForwardInfoObject(ITForwardInformation*);
    HRESULT Forward(ITForwardInformation, ITBasicCallControl);
    HRESULT get_CurrentForwardInfo(ITForwardInformation*);
    HRESULT put_MessageWaiting(short);
    HRESULT get_MessageWaiting(short*);
    HRESULT put_DoNotDisturb(short);
    HRESULT get_DoNotDisturb(short*);
}
enum IID_ITAddress2 = GUID(0xb0ae5d9b, 0xbe51, 0x46c9, [0xb0, 0xf7, 0xdf, 0xa8, 0xa2, 0x2a, 0x8b, 0xc4]);
interface ITAddress2 : ITAddress
{
    HRESULT get_Phones(VARIANT*);
    HRESULT EnumeratePhones(IEnumPhone*);
    HRESULT GetPhoneFromTerminal(ITTerminal, ITPhone*);
    HRESULT get_PreferredPhones(VARIANT*);
    HRESULT EnumeratePreferredPhones(IEnumPhone*);
    HRESULT get_EventFilter(TAPI_EVENT, int, short*);
    HRESULT put_EventFilter(TAPI_EVENT, int, short);
    HRESULT DeviceSpecific(ITCallInfo, ubyte*, uint);
    HRESULT DeviceSpecificVariant(ITCallInfo, VARIANT);
    HRESULT NegotiateExtVersion(int, int, int*);
}
enum IID_ITAddressCapabilities = GUID(0x8df232f5, 0x821b, 0x11d1, [0xbb, 0x5c, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITAddressCapabilities : IDispatch
{
    HRESULT get_AddressCapability(ADDRESS_CAPABILITY, int*);
    HRESULT get_AddressCapabilityString(ADDRESS_CAPABILITY_STRING, BSTR*);
    HRESULT get_CallTreatments(VARIANT*);
    HRESULT EnumerateCallTreatments(IEnumBstr*);
    HRESULT get_CompletionMessages(VARIANT*);
    HRESULT EnumerateCompletionMessages(IEnumBstr*);
    HRESULT get_DeviceClasses(VARIANT*);
    HRESULT EnumerateDeviceClasses(IEnumBstr*);
}
enum IID_ITPhone = GUID(0x9d48db4, 0x10cc, 0x4388, [0x9d, 0xe7, 0xa8, 0x46, 0x56, 0x18, 0x97, 0x5a]);
interface ITPhone : IDispatch
{
    HRESULT Open(PHONE_PRIVILEGE);
    HRESULT Close();
    HRESULT get_Addresses(VARIANT*);
    HRESULT EnumerateAddresses(IEnumAddress*);
    HRESULT get_PhoneCapsLong(PHONECAPS_LONG, int*);
    HRESULT get_PhoneCapsString(PHONECAPS_STRING, BSTR*);
    HRESULT get_Terminals(ITAddress, VARIANT*);
    HRESULT EnumerateTerminals(ITAddress, IEnumTerminal*);
    HRESULT get_ButtonMode(int, PHONE_BUTTON_MODE*);
    HRESULT put_ButtonMode(int, PHONE_BUTTON_MODE);
    HRESULT get_ButtonFunction(int, PHONE_BUTTON_FUNCTION*);
    HRESULT put_ButtonFunction(int, PHONE_BUTTON_FUNCTION);
    HRESULT get_ButtonText(int, BSTR*);
    HRESULT put_ButtonText(int, BSTR);
    HRESULT get_ButtonState(int, PHONE_BUTTON_STATE*);
    HRESULT get_HookSwitchState(PHONE_HOOK_SWITCH_DEVICE, PHONE_HOOK_SWITCH_STATE*);
    HRESULT put_HookSwitchState(PHONE_HOOK_SWITCH_DEVICE, PHONE_HOOK_SWITCH_STATE);
    HRESULT put_RingMode(int);
    HRESULT get_RingMode(int*);
    HRESULT put_RingVolume(int);
    HRESULT get_RingVolume(int*);
    HRESULT get_Privilege(PHONE_PRIVILEGE*);
    HRESULT GetPhoneCapsBuffer(PHONECAPS_BUFFER, uint*, ubyte**);
    HRESULT get_PhoneCapsBuffer(PHONECAPS_BUFFER, VARIANT*);
    HRESULT get_LampMode(int, PHONE_LAMP_MODE*);
    HRESULT put_LampMode(int, PHONE_LAMP_MODE);
    HRESULT get_Display(BSTR*);
    HRESULT SetDisplay(int, int, BSTR);
    HRESULT get_PreferredAddresses(VARIANT*);
    HRESULT EnumeratePreferredAddresses(IEnumAddress*);
    HRESULT DeviceSpecific(ubyte*, uint);
    HRESULT DeviceSpecificVariant(VARIANT);
    HRESULT NegotiateExtVersion(int, int, int*);
}
enum IID_ITAutomatedPhoneControl = GUID(0x1ee1af0e, 0x6159, 0x4a61, [0xb7, 0x9b, 0x6a, 0x4b, 0xa3, 0xfc, 0x9d, 0xfc]);
interface ITAutomatedPhoneControl : IDispatch
{
    HRESULT StartTone(PHONE_TONE, int);
    HRESULT StopTone();
    HRESULT get_Tone(PHONE_TONE*);
    HRESULT StartRinger(int, int);
    HRESULT StopRinger();
    HRESULT get_Ringer(short*);
    HRESULT put_PhoneHandlingEnabled(short);
    HRESULT get_PhoneHandlingEnabled(short*);
    HRESULT put_AutoEndOfNumberTimeout(int);
    HRESULT get_AutoEndOfNumberTimeout(int*);
    HRESULT put_AutoDialtone(short);
    HRESULT get_AutoDialtone(short*);
    HRESULT put_AutoStopTonesOnOnHook(short);
    HRESULT get_AutoStopTonesOnOnHook(short*);
    HRESULT put_AutoStopRingOnOffHook(short);
    HRESULT get_AutoStopRingOnOffHook(short*);
    HRESULT put_AutoKeypadTones(short);
    HRESULT get_AutoKeypadTones(short*);
    HRESULT put_AutoKeypadTonesMinimumDuration(int);
    HRESULT get_AutoKeypadTonesMinimumDuration(int*);
    HRESULT put_AutoVolumeControl(short);
    HRESULT get_AutoVolumeControl(short*);
    HRESULT put_AutoVolumeControlStep(int);
    HRESULT get_AutoVolumeControlStep(int*);
    HRESULT put_AutoVolumeControlRepeatDelay(int);
    HRESULT get_AutoVolumeControlRepeatDelay(int*);
    HRESULT put_AutoVolumeControlRepeatPeriod(int);
    HRESULT get_AutoVolumeControlRepeatPeriod(int*);
    HRESULT SelectCall(ITCallInfo, short);
    HRESULT UnselectCall(ITCallInfo);
    HRESULT EnumerateSelectedCalls(IEnumCall*);
    HRESULT get_SelectedCalls(VARIANT*);
}
enum IID_ITBasicCallControl = GUID(0xb1efc389, 0x9355, 0x11d0, [0x83, 0x5c, 0x0, 0xaa, 0x0, 0x3c, 0xca, 0xbd]);
interface ITBasicCallControl : IDispatch
{
    HRESULT Connect(short);
    HRESULT Answer();
    HRESULT Disconnect(DISCONNECT_CODE);
    HRESULT Hold(short);
    HRESULT HandoffDirect(BSTR);
    HRESULT HandoffIndirect(int);
    HRESULT Conference(ITBasicCallControl, short);
    HRESULT Transfer(ITBasicCallControl, short);
    HRESULT BlindTransfer(BSTR);
    HRESULT SwapHold(ITBasicCallControl);
    HRESULT ParkDirect(BSTR);
    HRESULT ParkIndirect(BSTR*);
    HRESULT Unpark();
    HRESULT SetQOS(int, QOS_SERVICE_LEVEL);
    HRESULT Pickup(BSTR);
    HRESULT Dial(BSTR);
    HRESULT Finish(FINISH_MODE);
    HRESULT RemoveFromConference();
}
enum IID_ITCallInfo = GUID(0x350f85d1, 0x1227, 0x11d3, [0x83, 0xd4, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITCallInfo : IDispatch
{
    HRESULT get_Address(ITAddress*);
    HRESULT get_CallState(CALL_STATE*);
    HRESULT get_Privilege(CALL_PRIVILEGE*);
    HRESULT get_CallHub(ITCallHub*);
    HRESULT get_CallInfoLong(CALLINFO_LONG, int*);
    HRESULT put_CallInfoLong(CALLINFO_LONG, int);
    HRESULT get_CallInfoString(CALLINFO_STRING, BSTR*);
    HRESULT put_CallInfoString(CALLINFO_STRING, BSTR);
    HRESULT get_CallInfoBuffer(CALLINFO_BUFFER, VARIANT*);
    HRESULT put_CallInfoBuffer(CALLINFO_BUFFER, VARIANT);
    HRESULT GetCallInfoBuffer(CALLINFO_BUFFER, uint*, ubyte**);
    HRESULT SetCallInfoBuffer(CALLINFO_BUFFER, uint, ubyte*);
    HRESULT ReleaseUserUserInfo();
}
enum IID_ITCallInfo2 = GUID(0x94d70ca6, 0x7ab0, 0x4daa, [0x81, 0xca, 0xb8, 0xf8, 0x64, 0x3f, 0xae, 0xc1]);
interface ITCallInfo2 : ITCallInfo
{
    HRESULT get_EventFilter(TAPI_EVENT, int, short*);
    HRESULT put_EventFilter(TAPI_EVENT, int, short);
}
enum IID_ITTerminal = GUID(0xb1efc38a, 0x9355, 0x11d0, [0x83, 0x5c, 0x0, 0xaa, 0x0, 0x3c, 0xca, 0xbd]);
interface ITTerminal : IDispatch
{
    HRESULT get_Name(BSTR*);
    HRESULT get_State(TERMINAL_STATE*);
    HRESULT get_TerminalType(TERMINAL_TYPE*);
    HRESULT get_TerminalClass(BSTR*);
    HRESULT get_MediaType(int*);
    HRESULT get_Direction(TERMINAL_DIRECTION*);
}
enum IID_ITMultiTrackTerminal = GUID(0xfe040091, 0xade8, 0x4072, [0x95, 0xc9, 0xbf, 0x7d, 0xe8, 0xc5, 0x4b, 0x44]);
interface ITMultiTrackTerminal : IDispatch
{
    HRESULT get_TrackTerminals(VARIANT*);
    HRESULT EnumerateTrackTerminals(IEnumTerminal*);
    HRESULT CreateTrackTerminal(int, TERMINAL_DIRECTION, ITTerminal*);
    HRESULT get_MediaTypesInUse(int*);
    HRESULT get_DirectionsInUse(TERMINAL_DIRECTION*);
    HRESULT RemoveTrackTerminal(ITTerminal);
}
alias TERMINAL_MEDIA_STATE = int;
enum : int
{
    TMS_IDLE     = 0x00000000,
    TMS_ACTIVE   = 0x00000001,
    TMS_PAUSED   = 0x00000002,
    TMS_LASTITEM = 0x00000002,
}

alias FT_STATE_EVENT_CAUSE = int;
enum : int
{
    FTEC_NORMAL      = 0x00000000,
    FTEC_END_OF_FILE = 0x00000001,
    FTEC_READ_ERROR  = 0x00000002,
    FTEC_WRITE_ERROR = 0x00000003,
}

enum IID_ITFileTrack = GUID(0x31ca6ea9, 0xc08a, 0x4bea, [0x88, 0x11, 0x8e, 0x9c, 0x1b, 0xa3, 0xea, 0x3a]);
interface ITFileTrack : IDispatch
{
    HRESULT get_Format(AM_MEDIA_TYPE**);
    HRESULT put_Format(const(AM_MEDIA_TYPE)*);
    HRESULT get_ControllingTerminal(ITTerminal*);
    HRESULT get_AudioFormatForScripting(ITScriptableAudioFormat*);
    HRESULT put_AudioFormatForScripting(ITScriptableAudioFormat);
    HRESULT get_EmptyAudioFormatForScripting(ITScriptableAudioFormat*);
}
enum IID_ITMediaPlayback = GUID(0x627e8ae6, 0xae4c, 0x4a69, [0xbb, 0x63, 0x2a, 0xd6, 0x25, 0x40, 0x4b, 0x77]);
interface ITMediaPlayback : IDispatch
{
    HRESULT put_PlayList(VARIANT);
    HRESULT get_PlayList(VARIANT*);
}
enum IID_ITMediaRecord = GUID(0xf5dd4592, 0x5476, 0x4cc1, [0x9d, 0x4d, 0xfa, 0xd3, 0xee, 0xfe, 0x7d, 0xb2]);
interface ITMediaRecord : IDispatch
{
    HRESULT put_FileName(BSTR);
    HRESULT get_FileName(BSTR*);
}
enum IID_ITMediaControl = GUID(0xc445dde8, 0x5199, 0x4bc7, [0x98, 0x7, 0x5f, 0xfb, 0x92, 0xe4, 0x2e, 0x9]);
interface ITMediaControl : IDispatch
{
    HRESULT Start();
    HRESULT Stop();
    HRESULT Pause();
    HRESULT get_MediaState(TERMINAL_MEDIA_STATE*);
}
enum IID_ITBasicAudioTerminal = GUID(0xb1efc38d, 0x9355, 0x11d0, [0x83, 0x5c, 0x0, 0xaa, 0x0, 0x3c, 0xca, 0xbd]);
interface ITBasicAudioTerminal : IDispatch
{
    HRESULT put_Volume(int);
    HRESULT get_Volume(int*);
    HRESULT put_Balance(int);
    HRESULT get_Balance(int*);
}
enum IID_ITStaticAudioTerminal = GUID(0xa86b7871, 0xd14c, 0x48e6, [0x92, 0x2e, 0xa8, 0xd1, 0x5f, 0x98, 0x48, 0x0]);
interface ITStaticAudioTerminal : IDispatch
{
    HRESULT get_WaveId(int*);
}
enum IID_ITCallHub = GUID(0xa3c1544e, 0x5b92, 0x11d1, [0x8f, 0x4e, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITCallHub : IDispatch
{
    HRESULT Clear();
    HRESULT EnumerateCalls(IEnumCall*);
    HRESULT get_Calls(VARIANT*);
    HRESULT get_NumCalls(int*);
    HRESULT get_State(CALLHUB_STATE*);
}
enum IID_ITLegacyAddressMediaControl = GUID(0xab493640, 0x4c0b, 0x11d2, [0xa0, 0x46, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITLegacyAddressMediaControl : IUnknown
{
    HRESULT GetID(BSTR, uint*, ubyte**);
    HRESULT GetDevConfig(BSTR, uint*, ubyte**);
    HRESULT SetDevConfig(BSTR, uint, ubyte*);
}
enum IID_ITPrivateEvent = GUID(0xe269cd0, 0x10d4, 0x4121, [0x9c, 0x22, 0x9c, 0x85, 0xd6, 0x25, 0x65, 0xd]);
interface ITPrivateEvent : IDispatch
{
    HRESULT get_Address(ITAddress*);
    HRESULT get_Call(ITCallInfo*);
    HRESULT get_CallHub(ITCallHub*);
    HRESULT get_EventCode(int*);
    HRESULT get_EventInterface(IDispatch*);
}
enum IID_ITLegacyAddressMediaControl2 = GUID(0xb0ee512b, 0xa531, 0x409e, [0x9d, 0xd9, 0x40, 0x99, 0xfe, 0x86, 0xc7, 0x38]);
interface ITLegacyAddressMediaControl2 : ITLegacyAddressMediaControl
{
    HRESULT ConfigDialog(HWND, BSTR);
    HRESULT ConfigDialogEdit(HWND, BSTR, uint, ubyte*, uint*, ubyte**);
}
enum IID_ITLegacyCallMediaControl = GUID(0xd624582f, 0xcc23, 0x4436, [0xb8, 0xa5, 0x47, 0xc6, 0x25, 0xc8, 0x4, 0x5d]);
interface ITLegacyCallMediaControl : IDispatch
{
    HRESULT DetectDigits(int);
    HRESULT GenerateDigits(BSTR, int);
    HRESULT GetID(BSTR, uint*, ubyte**);
    HRESULT SetMediaType(int);
    HRESULT MonitorMedia(int);
}
enum IID_ITLegacyCallMediaControl2 = GUID(0x57ca332d, 0x7bc2, 0x44f1, [0xa6, 0xc, 0x93, 0x6f, 0xe8, 0xd7, 0xce, 0x73]);
interface ITLegacyCallMediaControl2 : ITLegacyCallMediaControl
{
    HRESULT GenerateDigits2(BSTR, int, int);
    HRESULT GatherDigits(int, int, BSTR, int, int);
    HRESULT DetectTones(TAPI_DETECTTONE*, int);
    HRESULT DetectTonesByCollection(ITCollection2);
    HRESULT GenerateTone(TAPI_TONEMODE, int);
    HRESULT GenerateCustomTones(TAPI_CUSTOMTONE*, int, int);
    HRESULT GenerateCustomTonesByCollection(ITCollection2, int);
    HRESULT CreateDetectToneObject(ITDetectTone*);
    HRESULT CreateCustomToneObject(ITCustomTone*);
    HRESULT GetIDAsVariant(BSTR, VARIANT*);
}
enum IID_ITDetectTone = GUID(0x961f79bd, 0x3097, 0x49df, [0xa1, 0xd6, 0x90, 0x9b, 0x77, 0xe8, 0x9c, 0xa0]);
interface ITDetectTone : IDispatch
{
    HRESULT get_AppSpecific(int*);
    HRESULT put_AppSpecific(int);
    HRESULT get_Duration(int*);
    HRESULT put_Duration(int);
    HRESULT get_Frequency(int, int*);
    HRESULT put_Frequency(int, int);
}
enum IID_ITCustomTone = GUID(0x357ad764, 0xb3c6, 0x4b2a, [0x8f, 0xa5, 0x7, 0x22, 0x82, 0x7a, 0x92, 0x54]);
interface ITCustomTone : IDispatch
{
    HRESULT get_Frequency(int*);
    HRESULT put_Frequency(int);
    HRESULT get_CadenceOn(int*);
    HRESULT put_CadenceOn(int);
    HRESULT get_CadenceOff(int*);
    HRESULT put_CadenceOff(int);
    HRESULT get_Volume(int*);
    HRESULT put_Volume(int);
}
enum IID_IEnumPhone = GUID(0xf15b7669, 0x4780, 0x4595, [0x8c, 0x89, 0xfb, 0x36, 0x9c, 0x8c, 0xf7, 0xaa]);
interface IEnumPhone : IUnknown
{
    HRESULT Next(uint, ITPhone*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumPhone*);
}
enum IID_IEnumTerminal = GUID(0xae269cf4, 0x935e, 0x11d0, [0x83, 0x5c, 0x0, 0xaa, 0x0, 0x3c, 0xca, 0xbd]);
interface IEnumTerminal : IUnknown
{
    HRESULT Next(uint, ITTerminal*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumTerminal*);
}
enum IID_IEnumTerminalClass = GUID(0xae269cf5, 0x935e, 0x11d0, [0x83, 0x5c, 0x0, 0xaa, 0x0, 0x3c, 0xca, 0xbd]);
interface IEnumTerminalClass : IUnknown
{
    HRESULT Next(uint, GUID*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumTerminalClass*);
}
enum IID_IEnumCall = GUID(0xae269cf6, 0x935e, 0x11d0, [0x83, 0x5c, 0x0, 0xaa, 0x0, 0x3c, 0xca, 0xbd]);
interface IEnumCall : IUnknown
{
    HRESULT Next(uint, ITCallInfo*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumCall*);
}
enum IID_IEnumAddress = GUID(0x1666fca1, 0x9363, 0x11d0, [0x83, 0x5c, 0x0, 0xaa, 0x0, 0x3c, 0xca, 0xbd]);
interface IEnumAddress : IUnknown
{
    HRESULT Next(uint, ITAddress*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumAddress*);
}
enum IID_IEnumCallHub = GUID(0xa3c15450, 0x5b92, 0x11d1, [0x8f, 0x4e, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface IEnumCallHub : IUnknown
{
    HRESULT Next(uint, ITCallHub*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumCallHub*);
}
enum IID_IEnumBstr = GUID(0x35372049, 0xbc6, 0x11d2, [0xa0, 0x33, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface IEnumBstr : IUnknown
{
    HRESULT Next(uint, BSTR*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumBstr*);
}
enum IID_IEnumPluggableTerminalClassInfo = GUID(0x4567450c, 0xdbee, 0x4e3f, [0xaa, 0xf5, 0x37, 0xbf, 0x9e, 0xbf, 0x5e, 0x29]);
interface IEnumPluggableTerminalClassInfo : IUnknown
{
    HRESULT Next(uint, ITPluggableTerminalClassInfo*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumPluggableTerminalClassInfo*);
}
enum IID_IEnumPluggableSuperclassInfo = GUID(0xe9586a80, 0x89e6, 0x4cff, [0x93, 0x1d, 0x47, 0x8d, 0x57, 0x51, 0xf4, 0xc0]);
interface IEnumPluggableSuperclassInfo : IUnknown
{
    HRESULT Next(uint, ITPluggableTerminalSuperclassInfo*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumPluggableSuperclassInfo*);
}
enum IID_ITPhoneEvent = GUID(0x8f942dd8, 0x64ed, 0x4aaf, [0xa7, 0x7d, 0xb2, 0x3d, 0xb0, 0x83, 0x7e, 0xad]);
interface ITPhoneEvent : IDispatch
{
    HRESULT get_Phone(ITPhone*);
    HRESULT get_Event(PHONE_EVENT*);
    HRESULT get_ButtonState(PHONE_BUTTON_STATE*);
    HRESULT get_HookSwitchState(PHONE_HOOK_SWITCH_STATE*);
    HRESULT get_HookSwitchDevice(PHONE_HOOK_SWITCH_DEVICE*);
    HRESULT get_RingMode(int*);
    HRESULT get_ButtonLampId(int*);
    HRESULT get_NumberGathered(BSTR*);
    HRESULT get_Call(ITCallInfo*);
}
enum IID_ITCallStateEvent = GUID(0x62f47097, 0x95c9, 0x11d0, [0x83, 0x5d, 0x0, 0xaa, 0x0, 0x3c, 0xca, 0xbd]);
interface ITCallStateEvent : IDispatch
{
    HRESULT get_Call(ITCallInfo*);
    HRESULT get_State(CALL_STATE*);
    HRESULT get_Cause(CALL_STATE_EVENT_CAUSE*);
    HRESULT get_CallbackInstance(int*);
}
enum IID_ITPhoneDeviceSpecificEvent = GUID(0x63ffb2a6, 0x872b, 0x4cd3, [0xa5, 0x1, 0x32, 0x6e, 0x8f, 0xb4, 0xa, 0xf7]);
interface ITPhoneDeviceSpecificEvent : IDispatch
{
    HRESULT get_Phone(ITPhone*);
    HRESULT get_lParam1(int*);
    HRESULT get_lParam2(int*);
    HRESULT get_lParam3(int*);
}
enum IID_ITCallMediaEvent = GUID(0xff36b87f, 0xec3a, 0x11d0, [0x8e, 0xe4, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITCallMediaEvent : IDispatch
{
    HRESULT get_Call(ITCallInfo*);
    HRESULT get_Event(CALL_MEDIA_EVENT*);
    HRESULT get_Error(HRESULT*);
    HRESULT get_Terminal(ITTerminal*);
    HRESULT get_Stream(ITStream*);
    HRESULT get_Cause(CALL_MEDIA_EVENT_CAUSE*);
}
enum IID_ITDigitDetectionEvent = GUID(0x80d3bfac, 0x57d9, 0x11d2, [0xa0, 0x4a, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITDigitDetectionEvent : IDispatch
{
    HRESULT get_Call(ITCallInfo*);
    HRESULT get_Digit(ubyte*);
    HRESULT get_DigitMode(int*);
    HRESULT get_TickCount(int*);
    HRESULT get_CallbackInstance(int*);
}
enum IID_ITDigitGenerationEvent = GUID(0x80d3bfad, 0x57d9, 0x11d2, [0xa0, 0x4a, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITDigitGenerationEvent : IDispatch
{
    HRESULT get_Call(ITCallInfo*);
    HRESULT get_GenerationTermination(int*);
    HRESULT get_TickCount(int*);
    HRESULT get_CallbackInstance(int*);
}
enum IID_ITDigitsGatheredEvent = GUID(0xe52ec4c1, 0xcba3, 0x441a, [0x9e, 0x6a, 0x93, 0xcb, 0x90, 0x9e, 0x97, 0x24]);
interface ITDigitsGatheredEvent : IDispatch
{
    HRESULT get_Call(ITCallInfo*);
    HRESULT get_Digits(BSTR*);
    HRESULT get_GatherTermination(TAPI_GATHERTERM*);
    HRESULT get_TickCount(int*);
    HRESULT get_CallbackInstance(int*);
}
enum IID_ITToneDetectionEvent = GUID(0x407e0faf, 0xd047, 0x4753, [0xb0, 0xc6, 0x8e, 0x6, 0x3, 0x73, 0xfe, 0xcd]);
interface ITToneDetectionEvent : IDispatch
{
    HRESULT get_Call(ITCallInfo*);
    HRESULT get_AppSpecific(int*);
    HRESULT get_TickCount(int*);
    HRESULT get_CallbackInstance(int*);
}
enum IID_ITTAPIObjectEvent = GUID(0xf4854d48, 0x937a, 0x11d1, [0xbb, 0x58, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITTAPIObjectEvent : IDispatch
{
    HRESULT get_TAPIObject(ITTAPI*);
    HRESULT get_Event(TAPIOBJECT_EVENT*);
    HRESULT get_Address(ITAddress*);
    HRESULT get_CallbackInstance(int*);
}
enum IID_ITTAPIObjectEvent2 = GUID(0x359dda6e, 0x68ce, 0x4383, [0xbf, 0xb, 0x16, 0x91, 0x33, 0xc4, 0x1b, 0x46]);
interface ITTAPIObjectEvent2 : ITTAPIObjectEvent
{
    HRESULT get_Phone(ITPhone*);
}
enum IID_ITTAPIEventNotification = GUID(0xeddb9426, 0x3b91, 0x11d1, [0x8f, 0x30, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITTAPIEventNotification : IUnknown
{
    HRESULT Event(TAPI_EVENT, IDispatch);
}
enum IID_ITCallHubEvent = GUID(0xa3c15451, 0x5b92, 0x11d1, [0x8f, 0x4e, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITCallHubEvent : IDispatch
{
    HRESULT get_Event(CALLHUB_EVENT*);
    HRESULT get_CallHub(ITCallHub*);
    HRESULT get_Call(ITCallInfo*);
}
enum IID_ITAddressEvent = GUID(0x831ce2d1, 0x83b5, 0x11d1, [0xbb, 0x5c, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITAddressEvent : IDispatch
{
    HRESULT get_Address(ITAddress*);
    HRESULT get_Event(ADDRESS_EVENT*);
    HRESULT get_Terminal(ITTerminal*);
}
enum IID_ITAddressDeviceSpecificEvent = GUID(0x3acb216b, 0x40bd, 0x487a, [0x86, 0x72, 0x5c, 0xe7, 0x7b, 0xd7, 0xe3, 0xa3]);
interface ITAddressDeviceSpecificEvent : IDispatch
{
    HRESULT get_Address(ITAddress*);
    HRESULT get_Call(ITCallInfo*);
    HRESULT get_lParam1(int*);
    HRESULT get_lParam2(int*);
    HRESULT get_lParam3(int*);
}
enum IID_ITFileTerminalEvent = GUID(0xe4a7fbac, 0x8c17, 0x4427, [0x9f, 0x55, 0x9f, 0x58, 0x9a, 0xc8, 0xaf, 0x0]);
interface ITFileTerminalEvent : IDispatch
{
    HRESULT get_Terminal(ITTerminal*);
    HRESULT get_Track(ITFileTrack*);
    HRESULT get_Call(ITCallInfo*);
    HRESULT get_State(TERMINAL_MEDIA_STATE*);
    HRESULT get_Cause(FT_STATE_EVENT_CAUSE*);
    HRESULT get_Error(HRESULT*);
}
enum IID_ITTTSTerminalEvent = GUID(0xd964788f, 0x95a5, 0x461d, [0xab, 0xc, 0xb9, 0x90, 0xa, 0x6c, 0x27, 0x13]);
interface ITTTSTerminalEvent : IDispatch
{
    HRESULT get_Terminal(ITTerminal*);
    HRESULT get_Call(ITCallInfo*);
    HRESULT get_Error(HRESULT*);
}
enum IID_ITASRTerminalEvent = GUID(0xee016a02, 0x4fa9, 0x467c, [0x93, 0x3f, 0x5a, 0x15, 0xb1, 0x23, 0x77, 0xd7]);
interface ITASRTerminalEvent : IDispatch
{
    HRESULT get_Terminal(ITTerminal*);
    HRESULT get_Call(ITCallInfo*);
    HRESULT get_Error(HRESULT*);
}
enum IID_ITToneTerminalEvent = GUID(0xe6f56009, 0x611f, 0x4945, [0xbb, 0xd2, 0x2d, 0xc, 0xe5, 0x61, 0x20, 0x56]);
interface ITToneTerminalEvent : IDispatch
{
    HRESULT get_Terminal(ITTerminal*);
    HRESULT get_Call(ITCallInfo*);
    HRESULT get_Error(HRESULT*);
}
enum IID_ITQOSEvent = GUID(0xcfa3357c, 0xad77, 0x11d1, [0xbb, 0x68, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITQOSEvent : IDispatch
{
    HRESULT get_Call(ITCallInfo*);
    HRESULT get_Event(QOS_EVENT*);
    HRESULT get_MediaType(int*);
}
enum IID_ITCallInfoChangeEvent = GUID(0x5d4b65f9, 0xe51c, 0x11d1, [0xa0, 0x2f, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITCallInfoChangeEvent : IDispatch
{
    HRESULT get_Call(ITCallInfo*);
    HRESULT get_Cause(CALLINFOCHANGE_CAUSE*);
    HRESULT get_CallbackInstance(int*);
}
enum IID_ITRequest = GUID(0xac48ffdf, 0xf8c4, 0x11d1, [0xa0, 0x30, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITRequest : IDispatch
{
    HRESULT MakeCall(BSTR, BSTR, BSTR, BSTR);
}
enum IID_ITRequestEvent = GUID(0xac48ffde, 0xf8c4, 0x11d1, [0xa0, 0x30, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITRequestEvent : IDispatch
{
    HRESULT get_RegistrationInstance(int*);
    HRESULT get_RequestMode(int*);
    HRESULT get_DestAddress(BSTR*);
    HRESULT get_AppName(BSTR*);
    HRESULT get_CalledParty(BSTR*);
    HRESULT get_Comment(BSTR*);
}
enum IID_ITCollection = GUID(0x5ec5acf2, 0x9c02, 0x11d0, [0x83, 0x62, 0x0, 0xaa, 0x0, 0x3c, 0xca, 0xbd]);
interface ITCollection : IDispatch
{
    HRESULT get_Count(int*);
    HRESULT get_Item(int, VARIANT*);
    HRESULT get__NewEnum(IUnknown*);
}
enum IID_ITCollection2 = GUID(0xe6dddda5, 0xa6d3, 0x48ff, [0x87, 0x37, 0xd3, 0x2f, 0xc4, 0xd9, 0x54, 0x77]);
interface ITCollection2 : ITCollection
{
    HRESULT Add(int, VARIANT*);
    HRESULT Remove(int);
}
enum IID_ITForwardInformation = GUID(0x449f659e, 0x88a3, 0x11d1, [0xbb, 0x5d, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITForwardInformation : IDispatch
{
    HRESULT put_NumRingsNoAnswer(int);
    HRESULT get_NumRingsNoAnswer(int*);
    HRESULT SetForwardType(int, BSTR, BSTR);
    HRESULT get_ForwardTypeDestination(int, BSTR*);
    HRESULT get_ForwardTypeCaller(int, BSTR*);
    HRESULT GetForwardType(int, BSTR*, BSTR*);
    HRESULT Clear();
}
enum IID_ITForwardInformation2 = GUID(0x5229b4ed, 0xb260, 0x4382, [0x8e, 0x1a, 0x5d, 0xf3, 0xa8, 0xa4, 0xcc, 0xc0]);
interface ITForwardInformation2 : ITForwardInformation
{
    HRESULT SetForwardType2(int, BSTR, int, BSTR, int);
    HRESULT GetForwardType2(int, BSTR*, int*, BSTR*, int*);
    HRESULT get_ForwardTypeDestinationAddressType(int, int*);
    HRESULT get_ForwardTypeCallerAddressType(int, int*);
}
enum IID_ITAddressTranslation = GUID(0xc4d8f03, 0x8ddb, 0x11d1, [0xa0, 0x9e, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface ITAddressTranslation : IDispatch
{
    HRESULT TranslateAddress(BSTR, int, int, ITAddressTranslationInfo*);
    HRESULT TranslateDialog(long, BSTR);
    HRESULT EnumerateLocations(IEnumLocation*);
    HRESULT get_Locations(VARIANT*);
    HRESULT EnumerateCallingCards(IEnumCallingCard*);
    HRESULT get_CallingCards(VARIANT*);
}
enum IID_ITAddressTranslationInfo = GUID(0xafc15945, 0x8d40, 0x11d1, [0xa0, 0x9e, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface ITAddressTranslationInfo : IDispatch
{
    HRESULT get_DialableString(BSTR*);
    HRESULT get_DisplayableString(BSTR*);
    HRESULT get_CurrentCountryCode(int*);
    HRESULT get_DestinationCountryCode(int*);
    HRESULT get_TranslationResults(int*);
}
enum IID_ITLocationInfo = GUID(0xc4d8eff, 0x8ddb, 0x11d1, [0xa0, 0x9e, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface ITLocationInfo : IDispatch
{
    HRESULT get_PermanentLocationID(int*);
    HRESULT get_CountryCode(int*);
    HRESULT get_CountryID(int*);
    HRESULT get_Options(int*);
    HRESULT get_PreferredCardID(int*);
    HRESULT get_LocationName(BSTR*);
    HRESULT get_CityCode(BSTR*);
    HRESULT get_LocalAccessCode(BSTR*);
    HRESULT get_LongDistanceAccessCode(BSTR*);
    HRESULT get_TollPrefixList(BSTR*);
    HRESULT get_CancelCallWaitingCode(BSTR*);
}
enum IID_IEnumLocation = GUID(0xc4d8f01, 0x8ddb, 0x11d1, [0xa0, 0x9e, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface IEnumLocation : IUnknown
{
    HRESULT Next(uint, ITLocationInfo*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumLocation*);
}
enum IID_ITCallingCard = GUID(0xc4d8f00, 0x8ddb, 0x11d1, [0xa0, 0x9e, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface ITCallingCard : IDispatch
{
    HRESULT get_PermanentCardID(int*);
    HRESULT get_NumberOfDigits(int*);
    HRESULT get_Options(int*);
    HRESULT get_CardName(BSTR*);
    HRESULT get_SameAreaDialingRule(BSTR*);
    HRESULT get_LongDistanceDialingRule(BSTR*);
    HRESULT get_InternationalDialingRule(BSTR*);
}
enum IID_IEnumCallingCard = GUID(0xc4d8f02, 0x8ddb, 0x11d1, [0xa0, 0x9e, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface IEnumCallingCard : IUnknown
{
    HRESULT Next(uint, ITCallingCard*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumCallingCard*);
}
enum IID_ITCallNotificationEvent = GUID(0x895801df, 0x3dd6, 0x11d1, [0x8f, 0x30, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITCallNotificationEvent : IDispatch
{
    HRESULT get_Call(ITCallInfo*);
    HRESULT get_Event(CALL_NOTIFICATION_EVENT*);
    HRESULT get_CallbackInstance(int*);
}
enum IID_ITDispatchMapper = GUID(0xe9225295, 0xc759, 0x11d1, [0xa0, 0x2b, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITDispatchMapper : IDispatch
{
    HRESULT QueryDispatchInterface(BSTR, IDispatch, IDispatch*);
}
enum IID_ITStreamControl = GUID(0xee3bd604, 0x3868, 0x11d2, [0xa0, 0x45, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITStreamControl : IDispatch
{
    HRESULT CreateStream(int, TERMINAL_DIRECTION, ITStream*);
    HRESULT RemoveStream(ITStream);
    HRESULT EnumerateStreams(IEnumStream*);
    HRESULT get_Streams(VARIANT*);
}
enum IID_ITStream = GUID(0xee3bd605, 0x3868, 0x11d2, [0xa0, 0x45, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITStream : IDispatch
{
    HRESULT get_MediaType(int*);
    HRESULT get_Direction(TERMINAL_DIRECTION*);
    HRESULT get_Name(BSTR*);
    HRESULT StartStream();
    HRESULT PauseStream();
    HRESULT StopStream();
    HRESULT SelectTerminal(ITTerminal);
    HRESULT UnselectTerminal(ITTerminal);
    HRESULT EnumerateTerminals(IEnumTerminal*);
    HRESULT get_Terminals(VARIANT*);
}
enum IID_IEnumStream = GUID(0xee3bd606, 0x3868, 0x11d2, [0xa0, 0x45, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface IEnumStream : IUnknown
{
    HRESULT Next(uint, ITStream*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumStream*);
}
enum IID_ITSubStreamControl = GUID(0xee3bd607, 0x3868, 0x11d2, [0xa0, 0x45, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITSubStreamControl : IDispatch
{
    HRESULT CreateSubStream(ITSubStream*);
    HRESULT RemoveSubStream(ITSubStream);
    HRESULT EnumerateSubStreams(IEnumSubStream*);
    HRESULT get_SubStreams(VARIANT*);
}
enum IID_ITSubStream = GUID(0xee3bd608, 0x3868, 0x11d2, [0xa0, 0x45, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITSubStream : IDispatch
{
    HRESULT StartSubStream();
    HRESULT PauseSubStream();
    HRESULT StopSubStream();
    HRESULT SelectTerminal(ITTerminal);
    HRESULT UnselectTerminal(ITTerminal);
    HRESULT EnumerateTerminals(IEnumTerminal*);
    HRESULT get_Terminals(VARIANT*);
    HRESULT get_Stream(ITStream*);
}
enum IID_IEnumSubStream = GUID(0xee3bd609, 0x3868, 0x11d2, [0xa0, 0x45, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface IEnumSubStream : IUnknown
{
    HRESULT Next(uint, ITSubStream*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumSubStream*);
}
enum IID_ITLegacyWaveSupport = GUID(0x207823ea, 0xe252, 0x11d2, [0xb7, 0x7e, 0x0, 0x80, 0xc7, 0x13, 0x53, 0x81]);
interface ITLegacyWaveSupport : IDispatch
{
    HRESULT IsFullDuplex(FULLDUPLEX_SUPPORT*);
}
enum IID_ITBasicCallControl2 = GUID(0x161a4a56, 0x1e99, 0x4b3f, [0xa4, 0x6a, 0x16, 0x8f, 0x38, 0xa5, 0xee, 0x4c]);
interface ITBasicCallControl2 : ITBasicCallControl
{
    HRESULT RequestTerminal(BSTR, int, TERMINAL_DIRECTION, ITTerminal*);
    HRESULT SelectTerminalOnCall(ITTerminal);
    HRESULT UnselectTerminalOnCall(ITTerminal);
}
enum IID_ITScriptableAudioFormat = GUID(0xb87658bd, 0x3c59, 0x4f64, [0xbe, 0x74, 0xae, 0xde, 0x3e, 0x86, 0xa8, 0x1e]);
interface ITScriptableAudioFormat : IDispatch
{
    HRESULT get_Channels(int*);
    HRESULT put_Channels(const(int));
    HRESULT get_SamplesPerSec(int*);
    HRESULT put_SamplesPerSec(const(int));
    HRESULT get_AvgBytesPerSec(int*);
    HRESULT put_AvgBytesPerSec(const(int));
    HRESULT get_BlockAlign(int*);
    HRESULT put_BlockAlign(const(int));
    HRESULT get_BitsPerSample(int*);
    HRESULT put_BitsPerSample(const(int));
    HRESULT get_FormatTag(int*);
    HRESULT put_FormatTag(const(int));
}
alias AGENT_EVENT = int;
enum : int
{
    AE_NOT_READY     = 0x00000000,
    AE_READY         = 0x00000001,
    AE_BUSY_ACD      = 0x00000002,
    AE_BUSY_INCOMING = 0x00000003,
    AE_BUSY_OUTGOING = 0x00000004,
    AE_UNKNOWN       = 0x00000005,
}

alias AGENT_STATE = int;
enum : int
{
    AS_NOT_READY     = 0x00000000,
    AS_READY         = 0x00000001,
    AS_BUSY_ACD      = 0x00000002,
    AS_BUSY_INCOMING = 0x00000003,
    AS_BUSY_OUTGOING = 0x00000004,
    AS_UNKNOWN       = 0x00000005,
}

alias AGENT_SESSION_EVENT = int;
enum : int
{
    ASE_NEW_SESSION = 0x00000000,
    ASE_NOT_READY   = 0x00000001,
    ASE_READY       = 0x00000002,
    ASE_BUSY        = 0x00000003,
    ASE_WRAPUP      = 0x00000004,
    ASE_END         = 0x00000005,
}

alias AGENT_SESSION_STATE = int;
enum : int
{
    ASST_NOT_READY     = 0x00000000,
    ASST_READY         = 0x00000001,
    ASST_BUSY_ON_CALL  = 0x00000002,
    ASST_BUSY_WRAPUP   = 0x00000003,
    ASST_SESSION_ENDED = 0x00000004,
}

alias AGENTHANDLER_EVENT = int;
enum : int
{
    AHE_NEW_AGENTHANDLER     = 0x00000000,
    AHE_AGENTHANDLER_REMOVED = 0x00000001,
}

alias ACDGROUP_EVENT = int;
enum : int
{
    ACDGE_NEW_GROUP     = 0x00000000,
    ACDGE_GROUP_REMOVED = 0x00000001,
}

alias ACDQUEUE_EVENT = int;
enum : int
{
    ACDQE_NEW_QUEUE     = 0x00000000,
    ACDQE_QUEUE_REMOVED = 0x00000001,
}

enum IID_ITAgent = GUID(0x5770ece5, 0x4b27, 0x11d1, [0xbf, 0x80, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface ITAgent : IDispatch
{
    HRESULT EnumerateAgentSessions(IEnumAgentSession*);
    HRESULT CreateSession(ITACDGroup, ITAddress, ITAgentSession*);
    HRESULT CreateSessionWithPIN(ITACDGroup, ITAddress, BSTR, ITAgentSession*);
    HRESULT get_ID(BSTR*);
    HRESULT get_User(BSTR*);
    HRESULT put_State(AGENT_STATE);
    HRESULT get_State(AGENT_STATE*);
    HRESULT put_MeasurementPeriod(int);
    HRESULT get_MeasurementPeriod(int*);
    HRESULT get_OverallCallRate(CY*);
    HRESULT get_NumberOfACDCalls(int*);
    HRESULT get_NumberOfIncomingCalls(int*);
    HRESULT get_NumberOfOutgoingCalls(int*);
    HRESULT get_TotalACDTalkTime(int*);
    HRESULT get_TotalACDCallTime(int*);
    HRESULT get_TotalWrapUpTime(int*);
    HRESULT get_AgentSessions(VARIANT*);
}
enum IID_ITAgentSession = GUID(0x5afc3147, 0x4bcc, 0x11d1, [0xbf, 0x80, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface ITAgentSession : IDispatch
{
    HRESULT get_Agent(ITAgent*);
    HRESULT get_Address(ITAddress*);
    HRESULT get_ACDGroup(ITACDGroup*);
    HRESULT put_State(AGENT_SESSION_STATE);
    HRESULT get_State(AGENT_SESSION_STATE*);
    HRESULT get_SessionStartTime(double*);
    HRESULT get_SessionDuration(int*);
    HRESULT get_NumberOfCalls(int*);
    HRESULT get_TotalTalkTime(int*);
    HRESULT get_AverageTalkTime(int*);
    HRESULT get_TotalCallTime(int*);
    HRESULT get_AverageCallTime(int*);
    HRESULT get_TotalWrapUpTime(int*);
    HRESULT get_AverageWrapUpTime(int*);
    HRESULT get_ACDCallRate(CY*);
    HRESULT get_LongestTimeToAnswer(int*);
    HRESULT get_AverageTimeToAnswer(int*);
}
enum IID_ITACDGroup = GUID(0x5afc3148, 0x4bcc, 0x11d1, [0xbf, 0x80, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface ITACDGroup : IDispatch
{
    HRESULT get_Name(BSTR*);
    HRESULT EnumerateQueues(IEnumQueue*);
    HRESULT get_Queues(VARIANT*);
}
enum IID_ITQueue = GUID(0x5afc3149, 0x4bcc, 0x11d1, [0xbf, 0x80, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface ITQueue : IDispatch
{
    HRESULT put_MeasurementPeriod(int);
    HRESULT get_MeasurementPeriod(int*);
    HRESULT get_TotalCallsQueued(int*);
    HRESULT get_CurrentCallsQueued(int*);
    HRESULT get_TotalCallsAbandoned(int*);
    HRESULT get_TotalCallsFlowedIn(int*);
    HRESULT get_TotalCallsFlowedOut(int*);
    HRESULT get_LongestEverWaitTime(int*);
    HRESULT get_CurrentLongestWaitTime(int*);
    HRESULT get_AverageWaitTime(int*);
    HRESULT get_FinalDisposition(int*);
    HRESULT get_Name(BSTR*);
}
enum IID_ITAgentEvent = GUID(0x5afc314a, 0x4bcc, 0x11d1, [0xbf, 0x80, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface ITAgentEvent : IDispatch
{
    HRESULT get_Agent(ITAgent*);
    HRESULT get_Event(AGENT_EVENT*);
}
enum IID_ITAgentSessionEvent = GUID(0x5afc314b, 0x4bcc, 0x11d1, [0xbf, 0x80, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface ITAgentSessionEvent : IDispatch
{
    HRESULT get_Session(ITAgentSession*);
    HRESULT get_Event(AGENT_SESSION_EVENT*);
}
enum IID_ITACDGroupEvent = GUID(0x297f3032, 0xbd11, 0x11d1, [0xa0, 0xa7, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface ITACDGroupEvent : IDispatch
{
    HRESULT get_Group(ITACDGroup*);
    HRESULT get_Event(ACDGROUP_EVENT*);
}
enum IID_ITQueueEvent = GUID(0x297f3033, 0xbd11, 0x11d1, [0xa0, 0xa7, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface ITQueueEvent : IDispatch
{
    HRESULT get_Queue(ITQueue*);
    HRESULT get_Event(ACDQUEUE_EVENT*);
}
enum IID_ITAgentHandlerEvent = GUID(0x297f3034, 0xbd11, 0x11d1, [0xa0, 0xa7, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface ITAgentHandlerEvent : IDispatch
{
    HRESULT get_AgentHandler(ITAgentHandler*);
    HRESULT get_Event(AGENTHANDLER_EVENT*);
}
enum IID_ITTAPICallCenter = GUID(0x5afc3154, 0x4bcc, 0x11d1, [0xbf, 0x80, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface ITTAPICallCenter : IDispatch
{
    HRESULT EnumerateAgentHandlers(IEnumAgentHandler*);
    HRESULT get_AgentHandlers(VARIANT*);
}
enum IID_ITAgentHandler = GUID(0x587e8c22, 0x9802, 0x11d1, [0xa0, 0xa4, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface ITAgentHandler : IDispatch
{
    HRESULT get_Name(BSTR*);
    HRESULT CreateAgent(ITAgent*);
    HRESULT CreateAgentWithID(BSTR, BSTR, ITAgent*);
    HRESULT EnumerateACDGroups(IEnumACDGroup*);
    HRESULT EnumerateUsableAddresses(IEnumAddress*);
    HRESULT get_ACDGroups(VARIANT*);
    HRESULT get_UsableAddresses(VARIANT*);
}
enum IID_IEnumAgent = GUID(0x5afc314d, 0x4bcc, 0x11d1, [0xbf, 0x80, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface IEnumAgent : IUnknown
{
    HRESULT Next(uint, ITAgent*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumAgent*);
}
enum IID_IEnumAgentSession = GUID(0x5afc314e, 0x4bcc, 0x11d1, [0xbf, 0x80, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface IEnumAgentSession : IUnknown
{
    HRESULT Next(uint, ITAgentSession*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumAgentSession*);
}
enum IID_IEnumQueue = GUID(0x5afc3158, 0x4bcc, 0x11d1, [0xbf, 0x80, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface IEnumQueue : IUnknown
{
    HRESULT Next(uint, ITQueue*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumQueue*);
}
enum IID_IEnumACDGroup = GUID(0x5afc3157, 0x4bcc, 0x11d1, [0xbf, 0x80, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface IEnumACDGroup : IUnknown
{
    HRESULT Next(uint, ITACDGroup*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumACDGroup*);
}
enum IID_IEnumAgentHandler = GUID(0x587e8c28, 0x9802, 0x11d1, [0xa0, 0xa4, 0x0, 0x80, 0x5f, 0xc1, 0x47, 0xd3]);
interface IEnumAgentHandler : IUnknown
{
    HRESULT Next(uint, ITAgentHandler*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumAgentHandler*);
}
enum IID_ITAMMediaFormat = GUID(0x364eb00, 0x4a77, 0x11d1, [0xa6, 0x71, 0x0, 0x60, 0x97, 0xc9, 0xa2, 0xe8]);
interface ITAMMediaFormat : IUnknown
{
    HRESULT get_MediaFormat(AM_MEDIA_TYPE**);
    HRESULT put_MediaFormat(const(AM_MEDIA_TYPE)*);
}
enum IID_ITAllocatorProperties = GUID(0xc1bc3c90, 0xbcfe, 0x11d1, [0x97, 0x45, 0x0, 0xc0, 0x4f, 0xd9, 0x1a, 0xc0]);
interface ITAllocatorProperties : IUnknown
{
    HRESULT SetAllocatorProperties(ALLOCATOR_PROPERTIES*);
    HRESULT GetAllocatorProperties(ALLOCATOR_PROPERTIES*);
    HRESULT SetAllocateBuffers(BOOL);
    HRESULT GetAllocateBuffers(BOOL*);
    HRESULT SetBufferSize(uint);
    HRESULT GetBufferSize(uint*);
}
alias MSP_ADDRESS_EVENT = int;
enum : int
{
    ADDRESS_TERMINAL_AVAILABLE   = 0x00000000,
    ADDRESS_TERMINAL_UNAVAILABLE = 0x00000001,
}

alias MSP_CALL_EVENT = int;
enum : int
{
    CALL_NEW_STREAM      = 0x00000000,
    CALL_STREAM_FAIL     = 0x00000001,
    CALL_TERMINAL_FAIL   = 0x00000002,
    CALL_STREAM_NOT_USED = 0x00000003,
    CALL_STREAM_ACTIVE   = 0x00000004,
    CALL_STREAM_INACTIVE = 0x00000005,
}

alias MSP_CALL_EVENT_CAUSE = int;
enum : int
{
    CALL_CAUSE_UNKNOWN            = 0x00000000,
    CALL_CAUSE_BAD_DEVICE         = 0x00000001,
    CALL_CAUSE_CONNECT_FAIL       = 0x00000002,
    CALL_CAUSE_LOCAL_REQUEST      = 0x00000003,
    CALL_CAUSE_REMOTE_REQUEST     = 0x00000004,
    CALL_CAUSE_MEDIA_TIMEOUT      = 0x00000005,
    CALL_CAUSE_MEDIA_RECOVERED    = 0x00000006,
    CALL_CAUSE_QUALITY_OF_SERVICE = 0x00000007,
}

alias MSP_EVENT = int;
enum : int
{
    ME_ADDRESS_EVENT       = 0x00000000,
    ME_CALL_EVENT          = 0x00000001,
    ME_TSP_DATA            = 0x00000002,
    ME_PRIVATE_EVENT       = 0x00000003,
    ME_ASR_TERMINAL_EVENT  = 0x00000004,
    ME_TTS_TERMINAL_EVENT  = 0x00000005,
    ME_FILE_TERMINAL_EVENT = 0x00000006,
    ME_TONE_TERMINAL_EVENT = 0x00000007,
}

struct MSP_EVENT_INFO
{
    uint dwSize;
    MSP_EVENT Event;
    int* hCall;
    union
    {
        struct _MSP_ADDRESS_EVENT_INFO_e__Struct
        {
            MSP_ADDRESS_EVENT Type;
            ITTerminal pTerminal;
        }
        struct _MSP_CALL_EVENT_INFO_e__Struct
        {
            MSP_CALL_EVENT Type;
            MSP_CALL_EVENT_CAUSE Cause;
            ITStream pStream;
            ITTerminal pTerminal;
            HRESULT hrError;
        }
        struct _MSP_TSP_DATA_e__Struct
        {
            uint dwBufferSize;
            ubyte[1] pBuffer;
        }
        struct _MSP_PRIVATE_EVENT_INFO_e__Struct
        {
            IDispatch pEvent;
            int lEventCode;
        }
        struct _MSP_FILE_TERMINAL_EVENT_INFO_e__Struct
        {
            ITTerminal pParentFileTerminal;
            ITFileTrack pFileTrack;
            TERMINAL_MEDIA_STATE TerminalMediaState;
            FT_STATE_EVENT_CAUSE ftecEventCause;
            HRESULT hrErrorCode;
        }
        struct _MSP_ASR_TERMINAL_EVENT_INFO_e__Struct
        {
            ITTerminal pASRTerminal;
            HRESULT hrErrorCode;
        }
        struct _MSP_TTS_TERMINAL_EVENT_INFO_e__Struct
        {
            ITTerminal pTTSTerminal;
            HRESULT hrErrorCode;
        }
        struct _MSP_TONE_TERMINAL_EVENT_INFO_e__Struct
        {
            ITTerminal pToneTerminal;
            HRESULT hrErrorCode;
        }
    }
}
enum IID_ITPluggableTerminalEventSink = GUID(0x6e0887be, 0xba1a, 0x492e, [0xbd, 0x10, 0x40, 0x20, 0xec, 0x5e, 0x33, 0xe0]);
interface ITPluggableTerminalEventSink : IUnknown
{
    HRESULT FireEvent(const(MSP_EVENT_INFO)*);
}
enum IID_ITPluggableTerminalEventSinkRegistration = GUID(0xf7115709, 0xa216, 0x4957, [0xa7, 0x59, 0x6, 0xa, 0xb3, 0x2a, 0x90, 0xd1]);
interface ITPluggableTerminalEventSinkRegistration : IUnknown
{
    HRESULT RegisterSink(ITPluggableTerminalEventSink);
    HRESULT UnregisterSink();
}
enum IID_ITMSPAddress = GUID(0xee3bd600, 0x3868, 0x11d2, [0xa0, 0x45, 0x0, 0xc0, 0x4f, 0xb6, 0x80, 0x9f]);
interface ITMSPAddress : IUnknown
{
    HRESULT Initialize(int*);
    HRESULT Shutdown();
    HRESULT CreateMSPCall(int*, uint, uint, IUnknown, IUnknown*);
    HRESULT ShutdownMSPCall(IUnknown);
    HRESULT ReceiveTSPData(IUnknown, ubyte*, uint);
    HRESULT GetEvent(uint*, ubyte*);
}
enum IID_ITTAPIDispatchEventNotification = GUID(0x9f34325b, 0x7e62, 0x11d2, [0x94, 0x57, 0x0, 0xc0, 0x4f, 0x8e, 0xc8, 0x88]);
interface ITTAPIDispatchEventNotification : IDispatch
{
}
enum CLSID_Rendezvous = GUID(0xf1029e5b, 0xcb5b, 0x11d0, [0x8d, 0x59, 0x0, 0xc0, 0x4f, 0xd9, 0x1a, 0xc0]);
struct Rendezvous
{
}
alias DIRECTORY_TYPE = int;
enum : int
{
    DT_NTDS = 0x00000001,
    DT_ILS  = 0x00000002,
}

alias DIRECTORY_OBJECT_TYPE = int;
enum : int
{
    OT_CONFERENCE = 0x00000001,
    OT_USER       = 0x00000002,
}

alias RND_ADVERTISING_SCOPE = int;
enum : int
{
    RAS_LOCAL  = 0x00000001,
    RAS_SITE   = 0x00000002,
    RAS_REGION = 0x00000003,
    RAS_WORLD  = 0x00000004,
}

enum IID_ITDirectoryObjectConference = GUID(0xf1029e5d, 0xcb5b, 0x11d0, [0x8d, 0x59, 0x0, 0xc0, 0x4f, 0xd9, 0x1a, 0xc0]);
interface ITDirectoryObjectConference : IDispatch
{
    HRESULT get_Protocol(BSTR*);
    HRESULT get_Originator(BSTR*);
    HRESULT put_Originator(BSTR);
    HRESULT get_AdvertisingScope(RND_ADVERTISING_SCOPE*);
    HRESULT put_AdvertisingScope(RND_ADVERTISING_SCOPE);
    HRESULT get_Url(BSTR*);
    HRESULT put_Url(BSTR);
    HRESULT get_Description(BSTR*);
    HRESULT put_Description(BSTR);
    HRESULT get_IsEncrypted(short*);
    HRESULT put_IsEncrypted(short);
    HRESULT get_StartTime(double*);
    HRESULT put_StartTime(double);
    HRESULT get_StopTime(double*);
    HRESULT put_StopTime(double);
}
enum IID_ITDirectoryObjectUser = GUID(0x34621d6f, 0x6cff, 0x11d1, [0xaf, 0xf7, 0x0, 0xc0, 0x4f, 0xc3, 0x1f, 0xee]);
interface ITDirectoryObjectUser : IDispatch
{
    HRESULT get_IPPhonePrimary(BSTR*);
    HRESULT put_IPPhonePrimary(BSTR);
}
enum IID_IEnumDialableAddrs = GUID(0x34621d70, 0x6cff, 0x11d1, [0xaf, 0xf7, 0x0, 0xc0, 0x4f, 0xc3, 0x1f, 0xee]);
interface IEnumDialableAddrs : IUnknown
{
    HRESULT Next(uint, BSTR*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumDialableAddrs*);
}
enum IID_ITDirectoryObject = GUID(0x34621d6e, 0x6cff, 0x11d1, [0xaf, 0xf7, 0x0, 0xc0, 0x4f, 0xc3, 0x1f, 0xee]);
interface ITDirectoryObject : IDispatch
{
    HRESULT get_ObjectType(DIRECTORY_OBJECT_TYPE*);
    HRESULT get_Name(BSTR*);
    HRESULT put_Name(BSTR);
    HRESULT get_DialableAddrs(int, VARIANT*);
    HRESULT EnumerateDialableAddrs(uint, IEnumDialableAddrs*);
    HRESULT get_SecurityDescriptor(IDispatch*);
    HRESULT put_SecurityDescriptor(IDispatch);
}
enum IID_IEnumDirectoryObject = GUID(0x6c9b64a, 0x306d, 0x11d1, [0x97, 0x74, 0x0, 0xc0, 0x4f, 0xd9, 0x1a, 0xc0]);
interface IEnumDirectoryObject : IUnknown
{
    HRESULT Next(uint, ITDirectoryObject*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumDirectoryObject*);
}
enum IID_ITILSConfig = GUID(0x34621d72, 0x6cff, 0x11d1, [0xaf, 0xf7, 0x0, 0xc0, 0x4f, 0xc3, 0x1f, 0xee]);
interface ITILSConfig : IDispatch
{
    HRESULT get_Port(int*);
    HRESULT put_Port(int);
}
enum IID_ITDirectory = GUID(0x34621d6c, 0x6cff, 0x11d1, [0xaf, 0xf7, 0x0, 0xc0, 0x4f, 0xc3, 0x1f, 0xee]);
interface ITDirectory : IDispatch
{
    HRESULT get_DirectoryType(DIRECTORY_TYPE*);
    HRESULT get_DisplayName(BSTR*);
    HRESULT get_IsDynamic(short*);
    HRESULT get_DefaultObjectTTL(int*);
    HRESULT put_DefaultObjectTTL(int);
    HRESULT EnableAutoRefresh(short);
    HRESULT Connect(short);
    HRESULT Bind(BSTR, BSTR, BSTR, int);
    HRESULT AddDirectoryObject(ITDirectoryObject);
    HRESULT ModifyDirectoryObject(ITDirectoryObject);
    HRESULT RefreshDirectoryObject(ITDirectoryObject);
    HRESULT DeleteDirectoryObject(ITDirectoryObject);
    HRESULT get_DirectoryObjects(DIRECTORY_OBJECT_TYPE, BSTR, VARIANT*);
    HRESULT EnumerateDirectoryObjects(DIRECTORY_OBJECT_TYPE, BSTR, IEnumDirectoryObject*);
}
enum IID_IEnumDirectory = GUID(0x34621d6d, 0x6cff, 0x11d1, [0xaf, 0xf7, 0x0, 0xc0, 0x4f, 0xc3, 0x1f, 0xee]);
interface IEnumDirectory : IUnknown
{
    HRESULT Next(uint, ITDirectory*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumDirectory*);
}
enum IID_ITRendezvous = GUID(0x34621d6b, 0x6cff, 0x11d1, [0xaf, 0xf7, 0x0, 0xc0, 0x4f, 0xc3, 0x1f, 0xee]);
interface ITRendezvous : IDispatch
{
    HRESULT get_DefaultDirectories(VARIANT*);
    HRESULT EnumerateDefaultDirectories(IEnumDirectory*);
    HRESULT CreateDirectory(DIRECTORY_TYPE, BSTR, ITDirectory*);
    HRESULT CreateDirectoryObject(DIRECTORY_OBJECT_TYPE, BSTR, ITDirectoryObject*);
}
enum CLSID_McastAddressAllocation = GUID(0xdf0daef2, 0xa289, 0x11d1, [0x86, 0x97, 0x0, 0x60, 0x8, 0xb0, 0xe5, 0xd2]);
struct McastAddressAllocation
{
}
enum IID_IMcastScope = GUID(0xdf0daef4, 0xa289, 0x11d1, [0x86, 0x97, 0x0, 0x60, 0x8, 0xb0, 0xe5, 0xd2]);
interface IMcastScope : IDispatch
{
    HRESULT get_ScopeID(int*);
    HRESULT get_ServerID(int*);
    HRESULT get_InterfaceID(int*);
    HRESULT get_ScopeDescription(BSTR*);
    HRESULT get_TTL(int*);
}
enum IID_IMcastLeaseInfo = GUID(0xdf0daefd, 0xa289, 0x11d1, [0x86, 0x97, 0x0, 0x60, 0x8, 0xb0, 0xe5, 0xd2]);
interface IMcastLeaseInfo : IDispatch
{
    HRESULT get_RequestID(BSTR*);
    HRESULT get_LeaseStartTime(double*);
    HRESULT put_LeaseStartTime(double);
    HRESULT get_LeaseStopTime(double*);
    HRESULT put_LeaseStopTime(double);
    HRESULT get_AddressCount(int*);
    HRESULT get_ServerAddress(BSTR*);
    HRESULT get_TTL(int*);
    HRESULT get_Addresses(VARIANT*);
    HRESULT EnumerateAddresses(IEnumBstr*);
}
enum IID_IEnumMcastScope = GUID(0xdf0daf09, 0xa289, 0x11d1, [0x86, 0x97, 0x0, 0x60, 0x8, 0xb0, 0xe5, 0xd2]);
interface IEnumMcastScope : IUnknown
{
    HRESULT Next(uint, IMcastScope*, uint*);
    HRESULT Reset();
    HRESULT Skip(uint);
    HRESULT Clone(IEnumMcastScope*);
}
enum IID_IMcastAddressAllocation = GUID(0xdf0daef1, 0xa289, 0x11d1, [0x86, 0x97, 0x0, 0x60, 0x8, 0xb0, 0xe5, 0xd2]);
interface IMcastAddressAllocation : IDispatch
{
    HRESULT get_Scopes(VARIANT*);
    HRESULT EnumerateScopes(IEnumMcastScope*);
    HRESULT RequestAddress(IMcastScope, double, double, int, IMcastLeaseInfo*);
    HRESULT RenewAddress(int, IMcastLeaseInfo, IMcastLeaseInfo*);
    HRESULT ReleaseAddress(IMcastLeaseInfo);
    HRESULT CreateLeaseInfo(double, double, uint, PWSTR*, PWSTR, PWSTR, IMcastLeaseInfo*);
    HRESULT CreateLeaseInfoFromVariant(double, double, VARIANT, BSTR, BSTR, IMcastLeaseInfo*);
}
struct STnefProblem
{
    uint ulComponent;
    uint ulAttribute;
    uint ulPropTag;
    int scode;
}
struct STnefProblemArray
{
    uint cProblem;
    STnefProblem[1] aProblem;
}
// [Not Found] IID_ITnef
interface ITnef : IUnknown
{
    HRESULT AddProps(uint, uint, void*, SPropTagArray*);
    HRESULT ExtractProps(uint, SPropTagArray*, STnefProblemArray**);
    HRESULT Finish(uint, ushort*, STnefProblemArray**);
    HRESULT OpenTaggedBody(IMessage, uint, IStream*);
    HRESULT SetProps(uint, uint, uint, SPropValue*);
    HRESULT EncodeRecips(uint, IMAPITable);
    HRESULT FinishComponent(uint, uint, SPropTagArray*, SPropValue*, SPropTagArray*, STnefProblemArray**);
}
alias LPOPENTNEFSTREAM = HRESULT function(void*, IStream, byte*, uint, IMessage, ushort, ITnef*);
alias LPOPENTNEFSTREAMEX = HRESULT function(void*, IStream, byte*, uint, IMessage, ushort, IAddrBook, ITnef*);
alias LPGETTNEFSTREAMCODEPAGE = HRESULT function(IStream, uint*, uint*);
struct RENDDATA
{
    align (1):
    ushort atyp;
    uint ulPosition;
    ushort dxWidth;
    ushort dyHeight;
    uint dwFlags;
}
struct DTR
{
    align (1):
    ushort wYear;
    ushort wMonth;
    ushort wDay;
    ushort wHour;
    ushort wMinute;
    ushort wSecond;
    ushort wDayOfWeek;
}
struct TRP
{
    ushort trpid;
    ushort cbgrtrp;
    ushort cch;
    ushort cbRgb;
}
struct ADDRALIAS
{
    CHAR[41] rgchName;
    CHAR[11] rgchEName;
    CHAR[12] rgchSrvr;
    uint dibDetail;
    ushort type;
}
struct NSID
{
    uint dwSize;
    ubyte[16] uchType;
    uint xtype;
    int lTime;
    union _address_e__Union
    {
        ADDRALIAS alias_;
        CHAR[1] rgchInterNet;
    }
}
