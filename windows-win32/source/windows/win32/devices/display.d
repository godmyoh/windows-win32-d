module windows.win32.devices.display;

import windows.win32.guid : GUID;
import windows.win32.foundation : BOOL, BOOLEAN, CHAR, HANDLE, HRESULT, HWND, LARGE_INTEGER, LUID, NTSTATUS, POINTL, PSTR, PWSTR, RECT, RECTL, SIZE;
import windows.win32.graphics.direct3d9 : IDirect3DDevice9;
import windows.win32.graphics.directdraw : DD_CALLBACKS, DD_DIRECTDRAW_GLOBAL, DD_HALINFO, DD_PALETTECALLBACKS, DD_SURFACECALLBACKS, DD_SURFACE_LOCAL, VIDEOMEMORY;
import windows.win32.graphics.gdi : BLENDFUNCTION, COLORADJUSTMENT, DESIGNVECTOR, DEVMODEW, DISPLAYCONFIG_COLOR_ENCODING, HBITMAP, HDC, HMONITOR, HPALETTE, LOGFONTW, PALETTEENTRY, PANOSE, TRIVERTEX, TTPOLYGONHEADER;
import windows.win32.graphics.opengl : PIXELFORMATDESCRIPTOR;
import windows.win32.system.com_ : IStream, IUnknown;
import windows.win32.system.console : CHAR_INFO, COORD;
import windows.win32.ui.colorsystem : LOGCOLORSPACEW;

version (Windows):
extern (Windows):

int GetNumberOfPhysicalMonitorsFromHMONITOR(HMONITOR, uint*);
HRESULT GetNumberOfPhysicalMonitorsFromIDirect3DDevice9(IDirect3DDevice9, uint*);
int GetPhysicalMonitorsFromHMONITOR(HMONITOR, uint, PHYSICAL_MONITOR*);
HRESULT GetPhysicalMonitorsFromIDirect3DDevice9(IDirect3DDevice9, uint, PHYSICAL_MONITOR*);
int DestroyPhysicalMonitor(HANDLE);
int DestroyPhysicalMonitors(uint, PHYSICAL_MONITOR*);
int GetVCPFeatureAndVCPFeatureReply(HANDLE, ubyte, MC_VCP_CODE_TYPE*, uint*, uint*);
int SetVCPFeature(HANDLE, ubyte, uint);
int SaveCurrentSettings(HANDLE);
int GetCapabilitiesStringLength(HANDLE, uint*);
int CapabilitiesRequestAndCapabilitiesReply(HANDLE, PSTR, uint);
int GetTimingReport(HANDLE, MC_TIMING_REPORT*);
int GetMonitorCapabilities(HANDLE, uint*, uint*);
int SaveCurrentMonitorSettings(HANDLE);
int GetMonitorTechnologyType(HANDLE, MC_DISPLAY_TECHNOLOGY_TYPE*);
int GetMonitorBrightness(HANDLE, uint*, uint*, uint*);
int GetMonitorContrast(HANDLE, uint*, uint*, uint*);
int GetMonitorColorTemperature(HANDLE, MC_COLOR_TEMPERATURE*);
int GetMonitorRedGreenOrBlueDrive(HANDLE, MC_DRIVE_TYPE, uint*, uint*, uint*);
int GetMonitorRedGreenOrBlueGain(HANDLE, MC_GAIN_TYPE, uint*, uint*, uint*);
int SetMonitorBrightness(HANDLE, uint);
int SetMonitorContrast(HANDLE, uint);
int SetMonitorColorTemperature(HANDLE, MC_COLOR_TEMPERATURE);
int SetMonitorRedGreenOrBlueDrive(HANDLE, MC_DRIVE_TYPE, uint);
int SetMonitorRedGreenOrBlueGain(HANDLE, MC_GAIN_TYPE, uint);
int DegaussMonitor(HANDLE);
int GetMonitorDisplayAreaSize(HANDLE, MC_SIZE_TYPE, uint*, uint*, uint*);
int GetMonitorDisplayAreaPosition(HANDLE, MC_POSITION_TYPE, uint*, uint*, uint*);
int SetMonitorDisplayAreaSize(HANDLE, MC_SIZE_TYPE, uint);
int SetMonitorDisplayAreaPosition(HANDLE, MC_POSITION_TYPE, uint);
int RestoreMonitorFactoryColorDefaults(HANDLE);
int RestoreMonitorFactoryDefaults(HANDLE);
void* BRUSHOBJ_pvAllocRbrush(BRUSHOBJ*, uint);
void* BRUSHOBJ_pvGetRbrush(BRUSHOBJ*);
uint BRUSHOBJ_ulGetBrushColor(BRUSHOBJ*);
HANDLE BRUSHOBJ_hGetColorTransform(BRUSHOBJ*);
uint CLIPOBJ_cEnumStart(CLIPOBJ*, BOOL, uint, uint, uint);
BOOL CLIPOBJ_bEnum(CLIPOBJ*, uint, uint*);
PATHOBJ* CLIPOBJ_ppoGetPath(CLIPOBJ*);
uint FONTOBJ_cGetAllGlyphHandles(FONTOBJ*, uint*);
void FONTOBJ_vGetInfo(FONTOBJ*, uint, FONTINFO*);
uint FONTOBJ_cGetGlyphs(FONTOBJ*, uint, uint, uint*, void**);
XFORMOBJ* FONTOBJ_pxoGetXform(FONTOBJ*);
IFIMETRICS* FONTOBJ_pifi(FONTOBJ*);
FD_GLYPHSET* FONTOBJ_pfdg(FONTOBJ*);
void* FONTOBJ_pvTrueTypeFontFile(FONTOBJ*, uint*);
FD_GLYPHATTR* FONTOBJ_pQueryGlyphAttrs(FONTOBJ*, uint);
void PATHOBJ_vEnumStart(PATHOBJ*);
BOOL PATHOBJ_bEnum(PATHOBJ*, PATHDATA*);
void PATHOBJ_vEnumStartClipLines(PATHOBJ*, CLIPOBJ*, SURFOBJ*, LINEATTRS*);
BOOL PATHOBJ_bEnumClipLines(PATHOBJ*, uint, CLIPLINE*);
void PATHOBJ_vGetBounds(PATHOBJ*, RECTFX*);
void STROBJ_vEnumStart(STROBJ*);
BOOL STROBJ_bEnum(STROBJ*, uint*, GLYPHPOS**);
BOOL STROBJ_bEnumPositionsOnly(STROBJ*, uint*, GLYPHPOS**);
uint STROBJ_dwGetCodePage(STROBJ*);
BOOL STROBJ_bGetAdvanceWidths(STROBJ*, uint, uint, POINTQF*);
uint XFORMOBJ_iGetXform(XFORMOBJ*, XFORML*);
BOOL XFORMOBJ_bApplyXform(XFORMOBJ*, uint, uint, void*, void*);
uint XLATEOBJ_iXlate(XLATEOBJ*, uint);
uint* XLATEOBJ_piVector(XLATEOBJ*);
uint XLATEOBJ_cGetPalette(XLATEOBJ*, uint, uint, uint*);
HANDLE XLATEOBJ_hGetColorTransform(XLATEOBJ*);
HBITMAP EngCreateBitmap(SIZE, int, uint, uint, void*);
HSURF EngCreateDeviceSurface(DHSURF, SIZE, uint);
HBITMAP EngCreateDeviceBitmap(DHSURF, SIZE, uint);
BOOL EngDeleteSurface(HSURF);
SURFOBJ* EngLockSurface(HSURF);
void EngUnlockSurface(SURFOBJ*);
BOOL EngEraseSurface(SURFOBJ*, RECTL*, uint);
BOOL EngAssociateSurface(HSURF, HDEV, uint);
BOOL EngMarkBandingSurface(HSURF);
BOOL EngCheckAbort(SURFOBJ*);
void EngDeletePath(PATHOBJ*);
HPALETTE EngCreatePalette(uint, uint, uint*, uint, uint, uint);
BOOL EngDeletePalette(HPALETTE);
CLIPOBJ* EngCreateClip();
void EngDeleteClip(CLIPOBJ*);
BOOL EngBitBlt(SURFOBJ*, SURFOBJ*, SURFOBJ*, CLIPOBJ*, XLATEOBJ*, RECTL*, POINTL*, POINTL*, BRUSHOBJ*, POINTL*, uint);
BOOL EngLineTo(SURFOBJ*, CLIPOBJ*, BRUSHOBJ*, int, int, int, int, RECTL*, uint);
BOOL EngStretchBlt(SURFOBJ*, SURFOBJ*, SURFOBJ*, CLIPOBJ*, XLATEOBJ*, COLORADJUSTMENT*, POINTL*, RECTL*, RECTL*, POINTL*, uint);
BOOL EngStretchBltROP(SURFOBJ*, SURFOBJ*, SURFOBJ*, CLIPOBJ*, XLATEOBJ*, COLORADJUSTMENT*, POINTL*, RECTL*, RECTL*, POINTL*, uint, BRUSHOBJ*, uint);
BOOL EngAlphaBlend(SURFOBJ*, SURFOBJ*, CLIPOBJ*, XLATEOBJ*, RECTL*, RECTL*, BLENDOBJ*);
BOOL EngGradientFill(SURFOBJ*, CLIPOBJ*, XLATEOBJ*, TRIVERTEX*, uint, void*, uint, RECTL*, POINTL*, uint);
BOOL EngTransparentBlt(SURFOBJ*, SURFOBJ*, CLIPOBJ*, XLATEOBJ*, RECTL*, RECTL*, uint, uint);
BOOL EngTextOut(SURFOBJ*, STROBJ*, FONTOBJ*, CLIPOBJ*, RECTL*, RECTL*, BRUSHOBJ*, BRUSHOBJ*, POINTL*, uint);
BOOL EngStrokePath(SURFOBJ*, PATHOBJ*, CLIPOBJ*, XFORMOBJ*, BRUSHOBJ*, POINTL*, LINEATTRS*, uint);
BOOL EngFillPath(SURFOBJ*, PATHOBJ*, CLIPOBJ*, BRUSHOBJ*, POINTL*, uint, uint);
BOOL EngStrokeAndFillPath(SURFOBJ*, PATHOBJ*, CLIPOBJ*, XFORMOBJ*, BRUSHOBJ*, LINEATTRS*, BRUSHOBJ*, POINTL*, uint, uint);
BOOL EngPaint(SURFOBJ*, CLIPOBJ*, BRUSHOBJ*, POINTL*, uint);
BOOL EngCopyBits(SURFOBJ*, SURFOBJ*, CLIPOBJ*, XLATEOBJ*, RECTL*, POINTL*);
BOOL EngPlgBlt(SURFOBJ*, SURFOBJ*, SURFOBJ*, CLIPOBJ*, XLATEOBJ*, COLORADJUSTMENT*, POINTL*, POINTFIX*, RECTL*, POINTL*, uint);
int HT_Get8BPPFormatPalette(PALETTEENTRY*, ushort, ushort, ushort);
int HT_Get8BPPMaskPalette(PALETTEENTRY*, BOOL, ubyte, ushort, ushort, ushort);
PWSTR EngGetPrinterDataFileName(HDEV);
PWSTR EngGetDriverName(HDEV);
HANDLE EngLoadModule(PWSTR);
void* EngFindResource(HANDLE, int, int, uint*);
void EngFreeModule(HANDLE);
HSEMAPHORE EngCreateSemaphore();
void EngAcquireSemaphore(HSEMAPHORE);
void EngReleaseSemaphore(HSEMAPHORE);
void EngDeleteSemaphore(HSEMAPHORE);
void EngMultiByteToUnicodeN(PWSTR, uint, uint*, PSTR, uint);
void EngUnicodeToMultiByteN(PSTR, uint, uint*, PWSTR, uint);
void EngQueryLocalTime(ENG_TIME_FIELDS*);
FD_GLYPHSET* EngComputeGlyphSet(int, int, int);
int EngMultiByteToWideChar(uint, PWSTR, int, PSTR, int);
int EngWideCharToMultiByte(uint, PWSTR, int, PSTR, int);
void EngGetCurrentCodePage(ushort*, ushort*);
BOOL EngQueryEMFInfo(HDEV, EMFINFO*);
int GetDisplayConfigBufferSizes(uint, uint*, uint*);
int SetDisplayConfig(uint, DISPLAYCONFIG_PATH_INFO*, uint, DISPLAYCONFIG_MODE_INFO*, uint);
int QueryDisplayConfig(uint, uint*, DISPLAYCONFIG_PATH_INFO*, uint*, DISPLAYCONFIG_MODE_INFO*, DISPLAYCONFIG_TOPOLOGY_ID*);
int DisplayConfigGetDeviceInfo(DISPLAYCONFIG_DEVICE_INFO_HEADER*);
int DisplayConfigSetDeviceInfo(DISPLAYCONFIG_DEVICE_INFO_HEADER*);
BOOL GetAutoRotationState(AR_STATE*);
BOOL GetDisplayAutoRotationPreferences(ORIENTATION_PREFERENCE*);
BOOL SetDisplayAutoRotationPreferences(ORIENTATION_PREFERENCE);
enum GUID_DEVINTERFACE_DISPLAY_ADAPTER = GUID(0x5b45201d, 0xf2f2, 0x4f3b, [0x85, 0xbb, 0x30, 0xff, 0x1f, 0x95, 0x35, 0x99]);
enum GUID_DEVINTERFACE_MONITOR = GUID(0xe6f07b5f, 0xee97, 0x4a90, [0xb0, 0x76, 0x33, 0xf5, 0x7b, 0xf4, 0xea, 0xa7]);
enum GUID_DISPLAY_DEVICE_ARRIVAL = GUID(0x1ca05180, 0xa699, 0x450a, [0x9a, 0xc, 0xde, 0x4f, 0xbe, 0x3d, 0xdd, 0x89]);
enum GUID_DEVINTERFACE_VIDEO_OUTPUT_ARRIVAL = GUID(0x1ad9e4f0, 0xf88d, 0x4360, [0xba, 0xb9, 0x4c, 0x2d, 0x55, 0xe5, 0x64, 0xcd]);
//enum DEVPKEY_IndirectDisplay = [MISSING];
//enum DEVPKEY_Device_TerminalLuid = [MISSING];
//enum DEVPKEY_Device_AdapterLuid = [MISSING];
//enum DEVPKEY_Device_ActivityId = [MISSING];
enum INDIRECT_DISPLAY_INFO_FLAGS_CREATED_IDDCX_ADAPTER = 0x00000001;
enum VIDEO_DEVICE_NAME = "DISPLAY%d";
enum WVIDEO_DEVICE_NAME = "DISPLAY%d";
enum IOCTL_VIDEO_DISABLE_VDM = 0x00230004;
enum IOCTL_VIDEO_REGISTER_VDM = 0x00230008;
enum IOCTL_VIDEO_SET_OUTPUT_DEVICE_POWER_STATE = 0x0023000c;
enum IOCTL_VIDEO_GET_OUTPUT_DEVICE_POWER_STATE = 0x00230010;
enum IOCTL_VIDEO_MONITOR_DEVICE = 0x00230014;
enum IOCTL_VIDEO_ENUM_MONITOR_PDO = 0x00230018;
enum IOCTL_VIDEO_INIT_WIN32K_CALLBACKS = 0x0023001c;
enum IOCTL_VIDEO_IS_VGA_DEVICE = 0x00230024;
enum IOCTL_VIDEO_USE_DEVICE_IN_SESSION = 0x00230028;
enum IOCTL_VIDEO_PREPARE_FOR_EARECOVERY = 0x0023002c;
enum IOCTL_VIDEO_ENABLE_VDM = 0x00230000;
enum IOCTL_VIDEO_SAVE_HARDWARE_STATE = 0x00230200;
enum IOCTL_VIDEO_RESTORE_HARDWARE_STATE = 0x00230204;
enum IOCTL_VIDEO_HANDLE_VIDEOPARAMETERS = 0x00230020;
enum IOCTL_VIDEO_QUERY_AVAIL_MODES = 0x00230400;
enum IOCTL_VIDEO_QUERY_NUM_AVAIL_MODES = 0x00230404;
enum IOCTL_VIDEO_QUERY_CURRENT_MODE = 0x00230408;
enum IOCTL_VIDEO_SET_CURRENT_MODE = 0x0023040c;
enum IOCTL_VIDEO_RESET_DEVICE = 0x00230410;
enum IOCTL_VIDEO_LOAD_AND_SET_FONT = 0x00230414;
enum IOCTL_VIDEO_SET_PALETTE_REGISTERS = 0x00230418;
enum IOCTL_VIDEO_SET_COLOR_REGISTERS = 0x0023041c;
enum IOCTL_VIDEO_ENABLE_CURSOR = 0x00230420;
enum IOCTL_VIDEO_DISABLE_CURSOR = 0x00230424;
enum IOCTL_VIDEO_SET_CURSOR_ATTR = 0x00230428;
enum IOCTL_VIDEO_QUERY_CURSOR_ATTR = 0x0023042c;
enum IOCTL_VIDEO_SET_CURSOR_POSITION = 0x00230430;
enum IOCTL_VIDEO_QUERY_CURSOR_POSITION = 0x00230434;
enum IOCTL_VIDEO_ENABLE_POINTER = 0x00230438;
enum IOCTL_VIDEO_DISABLE_POINTER = 0x0023043c;
enum IOCTL_VIDEO_SET_POINTER_ATTR = 0x00230440;
enum IOCTL_VIDEO_QUERY_POINTER_ATTR = 0x00230444;
enum IOCTL_VIDEO_SET_POINTER_POSITION = 0x00230448;
enum IOCTL_VIDEO_QUERY_POINTER_POSITION = 0x0023044c;
enum IOCTL_VIDEO_QUERY_POINTER_CAPABILITIES = 0x00230450;
enum IOCTL_VIDEO_GET_BANK_SELECT_CODE = 0x00230454;
enum IOCTL_VIDEO_MAP_VIDEO_MEMORY = 0x00230458;
enum IOCTL_VIDEO_UNMAP_VIDEO_MEMORY = 0x0023045c;
enum IOCTL_VIDEO_QUERY_PUBLIC_ACCESS_RANGES = 0x00230460;
enum IOCTL_VIDEO_FREE_PUBLIC_ACCESS_RANGES = 0x00230464;
enum IOCTL_VIDEO_QUERY_COLOR_CAPABILITIES = 0x00230468;
enum IOCTL_VIDEO_SET_POWER_MANAGEMENT = 0x0023046c;
enum IOCTL_VIDEO_GET_POWER_MANAGEMENT = 0x00230470;
enum IOCTL_VIDEO_SHARE_VIDEO_MEMORY = 0x00230474;
enum IOCTL_VIDEO_UNSHARE_VIDEO_MEMORY = 0x00230478;
enum IOCTL_VIDEO_SET_COLOR_LUT_DATA = 0x0023047c;
enum IOCTL_VIDEO_GET_CHILD_STATE = 0x00230480;
enum IOCTL_VIDEO_VALIDATE_CHILD_STATE_CONFIGURATION = 0x00230484;
enum IOCTL_VIDEO_SET_CHILD_STATE_CONFIGURATION = 0x00230488;
enum IOCTL_VIDEO_SWITCH_DUALVIEW = 0x0023048c;
enum IOCTL_VIDEO_SET_BANK_POSITION = 0x00230490;
enum IOCTL_VIDEO_QUERY_SUPPORTED_BRIGHTNESS = 0x00230494;
enum IOCTL_VIDEO_QUERY_DISPLAY_BRIGHTNESS = 0x00230498;
enum IOCTL_VIDEO_SET_DISPLAY_BRIGHTNESS = 0x0023049c;
enum IOCTL_FSVIDEO_COPY_FRAME_BUFFER = 0x00340800;
enum IOCTL_FSVIDEO_WRITE_TO_FRAME_BUFFER = 0x00340804;
enum IOCTL_FSVIDEO_REVERSE_MOUSE_POINTER = 0x00340808;
enum IOCTL_FSVIDEO_SET_CURRENT_MODE = 0x0034080c;
enum IOCTL_FSVIDEO_SET_SCREEN_INFORMATION = 0x00340810;
enum IOCTL_FSVIDEO_SET_CURSOR_POSITION = 0x00340814;
enum IOCTL_PANEL_QUERY_BRIGHTNESS_CAPS = 0x00230c00;
enum IOCTL_PANEL_QUERY_BRIGHTNESS_RANGES = 0x00230c04;
enum IOCTL_PANEL_GET_BRIGHTNESS = 0x00230c08;
enum IOCTL_PANEL_SET_BRIGHTNESS = 0x00230c0c;
enum IOCTL_PANEL_SET_BRIGHTNESS_STATE = 0x00230c10;
enum IOCTL_PANEL_SET_BACKLIGHT_OPTIMIZATION = 0x00230c14;
enum IOCTL_PANEL_GET_BACKLIGHT_REDUCTION = 0x00230c18;
enum IOCTL_COLORSPACE_TRANSFORM_QUERY_TARGET_CAPS = 0x00231000;
enum IOCTL_COLORSPACE_TRANSFORM_SET = 0x00231004;
enum IOCTL_SET_ACTIVE_COLOR_PROFILE_NAME = 0x00231008;
enum IOCTL_MIPI_DSI_QUERY_CAPS = 0x00231400;
enum IOCTL_MIPI_DSI_TRANSMISSION = 0x00231404;
enum IOCTL_MIPI_DSI_RESET = 0x00231408;
enum DXGK_WIN32K_PARAM_FLAG_UPDATEREGISTRY = 0x00000001;
enum DXGK_WIN32K_PARAM_FLAG_MODESWITCH = 0x00000002;
enum DXGK_WIN32K_PARAM_FLAG_DISABLEVIEW = 0x00000004;
enum VIDEO_DUALVIEW_REMOVABLE = 0x00000001;
enum VIDEO_DUALVIEW_PRIMARY = 0x80000000;
enum VIDEO_DUALVIEW_SECONDARY = 0x40000000;
enum VIDEO_DUALVIEW_WDDM_VGA = 0x20000000;
enum VIDEO_STATE_NON_STANDARD_VGA = 0x00000001;
enum VIDEO_STATE_UNEMULATED_VGA_STATE = 0x00000002;
enum VIDEO_STATE_PACKED_CHAIN4_MODE = 0x00000004;
enum VIDEO_MODE_NO_ZERO_MEMORY = 0x80000000;
enum VIDEO_MODE_MAP_MEM_LINEAR = 0x40000000;
enum VIDEO_MODE_COLOR = 0x00000001;
enum VIDEO_MODE_GRAPHICS = 0x00000002;
enum VIDEO_MODE_PALETTE_DRIVEN = 0x00000004;
enum VIDEO_MODE_MANAGED_PALETTE = 0x00000008;
enum VIDEO_MODE_INTERLACED = 0x00000010;
enum VIDEO_MODE_NO_OFF_SCREEN = 0x00000020;
enum VIDEO_MODE_NO_64_BIT_ACCESS = 0x00000040;
enum VIDEO_MODE_BANKED = 0x00000080;
enum VIDEO_MODE_LINEAR = 0x00000100;
enum VIDEO_MODE_ASYNC_POINTER = 0x00000001;
enum VIDEO_MODE_MONO_POINTER = 0x00000002;
enum VIDEO_MODE_COLOR_POINTER = 0x00000004;
enum VIDEO_MODE_ANIMATE_START = 0x00000008;
enum VIDEO_MODE_ANIMATE_UPDATE = 0x00000010;
enum PLANAR_HC = 0x00000001;
enum VIDEO_DEVICE_COLOR = 0x00000001;
enum VIDEO_OPTIONAL_GAMMET_TABLE = 0x00000002;
enum VIDEO_COLOR_LUT_DATA_FORMAT_RGB256WORDS = 0x00000001;
enum VIDEO_COLOR_LUT_DATA_FORMAT_PRIVATEFORMAT = 0x80000000;
enum DISPLAYPOLICY_AC = 0x00000001;
enum DISPLAYPOLICY_DC = 0x00000002;
enum CHAR_TYPE_SBCS = 0x00000000;
enum CHAR_TYPE_LEADING = 0x00000002;
enum CHAR_TYPE_TRAILING = 0x00000003;
enum BITMAP_BITS_BYTE_ALIGN = 0x00000008;
enum BITMAP_BITS_WORD_ALIGN = 0x00000010;
enum BITMAP_ARRAY_BYTE = 0x00000003;
enum BITMAP_PLANES = 0x00000001;
enum BITMAP_BITS_PIXEL = 0x00000001;
enum DD_FULLSCREEN_VIDEO_DEVICE_NAME = "\\Device\\FSVideo";
enum VIDEO_REASON_NONE = 0x00000000;
enum VIDEO_REASON_POLICY1 = 0x00000001;
enum VIDEO_REASON_POLICY2 = 0x00000002;
enum VIDEO_REASON_POLICY3 = 0x00000003;
enum VIDEO_REASON_POLICY4 = 0x00000004;
enum VIDEO_REASON_LOCK = 0x00000005;
enum VIDEO_REASON_FAILED_ROTATION = 0x00000005;
enum VIDEO_REASON_ALLOCATION = 0x00000006;
enum VIDEO_REASON_SCRATCH = 0x00000008;
enum VIDEO_REASON_CONFIGURATION = 0x00000009;
enum VIDEO_MAX_REASON = 0x00000009;
enum BRIGHTNESS_MAX_LEVEL_COUNT = 0x00000067;
enum BRIGHTNESS_MAX_NIT_RANGE_COUNT = 0x00000010;
enum DSI_PACKET_EMBEDDED_PAYLOAD_SIZE = 0x00000008;
enum MAX_PACKET_COUNT = 0x00000080;
enum DSI_INVALID_PACKET_INDEX = 0x000000ff;
enum DSI_SOT_ERROR = 0x00000001;
enum DSI_SOT_SYNC_ERROR = 0x00000002;
enum DSI_EOT_SYNC_ERROR = 0x00000004;
enum DSI_ESCAPE_MODE_ENTRY_COMMAND_ERROR = 0x00000008;
enum DSI_LOW_POWER_TRANSMIT_SYNC_ERROR = 0x00000010;
enum DSI_PERIPHERAL_TIMEOUT_ERROR = 0x00000020;
enum DSI_FALSE_CONTROL_ERROR = 0x00000040;
enum DSI_CONTENTION_DETECTED = 0x00000080;
enum DSI_CHECKSUM_ERROR_CORRECTED = 0x00000100;
enum DSI_CHECKSUM_ERROR_NOT_CORRECTED = 0x00000200;
enum DSI_LONG_PACKET_PAYLOAD_CHECKSUM_ERROR = 0x00000400;
enum DSI_DSI_DATA_TYPE_NOT_RECOGNIZED = 0x00000800;
enum DSI_DSI_VC_ID_INVALID = 0x00001000;
enum DSI_INVALID_TRANSMISSION_LENGTH = 0x00002000;
enum DSI_DSI_PROTOCOL_VIOLATION = 0x00008000;
enum HOST_DSI_DEVICE_NOT_READY = 0x00000001;
enum HOST_DSI_INTERFACE_RESET = 0x00000002;
enum HOST_DSI_DEVICE_RESET = 0x00000004;
enum HOST_DSI_TRANSMISSION_CANCELLED = 0x00000010;
enum HOST_DSI_TRANSMISSION_DROPPED = 0x00000020;
enum HOST_DSI_TRANSMISSION_TIMEOUT = 0x00000040;
enum HOST_DSI_INVALID_TRANSMISSION = 0x00000100;
enum HOST_DSI_OS_REJECTED_PACKET = 0x00000200;
enum HOST_DSI_DRIVER_REJECTED_PACKET = 0x00000400;
enum HOST_DSI_BAD_TRANSMISSION_MODE = 0x00001000;
enum GUID_MONITOR_OVERRIDE_PSEUDO_SPECIALIZED = GUID(0xf196c02f, 0xf86f, 0x4f9a, [0xaa, 0x15, 0xe9, 0xce, 0xbd, 0xfe, 0x3b, 0x96]);
enum FD_ERROR = 0xffffffff;
enum DDI_ERROR = 0xffffffff;
enum FDM_TYPE_BM_SIDE_CONST = 0x00000001;
enum FDM_TYPE_MAXEXT_EQUAL_BM_SIDE = 0x00000002;
enum FDM_TYPE_CHAR_INC_EQUAL_BM_BASE = 0x00000004;
enum FDM_TYPE_ZERO_BEARINGS = 0x00000008;
enum FDM_TYPE_CONST_BEARINGS = 0x00000010;
enum GS_UNICODE_HANDLES = 0x00000001;
enum GS_8BIT_HANDLES = 0x00000002;
enum GS_16BIT_HANDLES = 0x00000004;
enum FM_VERSION_NUMBER = 0x00000000;
enum FM_TYPE_LICENSED = 0x00000002;
enum FM_READONLY_EMBED = 0x00000004;
enum FM_EDITABLE_EMBED = 0x00000008;
enum FM_NO_EMBEDDING = 0x00000002;
enum FM_INFO_TECH_TRUETYPE = 0x00000001;
enum FM_INFO_TECH_BITMAP = 0x00000002;
enum FM_INFO_TECH_STROKE = 0x00000004;
enum FM_INFO_TECH_OUTLINE_NOT_TRUETYPE = 0x00000008;
enum FM_INFO_ARB_XFORMS = 0x00000010;
enum FM_INFO_1BPP = 0x00000020;
enum FM_INFO_4BPP = 0x00000040;
enum FM_INFO_8BPP = 0x00000080;
enum FM_INFO_16BPP = 0x00000100;
enum FM_INFO_24BPP = 0x00000200;
enum FM_INFO_32BPP = 0x00000400;
enum FM_INFO_INTEGER_WIDTH = 0x00000800;
enum FM_INFO_CONSTANT_WIDTH = 0x00001000;
enum FM_INFO_NOT_CONTIGUOUS = 0x00002000;
enum FM_INFO_TECH_MM = 0x00004000;
enum FM_INFO_RETURNS_OUTLINES = 0x00008000;
enum FM_INFO_RETURNS_STROKES = 0x00010000;
enum FM_INFO_RETURNS_BITMAPS = 0x00020000;
enum FM_INFO_DSIG = 0x00040000;
enum FM_INFO_RIGHT_HANDED = 0x00080000;
enum FM_INFO_INTEGRAL_SCALING = 0x00100000;
enum FM_INFO_90DEGREE_ROTATIONS = 0x00200000;
enum FM_INFO_OPTICALLY_FIXED_PITCH = 0x00400000;
enum FM_INFO_DO_NOT_ENUMERATE = 0x00800000;
enum FM_INFO_ISOTROPIC_SCALING_ONLY = 0x01000000;
enum FM_INFO_ANISOTROPIC_SCALING_ONLY = 0x02000000;
enum FM_INFO_TECH_CFF = 0x04000000;
enum FM_INFO_FAMILY_EQUIV = 0x08000000;
enum FM_INFO_DBCS_FIXED_PITCH = 0x10000000;
enum FM_INFO_NONNEGATIVE_AC = 0x20000000;
enum FM_INFO_IGNORE_TC_RA_ABLE = 0x40000000;
enum FM_INFO_TECH_TYPE1 = 0x80000000;
enum MAXCHARSETS = 0x00000010;
enum FM_PANOSE_CULTURE_LATIN = 0x00000000;
enum FM_SEL_ITALIC = 0x00000001;
enum FM_SEL_UNDERSCORE = 0x00000002;
enum FM_SEL_NEGATIVE = 0x00000004;
enum FM_SEL_OUTLINED = 0x00000008;
enum FM_SEL_STRIKEOUT = 0x00000010;
enum FM_SEL_BOLD = 0x00000020;
enum FM_SEL_REGULAR = 0x00000040;
enum OPENGL_CMD = 0x00001100;
enum OPENGL_GETINFO = 0x00001101;
enum WNDOBJ_SETUP = 0x00001102;
enum DDI_DRIVER_VERSION_NT4 = 0x00020000;
enum DDI_DRIVER_VERSION_SP3 = 0x00020003;
enum DDI_DRIVER_VERSION_NT5 = 0x00030000;
enum DDI_DRIVER_VERSION_NT5_01 = 0x00030100;
enum DDI_DRIVER_VERSION_NT5_01_SP1 = 0x00030101;
enum GDI_DRIVER_VERSION = 0x00004000;
enum INDEX_DrvEnablePDEV = 0x00000000;
enum INDEX_DrvCompletePDEV = 0x00000001;
enum INDEX_DrvDisablePDEV = 0x00000002;
enum INDEX_DrvEnableSurface = 0x00000003;
enum INDEX_DrvDisableSurface = 0x00000004;
enum INDEX_DrvAssertMode = 0x00000005;
enum INDEX_DrvOffset = 0x00000006;
enum INDEX_DrvResetPDEV = 0x00000007;
enum INDEX_DrvDisableDriver = 0x00000008;
enum INDEX_DrvCreateDeviceBitmap = 0x0000000a;
enum INDEX_DrvDeleteDeviceBitmap = 0x0000000b;
enum INDEX_DrvRealizeBrush = 0x0000000c;
enum INDEX_DrvDitherColor = 0x0000000d;
enum INDEX_DrvStrokePath = 0x0000000e;
enum INDEX_DrvFillPath = 0x0000000f;
enum INDEX_DrvStrokeAndFillPath = 0x00000010;
enum INDEX_DrvPaint = 0x00000011;
enum INDEX_DrvBitBlt = 0x00000012;
enum INDEX_DrvCopyBits = 0x00000013;
enum INDEX_DrvStretchBlt = 0x00000014;
enum INDEX_DrvSetPalette = 0x00000016;
enum INDEX_DrvTextOut = 0x00000017;
enum INDEX_DrvEscape = 0x00000018;
enum INDEX_DrvDrawEscape = 0x00000019;
enum INDEX_DrvQueryFont = 0x0000001a;
enum INDEX_DrvQueryFontTree = 0x0000001b;
enum INDEX_DrvQueryFontData = 0x0000001c;
enum INDEX_DrvSetPointerShape = 0x0000001d;
enum INDEX_DrvMovePointer = 0x0000001e;
enum INDEX_DrvLineTo = 0x0000001f;
enum INDEX_DrvSendPage = 0x00000020;
enum INDEX_DrvStartPage = 0x00000021;
enum INDEX_DrvEndDoc = 0x00000022;
enum INDEX_DrvStartDoc = 0x00000023;
enum INDEX_DrvGetGlyphMode = 0x00000025;
enum INDEX_DrvSynchronize = 0x00000026;
enum INDEX_DrvSaveScreenBits = 0x00000028;
enum INDEX_DrvGetModes = 0x00000029;
enum INDEX_DrvFree = 0x0000002a;
enum INDEX_DrvDestroyFont = 0x0000002b;
enum INDEX_DrvQueryFontCaps = 0x0000002c;
enum INDEX_DrvLoadFontFile = 0x0000002d;
enum INDEX_DrvUnloadFontFile = 0x0000002e;
enum INDEX_DrvFontManagement = 0x0000002f;
enum INDEX_DrvQueryTrueTypeTable = 0x00000030;
enum INDEX_DrvQueryTrueTypeOutline = 0x00000031;
enum INDEX_DrvGetTrueTypeFile = 0x00000032;
enum INDEX_DrvQueryFontFile = 0x00000033;
enum INDEX_DrvMovePanning = 0x00000034;
enum INDEX_DrvQueryAdvanceWidths = 0x00000035;
enum INDEX_DrvSetPixelFormat = 0x00000036;
enum INDEX_DrvDescribePixelFormat = 0x00000037;
enum INDEX_DrvSwapBuffers = 0x00000038;
enum INDEX_DrvStartBanding = 0x00000039;
enum INDEX_DrvNextBand = 0x0000003a;
enum INDEX_DrvGetDirectDrawInfo = 0x0000003b;
enum INDEX_DrvEnableDirectDraw = 0x0000003c;
enum INDEX_DrvDisableDirectDraw = 0x0000003d;
enum INDEX_DrvQuerySpoolType = 0x0000003e;
enum INDEX_DrvIcmCreateColorTransform = 0x00000040;
enum INDEX_DrvIcmDeleteColorTransform = 0x00000041;
enum INDEX_DrvIcmCheckBitmapBits = 0x00000042;
enum INDEX_DrvIcmSetDeviceGammaRamp = 0x00000043;
enum INDEX_DrvGradientFill = 0x00000044;
enum INDEX_DrvStretchBltROP = 0x00000045;
enum INDEX_DrvPlgBlt = 0x00000046;
enum INDEX_DrvAlphaBlend = 0x00000047;
enum INDEX_DrvSynthesizeFont = 0x00000048;
enum INDEX_DrvGetSynthesizedFontFiles = 0x00000049;
enum INDEX_DrvTransparentBlt = 0x0000004a;
enum INDEX_DrvQueryPerBandInfo = 0x0000004b;
enum INDEX_DrvQueryDeviceSupport = 0x0000004c;
enum INDEX_DrvReserved1 = 0x0000004d;
enum INDEX_DrvReserved2 = 0x0000004e;
enum INDEX_DrvReserved3 = 0x0000004f;
enum INDEX_DrvReserved4 = 0x00000050;
enum INDEX_DrvReserved5 = 0x00000051;
enum INDEX_DrvReserved6 = 0x00000052;
enum INDEX_DrvReserved7 = 0x00000053;
enum INDEX_DrvReserved8 = 0x00000054;
enum INDEX_DrvDeriveSurface = 0x00000055;
enum INDEX_DrvQueryGlyphAttrs = 0x00000056;
enum INDEX_DrvNotify = 0x00000057;
enum INDEX_DrvSynchronizeSurface = 0x00000058;
enum INDEX_DrvResetDevice = 0x00000059;
enum INDEX_DrvReserved9 = 0x0000005a;
enum INDEX_DrvReserved10 = 0x0000005b;
enum INDEX_DrvReserved11 = 0x0000005c;
enum INDEX_DrvRenderHint = 0x0000005d;
enum INDEX_DrvCreateDeviceBitmapEx = 0x0000005e;
enum INDEX_DrvDeleteDeviceBitmapEx = 0x0000005f;
enum INDEX_DrvAssociateSharedSurface = 0x00000060;
enum INDEX_DrvSynchronizeRedirectionBitmaps = 0x00000061;
enum INDEX_DrvAccumulateD3DDirtyRect = 0x00000062;
enum INDEX_DrvStartDxInterop = 0x00000063;
enum INDEX_DrvEndDxInterop = 0x00000064;
enum INDEX_DrvLockDisplayArea = 0x00000065;
enum INDEX_DrvUnlockDisplayArea = 0x00000066;
enum INDEX_DrvSurfaceComplete = 0x00000067;
enum INDEX_LAST = 0x00000059;
enum GCAPS_BEZIERS = 0x00000001;
enum GCAPS_GEOMETRICWIDE = 0x00000002;
enum GCAPS_ALTERNATEFILL = 0x00000004;
enum GCAPS_WINDINGFILL = 0x00000008;
enum GCAPS_HALFTONE = 0x00000010;
enum GCAPS_COLOR_DITHER = 0x00000020;
enum GCAPS_HORIZSTRIKE = 0x00000040;
enum GCAPS_VERTSTRIKE = 0x00000080;
enum GCAPS_OPAQUERECT = 0x00000100;
enum GCAPS_VECTORFONT = 0x00000200;
enum GCAPS_MONO_DITHER = 0x00000400;
enum GCAPS_ASYNCCHANGE = 0x00000800;
enum GCAPS_ASYNCMOVE = 0x00001000;
enum GCAPS_DONTJOURNAL = 0x00002000;
enum GCAPS_DIRECTDRAW = 0x00004000;
enum GCAPS_ARBRUSHOPAQUE = 0x00008000;
enum GCAPS_PANNING = 0x00010000;
enum GCAPS_HIGHRESTEXT = 0x00040000;
enum GCAPS_PALMANAGED = 0x00080000;
enum GCAPS_DITHERONREALIZE = 0x00200000;
enum GCAPS_NO64BITMEMACCESS = 0x00400000;
enum GCAPS_FORCEDITHER = 0x00800000;
enum GCAPS_GRAY16 = 0x01000000;
enum GCAPS_ICM = 0x02000000;
enum GCAPS_CMYKCOLOR = 0x04000000;
enum GCAPS_LAYERED = 0x08000000;
enum GCAPS_ARBRUSHTEXT = 0x10000000;
enum GCAPS_SCREENPRECISION = 0x20000000;
enum GCAPS_FONT_RASTERIZER = 0x40000000;
enum GCAPS_NUP = 0x80000000;
enum GCAPS2_JPEGSRC = 0x00000001;
enum GCAPS2_xxxx = 0x00000002;
enum GCAPS2_PNGSRC = 0x00000008;
enum GCAPS2_CHANGEGAMMARAMP = 0x00000010;
enum GCAPS2_ALPHACURSOR = 0x00000020;
enum GCAPS2_SYNCFLUSH = 0x00000040;
enum GCAPS2_SYNCTIMER = 0x00000080;
enum GCAPS2_ICD_MULTIMON = 0x00000100;
enum GCAPS2_MOUSETRAILS = 0x00000200;
enum GCAPS2_RESERVED1 = 0x00000400;
enum GCAPS2_REMOTEDRIVER = 0x00000400;
enum GCAPS2_EXCLUDELAYERED = 0x00000800;
enum GCAPS2_INCLUDEAPIBITMAPS = 0x00001000;
enum GCAPS2_SHOWHIDDENPOINTER = 0x00002000;
enum GCAPS2_CLEARTYPE = 0x00004000;
enum GCAPS2_ACC_DRIVER = 0x00008000;
enum GCAPS2_BITMAPEXREUSE = 0x00010000;
enum LA_GEOMETRIC = 0x00000001;
enum LA_ALTERNATE = 0x00000002;
enum LA_STARTGAP = 0x00000004;
enum LA_STYLED = 0x00000008;
enum JOIN_ROUND = 0x00000000;
enum JOIN_BEVEL = 0x00000001;
enum JOIN_MITER = 0x00000002;
enum ENDCAP_ROUND = 0x00000000;
enum ENDCAP_SQUARE = 0x00000001;
enum ENDCAP_BUTT = 0x00000002;
enum PRIMARY_ORDER_ABC = 0x00000000;
enum PRIMARY_ORDER_ACB = 0x00000001;
enum PRIMARY_ORDER_BAC = 0x00000002;
enum PRIMARY_ORDER_BCA = 0x00000003;
enum PRIMARY_ORDER_CBA = 0x00000004;
enum PRIMARY_ORDER_CAB = 0x00000005;
enum HT_PATSIZE_2x2 = 0x00000000;
enum HT_PATSIZE_2x2_M = 0x00000001;
enum HT_PATSIZE_4x4 = 0x00000002;
enum HT_PATSIZE_4x4_M = 0x00000003;
enum HT_PATSIZE_6x6 = 0x00000004;
enum HT_PATSIZE_6x6_M = 0x00000005;
enum HT_PATSIZE_8x8 = 0x00000006;
enum HT_PATSIZE_8x8_M = 0x00000007;
enum HT_PATSIZE_10x10 = 0x00000008;
enum HT_PATSIZE_10x10_M = 0x00000009;
enum HT_PATSIZE_12x12 = 0x0000000a;
enum HT_PATSIZE_12x12_M = 0x0000000b;
enum HT_PATSIZE_14x14 = 0x0000000c;
enum HT_PATSIZE_14x14_M = 0x0000000d;
enum HT_PATSIZE_16x16 = 0x0000000e;
enum HT_PATSIZE_16x16_M = 0x0000000f;
enum HT_PATSIZE_SUPERCELL = 0x00000010;
enum HT_PATSIZE_SUPERCELL_M = 0x00000011;
enum HT_PATSIZE_USER = 0x00000012;
enum HT_PATSIZE_MAX_INDEX = 0x00000012;
enum HT_PATSIZE_DEFAULT = 0x00000011;
enum HT_USERPAT_CX_MIN = 0x00000004;
enum HT_USERPAT_CX_MAX = 0x00000100;
enum HT_USERPAT_CY_MIN = 0x00000004;
enum HT_USERPAT_CY_MAX = 0x00000100;
enum HT_FORMAT_1BPP = 0x00000000;
enum HT_FORMAT_4BPP = 0x00000002;
enum HT_FORMAT_4BPP_IRGB = 0x00000003;
enum HT_FORMAT_8BPP = 0x00000004;
enum HT_FORMAT_16BPP = 0x00000005;
enum HT_FORMAT_24BPP = 0x00000006;
enum HT_FORMAT_32BPP = 0x00000007;
enum WINDDI_MAX_BROADCAST_CONTEXT = 0x00000040;
enum HT_FLAG_SQUARE_DEVICE_PEL = 0x00000001;
enum HT_FLAG_HAS_BLACK_DYE = 0x00000002;
enum HT_FLAG_ADDITIVE_PRIMS = 0x00000004;
enum HT_FLAG_USE_8BPP_BITMASK = 0x00000008;
enum HT_FLAG_INK_HIGH_ABSORPTION = 0x00000010;
enum HT_FLAG_INK_ABSORPTION_INDICES = 0x00000060;
enum HT_FLAG_DO_DEVCLR_XFORM = 0x00000080;
enum HT_FLAG_OUTPUT_CMY = 0x00000100;
enum HT_FLAG_PRINT_DRAFT_MODE = 0x00000200;
enum HT_FLAG_INVERT_8BPP_BITMASK_IDX = 0x00000400;
enum HT_FLAG_8BPP_CMY332_MASK = 0xff000000;
enum HT_FLAG_INK_ABSORPTION_IDX0 = 0x00000000;
enum HT_FLAG_INK_ABSORPTION_IDX1 = 0x00000020;
enum HT_FLAG_INK_ABSORPTION_IDX2 = 0x00000040;
enum HT_FLAG_INK_ABSORPTION_IDX3 = 0x00000060;
enum HT_FLAG_NORMAL_INK_ABSORPTION = 0x00000000;
enum HT_FLAG_LOW_INK_ABSORPTION = 0x00000020;
enum HT_FLAG_LOWER_INK_ABSORPTION = 0x00000040;
enum HT_FLAG_LOWEST_INK_ABSORPTION = 0x00000060;
enum PPC_DEFAULT = 0x00000000;
enum PPC_UNDEFINED = 0x00000001;
enum PPC_RGB_ORDER_VERTICAL_STRIPES = 0x00000002;
enum PPC_BGR_ORDER_VERTICAL_STRIPES = 0x00000003;
enum PPC_RGB_ORDER_HORIZONTAL_STRIPES = 0x00000004;
enum PPC_BGR_ORDER_HORIZONTAL_STRIPES = 0x00000005;
enum PPG_DEFAULT = 0x00000000;
enum PPG_SRGB = 0x00000001;
enum BR_DEVICE_ICM = 0x00000001;
enum BR_HOST_ICM = 0x00000002;
enum BR_CMYKCOLOR = 0x00000004;
enum BR_ORIGCOLOR = 0x00000008;
enum FO_SIM_BOLD = 0x00002000;
enum FO_SIM_ITALIC = 0x00004000;
enum FO_EM_HEIGHT = 0x00008000;
enum FO_GRAY16 = 0x00010000;
enum FO_NOGRAY16 = 0x00020000;
enum FO_NOHINTS = 0x00040000;
enum FO_NO_CHOICE = 0x00080000;
enum FO_CFF = 0x00100000;
enum FO_POSTSCRIPT = 0x00200000;
enum FO_MULTIPLEMASTER = 0x00400000;
enum FO_VERT_FACE = 0x00800000;
enum FO_DBCS_FONT = 0x01000000;
enum FO_NOCLEARTYPE = 0x02000000;
enum FO_CLEARTYPE_X = 0x10000000;
enum FO_CLEARTYPE_Y = 0x20000000;
enum FO_CLEARTYPENATURAL_X = 0x40000000;
enum DC_TRIVIAL = 0x00000000;
enum DC_RECT = 0x00000001;
enum DC_COMPLEX = 0x00000003;
enum FC_RECT = 0x00000001;
enum FC_RECT4 = 0x00000002;
enum FC_COMPLEX = 0x00000003;
enum TC_RECTANGLES = 0x00000000;
enum TC_PATHOBJ = 0x00000002;
enum OC_BANK_CLIP = 0x00000001;
enum CT_RECTANGLES = 0x00000000;
enum CD_RIGHTDOWN = 0x00000000;
enum CD_LEFTDOWN = 0x00000001;
enum CD_RIGHTUP = 0x00000002;
enum CD_LEFTUP = 0x00000003;
enum CD_ANY = 0x00000004;
enum CD_LEFTWARDS = 0x00000001;
enum CD_UPWARDS = 0x00000002;
enum FO_HGLYPHS = 0x00000000;
enum FO_GLYPHBITS = 0x00000001;
enum FO_PATHOBJ = 0x00000002;
enum FD_NEGATIVE_FONT = 0x00000001;
enum FO_DEVICE_FONT = 0x00000001;
enum FO_OUTLINE_CAPABLE = 0x00000002;
enum SO_FLAG_DEFAULT_PLACEMENT = 0x00000001;
enum SO_HORIZONTAL = 0x00000002;
enum SO_VERTICAL = 0x00000004;
enum SO_REVERSED = 0x00000008;
enum SO_ZERO_BEARINGS = 0x00000010;
enum SO_CHAR_INC_EQUAL_BM_BASE = 0x00000020;
enum SO_MAXEXT_EQUAL_BM_SIDE = 0x00000040;
enum SO_DO_NOT_SUBSTITUTE_DEVICE_FONT = 0x00000080;
enum SO_GLYPHINDEX_TEXTOUT = 0x00000100;
enum SO_ESC_NOT_ORIENT = 0x00000200;
enum SO_DXDY = 0x00000400;
enum SO_CHARACTER_EXTRA = 0x00000800;
enum SO_BREAK_EXTRA = 0x00001000;
enum FO_ATTR_MODE_ROTATE = 0x00000001;
enum PAL_INDEXED = 0x00000001;
enum PAL_BITFIELDS = 0x00000002;
enum PAL_RGB = 0x00000004;
enum PAL_BGR = 0x00000008;
enum PAL_CMYK = 0x00000010;
enum PO_BEZIERS = 0x00000001;
enum PO_ELLIPSE = 0x00000002;
enum PO_ALL_INTEGERS = 0x00000004;
enum PO_ENUM_AS_INTEGERS = 0x00000008;
enum PO_WIDENED = 0x00000010;
enum PD_BEGINSUBPATH = 0x00000001;
enum PD_ENDSUBPATH = 0x00000002;
enum PD_RESETSTYLE = 0x00000004;
enum PD_CLOSEFIGURE = 0x00000008;
enum PD_BEZIERS = 0x00000010;
enum SGI_EXTRASPACE = 0x00000000;
enum STYPE_BITMAP = 0x00000000;
enum STYPE_DEVBITMAP = 0x00000003;
enum BMF_1BPP = 0x00000001;
enum BMF_4BPP = 0x00000002;
enum BMF_8BPP = 0x00000003;
enum BMF_16BPP = 0x00000004;
enum BMF_24BPP = 0x00000005;
enum BMF_32BPP = 0x00000006;
enum BMF_4RLE = 0x00000007;
enum BMF_8RLE = 0x00000008;
enum BMF_JPEG = 0x00000009;
enum BMF_PNG = 0x0000000a;
enum BMF_TOPDOWN = 0x00000001;
enum BMF_NOZEROINIT = 0x00000002;
enum BMF_DONTCACHE = 0x00000004;
enum BMF_USERMEM = 0x00000008;
enum BMF_KMSECTION = 0x00000010;
enum BMF_NOTSYSMEM = 0x00000020;
enum BMF_WINDOW_BLT = 0x00000040;
enum BMF_UMPDMEM = 0x00000080;
enum BMF_TEMP_ALPHA = 0x00000100;
enum BMF_ACC_NOTIFY = 0x00008000;
enum BMF_RMT_ENTER = 0x00004000;
enum BMF_RESERVED = 0x00003e00;
enum GX_IDENTITY = 0x00000000;
enum GX_OFFSET = 0x00000001;
enum GX_SCALE = 0x00000002;
enum GX_GENERAL = 0x00000003;
enum XF_LTOL = 0x00000000;
enum XF_INV_LTOL = 0x00000001;
enum XF_LTOFX = 0x00000002;
enum XF_INV_FXTOL = 0x00000003;
enum XO_TRIVIAL = 0x00000001;
enum XO_TABLE = 0x00000002;
enum XO_TO_MONO = 0x00000004;
enum XO_FROM_CMYK = 0x00000008;
enum XO_DEVICE_ICM = 0x00000010;
enum XO_HOST_ICM = 0x00000020;
enum XO_SRCPALETTE = 0x00000001;
enum XO_DESTPALETTE = 0x00000002;
enum XO_DESTDCPALETTE = 0x00000003;
enum XO_SRCBITFIELDS = 0x00000004;
enum XO_DESTBITFIELDS = 0x00000005;
enum HOOK_BITBLT = 0x00000001;
enum HOOK_STRETCHBLT = 0x00000002;
enum HOOK_PLGBLT = 0x00000004;
enum HOOK_TEXTOUT = 0x00000008;
enum HOOK_PAINT = 0x00000010;
enum HOOK_STROKEPATH = 0x00000020;
enum HOOK_FILLPATH = 0x00000040;
enum HOOK_STROKEANDFILLPATH = 0x00000080;
enum HOOK_LINETO = 0x00000100;
enum HOOK_COPYBITS = 0x00000400;
enum HOOK_MOVEPANNING = 0x00000800;
enum HOOK_SYNCHRONIZE = 0x00001000;
enum HOOK_STRETCHBLTROP = 0x00002000;
enum HOOK_SYNCHRONIZEACCESS = 0x00004000;
enum HOOK_TRANSPARENTBLT = 0x00008000;
enum HOOK_ALPHABLEND = 0x00010000;
enum HOOK_GRADIENTFILL = 0x00020000;
enum HOOK_FLAGS = 0x0003b5ff;
enum MS_NOTSYSTEMMEMORY = 0x00000001;
enum MS_SHAREDACCESS = 0x00000002;
enum MS_CDDDEVICEBITMAP = 0x00000004;
enum MS_REUSEDDEVICEBITMAP = 0x00000008;
enum DRVQUERY_USERMODE = 0x00000001;
enum HS_DDI_MAX = 0x00000006;
enum DRD_SUCCESS = 0x00000000;
enum DRD_ERROR = 0x00000001;
enum SS_SAVE = 0x00000000;
enum SS_RESTORE = 0x00000001;
enum SS_FREE = 0x00000002;
enum CDBEX_REDIRECTION = 0x00000001;
enum CDBEX_DXINTEROP = 0x00000002;
enum CDBEX_NTSHAREDSURFACEHANDLE = 0x00000004;
enum CDBEX_CROSSADAPTER = 0x00000008;
enum CDBEX_REUSE = 0x00000010;
enum WINDDI_MAXSETPALETTECOLORS = 0x00000100;
enum WINDDI_MAXSETPALETTECOLORINDEX = 0x000000ff;
enum DM_DEFAULT = 0x00000001;
enum DM_MONOCHROME = 0x00000002;
enum DCR_SOLID = 0x00000000;
enum DCR_DRIVER = 0x00000001;
enum DCR_HALFTONE = 0x00000002;
enum RB_DITHERCOLOR = 0xffffffff80000000;
enum QFT_LIGATURES = 0x00000001;
enum QFT_KERNPAIRS = 0x00000002;
enum QFT_GLYPHSET = 0x00000003;
enum QFD_GLYPHANDBITMAP = 0x00000001;
enum QFD_GLYPHANDOUTLINE = 0x00000002;
enum QFD_MAXEXTENTS = 0x00000003;
enum QFD_TT_GLYPHANDBITMAP = 0x00000004;
enum QFD_TT_GRAY1_BITMAP = 0x00000005;
enum QFD_TT_GRAY2_BITMAP = 0x00000006;
enum QFD_TT_GRAY4_BITMAP = 0x00000008;
enum QFD_TT_GRAY8_BITMAP = 0x00000009;
enum QFD_TT_MONO_BITMAP = 0x00000005;
enum QC_OUTLINES = 0x00000001;
enum QC_1BIT = 0x00000002;
enum QC_4BIT = 0x00000004;
enum FF_SIGNATURE_VERIFIED = 0x00000001;
enum FF_IGNORED_SIGNATURE = 0x00000002;
enum QAW_GETWIDTHS = 0x00000000;
enum QAW_GETEASYWIDTHS = 0x00000001;
enum TTO_METRICS_ONLY = 0x00000001;
enum TTO_QUBICS = 0x00000002;
enum TTO_UNHINTED = 0x00000004;
enum QFF_DESCRIPTION = 0x00000001;
enum QFF_NUMFACES = 0x00000002;
enum FP_ALTERNATEMODE = 0x00000001;
enum FP_WINDINGMODE = 0x00000002;
enum SPS_ERROR = 0x00000000;
enum SPS_DECLINE = 0x00000001;
enum SPS_ACCEPT_NOEXCLUDE = 0x00000002;
enum SPS_ACCEPT_EXCLUDE = 0x00000003;
enum SPS_ACCEPT_SYNCHRONOUS = 0x00000004;
enum SPS_CHANGE = 0x00000001;
enum SPS_ASYNCCHANGE = 0x00000002;
enum SPS_ANIMATESTART = 0x00000004;
enum SPS_ANIMATEUPDATE = 0x00000008;
enum SPS_ALPHA = 0x00000010;
enum SPS_RESERVED = 0x00000020;
enum SPS_RESERVED1 = 0x00000040;
enum SPS_FLAGSMASK = 0x000000ff;
enum SPS_LENGTHMASK = 0x00000f00;
enum SPS_FREQMASK = 0x000ff000;
enum ED_ABORTDOC = 0x00000001;
enum IGRF_RGB_256BYTES = 0x00000000;
enum IGRF_RGB_256WORDS = 0x00000001;
enum QDS_CHECKJPEGFORMAT = 0x00000000;
enum QDS_CHECKPNGFORMAT = 0x00000001;
enum DSS_TIMER_EVENT = 0x00000001;
enum DSS_FLUSH_EVENT = 0x00000002;
enum DSS_RESERVED = 0x00000004;
enum DSS_RESERVED1 = 0x00000008;
enum DSS_RESERVED2 = 0x00000010;
enum DN_ACCELERATION_LEVEL = 0x00000001;
enum DN_DEVICE_ORIGIN = 0x00000002;
enum DN_SLEEP_MODE = 0x00000003;
enum DN_DRAWING_BEGIN = 0x00000004;
enum DN_ASSOCIATE_WINDOW = 0x00000005;
enum DN_COMPOSITION_CHANGED = 0x00000006;
enum DN_DRAWING_BEGIN_APIBITMAP = 0x00000007;
enum DN_SURFOBJ_DESTRUCTION = 0x00000008;
enum WOC_RGN_CLIENT_DELTA = 0x00000001;
enum WOC_RGN_CLIENT = 0x00000002;
enum WOC_RGN_SURFACE_DELTA = 0x00000004;
enum WOC_RGN_SURFACE = 0x00000008;
enum WOC_CHANGED = 0x00000010;
enum WOC_DELETE = 0x00000020;
enum WOC_DRAWN = 0x00000040;
enum WOC_SPRITE_OVERLAP = 0x00000080;
enum WOC_SPRITE_NO_OVERLAP = 0x00000100;
enum WOC_RGN_SPRITE = 0x00000200;
enum WO_RGN_CLIENT_DELTA = 0x00000001;
enum WO_RGN_CLIENT = 0x00000002;
enum WO_RGN_SURFACE_DELTA = 0x00000004;
enum WO_RGN_SURFACE = 0x00000008;
enum WO_RGN_UPDATE_ALL = 0x00000010;
enum WO_RGN_WINDOW = 0x00000020;
enum WO_DRAW_NOTIFY = 0x00000040;
enum WO_SPRITE_NOTIFY = 0x00000080;
enum WO_RGN_DESKTOP_COORD = 0x00000100;
enum WO_RGN_SPRITE = 0x00000200;
enum EHN_RESTORED = 0x00000000;
enum EHN_ERROR = 0x00000001;
enum ECS_TEARDOWN = 0x00000001;
enum ECS_REDRAW = 0x00000002;
enum DEVHTADJF_COLOR_DEVICE = 0x00000001;
enum DEVHTADJF_ADDITIVE_DEVICE = 0x00000002;
enum FL_ZERO_MEMORY = 0x00000001;
enum FL_NONPAGED_MEMORY = 0x00000002;
enum FL_NON_SESSION = 0x00000004;
enum QSA_MMX = 0x00000100;
enum QSA_SSE = 0x00002000;
enum QSA_3DNOW = 0x00004000;
enum QSA_SSE1 = 0x00002000;
enum QSA_SSE2 = 0x00010000;
enum QSA_SSE3 = 0x00080000;
enum ENG_FNT_CACHE_READ_FAULT = 0x00000001;
enum ENG_FNT_CACHE_WRITE_FAULT = 0x00000002;
enum DRH_APIBITMAP = 0x00000001;
enum MC_CAPS_NONE = 0x00000000;
enum MC_CAPS_MONITOR_TECHNOLOGY_TYPE = 0x00000001;
enum MC_CAPS_BRIGHTNESS = 0x00000002;
enum MC_CAPS_CONTRAST = 0x00000004;
enum MC_CAPS_COLOR_TEMPERATURE = 0x00000008;
enum MC_CAPS_RED_GREEN_BLUE_GAIN = 0x00000010;
enum MC_CAPS_RED_GREEN_BLUE_DRIVE = 0x00000020;
enum MC_CAPS_DEGAUSS = 0x00000040;
enum MC_CAPS_DISPLAY_AREA_POSITION = 0x00000080;
enum MC_CAPS_DISPLAY_AREA_SIZE = 0x00000100;
enum MC_CAPS_RESTORE_FACTORY_DEFAULTS = 0x00000400;
enum MC_CAPS_RESTORE_FACTORY_COLOR_DEFAULTS = 0x00000800;
enum MC_RESTORE_FACTORY_DEFAULTS_ENABLES_MONITOR_SETTINGS = 0x00001000;
enum MC_SUPPORTED_COLOR_TEMPERATURE_NONE = 0x00000000;
enum MC_SUPPORTED_COLOR_TEMPERATURE_4000K = 0x00000001;
enum MC_SUPPORTED_COLOR_TEMPERATURE_5000K = 0x00000002;
enum MC_SUPPORTED_COLOR_TEMPERATURE_6500K = 0x00000004;
enum MC_SUPPORTED_COLOR_TEMPERATURE_7500K = 0x00000008;
enum MC_SUPPORTED_COLOR_TEMPERATURE_8200K = 0x00000010;
enum MC_SUPPORTED_COLOR_TEMPERATURE_9300K = 0x00000020;
enum MC_SUPPORTED_COLOR_TEMPERATURE_10000K = 0x00000040;
enum MC_SUPPORTED_COLOR_TEMPERATURE_11500K = 0x00000080;
enum PHYSICAL_MONITOR_DESCRIPTION_SIZE = 0x00000080;
enum GETCONNECTEDIDS_TARGET = 0x00000000;
enum GETCONNECTEDIDS_SOURCE = 0x00000001;
enum S_INIT = 0x00000002;
enum SETCONFIGURATION_STATUS_APPLIED = 0x00000000;
enum SETCONFIGURATION_STATUS_ADDITIONAL = 0x00000001;
enum SETCONFIGURATION_STATUS_OVERRIDDEN = 0x00000002;
alias HSEMAPHORE = void*;
alias HSURF = void*;
alias HFASTMUTEX = void*;
alias HDRVOBJ = void*;
alias HDEV = void*;
alias HBM = void*;
alias DHSURF = long;
alias DHPDEV = long;
struct DISPLAYCONFIG_RATIONAL
{
    uint Numerator;
    uint Denominator;
}
alias DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = int;
enum : int
{
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER                  = 0xffffffff,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15                   = 0x00000000,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO                 = 0x00000001,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO        = 0x00000002,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO        = 0x00000003,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI                    = 0x00000004,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI                   = 0x00000005,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS                   = 0x00000006,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN                  = 0x00000008,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI                    = 0x00000009,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL   = 0x0000000a,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED   = 0x0000000b,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL           = 0x0000000c,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED           = 0x0000000d,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE             = 0x0000000e,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST               = 0x0000000f,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED         = 0x00000010,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL       = 0x00000011,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_USB_TUNNEL = 0x00000012,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL               = 0x80000000,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32           = 0xffffffff,
}

alias DISPLAYCONFIG_SCANLINE_ORDERING = int;
enum : int
{
    DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED                = 0x00000000,
    DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE                = 0x00000001,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED                 = 0x00000002,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 0x00000002,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 0x00000003,
    DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32               = 0xffffffff,
}

struct DISPLAYCONFIG_2DREGION
{
    uint cx;
    uint cy;
}
struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO
{
    ulong pixelRate;
    DISPLAYCONFIG_RATIONAL hSyncFreq;
    DISPLAYCONFIG_RATIONAL vSyncFreq;
    DISPLAYCONFIG_2DREGION activeSize;
    DISPLAYCONFIG_2DREGION totalSize;
    union
    {
        struct _AdditionalSignalInfo_e__Struct
        {
            uint _bitfield0;
        }
        uint videoStandard;
    }
    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
}
alias DISPLAYCONFIG_SCALING = int;
enum : int
{
    DISPLAYCONFIG_SCALING_IDENTITY               = 0x00000001,
    DISPLAYCONFIG_SCALING_CENTERED               = 0x00000002,
    DISPLAYCONFIG_SCALING_STRETCHED              = 0x00000003,
    DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 0x00000004,
    DISPLAYCONFIG_SCALING_CUSTOM                 = 0x00000005,
    DISPLAYCONFIG_SCALING_PREFERRED              = 0x00000080,
    DISPLAYCONFIG_SCALING_FORCE_UINT32           = 0xffffffff,
}

alias DISPLAYCONFIG_ROTATION = int;
enum : int
{
    DISPLAYCONFIG_ROTATION_IDENTITY     = 0x00000001,
    DISPLAYCONFIG_ROTATION_ROTATE90     = 0x00000002,
    DISPLAYCONFIG_ROTATION_ROTATE180    = 0x00000003,
    DISPLAYCONFIG_ROTATION_ROTATE270    = 0x00000004,
    DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xffffffff,
}

alias DISPLAYCONFIG_MODE_INFO_TYPE = int;
enum : int
{
    DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE        = 0x00000001,
    DISPLAYCONFIG_MODE_INFO_TYPE_TARGET        = 0x00000002,
    DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 0x00000003,
    DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32  = 0xffffffff,
}

alias DISPLAYCONFIG_PIXELFORMAT = int;
enum : int
{
    DISPLAYCONFIG_PIXELFORMAT_8BPP         = 0x00000001,
    DISPLAYCONFIG_PIXELFORMAT_16BPP        = 0x00000002,
    DISPLAYCONFIG_PIXELFORMAT_24BPP        = 0x00000003,
    DISPLAYCONFIG_PIXELFORMAT_32BPP        = 0x00000004,
    DISPLAYCONFIG_PIXELFORMAT_NONGDI       = 0x00000005,
    DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = 0xffffffff,
}

struct DISPLAYCONFIG_SOURCE_MODE
{
    uint width;
    uint height;
    DISPLAYCONFIG_PIXELFORMAT pixelFormat;
    POINTL position;
}
struct DISPLAYCONFIG_TARGET_MODE
{
    DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
}
struct DISPLAYCONFIG_DESKTOP_IMAGE_INFO
{
    POINTL PathSourceSize;
    RECTL DesktopImageRegion;
    RECTL DesktopImageClip;
}
struct DISPLAYCONFIG_MODE_INFO
{
    DISPLAYCONFIG_MODE_INFO_TYPE infoType;
    uint id;
    LUID adapterId;
    union
    {
        DISPLAYCONFIG_TARGET_MODE targetMode;
        DISPLAYCONFIG_SOURCE_MODE sourceMode;
        DISPLAYCONFIG_DESKTOP_IMAGE_INFO desktopImageInfo;
    }
}
struct DISPLAYCONFIG_PATH_SOURCE_INFO
{
    LUID adapterId;
    uint id;
    union
    {
        uint modeInfoIdx;
        struct
        {
            uint _bitfield0;
        }
    }
    uint statusFlags;
}
struct DISPLAYCONFIG_PATH_TARGET_INFO
{
    LUID adapterId;
    uint id;
    union
    {
        uint modeInfoIdx;
        struct
        {
            uint _bitfield0;
        }
    }
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    DISPLAYCONFIG_ROTATION rotation;
    DISPLAYCONFIG_SCALING scaling;
    DISPLAYCONFIG_RATIONAL refreshRate;
    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
    BOOL targetAvailable;
    uint statusFlags;
}
struct DISPLAYCONFIG_PATH_INFO
{
    DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;
    DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;
    uint flags;
}
alias DISPLAYCONFIG_TOPOLOGY_ID = int;
enum : int
{
    DISPLAYCONFIG_TOPOLOGY_INTERNAL     = 0x00000001,
    DISPLAYCONFIG_TOPOLOGY_CLONE        = 0x00000002,
    DISPLAYCONFIG_TOPOLOGY_EXTEND       = 0x00000004,
    DISPLAYCONFIG_TOPOLOGY_EXTERNAL     = 0x00000008,
    DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = 0xffffffff,
}

alias DISPLAYCONFIG_DEVICE_INFO_TYPE = int;
enum : int
{
    DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME                = 0x00000001,
    DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME                = 0x00000002,
    DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE      = 0x00000003,
    DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME               = 0x00000004,
    DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE         = 0x00000005,
    DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE           = 0x00000006,
    DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = 0x00000007,
    DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = 0x00000008,
    DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO        = 0x00000009,
    DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE       = 0x0000000a,
    DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL            = 0x0000000b,
    DISPLAYCONFIG_DEVICE_INFO_GET_MONITOR_SPECIALIZATION     = 0x0000000c,
    DISPLAYCONFIG_DEVICE_INFO_SET_MONITOR_SPECIALIZATION     = 0x0000000d,
    DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32                   = 0xffffffff,
}

struct DISPLAYCONFIG_DEVICE_INFO_HEADER
{
    DISPLAYCONFIG_DEVICE_INFO_TYPE type;
    uint size;
    LUID adapterId;
    uint id;
}
struct DISPLAYCONFIG_SOURCE_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    wchar[32] viewGdiDeviceName;
}
struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
{
    union
    {
        struct
        {
            uint _bitfield0;
        }
        uint value;
    }
}
struct DISPLAYCONFIG_TARGET_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    ushort edidManufactureId;
    ushort edidProductCodeId;
    uint connectorInstance;
    wchar[64] monitorFriendlyDeviceName;
    wchar[128] monitorDevicePath;
}
struct DISPLAYCONFIG_TARGET_PREFERRED_MODE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    uint width;
    uint height;
    DISPLAYCONFIG_TARGET_MODE targetMode;
}
struct DISPLAYCONFIG_ADAPTER_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    wchar[128] adapterDevicePath;
}
struct DISPLAYCONFIG_TARGET_BASE_TYPE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY baseOutputTechnology;
}
struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union
    {
        struct
        {
            uint _bitfield0;
        }
        uint value;
    }
}
struct DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union
    {
        struct
        {
            uint _bitfield0;
        }
        uint value;
    }
}
struct DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union
    {
        struct
        {
            uint _bitfield0;
        }
        uint value;
    }
    DISPLAYCONFIG_COLOR_ENCODING colorEncoding;
    uint bitsPerColorChannel;
}
struct DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union
    {
        struct
        {
            uint _bitfield0;
        }
        uint value;
    }
}
struct DISPLAYCONFIG_SDR_WHITE_LEVEL
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    uint SDRWhiteLevel;
}
struct DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union
    {
        struct
        {
            uint _bitfield0;
        }
        uint value;
    }
}
struct DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union
    {
        struct
        {
            uint _bitfield0;
        }
        uint value;
    }
    GUID specializationType;
    GUID specializationSubType;
    wchar[128] specializationApplicationName;
}
struct PHYSICAL_MONITOR
{
    align (1):
    HANDLE hPhysicalMonitor;
    wchar[128] szPhysicalMonitorDescription;
}
struct MC_TIMING_REPORT
{
    align (1):
    uint dwHorizontalFrequencyInHZ;
    uint dwVerticalFrequencyInHZ;
    ubyte bTimingStatusByte;
}
alias MC_VCP_CODE_TYPE = int;
enum : int
{
    MC_MOMENTARY     = 0x00000000,
    MC_SET_PARAMETER = 0x00000001,
}

alias MC_DISPLAY_TECHNOLOGY_TYPE = int;
enum : int
{
    MC_SHADOW_MASK_CATHODE_RAY_TUBE    = 0x00000000,
    MC_APERTURE_GRILL_CATHODE_RAY_TUBE = 0x00000001,
    MC_THIN_FILM_TRANSISTOR            = 0x00000002,
    MC_LIQUID_CRYSTAL_ON_SILICON       = 0x00000003,
    MC_PLASMA                          = 0x00000004,
    MC_ORGANIC_LIGHT_EMITTING_DIODE    = 0x00000005,
    MC_ELECTROLUMINESCENT              = 0x00000006,
    MC_MICROELECTROMECHANICAL          = 0x00000007,
    MC_FIELD_EMISSION_DEVICE           = 0x00000008,
}

alias MC_DRIVE_TYPE = int;
enum : int
{
    MC_RED_DRIVE   = 0x00000000,
    MC_GREEN_DRIVE = 0x00000001,
    MC_BLUE_DRIVE  = 0x00000002,
}

alias MC_GAIN_TYPE = int;
enum : int
{
    MC_RED_GAIN   = 0x00000000,
    MC_GREEN_GAIN = 0x00000001,
    MC_BLUE_GAIN  = 0x00000002,
}

alias MC_POSITION_TYPE = int;
enum : int
{
    MC_HORIZONTAL_POSITION = 0x00000000,
    MC_VERTICAL_POSITION   = 0x00000001,
}

alias MC_SIZE_TYPE = int;
enum : int
{
    MC_WIDTH  = 0x00000000,
    MC_HEIGHT = 0x00000001,
}

alias MC_COLOR_TEMPERATURE = int;
enum : int
{
    MC_COLOR_TEMPERATURE_UNKNOWN = 0x00000000,
    MC_COLOR_TEMPERATURE_4000K   = 0x00000001,
    MC_COLOR_TEMPERATURE_5000K   = 0x00000002,
    MC_COLOR_TEMPERATURE_6500K   = 0x00000003,
    MC_COLOR_TEMPERATURE_7500K   = 0x00000004,
    MC_COLOR_TEMPERATURE_8200K   = 0x00000005,
    MC_COLOR_TEMPERATURE_9300K   = 0x00000006,
    MC_COLOR_TEMPERATURE_10000K  = 0x00000007,
    MC_COLOR_TEMPERATURE_11500K  = 0x00000008,
}

struct Sources
{
    uint sourceId;
    int numTargets;
    uint[1] aTargets;
}
struct Adapter
{
    wchar[128] AdapterName;
    int numSources;
    Sources[1] sources;
}
struct Adapters
{
    int numAdapters;
    Adapter[1] adapter;
}
struct DisplayMode
{
    wchar[32] DeviceName;
    DEVMODEW devMode;
}
struct DisplayModes
{
    int numDisplayModes;
    DisplayMode[1] displayMode;
}
enum IID_ICloneViewHelper = GUID(0xf6a3d4c4, 0x5632, 0x4d83, [0xb0, 0xa1, 0xfb, 0x88, 0x71, 0x2b, 0x1e, 0xb7]);
interface ICloneViewHelper : IUnknown
{
    HRESULT GetConnectedIDs(const(wchar)*, uint*, uint*, uint);
    HRESULT GetActiveTopology(const(wchar)*, uint, uint*, uint*);
    HRESULT SetActiveTopology(const(wchar)*, uint, uint, uint*);
    HRESULT Commit(BOOL);
}
enum IID_IViewHelper = GUID(0xe85ccef5, 0xaaaa, 0x47f0, [0xb5, 0xe3, 0x61, 0xf7, 0xae, 0xcd, 0xc4, 0xc1]);
interface IViewHelper : IUnknown
{
    HRESULT GetConnectedIDs(const(wchar)*, uint*, uint*, uint);
    HRESULT GetActiveTopology(const(wchar)*, uint, uint*, uint*);
    HRESULT SetActiveTopology(const(wchar)*, uint, uint, uint*);
    HRESULT Commit();
    HRESULT SetConfiguration(IStream, uint*);
    HRESULT GetProceedOnNewConfiguration();
}
struct VIDEOPARAMETERS
{
    GUID Guid;
    uint dwOffset;
    uint dwCommand;
    uint dwFlags;
    uint dwMode;
    uint dwTVStandard;
    uint dwAvailableModes;
    uint dwAvailableTVStandard;
    uint dwFlickerFilter;
    uint dwOverScanX;
    uint dwOverScanY;
    uint dwMaxUnscaledX;
    uint dwMaxUnscaledY;
    uint dwPositionX;
    uint dwPositionY;
    uint dwBrightness;
    uint dwContrast;
    uint dwCPType;
    uint dwCPCommand;
    uint dwCPStandard;
    uint dwCPKey;
    uint bCP_APSTriggerBits;
    ubyte[256] bOEMCopyProtection;
}
struct POINTE
{
    float x;
    float y;
}
union FLOAT_LONG
{
    float e;
    int l;
}
struct POINTFIX
{
    int x;
    int y;
}
struct RECTFX
{
    int xLeft;
    int yTop;
    int xRight;
    int yBottom;
}
struct FD_XFORM
{
    float eXX;
    float eXY;
    float eYX;
    float eYY;
}
struct FD_DEVICEMETRICS
{
    uint flRealizedType;
    POINTE pteBase;
    POINTE pteSide;
    int lD;
    int fxMaxAscender;
    int fxMaxDescender;
    POINTL ptlUnderline1;
    POINTL ptlStrikeOut;
    POINTL ptlULThickness;
    POINTL ptlSOThickness;
    uint cxMax;
    uint cyMax;
    uint cjGlyphMax;
    FD_XFORM fdxQuantized;
    int lNonLinearExtLeading;
    int lNonLinearIntLeading;
    int lNonLinearMaxCharWidth;
    int lNonLinearAvgCharWidth;
    int lMinA;
    int lMinC;
    int lMinD;
    int[1] alReserved;
}
struct LIGATURE
{
    uint culSize;
    PWSTR pwsz;
    uint chglyph;
    uint[1] ahglyph;
}
struct FD_LIGATURE
{
    uint culThis;
    uint ulType;
    uint cLigatures;
    LIGATURE[1] alig;
}
struct POINTQF
{
    LARGE_INTEGER x;
    LARGE_INTEGER y;
}
struct WCRUN
{
    wchar wcLow;
    ushort cGlyphs;
    uint* phg;
}
struct FD_GLYPHSET
{
    uint cjThis;
    uint flAccel;
    uint cGlyphsSupported;
    uint cRuns;
    WCRUN[1] awcrun;
}
struct FD_GLYPHATTR
{
    uint cjThis;
    uint cGlyphs;
    uint iMode;
    ubyte[1] aGlyphAttr;
}
struct FD_KERNINGPAIR
{
    wchar wcFirst;
    wchar wcSecond;
    short fwdKern;
}
struct FONTDIFF
{
    ubyte jReserved1;
    ubyte jReserved2;
    ubyte jReserved3;
    ubyte bWeight;
    ushort usWinWeight;
    ushort fsSelection;
    short fwdAveCharWidth;
    short fwdMaxCharInc;
    POINTL ptlCaret;
}
struct FONTSIM
{
    int dpBold;
    int dpItalic;
    int dpBoldItalic;
}
struct IFIMETRICS
{
    uint cjThis;
    uint cjIfiExtra;
    int dpwszFamilyName;
    int dpwszStyleName;
    int dpwszFaceName;
    int dpwszUniqueName;
    int dpFontSim;
    int lEmbedId;
    int lItalicAngle;
    int lCharBias;
    int dpCharSets;
    ubyte jWinCharSet;
    ubyte jWinPitchAndFamily;
    ushort usWinWeight;
    uint flInfo;
    ushort fsSelection;
    ushort fsType;
    short fwdUnitsPerEm;
    short fwdLowestPPEm;
    short fwdWinAscender;
    short fwdWinDescender;
    short fwdMacAscender;
    short fwdMacDescender;
    short fwdMacLineGap;
    short fwdTypoAscender;
    short fwdTypoDescender;
    short fwdTypoLineGap;
    short fwdAveCharWidth;
    short fwdMaxCharInc;
    short fwdCapHeight;
    short fwdXHeight;
    short fwdSubscriptXSize;
    short fwdSubscriptYSize;
    short fwdSubscriptXOffset;
    short fwdSubscriptYOffset;
    short fwdSuperscriptXSize;
    short fwdSuperscriptYSize;
    short fwdSuperscriptXOffset;
    short fwdSuperscriptYOffset;
    short fwdUnderscoreSize;
    short fwdUnderscorePosition;
    short fwdStrikeoutSize;
    short fwdStrikeoutPosition;
    ubyte chFirstChar;
    ubyte chLastChar;
    ubyte chDefaultChar;
    ubyte chBreakChar;
    wchar wcFirstChar;
    wchar wcLastChar;
    wchar wcDefaultChar;
    wchar wcBreakChar;
    POINTL ptlBaseline;
    POINTL ptlAspect;
    POINTL ptlCaret;
    RECTL rclFontBox;
    ubyte[4] achVendId;
    uint cKerningPairs;
    uint ulPanoseCulture;
    PANOSE panose;
    void* Align;
}
struct IFIEXTRA
{
    uint ulIdentifier;
    int dpFontSig;
    uint cig;
    int dpDesignVector;
    int dpAxesInfoW;
    uint[1] aulReserved;
}
alias PFN = long function();
struct DRVFN
{
    uint iFunc;
    PFN pfn;
}
struct DRVENABLEDATA
{
    uint iDriverVersion;
    uint c;
    DRVFN* pdrvfn;
}
struct DEVINFO
{
    uint flGraphicsCaps;
    LOGFONTW lfDefaultFont;
    LOGFONTW lfAnsiVarFont;
    LOGFONTW lfAnsiFixFont;
    uint cFonts;
    uint iDitherFormat;
    ushort cxDither;
    ushort cyDither;
    HPALETTE hpalDefault;
    uint flGraphicsCaps2;
}
struct LINEATTRS
{
    uint fl;
    uint iJoin;
    uint iEndCap;
    FLOAT_LONG elWidth;
    float eMiterLimit;
    uint cstyle;
    FLOAT_LONG* pstyle;
    FLOAT_LONG elStyleState;
}
struct XFORML
{
    float eM11;
    float eM12;
    float eM21;
    float eM22;
    float eDx;
    float eDy;
}
struct CIECHROMA
{
    int x;
    int y;
    int Y;
}
struct COLORINFO
{
    CIECHROMA Red;
    CIECHROMA Green;
    CIECHROMA Blue;
    CIECHROMA Cyan;
    CIECHROMA Magenta;
    CIECHROMA Yellow;
    CIECHROMA AlignmentWhite;
    int RedGamma;
    int GreenGamma;
    int BlueGamma;
    int MagentaInCyanDye;
    int YellowInCyanDye;
    int CyanInMagentaDye;
    int YellowInMagentaDye;
    int CyanInYellowDye;
    int MagentaInYellowDye;
}
struct CDDDXGK_REDIRBITMAPPRESENTINFO
{
    uint NumDirtyRects;
    RECT* DirtyRect;
    uint NumContexts;
    HANDLE[65] hContext;
    BOOLEAN bDoNotSynchronizeWithDxContent;
}
struct GDIINFO
{
    uint ulVersion;
    uint ulTechnology;
    uint ulHorzSize;
    uint ulVertSize;
    uint ulHorzRes;
    uint ulVertRes;
    uint cBitsPixel;
    uint cPlanes;
    uint ulNumColors;
    uint flRaster;
    uint ulLogPixelsX;
    uint ulLogPixelsY;
    uint flTextCaps;
    uint ulDACRed;
    uint ulDACGreen;
    uint ulDACBlue;
    uint ulAspectX;
    uint ulAspectY;
    uint ulAspectXY;
    int xStyleStep;
    int yStyleStep;
    int denStyleStep;
    POINTL ptlPhysOffset;
    SIZE szlPhysSize;
    uint ulNumPalReg;
    COLORINFO ciDevice;
    uint ulDevicePelsDPI;
    uint ulPrimaryOrder;
    uint ulHTPatternSize;
    uint ulHTOutputFormat;
    uint flHTFlags;
    uint ulVRefresh;
    uint ulBltAlignment;
    uint ulPanningHorzRes;
    uint ulPanningVertRes;
    uint xPanningAlignment;
    uint yPanningAlignment;
    uint cxHTPat;
    uint cyHTPat;
    ubyte* pHTPatA;
    ubyte* pHTPatB;
    ubyte* pHTPatC;
    uint flShadeBlend;
    uint ulPhysicalPixelCharacteristics;
    uint ulPhysicalPixelGamma;
}
struct BRUSHOBJ
{
    uint iSolidColor;
    void* pvRbrush;
    uint flColorType;
}
struct CLIPOBJ
{
    uint iUniq;
    RECTL rclBounds;
    ubyte iDComplexity;
    ubyte iFComplexity;
    ubyte iMode;
    ubyte fjOptions;
}
alias FREEOBJPROC = BOOL function(DRIVEROBJ*);
struct DRIVEROBJ
{
    void* pvObj;
    FREEOBJPROC pFreeProc;
    HDEV hdev;
    DHPDEV dhpdev;
}
struct FONTOBJ
{
    uint iUniq;
    uint iFace;
    uint cxMax;
    uint flFontType;
    ulong iTTUniq;
    ulong iFile;
    SIZE sizLogResPpi;
    uint ulStyleSize;
    void* pvConsumer;
    void* pvProducer;
}
struct BLENDOBJ
{
    BLENDFUNCTION BlendFunction;
}
struct PALOBJ
{
    uint ulReserved;
}
struct PATHOBJ
{
    uint fl;
    uint cCurves;
}
struct SURFOBJ
{
    DHSURF dhsurf;
    HSURF hsurf;
    DHPDEV dhpdev;
    HDEV hdev;
    SIZE sizlBitmap;
    uint cjBits;
    void* pvBits;
    void* pvScan0;
    int lDelta;
    uint iUniq;
    uint iBitmapFormat;
    ushort iType;
    ushort fjBitmap;
}
struct WNDOBJ
{
    CLIPOBJ coClient;
    void* pvConsumer;
    RECTL rclClient;
    SURFOBJ* psoOwner;
}
struct XFORMOBJ
{
    uint ulReserved;
}
struct XLATEOBJ
{
    uint iUniq;
    uint flXlate;
    ushort iSrcType;
    ushort iDstType;
    uint cEntries;
    uint* pulXlate;
}
struct ENUMRECTS
{
    uint c;
    RECTL[1] arcl;
}
struct GLYPHBITS
{
    POINTL ptlOrigin;
    SIZE sizlBitmap;
    ubyte[1] aj;
}
union GLYPHDEF
{
    GLYPHBITS* pgb;
    PATHOBJ* ppo;
}
struct GLYPHPOS
{
    uint hg;
    GLYPHDEF* pgdf;
    POINTL ptl;
}
struct GLYPHDATA
{
    GLYPHDEF gdf;
    uint hg;
    int fxD;
    int fxA;
    int fxAB;
    int fxInkTop;
    int fxInkBottom;
    RECTL rclInk;
    POINTQF ptqD;
}
struct STROBJ
{
    uint cGlyphs;
    uint flAccel;
    uint ulCharInc;
    RECTL rclBkGround;
    GLYPHPOS* pgp;
    PWSTR pwszOrg;
}
struct FONTINFO
{
    uint cjThis;
    uint flCaps;
    uint cGlyphsSupported;
    uint cjMaxGlyph1;
    uint cjMaxGlyph4;
    uint cjMaxGlyph8;
    uint cjMaxGlyph32;
}
struct PATHDATA
{
    uint flags;
    uint count;
    POINTFIX* pptfx;
}
struct RUN
{
    int iStart;
    int iStop;
}
struct CLIPLINE
{
    POINTFIX ptfxA;
    POINTFIX ptfxB;
    int lStyleState;
    uint c;
    RUN[1] arun;
}
struct PERBANDINFO
{
    BOOL bRepeatThisBand;
    SIZE szlBand;
    uint ulHorzRes;
    uint ulVertRes;
}
struct GAMMARAMP
{
    ushort[256] Red;
    ushort[256] Green;
    ushort[256] Blue;
}
alias WNDOBJCHANGEPROC = void function(WNDOBJ*, uint);
struct DEVHTINFO
{
    uint HTFlags;
    uint HTPatternSize;
    uint DevPelsDPI;
    COLORINFO ColorInfo;
}
struct DEVHTADJDATA
{
    uint DeviceFlags;
    uint DeviceXDPI;
    uint DeviceYDPI;
    DEVHTINFO* pDefHTInfo;
    DEVHTINFO* pAdjHTInfo;
}
struct TYPE1_FONT
{
    HANDLE hPFM;
    HANDLE hPFB;
    uint ulIdentifier;
}
struct ENGSAFESEMAPHORE
{
    HSEMAPHORE hsem;
    int lCount;
}
struct FLOATOBJ_XFORM
{
    float eM11;
    float eM12;
    float eM21;
    float eM22;
    float eDx;
    float eDy;
}
alias SORTCOMP = int function(const(void)*, const(void)*);
struct ENG_TIME_FIELDS
{
    ushort usYear;
    ushort usMonth;
    ushort usDay;
    ushort usHour;
    ushort usMinute;
    ushort usSecond;
    ushort usMilliseconds;
    ushort usWeekday;
}
alias ENG_SYSTEM_ATTRIBUTE = int;
enum : int
{
    EngProcessorFeature             = 0x00000001,
    EngNumberOfProcessors           = 0x00000002,
    EngOptimumAvailableUserMemory   = 0x00000003,
    EngOptimumAvailableSystemMemory = 0x00000004,
}

alias ENG_DEVICE_ATTRIBUTE = int;
enum : int
{
    QDA_RESERVED           = 0x00000000,
    QDA_ACCELERATION_LEVEL = 0x00000001,
}

struct EMFINFO
{
    uint nSize;
    HDC hdc;
    ubyte* pvEMF;
    ubyte* pvCurrentRecord;
}
alias PFN_DrvEnableDriver = BOOL function(uint, uint, DRVENABLEDATA*);
alias PFN_DrvEnablePDEV = DHPDEV function(DEVMODEW*, PWSTR, uint, HSURF*, uint, GDIINFO*, uint, DEVINFO*, HDEV, PWSTR, HANDLE);
alias PFN_DrvCompletePDEV = void function(DHPDEV, HDEV);
alias PFN_DrvResetDevice = uint function(DHPDEV, void*);
alias PFN_DrvDisablePDEV = void function(DHPDEV);
alias PFN_DrvSynchronize = void function(DHPDEV, RECTL*);
alias PFN_DrvEnableSurface = HSURF function(DHPDEV);
alias PFN_DrvDisableDriver = void function();
alias PFN_DrvDisableSurface = void function(DHPDEV);
alias PFN_DrvAssertMode = BOOL function(DHPDEV, BOOL);
alias PFN_DrvTextOut = BOOL function(SURFOBJ*, STROBJ*, FONTOBJ*, CLIPOBJ*, RECTL*, RECTL*, BRUSHOBJ*, BRUSHOBJ*, POINTL*, uint);
alias PFN_DrvStretchBlt = BOOL function(SURFOBJ*, SURFOBJ*, SURFOBJ*, CLIPOBJ*, XLATEOBJ*, COLORADJUSTMENT*, POINTL*, RECTL*, RECTL*, POINTL*, uint);
alias PFN_DrvStretchBltROP = BOOL function(SURFOBJ*, SURFOBJ*, SURFOBJ*, CLIPOBJ*, XLATEOBJ*, COLORADJUSTMENT*, POINTL*, RECTL*, RECTL*, POINTL*, uint, BRUSHOBJ*, uint);
alias PFN_DrvTransparentBlt = BOOL function(SURFOBJ*, SURFOBJ*, CLIPOBJ*, XLATEOBJ*, RECTL*, RECTL*, uint, uint);
alias PFN_DrvPlgBlt = BOOL function(SURFOBJ*, SURFOBJ*, SURFOBJ*, CLIPOBJ*, XLATEOBJ*, COLORADJUSTMENT*, POINTL*, POINTFIX*, RECTL*, POINTL*, uint);
alias PFN_DrvBitBlt = BOOL function(SURFOBJ*, SURFOBJ*, SURFOBJ*, CLIPOBJ*, XLATEOBJ*, RECTL*, POINTL*, POINTL*, BRUSHOBJ*, POINTL*, uint);
alias PFN_DrvRealizeBrush = BOOL function(BRUSHOBJ*, SURFOBJ*, SURFOBJ*, SURFOBJ*, XLATEOBJ*, uint);
alias PFN_DrvCopyBits = BOOL function(SURFOBJ*, SURFOBJ*, CLIPOBJ*, XLATEOBJ*, RECTL*, POINTL*);
alias PFN_DrvDitherColor = uint function(DHPDEV, uint, uint, uint*);
alias PFN_DrvCreateDeviceBitmap = HBITMAP function(DHPDEV, SIZE, uint);
alias PFN_DrvDeleteDeviceBitmap = void function(DHSURF);
alias PFN_DrvSetPalette = BOOL function(DHPDEV, PALOBJ*, uint, uint, uint);
alias PFN_DrvEscape = uint function(SURFOBJ*, uint, uint, void*, uint, void*);
alias PFN_DrvDrawEscape = uint function(SURFOBJ*, uint, CLIPOBJ*, RECTL*, uint, void*);
alias PFN_DrvQueryFont = IFIMETRICS* function(DHPDEV, ulong, uint, ulong*);
alias PFN_DrvQueryFontTree = void* function(DHPDEV, ulong, uint, uint, ulong*);
alias PFN_DrvQueryFontData = int function(DHPDEV, FONTOBJ*, uint, uint, GLYPHDATA*, void*, uint);
alias PFN_DrvFree = void function(void*, ulong);
alias PFN_DrvDestroyFont = void function(FONTOBJ*);
alias PFN_DrvQueryFontCaps = int function(uint, uint*);
alias PFN_DrvLoadFontFile = ulong function(uint, ulong*, void**, uint*, DESIGNVECTOR*, uint, uint);
alias PFN_DrvUnloadFontFile = BOOL function(ulong);
alias PFN_DrvSetPointerShape = uint function(SURFOBJ*, SURFOBJ*, SURFOBJ*, XLATEOBJ*, int, int, int, int, RECTL*, uint);
alias PFN_DrvMovePointer = void function(SURFOBJ*, int, int, RECTL*);
alias PFN_DrvSendPage = BOOL function(SURFOBJ*);
alias PFN_DrvStartPage = BOOL function(SURFOBJ*);
alias PFN_DrvStartDoc = BOOL function(SURFOBJ*, PWSTR, uint);
alias PFN_DrvEndDoc = BOOL function(SURFOBJ*, uint);
alias PFN_DrvQuerySpoolType = BOOL function(DHPDEV, PWSTR);
alias PFN_DrvLineTo = BOOL function(SURFOBJ*, CLIPOBJ*, BRUSHOBJ*, int, int, int, int, RECTL*, uint);
alias PFN_DrvStrokePath = BOOL function(SURFOBJ*, PATHOBJ*, CLIPOBJ*, XFORMOBJ*, BRUSHOBJ*, POINTL*, LINEATTRS*, uint);
alias PFN_DrvFillPath = BOOL function(SURFOBJ*, PATHOBJ*, CLIPOBJ*, BRUSHOBJ*, POINTL*, uint, uint);
alias PFN_DrvStrokeAndFillPath = BOOL function(SURFOBJ*, PATHOBJ*, CLIPOBJ*, XFORMOBJ*, BRUSHOBJ*, LINEATTRS*, BRUSHOBJ*, POINTL*, uint, uint);
alias PFN_DrvPaint = BOOL function(SURFOBJ*, CLIPOBJ*, BRUSHOBJ*, POINTL*, uint);
alias PFN_DrvGetGlyphMode = uint function(DHPDEV, FONTOBJ*);
alias PFN_DrvResetPDEV = BOOL function(DHPDEV, DHPDEV);
alias PFN_DrvSaveScreenBits = ulong function(SURFOBJ*, uint, ulong, RECTL*);
alias PFN_DrvGetModes = uint function(HANDLE, uint, DEVMODEW*);
alias PFN_DrvQueryTrueTypeTable = int function(ulong, uint, uint, int, uint, ubyte*, ubyte**, uint*);
alias PFN_DrvQueryTrueTypeSection = int function(uint, uint, uint, HANDLE*, int*);
alias PFN_DrvQueryTrueTypeOutline = int function(DHPDEV, FONTOBJ*, uint, BOOL, GLYPHDATA*, uint, TTPOLYGONHEADER*);
alias PFN_DrvGetTrueTypeFile = void* function(ulong, uint*);
alias PFN_DrvQueryFontFile = int function(ulong, uint, uint, uint*);
alias PFN_DrvQueryGlyphAttrs = FD_GLYPHATTR* function(FONTOBJ*, uint);
alias PFN_DrvQueryAdvanceWidths = BOOL function(DHPDEV, FONTOBJ*, uint, uint*, void*, uint);
alias PFN_DrvFontManagement = uint function(SURFOBJ*, FONTOBJ*, uint, uint, void*, uint, void*);
alias PFN_DrvSetPixelFormat = BOOL function(SURFOBJ*, int, HWND);
alias PFN_DrvDescribePixelFormat = int function(DHPDEV, int, uint, PIXELFORMATDESCRIPTOR*);
alias PFN_DrvSwapBuffers = BOOL function(SURFOBJ*, WNDOBJ*);
alias PFN_DrvStartBanding = BOOL function(SURFOBJ*, POINTL*);
alias PFN_DrvNextBand = BOOL function(SURFOBJ*, POINTL*);
alias PFN_DrvQueryPerBandInfo = BOOL function(SURFOBJ*, PERBANDINFO*);
alias PFN_DrvEnableDirectDraw = BOOL function(DHPDEV, DD_CALLBACKS*, DD_SURFACECALLBACKS*, DD_PALETTECALLBACKS*);
alias PFN_DrvDisableDirectDraw = void function(DHPDEV);
alias PFN_DrvGetDirectDrawInfo = BOOL function(DHPDEV, DD_HALINFO*, uint*, VIDEOMEMORY*, uint*, uint*);
alias PFN_DrvIcmCreateColorTransform = HANDLE function(DHPDEV, LOGCOLORSPACEW*, void*, uint, void*, uint, void*, uint, uint);
alias PFN_DrvIcmDeleteColorTransform = BOOL function(DHPDEV, HANDLE);
alias PFN_DrvIcmCheckBitmapBits = BOOL function(DHPDEV, HANDLE, SURFOBJ*, ubyte*);
alias PFN_DrvIcmSetDeviceGammaRamp = BOOL function(DHPDEV, uint, void*);
alias PFN_DrvAlphaBlend = BOOL function(SURFOBJ*, SURFOBJ*, CLIPOBJ*, XLATEOBJ*, RECTL*, RECTL*, BLENDOBJ*);
alias PFN_DrvGradientFill = BOOL function(SURFOBJ*, CLIPOBJ*, XLATEOBJ*, TRIVERTEX*, uint, void*, uint, RECTL*, POINTL*, uint);
alias PFN_DrvQueryDeviceSupport = BOOL function(SURFOBJ*, XLATEOBJ*, XFORMOBJ*, uint, uint, void*, uint, void*);
alias PFN_DrvDeriveSurface = HBITMAP function(DD_DIRECTDRAW_GLOBAL*, DD_SURFACE_LOCAL*);
alias PFN_DrvSynchronizeSurface = void function(SURFOBJ*, RECTL*, uint);
alias PFN_DrvNotify = void function(SURFOBJ*, uint, void*);
alias PFN_DrvRenderHint = int function(DHPDEV, uint, ulong, void*);
struct DRH_APIBITMAPDATA
{
    SURFOBJ* pso;
    BOOL b;
}
alias PFN_EngCreateRectRgn = HANDLE function(int, int, int, int);
alias PFN_EngDeleteRgn = void function(HANDLE);
alias PFN_EngCombineRgn = int function(HANDLE, HANDLE, HANDLE, int);
alias PFN_EngCopyRgn = int function(HANDLE, HANDLE);
alias PFN_EngIntersectRgn = int function(HANDLE, HANDLE, HANDLE);
alias PFN_EngSubtractRgn = int function(HANDLE, HANDLE, HANDLE);
alias PFN_EngUnionRgn = int function(HANDLE, HANDLE, HANDLE);
alias PFN_EngXorRgn = int function(HANDLE, HANDLE, HANDLE);
alias PFN_DrvCreateDeviceBitmapEx = HBITMAP function(DHPDEV, SIZE, uint, uint, DHSURF, uint, uint, HANDLE*);
alias PFN_DrvDeleteDeviceBitmapEx = void function(DHSURF);
alias PFN_DrvAssociateSharedSurface = BOOL function(SURFOBJ*, HANDLE, HANDLE, SIZE);
alias PFN_DrvSynchronizeRedirectionBitmaps = NTSTATUS function(DHPDEV, ulong*);
alias PFN_DrvAccumulateD3DDirtyRect = BOOL function(SURFOBJ*, CDDDXGK_REDIRBITMAPPRESENTINFO*);
alias PFN_DrvStartDxInterop = BOOL function(SURFOBJ*, BOOL, void*);
alias PFN_DrvEndDxInterop = BOOL function(SURFOBJ*, BOOL, BOOL*, void*);
alias PFN_DrvLockDisplayArea = void function(DHPDEV, RECTL*);
alias PFN_DrvUnlockDisplayArea = void function(DHPDEV, RECTL*);
alias PFN_DrvSurfaceComplete = BOOL function(DHPDEV, HANDLE);
struct INDIRECT_DISPLAY_INFO
{
    LUID DisplayAdapterLuid;
    uint Flags;
    uint NumMonitors;
    uint DisplayAdapterTargetBase;
}
struct VIDEO_VDM
{
    HANDLE ProcessHandle;
}
struct VIDEO_REGISTER_VDM
{
    uint MinimumStateSize;
}
struct VIDEO_MONITOR_DESCRIPTOR
{
    uint DescriptorSize;
    ubyte[1] Descriptor;
}
alias VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE = int;
enum : int
{
    VideoPowerNotifyCallout             = 0x00000001,
    VideoEnumChildPdoNotifyCallout      = 0x00000003,
    VideoFindAdapterCallout             = 0x00000004,
    VideoPnpNotifyCallout               = 0x00000007,
    VideoDxgkDisplaySwitchCallout       = 0x00000008,
    VideoDxgkFindAdapterTdrCallout      = 0x0000000a,
    VideoDxgkHardwareProtectionTeardown = 0x0000000b,
    VideoRepaintDesktop                 = 0x0000000c,
    VideoUpdateCursor                   = 0x0000000d,
    VideoDisableMultiPlaneOverlay       = 0x0000000e,
    VideoDesktopDuplicationChange       = 0x0000000f,
    VideoBlackScreenDiagnostics         = 0x00000010,
}

alias BlackScreenDiagnosticsCalloutParam = int;
enum : int
{
    BlackScreenDiagnosticsData = 0x00000001,
    BlackScreenDisplayRecovery = 0x00000002,
}

struct DXGK_WIN32K_PARAM_DATA
{
    void* PathsArray;
    void* ModesArray;
    uint NumPathArrayElements;
    uint NumModeArrayElements;
    uint SDCFlags;
}
struct VIDEO_WIN32K_CALLBACKS_PARAMS
{
    VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE CalloutType;
    void* PhysDisp;
    ulong Param;
    int Status;
    BOOLEAN LockUserSession;
    BOOLEAN IsPostDevice;
    BOOLEAN SurpriseRemoval;
    BOOLEAN WaitForQueueReady;
}
alias PVIDEO_WIN32K_CALLOUT = void function(void*);
struct VIDEO_WIN32K_CALLBACKS
{
    void* PhysDisp;
    PVIDEO_WIN32K_CALLOUT Callout;
    uint bACPI;
    HANDLE pPhysDeviceObject;
    uint DualviewFlags;
}
struct VIDEO_DEVICE_SESSION_STATUS
{
    uint bEnable;
    uint bSuccess;
}
struct VIDEO_HARDWARE_STATE_HEADER
{
    uint Length;
    ubyte[48] PortValue;
    uint AttribIndexDataState;
    uint BasicSequencerOffset;
    uint BasicCrtContOffset;
    uint BasicGraphContOffset;
    uint BasicAttribContOffset;
    uint BasicDacOffset;
    uint BasicLatchesOffset;
    uint ExtendedSequencerOffset;
    uint ExtendedCrtContOffset;
    uint ExtendedGraphContOffset;
    uint ExtendedAttribContOffset;
    uint ExtendedDacOffset;
    uint ExtendedValidatorStateOffset;
    uint ExtendedMiscDataOffset;
    uint PlaneLength;
    uint Plane1Offset;
    uint Plane2Offset;
    uint Plane3Offset;
    uint Plane4Offset;
    uint VGAStateFlags;
    uint DIBOffset;
    uint DIBBitsPerPixel;
    uint DIBXResolution;
    uint DIBYResolution;
    uint DIBXlatOffset;
    uint DIBXlatLength;
    uint VesaInfoOffset;
    void* FrameBufferData;
}
struct VIDEO_HARDWARE_STATE
{
    VIDEO_HARDWARE_STATE_HEADER* StateHeader;
    uint StateLength;
}
struct VIDEO_NUM_MODES
{
    uint NumModes;
    uint ModeInformationLength;
}
struct VIDEO_MODE
{
    uint RequestedMode;
}
struct VIDEO_MODE_INFORMATION
{
    uint Length;
    uint ModeIndex;
    uint VisScreenWidth;
    uint VisScreenHeight;
    uint ScreenStride;
    uint NumberOfPlanes;
    uint BitsPerPlane;
    uint Frequency;
    uint XMillimeter;
    uint YMillimeter;
    uint NumberRedBits;
    uint NumberGreenBits;
    uint NumberBlueBits;
    uint RedMask;
    uint GreenMask;
    uint BlueMask;
    uint AttributeFlags;
    uint VideoMemoryBitmapWidth;
    uint VideoMemoryBitmapHeight;
    uint DriverSpecificAttributeFlags;
}
struct VIDEO_LOAD_FONT_INFORMATION
{
    ushort WidthInPixels;
    ushort HeightInPixels;
    uint FontSize;
    ubyte[1] Font;
}
struct VIDEO_PALETTE_DATA
{
    ushort NumEntries;
    ushort FirstEntry;
    ushort[1] Colors;
}
struct VIDEO_CLUTDATA
{
    ubyte Red;
    ubyte Green;
    ubyte Blue;
    ubyte Unused;
}
struct VIDEO_CLUT
{
    ushort NumEntries;
    ushort FirstEntry;
    union
    {
        VIDEO_CLUTDATA RgbArray;
        uint RgbLong;
    }
}
struct VIDEO_CURSOR_POSITION
{
    short Column;
    short Row;
}
struct VIDEO_CURSOR_ATTRIBUTES
{
    ushort Width;
    ushort Height;
    short Column;
    short Row;
    ubyte Rate;
    ubyte Enable;
}
struct VIDEO_POINTER_POSITION
{
    short Column;
    short Row;
}
struct VIDEO_POINTER_ATTRIBUTES
{
    uint Flags;
    uint Width;
    uint Height;
    uint WidthInBytes;
    uint Enable;
    short Column;
    short Row;
    ubyte[1] Pixels;
}
struct VIDEO_POINTER_CAPABILITIES
{
    uint Flags;
    uint MaxWidth;
    uint MaxHeight;
    uint HWPtrBitmapStart;
    uint HWPtrBitmapEnd;
}
struct VIDEO_BANK_SELECT
{
    uint Length;
    uint Size;
    uint BankingFlags;
    uint BankingType;
    uint PlanarHCBankingType;
    uint BitmapWidthInBytes;
    uint BitmapSize;
    uint Granularity;
    uint PlanarHCGranularity;
    uint CodeOffset;
    uint PlanarHCBankCodeOffset;
    uint PlanarHCEnableCodeOffset;
    uint PlanarHCDisableCodeOffset;
}
alias VIDEO_BANK_TYPE = int;
enum : int
{
    VideoNotBanked    = 0x00000000,
    VideoBanked1RW    = 0x00000001,
    VideoBanked1R1W   = 0x00000002,
    VideoBanked2RW    = 0x00000003,
    NumVideoBankTypes = 0x00000004,
}

struct VIDEO_MEMORY
{
    void* RequestedVirtualAddress;
}
struct VIDEO_SHARE_MEMORY
{
    HANDLE ProcessHandle;
    uint ViewOffset;
    uint ViewSize;
    void* RequestedVirtualAddress;
}
struct VIDEO_SHARE_MEMORY_INFORMATION
{
    uint SharedViewOffset;
    uint SharedViewSize;
    void* VirtualAddress;
}
struct VIDEO_MEMORY_INFORMATION
{
    void* VideoRamBase;
    uint VideoRamLength;
    void* FrameBufferBase;
    uint FrameBufferLength;
}
struct VIDEO_PUBLIC_ACCESS_RANGES
{
    uint InIoSpace;
    uint MappedInIoSpace;
    void* VirtualAddress;
}
struct VIDEO_COLOR_CAPABILITIES
{
    uint Length;
    uint AttributeFlags;
    int RedPhosphoreDecay;
    int GreenPhosphoreDecay;
    int BluePhosphoreDecay;
    int WhiteChromaticity_x;
    int WhiteChromaticity_y;
    int WhiteChromaticity_Y;
    int RedChromaticity_x;
    int RedChromaticity_y;
    int GreenChromaticity_x;
    int GreenChromaticity_y;
    int BlueChromaticity_x;
    int BlueChromaticity_y;
    int WhiteGamma;
    int RedGamma;
    int GreenGamma;
    int BlueGamma;
}
alias VIDEO_POWER_STATE = int;
enum : int
{
    VideoPowerUnspecified = 0x00000000,
    VideoPowerOn          = 0x00000001,
    VideoPowerStandBy     = 0x00000002,
    VideoPowerSuspend     = 0x00000003,
    VideoPowerOff         = 0x00000004,
    VideoPowerHibernate   = 0x00000005,
    VideoPowerShutdown    = 0x00000006,
    VideoPowerMaximum     = 0x00000007,
}

struct VIDEO_POWER_MANAGEMENT
{
    uint Length;
    uint DPMSVersion;
    uint PowerState;
}
struct VIDEO_COLOR_LUT_DATA
{
    uint Length;
    uint LutDataFormat;
    ubyte[1] LutData;
}
struct VIDEO_LUT_RGB256WORDS
{
    ushort[256] Red;
    ushort[256] Green;
    ushort[256] Blue;
}
struct BANK_POSITION
{
    uint ReadBankPosition;
    uint WriteBankPosition;
}
struct DISPLAY_BRIGHTNESS
{
    ubyte ucDisplayPolicy;
    ubyte ucACBrightness;
    ubyte ucDCBrightness;
}
struct VIDEO_BRIGHTNESS_POLICY
{
    BOOLEAN DefaultToBiosPolicy;
    ubyte LevelCount;
    struct
    {
        ubyte BatteryLevel;
        ubyte Brightness;
    }
}
struct FSCNTL_SCREEN_INFO
{
    COORD Position;
    COORD ScreenSize;
    uint nNumberOfChars;
}
struct FONT_IMAGE_INFO
{
    COORD FontSize;
    ubyte* ImageBits;
}
struct CHAR_IMAGE_INFO
{
    CHAR_INFO CharInfo;
    FONT_IMAGE_INFO FontImageInfo;
}
struct VGA_CHAR
{
    CHAR Char;
    CHAR Attributes;
}
struct FSVIDEO_COPY_FRAME_BUFFER
{
    FSCNTL_SCREEN_INFO SrcScreen;
    FSCNTL_SCREEN_INFO DestScreen;
}
struct FSVIDEO_WRITE_TO_FRAME_BUFFER
{
    CHAR_IMAGE_INFO* SrcBuffer;
    FSCNTL_SCREEN_INFO DestScreen;
}
struct FSVIDEO_REVERSE_MOUSE_POINTER
{
    FSCNTL_SCREEN_INFO Screen;
    uint dwType;
}
struct FSVIDEO_MODE_INFORMATION
{
    VIDEO_MODE_INFORMATION VideoMode;
    VIDEO_MEMORY_INFORMATION VideoMemory;
}
struct FSVIDEO_SCREEN_INFORMATION
{
    COORD ScreenSize;
    COORD FontSize;
}
struct FSVIDEO_CURSOR_POSITION
{
    VIDEO_CURSOR_POSITION Coord;
    uint dwType;
}
struct ENG_EVENT
{
    void* pKEvent;
    uint fFlags;
}
struct VIDEO_PERFORMANCE_COUNTER
{
    ulong[10] NbOfAllocationEvicted;
    ulong[10] NbOfAllocationMarked;
    ulong[10] NbOfAllocationRestored;
    ulong[10] KBytesEvicted;
    ulong[10] KBytesMarked;
    ulong[10] KBytesRestored;
    ulong NbProcessCommited;
    ulong NbAllocationCommited;
    ulong NbAllocationMarked;
    ulong KBytesAllocated;
    ulong KBytesAvailable;
    ulong KBytesCurMarked;
    ulong Reference;
    ulong Unreference;
    ulong TrueReference;
    ulong NbOfPageIn;
    ulong KBytesPageIn;
    ulong NbOfPageOut;
    ulong KBytesPageOut;
    ulong NbOfRotateOut;
    ulong KBytesRotateOut;
}
struct VIDEO_QUERY_PERFORMANCE_COUNTER
{
    uint BufferSize;
    VIDEO_PERFORMANCE_COUNTER* Buffer;
}
alias BRIGHTNESS_INTERFACE_VERSION = int;
enum : int
{
    BRIGHTNESS_INTERFACE_VERSION_1 = 0x00000001,
    BRIGHTNESS_INTERFACE_VERSION_2 = 0x00000002,
    BRIGHTNESS_INTERFACE_VERSION_3 = 0x00000003,
}

struct PANEL_QUERY_BRIGHTNESS_CAPS
{
    BRIGHTNESS_INTERFACE_VERSION Version;
    union
    {
        struct
        {
            uint _bitfield0;
        }
        uint Value;
    }
}
struct BRIGHTNESS_LEVEL
{
    ubyte Count;
    ubyte[103] Level;
}
struct BRIGHTNESS_NIT_RANGE
{
    uint MinLevelInMillinit;
    uint MaxLevelInMillinit;
    uint StepSizeInMillinit;
}
struct BRIGHTNESS_NIT_RANGES
{
    uint NormalRangeCount;
    uint RangeCount;
    uint PreferredMaximumBrightness;
    BRIGHTNESS_NIT_RANGE[16] SupportedRanges;
}
struct PANEL_QUERY_BRIGHTNESS_RANGES
{
    BRIGHTNESS_INTERFACE_VERSION Version;
    union
    {
        BRIGHTNESS_LEVEL BrightnessLevel;
        BRIGHTNESS_NIT_RANGES NitRanges;
    }
}
struct PANEL_GET_BRIGHTNESS
{
    BRIGHTNESS_INTERFACE_VERSION Version;
    union
    {
        ubyte Level;
        struct
        {
            uint CurrentInMillinits;
            uint TargetInMillinits;
        }
    }
}
struct CHROMATICITY_COORDINATE
{
    float x;
    float y;
}
struct PANEL_BRIGHTNESS_SENSOR_DATA
{
    union
    {
        struct
        {
            uint _bitfield0;
        }
        uint Value;
    }
    float AlsReading;
    CHROMATICITY_COORDINATE ChromaticityCoordinate;
    float ColorTemperature;
}
struct PANEL_SET_BRIGHTNESS
{
    BRIGHTNESS_INTERFACE_VERSION Version;
    union
    {
        ubyte Level;
        struct
        {
            uint Millinits;
            uint TransitionTimeInMs;
            PANEL_BRIGHTNESS_SENSOR_DATA SensorData;
        }
    }
}
struct PANEL_SET_BRIGHTNESS_STATE
{
    union
    {
        struct
        {
            uint _bitfield0;
        }
        uint Value;
    }
}
alias BACKLIGHT_OPTIMIZATION_LEVEL = int;
enum : int
{
    BacklightOptimizationDisable = 0x00000000,
    BacklightOptimizationDesktop = 0x00000001,
    BacklightOptimizationDynamic = 0x00000002,
    BacklightOptimizationDimmed  = 0x00000003,
    BacklightOptimizationEDR     = 0x00000004,
}

struct PANEL_SET_BACKLIGHT_OPTIMIZATION
{
    BACKLIGHT_OPTIMIZATION_LEVEL Level;
}
struct BACKLIGHT_REDUCTION_GAMMA_RAMP
{
    ushort[256] R;
    ushort[256] G;
    ushort[256] B;
}
struct PANEL_GET_BACKLIGHT_REDUCTION
{
    ushort BacklightUsersetting;
    ushort BacklightEffective;
    BACKLIGHT_REDUCTION_GAMMA_RAMP GammaRamp;
}
alias COLORSPACE_TRANSFORM_DATA_TYPE = int;
enum : int
{
    COLORSPACE_TRANSFORM_DATA_TYPE_FIXED_POINT = 0x00000000,
    COLORSPACE_TRANSFORM_DATA_TYPE_FLOAT       = 0x00000001,
}

struct COLORSPACE_TRANSFORM_DATA_CAP
{
    COLORSPACE_TRANSFORM_DATA_TYPE DataType;
    union
    {
        struct
        {
            uint _bitfield0;
        }
        struct
        {
            uint _bitfield1;
        }
        uint Value;
    }
    float NumericRangeMin;
    float NumericRangeMax;
}
struct COLORSPACE_TRANSFORM_1DLUT_CAP
{
    uint NumberOfLUTEntries;
    COLORSPACE_TRANSFORM_DATA_CAP DataCap;
}
struct COLORSPACE_TRANSFORM_MATRIX_CAP
{
    union
    {
        struct
        {
            uint _bitfield0;
        }
        uint Value;
    }
    COLORSPACE_TRANSFORM_DATA_CAP DataCap;
}
alias COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION = int;
enum : int
{
    COLORSPACE_TRANSFORM_VERSION_DEFAULT       = 0x00000000,
    COLORSPACE_TRANSFORM_VERSION_1             = 0x00000001,
    COLORSPACE_TRANSFORM_VERSION_NOT_SUPPORTED = 0x00000000,
}

struct COLORSPACE_TRANSFORM_TARGET_CAPS
{
    COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION Version;
    COLORSPACE_TRANSFORM_1DLUT_CAP LookupTable1DDegammaCap;
    COLORSPACE_TRANSFORM_MATRIX_CAP ColorMatrix3x3Cap;
    COLORSPACE_TRANSFORM_1DLUT_CAP LookupTable1DRegammaCap;
}
alias COLORSPACE_TRANSFORM_TYPE = int;
enum : int
{
    COLORSPACE_TRANSFORM_TYPE_UNINITIALIZED = 0x00000000,
    COLORSPACE_TRANSFORM_TYPE_DEFAULT       = 0x00000001,
    COLORSPACE_TRANSFORM_TYPE_RGB256x3x16   = 0x00000002,
    COLORSPACE_TRANSFORM_TYPE_DXGI_1        = 0x00000003,
    COLORSPACE_TRANSFORM_TYPE_MATRIX_3x4    = 0x00000004,
    COLORSPACE_TRANSFORM_TYPE_MATRIX_V2     = 0x00000005,
}

struct GAMMA_RAMP_RGB256x3x16
{
    ushort[256] Red;
    ushort[256] Green;
    ushort[256] Blue;
}
struct GAMMA_RAMP_RGB
{
    float Red;
    float Green;
    float Blue;
}
struct GAMMA_RAMP_DXGI_1
{
    GAMMA_RAMP_RGB Scale;
    GAMMA_RAMP_RGB Offset;
    GAMMA_RAMP_RGB[1025] GammaCurve;
}
struct COLORSPACE_TRANSFORM_3x4
{
    float[12] ColorMatrix3x4;
    float ScalarMultiplier;
    GAMMA_RAMP_RGB[4096] LookupTable1D;
}
alias OUTPUT_WIRE_COLOR_SPACE_TYPE = int;
enum : int
{
    OUTPUT_WIRE_COLOR_SPACE_G22_P709              = 0x00000000,
    OUTPUT_WIRE_COLOR_SPACE_RESERVED              = 0x00000004,
    OUTPUT_WIRE_COLOR_SPACE_G2084_P2020           = 0x0000000c,
    OUTPUT_WIRE_COLOR_SPACE_G22_P709_WCG          = 0x0000001e,
    OUTPUT_WIRE_COLOR_SPACE_G22_P2020             = 0x0000001f,
    OUTPUT_WIRE_COLOR_SPACE_G2084_P2020_HDR10PLUS = 0x00000020,
    OUTPUT_WIRE_COLOR_SPACE_G2084_P2020_DVLL      = 0x00000021,
}

alias OUTPUT_COLOR_ENCODING = int;
enum : int
{
    OUTPUT_COLOR_ENCODING_RGB          = 0x00000000,
    OUTPUT_COLOR_ENCODING_YCBCR444     = 0x00000001,
    OUTPUT_COLOR_ENCODING_YCBCR422     = 0x00000002,
    OUTPUT_COLOR_ENCODING_YCBCR420     = 0x00000003,
    OUTPUT_COLOR_ENCODING_INTENSITY    = 0x00000004,
    OUTPUT_COLOR_ENCODING_FORCE_UINT32 = 0xffffffff,
}

struct OUTPUT_WIRE_FORMAT
{
    OUTPUT_COLOR_ENCODING ColorEncoding;
    uint BitsPerPixel;
}
alias COLORSPACE_TRANSFORM_STAGE_CONTROL = int;
enum : int
{
    ColorSpaceTransformStageControl_No_Change = 0x00000000,
    ColorSpaceTransformStageControl_Enable    = 0x00000001,
    ColorSpaceTransformStageControl_Bypass    = 0x00000002,
}

struct COLORSPACE_TRANSFORM_MATRIX_V2
{
    COLORSPACE_TRANSFORM_STAGE_CONTROL StageControlLookupTable1DDegamma;
    GAMMA_RAMP_RGB[4096] LookupTable1DDegamma;
    COLORSPACE_TRANSFORM_STAGE_CONTROL StageControlColorMatrix3x3;
    float[9] ColorMatrix3x3;
    COLORSPACE_TRANSFORM_STAGE_CONTROL StageControlLookupTable1DRegamma;
    GAMMA_RAMP_RGB[4096] LookupTable1DRegamma;
}
struct COLORSPACE_TRANSFORM
{
    COLORSPACE_TRANSFORM_TYPE Type;
    union _Data_e__Union
    {
        GAMMA_RAMP_RGB256x3x16 Rgb256x3x16;
        GAMMA_RAMP_DXGI_1 Dxgi1;
        COLORSPACE_TRANSFORM_3x4 T3x4;
        COLORSPACE_TRANSFORM_MATRIX_V2 MatrixV2;
    }
}
struct COLORSPACE_TRANSFORM_SET_INPUT
{
    OUTPUT_WIRE_COLOR_SPACE_TYPE OutputWireColorSpaceExpected;
    OUTPUT_WIRE_FORMAT OutputWireFormatExpected;
    COLORSPACE_TRANSFORM ColorSpaceTransform;
}
struct SET_ACTIVE_COLOR_PROFILE_NAME
{
    wchar[1] ColorProfileName;
}
struct MIPI_DSI_CAPS
{
    ubyte DSITypeMajor;
    ubyte DSITypeMinor;
    ubyte SpecVersionMajor;
    ubyte SpecVersionMinor;
    ubyte SpecVersionPatch;
    ushort TargetMaximumReturnPacketSize;
    ubyte ResultCodeFlags;
    ubyte ResultCodeStatus;
    ubyte Revision;
    ubyte Level;
    ubyte DeviceClassHi;
    ubyte DeviceClassLo;
    ubyte ManufacturerHi;
    ubyte ManufacturerLo;
    ubyte ProductHi;
    ubyte ProductLo;
    ubyte LengthHi;
    ubyte LengthLo;
}
alias DSI_CONTROL_TRANSMISSION_MODE = int;
enum : int
{
    DCT_DEFAULT                = 0x00000000,
    DCT_FORCE_LOW_POWER        = 0x00000001,
    DCT_FORCE_HIGH_PERFORMANCE = 0x00000002,
}

struct MIPI_DSI_PACKET
{
    union
    {
        ubyte DataId;
        struct
        {
            ubyte _bitfield0;
        }
    }
    union
    {
        struct
        {
            ubyte Data0;
            ubyte Data1;
        }
        ushort LongWriteWordCount;
    }
    ubyte EccFiller;
    ubyte[8] Payload;
}
struct MIPI_DSI_TRANSMISSION
{
    uint TotalBufferSize;
    ubyte PacketCount;
    ubyte FailedPacket;
    struct
    {
        ushort _bitfield0;
    }
    ushort ReadWordCount;
    ushort FinalCommandExtraPayload;
    ushort MipiErrors;
    ushort HostErrors;
    MIPI_DSI_PACKET[1] Packets;
}
struct MIPI_DSI_RESET
{
    uint Flags;
    union
    {
        struct
        {
            uint _bitfield0;
        }
        uint Results;
    }
}
alias AR_STATE = int;
enum : int
{
    AR_ENABLED       = 0x00000000,
    AR_DISABLED      = 0x00000001,
    AR_SUPPRESSED    = 0x00000002,
    AR_REMOTESESSION = 0x00000004,
    AR_MULTIMON      = 0x00000008,
    AR_NOSENSOR      = 0x00000010,
    AR_NOT_SUPPORTED = 0x00000020,
    AR_DOCKED        = 0x00000040,
    AR_LAPTOP        = 0x00000080,
}

alias ORIENTATION_PREFERENCE = int;
enum : int
{
    ORIENTATION_PREFERENCE_NONE              = 0x00000000,
    ORIENTATION_PREFERENCE_LANDSCAPE         = 0x00000001,
    ORIENTATION_PREFERENCE_PORTRAIT          = 0x00000002,
    ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 0x00000004,
    ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED  = 0x00000008,
}

/+ [CONFLICTED] struct POINTE
{
    uint x;
    uint y;
}
+/
/+ [CONFLICTED] union FLOAT_LONG
{
    uint e;
    int l;
}
+/
/+ [CONFLICTED] struct FD_XFORM
{
    uint eXX;
    uint eXY;
    uint eYX;
    uint eYY;
}
+/
/+ [CONFLICTED] struct IFIMETRICS
{
    uint cjThis;
    uint cjIfiExtra;
    int dpwszFamilyName;
    int dpwszStyleName;
    int dpwszFaceName;
    int dpwszUniqueName;
    int dpFontSim;
    int lEmbedId;
    int lItalicAngle;
    int lCharBias;
    int dpCharSets;
    ubyte jWinCharSet;
    ubyte jWinPitchAndFamily;
    ushort usWinWeight;
    uint flInfo;
    ushort fsSelection;
    ushort fsType;
    short fwdUnitsPerEm;
    short fwdLowestPPEm;
    short fwdWinAscender;
    short fwdWinDescender;
    short fwdMacAscender;
    short fwdMacDescender;
    short fwdMacLineGap;
    short fwdTypoAscender;
    short fwdTypoDescender;
    short fwdTypoLineGap;
    short fwdAveCharWidth;
    short fwdMaxCharInc;
    short fwdCapHeight;
    short fwdXHeight;
    short fwdSubscriptXSize;
    short fwdSubscriptYSize;
    short fwdSubscriptXOffset;
    short fwdSubscriptYOffset;
    short fwdSuperscriptXSize;
    short fwdSuperscriptYSize;
    short fwdSuperscriptXOffset;
    short fwdSuperscriptYOffset;
    short fwdUnderscoreSize;
    short fwdUnderscorePosition;
    short fwdStrikeoutSize;
    short fwdStrikeoutPosition;
    ubyte chFirstChar;
    ubyte chLastChar;
    ubyte chDefaultChar;
    ubyte chBreakChar;
    wchar wcFirstChar;
    wchar wcLastChar;
    wchar wcDefaultChar;
    wchar wcBreakChar;
    POINTL ptlBaseline;
    POINTL ptlAspect;
    POINTL ptlCaret;
    RECTL rclFontBox;
    ubyte[4] achVendId;
    uint cKerningPairs;
    uint ulPanoseCulture;
    PANOSE panose;
}
+/
/+ [CONFLICTED] struct LINEATTRS
{
    uint fl;
    uint iJoin;
    uint iEndCap;
    FLOAT_LONG elWidth;
    uint eMiterLimit;
    uint cstyle;
    FLOAT_LONG* pstyle;
    FLOAT_LONG elStyleState;
}
+/
/+ [CONFLICTED] struct XFORML
{
    uint eM11;
    uint eM12;
    uint eM21;
    uint eM22;
    uint eDx;
    uint eDy;
}
+/
struct FLOATOBJ
{
    uint ul1;
    uint ul2;
}
/+ [CONFLICTED] struct FLOATOBJ_XFORM
{
    FLOATOBJ eM11;
    FLOATOBJ eM12;
    FLOATOBJ eM21;
    FLOATOBJ eM22;
    FLOATOBJ eDx;
    FLOATOBJ eDy;
}
+/
