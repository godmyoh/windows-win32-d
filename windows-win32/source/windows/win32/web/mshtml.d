module windows.win32.web.mshtml;

import windows.win32.guid : GUID;
import windows.win32.foundation : BOOL, BSTR, FILETIME, HANDLE, HINSTANCE, HRESULT, HWND, LPARAM, LRESULT, LUID, POINT, PSTR, PWSTR, RECT, SIZE, WPARAM;
import windows.win32.graphics.directdraw : IDirectDrawSurface;
import windows.win32.graphics.dxgi.common : DXGI_FORMAT, DXGI_MODE_ROTATION;
import windows.win32.graphics.gdi : HBITMAP, HDC, HRGN, LOGFONTW, RGBQUAD;
import windows.win32.system.com_ : BINDINFO, IBindCtx, IBindStatusCallback, IClassFactory, IDataObject, IDispatch, IEnumUnknown, IMoniker, IPersist, IStream, IUnknown, IUri, SAFEARRAY, VARIANT;
import windows.win32.system.diagnostics.debug__ : IActiveScriptError;
import windows.win32.system.ole : IDispatchEx, IDropTarget, IOleCommandTarget, IOleContainer, IOleInPlaceActiveObject, IOleInPlaceFrame, IOleInPlaceUIWindow;
import windows.win32.system.winrt_ : IInspectable;
import windows.win32.ui.input.ime : IActiveIMMApp;
import windows.win32.ui.windowsandmessaging : HICON, MSG;

version (Windows):
extern (Windows):

HRESULT RatingEnable(HWND, const(char)*, BOOL);
HRESULT RatingEnableW(HWND, const(wchar)*, BOOL);
HRESULT RatingCheckUserAccess(const(char)*, const(char)*, const(char)*, ubyte*, uint, void**);
HRESULT RatingCheckUserAccessW(const(wchar)*, const(wchar)*, const(wchar)*, ubyte*, uint, void**);
HRESULT RatingAccessDeniedDialog(HWND, const(char)*, const(char)*, void*);
HRESULT RatingAccessDeniedDialogW(HWND, const(wchar)*, const(wchar)*, void*);
HRESULT RatingAccessDeniedDialog2(HWND, const(char)*, void*);
HRESULT RatingAccessDeniedDialog2W(HWND, const(wchar)*, void*);
HRESULT RatingFreeDetails(void*);
HRESULT RatingObtainCancel(HANDLE);
HRESULT RatingObtainQuery(const(char)*, uint, long, HANDLE*);
HRESULT RatingObtainQueryW(const(wchar)*, uint, long, HANDLE*);
HRESULT RatingSetupUI(HWND, const(char)*);
HRESULT RatingSetupUIW(HWND, const(wchar)*);
HRESULT RatingAddToApprovedSites(HWND, uint, ubyte*, const(wchar)*, BOOL, BOOL, BOOL);
HRESULT RatingClickedOnPRFInternal(HWND, HINSTANCE, PSTR, int);
HRESULT RatingClickedOnRATInternal(HWND, HINSTANCE, PSTR, int);
HRESULT RatingEnabledQuery();
HRESULT RatingInit();
HRESULT CreateMIMEMap(IMapMIMEToCLSID*);
HRESULT DecodeImage(IStream, IMapMIMEToCLSID, IUnknown);
HRESULT SniffStream(IStream, uint*, IStream*);
HRESULT GetMaxMIMEIDBytes(uint*);
HRESULT IdentifyMIMEType(const(ubyte)*, uint, uint*);
HRESULT ComputeInvCMAP(const(RGBQUAD)*, uint, ubyte*, uint);
HRESULT DitherTo8(ubyte*, int, ubyte*, int, const(GUID)*, RGBQUAD*, RGBQUAD*, ubyte*, int, int, int, int, int, int);
HRESULT CreateDDrawSurfaceOnDIB(HBITMAP, IDirectDrawSurface*);
HRESULT DecodeImageEx(IStream, IMapMIMEToCLSID, IUnknown, const(wchar)*);
HRESULT DoPrivacyDlg(HWND, const(wchar)*, IEnumPrivacyRecords, BOOL);
enum DISPID_STYLESHEETSCOLLECTION_NAMED_MAX = 0x001e847f;
enum DISPID_AMBIENT_OFFLINEIFNOTCONNECTED = 0xffffffffffffea83;
enum DISPID_AMBIENT_SILENT = 0xffffffffffffea82;
enum SID_SEditCommandTarget = GUID(0x3050f4b5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
enum CGID_EditStateCommands = GUID(0x3050f4b6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
enum SID_SHTMLEditHost = GUID(0x3050f6a0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
enum SID_SHTMLEditServices = GUID(0x3050f7f9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
enum COOKIEACTION_NONE = 0x00000000;
enum COOKIEACTION_ACCEPT = 0x00000001;
enum COOKIEACTION_REJECT = 0x00000002;
enum COOKIEACTION_DOWNGRADE = 0x00000004;
enum COOKIEACTION_LEASH = 0x00000008;
enum COOKIEACTION_SUPPRESS = 0x00000010;
enum COOKIEACTION_READ = 0x00000020;
enum PRIVACY_URLISTOPLEVEL = 0x00010000;
enum PRIVACY_URLHASCOMPACTPOLICY = 0x00020000;
enum PRIVACY_URLHASPOSTDATA = 0x00080000;
enum PRIVACY_URLHASPOLICYREFLINK = 0x00100000;
enum PRIVACY_URLHASPOLICYREFHEADER = 0x00200000;
enum PRIVACY_URLHASP3PHEADER = 0x00400000;
enum DEBUGCALLBACKNOTIFICATION_TIMEOUT = 0x00000001;
enum DEBUGCALLBACKNOTIFICATION_INTERVAL = 0x00000002;
enum DEBUGCALLBACKNOTIFICATION_IMMEDIATE = 0x00000004;
enum DEBUGCALLBACKNOTIFICATION_ANIMATIONFRAME = 0x00000008;
enum DEBUGCALLBACKNOTIFICATION_DOMEVENT = 0x00000010;
enum DEBUGDOMEVENTPROPAGATIONSTATUS_DEFAULTCANCELED = 0x00000001;
enum DEBUGDOMEVENTPROPAGATIONSTATUS_STOPIMMEDIATEPROPAGATION = 0x00000002;
enum DEBUGDOMEVENTPROPAGATIONSTATUS_STOPPROPAGATION = 0x00000004;
enum DISPID_BEFORENAVIGATE = 0x00000064;
enum DISPID_NAVIGATECOMPLETE = 0x00000065;
enum DISPID_STATUSTEXTCHANGE = 0x00000066;
enum DISPID_QUIT = 0x00000067;
enum DISPID_DOWNLOADCOMPLETE = 0x00000068;
enum DISPID_COMMANDSTATECHANGE = 0x00000069;
enum DISPID_DOWNLOADBEGIN = 0x0000006a;
enum DISPID_NEWWINDOW = 0x0000006b;
enum DISPID_PROGRESSCHANGE = 0x0000006c;
enum DISPID_WINDOWMOVE = 0x0000006d;
enum DISPID_WINDOWRESIZE = 0x0000006e;
enum DISPID_WINDOWACTIVATE = 0x0000006f;
enum DISPID_PROPERTYCHANGE = 0x00000070;
enum DISPID_TITLECHANGE = 0x00000071;
enum DISPID_TITLEICONCHANGE = 0x00000072;
enum DISPID_FRAMEBEFORENAVIGATE = 0x000000c8;
enum DISPID_FRAMENAVIGATECOMPLETE = 0x000000c9;
enum DISPID_FRAMENEWWINDOW = 0x000000cc;
enum DISPID_BEFORENAVIGATE2 = 0x000000fa;
enum DISPID_NEWWINDOW2 = 0x000000fb;
enum DISPID_NAVIGATECOMPLETE2 = 0x000000fc;
enum DISPID_ONQUIT = 0x000000fd;
enum DISPID_ONVISIBLE = 0x000000fe;
enum DISPID_ONTOOLBAR = 0x000000ff;
enum DISPID_ONMENUBAR = 0x00000100;
enum DISPID_ONSTATUSBAR = 0x00000101;
enum DISPID_ONFULLSCREEN = 0x00000102;
enum DISPID_DOCUMENTCOMPLETE = 0x00000103;
enum DISPID_ONTHEATERMODE = 0x00000104;
enum DISPID_ONADDRESSBAR = 0x00000105;
enum DISPID_WINDOWSETRESIZABLE = 0x00000106;
enum DISPID_WINDOWCLOSING = 0x00000107;
enum DISPID_WINDOWSETLEFT = 0x00000108;
enum DISPID_WINDOWSETTOP = 0x00000109;
enum DISPID_WINDOWSETWIDTH = 0x0000010a;
enum DISPID_WINDOWSETHEIGHT = 0x0000010b;
enum DISPID_CLIENTTOHOSTWINDOW = 0x0000010c;
enum DISPID_SETSECURELOCKICON = 0x0000010d;
enum DISPID_FILEDOWNLOAD = 0x0000010e;
enum DISPID_NAVIGATEERROR = 0x0000010f;
enum DISPID_PRIVACYIMPACTEDSTATECHANGE = 0x00000110;
enum DISPID_NEWWINDOW3 = 0x00000111;
enum DISPID_VIEWUPDATE = 0x00000119;
enum DISPID_SETPHISHINGFILTERSTATUS = 0x0000011a;
enum DISPID_WINDOWSTATECHANGED = 0x0000011b;
enum DISPID_NEWPROCESS = 0x0000011c;
enum DISPID_THIRDPARTYURLBLOCKED = 0x0000011d;
enum DISPID_REDIRECTXDOMAINBLOCKED = 0x0000011e;
enum DISPID_WEBWORKERSTARTED = 0x00000120;
enum DISPID_WEBWORKERFINISHED = 0x00000121;
enum DISPID_BEFORESCRIPTEXECUTE = 0x00000122;
enum DISPID_PRINTTEMPLATEINSTANTIATION = 0x000000e1;
enum DISPID_PRINTTEMPLATETEARDOWN = 0x000000e2;
enum DISPID_UPDATEPAGESTATUS = 0x000000e3;
enum DISPID_WINDOWREGISTERED = 0x000000c8;
enum DISPID_WINDOWREVOKED = 0x000000c9;
enum DISPID_RESETFIRSTBOOTMODE = 0x00000001;
enum DISPID_RESETSAFEMODE = 0x00000002;
enum DISPID_REFRESHOFFLINEDESKTOP = 0x00000003;
enum DISPID_ADDFAVORITE = 0x00000004;
enum DISPID_ADDCHANNEL = 0x00000005;
enum DISPID_ADDDESKTOPCOMPONENT = 0x00000006;
enum DISPID_ISSUBSCRIBED = 0x00000007;
enum DISPID_NAVIGATEANDFIND = 0x00000008;
enum DISPID_IMPORTEXPORTFAVORITES = 0x00000009;
enum DISPID_AUTOCOMPLETESAVEFORM = 0x0000000a;
enum DISPID_AUTOSCAN = 0x0000000b;
enum DISPID_AUTOCOMPLETEATTACH = 0x0000000c;
enum DISPID_SHOWBROWSERUI = 0x0000000d;
enum DISPID_ADDSEARCHPROVIDER = 0x0000000e;
enum DISPID_RUNONCESHOWN = 0x0000000f;
enum DISPID_SKIPRUNONCE = 0x00000010;
enum DISPID_CUSTOMIZESETTINGS = 0x00000011;
enum DISPID_SQMENABLED = 0x00000012;
enum DISPID_PHISHINGENABLED = 0x00000013;
enum DISPID_BRANDIMAGEURI = 0x00000014;
enum DISPID_SKIPTABSWELCOME = 0x00000015;
enum DISPID_DIAGNOSECONNECTION = 0x00000016;
enum DISPID_CUSTOMIZECLEARTYPE = 0x00000017;
enum DISPID_ISSEARCHPROVIDERINSTALLED = 0x00000018;
enum DISPID_ISSEARCHMIGRATED = 0x00000019;
enum DISPID_DEFAULTSEARCHPROVIDER = 0x0000001a;
enum DISPID_RUNONCEREQUIREDSETTINGSCOMPLETE = 0x0000001b;
enum DISPID_RUNONCEHASSHOWN = 0x0000001c;
enum DISPID_SEARCHGUIDEURL = 0x0000001d;
enum DISPID_ADDSERVICE = 0x0000001e;
enum DISPID_ISSERVICEINSTALLED = 0x0000001f;
enum DISPID_ADDTOFAVORITESBAR = 0x00000020;
enum DISPID_BUILDNEWTABPAGE = 0x00000021;
enum DISPID_SETRECENTLYCLOSEDVISIBLE = 0x00000022;
enum DISPID_SETACTIVITIESVISIBLE = 0x00000023;
enum DISPID_CONTENTDISCOVERYRESET = 0x00000024;
enum DISPID_INPRIVATEFILTERINGENABLED = 0x00000025;
enum DISPID_SUGGESTEDSITESENABLED = 0x00000026;
enum DISPID_ENABLESUGGESTEDSITES = 0x00000027;
enum DISPID_NAVIGATETOSUGGESTEDSITES = 0x00000028;
enum DISPID_SHOWTABSHELP = 0x00000029;
enum DISPID_SHOWINPRIVATEHELP = 0x0000002a;
enum DISPID_ISSITEMODE = 0x0000002b;
enum DISPID_SETSITEMODEICONOVERLAY = 0x0000002c;
enum DISPID_CLEARSITEMODEICONOVERLAY = 0x0000002d;
enum DISPID_UPDATETHUMBNAILBUTTON = 0x0000002e;
enum DISPID_SETTHUMBNAILBUTTONS = 0x0000002f;
enum DISPID_ADDTHUMBNAILBUTTONS = 0x00000030;
enum DISPID_ADDSITEMODE = 0x00000031;
enum DISPID_SETSITEMODEPROPERTIES = 0x00000032;
enum DISPID_SITEMODECREATEJUMPLIST = 0x00000033;
enum DISPID_SITEMODEADDJUMPLISTITEM = 0x00000034;
enum DISPID_SITEMODECLEARJUMPLIST = 0x00000035;
enum DISPID_SITEMODEADDBUTTONSTYLE = 0x00000036;
enum DISPID_SITEMODESHOWBUTTONSTYLE = 0x00000037;
enum DISPID_SITEMODESHOWJUMPLIST = 0x00000038;
enum DISPID_ADDTRACKINGPROTECTIONLIST = 0x00000039;
enum DISPID_SITEMODEACTIVATE = 0x0000003a;
enum DISPID_ISSITEMODEFIRSTRUN = 0x0000003b;
enum DISPID_TRACKINGPROTECTIONENABLED = 0x0000003c;
enum DISPID_ACTIVEXFILTERINGENABLED = 0x0000003d;
enum DISPID_PROVISIONNETWORKS = 0x0000003e;
enum DISPID_REPORTSAFEURL = 0x0000003f;
enum DISPID_SITEMODEREFRESHBADGE = 0x00000040;
enum DISPID_SITEMODECLEARBADGE = 0x00000041;
enum DISPID_DIAGNOSECONNECTIONUILESS = 0x00000042;
enum DISPID_LAUNCHNETWORKCLIENTHELP = 0x00000043;
enum DISPID_CHANGEDEFAULTBROWSER = 0x00000044;
enum DISPID_STOPPERIODICUPDATE = 0x00000045;
enum DISPID_STARTPERIODICUPDATE = 0x00000046;
enum DISPID_CLEARNOTIFICATION = 0x00000047;
enum DISPID_ENABLENOTIFICATIONQUEUE = 0x00000048;
enum DISPID_PINNEDSITESTATE = 0x00000049;
enum DISPID_LAUNCHINTERNETOPTIONS = 0x0000004a;
enum DISPID_STARTPERIODICUPDATEBATCH = 0x0000004b;
enum DISPID_ENABLENOTIFICATIONQUEUESQUARE = 0x0000004c;
enum DISPID_ENABLENOTIFICATIONQUEUEWIDE = 0x0000004d;
enum DISPID_ENABLENOTIFICATIONQUEUELARGE = 0x0000004e;
enum DISPID_SCHEDULEDTILENOTIFICATION = 0x0000004f;
enum DISPID_REMOVESCHEDULEDTILENOTIFICATION = 0x00000050;
enum DISPID_STARTBADGEUPDATE = 0x00000051;
enum DISPID_STOPBADGEUPDATE = 0x00000052;
enum DISPID_ISMETAREFERRERAVAILABLE = 0x00000053;
enum DISPID_SETEXPERIMENTALFLAG = 0x00000054;
enum DISPID_GETEXPERIMENTALFLAG = 0x00000055;
enum DISPID_SETEXPERIMENTALVALUE = 0x00000056;
enum DISPID_GETEXPERIMENTALVALUE = 0x00000057;
enum DISPID_HASNEEDIEAUTOLAUNCHFLAG = 0x00000058;
enum DISPID_GETNEEDIEAUTOLAUNCHFLAG = 0x00000059;
enum DISPID_SETNEEDIEAUTOLAUNCHFLAG = 0x0000005a;
enum DISPID_LAUNCHIE = 0x0000005b;
enum DISPID_RESETEXPERIMENTALFLAGS = 0x0000005c;
enum DISPID_GETCVLISTDATA = 0x0000005d;
enum DISPID_GETCVLISTLOCALDATA = 0x0000005e;
enum DISPID_GETEMIELISTDATA = 0x0000005f;
enum DISPID_GETEMIELISTLOCALDATA = 0x00000060;
enum DISPID_OPENFAVORITESPANE = 0x00000061;
enum DISPID_OPENFAVORITESSETTINGS = 0x00000062;
enum DISPID_LAUNCHINHVSI = 0x00000063;
enum DISPID_GETNEEDHVSIAUTOLAUNCHFLAG = 0x00000064;
enum DISPID_SETNEEDHVSIAUTOLAUNCHFLAG = 0x00000065;
enum DISPID_HASNEEDHVSIAUTOLAUNCHFLAG = 0x00000066;
enum DISPID_GETOSSKU = 0x00000067;
enum DISPID_SETMSDEFAULTS = 0x00000068;
enum DISPID_SHELLUIHELPERLAST = 0x00000069;
enum DISPID_ADVANCEERROR = 0x0000000a;
enum DISPID_RETREATERROR = 0x0000000b;
enum DISPID_CANADVANCEERROR = 0x0000000c;
enum DISPID_CANRETREATERROR = 0x0000000d;
enum DISPID_GETERRORLINE = 0x0000000e;
enum DISPID_GETERRORCHAR = 0x0000000f;
enum DISPID_GETERRORCODE = 0x00000010;
enum DISPID_GETERRORMSG = 0x00000011;
enum DISPID_GETERRORURL = 0x00000012;
enum DISPID_GETDETAILSSTATE = 0x00000013;
enum DISPID_SETDETAILSSTATE = 0x00000014;
enum DISPID_GETPERERRSTATE = 0x00000015;
enum DISPID_SETPERERRSTATE = 0x00000016;
enum DISPID_GETALWAYSSHOWLOCKSTATE = 0x00000017;
enum DISPID_FAVSELECTIONCHANGE = 0x00000001;
enum DISPID_SELECTIONCHANGE = 0x00000002;
enum DISPID_DOUBLECLICK = 0x00000003;
enum DISPID_INITIALIZED = 0x00000004;
enum DISPID_MOVESELECTIONUP = 0x00000001;
enum DISPID_MOVESELECTIONDOWN = 0x00000002;
enum DISPID_RESETSORT = 0x00000003;
enum DISPID_NEWFOLDER = 0x00000004;
enum DISPID_SYNCHRONIZE = 0x00000005;
enum DISPID_IMPORT = 0x00000006;
enum DISPID_EXPORT = 0x00000007;
enum DISPID_INVOKECONTEXTMENU = 0x00000008;
enum DISPID_MOVESELECTIONTO = 0x00000009;
enum DISPID_SUBSCRIPTIONSENABLED = 0x0000000a;
enum DISPID_CREATESUBSCRIPTION = 0x0000000b;
enum DISPID_DELETESUBSCRIPTION = 0x0000000c;
enum DISPID_SETROOT = 0x0000000d;
enum DISPID_ENUMOPTIONS = 0x0000000e;
enum DISPID_SELECTEDITEM = 0x0000000f;
enum DISPID_ROOT = 0x00000010;
enum DISPID_DEPTH = 0x00000011;
enum DISPID_MODE = 0x00000012;
enum DISPID_FLAGS = 0x00000013;
enum DISPID_TVFLAGS = 0x00000014;
enum DISPID_NSCOLUMNS = 0x00000015;
enum DISPID_COUNTVIEWTYPES = 0x00000016;
enum DISPID_SETVIEWTYPE = 0x00000017;
enum DISPID_SELECTEDITEMS = 0x00000018;
enum DISPID_EXPAND = 0x00000019;
enum DISPID_UNSELECTALL = 0x0000001a;
enum TF_NAVIGATE = 0x7faeabac;
enum TARGET_NOTIFY_OBJECT_NAME = "863a99a0-21bc-11d0-82b4-00a0c90c29c5";
enum IEPROCESS_MODULE_NAME = "IERtUtil.dll";
enum IEGetProcessModule_PROC_NAME = "IEGetProcessModule";
enum IEGetTabWindowExports_PROC_NAME = "IEGetTabWindowExports";
enum TSZMICROSOFTPATH = "Software\\Microsoft";
enum SZ_IE_MAIN = "Main";
enum REGSTR_VAL_SMOOTHSCROLL = "SmoothScroll";
enum REGSTR_VAL_SMOOTHSCROLL_DEF = 0x00000001;
enum REGSTR_VAL_SHOWTOOLBAR = "Show_ToolBar";
enum REGSTR_VAL_SHOWADDRESSBAR = "Show_URLToolBar";
enum REGSTR_VAL_STARTPAGE = "Start Page";
enum REGSTRA_VAL_STARTPAGE = "Start Page";
enum REGSTR_VAL_SEARCHPAGE = "Search Page";
enum REGSTR_VAL_LOCALPAGE = "Local Page";
enum REGSTR_VAL_USESTYLESHEETS = "Use Stylesheets";
enum REGSTR_VAL_USESTYLESHEETS_DEF = "yes";
enum REGSTR_VAL_USEICM = "UseICM";
enum REGSTR_VAL_USEICM_DEF = 0x00000000;
enum REGSTR_VAL_SHOWFOCUS = "Tabstop - MouseDown";
enum REGSTR_VAL_SHOWFOCUS_DEF = "no";
enum REGSTR_VAL_LOADIMAGES = "Display Inline Images";
enum REGSTR_VAL_PLAYSOUNDS = "Play_Background_Sounds";
enum REGSTR_VAL_PLAYVIDEOS = "Display Inline Videos";
enum REGSTR_VAL_ANCHORUNDERLINE = "Anchor Underline";
enum REGSTR_VAL_USEDLGCOLORS = "Use_DlgBox_Colors";
enum REGSTR_VAL_CHECKASSOC = "Check_Associations";
enum REGSTR_VAL_SHOWFULLURLS = "Show_FullURL";
enum REGSTR_VAL_AUTOSEARCH = "Do404Search";
enum REGSTR_VAL_AUTONAVIGATE = "SearchForExtensions";
enum REGSTR_VAL_HTTP_ERRORS = "Friendly http errors";
enum REGSTR_VAL_USEIBAR = "UseBar";
enum SZ_IE_SETTINGS = "Settings";
enum REGSTR_VAL_IE_CUSTOMCOLORS = "Custom Colors";
enum REGSTR_VAL_ANCHORCOLOR = "Anchor Color";
enum REGSTR_VAL_ANCHORCOLORVISITED = "Anchor Color Visited";
enum REGSTR_VAL_BACKGROUNDCOLOR = "Background Color";
enum REGSTR_VAL_TEXTCOLOR = "Text Color";
enum REGSTR_VAL_ANCHORCOLORHOVER = "Anchor Color Hover";
enum REGSTR_VAL_USEHOVERCOLOR = "Use Anchor Hover Color";
enum SZ_IE_SECURITY = "Security";
enum REGSTR_VAL_SAFETYWARNINGLEVEL = "Safety Warning Level";
enum SZ_IE_DEFAULT_HTML_EDITOR = "Default HTML Editor";
enum REGSTR_VAL_USEAUTOAPPEND = "Append Completion";
enum REGSTR_VAL_USEAUTOSUGGEST = "AutoSuggest";
enum REGSTR_VAL_USEAUTOCOMPLETE = "Use AutoComplete";
enum SZ_IE_IBAR = "Bar";
enum SZ_IE_IBAR_BANDS = "Bands";
enum REGSTR_VAL_USERAGENT = "User Agent";
enum REGSTR_VAL_INTERNETENTRY = "InternetProfile";
enum REGSTR_VAL_INTERNETPROFILE = "InternetProfile";
enum REGSTR_VAL_INTERNETENTRYBKUP = "BackupInternetProfile";
enum REGSTR_VAL_CODEDOWNLOAD = "Code Download";
enum REGSTR_VAL_CODEDOWNLOAD_DEF = "yes";
enum REGSTR_PATH_INETCPL_RESTRICTIONS = "Software\\Policies\\Microsoft\\Internet Explorer\\Control Panel";
enum REGSTR_VAL_INETCPL_GENERALTAB = "GeneralTab";
enum REGSTR_VAL_INETCPL_SECURITYTAB = "SecurityTab";
enum REGSTR_VAL_INETCPL_CONTENTTAB = "ContentTab";
enum REGSTR_VAL_INETCPL_CONNECTIONSTAB = "ConnectionsTab";
enum REGSTR_VAL_INETCPL_PROGRAMSTAB = "ProgramsTab";
enum REGSTR_VAL_INETCPL_ADVANCEDTAB = "AdvancedTab";
enum REGSTR_VAL_INETCPL_PRIVACYTAB = "PrivacyTab";
enum REGSTR_VAL_INETCPL_IEAK = "IEAKContext";
enum REGSTR_VAL_DIRECTORY = "Directory";
enum REGSTR_VAL_NEWDIRECTORY = "NewDirectory";
enum REGSTR_VAL_CACHEPREFIX = "CachePrefix";
enum SZ_IE_SEARCHSTRINGS = "UrlTemplate";
enum MAX_SEARCH_FORMAT_STRING = 0x000000ff;
enum SZ_IE_THRESHOLDS = "ErrorThresholds";
enum REGSTR_VAL_ACCESSMEDIUM = "AccessMedium";
enum REGSTR_VAL_ACCESSTYPE = "AccessType";
enum REGSTR_VAL_AUTODIALDLLNAME = "AutodialDllName";
enum REGSTR_VAL_AUTODIALFCNNAME = "AutodialFcnName";
enum REGSTR_VAL_AUTODIAL_MONITORCLASSNAME = "MS_AutodialMonitor";
enum REGSTR_VAL_AUTODIAL_TRYONLYONCE = "TryAutodialOnce";
enum REGSTR_PATH_REMOTEACCESS = "RemoteAccess";
enum REGSTR_PATH_REMOTEACESS = "RemoteAccess";
enum REGSTR_VAL_RNAINSTALLED = "Installed";
enum REGSTR_VAL_ENABLEAUTODIAL = "EnableAutodial";
enum REGSTR_VAL_ENABLEUNATTENDED = "EnableUnattended";
enum REGSTR_VAL_NONETAUTODIAL = "NoNetAutodial";
enum REGSTR_VAL_REDIALATTEMPTS = "RedialAttempts";
enum REGSTR_VAL_REDIALINTERVAL = "RedialWait";
enum REGSTR_VAL_ENABLEAUTODIALDISCONNECT = "EnableAutodisconnect";
enum REGSTR_VAL_ENABLEAUTODISCONNECT = "EnableAutodisconnect";
enum REGSTR_VAL_ENABLEEXITDISCONNECT = "EnableExitDisconnect";
enum REGSTR_VAL_ENABLESECURITYCHECK = "EnableSecurityCheck";
enum REGSTR_VAL_COVEREXCLUDE = "CoverExclude";
enum REGSTR_VAL_DISCONNECTIDLETIME = "DisconnectIdleTime";
enum REGSTR_VAL_MOSDISCONNECT = "DisconnectTimeout";
enum REGSTR_VAL_PROXYENABLE = "ProxyEnable";
enum REGSTR_VAL_PROXYSERVER = "ProxyServer";
enum REGSTR_VAL_PROXYOVERRIDE = "ProxyOverride";
enum REGSTR_VAL_BYPASSAUTOCONFIG = "BypassAutoconfig";
enum SZTRUSTWARNLEVEL = "Trust Warning Level";
enum REGSTR_VAL_TRUSTWARNINGLEVEL_HIGH = "High";
enum REGSTR_VAL_TRUSTWARNINGLEVEL_MED = "Medium";
enum REGSTR_VAL_TRUSTWARNINGLEVEL_LOW = "No Security";
enum REGSTR_VAL_SECURITYWARNONSEND = "WarnOnPost";
enum REGSTR_VAL_SECURITYWARNONSEND_DEF = 0x00000001;
enum REGSTR_VAL_SECURITYWARNONSENDALWAYS = "WarnAlwaysOnPost";
enum REGSTR_VAL_SECURITYWARNONSENDALWAYS_DEF = 0x00000001;
enum REGSTR_VAL_SECURITYWARNONVIEW = "WarnOnView";
enum REGSTR_VAL_SECURITYWARNONVIEW_DEF = 0x00000001;
enum REGSTR_VAL_SECURITYALLOWCOOKIES = "AllowCookies";
enum REGSTR_VAL_SECURITYALLOWCOOKIES_DEF = 0x00000001;
enum REGSTR_VAL_SECURITYWARNONZONECROSSING = "WarnOnZoneCrossing";
enum REGSTR_VAL_SECURITYWARNONZONECROSSING_DEF = 0x00000001;
enum REGSTR_VAL_SECURITYWARNONBADCERTVIEWING = "WarnOnBadCertRecving";
enum REGSTR_VAL_SECURITYWARNONBADCERTVIEWING_DEF = 0x00000001;
enum REGSTR_VAL_SECURITYWARNONBADCERTSENDING = "WarnOnBadCertSending";
enum REGSTR_VAL_SECURITYWARNONBADCERTSENDING_DEF = 0x00000001;
enum REGSTR_VAL_SECURITYDISABLECACHINGOFSSLPAGES = "DisableCachingOfSSLPages";
enum REGSTR_VAL_SECURITYDISABLECACHINGOFSSLPAGES_DEF = 0x00000000;
enum REGSTR_VAL_SECURITYACTIVEX = "Security_RunActiveXControls";
enum REGSTR_VAL_SECURITYACTIVEX_DEF = 0x00000001;
enum REGSTR_VAL_SECURITYACTICEXSCRIPTS = "Security_RunScripts";
enum REGSTR_VAL_SECURITYACTICEXSCRIPTS_DEF = 0x00000001;
enum REGSTR_VAL_SECURITYJAVA = "Security_RunJavaApplets";
enum REGSTR_VAL_SECURITYJAVA_DEF = 0x00000001;
enum SZJAVAVMPATH = "\\Java VM";
enum REGSTR_VAL_JAVAJIT = "EnableJIT";
enum REGSTR_VAL_JAVAJIT_DEF = 0x00000000;
enum REGSTR_VAL_JAVALOGGING = "EnableLogging";
enum REGSTR_VAL_JAVALOGGING_DEF = 0x00000000;
enum SZTOOLBAR = "\\Toolbar";
enum REGSTR_VAL_DAYSTOKEEP = "DaysToKeep";
enum SZNOTEXT = "NoText";
enum SZVISIBLE = "VisibleBands";
enum REGSTR_VAL_VISIBLEBANDS = "VisibleBands";
enum REGSTR_VAL_VISIBLEBANDS_DEF = 0x00000007;
enum TOOLSBAND = 0x00000001;
enum ADDRESSBAND = 0x00000002;
enum LINKSBAND = 0x00000004;
enum SZBACKBITMAP = "BackBitmap";
enum REGSTR_VAL_BACKBITMAP = "BackBitmap";
enum REGSTR_SHIFTQUICKSUFFIX = "ShiftQuickCompleteSuffix";
enum TSZSCHANNELPATH = "SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL";
enum REGSTR_VAL_SCHANNELENABLEPROTOCOL = "Enabled";
enum REGSTR_VAL_SCHANNELENABLEPROTOCOL_DEF = 0x00000001;
enum TSZINTERNETCLIENTSPATH = "Software\\Microsoft\\Internet Explorer\\Unix";
enum REGSTR_PATH_DEFAULT = "default";
enum REGSTR_PATH_CURRENT = "current";
enum IE_USE_OE_PRESENT_HKEY = 0xffffffff80000002;
enum IE_USE_OE_PRESENT_KEY = "Software\\Microsoft\\Windows\\CurrentVersion\\app.paths\\msimn.exe";
enum IE_USE_OE_MAIL_HKEY = 0xffffffff80000001;
enum IE_USE_OE_MAIL_KEY = "Software\\Microsoft\\Internet Explorer\\Mail";
enum IE_USE_OE_MAIL_VALUE = "Use Outlook Express";
enum IE_USE_OE_NEWS_HKEY = 0xffffffff80000001;
enum IE_USE_OE_NEWS_KEY = "Software\\Microsoft\\Internet Explorer\\News";
enum IE_USE_OE_NEWS_VALUE = "Use Outlook Express";
enum TSZPROTOCOLSPATH = "Protocols\\";
enum TSZMAILTOPROTOCOL = "mailto";
enum TSZNEWSPROTOCOL = "news";
enum TSZCALLTOPROTOCOL = "callto";
enum TSZLDAPPROTOCOL = "ldap";
enum TSZCALENDARPROTOCOL = "unk";
enum TSZVSOURCEPROTOCOL = "view source";
enum REGSTR_VAL_DEFAULT_CODEPAGE = "Default_CodePage";
enum REGSTR_VAL_DEFAULT_SCRIPT = "Default_Script";
enum REGSTR_VAL_ACCEPT_LANGUAGE = "AcceptLanguage";
enum REGSTR_VAL_FONT_SCRIPTS = "Scripts";
enum REGSTR_VAL_FONT_SCRIPT = "Script";
enum REGSTR_VAL_FONT_SCRIPT_NAME = "Script";
enum REGSTR_VAL_DEF_ENCODING = "Default_Encoding";
enum REGSTR_VAL_DEF_INETENCODING = "Default_InternetEncoding";
enum REGSTR_VAL_FIXED_FONT = "IEFixedFontName";
enum REGSTR_VAL_SCRIPT_FIXED_FONT = "IEFixedFontName";
enum REGSTR_VAL_PROP_FONT = "IEPropFontName";
enum REGSTR_VAL_SCRIPT_PROP_FONT = "IEPropFontName";
enum REGSTR_VAL_FONT_SIZE = "IEFontSize";
enum REGSTR_VAL_FONT_SIZE_DEF = 0x00000002;
enum REGSTR_VAL_AUTODETECT = "AutoDetect";
enum REGSTR_PATH_MIME_DATABASE = "MIME\\Database";
enum REGSTR_VAL_CODEPAGE = "CodePage";
enum REGSTR_VAL_INETENCODING = "InternetEncoding";
enum REGSTR_VAL_FAMILY = "Family";
enum REGSTR_VAL_LEVEL = "Level";
enum REGSTR_VAL_ALIASTO = "AliasForCharset";
enum REGSTR_VAL_ENCODENAME = "EncodingName";
enum REGSTR_VAL_DESCRIPTION = "Description";
enum REGSTR_VAL_WEBCHARSET = "WebCharset";
enum REGSTR_VAL_BODYCHARSET = "BodyCharset";
enum REGSTR_VAL_HEADERCHARSET = "HeaderCharset";
enum REGSTR_VAL_FIXEDWIDTHFONT = "FixedWidthFont";
enum REGSTR_VAL_PROPORTIONALFONT = "ProportionalFont";
enum REGSTR_VAL_PRIVCONVERTER = "PrivConverter";
enum IDM_UNKNOWN = 0x00000000;
enum IDM_ALIGNBOTTOM = 0x00000001;
enum IDM_ALIGNHORIZONTALCENTERS = 0x00000002;
enum IDM_ALIGNLEFT = 0x00000003;
enum IDM_ALIGNRIGHT = 0x00000004;
enum IDM_ALIGNTOGRID = 0x00000005;
enum IDM_ALIGNTOP = 0x00000006;
enum IDM_ALIGNVERTICALCENTERS = 0x00000007;
enum IDM_ARRANGEBOTTOM = 0x00000008;
enum IDM_ARRANGERIGHT = 0x00000009;
enum IDM_BRINGFORWARD = 0x0000000a;
enum IDM_BRINGTOFRONT = 0x0000000b;
enum IDM_CENTERHORIZONTALLY = 0x0000000c;
enum IDM_CENTERVERTICALLY = 0x0000000d;
enum IDM_CODE = 0x0000000e;
enum IDM_DELETE = 0x00000011;
enum IDM_FONTNAME = 0x00000012;
enum IDM_FONTSIZE = 0x00000013;
enum IDM_GROUP = 0x00000014;
enum IDM_HORIZSPACECONCATENATE = 0x00000015;
enum IDM_HORIZSPACEDECREASE = 0x00000016;
enum IDM_HORIZSPACEINCREASE = 0x00000017;
enum IDM_HORIZSPACEMAKEEQUAL = 0x00000018;
enum IDM_INSERTOBJECT = 0x00000019;
enum IDM_MULTILEVELREDO = 0x0000001e;
enum IDM_SENDBACKWARD = 0x00000020;
enum IDM_SENDTOBACK = 0x00000021;
enum IDM_SHOWTABLE = 0x00000022;
enum IDM_SIZETOCONTROL = 0x00000023;
enum IDM_SIZETOCONTROLHEIGHT = 0x00000024;
enum IDM_SIZETOCONTROLWIDTH = 0x00000025;
enum IDM_SIZETOFIT = 0x00000026;
enum IDM_SIZETOGRID = 0x00000027;
enum IDM_SNAPTOGRID = 0x00000028;
enum IDM_TABORDER = 0x00000029;
enum IDM_TOOLBOX = 0x0000002a;
enum IDM_MULTILEVELUNDO = 0x0000002c;
enum IDM_UNGROUP = 0x0000002d;
enum IDM_VERTSPACECONCATENATE = 0x0000002e;
enum IDM_VERTSPACEDECREASE = 0x0000002f;
enum IDM_VERTSPACEINCREASE = 0x00000030;
enum IDM_VERTSPACEMAKEEQUAL = 0x00000031;
enum IDM_JUSTIFYFULL = 0x00000032;
enum IDM_BACKCOLOR = 0x00000033;
enum IDM_BOLD = 0x00000034;
enum IDM_BORDERCOLOR = 0x00000035;
enum IDM_FLAT = 0x00000036;
enum IDM_FORECOLOR = 0x00000037;
enum IDM_ITALIC = 0x00000038;
enum IDM_JUSTIFYCENTER = 0x00000039;
enum IDM_JUSTIFYGENERAL = 0x0000003a;
enum IDM_JUSTIFYLEFT = 0x0000003b;
enum IDM_JUSTIFYRIGHT = 0x0000003c;
enum IDM_RAISED = 0x0000003d;
enum IDM_SUNKEN = 0x0000003e;
enum IDM_UNDERLINE = 0x0000003f;
enum IDM_CHISELED = 0x00000040;
enum IDM_ETCHED = 0x00000041;
enum IDM_SHADOWED = 0x00000042;
enum IDM_FIND = 0x00000043;
enum IDM_SHOWGRID = 0x00000045;
enum IDM_OBJECTVERBLIST0 = 0x00000048;
enum IDM_OBJECTVERBLIST1 = 0x00000049;
enum IDM_OBJECTVERBLIST2 = 0x0000004a;
enum IDM_OBJECTVERBLIST3 = 0x0000004b;
enum IDM_OBJECTVERBLIST4 = 0x0000004c;
enum IDM_OBJECTVERBLIST5 = 0x0000004d;
enum IDM_OBJECTVERBLIST6 = 0x0000004e;
enum IDM_OBJECTVERBLIST7 = 0x0000004f;
enum IDM_OBJECTVERBLIST8 = 0x00000050;
enum IDM_OBJECTVERBLIST9 = 0x00000051;
enum IDM_OBJECTVERBLISTLAST = 0x00000051;
enum IDM_CONVERTOBJECT = 0x00000052;
enum IDM_CUSTOMCONTROL = 0x00000053;
enum IDM_CUSTOMIZEITEM = 0x00000054;
enum IDM_RENAME = 0x00000055;
enum IDM_IMPORT = 0x00000056;
enum IDM_NEWPAGE = 0x00000057;
enum IDM_MOVE = 0x00000058;
enum IDM_CANCEL = 0x00000059;
enum IDM_FONT = 0x0000005a;
enum IDM_STRIKETHROUGH = 0x0000005b;
enum IDM_DELETEWORD = 0x0000005c;
enum IDM_EXECPRINT = 0x0000005d;
enum IDM_JUSTIFYNONE = 0x0000005e;
enum IDM_TRISTATEBOLD = 0x0000005f;
enum IDM_TRISTATEITALIC = 0x00000060;
enum IDM_TRISTATEUNDERLINE = 0x00000061;
enum IDM_FORWARDDELETE = 0x00000062;
enum IDM_FOLLOW_ANCHOR = 0x000007d8;
enum IDM_INSINPUTIMAGE = 0x00000842;
enum IDM_INSINPUTBUTTON = 0x00000843;
enum IDM_INSINPUTRESET = 0x00000844;
enum IDM_INSINPUTSUBMIT = 0x00000845;
enum IDM_INSINPUTUPLOAD = 0x00000846;
enum IDM_INSFIELDSET = 0x00000847;
enum IDM_PASTEINSERT = 0x00000848;
enum IDM_REPLACE = 0x00000849;
enum IDM_EDITSOURCE = 0x0000084a;
enum IDM_BOOKMARK = 0x0000084b;
enum IDM_HYPERLINK = 0x0000084c;
enum IDM_UNLINK = 0x0000084d;
enum IDM_BROWSEMODE = 0x0000084e;
enum IDM_EDITMODE = 0x0000084f;
enum IDM_UNBOOKMARK = 0x00000850;
enum IDM_TOOLBARS = 0x00000852;
enum IDM_STATUSBAR = 0x00000853;
enum IDM_FORMATMARK = 0x00000854;
enum IDM_TEXTONLY = 0x00000855;
enum IDM_OPTIONS = 0x00000857;
enum IDM_FOLLOWLINKC = 0x00000858;
enum IDM_FOLLOWLINKN = 0x00000859;
enum IDM_VIEWSOURCE = 0x0000085b;
enum IDM_ZOOMPOPUP = 0x0000085c;
enum IDM_BASELINEFONT1 = 0x0000085d;
enum IDM_BASELINEFONT2 = 0x0000085e;
enum IDM_BASELINEFONT3 = 0x0000085f;
enum IDM_BASELINEFONT4 = 0x00000860;
enum IDM_BASELINEFONT5 = 0x00000861;
enum IDM_HORIZONTALLINE = 0x00000866;
enum IDM_LINEBREAKNORMAL = 0x00000867;
enum IDM_LINEBREAKLEFT = 0x00000868;
enum IDM_LINEBREAKRIGHT = 0x00000869;
enum IDM_LINEBREAKBOTH = 0x0000086a;
enum IDM_NONBREAK = 0x0000086b;
enum IDM_SPECIALCHAR = 0x0000086c;
enum IDM_HTMLSOURCE = 0x0000086d;
enum IDM_IFRAME = 0x0000086e;
enum IDM_HTMLCONTAIN = 0x0000086f;
enum IDM_TEXTBOX = 0x00000871;
enum IDM_TEXTAREA = 0x00000872;
enum IDM_CHECKBOX = 0x00000873;
enum IDM_RADIOBUTTON = 0x00000874;
enum IDM_DROPDOWNBOX = 0x00000875;
enum IDM_LISTBOX = 0x00000876;
enum IDM_BUTTON = 0x00000877;
enum IDM_IMAGE = 0x00000878;
enum IDM_OBJECT = 0x00000879;
enum IDM_1D = 0x0000087a;
enum IDM_IMAGEMAP = 0x0000087b;
enum IDM_FILE = 0x0000087c;
enum IDM_COMMENT = 0x0000087d;
enum IDM_SCRIPT = 0x0000087e;
enum IDM_JAVAAPPLET = 0x0000087f;
enum IDM_PLUGIN = 0x00000880;
enum IDM_PAGEBREAK = 0x00000881;
enum IDM_HTMLAREA = 0x00000882;
enum IDM_PARAGRAPH = 0x00000884;
enum IDM_FORM = 0x00000885;
enum IDM_MARQUEE = 0x00000886;
enum IDM_LIST = 0x00000887;
enum IDM_ORDERLIST = 0x00000888;
enum IDM_UNORDERLIST = 0x00000889;
enum IDM_INDENT = 0x0000088a;
enum IDM_OUTDENT = 0x0000088b;
enum IDM_PREFORMATTED = 0x0000088c;
enum IDM_ADDRESS = 0x0000088d;
enum IDM_BLINK = 0x0000088e;
enum IDM_DIV = 0x0000088f;
enum IDM_TABLEINSERT = 0x00000898;
enum IDM_RCINSERT = 0x00000899;
enum IDM_CELLINSERT = 0x0000089a;
enum IDM_CAPTIONINSERT = 0x0000089b;
enum IDM_CELLMERGE = 0x0000089c;
enum IDM_CELLSPLIT = 0x0000089d;
enum IDM_CELLSELECT = 0x0000089e;
enum IDM_ROWSELECT = 0x0000089f;
enum IDM_COLUMNSELECT = 0x000008a0;
enum IDM_TABLESELECT = 0x000008a1;
enum IDM_TABLEPROPERTIES = 0x000008a2;
enum IDM_CELLPROPERTIES = 0x000008a3;
enum IDM_ROWINSERT = 0x000008a4;
enum IDM_COLUMNINSERT = 0x000008a5;
enum IDM_HELP_CONTENT = 0x000008ac;
enum IDM_HELP_ABOUT = 0x000008ad;
enum IDM_HELP_README = 0x000008ae;
enum IDM_REMOVEFORMAT = 0x000008b6;
enum IDM_PAGEINFO = 0x000008b7;
enum IDM_TELETYPE = 0x000008b8;
enum IDM_GETBLOCKFMTS = 0x000008b9;
enum IDM_BLOCKFMT = 0x000008ba;
enum IDM_SHOWHIDE_CODE = 0x000008bb;
enum IDM_TABLE = 0x000008bc;
enum IDM_COPYFORMAT = 0x000008bd;
enum IDM_PASTEFORMAT = 0x000008be;
enum IDM_GOTO = 0x000008bf;
enum IDM_CHANGEFONT = 0x000008c0;
enum IDM_CHANGEFONTSIZE = 0x000008c1;
enum IDM_CHANGECASE = 0x000008c6;
enum IDM_SHOWSPECIALCHAR = 0x000008c9;
enum IDM_SUBSCRIPT = 0x000008c7;
enum IDM_SUPERSCRIPT = 0x000008c8;
enum IDM_CENTERALIGNPARA = 0x000008ca;
enum IDM_LEFTALIGNPARA = 0x000008cb;
enum IDM_RIGHTALIGNPARA = 0x000008cc;
enum IDM_REMOVEPARAFORMAT = 0x000008cd;
enum IDM_APPLYNORMAL = 0x000008ce;
enum IDM_APPLYHEADING1 = 0x000008cf;
enum IDM_APPLYHEADING2 = 0x000008d0;
enum IDM_APPLYHEADING3 = 0x000008d1;
enum IDM_DOCPROPERTIES = 0x000008d4;
enum IDM_ADDFAVORITES = 0x000008d5;
enum IDM_COPYSHORTCUT = 0x000008d6;
enum IDM_SAVEBACKGROUND = 0x000008d7;
enum IDM_SETWALLPAPER = 0x000008d8;
enum IDM_COPYBACKGROUND = 0x000008d9;
enum IDM_CREATESHORTCUT = 0x000008da;
enum IDM_PAGE = 0x000008db;
enum IDM_SAVETARGET = 0x000008dc;
enum IDM_SHOWPICTURE = 0x000008dd;
enum IDM_SAVEPICTURE = 0x000008de;
enum IDM_DYNSRCPLAY = 0x000008df;
enum IDM_DYNSRCSTOP = 0x000008e0;
enum IDM_PRINTTARGET = 0x000008e1;
enum IDM_IMGARTPLAY = 0x000008e2;
enum IDM_IMGARTSTOP = 0x000008e3;
enum IDM_IMGARTREWIND = 0x000008e4;
enum IDM_PRINTQUERYJOBSPENDING = 0x000008e5;
enum IDM_SETDESKTOPITEM = 0x000008e6;
enum IDM_CONTEXTMENU = 0x000008e8;
enum IDM_GOBACKWARD = 0x000008ea;
enum IDM_GOFORWARD = 0x000008eb;
enum IDM_PRESTOP = 0x000008ec;
enum IDM_GOTOCLIPBOARDADDRESS = 0x000008ed;
enum IDM_GOTOCLIPBOARDTEXT = 0x000008ee;
enum IDM_MP_MYPICS = 0x000008ef;
enum IDM_MP_EMAILPICTURE = 0x000008f0;
enum IDM_MP_PRINTPICTURE = 0x000008f1;
enum IDM_CREATELINK = 0x000008f2;
enum IDM_COPYCONTENT = 0x000008f3;
enum IDM_LANGUAGE = 0x000008f4;
enum IDM_GETPRINTTEMPLATE = 0x000008f7;
enum IDM_SETPRINTTEMPLATE = 0x000008f8;
enum IDM_TEMPLATE_PAGESETUP = 0x000008fa;
enum IDM_REFRESH = 0x000008fc;
enum IDM_STOPDOWNLOAD = 0x000008fd;
enum IDM_ENABLE_INTERACTION = 0x000008fe;
enum IDM_LAUNCHDEBUGGER = 0x00000906;
enum IDM_BREAKATNEXT = 0x00000907;
enum IDM_INSINPUTHIDDEN = 0x00000908;
enum IDM_INSINPUTPASSWORD = 0x00000909;
enum IDM_OVERWRITE = 0x0000090a;
enum IDM_PARSECOMPLETE = 0x0000090b;
enum IDM_HTMLEDITMODE = 0x0000090c;
enum IDM_REGISTRYREFRESH = 0x0000090d;
enum IDM_COMPOSESETTINGS = 0x0000090e;
enum IDM_SHOWALLTAGS = 0x00000917;
enum IDM_SHOWALIGNEDSITETAGS = 0x00000911;
enum IDM_SHOWSCRIPTTAGS = 0x00000912;
enum IDM_SHOWSTYLETAGS = 0x00000913;
enum IDM_SHOWCOMMENTTAGS = 0x00000914;
enum IDM_SHOWAREATAGS = 0x00000915;
enum IDM_SHOWUNKNOWNTAGS = 0x00000916;
enum IDM_SHOWMISCTAGS = 0x00000910;
enum IDM_SHOWZEROBORDERATDESIGNTIME = 0x00000918;
enum IDM_AUTODETECT = 0x00000919;
enum IDM_SCRIPTDEBUGGER = 0x0000091a;
enum IDM_GETBYTESDOWNLOADED = 0x0000091b;
enum IDM_NOACTIVATENORMALOLECONTROLS = 0x0000091c;
enum IDM_NOACTIVATEDESIGNTIMECONTROLS = 0x0000091d;
enum IDM_NOACTIVATEJAVAAPPLETS = 0x0000091e;
enum IDM_NOFIXUPURLSONPASTE = 0x0000091f;
enum IDM_EMPTYGLYPHTABLE = 0x00000920;
enum IDM_ADDTOGLYPHTABLE = 0x00000921;
enum IDM_REMOVEFROMGLYPHTABLE = 0x00000922;
enum IDM_REPLACEGLYPHCONTENTS = 0x00000923;
enum IDM_SHOWWBRTAGS = 0x00000924;
enum IDM_PERSISTSTREAMSYNC = 0x00000925;
enum IDM_SETDIRTY = 0x00000926;
enum IDM_RUNURLSCRIPT = 0x00000927;
enum IDM_ZOOMRATIO = 0x00000928;
enum IDM_GETZOOMNUMERATOR = 0x00000929;
enum IDM_GETZOOMDENOMINATOR = 0x0000092a;
enum IDM_DIRLTR = 0x0000092e;
enum IDM_DIRRTL = 0x0000092f;
enum IDM_BLOCKDIRLTR = 0x00000930;
enum IDM_BLOCKDIRRTL = 0x00000931;
enum IDM_INLINEDIRLTR = 0x00000932;
enum IDM_INLINEDIRRTL = 0x00000933;
enum IDM_ISTRUSTEDDLG = 0x00000934;
enum IDM_INSERTSPAN = 0x00000935;
enum IDM_LOCALIZEEDITOR = 0x00000936;
enum IDM_SAVEPRETRANSFORMSOURCE = 0x00000942;
enum IDM_VIEWPRETRANSFORMSOURCE = 0x00000943;
enum IDM_SCROLL_HERE = 0x0000094c;
enum IDM_SCROLL_TOP = 0x0000094d;
enum IDM_SCROLL_BOTTOM = 0x0000094e;
enum IDM_SCROLL_PAGEUP = 0x0000094f;
enum IDM_SCROLL_PAGEDOWN = 0x00000950;
enum IDM_SCROLL_UP = 0x00000951;
enum IDM_SCROLL_DOWN = 0x00000952;
enum IDM_SCROLL_LEFTEDGE = 0x00000953;
enum IDM_SCROLL_RIGHTEDGE = 0x00000954;
enum IDM_SCROLL_PAGELEFT = 0x00000955;
enum IDM_SCROLL_PAGERIGHT = 0x00000956;
enum IDM_SCROLL_LEFT = 0x00000957;
enum IDM_SCROLL_RIGHT = 0x00000958;
enum IDM_MULTIPLESELECTION = 0x00000959;
enum IDM_2D_POSITION = 0x0000095a;
enum IDM_2D_ELEMENT = 0x0000095b;
enum IDM_1D_ELEMENT = 0x0000095c;
enum IDM_ABSOLUTE_POSITION = 0x0000095d;
enum IDM_LIVERESIZE = 0x0000095e;
enum IDM_ATOMICSELECTION = 0x0000095f;
enum IDM_AUTOURLDETECT_MODE = 0x00000960;
enum IDM_IE50_PASTE = 0x00000961;
enum IDM_IE50_PASTE_MODE = 0x00000962;
enum IDM_GETIPRINT = 0x00000963;
enum IDM_DISABLE_EDITFOCUS_UI = 0x00000964;
enum IDM_RESPECTVISIBILITY_INDESIGN = 0x00000965;
enum IDM_CSSEDITING_LEVEL = 0x00000966;
enum IDM_UI_OUTDENT = 0x00000967;
enum IDM_UPDATEPAGESTATUS = 0x00000968;
enum IDM_IME_ENABLE_RECONVERSION = 0x00000969;
enum IDM_KEEPSELECTION = 0x0000096a;
enum IDM_UNLOADDOCUMENT = 0x0000096b;
enum IDM_OVERRIDE_CURSOR = 0x00000974;
enum IDM_PEERHITTESTSAMEINEDIT = 0x00000977;
enum IDM_TRUSTAPPCACHE = 0x00000979;
enum IDM_BACKGROUNDIMAGECACHE = 0x0000097e;
enum IDM_GETUSERACTIONTIME = 0x0000097f;
enum IDM_BEGINUSERACTION = 0x00000980;
enum IDM_ENDUSERACTION = 0x00000981;
enum IDM_SETCUSTOMCURSOR = 0x00000982;
enum IDM_FOLLOWLINKT = 0x00000983;
enum IDM_CARETBROWSINGMODE = 0x00000984;
enum IDM_STYLEMENU_SETNOSTYLE = 0x00000985;
enum IDM_STYLEMENU_GETNOSTYLE = 0x00000986;
enum IDM_STYLEMENU_GETPREFSTYLE = 0x00000987;
enum IDM_STYLEMENU_CHANGESELECTEDSTYLE = 0x00000988;
enum IDM_MEDIA_PLAYPAUSE = 0x00000989;
enum IDM_MEDIA_MUTEUNMUTE = 0x0000098a;
enum IDM_MEDIA_PLAY = 0x0000098b;
enum IDM_MEDIA_PAUSE = 0x0000098c;
enum IDM_MEDIA_STOP = 0x0000098d;
enum IDM_MEDIA_FULLSCREEN_TOGGLE = 0x0000098e;
enum IDM_MEDIA_FULLSCREEN_EXIT = 0x0000098f;
enum IDM_MEDIA_VOLUME_UP = 0x00000990;
enum IDM_MEDIA_VOLUME_DOWN = 0x00000991;
enum IDM_MEDIA_SEEK_TO_START = 0x00000992;
enum IDM_MEDIA_SEEK_TO_END = 0x00000993;
enum IDM_MEDIA_SEEK_FWD_SMALL = 0x00000994;
enum IDM_MEDIA_SEEK_BACK_SMALL = 0x00000995;
enum IDM_MEDIA_SEEK_FWD_LARGE = 0x00000996;
enum IDM_MEDIA_SEEK_BACK_LARGE = 0x00000997;
enum IDM_MEDIA_RATE_FASTER = 0x00000998;
enum IDM_MEDIA_RATE_SLOWER = 0x00000999;
enum IDM_MEDIA_SHOWCONTROLS_TOGGLE = 0x0000099a;
enum IDM_MEDIA_ZOOMMODE_TOGGLE = 0x0000099b;
enum IDM_MEDIA_FRAMESTEP_FWD = 0x0000099c;
enum IDM_MEDIA_FRAMESTEP_BACK = 0x0000099d;
enum IDM_MEDIA_MUTE = 0x0000099e;
enum IDM_MEDIA_UNMUTE = 0x0000099f;
enum IDM_MEDIA_SHOW_AUDIO_ACCESS = 0x000009a0;
enum IDM_MEDIA_SHOW_SUBTITLE_ACCESS = 0x000009a1;
enum IDM_MEDIA_PLAYRATE0 = 0x000009b0;
enum IDM_MEDIA_PLAYRATE1 = 0x000009b1;
enum IDM_MEDIA_PLAYRATE2 = 0x000009b2;
enum IDM_MEDIA_PLAYRATE3 = 0x000009b3;
enum IDM_MEDIA_PLAYRATE4 = 0x000009b4;
enum IDM_MEDIA_PLAYRATE5 = 0x000009b5;
enum IDM_MEDIA_PLAYRATE6 = 0x000009b6;
enum IDM_MEDIA_PLAYRATE7 = 0x000009b7;
enum IDM_MEDIA_PLAYRATE8 = 0x000009b8;
enum IDM_MEDIA_PLAYRATE9 = 0x000009b9;
enum IDM_PASTECONTENTONLY = 0x000009c4;
enum IDM_PASTETEXTONLY = 0x000009c5;
enum IDM_INSERTHTML = 0x000009c6;
enum IDM_DEFAULTBLOCK = 0x0000179e;
enum IDM_MIMECSET__FIRST__ = 0x00000e19;
enum IDM_MIMECSET__LAST__ = 0x00000e73;
enum IDM_MENUEXT_FIRST__ = 0x00000e74;
enum IDM_MENUEXT_LAST__ = 0x00000e94;
enum IDM_MENUEXT_COUNT = 0x00000e95;
enum IDM_ADDCONSOLEMESSAGERECEIVER = 0x00000ed8;
enum IDM_REMOVECONSOLEMESSAGERECEIVER = 0x00000ed9;
enum IDM_STARTDIAGNOSTICSMODE = 0x00000eda;
enum IDM_GETSCRIPTENGINE = 0x00000edb;
enum IDM_ADDDEBUGCALLBACKRECEIVER = 0x00000edc;
enum IDM_REMOVEDEBUGCALLBACKRECEIVER = 0x00000edd;
enum IDM_DEFAULTPARAGRAPHSEPARATOR = 0x00000f3c;
enum IDM_BEGINUNDOUNIT = 0x00000f3d;
enum IDM_ENDUNDOUNIT = 0x00000f3e;
enum IDM_CLEARUNDO = 0x00000f3f;
enum IDM_INSPECTELEMENT = 0x00000f40;
enum IDM_SHAREPICTURE = 0x00000f41;
enum IDM_ENABLE_OBJECT_RESIZING = 0x00000f42;
enum IDM_INSERTTEXT = 0x00000f43;
enum IDM_LAUNCHURICALLBACK = 0x00000f44;
enum IDM_FOLLOWLINKN_INPRIVATE = 0x00000f45;
enum IDM_FOLLOWLINKT_INPRIVATE = 0x00000f46;
enum IDM_FOLLOWLINKEDGE = 0x00000f47;
enum IDM_OPEN = 0x000007d0;
enum IDM_NEW = 0x000007d1;
enum IDM_SAVE = 0x00000046;
enum IDM_SAVEAS = 0x00000047;
enum IDM_SAVECOPYAS = 0x000007d2;
enum IDM_PRINTPREVIEW = 0x000007d3;
enum IDM_SHOWPRINT = 0x000007da;
enum IDM_SHOWPAGESETUP = 0x000007db;
enum IDM_PRINT = 0x0000001b;
enum IDM_PAGESETUP = 0x000007d4;
enum IDM_SPELL = 0x000007d5;
enum IDM_PASTESPECIAL = 0x000007d6;
enum IDM_CLEARSELECTION = 0x000007d7;
enum IDM_PROPERTIES = 0x0000001c;
enum IDM_REDO = 0x0000001d;
enum IDM_UNDO = 0x0000002b;
enum IDM_SELECTALL = 0x0000001f;
enum IDM_ZOOMPERCENT = 0x00000032;
enum IDM_GETZOOM = 0x00000044;
enum IDM_STOP = 0x0000085a;
enum IDM_COPY = 0x0000000f;
enum IDM_CUT = 0x00000010;
enum IDM_PASTE = 0x0000001a;
enum IDM_SAVEPDF = 0x00000063;
enum IDM_TOGGLEREADINGBAR = 0x00003b69;
enum IDM_ADDPDFHIGHLIGHT = 0x00003b6a;
enum IDM_DELETEPDFHIGHLIGHT = 0x00003b6b;
enum IDM_ADDPDFNOTE = 0x00003b6c;
enum IDM_OPENPDFNOTE = 0x00003b6d;
enum IDM_EDITPDFHIGHLIGHT = 0x00003b6e;
enum IDM_PINKHIGHLIGHT = 0x00003b6f;
enum IDM_BLUEHIGHLIGHT = 0x00003b70;
enum IDM_GREENHIGHLIGHT = 0x00003b71;
enum IDM_YELLOWHIGHLIGHT = 0x00003b72;
enum IDM_NONEHIGHLIGHT = 0x00003b73;
enum IDM_PDFREADALOUD = 0x00003b74;
enum IDM_SHAREPDF = 0x00003b75;
enum IDM_PDFDEFINE = 0x00003b76;
enum CMD_ZOOM_PAGEWIDTH = 0xffffffffffffffff;
enum CMD_ZOOM_ONEPAGE = 0xfffffffffffffffe;
enum CMD_ZOOM_TWOPAGES = 0xfffffffffffffffd;
enum CMD_ZOOM_SELECTION = 0xfffffffffffffffc;
enum CMD_ZOOM_FIT = 0xfffffffffffffffb;
enum IDM_CONTEXT = 0x00000001;
enum IDM_HWND = 0x00000002;
enum IDM_NEW_TOPLEVELWINDOW = 0x00001b8a;
enum IDM_PRESERVEUNDOALWAYS = 0x000017a1;
enum IDM_PERSISTDEFAULTVALUES = 0x00001bbc;
enum IDM_PROTECTMETATAGS = 0x00001bbd;
enum IDM_GETFRAMEZONE = 0x00001795;
enum IDM_REFRESH_THIS = 0x0000179a;
enum IDM_MENUEXT_PLACEHOLDER = 0x0000179f;
enum IDM_FIRE_PRINTTEMPLATEUP = 0x00003a98;
enum IDM_FIRE_PRINTTEMPLATEDOWN = 0x00003a99;
enum IDM_SETPRINTHANDLES = 0x00003a9a;
enum IDM_CLEARAUTHENTICATIONCACHE = 0x00003a9b;
enum IDM_GETUSERINITFLAGS = 0x00003a9c;
enum IDM_GETDOCDLGFLAGS = 0x00003a9d;
enum IDM_OLEWINDOWSTATECHANGED = 0x00003a9e;
enum IDM_ACTIVEXINSTALLSCOPE = 0x00003a9f;
enum IDM_SETSESSIONDOCUMENTMODE = 0x00003aa0;
enum IDM_GETSESSIONDOCUMENTMODE = 0x00003aa1;
enum IDM_SETPROFILINGONSTART = 0x00003aa2;
enum IDM_GETPROFILINGONSTART = 0x00003aa3;
enum IDM_SETSCRIPTCONSOLE = 0x00003aa4;
enum IDM_SETNAVIGATEEVENTSINK = 0x00003aa5;
enum IDM_SETDEVTOOLBARCONSOLE = 0x00003aa8;
enum IDM_POPSTATEEVENT = 0x00003aa9;
enum IDM_SETPARTIALLAYOUTSTATUS = 0x00003aad;
enum IDM_GETPARTIALLAYOUTSTATUS = 0x00003aae;
enum IDM_ADDPARTIALTESTSTEPCOUNT = 0x00003aaf;
enum IDM_SETL9QUIRKSEMULATIONENABLED = 0x00003ab0;
enum IDM_GETL9QUIRKSEMULATIONENABLED = 0x00003ab1;
enum IDM_SETPOINTERLOCKCONSENT = 0x00003ab2;
enum IDM_GETDEFAULTZOOMLEVEL = 0x00003ab3;
enum IDM_GETELEMENTBOUNDINGBOX = 0x00003ab4;
enum IDM_SETGEOLOCATIONCONSENT = 0x00003ab5;
enum IDM_ACTIVEXFILTERINGENABLED = 0x00003ab6;
enum IDM_SHARE = 0x00003ab7;
enum IDM_SHAREAPPCACHEEVENT = 0x00003ab9;
enum IDM_GETPRINTMANAGERDOCSOURCE = 0x00003abe;
enum IDM_SETEXTRAHEADERS = 0x00003abf;
enum IDM_SETACCESSIBILITYNAME = 0x00003ac0;
enum IDM_UPDATESETTINGSFROMREGISTRY = 0x00003ac1;
enum IDM_PERFORMEDITACTIVATION = 0x00003ac2;
enum IDM_SETDEFAULTBACKGROUNDCOLOR = 0x00003ac3;
enum IDM_GETDEFAULTBACKGROUNDCOLOR = 0x00003ac4;
enum IDM_NOTIFYZOOMANDSCROLLANIMATIONEND = 0x00003ac5;
enum IDM_NOTIFYCONTEXTMENUDISMISSED = 0x00003ac6;
enum IDM_GETPRINTMANAGERDOCSOURCEASYNC = 0x00003ac7;
enum IDM_SETPAGEACTIONALLOWEDFLAGS = 0x00003afc;
enum IDM_INVOKEFLIPAHEADTARGET = 0x00003b60;
enum IDM_ENABLEFLIPAHEADTARGET = 0x00003b61;
enum IDM_DEBUGGERDYNAMICATTACH = 0x00003b62;
enum IDM_DEBUGGERDYNAMICDETACH = 0x00003b63;
enum IDM_DEBUGGERDYNAMICATTACHSOURCERUNDOWN = 0x00003b64;
enum IDM_GETDEBUGGERSTATE = 0x00003b65;
enum IDM_SELECTIONSEARCH = 0x00003b66;
enum IDM_SHOWSHAREUI = 0x00003b67;
enum IDM_RUNFLASH = 0x00003b68;
enum DISPID_INTERNAL_CELEMENTCLASSCACHE = 0x80000000;
enum DISPID_HTMLOBJECT = 0x000101f4;
enum DISPID_ELEMENT = 0x000103e8;
enum DISPID_SITE = 0x000107d0;
enum DISPID_OBJECT = 0x00010bb8;
enum DISPID_STYLE = 0x00010fa0;
enum DISPID_BASE_STYLE = 0x00011194;
enum DISPID_ATTRS = 0x00011388;
enum DISPID_EVENTS = 0x00011770;
enum DISPID_XOBJ_EXPANDO = 0x00011b58;
enum DISPID_XOBJ_ORDINAL = 0x00011f40;
enum DISPID_ACTIVEX_EXPANDO_BASE = 0x00011b58;
enum DISPID_ACTIVEX_EXPANDO_MAX = 0x00011f3f;
enum DISPID_OBJECT_ORDINAL_BASE = 0x00011f40;
enum DISPID_OBJECT_ORDINAL_MAX = 0x00012327;
enum DISPID_COLLECTION_MIN = 0x000f4240;
enum DISPID_COLLECTION_MAX = 0x002dc6bf;
enum DISPID_STYLESHEETSCOLLECTION_NAMED_BASE = 0x000f4240;
enum DISPID_STYLESHEETSCOLLECTION_ORDINAL_BASE = 0x001e8480;
enum DISPID_STYLESHEETSCOLLECTION_ORDINAL_MAX = 0x002dc6bf;
enum DISPID_EXPANDO_BASE = 0x002dc6c0;
enum DISPID_EXPANDO_MAX = 0x003d08ff;
enum DISPID_EVENTHOOK_SENSITIVE_BASE = 0x003d0900;
enum DISPID_EVENTHOOK_SENSITIVE_MAX = 0x0044aa1f;
enum DISPID_EVENTHOOK_INSENSITIVE_BASE = 0x0044aa20;
enum DISPID_EVENTHOOK_INSENSITIVE_MAX = 0x004c4b3f;
enum DISPID_PEER_HOLDER_BASE = 0x004c4b40;
enum DISPID_CANVASPIXELARRAY_BASE = 0x004c4b40;
enum DISPID_CANVASPIXELARRAY_MAX = 0x77359400;
enum DISPID_CommonCtrl_FONTNAME = 0x00000001;
enum DISPID_CommonCtrl_FONTSIZE = 0x00000002;
enum DISPID_CommonCtrl_FONTBOLD = 0x00000003;
enum DISPID_CommonCtrl_FONTITAL = 0x00000004;
enum DISPID_CommonCtrl_FONTUNDER = 0x00000005;
enum DISPID_CommonCtrl_FONTSTRIKE = 0x00000006;
enum DISPID_CommonCtrl_FONTWEIGHT = 0x00000007;
enum DISPID_CommonCtrl_FONTCHARSET = 0x00000008;
enum DISPID_CommonCtrl_FONTSUPERSCRIPT = 0x00000009;
enum DISPID_CommonCtrl_FONTSUBSCRIPT = 0x0000000a;
enum DISPID_MSDATASRCINTERFACE = 0xfffffffffffff0c4;
enum DISPID_ADVISEDATASRCCHANGEEVENT = 0xfffffffffffff0c3;
enum DISPID_HTMLDLG = 0x000061a8;
enum DISPID_HTMLDLGMODEL = 0x00006590;
enum DISPID_HTMLPOPUP = 0x00006978;
enum DISPID_HTMLAPP = 0x00001388;
enum STDPROPID_XOBJ_NAME = 0x00010000;
enum STDPROPID_XOBJ_INDEX = 0x00010001;
enum STDPROPID_IE3XOBJ_OBJECTALIGN = 0x00010001;
enum STDPROPID_XOBJ_BASEHREF = 0x00010002;
enum STDPROPID_XOBJ_LEFT = 0x00010003;
enum STDPROPID_XOBJ_TOP = 0x00010004;
enum STDPROPID_XOBJ_WIDTH = 0x00010005;
enum STDPROPID_XOBJ_HEIGHT = 0x00010006;
enum STDPROPID_XOBJ_VISIBLE = 0x00010007;
enum STDPROPID_XOBJ_PARENT = 0x00010008;
enum STDPROPID_XOBJ_DRAGMODE = 0x00010009;
enum STDPROPID_XOBJ_DRAGICON = 0x0001000a;
enum STDPROPID_XOBJ_TAG = 0x0001000b;
enum STDPROPID_XOBJ_TABSTOP = 0x0001000e;
enum STDPROPID_XOBJ_TABINDEX = 0x0001000f;
enum STDPROPID_XOBJ_HELPCONTEXTID = 0x00010032;
enum STDPROPID_XOBJ_DEFAULT = 0x00010037;
enum STDPROPID_XOBJ_CANCEL = 0x00010038;
enum STDPROPID_XOBJ_LEFTNORUN = 0x00010039;
enum STDPROPID_XOBJ_TOPNORUN = 0x0001003a;
enum STDPROPID_XOBJ_ALIGNPERSIST = 0x0001003c;
enum STDPROPID_XOBJ_LINKTIMEOUT = 0x0001003d;
enum STDPROPID_XOBJ_LINKTOPIC = 0x0001003e;
enum STDPROPID_XOBJ_LINKITEM = 0x0001003f;
enum STDPROPID_XOBJ_LINKMODE = 0x00010040;
enum STDPROPID_XOBJ_DATACHANGED = 0x00010041;
enum STDPROPID_XOBJ_DATAFIELD = 0x00010042;
enum STDPROPID_XOBJ_DATASOURCE = 0x00010043;
enum STDPROPID_XOBJ_WHATSTHISHELPID = 0x00010044;
enum STDPROPID_XOBJ_CONTROLTIPTEXT = 0x00010045;
enum STDPROPID_XOBJ_STATUSBARTEXT = 0x00010046;
enum STDPROPID_XOBJ_APPLICATION = 0x00010047;
enum STDPROPID_XOBJ_BLOCKALIGN = 0x00010048;
enum STDPROPID_XOBJ_CONTROLALIGN = 0x00010049;
enum STDPROPID_XOBJ_STYLE = 0x0001004a;
enum STDPROPID_XOBJ_COUNT = 0x0001004b;
enum STDPROPID_XOBJ_DISABLED = 0x0001004c;
enum STDPROPID_XOBJ_RIGHT = 0x0001004d;
enum STDPROPID_XOBJ_BOTTOM = 0x0001004e;
enum STDPROPID_XOBJ_GETSVGDOCUMENT = 0x0001004f;
enum STDDISPID_XOBJ_ONFOCUS = 0x00010001;
enum STDDISPID_XOBJ_BEFOREUPDATE = 0x00010004;
enum STDDISPID_XOBJ_AFTERUPDATE = 0x00010005;
enum STDDISPID_XOBJ_ONROWEXIT = 0x00010006;
enum STDDISPID_XOBJ_ONROWENTER = 0x00010007;
enum STDDISPID_XOBJ_ONMOUSEOVER = 0x00010008;
enum STDDISPID_XOBJ_ONMOUSEOUT = 0x00010009;
enum STDDISPID_XOBJ_ONHELP = 0x0001000a;
enum STDDISPID_XOBJ_ONDRAGSTART = 0x0001000b;
enum STDDISPID_XOBJ_ONSELECTSTART = 0x0001000c;
enum STDDISPID_XOBJ_ERRORUPDATE = 0x0001000d;
enum STDDISPID_XOBJ_ONDATASETCHANGED = 0x0001000e;
enum STDDISPID_XOBJ_ONDATAAVAILABLE = 0x0001000f;
enum STDDISPID_XOBJ_ONDATASETCOMPLETE = 0x00010010;
enum STDDISPID_XOBJ_ONFILTER = 0x00010011;
enum STDDISPID_XOBJ_ONLOSECAPTURE = 0x00010012;
enum STDDISPID_XOBJ_ONPROPERTYCHANGE = 0x00010013;
enum STDDISPID_XOBJ_ONDRAG = 0x00010014;
enum STDDISPID_XOBJ_ONDRAGEND = 0x00010015;
enum STDDISPID_XOBJ_ONDRAGENTER = 0x00010016;
enum STDDISPID_XOBJ_ONDRAGOVER = 0x00010017;
enum STDDISPID_XOBJ_ONDRAGLEAVE = 0x00010018;
enum STDDISPID_XOBJ_ONDROP = 0x00010019;
enum STDDISPID_XOBJ_ONCUT = 0x0001001a;
enum STDDISPID_XOBJ_ONCOPY = 0x0001001b;
enum STDDISPID_XOBJ_ONPASTE = 0x0001001c;
enum STDDISPID_XOBJ_ONBEFORECUT = 0x0001001d;
enum STDDISPID_XOBJ_ONBEFORECOPY = 0x0001001e;
enum STDDISPID_XOBJ_ONBEFOREPASTE = 0x0001001f;
enum STDDISPID_XOBJ_ONROWSDELETE = 0x00010020;
enum STDDISPID_XOBJ_ONROWSINSERTED = 0x00010021;
enum STDDISPID_XOBJ_ONCELLCHANGE = 0x00010022;
enum DISPID_NORMAL_FIRST = 0x000003e8;
enum DISPID_IE8_NORMAL_FIRST = 0x0000047e;
enum DISPID_ANCHOR = 0x000003e8;
enum DISPID_BLOCK = 0x000003e8;
enum DISPID_BODY = 0x000007d0;
enum DISPID_BR = 0x000003e8;
enum DISPID_BGSOUND = 0x000003e8;
enum DISPID_DD = 0x000003e8;
enum DISPID_DIR = 0x000003e8;
enum DISPID_DIV = 0x000003e8;
enum DISPID_DL = 0x000003e8;
enum DISPID_DT = 0x000003e8;
enum DISPID_EFONT = 0x000003e8;
enum DISPID_FORM = 0x000003e8;
enum DISPID_HEADER = 0x000003e8;
enum DISPID_HEDELEMS = 0x000003e8;
enum DISPID_HR = 0x000003e8;
enum DISPID_LABEL = 0x000003e8;
enum DISPID_LI = 0x000003e8;
enum DISPID_IMGBASE = 0x000003e8;
enum DISPID_IMG = 0x000007d0;
enum DISPID_INPUTIMAGE = 0x000007d0;
enum DISPID_INPUT = 0x000007d0;
enum DISPID_INPUTTEXTBASE = 0x00000bb8;
enum DISPID_INPUTTEXT = 0x00000fa0;
enum DISPID_MENU = 0x000003e8;
enum DISPID_OL = 0x000003e8;
enum DISPID_PARA = 0x000003e8;
enum DISPID_SELECT = 0x000003e8;
enum DISPID_SELECTOBJ = 0x000003e8;
enum DISPID_TABLE = 0x000003e8;
enum DISPID_TEXTSITE = 0x000003e8;
enum DISPID_TEXTAREA = 0x00001388;
enum DISPID_MARQUEE = 0x00001770;
enum DISPID_RICHTEXT = 0x00001b58;
enum DISPID_BUTTON = 0x00001f40;
enum DISPID_UL = 0x000003e8;
enum DISPID_PHRASE = 0x000003e8;
enum DISPID_UNKNOWNPDL = 0x000003e8;
enum DISPID_COMMENTPDL = 0x000003e8;
enum DISPID_TABLECELL = 0x000007d0;
enum DISPID_RANGE = 0x000003e8;
enum DISPID_SELECTION = 0x000003e8;
enum DISPID_OPTION = 0x000003e8;
enum DISPID_1D = 0x000007d0;
enum DISPID_MAP = 0x000003e8;
enum DISPID_AREA = 0x000003e8;
enum DISPID_PARAM = 0x000003e8;
enum DISPID_TABLESECTION = 0x000003e8;
enum DISPID_TABLEROW = 0x000003e8;
enum DISPID_TABLECOL = 0x000003e8;
enum DISPID_SCRIPT = 0x000003e8;
enum DISPID_STYLESHEET = 0x000003e8;
enum DISPID_STYLERULE = 0x000003e8;
enum DISPID_BASE_STYLERULE = 0x0000044c;
enum DISPID_STYLEPAGE = 0x000003e8;
enum DISPID_STYLESHEETS_COL = 0x000003e8;
enum DISPID_STYLERULES_COL = 0x000003e8;
enum DISPID_STYLEPAGES_COL = 0x000003e8;
enum DISPID_MEDIALIST = 0x000003e8;
enum DISPID_MIMETYPES_COL = 0x000003e8;
enum DISPID_PLUGINS_COL = 0x000003e8;
enum DISPID_2D = 0x000003e8;
enum DISPID_OMWINDOW = 0x000003e8;
enum DISPID_EVENTOBJ = 0x000003e8;
enum DISPID_PERSISTDATA = 0x000003e8;
enum DISPID_OLESITE = 0x000003e8;
enum DISPID_FRAMESET = 0x000003e8;
enum DISPID_LINK = 0x000003e8;
enum DISPID_STYLEELEMENT = 0x000003e8;
enum DISPID_FILTERS = 0x000003e8;
enum DISPID_OMRECT = 0x000003e8;
enum DISPID_DOMATTRIBUTE = 0x000003e8;
enum DISPID_DOMTEXTNODE = 0x000003e8;
enum DISPID_GENERIC = 0x000003e8;
enum DISPID_URN_COLL = 0x000003e8;
enum DISPID_NAMESPACE_COLLECTION = 0x000003e8;
enum DISPID_NAMESPACE = 0x000003e8;
enum DISPID_TAGNAMES_COLLECTION = 0x000003e8;
enum DISPID_XMLHTTPREQUEST = 0x000003e8;
enum DISPID_XMLSERIALIZER = 0x000003e8;
enum DISPID_DOMPARSER = 0x000003e8;
enum DISPID_DOCUMENTCOMPATIBLEINFO_COLLECTION = 0x000003e8;
enum DISPID_DOCUMENTCOMPATIBLEINFO = 0x000003e8;
enum DISPID_XDOMAINREQUEST = 0x000003e8;
enum DISPID_DOMSTORAGEITEM = 0x000003e8;
enum DISPID_DOMSTORAGE = 0x000003e8;
enum DISPID_DOMSTORAGELIST = 0x000003e8;
enum DISPID_RULESAPPLIED = 0x000003e8;
enum DISPID_RULESAPPLIED_COLLECTION = 0x000003e8;
enum DISPID_STYLESHEETRULESAPPLIED_COLLECTION = 0x000003e8;
enum DISPID_PROCESSINGINSTRUCTION = 0x000003e8;
enum DISPID_MSPOINTERPOINT = 0x000003e8;
enum DISPID_WEBSOCKET = 0x000003e8;
enum DISPID_APPLICATIONCACHE = 0x000003e8;
enum DISPID_DOMEVENT = 0x000003e8;
enum DISPID_DOMUIEVENT = 0x00000401;
enum DISPID_DOMMOUSEEVENT = 0x0000041a;
enum DISPID_DOMMOUSEWHEELEVENT = 0x00000433;
enum DISPID_DOMWHEELEVENT = 0x0000044c;
enum DISPID_DOMTEXTEVENT = 0x00000465;
enum DISPID_DOMKEYBOARDEVENT = 0x0000047e;
enum DISPID_DOMCOMPOSITIONEVENT = 0x00000497;
enum DISPID_DOMCUSTOMEVENT = 0x000004b0;
enum DISPID_DOMMUTATIONEVENT = 0x000004c9;
enum DISPID_DOMFOCUSEVENT = 0x000004e2;
enum DISPID_SVGZOOMEVENT = 0x000004fb;
enum DISPID_DOMSITEMODEEVENT = 0x00000514;
enum DISPID_DOMMESSAGEEVENT = 0x0000052d;
enum DISPID_DOMSTORAGEEVENT = 0x00000546;
enum DISPID_DOMBEFOREUNLOADEVENT = 0x0000055f;
enum DISPID_DOMDRAGEVENT = 0x00000578;
enum DISPID_DOMMSPOINTEREVENT = 0x00000591;
enum DISPID_DOMMSGESTUREEVENT = 0x000005aa;
enum DISPID_DOMMSTRANSITIONEVENT = 0x000005c3;
enum DISPID_DOMMSANIMATIONEVENT = 0x000005dc;
enum DISPID_DOMMSMANIPULATIONEVENT = 0x000005f5;
enum DISPID_DOMPROGRESSEVENT = 0x0000060e;
enum DISPID_DOMCLOSEEVENT = 0x000005f5;
enum DISPID_HTMLDOCUMENT = 0x000003e8;
enum DISPID_OMDOCUMENT = 0x000003e8;
enum DISPID_DATATRANSFER = 0x000003e8;
enum DISPID_XMLDECL = 0x000003e8;
enum DISPID_DOCFRAG = 0x000003e8;
enum DISPID_ILINEINFO = 0x000003e8;
enum DISPID_IHTMLCOMPUTEDSTYLE = 0x000003e8;
enum DISPID_DOMRANGE = 0x000003e8;
enum DISPID_HTMLSELECTION = 0x000003e8;
enum DISPID_DOMTRAVERSAL = 0x000003e8;
enum DISPID_DOMEXCEPTION = 0x000003e8;
enum DISPID_SVGEXCEPTION = 0x000003e8;
enum DISPID_RANGEEXCEPTION = 0x000003e8;
enum DISPID_EVENTEXCEPTION = 0x000003e8;
enum DISPID_DOCUMENTTYPE = 0x000003e8;
enum DISPID_MEDIA = 0x000003e8;
enum DISPID_MEDIAERROR = 0x000003e8;
enum DISPID_TIMERANGES = 0x000003e8;
enum DISPID_SOURCE = 0x000003e8;
enum DISPID_TRACK = 0x000003e8;
enum DISPID_AUDIO = 0x0000041a;
enum DISPID_VIDEO = 0x0000041a;
enum DISPID_STYLEMEDIA = 0x000003e8;
enum DISPID_PROGRESS = 0x000003e8;
enum DISPID_PLAYTO = 0x000003e8;
enum DISPID_PLAYTODEVICE = 0x000003e8;
enum DISPID_WINDOW = 0x00000001;
enum DISPID_SCREEN = 0x000003e8;
enum DISPID_FRAMESCOLLECTION = 0x000003e8;
enum DISPID_HISTORY = 0x00000001;
enum DISPID_LOCATION = 0x00000001;
enum DISPID_NAVIGATOR = 0x00000001;
enum DISPID_CLIENTCAPS = 0x00000001;
enum DISPID_TEMPLATE_PRINTER = 0x00000001;
enum DISPID_PRINTMANAGER_TEMPLATE_PRINTER = 0x000001f5;
enum DISPID_COLLECTION = 0x000005dc;
enum DISPID_OPTIONS_COL = 0x000005dc;
enum DISPID_CHECKBOX = 0x000003e8;
enum DISPID_RADIO = 0x000007d0;
enum DISPID_FRAMESITE = 0x00010bb8;
enum DISPID_FRAME = 0x00010fa0;
enum DISPID_IFRAME = 0x00010fa0;
enum WEBOC_DISPIDBASE = 0x00011388;
enum WEBOC_DISPIDMAX = 0x000113ec;
enum DISPID_PROTECTEDELEMENT = 0x000003e8;
enum DISPID_DEFAULTS = 0x000003e8;
enum DISPID_MARKUP = 0x000003e8;
enum DISPID_DOMIMPLEMENTATION = 0x000003e8;
enum DISPID_MEDIAQUERY = 0x000003e8;
enum DISPID_HTML5ATTRIBUTESELECTORCI = 0x000003e8;
enum DISPID_SVGMIXINS = 0x000003e8;
enum DISPID_SVGELEMENT = 0x00000406;
enum DISPID_SVGELEMENT_BASE = 0x0000041a;
enum DISPID_SVGAELEMENT = 0x0000041a;
enum DISPID_SVGALTGLYPHDEFELEMENT = 0x0000041a;
enum DISPID_SVGALTGLYPHELEMENT = 0x0000041a;
enum DISPID_SVGALTGLYPHITEMELEMENT = 0x0000041a;
enum DISPID_SVGANGLE = 0x000003e8;
enum DISPID_SVGANIMATECOLORELEMENT = 0x0000041a;
enum DISPID_SVGANIMATEDANGLE = 0x000003e8;
enum DISPID_SVGANIMATEDBOOLEAN = 0x000003e8;
enum DISPID_SVGANIMATEDENUMERATION = 0x000003e8;
enum DISPID_SVGANIMATEDINTEGER = 0x000003e8;
enum DISPID_SVGANIMATEDLENGTH = 0x000003e8;
enum DISPID_SVGANIMATEDLENGTHLIST = 0x000003e8;
enum DISPID_SVGANIMATEDNUMBER = 0x000003e8;
enum DISPID_SVGANIMATEDNUMBERLIST = 0x000003e8;
enum DISPID_SVGANIMATEDPOINTS = 0x000003e8;
enum DISPID_SVGANIMATEDRECT = 0x000003e8;
enum DISPID_SVGANIMATEDSTRING = 0x000003e8;
enum DISPID_SVGANIMATEELEMENT = 0x0000041a;
enum DISPID_SVGANIMATEMOTIONELEMENT = 0x0000041a;
enum DISPID_SVGANIMATETRANSFORMELEMENT = 0x0000041a;
enum DISPID_SVGCIRCLEELEMENT = 0x0000041a;
enum DISPID_SVGCLIPPATHELEMENT = 0x0000041a;
enum DISPID_SVGCOLOR_PROFILEELEMENT = 0x0000041a;
enum DISPID_SVGCURSORELEMENT = 0x0000041a;
enum DISPID_SVGDEFINITION_SRCELEMENT = 0x0000041a;
enum DISPID_SVGDEFSELEMENT = 0x0000041a;
enum DISPID_SVGDESCELEMENT = 0x0000041a;
enum DISPID_SVGELEMENTINSTANCE = 0x000003e8;
enum DISPID_SVGELEMENTINSTANCELIST = 0x000003e8;
enum DISPID_SVGELLIPSEELEMENT = 0x0000041a;
enum DISPID_SVGFEBLENDELEMENT = 0x0000041a;
enum DISPID_SVGFECOLORMATRIXELEMENT = 0x0000041a;
enum DISPID_SVGFECOMPONENTTRANSFERELEMENT = 0x0000041a;
enum DISPID_SVGCOMPONENTTRANSFERFUNCTIONELEMENT = 0x0000041a;
enum DISPID_SVGFECOMPOSITEELEMENT = 0x0000041a;
enum DISPID_SVGFECONVOLVEMATRIXELEMENT = 0x0000041a;
enum DISPID_SVGFEDIFFUSELIGHTINGELEMENT = 0x0000041a;
enum DISPID_SVGFEDISPLACEMENTMAPELEMENT = 0x0000041a;
enum DISPID_SVGFEDISTANTLIGHTELEMENT = 0x0000041a;
enum DISPID_SVGFEFLOODELEMENT = 0x0000041a;
enum DISPID_SVGFEFUNCAELEMENT = 0x0000041a;
enum DISPID_SVGFEFUNCBELEMENT = 0x0000041a;
enum DISPID_SVGFEFUNCGELEMENT = 0x0000041a;
enum DISPID_SVGFEFUNCRELEMENT = 0x0000041a;
enum DISPID_SVGFEGAUSSIANBLURELEMENT = 0x0000041a;
enum DISPID_SVGFEIMAGEELEMENT = 0x0000041a;
enum DISPID_SVGFEMERGEELEMENT = 0x0000041a;
enum DISPID_SVGFEMERGENODEELEMENT = 0x0000041a;
enum DISPID_SVGFEMORPHOLOGYELEMENT = 0x0000041a;
enum DISPID_SVGFEOFFSETELEMENT = 0x0000041a;
enum DISPID_SVGFEPOINTLIGHTELEMENT = 0x0000041a;
enum DISPID_SVGFESPECULARLIGHTINGELEMENT = 0x0000041a;
enum DISPID_SVGFESPOTLIGHTELEMENT = 0x0000041a;
enum DISPID_SVGFETILEELEMENT = 0x0000041a;
enum DISPID_SVGFETURBULENCEELEMENT = 0x0000041a;
enum DISPID_SVGFILTERELEMENT = 0x0000041a;
enum DISPID_SVGFONT_FACE_FORMATELEMENT = 0x0000041a;
enum DISPID_SVGFONT_FACE_NAMEELEMENT = 0x0000041a;
enum DISPID_SVGFONT_FACE_SRCELEMENT = 0x0000041a;
enum DISPID_SVGFONT_FACE_URIELEMENT = 0x0000041a;
enum DISPID_SVGFONT_FACEELEMENT = 0x0000041a;
enum DISPID_SVGFONTELEMENT = 0x0000041a;
enum DISPID_SVGFOREIGNOBJECTELEMENT = 0x0000041a;
enum DISPID_SVGGELEMENT = 0x0000041a;
enum DISPID_SVGGLYPHELEMENT = 0x0000041a;
enum DISPID_SVGGLYPHREFELEMENT = 0x0000041a;
enum DISPID_SVGGRADIENTELEMENT = 0x0000041a;
enum DISPID_SVGHKERNELEMENT = 0x0000041a;
enum DISPID_SVGIMAGEELEMENT = 0x0000041a;
enum DISPID_SVGLENGTH = 0x000003e8;
enum DISPID_SVGLENGTHLIST = 0x000003e8;
enum DISPID_SVGPRESERVEASPECTRATIO = 0x000003e8;
enum DISPID_SVGANIMATEDPRESERVEASPECTRATIO = 0x000003e8;
enum DISPID_SVGPOINT = 0x000003e8;
enum DISPID_SVGPOINTLIST = 0x000003e8;
enum DISPID_SVGLINEARGRADIENTELEMENT = 0x0000042e;
enum DISPID_SVGLINEELEMENT = 0x0000041a;
enum DISPID_SVGMARKERELEMENT = 0x0000041a;
enum DISPID_SVGMASKELEMENT = 0x0000041a;
enum DISPID_SVGMETADATAELEMENT = 0x0000041a;
enum DISPID_SVGMISSING_GLYPHELEMENT = 0x0000041a;
enum DISPID_SVGMPATHELEMENT = 0x0000041a;
enum DISPID_SVGNUMBER = 0x000003e8;
enum DISPID_SVGNUMBERLIST = 0x000003e8;
enum DISPID_SVGPATHELEMENT = 0x0000041a;
enum DISPID_SVGPATTERNELEMENT = 0x0000041a;
enum DISPID_SVGPOLYGONELEMENT = 0x0000041a;
enum DISPID_SVGPOLYLINEELEMENT = 0x0000041a;
enum DISPID_SVGRADIALGRADIENTELEMENT = 0x0000042e;
enum DISPID_SVGRECT = 0x000003e8;
enum DISPID_SVGRECTELEMENT = 0x0000041a;
enum DISPID_SVGSCRIPTELEMENT = 0x0000041a;
enum DISPID_SVGSETELEMENT = 0x0000041a;
enum DISPID_SVGSTOPELEMENT = 0x0000041a;
enum DISPID_SVGSTRINGLIST = 0x000003e8;
enum DISPID_SVGSTYLEELEMENT = 0x0000041a;
enum DISPID_SVGSVGELEMENT = 0x0000041a;
enum DISPID_SVGSWITCHELEMENT = 0x0000041a;
enum DISPID_SVGSYMBOLELEMENT = 0x0000041a;
enum DISPID_SVGTITLEELEMENT = 0x0000041a;
enum DISPID_SVGTREFELEMENT = 0x0000041a;
enum DISPID_SVGTEXTCONTENTELEMENT = 0x0000041a;
enum DISPID_SVGTEXTCONTENTELEMENT_BASE = 0x0000042e;
enum DISPID_SVGTEXTPOSITIONINGELEMENT = 0x0000042e;
enum DISPID_SVGTEXTPOSITIONINGELEMENT_BASE = 0x00000442;
enum DISPID_SVGTEXTELEMENT = 0x00000442;
enum DISPID_SVGTSPANELEMENT = 0x00000442;
enum DISPID_SVGTEXTPATHELEMENT = 0x0000042e;
enum DISPID_SVGUSEELEMENT = 0x0000041a;
enum DISPID_SVGVIEWELEMENT = 0x0000041a;
enum DISPID_SVGVKERNELEMENT = 0x0000041a;
enum DISPID_SVGMATRIX = 0x000003e8;
enum DISPID_SVGTRANSFORM = 0x000003e8;
enum DISPID_SVGTRANSFORMLIST = 0x000003e8;
enum DISPID_SVGANIMATEDTRANSFORMLIST = 0x000003e8;
enum DISPID_SVGPATHSEG = 0x000003e8;
enum DISPID_SVGPATHSEG_BASE = 0x000003fc;
enum DISPID_SVGPATHSEGLIST = 0x000003e8;
enum DISPID_SVGPATHSEGARCABS = 0x000003fc;
enum DISPID_SVGPATHSEGARCREL = 0x000003fc;
enum DISPID_SVGPATHSEGCLOSEPATH = 0x000003fc;
enum DISPID_SVGPATHSEGMOVETOABS = 0x000003fc;
enum DISPID_SVGPATHSEGMOVETOREL = 0x000003fc;
enum DISPID_SVGPATHSEGLINETOABS = 0x000003fc;
enum DISPID_SVGPATHSEGLINETOREL = 0x000003fc;
enum DISPID_SVGPATHSEGCURVETOCUBICABS = 0x000003fc;
enum DISPID_SVGPATHSEGCURVETOCUBICREL = 0x000003fc;
enum DISPID_SVGPATHSEGCURVETOCUBICSMOOTHABS = 0x000003fc;
enum DISPID_SVGPATHSEGCURVETOCUBICSMOOTHREL = 0x000003fc;
enum DISPID_SVGPATHSEGCURVETOQUADRATICABS = 0x000003fc;
enum DISPID_SVGPATHSEGCURVETOQUADRATICREL = 0x000003fc;
enum DISPID_SVGPATHSEGCURVETOQUADRATICSMOOTHABS = 0x000003fc;
enum DISPID_SVGPATHSEGCURVETOQUADRATICSMOOTHREL = 0x000003fc;
enum DISPID_SVGPATHSEGLINETOHORIZONTALABS = 0x000003fc;
enum DISPID_SVGPATHSEGLINETOHORIZONTALREL = 0x000003fc;
enum DISPID_SVGPATHSEGLINETOVERTICALABS = 0x000003fc;
enum DISPID_SVGPATHSEGLINETOVERTICALREL = 0x000003fc;
enum DISPID_CANVASELEMENT = 0x000003e8;
enum DISPID_CANVASRENDERCONTEXT2D = 0x000003e8;
enum DISPID_CANVASGRADIENT = 0x000003e8;
enum DISPID_CANVASTEXTMETRICS = 0x000003e8;
enum DISPID_CANVASIMAGEDATA = 0x000003e8;
enum DISPID_CANVASPIXELARRAY = 0x000003e8;
enum DISPID_PERFORMANCE = 0x000003e8;
enum DISPID_PERFORMANCENAVIGATION = 0x000003e8;
enum DISPID_PERFORMANCETIMING = 0x000003e8;
enum DISPID_MSHTMLWEBVIEWELEMENT = 0x000003e8;
enum DISPID_WEBGEOLOCATION = 0x000003e8;
enum DISPID_WEBGEOPOSITION = 0x000003e8;
enum DISPID_WEBGEOCOORDINATES = 0x000003e8;
enum DISPID_WEBGEOPOSITION_ERROR = 0x000003e8;
enum DISPID_DATALIST = 0x000003e8;
enum DISPID_IE8_ANCHOR = 0x0000047e;
enum DISPID_IE8_AREA = 0x0000047e;
enum DISPID_IE8_BASE = 0x0000047e;
enum DISPID_IE8_BODY = 0x0000047e;
enum DISPID_IE8_FORM = 0x0000047e;
enum DISPID_IE8_HEAD = 0x0000047e;
enum DISPID_IE8_IMG = 0x0000047e;
enum DISPID_IE8_INPUT = 0x0000047e;
enum DISPID_IE8_LINK = 0x0000047e;
enum DISPID_IE8_MOD = 0x0000047e;
enum DISPID_IE8_SCRIPT = 0x0000047e;
enum DISPID_IE8_ATTR = 0x0000047e;
enum DISPID_IE8_NAMEDNODEMAP = 0x0000047e;
enum DISPID_IE8_COLLECTION = 0x0000047e;
enum DISPID_IE8_PARAM = 0x0000047e;
enum DISPID_IE8_EMBED = 0x0000047e;
enum DISPID_IE8_BLOCK = 0x0000047e;
enum DISPID_IE8_META = 0x0000047e;
enum DISPID_IE8_STYLE = 0x0000047e;
enum DISPID_IE8_SELECT = 0x0000047e;
enum DISPID_IE8_ELEMENTBASE = 0x000104b0;
enum DISPID_IE8_ELEMENTMAX = 0x000104d8;
enum DISPID_IE8_ELEMENT = 0x000104b0;
enum DISPID_IE8_FRAMESITEBASE = 0x00011018;
enum DISPID_IE8_FRAME = 0x00011018;
enum DISPID_IE8_IFRAME = 0x00011018;
enum DISPID_IE8_OBJECTBASE = 0x00010bd6;
enum DISPID_IE8_OBJECT = 0x00010bd6;
enum DISPID_IE9_ELEMENTBASE = 0x000104e2;
enum DISPID_IE9_ELEMENTMAX = 0x00010505;
enum DISPID_IE9_ELEMENT = 0x000104e2;
enum DISPID_IE10_ELEMENTBASE = 0x00010506;
enum DISPID_IE10_ELEMENT = 0x00010506;
enum DISP10_IE10_XMSARIAFLOWFROM = 0x00010513;
enum DISPID_WINDOWOBJECT = 0xffffffffffffea84;
enum DISPID_PERFORMANCEOBJECT = 0xffffffffffffea7f;
enum DISPID_LOCATIONOBJECT = 0xffffffffffffea7e;
enum DISPID_HISTORYOBJECT = 0xffffffffffffea7d;
enum DISPID_NAVIGATOROBJECT = 0xffffffffffffea7c;
enum DISPID_SECURITYCTX = 0xffffffffffffea79;
enum DISPID_AMBIENT_DLCONTROL = 0xffffffffffffea78;
enum DISPID_AMBIENT_USERAGENT = 0xffffffffffffea77;
enum DISPID_SECURITYDOMAIN = 0xffffffffffffea76;
enum DISPID_DEBUG_ISSECUREPROXY = 0xffffffffffffea75;
enum DISPID_DEBUG_TRUSTEDPROXY = 0xffffffffffffea74;
enum DISPID_DEBUG_INTERNALWINDOW = 0xffffffffffffea73;
enum DISPID_DEBUG_ENABLESECUREPROXYASSERTS = 0xffffffffffffea72;
enum DLCTL_DLIMAGES = 0x00000010;
enum DLCTL_VIDEOS = 0x00000020;
enum DLCTL_BGSOUNDS = 0x00000040;
enum DLCTL_NO_SCRIPTS = 0x00000080;
enum DLCTL_NO_JAVA = 0x00000100;
enum DLCTL_NO_RUNACTIVEXCTLS = 0x00000200;
enum DLCTL_NO_DLACTIVEXCTLS = 0x00000400;
enum DLCTL_DOWNLOADONLY = 0x00000800;
enum DLCTL_NO_FRAMEDOWNLOAD = 0x00001000;
enum DLCTL_RESYNCHRONIZE = 0x00002000;
enum DLCTL_PRAGMA_NO_CACHE = 0x00004000;
enum DLCTL_NO_BEHAVIORS = 0x00008000;
enum DLCTL_NO_METACHARSET = 0x00010000;
enum DLCTL_URL_ENCODING_DISABLE_UTF8 = 0x00020000;
enum DLCTL_URL_ENCODING_ENABLE_UTF8 = 0x00040000;
enum DLCTL_NOFRAMES = 0x00080000;
enum DLCTL_FORCEOFFLINE = 0x10000000;
enum DLCTL_NO_CLIENTPULL = 0x20000000;
enum DLCTL_SILENT = 0x40000000;
enum DLCTL_OFFLINEIFNOTCONNECTED = 0x80000000;
enum DLCTL_OFFLINE = 0x80000000;
enum DISPID_ONABORT = 0x000003e8;
enum DISPID_ONCHANGE = 0x000003e9;
enum DISPID_ONERROR = 0x000003ea;
enum DISPID_ONLOAD = 0x000003eb;
enum DISPID_ONSELECT = 0x000003ee;
enum DISPID_ONSUBMIT = 0x000003ef;
enum DISPID_ONUNLOAD = 0x000003f0;
enum DISPID_ONBOUNCE = 0x000003f1;
enum DISPID_ONFINISH = 0x000003f2;
enum DISPID_ONSTART = 0x000003f3;
enum DISPID_ONLAYOUT = 0x000003f5;
enum DISPID_ONSCROLL = 0x000003f6;
enum DISPID_ONRESET = 0x000003f7;
enum DISPID_ONRESIZE = 0x000003f8;
enum DISPID_ONBEFOREUNLOAD = 0x000003f9;
enum DISPID_ONCHANGEFOCUS = 0x000003fa;
enum DISPID_ONCHANGEBLUR = 0x000003fb;
enum DISPID_ONPERSIST = 0x000003fc;
enum DISPID_ONPERSISTSAVE = 0x000003fd;
enum DISPID_ONPERSISTLOAD = 0x000003fe;
enum DISPID_ONCONTEXTMENU = 0x000003ff;
enum DISPID_ONBEFOREPRINT = 0x00000400;
enum DISPID_ONAFTERPRINT = 0x00000401;
enum DISPID_ONSTOP = 0x00000402;
enum DISPID_ONBEFOREEDITFOCUS = 0x00000403;
enum DISPID_ONMOUSEHOVER = 0x00000404;
enum DISPID_ONCONTENTREADY = 0x00000405;
enum DISPID_ONLAYOUTCOMPLETE = 0x00000406;
enum DISPID_ONPAGE = 0x00000407;
enum DISPID_ONLINKEDOVERFLOW = 0x00000408;
enum DISPID_ONMOUSEWHEEL = 0x00000409;
enum DISPID_ONBEFOREDEACTIVATE = 0x0000040a;
enum DISPID_ONMOVE = 0x0000040b;
enum DISPID_ONCONTROLSELECT = 0x0000040c;
enum DISPID_ONSELECTIONCHANGE = 0x0000040d;
enum DISPID_ONMOVESTART = 0x0000040e;
enum DISPID_ONMOVEEND = 0x0000040f;
enum DISPID_ONRESIZESTART = 0x00000410;
enum DISPID_ONRESIZEEND = 0x00000411;
enum DISPID_ONMOUSEENTER = 0x00000412;
enum DISPID_ONMOUSELEAVE = 0x00000413;
enum DISPID_ONACTIVATE = 0x00000414;
enum DISPID_ONDEACTIVATE = 0x00000415;
enum DISPID_ONMULTILAYOUTCLEANUP = 0x00000416;
enum DISPID_ONBEFOREACTIVATE = 0x00000417;
enum DISPID_ONFOCUSIN = 0x00000418;
enum DISPID_ONFOCUSOUT = 0x00000419;
enum DISPID_ONVALUECHANGE = 0x0000041a;
enum DISPID_ONSELECTADD = 0x0000041b;
enum DISPID_ONSELECTREMOVE = 0x0000041c;
enum DISPID_ONSELECTWITHIN = 0x0000041d;
enum DISPID_ONSYSTEMSCROLLINGSTART = 0x0000041e;
enum DISPID_ONSYSTEMSCROLLINGEND = 0x0000041f;
enum DISPID_ONOBJECTCONTENTSCROLLED = 0x00000420;
enum DISPID_ONSTORAGE = 0x00000421;
enum DISPID_ONSTORAGECOMMIT = 0x00000422;
enum DISPID_ONSHOW = 0x00000423;
enum DISPID_ONHIDE = 0x00000424;
enum DISPID_ONALERT = 0x00000425;
enum DISPID_ONPOPUPMENUSTART = 0x00000426;
enum DISPID_ONPOPUPMENUEND = 0x00000427;
enum DISPID_ONONLINE = 0x00000428;
enum DISPID_ONOFFLINE = 0x00000429;
enum DISPID_ONHASHCHANGE = 0x0000042a;
enum DISPID_ONMESSAGE = 0x0000042b;
enum DISPID_ONDOMMUTATION = 0x0000042c;
enum DISPID_SVGLOAD = 0x0000042d;
enum DISPID_SVGUNLOAD = 0x0000042e;
enum DISPID_SVGABORT = 0x0000042f;
enum DISPID_SVGERROR = 0x00000430;
enum DISPID_SVGRESIZE = 0x00000431;
enum DISPID_SVGSCROLL = 0x00000432;
enum DISPID_SVGZOOM = 0x00000433;
enum DISPID_MSPOINTERDOWN = 0x00000434;
enum DISPID_MSPOINTERMOVE = 0x00000435;
enum DISPID_MSPOINTERUP = 0x00000436;
enum DISPID_MSPOINTEROVER = 0x00000437;
enum DISPID_MSPOINTEROUT = 0x00000438;
enum DISPID_MSPOINTERCANCEL = 0x00000439;
enum DISPID_MSPOINTERHOVER = 0x0000043a;
enum DISPID_MSGESTURESTART = 0x0000043b;
enum DISPID_MSGESTURECHANGE = 0x0000043c;
enum DISPID_MSGESTUREEND = 0x0000043d;
enum DISPID_MSGESTUREHOLD = 0x0000043e;
enum DISPID_MSGESTURETAP = 0x0000043f;
enum DISPID_MSGESTUREDOUBLETAP = 0x00000440;
enum DISPID_MSINERTIASTART = 0x00000441;
enum DISPID_MSLOSTPOINTERCAPTURE = 0x00000442;
enum DISPID_MSGOTPOINTERCAPTURE = 0x00000443;
enum DISPID_MSTRANSITIONSTART = 0x00000444;
enum DISPID_MSTRANSITIONEND = 0x00000445;
enum DISPID_MSANIMATIONSTART = 0x00000446;
enum DISPID_MSANIMATIONEND = 0x00000447;
enum DISPID_MSANIMATIONITERATION = 0x00000448;
enum DISPID_MSGESTUREINIT = 0x00000449;
enum DISPID_MSMANIPULATIONSTATECHANGED = 0x0000044a;
enum DISPID_ONOPEN = 0x0000044b;
enum DISPID_ONCLOSE = 0x0000044c;
enum DISPID_MSPOINTERENTER = 0x0000044d;
enum DISPID_MSPOINTERLEAVE = 0x0000044e;
enum DISPID_MSORIENTATIONCHANGE = 0x0000044f;
enum DISPID_ONDEVICEORIENTATION = 0x00000450;
enum DISPID_ONDEVICEMOTION = 0x00000451;
enum DISPID_ONPAGESHOW = 0x00000452;
enum DISPID_ONPAGEHIDE = 0x00000453;
enum DISPID_ONCOMPASSNEEDSCALIBRATION = 0x00000454;
enum DISPID_A_FIRST = 0x00011388;
enum DISPID_A_MIN = 0x00011388;
enum DISPID_A_MAX = 0x0001176f;
enum DISPID_A_BACKGROUNDIMAGE = 0x00011389;
enum DISPID_A_COLOR = 0x0001138a;
enum DISPID_A_TEXTTRANSFORM = 0x0001138c;
enum DISPID_A_NOWRAP = 0x0001138d;
enum DISPID_A_LINEHEIGHT = 0x0001138e;
enum DISPID_A_TEXTINDENT = 0x0001138f;
enum DISPID_A_LETTERSPACING = 0x00011390;
enum DISPID_A_LANG = 0x00011391;
enum DISPID_A_OVERFLOW = 0x00011392;
enum DISPID_A_PADDING = 0x00011393;
enum DISPID_A_PADDINGTOP = 0x00011394;
enum DISPID_A_PADDINGRIGHT = 0x00011395;
enum DISPID_A_PADDINGBOTTOM = 0x00011396;
enum DISPID_A_PADDINGLEFT = 0x00011397;
enum DISPID_A_CLEAR = 0x00011398;
enum DISPID_A_LISTTYPE = 0x00011399;
enum DISPID_A_FONTFACE = 0x0001139a;
enum DISPID_A_FONTSIZE = 0x0001139b;
enum DISPID_A_TEXTDECORATIONLINETHROUGH = 0x0001139c;
enum DISPID_A_TEXTDECORATIONUNDERLINE = 0x0001139d;
enum DISPID_A_TEXTDECORATIONBLINK = 0x0001139e;
enum DISPID_A_TEXTDECORATIONNONE = 0x0001139f;
enum DISPID_A_FONTSTYLE = 0x000113a0;
enum DISPID_A_FONTVARIANT = 0x000113a1;
enum DISPID_A_BASEFONT = 0x000113a2;
enum DISPID_A_FONTWEIGHT = 0x000113a3;
enum DISPID_A_TABLEBORDERCOLOR = 0x000113a4;
enum DISPID_A_TABLEBORDERCOLORLIGHT = 0x000113a5;
enum DISPID_A_TABLEBORDERCOLORDARK = 0x000113a6;
enum DISPID_A_TABLEVALIGN = 0x000113a7;
enum DISPID_A_BACKGROUND = 0x000113a8;
enum DISPID_A_BACKGROUNDPOSX = 0x000113a9;
enum DISPID_A_BACKGROUNDPOSY = 0x000113aa;
enum DISPID_A_TEXTDECORATION = 0x000113ab;
enum DISPID_A_MARGIN = 0x000113ac;
enum DISPID_A_MARGINTOP = 0x000113ad;
enum DISPID_A_MARGINRIGHT = 0x000113ae;
enum DISPID_A_MARGINBOTTOM = 0x000113af;
enum DISPID_A_MARGINLEFT = 0x000113b0;
enum DISPID_A_FONT = 0x000113b1;
enum DISPID_A_FONTSIZEKEYWORD = 0x000113b2;
enum DISPID_A_FONTSIZECOMBINE = 0x000113b3;
enum DISPID_A_BACKGROUNDREPEAT = 0x000113b4;
enum DISPID_A_BACKGROUNDATTACHMENT = 0x000113b5;
enum DISPID_A_BACKGROUNDPOSITION = 0x000113b6;
enum DISPID_A_WORDSPACING = 0x000113b7;
enum DISPID_A_VERTICALALIGN = 0x000113b8;
enum DISPID_A_BORDER = 0x000113b9;
enum DISPID_A_BORDERTOP = 0x000113ba;
enum DISPID_A_BORDERRIGHT = 0x000113bb;
enum DISPID_A_BORDERBOTTOM = 0x000113bc;
enum DISPID_A_BORDERLEFT = 0x000113bd;
enum DISPID_A_BORDERCOLOR = 0x000113be;
enum DISPID_A_BORDERTOPCOLOR = 0x000113bf;
enum DISPID_A_BORDERRIGHTCOLOR = 0x000113c0;
enum DISPID_A_BORDERBOTTOMCOLOR = 0x000113c1;
enum DISPID_A_BORDERLEFTCOLOR = 0x000113c2;
enum DISPID_A_BORDERWIDTH = 0x000113c3;
enum DISPID_A_BORDERTOPWIDTH = 0x000113c4;
enum DISPID_A_BORDERRIGHTWIDTH = 0x000113c5;
enum DISPID_A_BORDERBOTTOMWIDTH = 0x000113c6;
enum DISPID_A_BORDERLEFTWIDTH = 0x000113c7;
enum DISPID_A_BORDERSTYLE = 0x000113c8;
enum DISPID_A_BORDERTOPSTYLE = 0x000113c9;
enum DISPID_A_BORDERRIGHTSTYLE = 0x000113ca;
enum DISPID_A_BORDERBOTTOMSTYLE = 0x000113cb;
enum DISPID_A_BORDERLEFTSTYLE = 0x000113cc;
enum DISPID_A_TEXTDECORATIONOVERLINE = 0x000113cd;
enum DISPID_A_FLOAT = 0x000113ce;
enum DISPID_A_DISPLAY = 0x000113cf;
enum DISPID_A_LISTSTYLETYPE = 0x000113d0;
enum DISPID_A_LISTSTYLEPOSITION = 0x000113d1;
enum DISPID_A_LISTSTYLEIMAGE = 0x000113d2;
enum DISPID_A_LISTSTYLE = 0x000113d3;
enum DISPID_A_WHITESPACE = 0x000113d4;
enum DISPID_A_PAGEBREAKBEFORE = 0x000113d5;
enum DISPID_A_PAGEBREAKAFTER = 0x000113d6;
enum DISPID_A_SCROLL = 0x000113d7;
enum DISPID_A_VISIBILITY = 0x000113d8;
enum DISPID_A_HIDDEN = 0x000113d9;
enum DISPID_A_FILTER = 0x000113da;
enum DISPID_DEFAULTVALUE = 0x000113db;
enum DISPID_A_BORDERCOLLAPSE = 0x000113dc;
enum DISPID_A_POSITION = 0x000113e2;
enum DISPID_A_ZINDEX = 0x000113e3;
enum DISPID_A_CLIP = 0x000113e4;
enum DISPID_A_CLIPRECTTOP = 0x000113e5;
enum DISPID_A_CLIPRECTRIGHT = 0x000113e6;
enum DISPID_A_CLIPRECTBOTTOM = 0x000113e7;
enum DISPID_A_CLIPRECTLEFT = 0x000113e8;
enum DISPID_A_FONTFACESRC = 0x000113e9;
enum DISPID_A_TABLELAYOUT = 0x000113ea;
enum DISPID_A_STYLETEXT = 0x000113eb;
enum DISPID_A_LANGUAGE = 0x000113ec;
enum DISPID_A_VALUE = 0x000113ed;
enum DISPID_A_CURSOR = 0x000113ee;
enum DISPID_A_EVENTSINK = 0x000113ef;
enum DISPID_A_PROPNOTIFYSINK = 0x000113f0;
enum DISPID_A_ROWSETNOTIFYSINK = 0x000113f1;
enum DISPID_INTERNAL_INLINESTYLEAA = 0x000113f2;
enum DISPID_INTERNAL_CSTYLEPTRCACHE = 0x000113f3;
enum DISPID_INTERNAL_CRUNTIMESTYLEPTRCACHE = 0x000113f4;
enum DISPID_INTERNAL_INVOKECONTEXT = 0x000113f5;
enum DISPID_A_BGURLIMGCTXCACHEINDEX = 0x000113f6;
enum DISPID_A_LIURLIMGCTXCACHEINDEX = 0x000113f7;
enum DISPID_A_ROWSETASYNCHNOTIFYSINK = 0x000113f8;
enum DISPID_INTERNAL_FILTERPTRCACHE = 0x000113f9;
enum DISPID_A_ROWPOSITIONCHANGESINK = 0x000113fa;
enum DISPID_A_BEHAVIOR = 0x000113fb;
enum DISPID_A_READYSTATE = 0x000113fc;
enum DISPID_A_DIR = 0x000113fd;
enum DISPID_A_UNICODEBIDI = 0x000113fe;
enum DISPID_A_DIRECTION = 0x000113ff;
enum DISPID_A_IMEMODE = 0x00011400;
enum DISPID_A_RUBYALIGN = 0x00011401;
enum DISPID_A_RUBYPOSITION = 0x00011402;
enum DISPID_A_RUBYOVERHANG = 0x00011403;
enum DISPID_INTERNAL_ONBEHAVIOR_CONTENTREADY = 0x00011404;
enum DISPID_INTERNAL_ONBEHAVIOR_DOCUMENTREADY = 0x00011405;
enum DISPID_INTERNAL_CDOMCHILDRENPTRCACHE = 0x00011406;
enum DISPID_A_LAYOUTGRIDCHAR = 0x00011407;
enum DISPID_A_LAYOUTGRIDLINE = 0x00011408;
enum DISPID_A_LAYOUTGRIDMODE = 0x00011409;
enum DISPID_A_LAYOUTGRIDTYPE = 0x0001140a;
enum DISPID_A_LAYOUTGRID = 0x0001140b;
enum DISPID_A_TEXTAUTOSPACE = 0x0001140c;
enum DISPID_A_LINEBREAK = 0x0001140d;
enum DISPID_A_WORDBREAK = 0x0001140e;
enum DISPID_A_TEXTJUSTIFY = 0x0001140f;
enum DISPID_A_TEXTJUSTIFYTRIM = 0x00011410;
enum DISPID_A_TEXTKASHIDA = 0x00011411;
enum DISPID_A_OVERFLOWX = 0x00011413;
enum DISPID_A_OVERFLOWY = 0x00011414;
enum DISPID_A_HTCDISPATCHITEM_VALUE = 0x00011415;
enum DISPID_A_DOCFRAGMENT = 0x00011416;
enum DISPID_A_HTCDD_ELEMENT = 0x00011417;
enum DISPID_A_HTCDD_CREATEEVENTOBJECT = 0x00011418;
enum DISPID_A_URNATOM = 0x00011419;
enum DISPID_A_UNIQUEPEERNUMBER = 0x0001141a;
enum DISPID_A_ACCELERATOR = 0x0001141b;
enum DISPID_INTERNAL_ONBEHAVIOR_APPLYSTYLE = 0x0001141c;
enum DISPID_INTERNAL_RUNTIMESTYLEAA = 0x0001141d;
enum DISPID_A_HTCDISPATCHITEM_VALUE_SCRIPTSONLY = 0x0001141e;
enum DISPID_A_EXTENDEDTAGDESC = 0x0001141f;
enum DISPID_A_ROTATE = 0x00011420;
enum DISPID_A_ZOOM = 0x00011421;
enum DISPID_A_HTCDD_PROTECTEDELEMENT = 0x00011422;
enum DISPID_A_LAYOUTFLOW = 0x00011423;
enum DISPID_INTERNAL_FILTERNATIVEINFOPTRCACHE = 0x00011424;
enum DISPID_A_HTCDD_ISMARKUPSHARED = 0x00011425;
enum DISPID_A_WORDWRAP = 0x00011426;
enum DISPID_A_TEXTUNDERLINEPOSITION = 0x00011427;
enum DISPID_A_HASLAYOUT = 0x00011428;
enum DISPID_A_MEDIA = 0x00011429;
enum DISPID_A_EDITABLE = 0x0001142a;
enum DISPID_A_HIDEFOCUS = 0x0001142b;
enum DISPID_INTERNAL_LAYOUTRECTREGISTRYPTRCACHE = 0x0001142c;
enum DISPID_A_HTCDD_DEFAULTS = 0x0001142d;
enum DISPID_A_TEXTLINETHROUGHSTYLE = 0x0001142e;
enum DISPID_A_TEXTUNDERLINESTYLE = 0x0001142f;
enum DISPID_A_TEXTEFFECT = 0x00011430;
enum DISPID_A_TEXTBACKGROUNDCOLOR = 0x00011431;
enum DISPID_A_RENDERINGPRIORITY = 0x00011432;
enum DISPID_INTERNAL_DWNPOSTPTRCACHE = 0x00011433;
enum DISPID_INTERNAL_CODEPAGESETTINGSPTRCACHE = 0x00011434;
enum DISPID_INTERNAL_DWNDOCPTRCACHE = 0x00011435;
enum DISPID_INTERNAL_DATABINDTASKPTRCACHE = 0x00011436;
enum DISPID_INTERNAL_URLLOCATIONCACHE = 0x00011437;
enum DISPID_INTERNAL_ARYELEMENTRELEASENOTIFYPTRCACHE = 0x00011438;
enum DISPID_INTERNAL_PEERFACTORYURLMAPPTRCACHE = 0x00011439;
enum DISPID_INTERNAL_STMDIRTYPTRCACHE = 0x0001143a;
enum DISPID_INTERNAL_COMPUTEFORMATSTATECACHE = 0x0001143b;
enum DISPID_A_SCROLLBARBASECOLOR = 0x0001143c;
enum DISPID_A_SCROLLBARFACECOLOR = 0x0001143d;
enum DISPID_A_SCROLLBAR3DLIGHTCOLOR = 0x0001143e;
enum DISPID_A_SCROLLBARSHADOWCOLOR = 0x0001143f;
enum DISPID_A_SCROLLBARHIGHLIGHTCOLOR = 0x00011440;
enum DISPID_A_SCROLLBARDARKSHADOWCOLOR = 0x00011441;
enum DISPID_A_SCROLLBARARROWCOLOR = 0x00011442;
enum DISPID_INTERNAL_ONBEHAVIOR_CONTENTSAVE = 0x00011443;
enum DISPID_A_DEFAULTTEXTSELECTION = 0x00011444;
enum DISPID_A_TEXTDECORATIONCOLOR = 0x00011445;
enum DISPID_A_TEXTCOLOR = 0x00011446;
enum DISPID_A_STYLETEXTDECORATION = 0x00011447;
enum DISPID_A_WRITINGMODE = 0x00011448;
enum DISPID_INTERNAL_MEDIA_REFERENCE = 0x00011449;
enum DISPID_INTERNAL_GENERICCOMPLUSREF = 0x0001144a;
enum DISPID_INTERNAL_FOCUSITEMS = 0x0001144b;
enum DISPID_A_SCROLLBARTRACKCOLOR = 0x0001144c;
enum DISPID_INTERNAL_DWNHEADERCACHE = 0x0001144d;
enum DISPID_A_FROZEN = 0x0001144e;
enum DISPID_A_VIEWINHERITSTYLE = 0x0001144f;
enum DISPID_INTERNAL_FRAMESCOLLECTION = 0x00011450;
enum DISPID_A_BGURLIMGCTXCACHEINDEX_FLINE = 0x00011451;
enum DISPID_A_BGURLIMGCTXCACHEINDEX_FLETTER = 0x00011452;
enum DISPID_A_TEXTALIGNLAST = 0x00011453;
enum DISPID_A_TEXTKASHIDASPACE = 0x00011454;
enum DISPID_INTERNAL_FONTHISTORYINDEX = 0x00011455;
enum DISPID_A_ALLOWTRANSPARENCY = 0x00011456;
enum DISPID_INTERNAL_URLSEARCHCACHE = 0x00011457;
enum DISPID_A_ISBLOCK = 0x00011458;
enum DISPID_A_TEXTOVERFLOW = 0x00011459;
enum DISPID_INTERNAL_CATTRIBUTECOLLPTRCACHE = 0x0001145a;
enum DISPID_A_MINHEIGHT = 0x0001145b;
enum DISPID_INTERNAL_INVOKECONTEXTDOCUMENT = 0x0001145c;
enum DISPID_A_INTERPOLATION = 0x0001145d;
enum DISPID_A_MAXHEIGHT = 0x0001145e;
enum DISPID_A_MINWIDTH = 0x0001145f;
enum DISPID_A_MAXWIDTH = 0x00011460;
enum DISPID_INTERNAL_ARYOBJECTRELEASECLEANUPPTRCACHE = 0x00011461;
enum DISPID_A_CONTENT = 0x00011462;
enum DISPID_A_CAPTIONSIDE = 0x00011463;
enum DISPID_A_COUNTERINCREMENT = 0x00011464;
enum DISPID_A_COUNTERRESET = 0x00011465;
enum DISPID_A_OUTLINE = 0x00011466;
enum DISPID_A_OUTLINEWIDTH = 0x00011467;
enum DISPID_A_OUTLINESTYLE = 0x00011468;
enum DISPID_A_OUTLINECOLOR = 0x00011469;
enum DISPID_A_BOXSIZING = 0x0001146a;
enum DISPID_A_BORDERSPACING = 0x0001146b;
enum DISPID_A_ORPHANS = 0x0001146c;
enum DISPID_A_WIDOWS = 0x0001146d;
enum DISPID_A_PAGEBREAKINSIDE = 0x0001146e;
enum DISPID_A_MS_BEHAVIOR = 0x0001146f;
enum DISPID_A_MS_SCROLLBARBASECOLOR = 0x00011470;
enum DISPID_A_MS_SCROLLBARFACECOLOR = 0x00011471;
enum DISPID_A_MS_SCROLLBAR3DLIGHTCOLOR = 0x00011472;
enum DISPID_A_MS_SCROLLBARSHADOWCOLOR = 0x00011473;
enum DISPID_A_MS_SCROLLBARHIGHLIGHTCOLOR = 0x00011474;
enum DISPID_A_MS_SCROLLBARDARKSHADOWCOLOR = 0x00011475;
enum DISPID_A_MS_SCROLLBARARROWCOLOR = 0x00011476;
enum DISPID_A_MS_SCROLLBARTRACKCOLOR = 0x00011477;
enum DISPID_A_MS_TEXTALIGNLAST = 0x00011478;
enum DISPID_A_MS_TEXTOVERFLOW = 0x00011479;
enum DISPID_A_MS_TEXTUNDERLINEPOSITION = 0x0001147a;
enum DISPID_A_MS_WRITINGMODE = 0x0001147b;
enum DISPID_A_MS_IMEMODE = 0x0001147c;
enum DISPID_A_MS_BACKGROUNDPOSX = 0x0001147d;
enum DISPID_A_MS_BACKGROUNDPOSY = 0x0001147e;
enum DISPID_A_MS_ACCELERATOR = 0x0001147f;
enum DISPID_A_MS_LAYOUTFLOW = 0x00011480;
enum DISPID_A_MS_ZOOM = 0x00011481;
enum DISPID_A_EMPTYCELLS = 0x00011482;
enum DISPID_A_MS_BLOCKPROGRESSION = 0x00011483;
enum DISPID_A_QUOTES = 0x00011484;
enum DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_GCBEFORE = 0x00011485;
enum DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_GCAFTER = 0x00011486;
enum DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_URLBEFORE = 0x00011487;
enum DISPID_INTERNAL_BGURLIMGCTXCACHEINDEX_URLAFTER = 0x00011488;
enum DISPID_AAHEADER = 0x00011489;
enum DISPID_INTERNAL_GETTERSETTERCOLLECTION = 0x0001148a;
enum DISPID_A_MS_LAYOUTGRIDCHAR = 0x0001148b;
enum DISPID_A_MS_LAYOUTGRIDLINE = 0x0001148c;
enum DISPID_A_MS_LAYOUTGRIDMODE = 0x0001148d;
enum DISPID_A_MS_LAYOUTGRIDTYPE = 0x0001148e;
enum DISPID_A_MS_LAYOUTGRID = 0x0001148f;
enum DISPID_A_MS_LINEBREAK = 0x00011490;
enum DISPID_A_MS_FILTER = 0x00011491;
enum DISPID_A_MS_OVERFLOWX = 0x00011492;
enum DISPID_A_MS_OVERFLOWY = 0x00011493;
enum DISPID_A_MS_TEXTAUTOSPACE = 0x00011494;
enum DISPID_A_MS_TEXTJUSTIFY = 0x00011495;
enum DISPID_A_MS_TEXTKASHIDASPACE = 0x00011496;
enum DISPID_A_MS_WORDBREAK = 0x00011497;
enum DISPID_A_MS_WORDWRAP = 0x00011498;
enum DISPID_INTERNAL_URIBEFOREREDIRECT = 0x00011499;
enum DISPID_A_ALIGNMENTBASELINE = 0x0001149e;
enum DISPID_A_BASELINESHIFT = 0x0001149f;
enum DISPID_A_DOMINANTBASELINE = 0x000114a0;
enum DISPID_A_FONTSIZEADJUST = 0x000114a1;
enum DISPID_A_FONTSTRETCH = 0x000114a2;
enum DISPID_A_OPACITY = 0x000114a3;
enum DISPID_A_CLIPPATH = 0x000114a4;
enum DISPID_A_CLIPRULE = 0x000114a5;
enum DISPID_A_FILL = 0x000114a6;
enum DISPID_A_FILLOPACITY = 0x000114a7;
enum DISPID_A_FILLRULE = 0x000114a8;
enum DISPID_A_KERNING = 0x000114a9;
enum DISPID_A_MARKER = 0x000114aa;
enum DISPID_A_MARKEREND = 0x000114ab;
enum DISPID_A_MARKERMID = 0x000114ac;
enum DISPID_A_MARKERSTART = 0x000114ad;
enum DISPID_A_MASK = 0x000114ae;
enum DISPID_A_POINTEREVENTS = 0x000114af;
enum DISPID_A_STOPCOLOR = 0x000114b0;
enum DISPID_A_STOPOPACITY = 0x000114b1;
enum DISPID_A_STROKE = 0x000114b2;
enum DISPID_A_STROKEDASHARRAY = 0x000114b3;
enum DISPID_A_STROKEDASHOFFSET = 0x000114b4;
enum DISPID_A_STROKELINECAP = 0x000114b5;
enum DISPID_A_STROKELINEJOIN = 0x000114b6;
enum DISPID_A_STROKEMITERLIMIT = 0x000114b7;
enum DISPID_A_STROKEOPACITY = 0x000114b8;
enum DISPID_A_STROKEWIDTH = 0x000114b9;
enum DISPID_A_TEXTANCHOR = 0x000114ba;
enum DISPID_A_GLYPHORIENTATIONHORIZONTAL = 0x000114bb;
enum DISPID_A_GLYPHORIENTATIONVERTICAL = 0x000114bc;
enum DISPID_A_CSSFLOAT = 0x000114bd;
enum DISPID_A_BORDERRADIUS = 0x000114be;
enum DISPID_A_BORDERTOPLEFTRADIUS = 0x000114bf;
enum DISPID_A_BORDERTOPRIGHTRADIUS = 0x000114c0;
enum DISPID_A_BORDERBOTTOMRIGHTRADIUS = 0x000114c1;
enum DISPID_A_BORDERBOTTOMLEFTRADIUS = 0x000114c2;
enum DISPID_A_MS_TRANSFORM = 0x000114c3;
enum DISPID_A_IE9_BACKGROUNDCLIP = 0x000114c4;
enum DISPID_A_IE9_BACKGROUNDORIGIN = 0x000114c5;
enum DISPID_A_IE9_BACKGROUNDSIZE = 0x000114c6;
enum DISPID_A_IE9_BOXSHADOW = 0x000114c7;
enum DISPID_A_MS_TRANSFORMORIGIN = 0x000114cd;
enum DISPID_A_MS_TRANSFORMORIGINX = 0x000114ce;
enum DISPID_A_MS_TRANSFORMORIGINY = 0x000114cf;
enum DISPID_A_MS_TEXTSIZEADJUST = 0x000114d0;
enum DISPID_A_MS_TRANSITIONPROPERTY = 0x000114d2;
enum DISPID_A_MS_TRANSITIONDURATION = 0x000114d3;
enum DISPID_A_MS_TRANSITIONTIMINGFUNCTION = 0x000114d4;
enum DISPID_A_MS_TRANSITIONDELAY = 0x000114d5;
enum DISPID_A_MS_TRANSITION = 0x000114d6;
enum DISPID_A_COLUMNS = 0x000114d7;
enum DISPID_A_COLUMNCOUNT = 0x000114d8;
enum DISPID_A_COLUMNWIDTH = 0x000114d9;
enum DISPID_A_COLUMNGAP = 0x000114da;
enum DISPID_A_COLUMNFILL = 0x000114db;
enum DISPID_A_COLUMNSPAN = 0x000114dc;
enum DISPID_A_COLUMNRULE = 0x000114dd;
enum DISPID_A_COLUMNRULESTYLE = 0x000114de;
enum DISPID_A_COLUMNRULEWIDTH = 0x000114df;
enum DISPID_A_COLUMNRULECOLOR = 0x000114e0;
enum DISPID_A_BREAKBEFORE = 0x000114e1;
enum DISPID_A_BREAKAFTER = 0x000114e2;
enum DISPID_A_BREAKINSIDE = 0x000114e3;
enum DISPID_A_MS_TRANSFORMORIGINZ = 0x000114e4;
enum DISPID_A_MS_PERSPECTIVE = 0x000114e5;
enum DISPID_A_MS_PERSPECTIVEORIGIN = 0x000114e6;
enum DISPID_A_MS_PERSPECTIVEORIGINX = 0x000114e7;
enum DISPID_A_MS_PERSPECTIVEORIGINY = 0x000114e8;
enum DISPID_A_MS_TRANSFORMSTYLE = 0x000114e9;
enum DISPID_A_MS_BACKFACEVISIBILITY = 0x000114ea;
enum DISPID_A_MS_SCROLLCHAINING = 0x000114eb;
enum DISPID_A_MS_CONTENTZOOMING = 0x000114ec;
enum DISPID_A_MS_CONTENTZOOMSNAPTYPE = 0x000114ed;
enum DISPID_A_MS_SCROLLRAILS = 0x000114ee;
enum DISPID_A_MS_CONTENTZOOMCHAINING = 0x000114ef;
enum DISPID_A_MS_SCROLLSNAPTYPE = 0x000114f0;
enum DISPID_A_MS_CONTENTZOOMLIMIT = 0x000114f1;
enum DISPID_A_MS_CONTENTZOOMSNAP = 0x000114f2;
enum DISPID_A_MS_CONTENTZOOMSNAPPOINTS = 0x000114f3;
enum DISPID_A_MS_CONTENTZOOMFACTOR = 0x000114f4;
enum DISPID_A_MS_CONTENTZOOMLIMITMIN = 0x000114f5;
enum DISPID_A_MS_CONTENTZOOMLIMITMAX = 0x000114f6;
enum DISPID_A_MS_SCROLLSNAPX = 0x000114f7;
enum DISPID_A_MS_SCROLLSNAPY = 0x000114f8;
enum DISPID_A_MS_SCROLLSNAPPOINTSX = 0x000114f9;
enum DISPID_A_MS_SCROLLSNAPPOINTSY = 0x000114fa;
enum DISPID_A_SPELLCHECK = 0x000114fb;
enum DISPID_A_MS_GRIDCOLUMN = 0x000114fc;
enum DISPID_A_MS_GRIDCOLUMNALIGN = 0x000114fd;
enum DISPID_A_MS_GRIDCOLUMNS = 0x000114fe;
enum DISPID_A_MS_GRIDCOLUMNSPAN = 0x000114ff;
enum DISPID_A_MS_GRIDROW = 0x00011501;
enum DISPID_A_MS_GRIDROWALIGN = 0x00011502;
enum DISPID_A_MS_GRIDROWS = 0x00011503;
enum DISPID_A_MS_GRIDROWSPAN = 0x00011504;
enum DISPID_A_MS_ANIMATIONNAME = 0x00011505;
enum DISPID_A_MS_ANIMATIONDURATION = 0x00011506;
enum DISPID_A_MS_ANIMATIONTIMINGFUNCTION = 0x00011507;
enum DISPID_A_MS_ANIMATIONDELAY = 0x00011508;
enum DISPID_A_MS_ANIMATIONDIRECTION = 0x00011509;
enum DISPID_A_MS_ANIMATIONPLAYSTATE = 0x0001150a;
enum DISPID_A_MS_ANIMATIONITERATIONCOUNT = 0x0001150b;
enum DISPID_A_MS_ANIMATION = 0x0001150c;
enum DISPID_A_MS_ANIMATIONFILLMODE = 0x0001150d;
enum DISPID_A_FLOODCOLOR = 0x0001150e;
enum DISPID_A_FLOODOPACITY = 0x0001150f;
enum DISPID_A_COLORINTERPOLATIONFILTERS = 0x00011510;
enum DISPID_A_LIGHTINGCOLOR = 0x00011511;
enum DISPID_A_MS_SCROLLLIMITXMIN = 0x00011512;
enum DISPID_A_MS_SCROLLLIMITYMIN = 0x00011513;
enum DISPID_A_MS_SCROLLLIMITXMAX = 0x00011514;
enum DISPID_A_MS_SCROLLLIMITYMAX = 0x00011515;
enum DISPID_A_MS_SCROLLLIMIT = 0x00011516;
enum DISPID_A_MS_OVERFLOWSTYLE = 0x00011517;
enum DISPID_A_TEXTSHADOW = 0x00011518;
enum DISPID_A_MS_WRAPTHROUGH = 0x00011519;
enum DISPID_A_MS_FLOWFROM = 0x0001151a;
enum DISPID_A_MS_FLOWINTO = 0x0001151b;
enum DISPID_A_MS_HYPHENS = 0x0001151c;
enum DISPID_A_MS_HYPHENATE_LIMIT_ZONE = 0x0001151d;
enum DISPID_A_MS_HYPHENATE_LIMIT_CHARS = 0x0001151e;
enum DISPID_A_MS_HYPHENATE_LIMIT_LINES = 0x0001151f;
enum DISPID_A_DRAGGABLE = 0x00011520;
enum DISPID_A_MS_HIGHCONTRASTADJUST = 0x00011521;
enum DISPID_A_ENABLEBACKGROUND = 0x00011522;
enum DISPID_A_MS_WRAPMARGIN = 0x00011523;
enum DISPID_A_MS_WRAPFLOW = 0x00011525;
enum DISPID_A_MS_FONTFEATURESETTINGS = 0x00011526;
enum DISPID_A_MS_USERSELECT = 0x00011527;
enum DISPID_A_MS_TOUCHACTION = 0x00011528;
enum DISPID_A_CLASSLIST = 0x00011529;
enum DISPID_A_MS_SCROLLTRANSLATION = 0x0001152a;
enum DISPID_A_MS_FLEX = 0x0001152b;
enum DISPID_A_MS_FLEXPOSITIVE = 0x0001152c;
enum DISPID_A_MS_FLEXNEGATIVE = 0x0001152d;
enum DISPID_A_MS_FLEXPREFERREDSIZE = 0x0001152e;
enum DISPID_A_MS_FLEXFLOW = 0x0001152f;
enum DISPID_A_MS_FLEXDIRECTION = 0x00011530;
enum DISPID_A_MS_FLEXWRAP = 0x00011531;
enum DISPID_A_MS_FLEXALIGN = 0x00011532;
enum DISPID_A_MS_FLEXITEMALIGN = 0x00011533;
enum DISPID_A_MS_FLEXPACK = 0x00011534;
enum DISPID_A_MS_FLEXLINEPACK = 0x00011535;
enum DISPID_A_MS_FLEXORDER = 0x00011536;
enum DISPID_A_TRANSFORM = 0x00011537;
enum DISPID_A_TRANSFORMORIGIN = 0x00011538;
enum DISPID_A_TRANSITIONPROPERTY = 0x00011539;
enum DISPID_A_TRANSITIONDURATION = 0x0001153a;
enum DISPID_A_TRANSITIONTIMINGFUNCTION = 0x0001153b;
enum DISPID_A_TRANSITIONDELAY = 0x0001153c;
enum DISPID_A_TRANSITION = 0x0001153d;
enum DISPID_A_PERSPECTIVE = 0x0001153e;
enum DISPID_A_PERSPECTIVEORIGIN = 0x0001153f;
enum DISPID_A_TRANSFORMSTYLE = 0x00011540;
enum DISPID_A_BACKFACEVISIBILITY = 0x00011541;
enum DISPID_A_ANIMATIONNAME = 0x00011542;
enum DISPID_A_ANIMATIONDURATION = 0x00011543;
enum DISPID_A_ANIMATIONTIMINGFUNCTION = 0x00011544;
enum DISPID_A_ANIMATIONDELAY = 0x00011545;
enum DISPID_A_ANIMATIONDIRECTION = 0x00011546;
enum DISPID_A_ANIMATIONPLAYSTATE = 0x00011547;
enum DISPID_A_ANIMATIONITERATIONCOUNT = 0x00011548;
enum DISPID_A_ANIMATION = 0x00011549;
enum DISPID_A_ANIMATIONFILLMODE = 0x0001154a;
enum DISPID_A_FONTFEATURESETTINGS = 0x0001154b;
enum DISPID_A_TRANSFORMORIGINX = 0x0001154c;
enum DISPID_A_TRANSFORMORIGINY = 0x0001154d;
enum DISPID_A_TRANSFORMORIGINZ = 0x0001154e;
enum DISPID_A_PERSPECTIVEORIGINX = 0x00011550;
enum DISPID_A_PERSPECTIVEORIGINY = 0x00011551;
enum DISPID_A_MS_TOUCHSELECT = 0x00011552;
enum DISPID_INTERNAL_ERRORPAGEREFRESHURL = 0x00011553;
enum DISPID_INTERNAL_ERRORPAGEREASON = 0x00011554;
enum DISPID_INTERNAL_ERRORPAGEDWNPOST = 0x00011555;
enum DISPID_A_FLEXDIRECTION = 0x00011556;
enum DISPID_A_FLEXWRAP = 0x00011557;
enum DISPID_A_FLEXFLOW = 0x00011558;
enum DISPID_A_ORDER = 0x00011559;
enum DISPID_A_FLEX = 0x0001155a;
enum DISPID_A_FLEXGROW = 0x0001155b;
enum DISPID_A_FLEXSHRINK = 0x0001155c;
enum DISPID_A_FLEXBASIS = 0x0001155d;
enum DISPID_A_JUSTIFYCONTENT = 0x0001155e;
enum DISPID_A_ALIGNITEMS = 0x0001155f;
enum DISPID_A_ALIGNSELF = 0x00011560;
enum DISPID_A_ALIGNCONTENT = 0x00011561;
enum DISPID_A_BORDERIMAGE = 0x00011562;
enum DISPID_A_BORDERIMAGESOURCE = 0x00011563;
enum DISPID_A_BORDERIMAGESLICE = 0x00011564;
enum DISPID_A_BORDERIMAGEWIDTH = 0x00011565;
enum DISPID_A_BORDERIMAGEOUTSET = 0x00011566;
enum DISPID_A_BORDERIMAGEREPEAT = 0x00011567;
enum DISPID_A_DATASET = 0x00011568;
enum DISPID_A_MS_IMEALIGN = 0x00011569;
enum DISPID_A_MS_TEXTCOMBINEHORIZONTAL = 0x0001156a;
enum DISPID_A_TOUCHACTION = 0x0001156b;
enum DISPID_A_WEBKIT_APPEARANCE = 0x0001156c;
enum DISPID_A_WEBKIT_BOXALIGN = 0x0001156d;
enum DISPID_A_WEBKIT_BOXORDINALGROUP = 0x0001156e;
enum DISPID_A_WEBKIT_BOXPACK = 0x0001156f;
enum DISPID_A_WEBKIT_BOXFLEX = 0x00011570;
enum DISPID_A_WEBKIT_BOXORIENT = 0x00011571;
enum DISPID_A_WEBKIT_BOXDIRECTION = 0x00011572;
enum DISPID_A_WEBKIT_ANIMATIONFILLMODE = 0x00011573;
enum DISPID_A_WEBKIT_TRANSFORM = 0x00011574;
enum DISPID_A_WEBKIT_BACKGROUNDSIZE = 0x00011575;
enum DISPID_A_WEBKIT_BACKFACEVISIBILITY = 0x00011576;
enum DISPID_A_WEBKIT_BOXSIZING = 0x00011577;
enum DISPID_A_WEBKIT_USERSELECT = 0x00011578;
enum DISPID_A_WEBKIT_ANIMATION = 0x00011579;
enum DISPID_A_WEBKIT_TRANSITION = 0x0001157a;
enum DISPID_A_WEBKIT_ANIMATIONNAME = 0x0001157b;
enum DISPID_A_WEBKIT_ANIMATIONDURATION = 0x0001157c;
enum DISPID_A_WEBKIT_ANIMATIONTIMINGFUNCTION = 0x0001157d;
enum DISPID_A_WEBKIT_ANIMATIONDELAY = 0x0001157e;
enum DISPID_A_WEBKIT_ANIMATIONITERATIONCOUNT = 0x0001157f;
enum DISPID_A_WEBKIT_ANIMATIONDIRECTION = 0x00011580;
enum DISPID_A_WEBKIT_ANIMATIONPLAYSTATE = 0x00011581;
enum DISPID_A_WEBKIT_TRANSITIONPROPERTY = 0x00011582;
enum DISPID_A_WEBKIT_TRANSITIONDURATION = 0x00011583;
enum DISPID_A_WEBKIT_TRANSITIONTIMINGFUNCTION = 0x00011584;
enum DISPID_A_WEBKIT_TRANSITIONDELAY = 0x00011585;
enum DISPID_A_WEBKIT_BACKGROUNDATTACHMENT = 0x00011586;
enum DISPID_A_WEBKIT_BACKGROUNDCOLOR = 0x00011587;
enum DISPID_A_WEBKIT_BACKGROUNDCLIP = 0x00011588;
enum DISPID_A_WEBKIT_BACKGROUNDIMAGE = 0x00011589;
enum DISPID_A_WEBKIT_BACKGROUNDREPEAT = 0x0001158a;
enum DISPID_A_WEBKIT_BACKGROUNDORIGIN = 0x0001158b;
enum DISPID_A_WEBKIT_BACKGROUNDPOSITION = 0x0001158c;
enum DISPID_A_WEBKIT_BACKGROUNDPOSITIONX = 0x0001158d;
enum DISPID_A_WEBKIT_BACKGROUNDPOSITIONY = 0x0001158e;
enum DISPID_A_WEBKIT_BACKGROUND = 0x0001158f;
enum DISPID_A_WEBKIT_TRANSFORMORIGIN = 0x00011590;
enum DISPID_A_WEBKIT_TRANSFORMORIGINX = 0x00011591;
enum DISPID_A_WEBKIT_TRANSFORMORIGINY = 0x00011592;
enum DISPID_A_WEBKIT_TRANSFORMORIGINZ = 0x00011593;
enum DISPID_A_WEBKIT_TEXTSIZEADJUST = 0x00011594;
enum DISPID_A_WEBKIT_BORDERIMAGE = 0x00011595;
enum DISPID_A_WEBKIT_BORDERIMAGESOURCE = 0x00011596;
enum DISPID_A_WEBKIT_BORDERIMAGESLICE = 0x00011597;
enum DISPID_A_WEBKIT_BORDERIMAGEWIDTH = 0x00011598;
enum DISPID_A_WEBKIT_BORDERIMAGEOUTSET = 0x00011599;
enum DISPID_A_WEBKIT_BORDERIMAGEREPEAT = 0x0001159a;
enum DISPID_INTERNAL_FIRST = 0x000115e0;
enum DISPID_INTERNAL_BACKGROUNDDEFINITION = 0x000115e1;
enum DISPID_A_MEDIAORIENTATION = 0x000115e2;
enum DISPID_A_MEDIAMAXWIDTH = 0x000115e3;
enum DISPID_A_MEDIAMINWIDTH = 0x000115e4;
enum DISPID_A_MEDIAWIDTH = 0x000115e5;
enum DISPID_A_MEDIAMAXHEIGHT = 0x000115e6;
enum DISPID_A_MEDIAMINHEIGHT = 0x000115e7;
enum DISPID_A_MEDIAHEIGHT = 0x000115e8;
enum DISPID_A_MEDIAMAXDEVICEWIDTH = 0x000115e9;
enum DISPID_A_MEDIAMINDEVICEWIDTH = 0x000115ea;
enum DISPID_A_MEDIADEVICEWIDTH = 0x000115eb;
enum DISPID_A_MEDIAMAXDEVICEHEIGHT = 0x000115ec;
enum DISPID_A_MEDIAMINDEVICEHEIGHT = 0x000115ed;
enum DISPID_A_MEDIADEVICEHEIGHT = 0x000115ee;
enum DISPID_A_MEDIAMAXASPECTRATIO = 0x000115ef;
enum DISPID_A_MEDIAMINASPECTRATIO = 0x000115f0;
enum DISPID_A_MEDIAASPECTRATIO = 0x000115f1;
enum DISPID_A_MEDIAMAXDEVICEASPECTRATIO = 0x000115f2;
enum DISPID_A_MEDIAMINDEVICEASPECTRATIO = 0x000115f3;
enum DISPID_A_MEDIADEVICEASPECTRATIO = 0x000115f4;
enum DISPID_A_MEDIAMAXCOLOR = 0x000115f5;
enum DISPID_A_MEDIAMINCOLOR = 0x000115f6;
enum DISPID_A_MEDIACOLOR = 0x000115f7;
enum DISPID_A_MEDIAMAXCOLORINDEX = 0x000115f8;
enum DISPID_A_MEDIAMINCOLORINDEX = 0x000115f9;
enum DISPID_A_MEDIACOLORINDEX = 0x000115fa;
enum DISPID_A_MEDIAMAXMONOCHROME = 0x000115fb;
enum DISPID_A_MEDIAMINMONOCHROME = 0x000115fc;
enum DISPID_A_MEDIAMONOCHROME = 0x000115fd;
enum DISPID_A_MEDIAMAXRESOLUTION = 0x000115fe;
enum DISPID_A_MEDIAMINRESOLUTION = 0x000115ff;
enum DISPID_A_MEDIARESOLUTION = 0x00011600;
enum DISPID_INTERNAL_CATTRIBUTEPTRCACHE = 0x00011601;
enum DISPID_INTERNAL_FONTFACEUNICODERANGE = 0x00011602;
enum DISPID_INTERNAL_TOUCHTARGETHANDLER = 0x00011603;
enum DISPID_INTERNAL_PAGEFLOWCOLLECTION = 0x00011604;
enum DISPID_INTERNAL_NAMEDFLOWCOLLECTION = 0x00011605;
enum DISPID_A_MEDIAMSHIGHCONTRAST = 0x00011606;
enum DISPID_INTERNAL_A_MS_HYPHENATE_LIMIT_WORDS = 0x00011607;
enum DISPID_INTERNAL_A_MS_HYPHENATE_LIMIT_BEFORE = 0x00011608;
enum DISPID_INTERNAL_A_MS_HYPHENATE_LIMIT_AFTER = 0x00011609;
enum DISPID_A_MEDIAMSVIEWSTATE = 0x0001160a;
enum DISPID_INTERNAL_ARIAATOMIC = 0x0001160b;
enum DISPID_INTERNAL_ARIAAUTOCOMPLETE = 0x0001160c;
enum DISPID_INTERNAL_ARIADROPEFFECT = 0x0001160d;
enum DISPID_INTERNAL_ARIAGRABBED = 0x0001160e;
enum DISPID_INTERNAL_ARIALABEL = 0x0001160f;
enum DISPID_INTERNAL_ARIAMULTILINE = 0x00011610;
enum DISPID_INTERNAL_ARIAORIENTATION = 0x00011611;
enum DISPID_INTERNAL_ARIASORT = 0x00011612;
enum DISPID_INTERNAL_ARIAVALUETEXT = 0x00011613;
enum DISPID_A_MEDIAGRID = 0x00011614;
enum DISPID_A_MEDIASCAN = 0x00011615;
enum DISPID_A_ACCEVENTRECORDID_START = 0x00011616;
enum DISPID_A_ACCEVENTRECORDID_END = 0x00011629;
enum DISPID_INTERNAL_REQUIRED = 0x0001162a;
enum DISPID_INTERNAL_CSS_PARSEDARY = 0x0001162b;
enum DISPID_INTERNAL_SOURCELOCATION = 0x0001162c;
enum DISPID_INTERNAL_CSS_TRACEDSTYLES = 0x0001162d;
enum DISPID_A_BDURLIMGCTXCACHEINDEX = 0x0001162e;
enum DISPID_A_MEDIAWEBKITDEVICEPIXELRATIO = 0x0001162f;
enum DISPID_A_MEDIAWEBKITMAXDEVICEPIXELRATIO = 0x00011630;
enum DISPID_A_MEDIAWEBKITMINDEVICEPIXELRATIO = 0x00011631;
enum DISPID_SVGSTYLABLE_CLASSNAME_PROP = 0x000003e9;
enum DISPID_SVGLOCATABLE_NEARESTVIEWPORTELEMENT = 0x000003ea;
enum DISPID_SVGLOCATABLE_FARTHESTVIEWPORTELEMENT = 0x000003eb;
enum DISPID_SVGLOCATABLE_GETBBOX = 0x000003ec;
enum DISPID_SVGLOCATABLE_GETCTM = 0x000003ed;
enum DISPID_SVGLOCATABLE_GETSCREENCTM = 0x000003ee;
enum DISPID_SVGLOCATABLE_GETTRANSFORMTOELEMENT = 0x000003ef;
enum DISPID_SVGTRANSFORMABLE_TRANSFORM_ATTR = 0x000003f0;
enum DISPID_SVGTRANSFORMABLE_TRANSFORM_PROP = 0x000003f1;
enum DISPID_SVGTESTS_REQUIREDFEATURES_ATTR = 0x000003f2;
enum DISPID_SVGTESTS_REQUIREDFEATURES_PROP = 0x000003f3;
enum DISPID_SVGTESTS_REQUIREDEXTENSIONS_ATTR = 0x000003f4;
enum DISPID_SVGTESTS_REQUIREDEXTENSIONS_PROP = 0x000003f5;
enum DISPID_SVGTESTS_SYSTEMLANGUAGE_ATTR = 0x000003f6;
enum DISPID_SVGTESTS_SYSTEMLANGUAGE_PROP = 0x000003f7;
enum DISPID_SVGTESTS_HASEXTENSION = 0x000003f8;
enum DISPID_SVGLANGSPACE_XMLLANG = 0x000003f9;
enum DISPID_SVGLANGSPACE_XMLSPACE = 0x000003fa;
enum DISPID_SVGEXTERNALRESOURCESREQUIRED_EXTERNALRESOURCESREQUIRED_ATTR = 0x000003fb;
enum DISPID_SVGEXTERNALRESOURCESREQUIRED_EXTERNALRESOURCESREQUIRED_PROP = 0x000003fc;
enum DISPID_SVGFITTOVIEWBOX_VIEWBOX_ATTR = 0x000003fd;
enum DISPID_SVGFITTOVIEWBOX_VIEWBOX_PROP = 0x000003fe;
enum DISPID_SVGFITTOVIEWBOX_PRESERVEASPECTRATIO_ATTR = 0x000003ff;
enum DISPID_SVGFITTOVIEWBOX_PRESERVEASPECTRATIO_PROP = 0x00000400;
enum DISPID_SVGZOOMANDPAN_ZOOMANDPAN = 0x00000401;
enum DISPID_SVGURIREFERENCE_HREF = 0x00000402;
enum DISPID_EVPROP_ONMOUSEOVER = 0x00011770;
enum DISPID_EVMETH_ONMOUSEOVER = 0x00010008;
enum DISPID_EVPROP_ONMOUSEOUT = 0x00011771;
enum DISPID_EVMETH_ONMOUSEOUT = 0x00010009;
enum DISPID_EVPROP_ONMOUSEDOWN = 0x00011772;
enum DISPID_EVMETH_ONMOUSEDOWN = 0xfffffffffffffda3;
enum DISPID_EVPROP_ONMOUSEUP = 0x00011773;
enum DISPID_EVMETH_ONMOUSEUP = 0xfffffffffffffda1;
enum DISPID_EVPROP_ONMOUSEMOVE = 0x00011774;
enum DISPID_EVMETH_ONMOUSEMOVE = 0xfffffffffffffda2;
enum DISPID_EVPROP_ONKEYDOWN = 0x00011775;
enum DISPID_EVMETH_ONKEYDOWN = 0xfffffffffffffda6;
enum DISPID_EVPROP_ONKEYUP = 0x00011776;
enum DISPID_EVMETH_ONKEYUP = 0xfffffffffffffda4;
enum DISPID_EVPROP_ONKEYPRESS = 0x00011777;
enum DISPID_EVMETH_ONKEYPRESS = 0xfffffffffffffda5;
enum DISPID_EVPROP_ONCLICK = 0x00011778;
enum DISPID_EVMETH_ONCLICK = 0xfffffffffffffda8;
enum DISPID_EVPROP_ONDBLCLICK = 0x00011779;
enum DISPID_EVMETH_ONDBLCLICK = 0xfffffffffffffda7;
enum DISPID_EVPROP_ONSELECT = 0x0001177a;
enum DISPID_EVMETH_ONSELECT = 0x000003ee;
enum DISPID_EVPROP_ONSUBMIT = 0x0001177b;
enum DISPID_EVMETH_ONSUBMIT = 0x000003ef;
enum DISPID_EVPROP_ONRESET = 0x0001177c;
enum DISPID_EVMETH_ONRESET = 0x000003f7;
enum DISPID_EVPROP_ONHELP = 0x0001177d;
enum DISPID_EVMETH_ONHELP = 0x0001000a;
enum DISPID_EVPROP_ONFOCUS = 0x0001177e;
enum DISPID_EVMETH_ONFOCUS = 0x00010001;
enum DISPID_EVPROP_ONBLUR = 0x0001177f;
enum DISPID_EVPROP_ONROWEXIT = 0x00011782;
enum DISPID_EVMETH_ONROWEXIT = 0x00010006;
enum DISPID_EVPROP_ONROWENTER = 0x00011783;
enum DISPID_EVMETH_ONROWENTER = 0x00010007;
enum DISPID_EVPROP_ONBOUNCE = 0x00011784;
enum DISPID_EVMETH_ONBOUNCE = 0x000003f1;
enum DISPID_EVPROP_ONBEFOREUPDATE = 0x00011785;
enum DISPID_EVMETH_ONBEFOREUPDATE = 0x00010004;
enum DISPID_EVPROP_ONAFTERUPDATE = 0x00011786;
enum DISPID_EVMETH_ONAFTERUPDATE = 0x00010005;
enum DISPID_EVPROP_ONBEFOREDRAGOVER = 0x00011787;
enum DISPID_EVPROP_ONBEFOREDROPORPASTE = 0x00011788;
enum DISPID_EVPROP_ONREADYSTATECHANGE = 0x00011789;
enum DISPID_EVMETH_ONREADYSTATECHANGE = 0xfffffffffffffd9f;
enum DISPID_EVPROP_ONFINISH = 0x0001178a;
enum DISPID_EVMETH_ONFINISH = 0x000003f2;
enum DISPID_EVPROP_ONSTART = 0x0001178b;
enum DISPID_EVMETH_ONSTART = 0x000003f3;
enum DISPID_EVPROP_ONABORT = 0x0001178c;
enum DISPID_EVMETH_ONABORT = 0x000003e8;
enum DISPID_EVPROP_ONERROR = 0x0001178d;
enum DISPID_EVMETH_ONERROR = 0x000003ea;
enum DISPID_EVPROP_ONCHANGE = 0x0001178e;
enum DISPID_EVMETH_ONCHANGE = 0x000003e9;
enum DISPID_EVPROP_ONSCROLL = 0x0001178f;
enum DISPID_EVMETH_ONSCROLL = 0x000003f6;
enum DISPID_EVPROP_ONLOAD = 0x00011790;
enum DISPID_EVMETH_ONLOAD = 0x000003eb;
enum DISPID_EVPROP_ONUNLOAD = 0x00011791;
enum DISPID_EVMETH_ONUNLOAD = 0x000003f0;
enum DISPID_EVPROP_ONLAYOUT = 0x00011792;
enum DISPID_EVMETH_ONLAYOUT = 0x000003f5;
enum DISPID_EVPROP_ONDRAGSTART = 0x00011793;
enum DISPID_EVMETH_ONDRAGSTART = 0x0001000b;
enum DISPID_EVPROP_ONRESIZE = 0x00011794;
enum DISPID_EVMETH_ONRESIZE = 0x000003f8;
enum DISPID_EVPROP_ONSELECTSTART = 0x00011795;
enum DISPID_EVMETH_ONSELECTSTART = 0x0001000c;
enum DISPID_EVPROP_ONERRORUPDATE = 0x00011796;
enum DISPID_EVMETH_ONERRORUPDATE = 0x0001000d;
enum DISPID_EVPROP_ONBEFOREUNLOAD = 0x00011797;
enum DISPID_EVMETH_ONBEFOREUNLOAD = 0x000003f9;
enum DISPID_EVPROP_ONDATASETCHANGED = 0x00011798;
enum DISPID_EVMETH_ONDATASETCHANGED = 0x0001000e;
enum DISPID_EVPROP_ONDATAAVAILABLE = 0x00011799;
enum DISPID_EVMETH_ONDATAAVAILABLE = 0x0001000f;
enum DISPID_EVPROP_ONDATASETCOMPLETE = 0x0001179a;
enum DISPID_EVMETH_ONDATASETCOMPLETE = 0x00010010;
enum DISPID_EVPROP_ONFILTER = 0x0001179b;
enum DISPID_EVMETH_ONFILTER = 0x00010011;
enum DISPID_EVPROP_ONCHANGEFOCUS = 0x0001179c;
enum DISPID_EVMETH_ONCHANGEFOCUS = 0x000003fa;
enum DISPID_EVPROP_ONCHANGEBLUR = 0x0001179d;
enum DISPID_EVMETH_ONCHANGEBLUR = 0x000003fb;
enum DISPID_EVPROP_ONLOSECAPTURE = 0x0001179e;
enum DISPID_EVMETH_ONLOSECAPTURE = 0x00010012;
enum DISPID_EVPROP_ONPROPERTYCHANGE = 0x0001179f;
enum DISPID_EVMETH_ONPROPERTYCHANGE = 0x00010013;
enum DISPID_EVPROP_ONPERSISTSAVE = 0x000117a0;
enum DISPID_EVMETH_ONPERSISTSAVE = 0x000003fd;
enum DISPID_EVPROP_ONDRAG = 0x000117a1;
enum DISPID_EVMETH_ONDRAG = 0x00010014;
enum DISPID_EVPROP_ONDRAGEND = 0x000117a2;
enum DISPID_EVMETH_ONDRAGEND = 0x00010015;
enum DISPID_EVPROP_ONDRAGENTER = 0x000117a3;
enum DISPID_EVMETH_ONDRAGENTER = 0x00010016;
enum DISPID_EVPROP_ONDRAGOVER = 0x000117a4;
enum DISPID_EVMETH_ONDRAGOVER = 0x00010017;
enum DISPID_EVPROP_ONDRAGLEAVE = 0x000117a5;
enum DISPID_EVMETH_ONDRAGLEAVE = 0x00010018;
enum DISPID_EVPROP_ONDROP = 0x000117a6;
enum DISPID_EVMETH_ONDROP = 0x00010019;
enum DISPID_EVPROP_ONCUT = 0x000117a7;
enum DISPID_EVMETH_ONCUT = 0x0001001a;
enum DISPID_EVPROP_ONCOPY = 0x000117a8;
enum DISPID_EVMETH_ONCOPY = 0x0001001b;
enum DISPID_EVPROP_ONPASTE = 0x000117a9;
enum DISPID_EVMETH_ONPASTE = 0x0001001c;
enum DISPID_EVPROP_ONBEFORECUT = 0x000117aa;
enum DISPID_EVMETH_ONBEFORECUT = 0x0001001d;
enum DISPID_EVPROP_ONBEFORECOPY = 0x000117ab;
enum DISPID_EVMETH_ONBEFORECOPY = 0x0001001e;
enum DISPID_EVPROP_ONBEFOREPASTE = 0x000117ac;
enum DISPID_EVMETH_ONBEFOREPASTE = 0x0001001f;
enum DISPID_EVPROP_ONPERSISTLOAD = 0x000117ad;
enum DISPID_EVMETH_ONPERSISTLOAD = 0x000003fe;
enum DISPID_EVPROP_ONROWSDELETE = 0x000117ae;
enum DISPID_EVMETH_ONROWSDELETE = 0x00010020;
enum DISPID_EVPROP_ONROWSINSERTED = 0x000117af;
enum DISPID_EVMETH_ONROWSINSERTED = 0x00010021;
enum DISPID_EVPROP_ONCELLCHANGE = 0x000117b0;
enum DISPID_EVMETH_ONCELLCHANGE = 0x00010022;
enum DISPID_EVPROP_ONCONTEXTMENU = 0x000117b1;
enum DISPID_EVMETH_ONCONTEXTMENU = 0x000003ff;
enum DISPID_EVPROP_ONBEFOREPRINT = 0x000117b2;
enum DISPID_EVMETH_ONBEFOREPRINT = 0x00000400;
enum DISPID_EVPROP_ONAFTERPRINT = 0x000117b3;
enum DISPID_EVMETH_ONAFTERPRINT = 0x00000401;
enum DISPID_EVPROP_ONSTOP = 0x000117b4;
enum DISPID_EVMETH_ONSTOP = 0x00000402;
enum DISPID_EVPROP_ONBEFOREEDITFOCUS = 0x000117b5;
enum DISPID_EVMETH_ONBEFOREEDITFOCUS = 0x00000403;
enum DISPID_EVPROP_ONATTACHEVENT = 0x000117b6;
enum DISPID_EVPROP_ONMOUSEHOVER = 0x000117b7;
enum DISPID_EVMETH_ONMOUSEHOVER = 0x00000404;
enum DISPID_EVPROP_ONCONTENTREADY = 0x000117b8;
enum DISPID_EVMETH_ONCONTENTREADY = 0x00000405;
enum DISPID_EVPROP_ONLAYOUTCOMPLETE = 0x000117b9;
enum DISPID_EVMETH_ONLAYOUTCOMPLETE = 0x00000406;
enum DISPID_EVPROP_ONPAGE = 0x000117ba;
enum DISPID_EVMETH_ONPAGE = 0x00000407;
enum DISPID_EVPROP_ONLINKEDOVERFLOW = 0x000117bb;
enum DISPID_EVMETH_ONLINKEDOVERFLOW = 0x00000408;
enum DISPID_EVPROP_ONMOUSEWHEEL = 0x000117bc;
enum DISPID_EVMETH_ONMOUSEWHEEL = 0x00000409;
enum DISPID_EVPROP_ONBEFOREDEACTIVATE = 0x000117bd;
enum DISPID_EVMETH_ONBEFOREDEACTIVATE = 0x0000040a;
enum DISPID_EVPROP_ONMOVE = 0x000117be;
enum DISPID_EVMETH_ONMOVE = 0x0000040b;
enum DISPID_EVPROP_ONCONTROLSELECT = 0x000117bf;
enum DISPID_EVMETH_ONCONTROLSELECT = 0x0000040c;
enum DISPID_EVPROP_ONSELECTIONCHANGE = 0x000117c0;
enum DISPID_EVMETH_ONSELECTIONCHANGE = 0x0000040d;
enum DISPID_EVPROP_ONMOVESTART = 0x000117c1;
enum DISPID_EVMETH_ONMOVESTART = 0x0000040e;
enum DISPID_EVPROP_ONMOVEEND = 0x000117c2;
enum DISPID_EVMETH_ONMOVEEND = 0x0000040f;
enum DISPID_EVPROP_ONRESIZESTART = 0x000117c3;
enum DISPID_EVMETH_ONRESIZESTART = 0x00000410;
enum DISPID_EVPROP_ONRESIZEEND = 0x000117c4;
enum DISPID_EVMETH_ONRESIZEEND = 0x00000411;
enum DISPID_EVPROP_ONMOUSEENTER = 0x000117c5;
enum DISPID_EVMETH_ONMOUSEENTER = 0x00000412;
enum DISPID_EVPROP_ONMOUSELEAVE = 0x000117c6;
enum DISPID_EVMETH_ONMOUSELEAVE = 0x00000413;
enum DISPID_EVPROP_ONACTIVATE = 0x000117c7;
enum DISPID_EVMETH_ONACTIVATE = 0x00000414;
enum DISPID_EVPROP_ONDEACTIVATE = 0x000117c8;
enum DISPID_EVMETH_ONDEACTIVATE = 0x00000415;
enum DISPID_EVPROP_ONMULTILAYOUTCLEANUP = 0x000117c9;
enum DISPID_EVMETH_ONMULTILAYOUTCLEANUP = 0x00000416;
enum DISPID_EVPROP_ONBEFOREACTIVATE = 0x000117ca;
enum DISPID_EVMETH_ONBEFOREACTIVATE = 0x00000417;
enum DISPID_EVPROP_ONFOCUSIN = 0x000117cb;
enum DISPID_EVMETH_ONFOCUSIN = 0x00000418;
enum DISPID_EVPROP_ONFOCUSOUT = 0x000117cc;
enum DISPID_EVMETH_ONFOCUSOUT = 0x00000419;
enum DISPID_EVPROP_ONVALUECHANGE = 0x000117cd;
enum DISPID_EVMETH_ONVALUECHANGE = 0x0000041a;
enum DISPID_EVPROP_ONSELECTADD = 0x000117ce;
enum DISPID_EVMETH_ONSELECTADD = 0x0000041b;
enum DISPID_EVPROP_ONSELECTREMOVE = 0x000117cf;
enum DISPID_EVMETH_ONSELECTREMOVE = 0x0000041c;
enum DISPID_EVPROP_ONSELECTWITHIN = 0x000117d0;
enum DISPID_EVMETH_ONSELECTWITHIN = 0x0000041d;
enum DISPID_EVPROP_ONSYSTEMSCROLLINGSTART = 0x000117d1;
enum DISPID_EVMETH_ONSYSTEMSCROLLINGSTART = 0x0000041e;
enum DISPID_EVPROP_ONSYSTEMSCROLLINGEND = 0x000117d2;
enum DISPID_EVMETH_ONSYSTEMSCROLLINGEND = 0x0000041f;
enum DISPID_EVPROP_ONOBJECTCONTENTSCROLLED = 0x000117d3;
enum DISPID_EVMETH_ONOBJECTCONTENTSCROLLED = 0x00000420;
enum DISPID_EVPROP_ONSTORAGE = 0x000117d4;
enum DISPID_EVMETH_ONSTORAGE = 0x00000421;
enum DISPID_EVPROP_ONSTORAGECOMMIT = 0x000117d5;
enum DISPID_EVMETH_ONSTORAGECOMMIT = 0x00000422;
enum DISPID_EVPROP_ONSHOW = 0x000117d6;
enum DISPID_EVMETH_ONSHOW = 0x00000423;
enum DISPID_EVPROP_ONHIDE = 0x000117d7;
enum DISPID_EVMETH_ONHIDE = 0x00000424;
enum DISPID_EVPROP_ONALERT = 0x000117d8;
enum DISPID_EVMETH_ONALERT = 0x00000425;
enum DISPID_EVPROP_ONPOPUPMENUSTART = 0x000117d9;
enum DISPID_EVMETH_ONPOPUPMENUSTART = 0x00000426;
enum DISPID_EVPROP_ONPOPUPMENUEND = 0x000117da;
enum DISPID_EVMETH_ONPOPUPMENUEND = 0x00000427;
enum DISPID_EVPROP_ONONLINE = 0x000117db;
enum DISPID_EVMETH_ONONLINE = 0x00000428;
enum DISPID_EVPROP_ONOFFLINE = 0x000117dc;
enum DISPID_EVMETH_ONOFFLINE = 0x00000429;
enum DISPID_EVPROP_ONHASHCHANGE = 0x000117dd;
enum DISPID_EVMETH_ONHASHCHANGE = 0x0000042a;
enum DISPID_EVPROP_ONMESSAGE = 0x000117de;
enum DISPID_EVMETH_ONMESSAGE = 0x0000042b;
enum DISPID_EVPROP_ONDOMMUTATION = 0x000117df;
enum DISPID_EVMETH_ONDOMMUTATION = 0x0000042c;
enum DISPID_EVPROP_SINKLIMIT = 0x000117df;
enum DISPID_EVPROP_TIMEOUT = 0x000117e0;
enum DISPID_EVPROP_WHEEL = 0x000117e1;
enum DISPID_EVPROP_SVGLOAD = 0x000117e2;
enum DISPID_EVPROP_SVGUNLOAD = 0x000117e3;
enum DISPID_EVPROP_SVGABORT = 0x000117e4;
enum DISPID_EVPROP_SVGERROR = 0x000117e5;
enum DISPID_EVPROP_SVGRESIZE = 0x000117e6;
enum DISPID_EVPROP_SVGSCROLL = 0x000117e7;
enum DISPID_EVPROP_SVGZOOM = 0x000117e8;
enum DISPID_EVPROP_ONMSTHUMBNAILCLICK = 0x000117e9;
enum DISPID_EVPROP_COMPOSITIONSTART = 0x000117ea;
enum DISPID_EVPROP_COMPOSITIONUPDATE = 0x000117eb;
enum DISPID_EVPROP_COMPOSITIONEND = 0x000117ec;
enum DISPID_EVPROP_DOMATTRMODIFIED = 0x000117ed;
enum DISPID_EVPROP_DOMCONTENTLOADED = 0x000117ee;
enum DISPID_EVPROP_INPUT = 0x000117ef;
enum DISPID_EVPROP_DOMCHARDATAMODIFIED = 0x000117f0;
enum DISPID_EVPROP_TEXTINPUT = 0x000117f1;
enum DISPID_EVPROP_ONMSSITEMODEJUMPLISTITEMREMOVED = 0x000117f2;
enum DISPID_EVPROP_DOMNODEINSERTED = 0x000117f3;
enum DISPID_EVPROP_DOMNODEREMOVED = 0x000117f4;
enum DISPID_EVPROP_DOMSUBTREEMODIFIED = 0x000117f5;
enum DISPID_EVPROP_CANPLAY = 0x000117f6;
enum DISPID_EVPROP_CANPLAYTHROUGH = 0x000117f7;
enum DISPID_EVPROP_DURATIONCHANGE = 0x000117f8;
enum DISPID_EVPROP_EMPTIED = 0x000117f9;
enum DISPID_EVPROP_ENDED = 0x000117fa;
enum DISPID_EVPROP_LOADEDDATA = 0x000117fb;
enum DISPID_EVPROP_LOADEDMETADATA = 0x000117fc;
enum DISPID_EVPROP_LOADSTART = 0x000117fd;
enum DISPID_EVPROP_PAUSE = 0x000117fe;
enum DISPID_EVPROP_PLAY = 0x000117ff;
enum DISPID_EVPROP_PLAYING = 0x00011800;
enum DISPID_EVPROP_PROGRESS = 0x00011801;
enum DISPID_EVPROP_RATECHANGE = 0x00011802;
enum DISPID_EVPROP_SEEKED = 0x00011803;
enum DISPID_EVPROP_SEEKING = 0x00011804;
enum DISPID_EVPROP_STALLED = 0x00011805;
enum DISPID_EVPROP_SUSPEND = 0x00011806;
enum DISPID_EVPROP_TIMEUPDATE = 0x00011807;
enum DISPID_EVPROP_VOLUMECHANGE = 0x00011808;
enum DISPID_EVPROP_WAITING = 0x00011809;
enum DISPID_EVPROP_ONMSPOINTERDOWN = 0x0001180a;
enum DISPID_EVPROP_ONMSPOINTERMOVE = 0x0001180b;
enum DISPID_EVPROP_ONMSPOINTERUP = 0x0001180c;
enum DISPID_EVPROP_ONMSPOINTEROVER = 0x0001180d;
enum DISPID_EVPROP_ONMSPOINTEROUT = 0x0001180e;
enum DISPID_EVPROP_ONMSPOINTERCANCEL = 0x0001180f;
enum DISPID_EVPROP_ONMSPOINTERHOVER = 0x00011810;
enum DISPID_EVPROP_MSCONNECT = 0x00011811;
enum DISPID_EVPROP_MSDISCONNECT = 0x00011812;
enum DISPID_EVPROP_ONMSGESTURESTART = 0x00011813;
enum DISPID_EVPROP_ONMSGESTURECHANGE = 0x00011814;
enum DISPID_EVPROP_ONMSGESTUREEND = 0x00011815;
enum DISPID_EVPROP_ONMSGESTUREHOLD = 0x00011816;
enum DISPID_EVPROP_ONMSGESTURETAP = 0x00011817;
enum DISPID_EVPROP_ONMSGESTUREDOUBLETAP = 0x00011818;
enum DISPID_EVPROP_ONMSINERTIASTART = 0x00011819;
enum DISPID_EVPROP_ONMSLOSTPOINTERCAPTURE = 0x0001181a;
enum DISPID_EVPROP_ONMSGOTPOINTERCAPTURE = 0x0001181b;
enum DISPID_EVPROP_ONMSCONTENTZOOM = 0x0001181c;
enum DISPID_EVPROP_ONTRANSITIONSTART = 0x0001181d;
enum DISPID_EVPROP_ONTRANSITIONEND = 0x0001181e;
enum DISPID_EVPROP_ONANIMATIONSTART = 0x0001181f;
enum DISPID_EVPROP_ONANIMATIONEND = 0x00011820;
enum DISPID_EVPROP_ONANIMATIONITERATION = 0x00011821;
enum DISPID_EVPROP_ONMSMANIPULATIONSTATECHANGED = 0x00011822;
enum DISPID_EVPROP_ONOPEN = 0x00011823;
enum DISPID_EVPROP_ONCLOSE = 0x00011824;
enum DISPID_EVPROP_CHECKING = 0x00011825;
enum DISPID_EVPROP_NOUPDATE = 0x00011826;
enum DISPID_EVPROP_DOWNLOADING = 0x00011827;
enum DISPID_EVPROP_UPDATEREADY = 0x00011828;
enum DISPID_EVPROP_CACHED = 0x00011829;
enum DISPID_EVPROP_OBSOLETE = 0x0001182a;
enum DISPID_EVPROP_LOADEND = 0x0001182b;
enum DISPID_EVPROP_INVALID = 0x0001182c;
enum DISPID_EVPROP_ONSUCCESS = 0x0001182d;
enum DISPID_EVPROP_ONBLOCKED = 0x0001182e;
enum DISPID_EVPROP_ONCOMPLETE = 0x0001182f;
enum DISPID_EVPROP_ONPOPSTATE = 0x00011830;
enum DISPID_EVPROP_ONCUECHANGE = 0x00011831;
enum DISPID_EVPROP_ONENTER = 0x00011832;
enum DISPID_EVPROP_ONEXIT = 0x00011833;
enum DISPID_EVPROP_VISIBILITYCHANGE = 0x00011834;
enum DISPID_EVPROP_ONMSREGIONUPDATE = 0x00011835;
enum DISPID_EVPROP_ONUPGRADENEEDED = 0x00011836;
enum DISPID_EVPROP_ONMSVIDEOFORMATCHANGED = 0x00011837;
enum DISPID_EVPROP_ADDTRACK = 0x00011838;
enum DISPID_EVPROP_ONMSVIDEOFRAMESTEPCOMPLETED = 0x00011839;
enum DISPID_EVPROP_ONMSHOLDVISUAL = 0x0001183a;
enum DISPID_EVPROP_ONMSVIDEOOPTIMALLAYOUTCHANGED = 0x0001183b;
enum DISPID_EVPROP_ONMSFULLSCREENCHANGE = 0x0001183c;
enum DISPID_EVPROP_ONMSFULLSCREENERROR = 0x0001183d;
enum DISPID_EVPROP_MSELEMENTRESIZE = 0x0001183e;
enum DISPID_EVPROP_ONSOURCEOPEN = 0x0001183f;
enum DISPID_EVPROP_ONSOURCECLOSE = 0x00011840;
enum DISPID_EVPROP_ONSOURCEENDED = 0x00011841;
enum DISPID_EVPROP_ONADDSOURCEBUFFER = 0x00011842;
enum DISPID_EVPROP_ONREMOVESOURCEBUFFER = 0x00011843;
enum DISPID_EVPROP_ONMSNEEDKEY = 0x00011844;
enum DISPID_EVPROP_ONMSKEYMESSAGE = 0x00011845;
enum DISPID_EVPROP_ONMSKEYERROR = 0x00011846;
enum DISPID_EVPROP_ONMSKEYADDED = 0x00011847;
enum DISPID_EVPROP_MSHTMLWEBVIEW_ONDOMCONTENTLOADED = 0x00011848;
enum DISPID_EVPROP_MSHTMLWEBVIEW_ONCONTENTLOADING = 0x00011849;
enum DISPID_EVPROP_MSHTMLWEBVIEW_ONNAVIGATIONSTARTING = 0x0001184a;
enum DISPID_EVPROP_MSHTMLWEBVIEW_ONNAVIGATIONCOMPLETED = 0x0001184b;
enum DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMEDOMCONTENTLOADED = 0x0001184c;
enum DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMECONTENTLOADING = 0x0001184d;
enum DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMENAVIGATIONSTARTING = 0x0001184e;
enum DISPID_EVPROP_MSHTMLWEBVIEW_ONFRAMENAVIGATIONCOMPLETED = 0x0001184f;
enum DISPID_EVPROP_MSHTMLWEBVIEW_ONSCRIPTNOTIFY = 0x00011850;
enum DISPID_EVPROP_MSHTMLWEBVIEW_ONUNVIEWABLECONTENT = 0x00011851;
enum DISPID_EVPROP_MSHTMLWEBVIEW_ONUNSAFECONTENTWARNINGDISPLAYING = 0x00011852;
enum DISPID_EVPROP_MSHTMLWEBVIEW_ONLONGRUNNINGSCRIPTDETECTED = 0x00011853;
enum DISPID_EVPROP_WEBGLCONTEXTLOST = 0x00011854;
enum DISPID_EVPROP_WEBGLCONTEXTRESTORED = 0x00011855;
enum DISPID_EVPROP_ONUPDATESTART = 0x00011856;
enum DISPID_EVPROP_ONUPDATE = 0x00011857;
enum DISPID_EVPROP_ONUPDATEEND = 0x00011858;
enum DISPID_EVPROP_ONMSPOINTERENTER = 0x00011859;
enum DISPID_EVPROP_ONMSPOINTERLEAVE = 0x0001185a;
enum DISPID_EVPROP_ONMSSITEPINNED = 0x0001185b;
enum DISPID_EVPROP_MSORIENTATIONCHANGE = 0x0001185c;
enum DISPID_EVPROP_ONDEVICEORIENTATION = 0x0001185d;
enum DISPID_EVPROP_ONDEVICEMOTION = 0x0001185e;
enum DISPID_EVPROP_ONPAGESHOW = 0x0001185f;
enum DISPID_EVPROP_ONPAGEHIDE = 0x00011860;
enum DISPID_EVPROP_ONMSCANDIDATEWINDOWSHOW = 0x00011861;
enum DISPID_EVPROP_ONMSCANDIDATEWINDOWUPDATE = 0x00011862;
enum DISPID_EVPROP_ONMSCANDIDATEWINDOWHIDE = 0x00011863;
enum DISPID_EVPROP_HTML5ONREADYSTATECHANGE = 0x00011864;
enum DISPID_EVPROP_REMOVETRACK = 0x00011865;
enum DISPID_EVPROP_ONCOMPASSNEEDSCALIBRATION = 0x00011866;
enum DISPID_EVPROP_MSHTMLWEBVIEW_ONCONTAINSFULLSCREENELEMENTCHANGED = 0x00011867;
enum DISPID_EVPROP_ONTOUCHSTART = 0x00011868;
enum DISPID_EVPROP_ONTOUCHEND = 0x00011869;
enum DISPID_EVPROP_ONTOUCHMOVE = 0x0001186a;
enum DISPID_EVPROP_ONTOUCHCANCEL = 0x0001186b;
enum DISPID_EVPROP_ONWEBKITTRANSITIONEND = 0x0001186c;
enum DISPID_EVPROP_ONWEBKITANIMATIONSTART = 0x0001186d;
enum DISPID_EVPROP_ONWEBKITANIMATIONEND = 0x0001186e;
enum DISPID_EVPROP_ONWEBKITANIMATIONITERATION = 0x0001186f;
enum DISPID_EVPROP_WEBGLCONTEXTCREATIONERROR = 0x00011870;
enum DISPID_EVPROP_ONDOMFOCUSIN = 0x00011871;
enum DISPID_EVPROP_ONDOMFOCUSOUT = 0x00011872;
enum DISPID_EVPROP_ORIENTATIONCHANGE = 0x00011873;
enum DISPID_EVPROPS_COUNT = 0x00000104;
enum DISPID_IHTMLFILTERSCOLLECTION_LENGTH = 0x000003e9;
enum DISPID_IHTMLFILTERSCOLLECTION__NEWENUM = 0xfffffffffffffffc;
enum DISPID_IHTMLFILTERSCOLLECTION_ITEM = 0x00000000;
enum DISPID_IHTMLDOMCONSTRUCTOR_CONSTRUCTOR = 0x000101fd;
enum DISPID_IHTMLCSSSTYLEDECLARATION_LENGTH = 0x00011195;
enum DISPID_IHTMLCSSSTYLEDECLARATION_PARENTRULE = 0x00011196;
enum DISPID_IHTMLCSSSTYLEDECLARATION_GETPROPERTYVALUE = 0x00011197;
enum DISPID_IHTMLCSSSTYLEDECLARATION_GETPROPERTYPRIORITY = 0x00011198;
enum DISPID_IHTMLCSSSTYLEDECLARATION_REMOVEPROPERTY = 0x00011199;
enum DISPID_IHTMLCSSSTYLEDECLARATION_SETPROPERTY = 0x0001119a;
enum DISPID_IHTMLCSSSTYLEDECLARATION_ITEM = 0x00000000;
enum DISPID_IHTMLCSSSTYLEDECLARATION_FONTFAMILY = 0x0001139a;
enum DISPID_IHTMLCSSSTYLEDECLARATION_FONTSTYLE = 0x000113a0;
enum DISPID_IHTMLCSSSTYLEDECLARATION_FONTVARIANT = 0x000113a1;
enum DISPID_IHTMLCSSSTYLEDECLARATION_FONTWEIGHT = 0x000113a3;
enum DISPID_IHTMLCSSSTYLEDECLARATION_FONTSIZE = 0x0001139b;
enum DISPID_IHTMLCSSSTYLEDECLARATION_FONT = 0x000113b1;
enum DISPID_IHTMLCSSSTYLEDECLARATION_COLOR = 0x0001138a;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUND = 0x000113a8;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDCOLOR = 0xfffffffffffffe0b;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDIMAGE = 0x00011389;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDREPEAT = 0x000113b4;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDATTACHMENT = 0x000113b5;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDPOSITION = 0x000113b6;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDPOSITIONX = 0x000113a9;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDPOSITIONY = 0x000113aa;
enum DISPID_IHTMLCSSSTYLEDECLARATION_WORDSPACING = 0x000113b7;
enum DISPID_IHTMLCSSSTYLEDECLARATION_LETTERSPACING = 0x00011390;
enum DISPID_IHTMLCSSSTYLEDECLARATION_TEXTDECORATION = 0x000113ab;
enum DISPID_IHTMLCSSSTYLEDECLARATION_VERTICALALIGN = 0x000113b8;
enum DISPID_IHTMLCSSSTYLEDECLARATION_TEXTTRANSFORM = 0x0001138c;
enum DISPID_IHTMLCSSSTYLEDECLARATION_TEXTALIGN = 0x00010048;
enum DISPID_IHTMLCSSSTYLEDECLARATION_TEXTINDENT = 0x0001138f;
enum DISPID_IHTMLCSSSTYLEDECLARATION_LINEHEIGHT = 0x0001138e;
enum DISPID_IHTMLCSSSTYLEDECLARATION_MARGINTOP = 0x000113ad;
enum DISPID_IHTMLCSSSTYLEDECLARATION_MARGINRIGHT = 0x000113ae;
enum DISPID_IHTMLCSSSTYLEDECLARATION_MARGINBOTTOM = 0x000113af;
enum DISPID_IHTMLCSSSTYLEDECLARATION_MARGINLEFT = 0x000113b0;
enum DISPID_IHTMLCSSSTYLEDECLARATION_MARGIN = 0x000113ac;
enum DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGTOP = 0x00011394;
enum DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGRIGHT = 0x00011395;
enum DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGBOTTOM = 0x00011396;
enum DISPID_IHTMLCSSSTYLEDECLARATION_PADDINGLEFT = 0x00011397;
enum DISPID_IHTMLCSSSTYLEDECLARATION_PADDING = 0x00011393;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDER = 0x000113b9;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOP = 0x000113ba;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHT = 0x000113bb;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOM = 0x000113bc;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFT = 0x000113bd;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERCOLOR = 0x000113be;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPCOLOR = 0x000113bf;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHTCOLOR = 0x000113c0;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMCOLOR = 0x000113c1;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFTCOLOR = 0x000113c2;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERWIDTH = 0x000113c3;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPWIDTH = 0x000113c4;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHTWIDTH = 0x000113c5;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMWIDTH = 0x000113c6;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFTWIDTH = 0x000113c7;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERSTYLE = 0x000113c8;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPSTYLE = 0x000113c9;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRIGHTSTYLE = 0x000113ca;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMSTYLE = 0x000113cb;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERLEFTSTYLE = 0x000113cc;
enum DISPID_IHTMLCSSSTYLEDECLARATION_WIDTH = 0x00010005;
enum DISPID_IHTMLCSSSTYLEDECLARATION_HEIGHT = 0x00010006;
enum DISPID_IHTMLCSSSTYLEDECLARATION_STYLEFLOAT = 0x000113ce;
enum DISPID_IHTMLCSSSTYLEDECLARATION_CLEAR = 0x00011398;
enum DISPID_IHTMLCSSSTYLEDECLARATION_DISPLAY = 0x000113cf;
enum DISPID_IHTMLCSSSTYLEDECLARATION_VISIBILITY = 0x000113d8;
enum DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLETYPE = 0x000113d0;
enum DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLEPOSITION = 0x000113d1;
enum DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLEIMAGE = 0x000113d2;
enum DISPID_IHTMLCSSSTYLEDECLARATION_LISTSTYLE = 0x000113d3;
enum DISPID_IHTMLCSSSTYLEDECLARATION_WHITESPACE = 0x000113d4;
enum DISPID_IHTMLCSSSTYLEDECLARATION_TOP = 0x00010004;
enum DISPID_IHTMLCSSSTYLEDECLARATION_LEFT = 0x00010003;
enum DISPID_IHTMLCSSSTYLEDECLARATION_ZINDEX = 0x000113e3;
enum DISPID_IHTMLCSSSTYLEDECLARATION_OVERFLOW = 0x00011392;
enum DISPID_IHTMLCSSSTYLEDECLARATION_PAGEBREAKBEFORE = 0x000113d5;
enum DISPID_IHTMLCSSSTYLEDECLARATION_PAGEBREAKAFTER = 0x000113d6;
enum DISPID_IHTMLCSSSTYLEDECLARATION_CSSTEXT = 0x000113eb;
enum DISPID_IHTMLCSSSTYLEDECLARATION_CURSOR = 0x000113ee;
enum DISPID_IHTMLCSSSTYLEDECLARATION_CLIP = 0x000113e4;
enum DISPID_IHTMLCSSSTYLEDECLARATION_FILTER = 0x000113da;
enum DISPID_IHTMLCSSSTYLEDECLARATION_TABLELAYOUT = 0x000113ea;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERCOLLAPSE = 0x000113dc;
enum DISPID_IHTMLCSSSTYLEDECLARATION_DIRECTION = 0x000113ff;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BEHAVIOR = 0x000113fb;
enum DISPID_IHTMLCSSSTYLEDECLARATION_POSITION = 0x000113e2;
enum DISPID_IHTMLCSSSTYLEDECLARATION_UNICODEBIDI = 0x000113fe;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BOTTOM = 0x0001004e;
enum DISPID_IHTMLCSSSTYLEDECLARATION_RIGHT = 0x0001004d;
enum DISPID_IHTMLCSSSTYLEDECLARATION_IMEMODE = 0x00011400;
enum DISPID_IHTMLCSSSTYLEDECLARATION_RUBYALIGN = 0x00011401;
enum DISPID_IHTMLCSSSTYLEDECLARATION_RUBYPOSITION = 0x00011402;
enum DISPID_IHTMLCSSSTYLEDECLARATION_RUBYOVERHANG = 0x00011403;
enum DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDCHAR = 0x00011407;
enum DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDLINE = 0x00011408;
enum DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDMODE = 0x00011409;
enum DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRIDTYPE = 0x0001140a;
enum DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTGRID = 0x0001140b;
enum DISPID_IHTMLCSSSTYLEDECLARATION_TEXTAUTOSPACE = 0x0001140c;
enum DISPID_IHTMLCSSSTYLEDECLARATION_WORDBREAK = 0x0001140e;
enum DISPID_IHTMLCSSSTYLEDECLARATION_LINEBREAK = 0x0001140d;
enum DISPID_IHTMLCSSSTYLEDECLARATION_TEXTJUSTIFY = 0x0001140f;
enum DISPID_IHTMLCSSSTYLEDECLARATION_TEXTJUSTIFYTRIM = 0x00011410;
enum DISPID_IHTMLCSSSTYLEDECLARATION_TEXTKASHIDA = 0x00011411;
enum DISPID_IHTMLCSSSTYLEDECLARATION_OVERFLOWX = 0x00011413;
enum DISPID_IHTMLCSSSTYLEDECLARATION_OVERFLOWY = 0x00011414;
enum DISPID_IHTMLCSSSTYLEDECLARATION_ACCELERATOR = 0x0001141b;
enum DISPID_IHTMLCSSSTYLEDECLARATION_LAYOUTFLOW = 0x00011423;
enum DISPID_IHTMLCSSSTYLEDECLARATION_ZOOM = 0x00011421;
enum DISPID_IHTMLCSSSTYLEDECLARATION_WORDWRAP = 0x00011426;
enum DISPID_IHTMLCSSSTYLEDECLARATION_TEXTUNDERLINEPOSITION = 0x00011427;
enum DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARBASECOLOR = 0x0001143c;
enum DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARFACECOLOR = 0x0001143d;
enum DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBAR3DLIGHTCOLOR = 0x0001143e;
enum DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARSHADOWCOLOR = 0x0001143f;
enum DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARHIGHLIGHTCOLOR = 0x00011440;
enum DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARDARKSHADOWCOLOR = 0x00011441;
enum DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARARROWCOLOR = 0x00011442;
enum DISPID_IHTMLCSSSTYLEDECLARATION_SCROLLBARTRACKCOLOR = 0x0001144c;
enum DISPID_IHTMLCSSSTYLEDECLARATION_WRITINGMODE = 0x00011448;
enum DISPID_IHTMLCSSSTYLEDECLARATION_TEXTALIGNLAST = 0x00011453;
enum DISPID_IHTMLCSSSTYLEDECLARATION_TEXTKASHIDASPACE = 0x00011454;
enum DISPID_IHTMLCSSSTYLEDECLARATION_TEXTOVERFLOW = 0x00011459;
enum DISPID_IHTMLCSSSTYLEDECLARATION_MINHEIGHT = 0x0001145b;
enum DISPID_IHTMLCSSSTYLEDECLARATION_MSINTERPOLATIONMODE = 0x0001145d;
enum DISPID_IHTMLCSSSTYLEDECLARATION_MAXHEIGHT = 0x0001145e;
enum DISPID_IHTMLCSSSTYLEDECLARATION_MINWIDTH = 0x0001145f;
enum DISPID_IHTMLCSSSTYLEDECLARATION_MAXWIDTH = 0x00011460;
enum DISPID_IHTMLCSSSTYLEDECLARATION_CONTENT = 0x00011462;
enum DISPID_IHTMLCSSSTYLEDECLARATION_CAPTIONSIDE = 0x00011463;
enum DISPID_IHTMLCSSSTYLEDECLARATION_COUNTERINCREMENT = 0x00011464;
enum DISPID_IHTMLCSSSTYLEDECLARATION_COUNTERRESET = 0x00011465;
enum DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINE = 0x00011466;
enum DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINEWIDTH = 0x00011467;
enum DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINESTYLE = 0x00011468;
enum DISPID_IHTMLCSSSTYLEDECLARATION_OUTLINECOLOR = 0x00011469;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BOXSIZING = 0x0001146a;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERSPACING = 0x0001146b;
enum DISPID_IHTMLCSSSTYLEDECLARATION_ORPHANS = 0x0001146c;
enum DISPID_IHTMLCSSSTYLEDECLARATION_WIDOWS = 0x0001146d;
enum DISPID_IHTMLCSSSTYLEDECLARATION_PAGEBREAKINSIDE = 0x0001146e;
enum DISPID_IHTMLCSSSTYLEDECLARATION_EMPTYCELLS = 0x00011482;
enum DISPID_IHTMLCSSSTYLEDECLARATION_MSBLOCKPROGRESSION = 0x00011483;
enum DISPID_IHTMLCSSSTYLEDECLARATION_QUOTES = 0x00011484;
enum DISPID_IHTMLCSSSTYLEDECLARATION_ALIGNMENTBASELINE = 0x0001149e;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BASELINESHIFT = 0x0001149f;
enum DISPID_IHTMLCSSSTYLEDECLARATION_DOMINANTBASELINE = 0x000114a0;
enum DISPID_IHTMLCSSSTYLEDECLARATION_FONTSIZEADJUST = 0x000114a1;
enum DISPID_IHTMLCSSSTYLEDECLARATION_FONTSTRETCH = 0x000114a2;
enum DISPID_IHTMLCSSSTYLEDECLARATION_OPACITY = 0x000114a3;
enum DISPID_IHTMLCSSSTYLEDECLARATION_CLIPPATH = 0x000114a4;
enum DISPID_IHTMLCSSSTYLEDECLARATION_CLIPRULE = 0x000114a5;
enum DISPID_IHTMLCSSSTYLEDECLARATION_FILL = 0x000114a6;
enum DISPID_IHTMLCSSSTYLEDECLARATION_FILLOPACITY = 0x000114a7;
enum DISPID_IHTMLCSSSTYLEDECLARATION_FILLRULE = 0x000114a8;
enum DISPID_IHTMLCSSSTYLEDECLARATION_KERNING = 0x000114a9;
enum DISPID_IHTMLCSSSTYLEDECLARATION_MARKER = 0x000114aa;
enum DISPID_IHTMLCSSSTYLEDECLARATION_MARKEREND = 0x000114ab;
enum DISPID_IHTMLCSSSTYLEDECLARATION_MARKERMID = 0x000114ac;
enum DISPID_IHTMLCSSSTYLEDECLARATION_MARKERSTART = 0x000114ad;
enum DISPID_IHTMLCSSSTYLEDECLARATION_MASK = 0x000114ae;
enum DISPID_IHTMLCSSSTYLEDECLARATION_POINTEREVENTS = 0x000114af;
enum DISPID_IHTMLCSSSTYLEDECLARATION_STOPCOLOR = 0x000114b0;
enum DISPID_IHTMLCSSSTYLEDECLARATION_STOPOPACITY = 0x000114b1;
enum DISPID_IHTMLCSSSTYLEDECLARATION_STROKE = 0x000114b2;
enum DISPID_IHTMLCSSSTYLEDECLARATION_STROKEDASHARRAY = 0x000114b3;
enum DISPID_IHTMLCSSSTYLEDECLARATION_STROKEDASHOFFSET = 0x000114b4;
enum DISPID_IHTMLCSSSTYLEDECLARATION_STROKELINECAP = 0x000114b5;
enum DISPID_IHTMLCSSSTYLEDECLARATION_STROKELINEJOIN = 0x000114b6;
enum DISPID_IHTMLCSSSTYLEDECLARATION_STROKEMITERLIMIT = 0x000114b7;
enum DISPID_IHTMLCSSSTYLEDECLARATION_STROKEOPACITY = 0x000114b8;
enum DISPID_IHTMLCSSSTYLEDECLARATION_STROKEWIDTH = 0x000114b9;
enum DISPID_IHTMLCSSSTYLEDECLARATION_TEXTANCHOR = 0x000114ba;
enum DISPID_IHTMLCSSSTYLEDECLARATION_GLYPHORIENTATIONHORIZONTAL = 0x000114bb;
enum DISPID_IHTMLCSSSTYLEDECLARATION_GLYPHORIENTATIONVERTICAL = 0x000114bc;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERRADIUS = 0x000114be;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPLEFTRADIUS = 0x000114bf;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERTOPRIGHTRADIUS = 0x000114c0;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMRIGHTRADIUS = 0x000114c1;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BORDERBOTTOMLEFTRADIUS = 0x000114c2;
enum DISPID_IHTMLCSSSTYLEDECLARATION_CLIPTOP = 0x000113e5;
enum DISPID_IHTMLCSSSTYLEDECLARATION_CLIPRIGHT = 0x000113e6;
enum DISPID_IHTMLCSSSTYLEDECLARATION_CLIPBOTTOM = 0x000113e7;
enum DISPID_IHTMLCSSSTYLEDECLARATION_CLIPLEFT = 0x000113e8;
enum DISPID_IHTMLCSSSTYLEDECLARATION_CSSFLOAT = 0x000114bd;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDCLIP = 0x000114c4;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDORIGIN = 0x000114c5;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BACKGROUNDSIZE = 0x000114c6;
enum DISPID_IHTMLCSSSTYLEDECLARATION_BOXSHADOW = 0x000114c7;
enum DISPID_IHTMLCSSSTYLEDECLARATION_MSTRANSFORM = 0x000114c3;
enum DISPID_IHTMLCSSSTYLEDECLARATION_MSTRANSFORMORIGIN = 0x000114cd;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLCHAINING = 0x000114eb;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMING = 0x000114ec;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMSNAPTYPE = 0x000114ed;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLRAILS = 0x000114ee;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMCHAINING = 0x000114ef;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPTYPE = 0x000114f0;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMLIMIT = 0x000114f1;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMSNAP = 0x000114f2;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMSNAPPOINTS = 0x000114f3;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMLIMITMIN = 0x000114f5;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSCONTENTZOOMLIMITMAX = 0x000114f6;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPX = 0x000114f7;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPY = 0x000114f8;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPPOINTSX = 0x000114f9;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLSNAPPOINTSY = 0x000114fa;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMN = 0x000114fc;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMNALIGN = 0x000114fd;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMNS = 0x000114fe;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDCOLUMNSPAN = 0x000114ff;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROW = 0x00011501;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROWALIGN = 0x00011502;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROWS = 0x00011503;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSGRIDROWSPAN = 0x00011504;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSWRAPTHROUGH = 0x00011519;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSWRAPMARGIN = 0x00011523;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSWRAPFLOW = 0x00011525;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONNAME = 0x00011505;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONDURATION = 0x00011506;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONTIMINGFUNCTION = 0x00011507;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONDELAY = 0x00011508;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONDIRECTION = 0x00011509;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONPLAYSTATE = 0x0001150a;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONITERATIONCOUNT = 0x0001150b;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATION = 0x0001150c;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSANIMATIONFILLMODE = 0x0001150d;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_COLORINTERPOLATIONFILTERS = 0x00011510;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNCOUNT = 0x000114d8;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNWIDTH = 0x000114d9;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNGAP = 0x000114da;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNFILL = 0x000114db;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNSPAN = 0x000114dc;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNS = 0x000114d7;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULE = 0x000114dd;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULECOLOR = 0x000114e0;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULESTYLE = 0x000114de;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_COLUMNRULEWIDTH = 0x000114df;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_BREAKBEFORE = 0x000114e1;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_BREAKAFTER = 0x000114e2;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_BREAKINSIDE = 0x000114e3;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_FLOODCOLOR = 0x0001150e;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_FLOODOPACITY = 0x0001150f;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_LIGHTINGCOLOR = 0x00011511;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITXMIN = 0x00011512;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITYMIN = 0x00011513;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITXMAX = 0x00011514;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMITYMAX = 0x00011515;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLLIMIT = 0x00011516;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_TEXTSHADOW = 0x00011518;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLOWFROM = 0x0001151a;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLOWINTO = 0x0001151b;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENS = 0x0001151c;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENATELIMITZONE = 0x0001151d;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENATELIMITCHARS = 0x0001151e;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSHYPHENATELIMITLINES = 0x0001151f;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSHIGHCONTRASTADJUST = 0x00011521;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_ENABLEBACKGROUND = 0x00011522;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSFONTFEATURESETTINGS = 0x00011526;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSUSERSELECT = 0x00011527;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSOVERFLOWSTYLE = 0x00011517;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSFORMSTYLE = 0x000114e9;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSBACKFACEVISIBILITY = 0x000114ea;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSPERSPECTIVE = 0x000114e5;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSPERSPECTIVEORIGIN = 0x000114e6;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONPROPERTY = 0x000114d2;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONDURATION = 0x000114d3;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONTIMINGFUNCTION = 0x000114d4;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITIONDELAY = 0x000114d5;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSTRANSITION = 0x000114d6;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSTOUCHACTION = 0x00011528;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSSCROLLTRANSLATION = 0x0001152a;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEX = 0x0001152b;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXPOSITIVE = 0x0001152c;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXNEGATIVE = 0x0001152d;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXPREFERREDSIZE = 0x0001152e;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXFLOW = 0x0001152f;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXDIRECTION = 0x00011530;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXWRAP = 0x00011531;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXALIGN = 0x00011532;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXITEMALIGN = 0x00011533;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXPACK = 0x00011534;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXLINEPACK = 0x00011535;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSFLEXORDER = 0x00011536;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_MSTOUCHSELECT = 0x00011552;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSFORM = 0x00011537;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSFORMORIGIN = 0x00011538;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSFORMSTYLE = 0x00011540;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_BACKFACEVISIBILITY = 0x00011541;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_PERSPECTIVE = 0x0001153e;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_PERSPECTIVEORIGIN = 0x0001153f;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONPROPERTY = 0x00011539;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONDURATION = 0x0001153a;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONTIMINGFUNCTION = 0x0001153b;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITIONDELAY = 0x0001153c;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_TRANSITION = 0x0001153d;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_FONTFEATURESETTINGS = 0x0001154b;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONNAME = 0x00011542;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONDURATION = 0x00011543;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONTIMINGFUNCTION = 0x00011544;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONDELAY = 0x00011545;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONDIRECTION = 0x00011546;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONPLAYSTATE = 0x00011547;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONITERATIONCOUNT = 0x00011548;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATION = 0x00011549;
enum DISPID_IHTMLCSSSTYLEDECLARATION2_ANIMATIONFILLMODE = 0x0001154a;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_FLEX = 0x0001155a;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXDIRECTION = 0x00011556;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXWRAP = 0x00011557;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXFLOW = 0x00011558;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXGROW = 0x0001155b;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXSHRINK = 0x0001155c;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_FLEXBASIS = 0x0001155d;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_JUSTIFYCONTENT = 0x0001155e;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_ALIGNITEMS = 0x0001155f;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_ALIGNSELF = 0x00011560;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_ALIGNCONTENT = 0x00011561;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGE = 0x00011562;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGESOURCE = 0x00011563;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGESLICE = 0x00011564;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGEWIDTH = 0x00011565;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGEOUTSET = 0x00011566;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_BORDERIMAGEREPEAT = 0x00011567;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_MSIMEALIGN = 0x00011569;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_MSTEXTCOMBINEHORIZONTAL = 0x0001156a;
enum DISPID_IHTMLCSSSTYLEDECLARATION3_TOUCHACTION = 0x0001156b;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITAPPEARANCE = 0x0001156c;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITUSERSELECT = 0x00011578;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXALIGN = 0x0001156d;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXORDINALGROUP = 0x0001156e;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXPACK = 0x0001156f;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXFLEX = 0x00011570;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXORIENT = 0x00011571;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXDIRECTION = 0x00011572;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSFORM = 0x00011574;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDSIZE = 0x00011575;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKFACEVISIBILITY = 0x00011576;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATION = 0x00011579;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITION = 0x0001157a;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONNAME = 0x0001157b;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONDURATION = 0x0001157c;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONTIMINGFUNCTION = 0x0001157d;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONDELAY = 0x0001157e;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONITERATIONCOUNT = 0x0001157f;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONDIRECTION = 0x00011580;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONPLAYSTATE = 0x00011581;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONPROPERTY = 0x00011582;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONDURATION = 0x00011583;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONTIMINGFUNCTION = 0x00011584;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSITIONDELAY = 0x00011585;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDATTACHMENT = 0x00011586;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDCOLOR = 0x00011587;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDCLIP = 0x00011588;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDIMAGE = 0x00011589;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDREPEAT = 0x0001158a;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDORIGIN = 0x0001158b;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDPOSITION = 0x0001158c;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDPOSITIONX = 0x0001158d;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUNDPOSITIONY = 0x0001158e;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBACKGROUND = 0x0001158f;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTRANSFORMORIGIN = 0x00011590;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_MSTEXTSIZEADJUST = 0x000114d0;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITTEXTSIZEADJUST = 0x00011594;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGE = 0x00011595;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGESOURCE = 0x00011596;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGESLICE = 0x00011597;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGEWIDTH = 0x00011598;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGEOUTSET = 0x00011599;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBORDERIMAGEREPEAT = 0x0001159a;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITBOXSIZING = 0x00011577;
enum DISPID_IHTMLCSSSTYLEDECLARATION4_WEBKITANIMATIONFILLMODE = 0x00011573;
enum DISPID_IHTMLSTYLEENABLED_MSGETPROPERTYENABLED = 0x0001119b;
enum DISPID_IHTMLSTYLEENABLED_MSPUTPROPERTYENABLED = 0x0001119c;
enum DISPID_IHTMLSTYLE_FONTFAMILY = 0x0001139a;
enum DISPID_IHTMLSTYLE_FONTSTYLE = 0x000113a0;
enum DISPID_IHTMLSTYLE_FONTVARIANT = 0x000113a1;
enum DISPID_IHTMLSTYLE_FONTWEIGHT = 0x000113a3;
enum DISPID_IHTMLSTYLE_FONTSIZE = 0x0001139b;
enum DISPID_IHTMLSTYLE_FONT = 0x000113b1;
enum DISPID_IHTMLSTYLE_COLOR = 0x0001138a;
enum DISPID_IHTMLSTYLE_BACKGROUND = 0x000113a8;
enum DISPID_IHTMLSTYLE_BACKGROUNDCOLOR = 0xfffffffffffffe0b;
enum DISPID_IHTMLSTYLE_BACKGROUNDIMAGE = 0x00011389;
enum DISPID_IHTMLSTYLE_BACKGROUNDREPEAT = 0x000113b4;
enum DISPID_IHTMLSTYLE_BACKGROUNDATTACHMENT = 0x000113b5;
enum DISPID_IHTMLSTYLE_BACKGROUNDPOSITION = 0x000113b6;
enum DISPID_IHTMLSTYLE_BACKGROUNDPOSITIONX = 0x000113a9;
enum DISPID_IHTMLSTYLE_BACKGROUNDPOSITIONY = 0x000113aa;
enum DISPID_IHTMLSTYLE_WORDSPACING = 0x000113b7;
enum DISPID_IHTMLSTYLE_LETTERSPACING = 0x00011390;
enum DISPID_IHTMLSTYLE_TEXTDECORATION = 0x000113ab;
enum DISPID_IHTMLSTYLE_TEXTDECORATIONNONE = 0x0001139f;
enum DISPID_IHTMLSTYLE_TEXTDECORATIONUNDERLINE = 0x0001139d;
enum DISPID_IHTMLSTYLE_TEXTDECORATIONOVERLINE = 0x000113cd;
enum DISPID_IHTMLSTYLE_TEXTDECORATIONLINETHROUGH = 0x0001139c;
enum DISPID_IHTMLSTYLE_TEXTDECORATIONBLINK = 0x0001139e;
enum DISPID_IHTMLSTYLE_VERTICALALIGN = 0x000113b8;
enum DISPID_IHTMLSTYLE_TEXTTRANSFORM = 0x0001138c;
enum DISPID_IHTMLSTYLE_TEXTALIGN = 0x00010048;
enum DISPID_IHTMLSTYLE_TEXTINDENT = 0x0001138f;
enum DISPID_IHTMLSTYLE_LINEHEIGHT = 0x0001138e;
enum DISPID_IHTMLSTYLE_MARGINTOP = 0x000113ad;
enum DISPID_IHTMLSTYLE_MARGINRIGHT = 0x000113ae;
enum DISPID_IHTMLSTYLE_MARGINBOTTOM = 0x000113af;
enum DISPID_IHTMLSTYLE_MARGINLEFT = 0x000113b0;
enum DISPID_IHTMLSTYLE_MARGIN = 0x000113ac;
enum DISPID_IHTMLSTYLE_PADDINGTOP = 0x00011394;
enum DISPID_IHTMLSTYLE_PADDINGRIGHT = 0x00011395;
enum DISPID_IHTMLSTYLE_PADDINGBOTTOM = 0x00011396;
enum DISPID_IHTMLSTYLE_PADDINGLEFT = 0x00011397;
enum DISPID_IHTMLSTYLE_PADDING = 0x00011393;
enum DISPID_IHTMLSTYLE_BORDER = 0x000113b9;
enum DISPID_IHTMLSTYLE_BORDERTOP = 0x000113ba;
enum DISPID_IHTMLSTYLE_BORDERRIGHT = 0x000113bb;
enum DISPID_IHTMLSTYLE_BORDERBOTTOM = 0x000113bc;
enum DISPID_IHTMLSTYLE_BORDERLEFT = 0x000113bd;
enum DISPID_IHTMLSTYLE_BORDERCOLOR = 0x000113be;
enum DISPID_IHTMLSTYLE_BORDERTOPCOLOR = 0x000113bf;
enum DISPID_IHTMLSTYLE_BORDERRIGHTCOLOR = 0x000113c0;
enum DISPID_IHTMLSTYLE_BORDERBOTTOMCOLOR = 0x000113c1;
enum DISPID_IHTMLSTYLE_BORDERLEFTCOLOR = 0x000113c2;
enum DISPID_IHTMLSTYLE_BORDERWIDTH = 0x000113c3;
enum DISPID_IHTMLSTYLE_BORDERTOPWIDTH = 0x000113c4;
enum DISPID_IHTMLSTYLE_BORDERRIGHTWIDTH = 0x000113c5;
enum DISPID_IHTMLSTYLE_BORDERBOTTOMWIDTH = 0x000113c6;
enum DISPID_IHTMLSTYLE_BORDERLEFTWIDTH = 0x000113c7;
enum DISPID_IHTMLSTYLE_BORDERSTYLE = 0x000113c8;
enum DISPID_IHTMLSTYLE_BORDERTOPSTYLE = 0x000113c9;
enum DISPID_IHTMLSTYLE_BORDERRIGHTSTYLE = 0x000113ca;
enum DISPID_IHTMLSTYLE_BORDERBOTTOMSTYLE = 0x000113cb;
enum DISPID_IHTMLSTYLE_BORDERLEFTSTYLE = 0x000113cc;
enum DISPID_IHTMLSTYLE_WIDTH = 0x00010005;
enum DISPID_IHTMLSTYLE_HEIGHT = 0x00010006;
enum DISPID_IHTMLSTYLE_STYLEFLOAT = 0x000113ce;
enum DISPID_IHTMLSTYLE_CLEAR = 0x00011398;
enum DISPID_IHTMLSTYLE_DISPLAY = 0x000113cf;
enum DISPID_IHTMLSTYLE_VISIBILITY = 0x000113d8;
enum DISPID_IHTMLSTYLE_LISTSTYLETYPE = 0x000113d0;
enum DISPID_IHTMLSTYLE_LISTSTYLEPOSITION = 0x000113d1;
enum DISPID_IHTMLSTYLE_LISTSTYLEIMAGE = 0x000113d2;
enum DISPID_IHTMLSTYLE_LISTSTYLE = 0x000113d3;
enum DISPID_IHTMLSTYLE_WHITESPACE = 0x000113d4;
enum DISPID_IHTMLSTYLE_TOP = 0x00010004;
enum DISPID_IHTMLSTYLE_LEFT = 0x00010003;
enum DISPID_IHTMLSTYLE_POSITION = 0x000113e2;
enum DISPID_IHTMLSTYLE_ZINDEX = 0x000113e3;
enum DISPID_IHTMLSTYLE_OVERFLOW = 0x00011392;
enum DISPID_IHTMLSTYLE_PAGEBREAKBEFORE = 0x000113d5;
enum DISPID_IHTMLSTYLE_PAGEBREAKAFTER = 0x000113d6;
enum DISPID_IHTMLSTYLE_CSSTEXT = 0x000113eb;
enum DISPID_IHTMLSTYLE_PIXELTOP = 0x00010fa0;
enum DISPID_IHTMLSTYLE_PIXELLEFT = 0x00010fa1;
enum DISPID_IHTMLSTYLE_PIXELWIDTH = 0x00010fa2;
enum DISPID_IHTMLSTYLE_PIXELHEIGHT = 0x00010fa3;
enum DISPID_IHTMLSTYLE_POSTOP = 0x00010fa4;
enum DISPID_IHTMLSTYLE_POSLEFT = 0x00010fa5;
enum DISPID_IHTMLSTYLE_POSWIDTH = 0x00010fa6;
enum DISPID_IHTMLSTYLE_POSHEIGHT = 0x00010fa7;
enum DISPID_IHTMLSTYLE_CURSOR = 0x000113ee;
enum DISPID_IHTMLSTYLE_CLIP = 0x000113e4;
enum DISPID_IHTMLSTYLE_FILTER = 0x000113da;
enum DISPID_IHTMLSTYLE_SETATTRIBUTE = 0x000101f5;
enum DISPID_IHTMLSTYLE_GETATTRIBUTE = 0x000101f6;
enum DISPID_IHTMLSTYLE_REMOVEATTRIBUTE = 0x000101f7;
enum DISPID_IHTMLSTYLE_TOSTRING = 0x00010fa8;
enum DISPID_IHTMLSTYLE2_TABLELAYOUT = 0x000113ea;
enum DISPID_IHTMLSTYLE2_BORDERCOLLAPSE = 0x000113dc;
enum DISPID_IHTMLSTYLE2_DIRECTION = 0x000113ff;
enum DISPID_IHTMLSTYLE2_BEHAVIOR = 0x000113fb;
enum DISPID_IHTMLSTYLE2_SETEXPRESSION = 0x000101f8;
enum DISPID_IHTMLSTYLE2_GETEXPRESSION = 0x000101f9;
enum DISPID_IHTMLSTYLE2_REMOVEEXPRESSION = 0x000101fa;
enum DISPID_IHTMLSTYLE2_POSITION = 0x000113e2;
enum DISPID_IHTMLSTYLE2_UNICODEBIDI = 0x000113fe;
enum DISPID_IHTMLSTYLE2_BOTTOM = 0x0001004e;
enum DISPID_IHTMLSTYLE2_RIGHT = 0x0001004d;
enum DISPID_IHTMLSTYLE2_PIXELBOTTOM = 0x00010fa9;
enum DISPID_IHTMLSTYLE2_PIXELRIGHT = 0x00010faa;
enum DISPID_IHTMLSTYLE2_POSBOTTOM = 0x00010fab;
enum DISPID_IHTMLSTYLE2_POSRIGHT = 0x00010fac;
enum DISPID_IHTMLSTYLE2_IMEMODE = 0x00011400;
enum DISPID_IHTMLSTYLE2_RUBYALIGN = 0x00011401;
enum DISPID_IHTMLSTYLE2_RUBYPOSITION = 0x00011402;
enum DISPID_IHTMLSTYLE2_RUBYOVERHANG = 0x00011403;
enum DISPID_IHTMLSTYLE2_LAYOUTGRIDCHAR = 0x00011407;
enum DISPID_IHTMLSTYLE2_LAYOUTGRIDLINE = 0x00011408;
enum DISPID_IHTMLSTYLE2_LAYOUTGRIDMODE = 0x00011409;
enum DISPID_IHTMLSTYLE2_LAYOUTGRIDTYPE = 0x0001140a;
enum DISPID_IHTMLSTYLE2_LAYOUTGRID = 0x0001140b;
enum DISPID_IHTMLSTYLE2_WORDBREAK = 0x0001140e;
enum DISPID_IHTMLSTYLE2_LINEBREAK = 0x0001140d;
enum DISPID_IHTMLSTYLE2_TEXTJUSTIFY = 0x0001140f;
enum DISPID_IHTMLSTYLE2_TEXTJUSTIFYTRIM = 0x00011410;
enum DISPID_IHTMLSTYLE2_TEXTKASHIDA = 0x00011411;
enum DISPID_IHTMLSTYLE2_TEXTAUTOSPACE = 0x0001140c;
enum DISPID_IHTMLSTYLE2_OVERFLOWX = 0x00011413;
enum DISPID_IHTMLSTYLE2_OVERFLOWY = 0x00011414;
enum DISPID_IHTMLSTYLE2_ACCELERATOR = 0x0001141b;
enum DISPID_IHTMLSTYLE3_LAYOUTFLOW = 0x00011423;
enum DISPID_IHTMLSTYLE3_ZOOM = 0x00011421;
enum DISPID_IHTMLSTYLE3_WORDWRAP = 0x00011426;
enum DISPID_IHTMLSTYLE3_TEXTUNDERLINEPOSITION = 0x00011427;
enum DISPID_IHTMLSTYLE3_SCROLLBARBASECOLOR = 0x0001143c;
enum DISPID_IHTMLSTYLE3_SCROLLBARFACECOLOR = 0x0001143d;
enum DISPID_IHTMLSTYLE3_SCROLLBAR3DLIGHTCOLOR = 0x0001143e;
enum DISPID_IHTMLSTYLE3_SCROLLBARSHADOWCOLOR = 0x0001143f;
enum DISPID_IHTMLSTYLE3_SCROLLBARHIGHLIGHTCOLOR = 0x00011440;
enum DISPID_IHTMLSTYLE3_SCROLLBARDARKSHADOWCOLOR = 0x00011441;
enum DISPID_IHTMLSTYLE3_SCROLLBARARROWCOLOR = 0x00011442;
enum DISPID_IHTMLSTYLE3_SCROLLBARTRACKCOLOR = 0x0001144c;
enum DISPID_IHTMLSTYLE3_WRITINGMODE = 0x00011448;
enum DISPID_IHTMLSTYLE3_TEXTALIGNLAST = 0x00011453;
enum DISPID_IHTMLSTYLE3_TEXTKASHIDASPACE = 0x00011454;
enum DISPID_IHTMLSTYLE4_TEXTOVERFLOW = 0x00011459;
enum DISPID_IHTMLSTYLE4_MINHEIGHT = 0x0001145b;
enum DISPID_IHTMLSTYLE5_MSINTERPOLATIONMODE = 0x0001145d;
enum DISPID_IHTMLSTYLE5_MAXHEIGHT = 0x0001145e;
enum DISPID_IHTMLSTYLE5_MINWIDTH = 0x0001145f;
enum DISPID_IHTMLSTYLE5_MAXWIDTH = 0x00011460;
enum DISPID_IHTMLSTYLE6_CONTENT = 0x00011462;
enum DISPID_IHTMLSTYLE6_CAPTIONSIDE = 0x00011463;
enum DISPID_IHTMLSTYLE6_COUNTERINCREMENT = 0x00011464;
enum DISPID_IHTMLSTYLE6_COUNTERRESET = 0x00011465;
enum DISPID_IHTMLSTYLE6_OUTLINE = 0x00011466;
enum DISPID_IHTMLSTYLE6_OUTLINEWIDTH = 0x00011467;
enum DISPID_IHTMLSTYLE6_OUTLINESTYLE = 0x00011468;
enum DISPID_IHTMLSTYLE6_OUTLINECOLOR = 0x00011469;
enum DISPID_IHTMLSTYLE6_BOXSIZING = 0x0001146a;
enum DISPID_IHTMLSTYLE6_BORDERSPACING = 0x0001146b;
enum DISPID_IHTMLSTYLE6_ORPHANS = 0x0001146c;
enum DISPID_IHTMLSTYLE6_WIDOWS = 0x0001146d;
enum DISPID_IHTMLSTYLE6_PAGEBREAKINSIDE = 0x0001146e;
enum DISPID_IHTMLSTYLE6_EMPTYCELLS = 0x00011482;
enum DISPID_IHTMLSTYLE6_MSBLOCKPROGRESSION = 0x00011483;
enum DISPID_IHTMLSTYLE6_QUOTES = 0x00011484;
enum DISPID_IHTMLRULESTYLE_FONTFAMILY = 0x0001139a;
enum DISPID_IHTMLRULESTYLE_FONTSTYLE = 0x000113a0;
enum DISPID_IHTMLRULESTYLE_FONTVARIANT = 0x000113a1;
enum DISPID_IHTMLRULESTYLE_FONTWEIGHT = 0x000113a3;
enum DISPID_IHTMLRULESTYLE_FONTSIZE = 0x0001139b;
enum DISPID_IHTMLRULESTYLE_FONT = 0x000113b1;
enum DISPID_IHTMLRULESTYLE_COLOR = 0x0001138a;
enum DISPID_IHTMLRULESTYLE_BACKGROUND = 0x000113a8;
enum DISPID_IHTMLRULESTYLE_BACKGROUNDCOLOR = 0xfffffffffffffe0b;
enum DISPID_IHTMLRULESTYLE_BACKGROUNDIMAGE = 0x00011389;
enum DISPID_IHTMLRULESTYLE_BACKGROUNDREPEAT = 0x000113b4;
enum DISPID_IHTMLRULESTYLE_BACKGROUNDATTACHMENT = 0x000113b5;
enum DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITION = 0x000113b6;
enum DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITIONX = 0x000113a9;
enum DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITIONY = 0x000113aa;
enum DISPID_IHTMLRULESTYLE_WORDSPACING = 0x000113b7;
enum DISPID_IHTMLRULESTYLE_LETTERSPACING = 0x00011390;
enum DISPID_IHTMLRULESTYLE_TEXTDECORATION = 0x000113ab;
enum DISPID_IHTMLRULESTYLE_TEXTDECORATIONNONE = 0x0001139f;
enum DISPID_IHTMLRULESTYLE_TEXTDECORATIONUNDERLINE = 0x0001139d;
enum DISPID_IHTMLRULESTYLE_TEXTDECORATIONOVERLINE = 0x000113cd;
enum DISPID_IHTMLRULESTYLE_TEXTDECORATIONLINETHROUGH = 0x0001139c;
enum DISPID_IHTMLRULESTYLE_TEXTDECORATIONBLINK = 0x0001139e;
enum DISPID_IHTMLRULESTYLE_VERTICALALIGN = 0x000113b8;
enum DISPID_IHTMLRULESTYLE_TEXTTRANSFORM = 0x0001138c;
enum DISPID_IHTMLRULESTYLE_TEXTALIGN = 0x00010048;
enum DISPID_IHTMLRULESTYLE_TEXTINDENT = 0x0001138f;
enum DISPID_IHTMLRULESTYLE_LINEHEIGHT = 0x0001138e;
enum DISPID_IHTMLRULESTYLE_MARGINTOP = 0x000113ad;
enum DISPID_IHTMLRULESTYLE_MARGINRIGHT = 0x000113ae;
enum DISPID_IHTMLRULESTYLE_MARGINBOTTOM = 0x000113af;
enum DISPID_IHTMLRULESTYLE_MARGINLEFT = 0x000113b0;
enum DISPID_IHTMLRULESTYLE_MARGIN = 0x000113ac;
enum DISPID_IHTMLRULESTYLE_PADDINGTOP = 0x00011394;
enum DISPID_IHTMLRULESTYLE_PADDINGRIGHT = 0x00011395;
enum DISPID_IHTMLRULESTYLE_PADDINGBOTTOM = 0x00011396;
enum DISPID_IHTMLRULESTYLE_PADDINGLEFT = 0x00011397;
enum DISPID_IHTMLRULESTYLE_PADDING = 0x00011393;
enum DISPID_IHTMLRULESTYLE_BORDER = 0x000113b9;
enum DISPID_IHTMLRULESTYLE_BORDERTOP = 0x000113ba;
enum DISPID_IHTMLRULESTYLE_BORDERRIGHT = 0x000113bb;
enum DISPID_IHTMLRULESTYLE_BORDERBOTTOM = 0x000113bc;
enum DISPID_IHTMLRULESTYLE_BORDERLEFT = 0x000113bd;
enum DISPID_IHTMLRULESTYLE_BORDERCOLOR = 0x000113be;
enum DISPID_IHTMLRULESTYLE_BORDERTOPCOLOR = 0x000113bf;
enum DISPID_IHTMLRULESTYLE_BORDERRIGHTCOLOR = 0x000113c0;
enum DISPID_IHTMLRULESTYLE_BORDERBOTTOMCOLOR = 0x000113c1;
enum DISPID_IHTMLRULESTYLE_BORDERLEFTCOLOR = 0x000113c2;
enum DISPID_IHTMLRULESTYLE_BORDERWIDTH = 0x000113c3;
enum DISPID_IHTMLRULESTYLE_BORDERTOPWIDTH = 0x000113c4;
enum DISPID_IHTMLRULESTYLE_BORDERRIGHTWIDTH = 0x000113c5;
enum DISPID_IHTMLRULESTYLE_BORDERBOTTOMWIDTH = 0x000113c6;
enum DISPID_IHTMLRULESTYLE_BORDERLEFTWIDTH = 0x000113c7;
enum DISPID_IHTMLRULESTYLE_BORDERSTYLE = 0x000113c8;
enum DISPID_IHTMLRULESTYLE_BORDERTOPSTYLE = 0x000113c9;
enum DISPID_IHTMLRULESTYLE_BORDERRIGHTSTYLE = 0x000113ca;
enum DISPID_IHTMLRULESTYLE_BORDERBOTTOMSTYLE = 0x000113cb;
enum DISPID_IHTMLRULESTYLE_BORDERLEFTSTYLE = 0x000113cc;
enum DISPID_IHTMLRULESTYLE_WIDTH = 0x00010005;
enum DISPID_IHTMLRULESTYLE_HEIGHT = 0x00010006;
enum DISPID_IHTMLRULESTYLE_STYLEFLOAT = 0x000113ce;
enum DISPID_IHTMLRULESTYLE_CLEAR = 0x00011398;
enum DISPID_IHTMLRULESTYLE_DISPLAY = 0x000113cf;
enum DISPID_IHTMLRULESTYLE_VISIBILITY = 0x000113d8;
enum DISPID_IHTMLRULESTYLE_LISTSTYLETYPE = 0x000113d0;
enum DISPID_IHTMLRULESTYLE_LISTSTYLEPOSITION = 0x000113d1;
enum DISPID_IHTMLRULESTYLE_LISTSTYLEIMAGE = 0x000113d2;
enum DISPID_IHTMLRULESTYLE_LISTSTYLE = 0x000113d3;
enum DISPID_IHTMLRULESTYLE_WHITESPACE = 0x000113d4;
enum DISPID_IHTMLRULESTYLE_TOP = 0x00010004;
enum DISPID_IHTMLRULESTYLE_LEFT = 0x00010003;
enum DISPID_IHTMLRULESTYLE_POSITION = 0x000113e2;
enum DISPID_IHTMLRULESTYLE_ZINDEX = 0x000113e3;
enum DISPID_IHTMLRULESTYLE_OVERFLOW = 0x00011392;
enum DISPID_IHTMLRULESTYLE_PAGEBREAKBEFORE = 0x000113d5;
enum DISPID_IHTMLRULESTYLE_PAGEBREAKAFTER = 0x000113d6;
enum DISPID_IHTMLRULESTYLE_CSSTEXT = 0x000113eb;
enum DISPID_IHTMLRULESTYLE_CURSOR = 0x000113ee;
enum DISPID_IHTMLRULESTYLE_CLIP = 0x000113e4;
enum DISPID_IHTMLRULESTYLE_FILTER = 0x000113da;
enum DISPID_IHTMLRULESTYLE_SETATTRIBUTE = 0x000101f5;
enum DISPID_IHTMLRULESTYLE_GETATTRIBUTE = 0x000101f6;
enum DISPID_IHTMLRULESTYLE_REMOVEATTRIBUTE = 0x000101f7;
enum DISPID_IHTMLRULESTYLE2_TABLELAYOUT = 0x000113ea;
enum DISPID_IHTMLRULESTYLE2_BORDERCOLLAPSE = 0x000113dc;
enum DISPID_IHTMLRULESTYLE2_DIRECTION = 0x000113ff;
enum DISPID_IHTMLRULESTYLE2_BEHAVIOR = 0x000113fb;
enum DISPID_IHTMLRULESTYLE2_POSITION = 0x000113e2;
enum DISPID_IHTMLRULESTYLE2_UNICODEBIDI = 0x000113fe;
enum DISPID_IHTMLRULESTYLE2_BOTTOM = 0x0001004e;
enum DISPID_IHTMLRULESTYLE2_RIGHT = 0x0001004d;
enum DISPID_IHTMLRULESTYLE2_PIXELBOTTOM = 0x00010fa9;
enum DISPID_IHTMLRULESTYLE2_PIXELRIGHT = 0x00010faa;
enum DISPID_IHTMLRULESTYLE2_POSBOTTOM = 0x00010fab;
enum DISPID_IHTMLRULESTYLE2_POSRIGHT = 0x00010fac;
enum DISPID_IHTMLRULESTYLE2_IMEMODE = 0x00011400;
enum DISPID_IHTMLRULESTYLE2_RUBYALIGN = 0x00011401;
enum DISPID_IHTMLRULESTYLE2_RUBYPOSITION = 0x00011402;
enum DISPID_IHTMLRULESTYLE2_RUBYOVERHANG = 0x00011403;
enum DISPID_IHTMLRULESTYLE2_LAYOUTGRIDCHAR = 0x00011407;
enum DISPID_IHTMLRULESTYLE2_LAYOUTGRIDLINE = 0x00011408;
enum DISPID_IHTMLRULESTYLE2_LAYOUTGRIDMODE = 0x00011409;
enum DISPID_IHTMLRULESTYLE2_LAYOUTGRIDTYPE = 0x0001140a;
enum DISPID_IHTMLRULESTYLE2_LAYOUTGRID = 0x0001140b;
enum DISPID_IHTMLRULESTYLE2_TEXTAUTOSPACE = 0x0001140c;
enum DISPID_IHTMLRULESTYLE2_WORDBREAK = 0x0001140e;
enum DISPID_IHTMLRULESTYLE2_LINEBREAK = 0x0001140d;
enum DISPID_IHTMLRULESTYLE2_TEXTJUSTIFY = 0x0001140f;
enum DISPID_IHTMLRULESTYLE2_TEXTJUSTIFYTRIM = 0x00011410;
enum DISPID_IHTMLRULESTYLE2_TEXTKASHIDA = 0x00011411;
enum DISPID_IHTMLRULESTYLE2_OVERFLOWX = 0x00011413;
enum DISPID_IHTMLRULESTYLE2_OVERFLOWY = 0x00011414;
enum DISPID_IHTMLRULESTYLE2_ACCELERATOR = 0x0001141b;
enum DISPID_IHTMLRULESTYLE3_LAYOUTFLOW = 0x00011423;
enum DISPID_IHTMLRULESTYLE3_ZOOM = 0x00011421;
enum DISPID_IHTMLRULESTYLE3_WORDWRAP = 0x00011426;
enum DISPID_IHTMLRULESTYLE3_TEXTUNDERLINEPOSITION = 0x00011427;
enum DISPID_IHTMLRULESTYLE3_SCROLLBARBASECOLOR = 0x0001143c;
enum DISPID_IHTMLRULESTYLE3_SCROLLBARFACECOLOR = 0x0001143d;
enum DISPID_IHTMLRULESTYLE3_SCROLLBAR3DLIGHTCOLOR = 0x0001143e;
enum DISPID_IHTMLRULESTYLE3_SCROLLBARSHADOWCOLOR = 0x0001143f;
enum DISPID_IHTMLRULESTYLE3_SCROLLBARHIGHLIGHTCOLOR = 0x00011440;
enum DISPID_IHTMLRULESTYLE3_SCROLLBARDARKSHADOWCOLOR = 0x00011441;
enum DISPID_IHTMLRULESTYLE3_SCROLLBARARROWCOLOR = 0x00011442;
enum DISPID_IHTMLRULESTYLE3_SCROLLBARTRACKCOLOR = 0x0001144c;
enum DISPID_IHTMLRULESTYLE3_WRITINGMODE = 0x00011448;
enum DISPID_IHTMLRULESTYLE3_TEXTALIGNLAST = 0x00011453;
enum DISPID_IHTMLRULESTYLE3_TEXTKASHIDASPACE = 0x00011454;
enum DISPID_IHTMLRULESTYLE4_TEXTOVERFLOW = 0x00011459;
enum DISPID_IHTMLRULESTYLE4_MINHEIGHT = 0x0001145b;
enum DISPID_IHTMLRULESTYLE5_MSINTERPOLATIONMODE = 0x0001145d;
enum DISPID_IHTMLRULESTYLE5_MAXHEIGHT = 0x0001145e;
enum DISPID_IHTMLRULESTYLE5_MINWIDTH = 0x0001145f;
enum DISPID_IHTMLRULESTYLE5_MAXWIDTH = 0x00011460;
enum DISPID_IHTMLRULESTYLE6_CONTENT = 0x00011462;
enum DISPID_IHTMLRULESTYLE6_CAPTIONSIDE = 0x00011463;
enum DISPID_IHTMLRULESTYLE6_COUNTERINCREMENT = 0x00011464;
enum DISPID_IHTMLRULESTYLE6_COUNTERRESET = 0x00011465;
enum DISPID_IHTMLRULESTYLE6_OUTLINE = 0x00011466;
enum DISPID_IHTMLRULESTYLE6_OUTLINEWIDTH = 0x00011467;
enum DISPID_IHTMLRULESTYLE6_OUTLINESTYLE = 0x00011468;
enum DISPID_IHTMLRULESTYLE6_OUTLINECOLOR = 0x00011469;
enum DISPID_IHTMLRULESTYLE6_BOXSIZING = 0x0001146a;
enum DISPID_IHTMLRULESTYLE6_BORDERSPACING = 0x0001146b;
enum DISPID_IHTMLRULESTYLE6_ORPHANS = 0x0001146c;
enum DISPID_IHTMLRULESTYLE6_WIDOWS = 0x0001146d;
enum DISPID_IHTMLRULESTYLE6_PAGEBREAKINSIDE = 0x0001146e;
enum DISPID_IHTMLRULESTYLE6_EMPTYCELLS = 0x00011482;
enum DISPID_IHTMLRULESTYLE6_MSBLOCKPROGRESSION = 0x00011483;
enum DISPID_IHTMLRULESTYLE6_QUOTES = 0x00011484;
enum DISPID_IHTMLCSSRULE_TYPE = 0x0000044d;
enum DISPID_IHTMLCSSRULE_CSSTEXT = 0x0000044e;
enum DISPID_IHTMLCSSRULE_PARENTRULE = 0x0000044f;
enum DISPID_IHTMLCSSRULE_PARENTSTYLESHEET = 0x00000450;
enum DISPID_IHTMLCSSIMPORTRULE_HREF = 0x000003e9;
enum DISPID_IHTMLCSSIMPORTRULE_MEDIA = 0x000003ea;
enum DISPID_IHTMLCSSIMPORTRULE_STYLESHEET = 0x000003eb;
enum DISPID_IHTMLCSSMEDIARULE_MEDIA = 0x000003e9;
enum DISPID_IHTMLCSSMEDIARULE_CSSRULES = 0x000003ea;
enum DISPID_IHTMLCSSMEDIARULE_INSERTRULE = 0x000003eb;
enum DISPID_IHTMLCSSMEDIARULE_DELETERULE = 0x000003ec;
enum DISPID_IHTMLCSSMEDIALIST_MEDIATEXT = 0x000003e9;
enum DISPID_IHTMLCSSMEDIALIST_LENGTH = 0x000003ea;
enum DISPID_IHTMLCSSMEDIALIST_ITEM = 0x000003eb;
enum DISPID_IHTMLCSSMEDIALIST_APPENDMEDIUM = 0x000003ec;
enum DISPID_IHTMLCSSMEDIALIST_DELETEMEDIUM = 0x000003ed;
enum DISPID_IHTMLCSSNAMESPACERULE_NAMESPACEURI = 0x000003e9;
enum DISPID_IHTMLCSSNAMESPACERULE_PREFIX = 0x000003ea;
enum DISPID_IHTMLMSCSSKEYFRAMERULE_KEYTEXT = 0x000003e9;
enum DISPID_IHTMLMSCSSKEYFRAMERULE_STYLE = 0x000003ea;
enum DISPID_IHTMLMSCSSKEYFRAMESRULE_NAME = 0x000003e9;
enum DISPID_IHTMLMSCSSKEYFRAMESRULE_CSSRULES = 0x000003ea;
enum DISPID_IHTMLMSCSSKEYFRAMESRULE_APPENDRULE = 0x000003eb;
enum DISPID_IHTMLMSCSSKEYFRAMESRULE_DELETERULE = 0x000003ec;
enum DISPID_IHTMLMSCSSKEYFRAMESRULE_FINDRULE = 0x000003ed;
enum DISPID_IHTMLRENDERSTYLE_TEXTLINETHROUGHSTYLE = 0x0001142e;
enum DISPID_IHTMLRENDERSTYLE_TEXTUNDERLINESTYLE = 0x0001142f;
enum DISPID_IHTMLRENDERSTYLE_TEXTEFFECT = 0x00011430;
enum DISPID_IHTMLRENDERSTYLE_TEXTCOLOR = 0x00011446;
enum DISPID_IHTMLRENDERSTYLE_TEXTBACKGROUNDCOLOR = 0x00011431;
enum DISPID_IHTMLRENDERSTYLE_TEXTDECORATIONCOLOR = 0x00011445;
enum DISPID_IHTMLRENDERSTYLE_RENDERINGPRIORITY = 0x00011432;
enum DISPID_IHTMLRENDERSTYLE_DEFAULTTEXTSELECTION = 0x00011444;
enum DISPID_IHTMLRENDERSTYLE_TEXTDECORATION = 0x00011447;
enum DISPID_IHTMLCURRENTSTYLE_POSITION = 0x000113e2;
enum DISPID_IHTMLCURRENTSTYLE_STYLEFLOAT = 0x000113ce;
enum DISPID_IHTMLCURRENTSTYLE_COLOR = 0x0001138a;
enum DISPID_IHTMLCURRENTSTYLE_BACKGROUNDCOLOR = 0xfffffffffffffe0b;
enum DISPID_IHTMLCURRENTSTYLE_FONTFAMILY = 0x0001139a;
enum DISPID_IHTMLCURRENTSTYLE_FONTSTYLE = 0x000113a0;
enum DISPID_IHTMLCURRENTSTYLE_FONTVARIANT = 0x000113a1;
enum DISPID_IHTMLCURRENTSTYLE_FONTWEIGHT = 0x000113a3;
enum DISPID_IHTMLCURRENTSTYLE_FONTSIZE = 0x0001139b;
enum DISPID_IHTMLCURRENTSTYLE_BACKGROUNDIMAGE = 0x00011389;
enum DISPID_IHTMLCURRENTSTYLE_BACKGROUNDPOSITIONX = 0x000113a9;
enum DISPID_IHTMLCURRENTSTYLE_BACKGROUNDPOSITIONY = 0x000113aa;
enum DISPID_IHTMLCURRENTSTYLE_BACKGROUNDREPEAT = 0x000113b4;
enum DISPID_IHTMLCURRENTSTYLE_BORDERLEFTCOLOR = 0x000113c2;
enum DISPID_IHTMLCURRENTSTYLE_BORDERTOPCOLOR = 0x000113bf;
enum DISPID_IHTMLCURRENTSTYLE_BORDERRIGHTCOLOR = 0x000113c0;
enum DISPID_IHTMLCURRENTSTYLE_BORDERBOTTOMCOLOR = 0x000113c1;
enum DISPID_IHTMLCURRENTSTYLE_BORDERTOPSTYLE = 0x000113c9;
enum DISPID_IHTMLCURRENTSTYLE_BORDERRIGHTSTYLE = 0x000113ca;
enum DISPID_IHTMLCURRENTSTYLE_BORDERBOTTOMSTYLE = 0x000113cb;
enum DISPID_IHTMLCURRENTSTYLE_BORDERLEFTSTYLE = 0x000113cc;
enum DISPID_IHTMLCURRENTSTYLE_BORDERTOPWIDTH = 0x000113c4;
enum DISPID_IHTMLCURRENTSTYLE_BORDERRIGHTWIDTH = 0x000113c5;
enum DISPID_IHTMLCURRENTSTYLE_BORDERBOTTOMWIDTH = 0x000113c6;
enum DISPID_IHTMLCURRENTSTYLE_BORDERLEFTWIDTH = 0x000113c7;
enum DISPID_IHTMLCURRENTSTYLE_LEFT = 0x00010003;
enum DISPID_IHTMLCURRENTSTYLE_TOP = 0x00010004;
enum DISPID_IHTMLCURRENTSTYLE_WIDTH = 0x00010005;
enum DISPID_IHTMLCURRENTSTYLE_HEIGHT = 0x00010006;
enum DISPID_IHTMLCURRENTSTYLE_PADDINGLEFT = 0x00011397;
enum DISPID_IHTMLCURRENTSTYLE_PADDINGTOP = 0x00011394;
enum DISPID_IHTMLCURRENTSTYLE_PADDINGRIGHT = 0x00011395;
enum DISPID_IHTMLCURRENTSTYLE_PADDINGBOTTOM = 0x00011396;
enum DISPID_IHTMLCURRENTSTYLE_TEXTALIGN = 0x00010048;
enum DISPID_IHTMLCURRENTSTYLE_TEXTDECORATION = 0x000113ab;
enum DISPID_IHTMLCURRENTSTYLE_DISPLAY = 0x000113cf;
enum DISPID_IHTMLCURRENTSTYLE_VISIBILITY = 0x000113d8;
enum DISPID_IHTMLCURRENTSTYLE_ZINDEX = 0x000113e3;
enum DISPID_IHTMLCURRENTSTYLE_LETTERSPACING = 0x00011390;
enum DISPID_IHTMLCURRENTSTYLE_LINEHEIGHT = 0x0001138e;
enum DISPID_IHTMLCURRENTSTYLE_TEXTINDENT = 0x0001138f;
enum DISPID_IHTMLCURRENTSTYLE_VERTICALALIGN = 0x000113b8;
enum DISPID_IHTMLCURRENTSTYLE_BACKGROUNDATTACHMENT = 0x000113b5;
enum DISPID_IHTMLCURRENTSTYLE_MARGINTOP = 0x000113ad;
enum DISPID_IHTMLCURRENTSTYLE_MARGINRIGHT = 0x000113ae;
enum DISPID_IHTMLCURRENTSTYLE_MARGINBOTTOM = 0x000113af;
enum DISPID_IHTMLCURRENTSTYLE_MARGINLEFT = 0x000113b0;
enum DISPID_IHTMLCURRENTSTYLE_CLEAR = 0x00011398;
enum DISPID_IHTMLCURRENTSTYLE_LISTSTYLETYPE = 0x000113d0;
enum DISPID_IHTMLCURRENTSTYLE_LISTSTYLEPOSITION = 0x000113d1;
enum DISPID_IHTMLCURRENTSTYLE_LISTSTYLEIMAGE = 0x000113d2;
enum DISPID_IHTMLCURRENTSTYLE_CLIPTOP = 0x000113e5;
enum DISPID_IHTMLCURRENTSTYLE_CLIPRIGHT = 0x000113e6;
enum DISPID_IHTMLCURRENTSTYLE_CLIPBOTTOM = 0x000113e7;
enum DISPID_IHTMLCURRENTSTYLE_CLIPLEFT = 0x000113e8;
enum DISPID_IHTMLCURRENTSTYLE_OVERFLOW = 0x00011392;
enum DISPID_IHTMLCURRENTSTYLE_PAGEBREAKBEFORE = 0x000113d5;
enum DISPID_IHTMLCURRENTSTYLE_PAGEBREAKAFTER = 0x000113d6;
enum DISPID_IHTMLCURRENTSTYLE_CURSOR = 0x000113ee;
enum DISPID_IHTMLCURRENTSTYLE_TABLELAYOUT = 0x000113ea;
enum DISPID_IHTMLCURRENTSTYLE_BORDERCOLLAPSE = 0x000113dc;
enum DISPID_IHTMLCURRENTSTYLE_DIRECTION = 0x000113ff;
enum DISPID_IHTMLCURRENTSTYLE_BEHAVIOR = 0x000113fb;
enum DISPID_IHTMLCURRENTSTYLE_GETATTRIBUTE = 0x000101f6;
enum DISPID_IHTMLCURRENTSTYLE_UNICODEBIDI = 0x000113fe;
enum DISPID_IHTMLCURRENTSTYLE_RIGHT = 0x0001004d;
enum DISPID_IHTMLCURRENTSTYLE_BOTTOM = 0x0001004e;
enum DISPID_IHTMLCURRENTSTYLE_IMEMODE = 0x00011400;
enum DISPID_IHTMLCURRENTSTYLE_RUBYALIGN = 0x00011401;
enum DISPID_IHTMLCURRENTSTYLE_RUBYPOSITION = 0x00011402;
enum DISPID_IHTMLCURRENTSTYLE_RUBYOVERHANG = 0x00011403;
enum DISPID_IHTMLCURRENTSTYLE_TEXTAUTOSPACE = 0x0001140c;
enum DISPID_IHTMLCURRENTSTYLE_LINEBREAK = 0x0001140d;
enum DISPID_IHTMLCURRENTSTYLE_WORDBREAK = 0x0001140e;
enum DISPID_IHTMLCURRENTSTYLE_TEXTJUSTIFY = 0x0001140f;
enum DISPID_IHTMLCURRENTSTYLE_TEXTJUSTIFYTRIM = 0x00011410;
enum DISPID_IHTMLCURRENTSTYLE_TEXTKASHIDA = 0x00011411;
enum DISPID_IHTMLCURRENTSTYLE_BLOCKDIRECTION = 0x000113fd;
enum DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDCHAR = 0x00011407;
enum DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDLINE = 0x00011408;
enum DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDMODE = 0x00011409;
enum DISPID_IHTMLCURRENTSTYLE_LAYOUTGRIDTYPE = 0x0001140a;
enum DISPID_IHTMLCURRENTSTYLE_BORDERSTYLE = 0x000113c8;
enum DISPID_IHTMLCURRENTSTYLE_BORDERCOLOR = 0x000113be;
enum DISPID_IHTMLCURRENTSTYLE_BORDERWIDTH = 0x000113c3;
enum DISPID_IHTMLCURRENTSTYLE_PADDING = 0x00011393;
enum DISPID_IHTMLCURRENTSTYLE_MARGIN = 0x000113ac;
enum DISPID_IHTMLCURRENTSTYLE_ACCELERATOR = 0x0001141b;
enum DISPID_IHTMLCURRENTSTYLE_OVERFLOWX = 0x00011413;
enum DISPID_IHTMLCURRENTSTYLE_OVERFLOWY = 0x00011414;
enum DISPID_IHTMLCURRENTSTYLE_TEXTTRANSFORM = 0x0001138c;
enum DISPID_IHTMLCURRENTSTYLE2_LAYOUTFLOW = 0x00011423;
enum DISPID_IHTMLCURRENTSTYLE2_WORDWRAP = 0x00011426;
enum DISPID_IHTMLCURRENTSTYLE2_TEXTUNDERLINEPOSITION = 0x00011427;
enum DISPID_IHTMLCURRENTSTYLE2_HASLAYOUT = 0x00011428;
enum DISPID_IHTMLCURRENTSTYLE2_SCROLLBARBASECOLOR = 0x0001143c;
enum DISPID_IHTMLCURRENTSTYLE2_SCROLLBARFACECOLOR = 0x0001143d;
enum DISPID_IHTMLCURRENTSTYLE2_SCROLLBAR3DLIGHTCOLOR = 0x0001143e;
enum DISPID_IHTMLCURRENTSTYLE2_SCROLLBARSHADOWCOLOR = 0x0001143f;
enum DISPID_IHTMLCURRENTSTYLE2_SCROLLBARHIGHLIGHTCOLOR = 0x00011440;
enum DISPID_IHTMLCURRENTSTYLE2_SCROLLBARDARKSHADOWCOLOR = 0x00011441;
enum DISPID_IHTMLCURRENTSTYLE2_SCROLLBARARROWCOLOR = 0x00011442;
enum DISPID_IHTMLCURRENTSTYLE2_SCROLLBARTRACKCOLOR = 0x0001144c;
enum DISPID_IHTMLCURRENTSTYLE2_WRITINGMODE = 0x00011448;
enum DISPID_IHTMLCURRENTSTYLE2_ZOOM = 0x00011421;
enum DISPID_IHTMLCURRENTSTYLE2_FILTER = 0x000113da;
enum DISPID_IHTMLCURRENTSTYLE2_TEXTALIGNLAST = 0x00011453;
enum DISPID_IHTMLCURRENTSTYLE2_TEXTKASHIDASPACE = 0x00011454;
enum DISPID_IHTMLCURRENTSTYLE2_ISBLOCK = 0x00011458;
enum DISPID_IHTMLCURRENTSTYLE3_TEXTOVERFLOW = 0x00011459;
enum DISPID_IHTMLCURRENTSTYLE3_MINHEIGHT = 0x0001145b;
enum DISPID_IHTMLCURRENTSTYLE3_WORDSPACING = 0x000113b7;
enum DISPID_IHTMLCURRENTSTYLE3_WHITESPACE = 0x000113d4;
enum DISPID_IHTMLCURRENTSTYLE4_MSINTERPOLATIONMODE = 0x0001145d;
enum DISPID_IHTMLCURRENTSTYLE4_MAXHEIGHT = 0x0001145e;
enum DISPID_IHTMLCURRENTSTYLE4_MINWIDTH = 0x0001145f;
enum DISPID_IHTMLCURRENTSTYLE4_MAXWIDTH = 0x00011460;
enum DISPID_IHTMLCURRENTSTYLE5_CAPTIONSIDE = 0x00011463;
enum DISPID_IHTMLCURRENTSTYLE5_OUTLINE = 0x00011466;
enum DISPID_IHTMLCURRENTSTYLE5_OUTLINEWIDTH = 0x00011467;
enum DISPID_IHTMLCURRENTSTYLE5_OUTLINESTYLE = 0x00011468;
enum DISPID_IHTMLCURRENTSTYLE5_OUTLINECOLOR = 0x00011469;
enum DISPID_IHTMLCURRENTSTYLE5_BOXSIZING = 0x0001146a;
enum DISPID_IHTMLCURRENTSTYLE5_BORDERSPACING = 0x0001146b;
enum DISPID_IHTMLCURRENTSTYLE5_ORPHANS = 0x0001146c;
enum DISPID_IHTMLCURRENTSTYLE5_WIDOWS = 0x0001146d;
enum DISPID_IHTMLCURRENTSTYLE5_PAGEBREAKINSIDE = 0x0001146e;
enum DISPID_IHTMLCURRENTSTYLE5_EMPTYCELLS = 0x00011482;
enum DISPID_IHTMLCURRENTSTYLE5_MSBLOCKPROGRESSION = 0x00011483;
enum DISPID_IHTMLCURRENTSTYLE5_QUOTES = 0x00011484;
enum DISPID_IHTMLRECT_LEFT = 0x000003e9;
enum DISPID_IHTMLRECT_TOP = 0x000003ea;
enum DISPID_IHTMLRECT_RIGHT = 0x000003eb;
enum DISPID_IHTMLRECT_BOTTOM = 0x000003ec;
enum DISPID_IHTMLRECT2_WIDTH = 0x000003ed;
enum DISPID_IHTMLRECT2_HEIGHT = 0x000003ee;
enum DISPID_IHTMLRECTCOLLECTION_LENGTH = 0x000005dc;
enum DISPID_IHTMLRECTCOLLECTION__NEWENUM = 0xfffffffffffffffc;
enum DISPID_IHTMLRECTCOLLECTION_ITEM = 0x00000000;
enum DISPID_IHTMLDOMNODE_NODETYPE = 0x00010416;
enum DISPID_IHTMLDOMNODE_PARENTNODE = 0x00010417;
enum DISPID_IHTMLDOMNODE_HASCHILDNODES = 0x00010418;
enum DISPID_IHTMLDOMNODE_CHILDNODES = 0x00010419;
enum DISPID_IHTMLDOMNODE_ATTRIBUTES = 0x0001041a;
enum DISPID_IHTMLDOMNODE_INSERTBEFORE = 0x0001041b;
enum DISPID_IHTMLDOMNODE_REMOVECHILD = 0x0001041c;
enum DISPID_IHTMLDOMNODE_REPLACECHILD = 0x0001041d;
enum DISPID_IHTMLDOMNODE_CLONENODE = 0x00010425;
enum DISPID_IHTMLDOMNODE_REMOVENODE = 0x0001042a;
enum DISPID_IHTMLDOMNODE_SWAPNODE = 0x0001042c;
enum DISPID_IHTMLDOMNODE_REPLACENODE = 0x0001042b;
enum DISPID_IHTMLDOMNODE_APPENDCHILD = 0x00010431;
enum DISPID_IHTMLDOMNODE_NODENAME = 0x00010432;
enum DISPID_IHTMLDOMNODE_NODEVALUE = 0x00010433;
enum DISPID_IHTMLDOMNODE_FIRSTCHILD = 0x00010434;
enum DISPID_IHTMLDOMNODE_LASTCHILD = 0x00010435;
enum DISPID_IHTMLDOMNODE_PREVIOUSSIBLING = 0x00010436;
enum DISPID_IHTMLDOMNODE_NEXTSIBLING = 0x00010437;
enum DISPID_IHTMLDOMNODE2_OWNERDOCUMENT = 0x00010459;
enum DISPID_IHTMLDOMNODE3_PREFIX = 0x00010460;
enum DISPID_IHTMLDOMNODE3_LOCALNAME = 0x0001045e;
enum DISPID_IHTMLDOMNODE3_NAMESPACEURI = 0x0001045f;
enum DISPID_IHTMLDOMNODE3_TEXTCONTENT = 0x00010467;
enum DISPID_IHTMLDOMNODE3_ISEQUALNODE = 0x00010461;
enum DISPID_IHTMLDOMNODE3_LOOKUPNAMESPACEURI = 0x00010462;
enum DISPID_IHTMLDOMNODE3_LOOKUPPREFIX = 0x00010463;
enum DISPID_IHTMLDOMNODE3_ISDEFAULTNAMESPACE = 0x00010464;
enum DISPID_IHTMLDOMNODE3_IE9_APPENDCHILD = 0x000104f4;
enum DISPID_IHTMLDOMNODE3_IE9_INSERTBEFORE = 0x000104f5;
enum DISPID_IHTMLDOMNODE3_IE9_REMOVECHILD = 0x000104f6;
enum DISPID_IHTMLDOMNODE3_IE9_REPLACECHILD = 0x000104f7;
enum DISPID_IHTMLDOMNODE3_ISSAMENODE = 0x00010465;
enum DISPID_IHTMLDOMNODE3_COMPAREDOCUMENTPOSITION = 0x00010466;
enum DISPID_IHTMLDOMNODE3_ISSUPPORTED = 0x000104fd;
enum DISPID_IHTMLDOMATTRIBUTE_NODENAME = 0x000003e8;
enum DISPID_IHTMLDOMATTRIBUTE_NODEVALUE = 0x000003ea;
enum DISPID_IHTMLDOMATTRIBUTE_SPECIFIED = 0x000003e9;
enum DISPID_IHTMLDOMATTRIBUTE2_NAME = 0x000003eb;
enum DISPID_IHTMLDOMATTRIBUTE2_VALUE = 0x000003ec;
enum DISPID_IHTMLDOMATTRIBUTE2_EXPANDO = 0x000003ed;
enum DISPID_IHTMLDOMATTRIBUTE2_NODETYPE = 0x000003ee;
enum DISPID_IHTMLDOMATTRIBUTE2_PARENTNODE = 0x000003ef;
enum DISPID_IHTMLDOMATTRIBUTE2_CHILDNODES = 0x000003f0;
enum DISPID_IHTMLDOMATTRIBUTE2_FIRSTCHILD = 0x000003f1;
enum DISPID_IHTMLDOMATTRIBUTE2_LASTCHILD = 0x000003f2;
enum DISPID_IHTMLDOMATTRIBUTE2_PREVIOUSSIBLING = 0x000003f3;
enum DISPID_IHTMLDOMATTRIBUTE2_NEXTSIBLING = 0x000003f4;
enum DISPID_IHTMLDOMATTRIBUTE2_ATTRIBUTES = 0x000003f5;
enum DISPID_IHTMLDOMATTRIBUTE2_OWNERDOCUMENT = 0x000003f6;
enum DISPID_IHTMLDOMATTRIBUTE2_INSERTBEFORE = 0x000003f7;
enum DISPID_IHTMLDOMATTRIBUTE2_REPLACECHILD = 0x000003f8;
enum DISPID_IHTMLDOMATTRIBUTE2_REMOVECHILD = 0x000003f9;
enum DISPID_IHTMLDOMATTRIBUTE2_APPENDCHILD = 0x000003fa;
enum DISPID_IHTMLDOMATTRIBUTE2_HASCHILDNODES = 0x000003fb;
enum DISPID_IHTMLDOMATTRIBUTE2_CLONENODE = 0x000003fc;
enum DISPID_IHTMLDOMATTRIBUTE3_IE8_NODEVALUE = 0x00000481;
enum DISPID_IHTMLDOMATTRIBUTE3_IE8_VALUE = 0x00000482;
enum DISPID_IHTMLDOMATTRIBUTE3_IE8_SPECIFIED = 0x0000047e;
enum DISPID_IHTMLDOMATTRIBUTE3_OWNERELEMENT = 0x0000047f;
enum DISPID_IHTMLDOMATTRIBUTE4_IE9_NODEVALUE = 0x00000487;
enum DISPID_IHTMLDOMATTRIBUTE4_IE9_NODENAME = 0x00000488;
enum DISPID_IHTMLDOMATTRIBUTE4_IE9_NAME = 0x00000489;
enum DISPID_IHTMLDOMATTRIBUTE4_IE9_VALUE = 0x0000048a;
enum DISPID_IHTMLDOMATTRIBUTE4_IE9_FIRSTCHILD = 0x0000048b;
enum DISPID_IHTMLDOMATTRIBUTE4_IE9_LASTCHILD = 0x0000048c;
enum DISPID_IHTMLDOMATTRIBUTE4_IE9_CHILDNODES = 0x0000048d;
enum DISPID_IHTMLDOMATTRIBUTE4_HASATTRIBUTES = 0x0000048e;
enum DISPID_IHTMLDOMATTRIBUTE4_IE9_HASCHILDNODES = 0x0000048f;
enum DISPID_IHTMLDOMATTRIBUTE4_NORMALIZE = 0x00000492;
enum DISPID_IHTMLDOMATTRIBUTE4_IE9_SPECIFIED = 0x00000493;
enum DISPID_IHTMLDOMTEXTNODE_DATA = 0x000003e8;
enum DISPID_IHTMLDOMTEXTNODE_TOSTRING = 0x000003e9;
enum DISPID_IHTMLDOMTEXTNODE_LENGTH = 0x000003ea;
enum DISPID_IHTMLDOMTEXTNODE_SPLITTEXT = 0x000003eb;
enum DISPID_IHTMLDOMTEXTNODE2_SUBSTRINGDATA = 0x000003ec;
enum DISPID_IHTMLDOMTEXTNODE2_APPENDDATA = 0x000003ed;
enum DISPID_IHTMLDOMTEXTNODE2_INSERTDATA = 0x000003ee;
enum DISPID_IHTMLDOMTEXTNODE2_DELETEDATA = 0x000003ef;
enum DISPID_IHTMLDOMTEXTNODE2_REPLACEDATA = 0x000003f0;
enum DISPID_IHTMLDOMTEXTNODE3_IE9_SUBSTRINGDATA = 0x000003f2;
enum DISPID_IHTMLDOMTEXTNODE3_IE9_INSERTDATA = 0x000003f3;
enum DISPID_IHTMLDOMTEXTNODE3_IE9_DELETEDATA = 0x000003f4;
enum DISPID_IHTMLDOMTEXTNODE3_IE9_REPLACEDATA = 0x000003f5;
enum DISPID_IHTMLDOMTEXTNODE3_IE9_SPLITTEXT = 0x000003f1;
enum DISPID_IHTMLDOMTEXTNODE3_WHOLETEXT = 0x000003f6;
enum DISPID_IHTMLDOMTEXTNODE3_REPLACEWHOLETEXT = 0x000003f7;
enum DISPID_IHTMLDOMTEXTNODE3_HASATTRIBUTES = 0x000003f9;
enum DISPID_IHTMLDOMTEXTNODE3_NORMALIZE = 0x000003fb;
enum DISPID_IHTMLDOMIMPLEMENTATION_HASFEATURE = 0x000003e8;
enum DISPID_IHTMLDOMIMPLEMENTATION2_CREATEDOCUMENTTYPE = 0x000003e9;
enum DISPID_IHTMLDOMIMPLEMENTATION2_CREATEDOCUMENT = 0x000003ea;
enum DISPID_IHTMLDOMIMPLEMENTATION2_CREATEHTMLDOCUMENT = 0x000003eb;
enum DISPID_IHTMLDOMIMPLEMENTATION2_IE9_HASFEATURE = 0x000003ec;
enum DISPID_IHTMLATTRIBUTECOLLECTION_LENGTH = 0x000005dc;
enum DISPID_IHTMLATTRIBUTECOLLECTION__NEWENUM = 0xfffffffffffffffc;
enum DISPID_IHTMLATTRIBUTECOLLECTION_ITEM = 0x00000000;
enum DISPID_IHTMLATTRIBUTECOLLECTION2_GETNAMEDITEM = 0x000005dd;
enum DISPID_IHTMLATTRIBUTECOLLECTION2_SETNAMEDITEM = 0x000005de;
enum DISPID_IHTMLATTRIBUTECOLLECTION2_REMOVENAMEDITEM = 0x000005df;
enum DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_GETNAMEDITEM = 0x0000047e;
enum DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_SETNAMEDITEM = 0x0000047f;
enum DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_REMOVENAMEDITEM = 0x00000480;
enum DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_ITEM = 0x00000482;
enum DISPID_IHTMLATTRIBUTECOLLECTION3_IE8_LENGTH = 0x00000481;
enum DISPID_IHTMLATTRIBUTECOLLECTION4_GETNAMEDITEMNS = 0x00000483;
enum DISPID_IHTMLATTRIBUTECOLLECTION4_SETNAMEDITEMNS = 0x00000484;
enum DISPID_IHTMLATTRIBUTECOLLECTION4_REMOVENAMEDITEMNS = 0x00000485;
enum DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_GETNAMEDITEM = 0x00000486;
enum DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_SETNAMEDITEM = 0x00000487;
enum DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_REMOVENAMEDITEM = 0x00000488;
enum DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_ITEM = 0x00000489;
enum DISPID_IHTMLATTRIBUTECOLLECTION4_IE9_LENGTH = 0x0000048a;
enum DISPID_IHTMLDOMCHILDRENCOLLECTION_LENGTH = 0x000005dc;
enum DISPID_IHTMLDOMCHILDRENCOLLECTION__NEWENUM = 0xfffffffffffffffc;
enum DISPID_IHTMLDOMCHILDRENCOLLECTION_ITEM = 0x00000000;
enum DISPID_IHTMLDOMCHILDRENCOLLECTION2_IE9_ITEM = 0x00000001;
enum DISPID_IHTMLELEMENT_SETATTRIBUTE = 0x000101f5;
enum DISPID_IHTMLELEMENT_GETATTRIBUTE = 0x000101f6;
enum DISPID_IHTMLELEMENT_REMOVEATTRIBUTE = 0x000101f7;
enum DISPID_IHTMLELEMENT_CLASSNAME = 0x000103e9;
enum DISPID_IHTMLELEMENT_ID = 0x000103ea;
enum DISPID_IHTMLELEMENT_TAGNAME = 0x000103ec;
enum DISPID_IHTMLELEMENT_PARENTELEMENT = 0x00010008;
enum DISPID_IHTMLELEMENT_STYLE = 0x0001004a;
enum DISPID_IHTMLELEMENT_ONHELP = 0x0001177d;
enum DISPID_IHTMLELEMENT_ONCLICK = 0x00011778;
enum DISPID_IHTMLELEMENT_ONDBLCLICK = 0x00011779;
enum DISPID_IHTMLELEMENT_ONKEYDOWN = 0x00011775;
enum DISPID_IHTMLELEMENT_ONKEYUP = 0x00011776;
enum DISPID_IHTMLELEMENT_ONKEYPRESS = 0x00011777;
enum DISPID_IHTMLELEMENT_ONMOUSEOUT = 0x00011771;
enum DISPID_IHTMLELEMENT_ONMOUSEOVER = 0x00011770;
enum DISPID_IHTMLELEMENT_ONMOUSEMOVE = 0x00011774;
enum DISPID_IHTMLELEMENT_ONMOUSEDOWN = 0x00011772;
enum DISPID_IHTMLELEMENT_ONMOUSEUP = 0x00011773;
enum DISPID_IHTMLELEMENT_DOCUMENT = 0x000103fa;
enum DISPID_IHTMLELEMENT_TITLE = 0x00010045;
enum DISPID_IHTMLELEMENT_LANGUAGE = 0x000113ec;
enum DISPID_IHTMLELEMENT_ONSELECTSTART = 0x00011795;
enum DISPID_IHTMLELEMENT_SCROLLINTOVIEW = 0x000103fb;
enum DISPID_IHTMLELEMENT_CONTAINS = 0x000103fc;
enum DISPID_IHTMLELEMENT_SOURCEINDEX = 0x00010400;
enum DISPID_IHTMLELEMENT_RECORDNUMBER = 0x00010401;
enum DISPID_IHTMLELEMENT_LANG = 0x00011391;
enum DISPID_IHTMLELEMENT_OFFSETLEFT = 0x000103f0;
enum DISPID_IHTMLELEMENT_OFFSETTOP = 0x000103f1;
enum DISPID_IHTMLELEMENT_OFFSETWIDTH = 0x000103f2;
enum DISPID_IHTMLELEMENT_OFFSETHEIGHT = 0x000103f3;
enum DISPID_IHTMLELEMENT_OFFSETPARENT = 0x000103f4;
enum DISPID_IHTMLELEMENT_INNERHTML = 0x00010402;
enum DISPID_IHTMLELEMENT_INNERTEXT = 0x00010403;
enum DISPID_IHTMLELEMENT_OUTERHTML = 0x00010404;
enum DISPID_IHTMLELEMENT_OUTERTEXT = 0x00010405;
enum DISPID_IHTMLELEMENT_INSERTADJACENTHTML = 0x00010406;
enum DISPID_IHTMLELEMENT_INSERTADJACENTTEXT = 0x00010407;
enum DISPID_IHTMLELEMENT_PARENTTEXTEDIT = 0x00010408;
enum DISPID_IHTMLELEMENT_ISTEXTEDIT = 0x0001040a;
enum DISPID_IHTMLELEMENT_CLICK = 0x00010409;
enum DISPID_IHTMLELEMENT_FILTERS = 0x0001040b;
enum DISPID_IHTMLELEMENT_ONDRAGSTART = 0x00011793;
enum DISPID_IHTMLELEMENT_TOSTRING = 0x0001040c;
enum DISPID_IHTMLELEMENT_ONBEFOREUPDATE = 0x00011785;
enum DISPID_IHTMLELEMENT_ONAFTERUPDATE = 0x00011786;
enum DISPID_IHTMLELEMENT_ONERRORUPDATE = 0x00011796;
enum DISPID_IHTMLELEMENT_ONROWEXIT = 0x00011782;
enum DISPID_IHTMLELEMENT_ONROWENTER = 0x00011783;
enum DISPID_IHTMLELEMENT_ONDATASETCHANGED = 0x00011798;
enum DISPID_IHTMLELEMENT_ONDATAAVAILABLE = 0x00011799;
enum DISPID_IHTMLELEMENT_ONDATASETCOMPLETE = 0x0001179a;
enum DISPID_IHTMLELEMENT_ONFILTERCHANGE = 0x0001179b;
enum DISPID_IHTMLELEMENT_CHILDREN = 0x0001040d;
enum DISPID_IHTMLELEMENT_ALL = 0x0001040e;
enum DISPID_IHTMLELEMENT2_SCOPENAME = 0x0001040f;
enum DISPID_IHTMLELEMENT2_SETCAPTURE = 0x00010410;
enum DISPID_IHTMLELEMENT2_RELEASECAPTURE = 0x00010411;
enum DISPID_IHTMLELEMENT2_ONLOSECAPTURE = 0x0001179e;
enum DISPID_IHTMLELEMENT2_COMPONENTFROMPOINT = 0x00010412;
enum DISPID_IHTMLELEMENT2_DOSCROLL = 0x00010413;
enum DISPID_IHTMLELEMENT2_ONSCROLL = 0x0001178f;
enum DISPID_IHTMLELEMENT2_ONDRAG = 0x000117a1;
enum DISPID_IHTMLELEMENT2_ONDRAGEND = 0x000117a2;
enum DISPID_IHTMLELEMENT2_ONDRAGENTER = 0x000117a3;
enum DISPID_IHTMLELEMENT2_ONDRAGOVER = 0x000117a4;
enum DISPID_IHTMLELEMENT2_ONDRAGLEAVE = 0x000117a5;
enum DISPID_IHTMLELEMENT2_ONDROP = 0x000117a6;
enum DISPID_IHTMLELEMENT2_ONBEFORECUT = 0x000117aa;
enum DISPID_IHTMLELEMENT2_ONCUT = 0x000117a7;
enum DISPID_IHTMLELEMENT2_ONBEFORECOPY = 0x000117ab;
enum DISPID_IHTMLELEMENT2_ONCOPY = 0x000117a8;
enum DISPID_IHTMLELEMENT2_ONBEFOREPASTE = 0x000117ac;
enum DISPID_IHTMLELEMENT2_ONPASTE = 0x000117a9;
enum DISPID_IHTMLELEMENT2_CURRENTSTYLE = 0x000103ef;
enum DISPID_IHTMLELEMENT2_ONPROPERTYCHANGE = 0x0001179f;
enum DISPID_IHTMLELEMENT2_GETCLIENTRECTS = 0x00010414;
enum DISPID_IHTMLELEMENT2_GETBOUNDINGCLIENTRECT = 0x00010415;
enum DISPID_IHTMLELEMENT2_SETEXPRESSION = 0x000101f8;
enum DISPID_IHTMLELEMENT2_GETEXPRESSION = 0x000101f9;
enum DISPID_IHTMLELEMENT2_REMOVEEXPRESSION = 0x000101fa;
enum DISPID_IHTMLELEMENT2_TABINDEX = 0x0001000f;
enum DISPID_IHTMLELEMENT2_FOCUS = 0x000107d0;
enum DISPID_IHTMLELEMENT2_ACCESSKEY = 0x000107d5;
enum DISPID_IHTMLELEMENT2_ONBLUR = 0x0001177f;
enum DISPID_IHTMLELEMENT2_ONFOCUS = 0x0001177e;
enum DISPID_IHTMLELEMENT2_ONRESIZE = 0x00011794;
enum DISPID_IHTMLELEMENT2_BLUR = 0x000107d2;
enum DISPID_IHTMLELEMENT2_ADDFILTER = 0x000107e1;
enum DISPID_IHTMLELEMENT2_REMOVEFILTER = 0x000107e2;
enum DISPID_IHTMLELEMENT2_CLIENTHEIGHT = 0x000107e3;
enum DISPID_IHTMLELEMENT2_CLIENTWIDTH = 0x000107e4;
enum DISPID_IHTMLELEMENT2_CLIENTTOP = 0x000107e5;
enum DISPID_IHTMLELEMENT2_CLIENTLEFT = 0x000107e6;
enum DISPID_IHTMLELEMENT2_ATTACHEVENT = 0x000101fb;
enum DISPID_IHTMLELEMENT2_DETACHEVENT = 0x000101fc;
enum DISPID_IHTMLELEMENT2_READYSTATE = 0x000113fc;
enum DISPID_IHTMLELEMENT2_ONREADYSTATECHANGE = 0x00011789;
enum DISPID_IHTMLELEMENT2_ONROWSDELETE = 0x000117ae;
enum DISPID_IHTMLELEMENT2_ONROWSINSERTED = 0x000117af;
enum DISPID_IHTMLELEMENT2_ONCELLCHANGE = 0x000117b0;
enum DISPID_IHTMLELEMENT2_DIR = 0x000113fd;
enum DISPID_IHTMLELEMENT2_CREATECONTROLRANGE = 0x00010420;
enum DISPID_IHTMLELEMENT2_SCROLLHEIGHT = 0x00010421;
enum DISPID_IHTMLELEMENT2_SCROLLWIDTH = 0x00010422;
enum DISPID_IHTMLELEMENT2_SCROLLTOP = 0x00010423;
enum DISPID_IHTMLELEMENT2_SCROLLLEFT = 0x00010424;
enum DISPID_IHTMLELEMENT2_CLEARATTRIBUTES = 0x00010426;
enum DISPID_IHTMLELEMENT2_MERGEATTRIBUTES = 0x00010427;
enum DISPID_IHTMLELEMENT2_ONCONTEXTMENU = 0x000117b1;
enum DISPID_IHTMLELEMENT2_INSERTADJACENTELEMENT = 0x0001042d;
enum DISPID_IHTMLELEMENT2_APPLYELEMENT = 0x00010429;
enum DISPID_IHTMLELEMENT2_GETADJACENTTEXT = 0x0001042e;
enum DISPID_IHTMLELEMENT2_REPLACEADJACENTTEXT = 0x0001042f;
enum DISPID_IHTMLELEMENT2_CANHAVECHILDREN = 0x00010430;
enum DISPID_IHTMLELEMENT2_ADDBEHAVIOR = 0x00010438;
enum DISPID_IHTMLELEMENT2_REMOVEBEHAVIOR = 0x00010439;
enum DISPID_IHTMLELEMENT2_RUNTIMESTYLE = 0x00010428;
enum DISPID_IHTMLELEMENT2_BEHAVIORURNS = 0x0001043a;
enum DISPID_IHTMLELEMENT2_TAGURN = 0x0001043b;
enum DISPID_IHTMLELEMENT2_ONBEFOREEDITFOCUS = 0x000117b5;
enum DISPID_IHTMLELEMENT2_READYSTATEVALUE = 0x0001043c;
enum DISPID_IHTMLELEMENT2_GETELEMENTSBYTAGNAME = 0x0001043d;
enum DISPID_IHTMLELEMENT3_MERGEATTRIBUTES = 0x00010448;
enum DISPID_IHTMLELEMENT3_ISMULTILINE = 0x00010449;
enum DISPID_IHTMLELEMENT3_CANHAVEHTML = 0x0001044a;
enum DISPID_IHTMLELEMENT3_ONLAYOUTCOMPLETE = 0x000117b9;
enum DISPID_IHTMLELEMENT3_ONPAGE = 0x000117ba;
enum DISPID_IHTMLELEMENT3_INFLATEBLOCK = 0x0001044c;
enum DISPID_IHTMLELEMENT3_ONBEFOREDEACTIVATE = 0x000117bd;
enum DISPID_IHTMLELEMENT3_SETACTIVE = 0x0001044d;
enum DISPID_IHTMLELEMENT3_CONTENTEDITABLE = 0x0001142a;
enum DISPID_IHTMLELEMENT3_ISCONTENTEDITABLE = 0x0001044e;
enum DISPID_IHTMLELEMENT3_HIDEFOCUS = 0x0001142b;
enum DISPID_IHTMLELEMENT3_DISABLED = 0x0001004c;
enum DISPID_IHTMLELEMENT3_ISDISABLED = 0x00010451;
enum DISPID_IHTMLELEMENT3_ONMOVE = 0x000117be;
enum DISPID_IHTMLELEMENT3_ONCONTROLSELECT = 0x000117bf;
enum DISPID_IHTMLELEMENT3_FIREEVENT = 0x00010452;
enum DISPID_IHTMLELEMENT3_ONRESIZESTART = 0x000117c3;
enum DISPID_IHTMLELEMENT3_ONRESIZEEND = 0x000117c4;
enum DISPID_IHTMLELEMENT3_ONMOVESTART = 0x000117c1;
enum DISPID_IHTMLELEMENT3_ONMOVEEND = 0x000117c2;
enum DISPID_IHTMLELEMENT3_ONMOUSEENTER = 0x000117c5;
enum DISPID_IHTMLELEMENT3_ONMOUSELEAVE = 0x000117c6;
enum DISPID_IHTMLELEMENT3_ONACTIVATE = 0x000117c7;
enum DISPID_IHTMLELEMENT3_ONDEACTIVATE = 0x000117c8;
enum DISPID_IHTMLELEMENT3_DRAGDROP = 0x00010453;
enum DISPID_IHTMLELEMENT3_GLYPHMODE = 0x00010454;
enum DISPID_IHTMLELEMENT4_ONMOUSEWHEEL = 0x000117bc;
enum DISPID_IHTMLELEMENT4_NORMALIZE = 0x00010458;
enum DISPID_IHTMLELEMENT4_GETATTRIBUTENODE = 0x00010455;
enum DISPID_IHTMLELEMENT4_SETATTRIBUTENODE = 0x00010456;
enum DISPID_IHTMLELEMENT4_REMOVEATTRIBUTENODE = 0x00010457;
enum DISPID_IHTMLELEMENT4_ONBEFOREACTIVATE = 0x000117ca;
enum DISPID_IHTMLELEMENT4_ONFOCUSIN = 0x000117cb;
enum DISPID_IHTMLELEMENT4_ONFOCUSOUT = 0x000117cc;
enum DISPID_IELEMENTSELECTOR_QUERYSELECTOR = 0x0001045a;
enum DISPID_IELEMENTSELECTOR_QUERYSELECTORALL = 0x0001045b;
enum DISPID_IHTMLUNIQUENAME_UNIQUENUMBER = 0x0001041e;
enum DISPID_IHTMLUNIQUENAME_UNIQUEID = 0x0001041f;
enum DISPID_IHTMLELEMENT5_IE8_GETATTRIBUTENODE = 0x000104b0;
enum DISPID_IHTMLELEMENT5_IE8_SETATTRIBUTENODE = 0x000104b1;
enum DISPID_IHTMLELEMENT5_IE8_REMOVEATTRIBUTENODE = 0x000104b2;
enum DISPID_IHTMLELEMENT5_HASATTRIBUTE = 0x000104b3;
enum DISPID_IHTMLELEMENT5_ROLE = 0x000104b4;
enum DISPID_IHTMLELEMENT5_ARIABUSY = 0x000104b5;
enum DISPID_IHTMLELEMENT5_ARIACHECKED = 0x000104b6;
enum DISPID_IHTMLELEMENT5_ARIADISABLED = 0x000104b7;
enum DISPID_IHTMLELEMENT5_ARIAEXPANDED = 0x000104b8;
enum DISPID_IHTMLELEMENT5_ARIAHASPOPUP = 0x000104b9;
enum DISPID_IHTMLELEMENT5_ARIAHIDDEN = 0x000104ba;
enum DISPID_IHTMLELEMENT5_ARIAINVALID = 0x000104bb;
enum DISPID_IHTMLELEMENT5_ARIAMULTISELECTABLE = 0x000104bc;
enum DISPID_IHTMLELEMENT5_ARIAPRESSED = 0x000104bd;
enum DISPID_IHTMLELEMENT5_ARIAREADONLY = 0x000104be;
enum DISPID_IHTMLELEMENT5_ARIAREQUIRED = 0x000104bf;
enum DISPID_IHTMLELEMENT5_ARIASECRET = 0x000104c0;
enum DISPID_IHTMLELEMENT5_ARIASELECTED = 0x000104c1;
enum DISPID_IHTMLELEMENT5_IE8_GETATTRIBUTE = 0x000104c2;
enum DISPID_IHTMLELEMENT5_IE8_SETATTRIBUTE = 0x000104c3;
enum DISPID_IHTMLELEMENT5_IE8_REMOVEATTRIBUTE = 0x000104c4;
enum DISPID_IHTMLELEMENT5_IE8_ATTRIBUTES = 0x000104c5;
enum DISPID_IHTMLELEMENT5_ARIAVALUENOW = 0x000104c6;
enum DISPID_IHTMLELEMENT5_ARIAPOSINSET = 0x000104c7;
enum DISPID_IHTMLELEMENT5_ARIASETSIZE = 0x000104c8;
enum DISPID_IHTMLELEMENT5_ARIALEVEL = 0x000104c9;
enum DISPID_IHTMLELEMENT5_ARIAVALUEMIN = 0x000104ca;
enum DISPID_IHTMLELEMENT5_ARIAVALUEMAX = 0x000104cb;
enum DISPID_IHTMLELEMENT5_ARIACONTROLS = 0x000104cc;
enum DISPID_IHTMLELEMENT5_ARIADESCRIBEDBY = 0x000104cd;
enum DISPID_IHTMLELEMENT5_ARIAFLOWTO = 0x000104ce;
enum DISPID_IHTMLELEMENT5_ARIALABELLEDBY = 0x000104cf;
enum DISPID_IHTMLELEMENT5_ARIAACTIVEDESCENDANT = 0x000104d0;
enum DISPID_IHTMLELEMENT5_ARIAOWNS = 0x000104d1;
enum DISPID_IHTMLELEMENT5_HASATTRIBUTES = 0x000104d2;
enum DISPID_IHTMLELEMENT5_ARIALIVE = 0x000104d3;
enum DISPID_IHTMLELEMENT5_ARIARELEVANT = 0x000104d4;
enum DISPID_IHTMLELEMENT6_GETATTRIBUTENS = 0x000104e5;
enum DISPID_IHTMLELEMENT6_SETATTRIBUTENS = 0x000104e6;
enum DISPID_IHTMLELEMENT6_REMOVEATTRIBUTENS = 0x000104e7;
enum DISPID_IHTMLELEMENT6_GETATTRIBUTENODENS = 0x000104e2;
enum DISPID_IHTMLELEMENT6_SETATTRIBUTENODENS = 0x000104e3;
enum DISPID_IHTMLELEMENT6_HASATTRIBUTENS = 0x000104e4;
enum DISPID_IHTMLELEMENT6_IE9_GETATTRIBUTE = 0x000104ec;
enum DISPID_IHTMLELEMENT6_IE9_SETATTRIBUTE = 0x000104ed;
enum DISPID_IHTMLELEMENT6_IE9_REMOVEATTRIBUTE = 0x000104ee;
enum DISPID_IHTMLELEMENT6_IE9_GETATTRIBUTENODE = 0x000104e8;
enum DISPID_IHTMLELEMENT6_IE9_SETATTRIBUTENODE = 0x000104e9;
enum DISPID_IHTMLELEMENT6_IE9_REMOVEATTRIBUTENODE = 0x000104ea;
enum DISPID_IHTMLELEMENT6_IE9_HASATTRIBUTE = 0x000104eb;
enum DISPID_IHTMLELEMENT6_GETELEMENTSBYTAGNAMENS = 0x000104ef;
enum DISPID_IHTMLELEMENT6_IE9_TAGNAME = 0x000104f1;
enum DISPID_IHTMLELEMENT6_IE9_NODENAME = 0x000104f2;
enum DISPID_IHTMLELEMENT6_GETELEMENTSBYCLASSNAME = 0x000104f3;
enum DISPID_IHTMLELEMENT6_MSMATCHESSELECTOR = 0x000104fe;
enum DISPID_IHTMLELEMENT6_ONABORT = 0x0001178c;
enum DISPID_IHTMLELEMENT6_ONCANPLAY = 0x000117f6;
enum DISPID_IHTMLELEMENT6_ONCANPLAYTHROUGH = 0x000117f7;
enum DISPID_IHTMLELEMENT6_ONCHANGE = 0x0001178e;
enum DISPID_IHTMLELEMENT6_ONDURATIONCHANGE = 0x000117f8;
enum DISPID_IHTMLELEMENT6_ONEMPTIED = 0x000117f9;
enum DISPID_IHTMLELEMENT6_ONENDED = 0x000117fa;
enum DISPID_IHTMLELEMENT6_ONERROR = 0x0001178d;
enum DISPID_IHTMLELEMENT6_ONINPUT = 0x000117ef;
enum DISPID_IHTMLELEMENT6_ONLOAD = 0x00011790;
enum DISPID_IHTMLELEMENT6_ONLOADEDDATA = 0x000117fb;
enum DISPID_IHTMLELEMENT6_ONLOADEDMETADATA = 0x000117fc;
enum DISPID_IHTMLELEMENT6_ONLOADSTART = 0x000117fd;
enum DISPID_IHTMLELEMENT6_ONPAUSE = 0x000117fe;
enum DISPID_IHTMLELEMENT6_ONPLAY = 0x000117ff;
enum DISPID_IHTMLELEMENT6_ONPLAYING = 0x00011800;
enum DISPID_IHTMLELEMENT6_ONPROGRESS = 0x00011801;
enum DISPID_IHTMLELEMENT6_ONRATECHANGE = 0x00011802;
enum DISPID_IHTMLELEMENT6_ONRESET = 0x0001177c;
enum DISPID_IHTMLELEMENT6_ONSEEKED = 0x00011803;
enum DISPID_IHTMLELEMENT6_ONSEEKING = 0x00011804;
enum DISPID_IHTMLELEMENT6_ONSELECT = 0x0001177a;
enum DISPID_IHTMLELEMENT6_ONSTALLED = 0x00011805;
enum DISPID_IHTMLELEMENT6_ONSUBMIT = 0x0001177b;
enum DISPID_IHTMLELEMENT6_ONSUSPEND = 0x00011806;
enum DISPID_IHTMLELEMENT6_ONTIMEUPDATE = 0x00011807;
enum DISPID_IHTMLELEMENT6_ONVOLUMECHANGE = 0x00011808;
enum DISPID_IHTMLELEMENT6_ONWAITING = 0x00011809;
enum DISPID_IHTMLELEMENT6_IE9_HASATTRIBUTES = 0x000104ff;
enum DISPID_IHTMLELEMENT7_ONMSPOINTERDOWN = 0x0001180a;
enum DISPID_IHTMLELEMENT7_ONMSPOINTERMOVE = 0x0001180b;
enum DISPID_IHTMLELEMENT7_ONMSPOINTERUP = 0x0001180c;
enum DISPID_IHTMLELEMENT7_ONMSPOINTEROVER = 0x0001180d;
enum DISPID_IHTMLELEMENT7_ONMSPOINTEROUT = 0x0001180e;
enum DISPID_IHTMLELEMENT7_ONMSPOINTERCANCEL = 0x0001180f;
enum DISPID_IHTMLELEMENT7_ONMSPOINTERHOVER = 0x00011810;
enum DISPID_IHTMLELEMENT7_ONMSLOSTPOINTERCAPTURE = 0x0001181a;
enum DISPID_IHTMLELEMENT7_ONMSGOTPOINTERCAPTURE = 0x0001181b;
enum DISPID_IHTMLELEMENT7_ONMSGESTURESTART = 0x00011813;
enum DISPID_IHTMLELEMENT7_ONMSGESTURECHANGE = 0x00011814;
enum DISPID_IHTMLELEMENT7_ONMSGESTUREEND = 0x00011815;
enum DISPID_IHTMLELEMENT7_ONMSGESTUREHOLD = 0x00011816;
enum DISPID_IHTMLELEMENT7_ONMSGESTURETAP = 0x00011817;
enum DISPID_IHTMLELEMENT7_ONMSGESTUREDOUBLETAP = 0x00011818;
enum DISPID_IHTMLELEMENT7_ONMSINERTIASTART = 0x00011819;
enum DISPID_IHTMLELEMENT7_MSSETPOINTERCAPTURE = 0x00010506;
enum DISPID_IHTMLELEMENT7_MSRELEASEPOINTERCAPTURE = 0x00010507;
enum DISPID_IHTMLELEMENT7_ONMSTRANSITIONSTART = 0x0001181d;
enum DISPID_IHTMLELEMENT7_ONMSTRANSITIONEND = 0x0001181e;
enum DISPID_IHTMLELEMENT7_ONMSANIMATIONSTART = 0x0001181f;
enum DISPID_IHTMLELEMENT7_ONMSANIMATIONEND = 0x00011820;
enum DISPID_IHTMLELEMENT7_ONMSANIMATIONITERATION = 0x00011821;
enum DISPID_IHTMLELEMENT7_ONINVALID = 0x0001182c;
enum DISPID_IHTMLELEMENT7_XMSACCELERATORKEY = 0x00010512;
enum DISPID_IHTMLELEMENT7_SPELLCHECK = 0x000114fb;
enum DISPID_IHTMLELEMENT7_ONMSMANIPULATIONSTATECHANGED = 0x00011822;
enum DISPID_IHTMLELEMENT7_ONCUECHANGE = 0x00011831;
enum DISPID_IHTMLELEMENTAPPLIEDSTYLES_MSGETRULESAPPLIED = 0x0001045c;
enum DISPID_IHTMLELEMENTAPPLIEDSTYLES_MSGETRULESAPPLIEDWITHANCESTOR = 0x0001045d;
enum DISPID_IELEMENTTRAVERSAL_FIRSTELEMENTCHILD = 0x000104f8;
enum DISPID_IELEMENTTRAVERSAL_LASTELEMENTCHILD = 0x000104f9;
enum DISPID_IELEMENTTRAVERSAL_PREVIOUSELEMENTSIBLING = 0x000104fa;
enum DISPID_IELEMENTTRAVERSAL_NEXTELEMENTSIBLING = 0x000104fb;
enum DISPID_IELEMENTTRAVERSAL_CHILDELEMENTCOUNT = 0x000104fc;
enum DISPID_IHTMLDATABINDING_DATAFLD = 0x000103fd;
enum DISPID_IHTMLDATABINDING_DATASRC = 0x000103fe;
enum DISPID_IHTMLDATABINDING_DATAFORMATAS = 0x000103ff;
enum DISPID_HTMLELEMENTEVENTS4_ONABORT = 0x000003e8;
enum DISPID_HTMLELEMENTEVENTS4_ONCHANGE = 0x000003e9;
enum DISPID_HTMLELEMENTEVENTS4_ONERROR = 0x000003ea;
enum DISPID_HTMLELEMENTEVENTS4_ONLOAD = 0x000003eb;
enum DISPID_HTMLELEMENTEVENTS4_ONRESET = 0x000003f7;
enum DISPID_HTMLELEMENTEVENTS4_ONSELECT = 0x000003ee;
enum DISPID_HTMLELEMENTEVENTS4_ONSUBMIT = 0x000003ef;
enum DISPID_HTMLELEMENTEVENTS4_ONMSCONTENTZOOM = 0x0001181c;
enum DISPID_HTMLELEMENTEVENTS3_ONONLINE = 0x00000428;
enum DISPID_HTMLELEMENTEVENTS3_ONOFFLINE = 0x00000429;
enum DISPID_HTMLELEMENTEVENTS2_ONHELP = 0x0001000a;
enum DISPID_HTMLELEMENTEVENTS2_ONCLICK = 0xfffffffffffffda8;
enum DISPID_HTMLELEMENTEVENTS2_ONDBLCLICK = 0xfffffffffffffda7;
enum DISPID_HTMLELEMENTEVENTS2_ONKEYPRESS = 0xfffffffffffffda5;
enum DISPID_HTMLELEMENTEVENTS2_ONKEYDOWN = 0xfffffffffffffda6;
enum DISPID_HTMLELEMENTEVENTS2_ONKEYUP = 0xfffffffffffffda4;
enum DISPID_HTMLELEMENTEVENTS2_ONMOUSEOUT = 0x00010009;
enum DISPID_HTMLELEMENTEVENTS2_ONMOUSEOVER = 0x00010008;
enum DISPID_HTMLELEMENTEVENTS2_ONMOUSEMOVE = 0xfffffffffffffda2;
enum DISPID_HTMLELEMENTEVENTS2_ONMOUSEDOWN = 0xfffffffffffffda3;
enum DISPID_HTMLELEMENTEVENTS2_ONMOUSEUP = 0xfffffffffffffda1;
enum DISPID_HTMLELEMENTEVENTS2_ONSELECTSTART = 0x0001000c;
enum DISPID_HTMLELEMENTEVENTS2_ONFILTERCHANGE = 0x00010011;
enum DISPID_HTMLELEMENTEVENTS2_ONDRAGSTART = 0x0001000b;
enum DISPID_HTMLELEMENTEVENTS2_ONBEFOREUPDATE = 0x00010004;
enum DISPID_HTMLELEMENTEVENTS2_ONAFTERUPDATE = 0x00010005;
enum DISPID_HTMLELEMENTEVENTS2_ONERRORUPDATE = 0x0001000d;
enum DISPID_HTMLELEMENTEVENTS2_ONROWEXIT = 0x00010006;
enum DISPID_HTMLELEMENTEVENTS2_ONROWENTER = 0x00010007;
enum DISPID_HTMLELEMENTEVENTS2_ONDATASETCHANGED = 0x0001000e;
enum DISPID_HTMLELEMENTEVENTS2_ONDATAAVAILABLE = 0x0001000f;
enum DISPID_HTMLELEMENTEVENTS2_ONDATASETCOMPLETE = 0x00010010;
enum DISPID_HTMLELEMENTEVENTS2_ONLOSECAPTURE = 0x00010012;
enum DISPID_HTMLELEMENTEVENTS2_ONPROPERTYCHANGE = 0x00010013;
enum DISPID_HTMLELEMENTEVENTS2_ONSCROLL = 0x000003f6;
enum DISPID_HTMLELEMENTEVENTS2_ONFOCUS = 0x00010001;
enum DISPID_HTMLELEMENTEVENTS2_ONRESIZE = 0x000003f8;
enum DISPID_HTMLELEMENTEVENTS2_ONDRAG = 0x00010014;
enum DISPID_HTMLELEMENTEVENTS2_ONDRAGEND = 0x00010015;
enum DISPID_HTMLELEMENTEVENTS2_ONDRAGENTER = 0x00010016;
enum DISPID_HTMLELEMENTEVENTS2_ONDRAGOVER = 0x00010017;
enum DISPID_HTMLELEMENTEVENTS2_ONDRAGLEAVE = 0x00010018;
enum DISPID_HTMLELEMENTEVENTS2_ONDROP = 0x00010019;
enum DISPID_HTMLELEMENTEVENTS2_ONBEFORECUT = 0x0001001d;
enum DISPID_HTMLELEMENTEVENTS2_ONCUT = 0x0001001a;
enum DISPID_HTMLELEMENTEVENTS2_ONBEFORECOPY = 0x0001001e;
enum DISPID_HTMLELEMENTEVENTS2_ONCOPY = 0x0001001b;
enum DISPID_HTMLELEMENTEVENTS2_ONBEFOREPASTE = 0x0001001f;
enum DISPID_HTMLELEMENTEVENTS2_ONPASTE = 0x0001001c;
enum DISPID_HTMLELEMENTEVENTS2_ONCONTEXTMENU = 0x000003ff;
enum DISPID_HTMLELEMENTEVENTS2_ONROWSDELETE = 0x00010020;
enum DISPID_HTMLELEMENTEVENTS2_ONROWSINSERTED = 0x00010021;
enum DISPID_HTMLELEMENTEVENTS2_ONCELLCHANGE = 0x00010022;
enum DISPID_HTMLELEMENTEVENTS2_ONREADYSTATECHANGE = 0xfffffffffffffd9f;
enum DISPID_HTMLELEMENTEVENTS2_ONLAYOUTCOMPLETE = 0x00000406;
enum DISPID_HTMLELEMENTEVENTS2_ONPAGE = 0x00000407;
enum DISPID_HTMLELEMENTEVENTS2_ONMOUSEENTER = 0x00000412;
enum DISPID_HTMLELEMENTEVENTS2_ONMOUSELEAVE = 0x00000413;
enum DISPID_HTMLELEMENTEVENTS2_ONACTIVATE = 0x00000414;
enum DISPID_HTMLELEMENTEVENTS2_ONDEACTIVATE = 0x00000415;
enum DISPID_HTMLELEMENTEVENTS2_ONBEFOREDEACTIVATE = 0x0000040a;
enum DISPID_HTMLELEMENTEVENTS2_ONBEFOREACTIVATE = 0x00000417;
enum DISPID_HTMLELEMENTEVENTS2_ONFOCUSIN = 0x00000418;
enum DISPID_HTMLELEMENTEVENTS2_ONFOCUSOUT = 0x00000419;
enum DISPID_HTMLELEMENTEVENTS2_ONMOVE = 0x0000040b;
enum DISPID_HTMLELEMENTEVENTS2_ONCONTROLSELECT = 0x0000040c;
enum DISPID_HTMLELEMENTEVENTS2_ONMOVESTART = 0x0000040e;
enum DISPID_HTMLELEMENTEVENTS2_ONMOVEEND = 0x0000040f;
enum DISPID_HTMLELEMENTEVENTS2_ONRESIZESTART = 0x00000410;
enum DISPID_HTMLELEMENTEVENTS2_ONRESIZEEND = 0x00000411;
enum DISPID_HTMLELEMENTEVENTS2_ONMOUSEWHEEL = 0x00000409;
enum DISPID_HTMLELEMENTEVENTS_ONHELP = 0x0001000a;
enum DISPID_HTMLELEMENTEVENTS_ONCLICK = 0xfffffffffffffda8;
enum DISPID_HTMLELEMENTEVENTS_ONDBLCLICK = 0xfffffffffffffda7;
enum DISPID_HTMLELEMENTEVENTS_ONKEYPRESS = 0xfffffffffffffda5;
enum DISPID_HTMLELEMENTEVENTS_ONKEYDOWN = 0xfffffffffffffda6;
enum DISPID_HTMLELEMENTEVENTS_ONKEYUP = 0xfffffffffffffda4;
enum DISPID_HTMLELEMENTEVENTS_ONMOUSEOUT = 0x00010009;
enum DISPID_HTMLELEMENTEVENTS_ONMOUSEOVER = 0x00010008;
enum DISPID_HTMLELEMENTEVENTS_ONMOUSEMOVE = 0xfffffffffffffda2;
enum DISPID_HTMLELEMENTEVENTS_ONMOUSEDOWN = 0xfffffffffffffda3;
enum DISPID_HTMLELEMENTEVENTS_ONMOUSEUP = 0xfffffffffffffda1;
enum DISPID_HTMLELEMENTEVENTS_ONSELECTSTART = 0x0001000c;
enum DISPID_HTMLELEMENTEVENTS_ONFILTERCHANGE = 0x00010011;
enum DISPID_HTMLELEMENTEVENTS_ONDRAGSTART = 0x0001000b;
enum DISPID_HTMLELEMENTEVENTS_ONBEFOREUPDATE = 0x00010004;
enum DISPID_HTMLELEMENTEVENTS_ONAFTERUPDATE = 0x00010005;
enum DISPID_HTMLELEMENTEVENTS_ONERRORUPDATE = 0x0001000d;
enum DISPID_HTMLELEMENTEVENTS_ONROWEXIT = 0x00010006;
enum DISPID_HTMLELEMENTEVENTS_ONROWENTER = 0x00010007;
enum DISPID_HTMLELEMENTEVENTS_ONDATASETCHANGED = 0x0001000e;
enum DISPID_HTMLELEMENTEVENTS_ONDATAAVAILABLE = 0x0001000f;
enum DISPID_HTMLELEMENTEVENTS_ONDATASETCOMPLETE = 0x00010010;
enum DISPID_HTMLELEMENTEVENTS_ONLOSECAPTURE = 0x00010012;
enum DISPID_HTMLELEMENTEVENTS_ONPROPERTYCHANGE = 0x00010013;
enum DISPID_HTMLELEMENTEVENTS_ONSCROLL = 0x000003f6;
enum DISPID_HTMLELEMENTEVENTS_ONFOCUS = 0x00010001;
enum DISPID_HTMLELEMENTEVENTS_ONRESIZE = 0x000003f8;
enum DISPID_HTMLELEMENTEVENTS_ONDRAG = 0x00010014;
enum DISPID_HTMLELEMENTEVENTS_ONDRAGEND = 0x00010015;
enum DISPID_HTMLELEMENTEVENTS_ONDRAGENTER = 0x00010016;
enum DISPID_HTMLELEMENTEVENTS_ONDRAGOVER = 0x00010017;
enum DISPID_HTMLELEMENTEVENTS_ONDRAGLEAVE = 0x00010018;
enum DISPID_HTMLELEMENTEVENTS_ONDROP = 0x00010019;
enum DISPID_HTMLELEMENTEVENTS_ONBEFORECUT = 0x0001001d;
enum DISPID_HTMLELEMENTEVENTS_ONCUT = 0x0001001a;
enum DISPID_HTMLELEMENTEVENTS_ONBEFORECOPY = 0x0001001e;
enum DISPID_HTMLELEMENTEVENTS_ONCOPY = 0x0001001b;
enum DISPID_HTMLELEMENTEVENTS_ONBEFOREPASTE = 0x0001001f;
enum DISPID_HTMLELEMENTEVENTS_ONPASTE = 0x0001001c;
enum DISPID_HTMLELEMENTEVENTS_ONCONTEXTMENU = 0x000003ff;
enum DISPID_HTMLELEMENTEVENTS_ONROWSDELETE = 0x00010020;
enum DISPID_HTMLELEMENTEVENTS_ONROWSINSERTED = 0x00010021;
enum DISPID_HTMLELEMENTEVENTS_ONCELLCHANGE = 0x00010022;
enum DISPID_HTMLELEMENTEVENTS_ONREADYSTATECHANGE = 0xfffffffffffffd9f;
enum DISPID_HTMLELEMENTEVENTS_ONBEFOREEDITFOCUS = 0x00000403;
enum DISPID_HTMLELEMENTEVENTS_ONLAYOUTCOMPLETE = 0x00000406;
enum DISPID_HTMLELEMENTEVENTS_ONPAGE = 0x00000407;
enum DISPID_HTMLELEMENTEVENTS_ONBEFOREDEACTIVATE = 0x0000040a;
enum DISPID_HTMLELEMENTEVENTS_ONBEFOREACTIVATE = 0x00000417;
enum DISPID_HTMLELEMENTEVENTS_ONMOVE = 0x0000040b;
enum DISPID_HTMLELEMENTEVENTS_ONCONTROLSELECT = 0x0000040c;
enum DISPID_HTMLELEMENTEVENTS_ONMOVESTART = 0x0000040e;
enum DISPID_HTMLELEMENTEVENTS_ONMOVEEND = 0x0000040f;
enum DISPID_HTMLELEMENTEVENTS_ONRESIZESTART = 0x00000410;
enum DISPID_HTMLELEMENTEVENTS_ONRESIZEEND = 0x00000411;
enum DISPID_HTMLELEMENTEVENTS_ONMOUSEENTER = 0x00000412;
enum DISPID_HTMLELEMENTEVENTS_ONMOUSELEAVE = 0x00000413;
enum DISPID_HTMLELEMENTEVENTS_ONMOUSEWHEEL = 0x00000409;
enum DISPID_HTMLELEMENTEVENTS_ONACTIVATE = 0x00000414;
enum DISPID_HTMLELEMENTEVENTS_ONDEACTIVATE = 0x00000415;
enum DISPID_HTMLELEMENTEVENTS_ONFOCUSIN = 0x00000418;
enum DISPID_HTMLELEMENTEVENTS_ONFOCUSOUT = 0x00000419;
enum DISPID_IHTMLELEMENTDEFAULTS_STYLE = 0x000003e9;
enum DISPID_IHTMLELEMENTDEFAULTS_TABSTOP = 0x000003ea;
enum DISPID_IHTMLELEMENTDEFAULTS_VIEWINHERITSTYLE = 0x0001144f;
enum DISPID_IHTMLELEMENTDEFAULTS_VIEWMASTERTAB = 0x000003ee;
enum DISPID_IHTMLELEMENTDEFAULTS_SCROLLSEGMENTX = 0x000003eb;
enum DISPID_IHTMLELEMENTDEFAULTS_SCROLLSEGMENTY = 0x000003ec;
enum DISPID_IHTMLELEMENTDEFAULTS_ISMULTILINE = 0x000003f0;
enum DISPID_IHTMLELEMENTDEFAULTS_CONTENTEDITABLE = 0x0001142a;
enum DISPID_IHTMLELEMENTDEFAULTS_CANHAVEHTML = 0x000003f1;
enum DISPID_IHTMLELEMENTDEFAULTS_VIEWLINK = 0x000003f3;
enum DISPID_IHTMLELEMENTDEFAULTS_FROZEN = 0x0001144e;
enum DISPID_IHTCDEFAULTDISPATCH_ELEMENT = 0x00011417;
enum DISPID_IHTCDEFAULTDISPATCH_CREATEEVENTOBJECT = 0x00011418;
enum DISPID_IHTCDEFAULTDISPATCH_DEFAULTS = 0x0001142d;
enum DISPID_IHTCDEFAULTDISPATCH_DOCUMENT = 0x00011416;
enum DISPID_IHTCPROPERTYBEHAVIOR_FIRECHANGE = 0x000101f4;
enum DISPID_IHTCPROPERTYBEHAVIOR_VALUE = 0x00011415;
enum DISPID_IHTCEVENTBEHAVIOR_FIRE = 0x000101f4;
enum DISPID_IHTCATTACHBEHAVIOR_FIREEVENT = 0x00000000;
enum DISPID_IHTCATTACHBEHAVIOR_DETACHEVENT = 0x000101f4;
enum DISPID_IHTCATTACHBEHAVIOR2_FIREEVENT = 0x00000000;
enum DISPID_IHTCDESCBEHAVIOR_URN = 0x000101f4;
enum DISPID_IHTCDESCBEHAVIOR_NAME = 0x000101f5;
enum DISPID_IHTMLURNCOLLECTION_LENGTH = 0x000003e9;
enum DISPID_IHTMLURNCOLLECTION_ITEM = 0x00000000;
enum DISPID_IHTMLGENERICELEMENT_RECORDSET = 0x000003e9;
enum DISPID_IHTMLGENERICELEMENT_NAMEDRECORDSET = 0x000003ea;
enum DISPID_IHTMLSTYLESHEETRULE_SELECTORTEXT = 0x000003e9;
enum DISPID_IHTMLSTYLESHEETRULE_STYLE = 0x0001004a;
enum DISPID_IHTMLSTYLESHEETRULE_READONLY = 0x000003ea;
enum DISPID_IHTMLSTYLESHEETRULEAPPLIED_MSSPECIFICITY = 0x000003eb;
enum DISPID_IHTMLSTYLESHEETRULEAPPLIED_MSGETSPECIFICITY = 0x000003ec;
enum DISPID_IHTMLSTYLESHEETRULE2_IE9_SELECTORTEXT = 0x000003ed;
enum DISPID_IHTMLSTYLESHEETRULESCOLLECTION_LENGTH = 0x000003e9;
enum DISPID_IHTMLSTYLESHEETRULESCOLLECTION_ITEM = 0x00000000;
enum DISPID_IHTMLSTYLESHEETRULESCOLLECTION2_IE9_LENGTH = 0x000003eb;
enum DISPID_IHTMLSTYLESHEETRULESCOLLECTION2_IE9_ITEM = 0x000003ea;
enum DISPID_IHTMLSTYLESHEETPAGE_SELECTOR = 0x000003e9;
enum DISPID_IHTMLSTYLESHEETPAGE_PSEUDOCLASS = 0x000003ea;
enum DISPID_IHTMLSTYLESHEETPAGE2_SELECTORTEXT = 0x000003eb;
enum DISPID_IHTMLSTYLESHEETPAGE2_STYLE = 0x0001004a;
enum DISPID_IHTMLSTYLESHEETPAGESCOLLECTION_LENGTH = 0x000003e9;
enum DISPID_IHTMLSTYLESHEETPAGESCOLLECTION_ITEM = 0x00000000;
enum DISPID_IHTMLSTYLESHEET_TITLE = 0x000003e9;
enum DISPID_IHTMLSTYLESHEET_PARENTSTYLESHEET = 0x000003ea;
enum DISPID_IHTMLSTYLESHEET_OWNINGELEMENT = 0x000003eb;
enum DISPID_IHTMLSTYLESHEET_DISABLED = 0x0001004c;
enum DISPID_IHTMLSTYLESHEET_READONLY = 0x000003ec;
enum DISPID_IHTMLSTYLESHEET_IMPORTS = 0x000003ed;
enum DISPID_IHTMLSTYLESHEET_HREF = 0x000003ee;
enum DISPID_IHTMLSTYLESHEET_TYPE = 0x000003ef;
enum DISPID_IHTMLSTYLESHEET_ID = 0x000003f0;
enum DISPID_IHTMLSTYLESHEET_ADDIMPORT = 0x000003f1;
enum DISPID_IHTMLSTYLESHEET_ADDRULE = 0x000003f2;
enum DISPID_IHTMLSTYLESHEET_REMOVEIMPORT = 0x000003f3;
enum DISPID_IHTMLSTYLESHEET_REMOVERULE = 0x000003f4;
enum DISPID_IHTMLSTYLESHEET_MEDIA = 0x000003f5;
enum DISPID_IHTMLSTYLESHEET_CSSTEXT = 0x000003f6;
enum DISPID_IHTMLSTYLESHEET_RULES = 0x000003f7;
enum DISPID_IHTMLSTYLESHEET2_PAGES = 0x000003f8;
enum DISPID_IHTMLSTYLESHEET2_ADDPAGERULE = 0x000003f9;
enum DISPID_IHTMLSTYLESHEET3_IE8_HREF = 0x0000047e;
enum DISPID_IHTMLSTYLESHEET3_ISALTERNATE = 0x0000047f;
enum DISPID_IHTMLSTYLESHEET3_ISPREFALTERNATE = 0x00000480;
enum DISPID_IHTMLSTYLESHEET4_IE9_TYPE = 0x00000481;
enum DISPID_IHTMLSTYLESHEET4_IE9_HREF = 0x00000482;
enum DISPID_IHTMLSTYLESHEET4_IE9_TITLE = 0x00000483;
enum DISPID_IHTMLSTYLESHEET4_OWNERNODE = 0x00000484;
enum DISPID_IHTMLSTYLESHEET4_OWNERRULE = 0x00000485;
enum DISPID_IHTMLSTYLESHEET4_CSSRULES = 0x00000486;
enum DISPID_IHTMLSTYLESHEET4_IE9_MEDIA = 0x00000487;
enum DISPID_IHTMLSTYLESHEET4_INSERTRULE = 0x00000488;
enum DISPID_IHTMLSTYLESHEET4_DELETERULE = 0x00000489;
enum DISPID_IHTMLSTYLESHEETSCOLLECTION_LENGTH = 0x000003e9;
enum DISPID_IHTMLSTYLESHEETSCOLLECTION__NEWENUM = 0xfffffffffffffffc;
enum DISPID_IHTMLSTYLESHEETSCOLLECTION_ITEM = 0x00000000;
enum DISPID_IHTMLSTYLESHEETSCOLLECTION2_IE9_ITEM = 0x000003ea;
enum DISPID_IHTMLLINKELEMENT_HREF = 0x000003ed;
enum DISPID_IHTMLLINKELEMENT_REL = 0x000003ee;
enum DISPID_IHTMLLINKELEMENT_REV = 0x000003ef;
enum DISPID_IHTMLLINKELEMENT_TYPE = 0x000003f0;
enum DISPID_IHTMLLINKELEMENT_READYSTATE = 0x000113fc;
enum DISPID_IHTMLLINKELEMENT_ONREADYSTATECHANGE = 0x00011789;
enum DISPID_IHTMLLINKELEMENT_ONLOAD = 0x00011790;
enum DISPID_IHTMLLINKELEMENT_ONERROR = 0x0001178d;
enum DISPID_IHTMLLINKELEMENT_STYLESHEET = 0x000003f6;
enum DISPID_IHTMLLINKELEMENT_DISABLED = 0x0001004c;
enum DISPID_IHTMLLINKELEMENT_MEDIA = 0x000003f8;
enum DISPID_IHTMLLINKELEMENT2_TARGET = 0x000003f9;
enum DISPID_IHTMLLINKELEMENT3_CHARSET = 0x000003fa;
enum DISPID_IHTMLLINKELEMENT3_HREFLANG = 0x000003fb;
enum DISPID_IHTMLLINKELEMENT4_IE8_HREF = 0x0000047e;
enum DISPID_IHTMLLINKELEMENT5_SHEET = 0x000003fc;
enum DISPID_HTMLLINKELEMENTEVENTS2_ONLOAD = 0x000003eb;
enum DISPID_HTMLLINKELEMENTEVENTS2_ONERROR = 0x000003ea;
enum DISPID_HTMLLINKELEMENTEVENTS_ONLOAD = 0x000003eb;
enum DISPID_HTMLLINKELEMENTEVENTS_ONERROR = 0x000003ea;
enum DISPID_IHTMLTXTRANGE_HTMLTEXT = 0x000003eb;
enum DISPID_IHTMLTXTRANGE_TEXT = 0x000003ec;
enum DISPID_IHTMLTXTRANGE_PARENTELEMENT = 0x000003ee;
enum DISPID_IHTMLTXTRANGE_DUPLICATE = 0x000003f0;
enum DISPID_IHTMLTXTRANGE_INRANGE = 0x000003f2;
enum DISPID_IHTMLTXTRANGE_ISEQUAL = 0x000003f3;
enum DISPID_IHTMLTXTRANGE_SCROLLINTOVIEW = 0x000003f4;
enum DISPID_IHTMLTXTRANGE_COLLAPSE = 0x000003f5;
enum DISPID_IHTMLTXTRANGE_EXPAND = 0x000003f6;
enum DISPID_IHTMLTXTRANGE_MOVE = 0x000003f7;
enum DISPID_IHTMLTXTRANGE_MOVESTART = 0x000003f8;
enum DISPID_IHTMLTXTRANGE_MOVEEND = 0x000003f9;
enum DISPID_IHTMLTXTRANGE_SELECT = 0x00000400;
enum DISPID_IHTMLTXTRANGE_PASTEHTML = 0x00000402;
enum DISPID_IHTMLTXTRANGE_MOVETOELEMENTTEXT = 0x000003e9;
enum DISPID_IHTMLTXTRANGE_SETENDPOINT = 0x00000401;
enum DISPID_IHTMLTXTRANGE_COMPAREENDPOINTS = 0x000003fa;
enum DISPID_IHTMLTXTRANGE_FINDTEXT = 0x000003fb;
enum DISPID_IHTMLTXTRANGE_MOVETOPOINT = 0x000003fc;
enum DISPID_IHTMLTXTRANGE_GETBOOKMARK = 0x000003fd;
enum DISPID_IHTMLTXTRANGE_MOVETOBOOKMARK = 0x000003f1;
enum DISPID_IHTMLTXTRANGE_QUERYCOMMANDSUPPORTED = 0x00000403;
enum DISPID_IHTMLTXTRANGE_QUERYCOMMANDENABLED = 0x00000404;
enum DISPID_IHTMLTXTRANGE_QUERYCOMMANDSTATE = 0x00000405;
enum DISPID_IHTMLTXTRANGE_QUERYCOMMANDINDETERM = 0x00000406;
enum DISPID_IHTMLTXTRANGE_QUERYCOMMANDTEXT = 0x00000407;
enum DISPID_IHTMLTXTRANGE_QUERYCOMMANDVALUE = 0x00000408;
enum DISPID_IHTMLTXTRANGE_EXECCOMMAND = 0x00000409;
enum DISPID_IHTMLTXTRANGE_EXECCOMMANDSHOWHELP = 0x0000040a;
enum DISPID_IHTMLTEXTRANGEMETRICS_OFFSETTOP = 0x0000040b;
enum DISPID_IHTMLTEXTRANGEMETRICS_OFFSETLEFT = 0x0000040c;
enum DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGTOP = 0x0000040d;
enum DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGLEFT = 0x0000040e;
enum DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGWIDTH = 0x0000040f;
enum DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGHEIGHT = 0x00000410;
enum DISPID_IHTMLTEXTRANGEMETRICS2_GETCLIENTRECTS = 0x00000411;
enum DISPID_IHTMLTEXTRANGEMETRICS2_GETBOUNDINGCLIENTRECT = 0x00000412;
enum DISPID_IHTMLTXTRANGECOLLECTION_LENGTH = 0x000005dc;
enum DISPID_IHTMLTXTRANGECOLLECTION__NEWENUM = 0xfffffffffffffffc;
enum DISPID_IHTMLTXTRANGECOLLECTION_ITEM = 0x00000000;
enum DISPID_IHTMLDOMRANGE_STARTCONTAINER = 0x000003e9;
enum DISPID_IHTMLDOMRANGE_STARTOFFSET = 0x000003ea;
enum DISPID_IHTMLDOMRANGE_ENDCONTAINER = 0x000003eb;
enum DISPID_IHTMLDOMRANGE_ENDOFFSET = 0x000003ec;
enum DISPID_IHTMLDOMRANGE_COLLAPSED = 0x000003ed;
enum DISPID_IHTMLDOMRANGE_COMMONANCESTORCONTAINER = 0x000003ee;
enum DISPID_IHTMLDOMRANGE_SETSTART = 0x000003ef;
enum DISPID_IHTMLDOMRANGE_SETEND = 0x000003f0;
enum DISPID_IHTMLDOMRANGE_SETSTARTBEFORE = 0x000003f1;
enum DISPID_IHTMLDOMRANGE_SETSTARTAFTER = 0x000003f2;
enum DISPID_IHTMLDOMRANGE_SETENDBEFORE = 0x000003f3;
enum DISPID_IHTMLDOMRANGE_SETENDAFTER = 0x000003f4;
enum DISPID_IHTMLDOMRANGE_COLLAPSE = 0x000003f5;
enum DISPID_IHTMLDOMRANGE_SELECTNODE = 0x000003f6;
enum DISPID_IHTMLDOMRANGE_SELECTNODECONTENTS = 0x000003f7;
enum DISPID_IHTMLDOMRANGE_COMPAREBOUNDARYPOINTS = 0x000003f8;
enum DISPID_IHTMLDOMRANGE_DELETECONTENTS = 0x000003f9;
enum DISPID_IHTMLDOMRANGE_EXTRACTCONTENTS = 0x000003fa;
enum DISPID_IHTMLDOMRANGE_CLONECONTENTS = 0x000003fb;
enum DISPID_IHTMLDOMRANGE_INSERTNODE = 0x000003fc;
enum DISPID_IHTMLDOMRANGE_SURROUNDCONTENTS = 0x000003fd;
enum DISPID_IHTMLDOMRANGE_CLONERANGE = 0x000003fe;
enum DISPID_IHTMLDOMRANGE_TOSTRING = 0x000003ff;
enum DISPID_IHTMLDOMRANGE_DETACH = 0x00000400;
enum DISPID_IHTMLDOMRANGE_GETCLIENTRECTS = 0x00000401;
enum DISPID_IHTMLDOMRANGE_GETBOUNDINGCLIENTRECT = 0x00000402;
enum DISPID_IHTMLFORMELEMENT_ACTION = 0x000003e9;
enum DISPID_IHTMLFORMELEMENT_DIR = 0x000113fd;
enum DISPID_IHTMLFORMELEMENT_ENCODING = 0x000003eb;
enum DISPID_IHTMLFORMELEMENT_METHOD = 0x000003ec;
enum DISPID_IHTMLFORMELEMENT_ELEMENTS = 0x000003ed;
enum DISPID_IHTMLFORMELEMENT_TARGET = 0x000003ee;
enum DISPID_IHTMLFORMELEMENT_NAME = 0x00010000;
enum DISPID_IHTMLFORMELEMENT_ONSUBMIT = 0x0001177b;
enum DISPID_IHTMLFORMELEMENT_ONRESET = 0x0001177c;
enum DISPID_IHTMLFORMELEMENT_SUBMIT = 0x000003f1;
enum DISPID_IHTMLFORMELEMENT_RESET = 0x000003f2;
enum DISPID_IHTMLFORMELEMENT_LENGTH = 0x000005dc;
enum DISPID_IHTMLFORMELEMENT__NEWENUM = 0xfffffffffffffffc;
enum DISPID_IHTMLFORMELEMENT_ITEM = 0x00000000;
enum DISPID_IHTMLFORMELEMENT_TAGS = 0x000005de;
enum DISPID_IHTMLFORMELEMENT2_ACCEPTCHARSET = 0x000003f3;
enum DISPID_IHTMLFORMELEMENT2_URNS = 0x000005e1;
enum DISPID_IHTMLFORMELEMENT3_NAMEDITEM = 0x000005e2;
enum DISPID_IHTMLSUBMITDATA_APPENDNAMEVALUEPAIR = 0x000003f4;
enum DISPID_IHTMLSUBMITDATA_APPENDNAMEFILEPAIR = 0x000003f5;
enum DISPID_IHTMLSUBMITDATA_APPENDITEMSEPARATOR = 0x000003f6;
enum DISPID_IHTMLFORMELEMENT4_IE8_ACTION = 0x0000047e;
enum DISPID_HTMLFORMELEMENTEVENTS2_ONSUBMIT = 0x000003ef;
enum DISPID_HTMLFORMELEMENTEVENTS2_ONRESET = 0x000003f7;
enum DISPID_HTMLFORMELEMENTEVENTS_ONSUBMIT = 0x000003ef;
enum DISPID_HTMLFORMELEMENTEVENTS_ONRESET = 0x000003f7;
enum DISPID_IHTMLCONTROLELEMENT_TABINDEX = 0x0001000f;
enum DISPID_IHTMLCONTROLELEMENT_FOCUS = 0x000107d0;
enum DISPID_IHTMLCONTROLELEMENT_ACCESSKEY = 0x000107d5;
enum DISPID_IHTMLCONTROLELEMENT_ONBLUR = 0x0001177f;
enum DISPID_IHTMLCONTROLELEMENT_ONFOCUS = 0x0001177e;
enum DISPID_IHTMLCONTROLELEMENT_ONRESIZE = 0x00011794;
enum DISPID_IHTMLCONTROLELEMENT_BLUR = 0x000107d2;
enum DISPID_IHTMLCONTROLELEMENT_ADDFILTER = 0x000107e1;
enum DISPID_IHTMLCONTROLELEMENT_REMOVEFILTER = 0x000107e2;
enum DISPID_IHTMLCONTROLELEMENT_CLIENTHEIGHT = 0x000107e3;
enum DISPID_IHTMLCONTROLELEMENT_CLIENTWIDTH = 0x000107e4;
enum DISPID_IHTMLCONTROLELEMENT_CLIENTTOP = 0x000107e5;
enum DISPID_IHTMLCONTROLELEMENT_CLIENTLEFT = 0x000107e6;
enum DISPID_IHTMLTEXTCONTAINER_CREATECONTROLRANGE = 0x000003e9;
enum DISPID_IHTMLTEXTCONTAINER_SCROLLHEIGHT = 0x000003ea;
enum DISPID_IHTMLTEXTCONTAINER_SCROLLWIDTH = 0x000003eb;
enum DISPID_IHTMLTEXTCONTAINER_SCROLLTOP = 0x000003ec;
enum DISPID_IHTMLTEXTCONTAINER_SCROLLLEFT = 0x000003ed;
enum DISPID_IHTMLTEXTCONTAINER_ONSCROLL = 0x0001178f;
enum DISPID_HTMLTEXTCONTAINEREVENTS2_ONCHANGE = 0x000003e9;
enum DISPID_HTMLTEXTCONTAINEREVENTS2_ONSELECT = 0x000003ee;
enum DISPID_HTMLTEXTCONTAINEREVENTS_ONCHANGE = 0x000003e9;
enum DISPID_HTMLTEXTCONTAINEREVENTS_ONSELECT = 0x000003ee;
enum DISPID_IHTMLCONTROLRANGE_SELECT = 0x000003ea;
enum DISPID_IHTMLCONTROLRANGE_ADD = 0x000003eb;
enum DISPID_IHTMLCONTROLRANGE_REMOVE = 0x000003ec;
enum DISPID_IHTMLCONTROLRANGE_ITEM = 0x00000000;
enum DISPID_IHTMLCONTROLRANGE_SCROLLINTOVIEW = 0x000003ee;
enum DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDSUPPORTED = 0x000003ef;
enum DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDENABLED = 0x000003f0;
enum DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDSTATE = 0x000003f1;
enum DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDINDETERM = 0x000003f2;
enum DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDTEXT = 0x000003f3;
enum DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDVALUE = 0x000003f4;
enum DISPID_IHTMLCONTROLRANGE_EXECCOMMAND = 0x000003f5;
enum DISPID_IHTMLCONTROLRANGE_EXECCOMMANDSHOWHELP = 0x000003f6;
enum DISPID_IHTMLCONTROLRANGE_COMMONPARENTELEMENT = 0x000003f7;
enum DISPID_IHTMLCONTROLRANGE_LENGTH = 0x000003ed;
enum DISPID_IHTMLCONTROLRANGE2_ADDELEMENT = 0x000003f8;
enum DISPID_IHTMLIMGELEMENT_ISMAP = 0x000007d2;
enum DISPID_IHTMLIMGELEMENT_USEMAP = 0x000007d8;
enum DISPID_IHTMLIMGELEMENT_MIMETYPE = 0x000007da;
enum DISPID_IHTMLIMGELEMENT_FILESIZE = 0x000007db;
enum DISPID_IHTMLIMGELEMENT_FILECREATEDDATE = 0x000007dc;
enum DISPID_IHTMLIMGELEMENT_FILEMODIFIEDDATE = 0x000007dd;
enum DISPID_IHTMLIMGELEMENT_FILEUPDATEDDATE = 0x000007de;
enum DISPID_IHTMLIMGELEMENT_PROTOCOL = 0x000007df;
enum DISPID_IHTMLIMGELEMENT_HREF = 0x000007e0;
enum DISPID_IHTMLIMGELEMENT_NAMEPROP = 0x000007e1;
enum DISPID_IHTMLIMGELEMENT_BORDER = 0x000003ec;
enum DISPID_IHTMLIMGELEMENT_VSPACE = 0x000003ed;
enum DISPID_IHTMLIMGELEMENT_HSPACE = 0x000003ee;
enum DISPID_IHTMLIMGELEMENT_ALT = 0x000003ea;
enum DISPID_IHTMLIMGELEMENT_SRC = 0x000003eb;
enum DISPID_IHTMLIMGELEMENT_LOWSRC = 0x000003ef;
enum DISPID_IHTMLIMGELEMENT_VRML = 0x000003f0;
enum DISPID_IHTMLIMGELEMENT_DYNSRC = 0x000003f1;
enum DISPID_IHTMLIMGELEMENT_READYSTATE = 0x000113fc;
enum DISPID_IHTMLIMGELEMENT_COMPLETE = 0x000003f2;
enum DISPID_IHTMLIMGELEMENT_LOOP = 0x000003f3;
enum DISPID_IHTMLIMGELEMENT_ALIGN = 0x00010049;
enum DISPID_IHTMLIMGELEMENT_ONLOAD = 0x00011790;
enum DISPID_IHTMLIMGELEMENT_ONERROR = 0x0001178d;
enum DISPID_IHTMLIMGELEMENT_ONABORT = 0x0001178c;
enum DISPID_IHTMLIMGELEMENT_NAME = 0x00010000;
enum DISPID_IHTMLIMGELEMENT_WIDTH = 0x00010005;
enum DISPID_IHTMLIMGELEMENT_HEIGHT = 0x00010006;
enum DISPID_IHTMLIMGELEMENT_START = 0x000003f5;
enum DISPID_IHTMLIMGELEMENT2_LONGDESC = 0x000007e3;
enum DISPID_IHTMLIMGELEMENT3_IE8_LONGDESC = 0x0000047f;
enum DISPID_IHTMLIMGELEMENT3_IE8_VRML = 0x00000480;
enum DISPID_IHTMLIMGELEMENT3_IE8_LOWSRC = 0x00000481;
enum DISPID_IHTMLIMGELEMENT3_IE8_DYNSRC = 0x00000482;
enum DISPID_IHTMLIMGELEMENT4_NATURALWIDTH = 0x00000483;
enum DISPID_IHTMLIMGELEMENT4_NATURALHEIGHT = 0x00000484;
enum DISPID_IHTMLMSIMGELEMENT_MSPLAYTODISABLED = 0x00000485;
enum DISPID_IHTMLMSIMGELEMENT_MSPLAYTOPRIMARY = 0x00000486;
enum DISPID_IHTMLIMAGEELEMENTFACTORY_CREATE = 0x00000000;
enum DISPID_HTMLIMGEVENTS2_ONLOAD = 0x000003eb;
enum DISPID_HTMLIMGEVENTS2_ONERROR = 0x000003ea;
enum DISPID_HTMLIMGEVENTS2_ONABORT = 0x000003e8;
enum DISPID_HTMLIMGEVENTS_ONLOAD = 0x000003eb;
enum DISPID_HTMLIMGEVENTS_ONERROR = 0x000003ea;
enum DISPID_HTMLIMGEVENTS_ONABORT = 0x000003e8;
enum DISPID_IHTMLBODYELEMENT_BACKGROUND = 0x00011389;
enum DISPID_IHTMLBODYELEMENT_BGPROPERTIES = 0x000113b5;
enum DISPID_IHTMLBODYELEMENT_LEFTMARGIN = 0x000113b0;
enum DISPID_IHTMLBODYELEMENT_TOPMARGIN = 0x000113ad;
enum DISPID_IHTMLBODYELEMENT_RIGHTMARGIN = 0x000113ae;
enum DISPID_IHTMLBODYELEMENT_BOTTOMMARGIN = 0x000113af;
enum DISPID_IHTMLBODYELEMENT_NOWRAP = 0x0001138d;
enum DISPID_IHTMLBODYELEMENT_BGCOLOR = 0xfffffffffffffe0b;
enum DISPID_IHTMLBODYELEMENT_TEXT = 0x0001138a;
enum DISPID_IHTMLBODYELEMENT_LINK = 0x000007da;
enum DISPID_IHTMLBODYELEMENT_VLINK = 0x000007dc;
enum DISPID_IHTMLBODYELEMENT_ALINK = 0x000007db;
enum DISPID_IHTMLBODYELEMENT_ONLOAD = 0x00011790;
enum DISPID_IHTMLBODYELEMENT_ONUNLOAD = 0x00011791;
enum DISPID_IHTMLBODYELEMENT_SCROLL = 0x000113d7;
enum DISPID_IHTMLBODYELEMENT_ONSELECT = 0x0001177a;
enum DISPID_IHTMLBODYELEMENT_ONBEFOREUNLOAD = 0x00011797;
enum DISPID_IHTMLBODYELEMENT_CREATETEXTRANGE = 0x000007dd;
enum DISPID_IHTMLBODYELEMENT2_ONBEFOREPRINT = 0x000117b2;
enum DISPID_IHTMLBODYELEMENT2_ONAFTERPRINT = 0x000117b3;
enum DISPID_IHTMLBODYELEMENT3_IE8_BACKGROUND = 0x0000047e;
enum DISPID_IHTMLBODYELEMENT3_ONONLINE = 0x000117db;
enum DISPID_IHTMLBODYELEMENT3_ONOFFLINE = 0x000117dc;
enum DISPID_IHTMLBODYELEMENT3_ONHASHCHANGE = 0x000117dd;
enum DISPID_IHTMLBODYELEMENT4_ONMESSAGE = 0x000117de;
enum DISPID_IHTMLBODYELEMENT4_ONSTORAGE = 0x000117d4;
enum DISPID_IHTMLBODYELEMENT5_ONPOPSTATE = 0x00011830;
enum DISPID_IHTMLFONTELEMENT_COLOR = 0x0001138a;
enum DISPID_IHTMLFONTELEMENT_FACE = 0x0001139a;
enum DISPID_IHTMLFONTELEMENT_SIZE = 0x0001139b;
enum DISPID_IHTMLANCHORELEMENT_HREF = 0x00000000;
enum DISPID_IHTMLANCHORELEMENT_TARGET = 0x000003eb;
enum DISPID_IHTMLANCHORELEMENT_REL = 0x000003ed;
enum DISPID_IHTMLANCHORELEMENT_REV = 0x000003ee;
enum DISPID_IHTMLANCHORELEMENT_URN = 0x000003ef;
enum DISPID_IHTMLANCHORELEMENT_METHODS = 0x000003f0;
enum DISPID_IHTMLANCHORELEMENT_NAME = 0x00010000;
enum DISPID_IHTMLANCHORELEMENT_HOST = 0x000003f4;
enum DISPID_IHTMLANCHORELEMENT_HOSTNAME = 0x000003f5;
enum DISPID_IHTMLANCHORELEMENT_PATHNAME = 0x000003f6;
enum DISPID_IHTMLANCHORELEMENT_PORT = 0x000003f7;
enum DISPID_IHTMLANCHORELEMENT_PROTOCOL = 0x000003f8;
enum DISPID_IHTMLANCHORELEMENT_SEARCH = 0x000003f9;
enum DISPID_IHTMLANCHORELEMENT_HASH = 0x000003fa;
enum DISPID_IHTMLANCHORELEMENT_ONBLUR = 0x0001177f;
enum DISPID_IHTMLANCHORELEMENT_ONFOCUS = 0x0001177e;
enum DISPID_IHTMLANCHORELEMENT_ACCESSKEY = 0x000107d5;
enum DISPID_IHTMLANCHORELEMENT_PROTOCOLLONG = 0x00000407;
enum DISPID_IHTMLANCHORELEMENT_MIMETYPE = 0x00000406;
enum DISPID_IHTMLANCHORELEMENT_NAMEPROP = 0x00000408;
enum DISPID_IHTMLANCHORELEMENT_TABINDEX = 0x0001000f;
enum DISPID_IHTMLANCHORELEMENT_FOCUS = 0x000107d0;
enum DISPID_IHTMLANCHORELEMENT_BLUR = 0x000107d2;
enum DISPID_IHTMLANCHORELEMENT2_CHARSET = 0x000003ff;
enum DISPID_IHTMLANCHORELEMENT2_COORDS = 0x00000400;
enum DISPID_IHTMLANCHORELEMENT2_HREFLANG = 0x00000401;
enum DISPID_IHTMLANCHORELEMENT2_SHAPE = 0x00000402;
enum DISPID_IHTMLANCHORELEMENT2_TYPE = 0x00000403;
enum DISPID_IHTMLANCHORELEMENT3_IE8_SHAPE = 0x0000047f;
enum DISPID_IHTMLANCHORELEMENT3_IE8_COORDS = 0x00000480;
enum DISPID_IHTMLANCHORELEMENT3_IE8_HREF = 0x00000481;
enum DISPID_IHTMLLABELELEMENT_HTMLFOR = 0x000003e8;
enum DISPID_IHTMLLABELELEMENT_ACCESSKEY = 0x000107d5;
enum DISPID_IHTMLLABELELEMENT2_FORM = 0x000003ea;
enum DISPID_IHTMLLISTELEMENT2_COMPACT = 0x000003e9;
enum DISPID_IHTMLULISTELEMENT_COMPACT = 0x000003e9;
enum DISPID_IHTMLULISTELEMENT_TYPE = 0x00011399;
enum DISPID_IHTMLOLISTELEMENT_COMPACT = 0x000003e9;
enum DISPID_IHTMLOLISTELEMENT_START = 0x000003eb;
enum DISPID_IHTMLOLISTELEMENT_TYPE = 0x00011399;
enum DISPID_IHTMLLIELEMENT_TYPE = 0x00011399;
enum DISPID_IHTMLLIELEMENT_VALUE = 0x000003e9;
enum DISPID_IHTMLBLOCKELEMENT_CLEAR = 0x00011398;
enum DISPID_IHTMLBLOCKELEMENT2_CITE = 0x000003e9;
enum DISPID_IHTMLBLOCKELEMENT2_WIDTH = 0x000003ea;
enum DISPID_IHTMLBLOCKELEMENT3_IE8_CITE = 0x0000047e;
enum DISPID_IHTMLDIVELEMENT_ALIGN = 0x00010048;
enum DISPID_IHTMLDIVELEMENT_NOWRAP = 0x0001138d;
enum DISPID_IHTMLDDELEMENT_NOWRAP = 0x0001138d;
enum DISPID_IHTMLDTELEMENT_NOWRAP = 0x0001138d;
enum DISPID_IHTMLBRELEMENT_CLEAR = 0x00011398;
enum DISPID_IHTMLDLISTELEMENT_COMPACT = 0x000003e9;
enum DISPID_IHTMLHRELEMENT_ALIGN = 0x00010048;
enum DISPID_IHTMLHRELEMENT_COLOR = 0x0001138a;
enum DISPID_IHTMLHRELEMENT_NOSHADE = 0x000003e9;
enum DISPID_IHTMLHRELEMENT_WIDTH = 0x00010005;
enum DISPID_IHTMLHRELEMENT_SIZE = 0x00010006;
enum DISPID_IHTMLPARAELEMENT_ALIGN = 0x00010048;
enum DISPID_IHTMLELEMENTCOLLECTION_TOSTRING = 0x000005dd;
enum DISPID_IHTMLELEMENTCOLLECTION_LENGTH = 0x000005dc;
enum DISPID_IHTMLELEMENTCOLLECTION__NEWENUM = 0xfffffffffffffffc;
enum DISPID_IHTMLELEMENTCOLLECTION_ITEM = 0x00000000;
enum DISPID_IHTMLELEMENTCOLLECTION_TAGS = 0x000005de;
enum DISPID_IHTMLELEMENTCOLLECTION2_URNS = 0x000005e1;
enum DISPID_IHTMLELEMENTCOLLECTION3_NAMEDITEM = 0x000005e2;
enum DISPID_IHTMLELEMENTCOLLECTION4_IE8_LENGTH = 0x0000047e;
enum DISPID_IHTMLELEMENTCOLLECTION4_IE8_ITEM = 0x00000480;
enum DISPID_IHTMLELEMENTCOLLECTION4_IE8_NAMEDITEM = 0x00000481;
enum DISPID_IHTMLHEADERELEMENT_ALIGN = 0x00010048;
enum DISPID_IHTMLSELECTELEMENT_SIZE = 0x000003ea;
enum DISPID_IHTMLSELECTELEMENT_MULTIPLE = 0x000003eb;
enum DISPID_IHTMLSELECTELEMENT_NAME = 0x00010000;
enum DISPID_IHTMLSELECTELEMENT_OPTIONS = 0x000003ed;
enum DISPID_IHTMLSELECTELEMENT_ONCHANGE = 0x0001178e;
enum DISPID_IHTMLSELECTELEMENT_SELECTEDINDEX = 0x000003f2;
enum DISPID_IHTMLSELECTELEMENT_TYPE = 0x000003f4;
enum DISPID_IHTMLSELECTELEMENT_VALUE = 0x000003f3;
enum DISPID_IHTMLSELECTELEMENT_DISABLED = 0x0001004c;
enum DISPID_IHTMLSELECTELEMENT_FORM = 0x000107d4;
enum DISPID_IHTMLSELECTELEMENT_ADD = 0x000005df;
enum DISPID_IHTMLSELECTELEMENT_REMOVE = 0x000005e0;
enum DISPID_IHTMLSELECTELEMENT_LENGTH = 0x000005dc;
enum DISPID_IHTMLSELECTELEMENT__NEWENUM = 0xfffffffffffffffc;
enum DISPID_IHTMLSELECTELEMENT_ITEM = 0x00000000;
enum DISPID_IHTMLSELECTELEMENT_TAGS = 0x000005de;
enum DISPID_IHTMLSELECTELEMENT2_URNS = 0x000005e1;
enum DISPID_IHTMLSELECTELEMENT4_NAMEDITEM = 0x000005e2;
enum DISPID_IHTMLSELECTELEMENT5_IE8_ADD = 0x0000047e;
enum DISPID_IHTMLSELECTELEMENT6_IE9_ADD = 0x0000047f;
enum DISPID_IHTMLSELECTELEMENT6_IE9_VALUE = 0x00000480;
enum DISPID_HTMLSELECTELEMENTEVENTS2_ONCHANGE = 0x000003e9;
enum DISPID_HTMLSELECTELEMENTEVENTS_ONCHANGE = 0x000003e9;
enum DISPID_IHTMLSELECTIONOBJECT_CREATERANGE = 0x000003e9;
enum DISPID_IHTMLSELECTIONOBJECT_EMPTY = 0x000003ea;
enum DISPID_IHTMLSELECTIONOBJECT_CLEAR = 0x000003eb;
enum DISPID_IHTMLSELECTIONOBJECT_TYPE = 0x000003ec;
enum DISPID_IHTMLSELECTIONOBJECT2_CREATERANGECOLLECTION = 0x000003ed;
enum DISPID_IHTMLSELECTIONOBJECT2_TYPEDETAIL = 0x000003ee;
enum DISPID_IHTMLSELECTION_ANCHORNODE = 0x000003e9;
enum DISPID_IHTMLSELECTION_ANCHOROFFSET = 0x000003ea;
enum DISPID_IHTMLSELECTION_FOCUSNODE = 0x000003eb;
enum DISPID_IHTMLSELECTION_FOCUSOFFSET = 0x000003ec;
enum DISPID_IHTMLSELECTION_ISCOLLAPSED = 0x000003ed;
enum DISPID_IHTMLSELECTION_COLLAPSE = 0x000003ee;
enum DISPID_IHTMLSELECTION_COLLAPSETOSTART = 0x000003ef;
enum DISPID_IHTMLSELECTION_COLLAPSETOEND = 0x000003f0;
enum DISPID_IHTMLSELECTION_SELECTALLCHILDREN = 0x000003f1;
enum DISPID_IHTMLSELECTION_DELETEFROMDOCUMENT = 0x000003f2;
enum DISPID_IHTMLSELECTION_RANGECOUNT = 0x000003f3;
enum DISPID_IHTMLSELECTION_GETRANGEAT = 0x000003f4;
enum DISPID_IHTMLSELECTION_ADDRANGE = 0x000003f5;
enum DISPID_IHTMLSELECTION_REMOVERANGE = 0x000003f6;
enum DISPID_IHTMLSELECTION_REMOVEALLRANGES = 0x000003f7;
enum DISPID_IHTMLSELECTION_TOSTRING = 0x000003f8;
enum DISPID_IHTMLOPTIONELEMENT_SELECTED = 0x000003e9;
enum DISPID_IHTMLOPTIONELEMENT_VALUE = 0x000003ea;
enum DISPID_IHTMLOPTIONELEMENT_DEFAULTSELECTED = 0x000003eb;
enum DISPID_IHTMLOPTIONELEMENT_INDEX = 0x000003ed;
enum DISPID_IHTMLOPTIONELEMENT_TEXT = 0x000003ec;
enum DISPID_IHTMLOPTIONELEMENT_FORM = 0x000003ee;
enum DISPID_IHTMLOPTIONELEMENT3_LABEL = 0x000003ef;
enum DISPID_IHTMLOPTIONELEMENT4_IE9_VALUE = 0x000003f0;
enum DISPID_IHTMLOPTIONELEMENTFACTORY_CREATE = 0x00000000;
enum DISPID_IHTMLINPUTELEMENT_TYPE = 0x000007d0;
enum DISPID_IHTMLINPUTELEMENT_VALUE = 0x000113ed;
enum DISPID_IHTMLINPUTELEMENT_NAME = 0x00010000;
enum DISPID_IHTMLINPUTELEMENT_STATUS = 0x000007d1;
enum DISPID_IHTMLINPUTELEMENT_DISABLED = 0x0001004c;
enum DISPID_IHTMLINPUTELEMENT_FORM = 0x000107d4;
enum DISPID_IHTMLINPUTELEMENT_SIZE = 0x000007d2;
enum DISPID_IHTMLINPUTELEMENT_MAXLENGTH = 0x000007d3;
enum DISPID_IHTMLINPUTELEMENT_SELECT = 0x000007d4;
enum DISPID_IHTMLINPUTELEMENT_ONCHANGE = 0x0001178e;
enum DISPID_IHTMLINPUTELEMENT_ONSELECT = 0x0001177a;
enum DISPID_IHTMLINPUTELEMENT_DEFAULTVALUE = 0x000113db;
enum DISPID_IHTMLINPUTELEMENT_READONLY = 0x000007d5;
enum DISPID_IHTMLINPUTELEMENT_CREATETEXTRANGE = 0x000007d6;
enum DISPID_IHTMLINPUTELEMENT_INDETERMINATE = 0x000007d7;
enum DISPID_IHTMLINPUTELEMENT_DEFAULTCHECKED = 0x000007d8;
enum DISPID_IHTMLINPUTELEMENT_CHECKED = 0x000007d9;
enum DISPID_IHTMLINPUTELEMENT_BORDER = 0x000007dc;
enum DISPID_IHTMLINPUTELEMENT_VSPACE = 0x000007dd;
enum DISPID_IHTMLINPUTELEMENT_HSPACE = 0x000007de;
enum DISPID_IHTMLINPUTELEMENT_ALT = 0x000007da;
enum DISPID_IHTMLINPUTELEMENT_SRC = 0x000007db;
enum DISPID_IHTMLINPUTELEMENT_LOWSRC = 0x000007df;
enum DISPID_IHTMLINPUTELEMENT_VRML = 0x000007e0;
enum DISPID_IHTMLINPUTELEMENT_DYNSRC = 0x000007e1;
enum DISPID_IHTMLINPUTELEMENT_READYSTATE = 0x000113fc;
enum DISPID_IHTMLINPUTELEMENT_COMPLETE = 0x000007e2;
enum DISPID_IHTMLINPUTELEMENT_LOOP = 0x000007e3;
enum DISPID_IHTMLINPUTELEMENT_ALIGN = 0x00010049;
enum DISPID_IHTMLINPUTELEMENT_ONLOAD = 0x00011790;
enum DISPID_IHTMLINPUTELEMENT_ONERROR = 0x0001178d;
enum DISPID_IHTMLINPUTELEMENT_ONABORT = 0x0001178c;
enum DISPID_IHTMLINPUTELEMENT_WIDTH = 0x00010005;
enum DISPID_IHTMLINPUTELEMENT_HEIGHT = 0x00010006;
enum DISPID_IHTMLINPUTELEMENT_START = 0x000007e4;
enum DISPID_IHTMLINPUTELEMENT2_ACCEPT = 0x000007e6;
enum DISPID_IHTMLINPUTELEMENT2_USEMAP = 0x000007e7;
enum DISPID_IHTMLINPUTELEMENT3_IE8_SRC = 0x0000047e;
enum DISPID_IHTMLINPUTELEMENT3_IE8_LOWSRC = 0x0000047f;
enum DISPID_IHTMLINPUTELEMENT3_IE8_VRML = 0x00000480;
enum DISPID_IHTMLINPUTELEMENT3_IE8_DYNSRC = 0x00000481;
enum DISPID_IHTMLINPUTBUTTONELEMENT_TYPE = 0x000007d0;
enum DISPID_IHTMLINPUTBUTTONELEMENT_VALUE = 0x000113ed;
enum DISPID_IHTMLINPUTBUTTONELEMENT_NAME = 0x00010000;
enum DISPID_IHTMLINPUTBUTTONELEMENT_STATUS = 0x000007e5;
enum DISPID_IHTMLINPUTBUTTONELEMENT_DISABLED = 0x0001004c;
enum DISPID_IHTMLINPUTBUTTONELEMENT_FORM = 0x000107d4;
enum DISPID_IHTMLINPUTBUTTONELEMENT_CREATETEXTRANGE = 0x000007d6;
enum DISPID_IHTMLINPUTHIDDENELEMENT_TYPE = 0x000007d0;
enum DISPID_IHTMLINPUTHIDDENELEMENT_VALUE = 0x000113ed;
enum DISPID_IHTMLINPUTHIDDENELEMENT_NAME = 0x00010000;
enum DISPID_IHTMLINPUTHIDDENELEMENT_STATUS = 0x000007e5;
enum DISPID_IHTMLINPUTHIDDENELEMENT_DISABLED = 0x0001004c;
enum DISPID_IHTMLINPUTHIDDENELEMENT_FORM = 0x000107d4;
enum DISPID_IHTMLINPUTHIDDENELEMENT_CREATETEXTRANGE = 0x000007d6;
enum DISPID_IHTMLINPUTTEXTELEMENT_TYPE = 0x000007d0;
enum DISPID_IHTMLINPUTTEXTELEMENT_VALUE = 0x000113ed;
enum DISPID_IHTMLINPUTTEXTELEMENT_NAME = 0x00010000;
enum DISPID_IHTMLINPUTTEXTELEMENT_STATUS = 0x000007e5;
enum DISPID_IHTMLINPUTTEXTELEMENT_DISABLED = 0x0001004c;
enum DISPID_IHTMLINPUTTEXTELEMENT_FORM = 0x000107d4;
enum DISPID_IHTMLINPUTTEXTELEMENT_DEFAULTVALUE = 0x000113db;
enum DISPID_IHTMLINPUTTEXTELEMENT_SIZE = 0x000007d2;
enum DISPID_IHTMLINPUTTEXTELEMENT_MAXLENGTH = 0x000007d3;
enum DISPID_IHTMLINPUTTEXTELEMENT_SELECT = 0x000007d4;
enum DISPID_IHTMLINPUTTEXTELEMENT_ONCHANGE = 0x0001178e;
enum DISPID_IHTMLINPUTTEXTELEMENT_ONSELECT = 0x0001177a;
enum DISPID_IHTMLINPUTTEXTELEMENT_READONLY = 0x000007d5;
enum DISPID_IHTMLINPUTTEXTELEMENT_CREATETEXTRANGE = 0x000007d6;
enum DISPID_IHTMLINPUTTEXTELEMENT2_SELECTIONSTART = 0x000007e9;
enum DISPID_IHTMLINPUTTEXTELEMENT2_SELECTIONEND = 0x000007ea;
enum DISPID_IHTMLINPUTTEXTELEMENT2_SETSELECTIONRANGE = 0x000007eb;
enum DISPID_IHTMLINPUTFILEELEMENT_TYPE = 0x000007d0;
enum DISPID_IHTMLINPUTFILEELEMENT_NAME = 0x00010000;
enum DISPID_IHTMLINPUTFILEELEMENT_STATUS = 0x000007e5;
enum DISPID_IHTMLINPUTFILEELEMENT_DISABLED = 0x0001004c;
enum DISPID_IHTMLINPUTFILEELEMENT_FORM = 0x000107d4;
enum DISPID_IHTMLINPUTFILEELEMENT_SIZE = 0x000007d2;
enum DISPID_IHTMLINPUTFILEELEMENT_MAXLENGTH = 0x000007d3;
enum DISPID_IHTMLINPUTFILEELEMENT_SELECT = 0x000007d4;
enum DISPID_IHTMLINPUTFILEELEMENT_ONCHANGE = 0x0001178e;
enum DISPID_IHTMLINPUTFILEELEMENT_ONSELECT = 0x0001177a;
enum DISPID_IHTMLINPUTFILEELEMENT_VALUE = 0x000113ed;
enum DISPID_IHTMLOPTIONBUTTONELEMENT_VALUE = 0x000113ed;
enum DISPID_IHTMLOPTIONBUTTONELEMENT_TYPE = 0x000007d0;
enum DISPID_IHTMLOPTIONBUTTONELEMENT_NAME = 0x00010000;
enum DISPID_IHTMLOPTIONBUTTONELEMENT_CHECKED = 0x000007d9;
enum DISPID_IHTMLOPTIONBUTTONELEMENT_DEFAULTCHECKED = 0x000007d8;
enum DISPID_IHTMLOPTIONBUTTONELEMENT_ONCHANGE = 0x0001178e;
enum DISPID_IHTMLOPTIONBUTTONELEMENT_DISABLED = 0x0001004c;
enum DISPID_IHTMLOPTIONBUTTONELEMENT_STATUS = 0x000007d1;
enum DISPID_IHTMLOPTIONBUTTONELEMENT_INDETERMINATE = 0x000007d7;
enum DISPID_IHTMLOPTIONBUTTONELEMENT_FORM = 0x000107d4;
enum DISPID_IHTMLINPUTIMAGE_TYPE = 0x000007d0;
enum DISPID_IHTMLINPUTIMAGE_DISABLED = 0x0001004c;
enum DISPID_IHTMLINPUTIMAGE_BORDER = 0x000007dc;
enum DISPID_IHTMLINPUTIMAGE_VSPACE = 0x000007dd;
enum DISPID_IHTMLINPUTIMAGE_HSPACE = 0x000007de;
enum DISPID_IHTMLINPUTIMAGE_ALT = 0x000007da;
enum DISPID_IHTMLINPUTIMAGE_SRC = 0x000007db;
enum DISPID_IHTMLINPUTIMAGE_LOWSRC = 0x000007df;
enum DISPID_IHTMLINPUTIMAGE_VRML = 0x000007e0;
enum DISPID_IHTMLINPUTIMAGE_DYNSRC = 0x000007e1;
enum DISPID_IHTMLINPUTIMAGE_READYSTATE = 0x000113fc;
enum DISPID_IHTMLINPUTIMAGE_COMPLETE = 0x000007e2;
enum DISPID_IHTMLINPUTIMAGE_LOOP = 0x000007e3;
enum DISPID_IHTMLINPUTIMAGE_ALIGN = 0x00010049;
enum DISPID_IHTMLINPUTIMAGE_ONLOAD = 0x00011790;
enum DISPID_IHTMLINPUTIMAGE_ONERROR = 0x0001178d;
enum DISPID_IHTMLINPUTIMAGE_ONABORT = 0x0001178c;
enum DISPID_IHTMLINPUTIMAGE_NAME = 0x00010000;
enum DISPID_IHTMLINPUTIMAGE_WIDTH = 0x00010005;
enum DISPID_IHTMLINPUTIMAGE_HEIGHT = 0x00010006;
enum DISPID_IHTMLINPUTIMAGE_START = 0x000007e4;
enum DISPID_IHTMLINPUTRANGEELEMENT_DISABLED = 0x0001004c;
enum DISPID_IHTMLINPUTRANGEELEMENT_TYPE = 0x000007d0;
enum DISPID_IHTMLINPUTRANGEELEMENT_ALT = 0x000007da;
enum DISPID_IHTMLINPUTRANGEELEMENT_NAME = 0x00010000;
enum DISPID_IHTMLINPUTRANGEELEMENT_VALUE = 0x000113ed;
enum DISPID_IHTMLINPUTRANGEELEMENT_MIN = 0x000007ec;
enum DISPID_IHTMLINPUTRANGEELEMENT_MAX = 0x000007ed;
enum DISPID_IHTMLINPUTRANGEELEMENT_STEP = 0x000007ee;
enum DISPID_IHTMLINPUTRANGEELEMENT_VALUEASNUMBER = 0x000007ef;
enum DISPID_IHTMLINPUTRANGEELEMENT_STEPUP = 0x000007f1;
enum DISPID_IHTMLINPUTRANGEELEMENT_STEPDOWN = 0x000007f0;
enum DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONCHANGE = 0x000003e9;
enum DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONSELECT = 0x000003ee;
enum DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONLOAD = 0x000003eb;
enum DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONERROR = 0x000003ea;
enum DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONABORT = 0x000003e8;
enum DISPID_HTMLINPUTIMAGEEVENTS2_ONLOAD = 0x000003eb;
enum DISPID_HTMLINPUTIMAGEEVENTS2_ONERROR = 0x000003ea;
enum DISPID_HTMLINPUTIMAGEEVENTS2_ONABORT = 0x000003e8;
enum DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONCHANGE = 0x000003e9;
enum DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONSELECT = 0x000003ee;
enum DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONLOAD = 0x000003eb;
enum DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONERROR = 0x000003ea;
enum DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONABORT = 0x000003e8;
enum DISPID_HTMLINPUTIMAGEEVENTS_ONLOAD = 0x000003eb;
enum DISPID_HTMLINPUTIMAGEEVENTS_ONERROR = 0x000003ea;
enum DISPID_HTMLINPUTIMAGEEVENTS_ONABORT = 0x000003e8;
enum DISPID_IHTMLTEXTAREAELEMENT_TYPE = 0x000007d0;
enum DISPID_IHTMLTEXTAREAELEMENT_VALUE = 0x000113ed;
enum DISPID_IHTMLTEXTAREAELEMENT_NAME = 0x00010000;
enum DISPID_IHTMLTEXTAREAELEMENT_STATUS = 0x000007d1;
enum DISPID_IHTMLTEXTAREAELEMENT_DISABLED = 0x0001004c;
enum DISPID_IHTMLTEXTAREAELEMENT_FORM = 0x000107d4;
enum DISPID_IHTMLTEXTAREAELEMENT_DEFAULTVALUE = 0x000113db;
enum DISPID_IHTMLTEXTAREAELEMENT_SELECT = 0x00001b5d;
enum DISPID_IHTMLTEXTAREAELEMENT_ONCHANGE = 0x0001178e;
enum DISPID_IHTMLTEXTAREAELEMENT_ONSELECT = 0x0001177a;
enum DISPID_IHTMLTEXTAREAELEMENT_READONLY = 0x00001b5c;
enum DISPID_IHTMLTEXTAREAELEMENT_ROWS = 0x00001b59;
enum DISPID_IHTMLTEXTAREAELEMENT_COLS = 0x00001b5a;
enum DISPID_IHTMLTEXTAREAELEMENT_WRAP = 0x00001b5b;
enum DISPID_IHTMLTEXTAREAELEMENT_CREATETEXTRANGE = 0x00001b5e;
enum DISPID_IHTMLTEXTAREAELEMENT2_SELECTIONSTART = 0x00001b5f;
enum DISPID_IHTMLTEXTAREAELEMENT2_SELECTIONEND = 0x00001b60;
enum DISPID_IHTMLTEXTAREAELEMENT2_SETSELECTIONRANGE = 0x00001b61;
enum DISPID_IHTMLBUTTONELEMENT_TYPE = 0x000007d0;
enum DISPID_IHTMLBUTTONELEMENT_VALUE = 0x000113ed;
enum DISPID_IHTMLBUTTONELEMENT_NAME = 0x00010000;
enum DISPID_IHTMLBUTTONELEMENT_STATUS = 0x00001f41;
enum DISPID_IHTMLBUTTONELEMENT_DISABLED = 0x0001004c;
enum DISPID_IHTMLBUTTONELEMENT_FORM = 0x000107d4;
enum DISPID_IHTMLBUTTONELEMENT_CREATETEXTRANGE = 0x00001f42;
enum DISPID_IHTMLBUTTONELEMENT2_IE9_TYPE = 0x00001f43;
enum DISPID_IHTMLMARQUEEELEMENT_BGCOLOR = 0xfffffffffffffe0b;
enum DISPID_IHTMLMARQUEEELEMENT_SCROLLDELAY = 0x00001770;
enum DISPID_IHTMLMARQUEEELEMENT_DIRECTION = 0x00001771;
enum DISPID_IHTMLMARQUEEELEMENT_BEHAVIOR = 0x00001772;
enum DISPID_IHTMLMARQUEEELEMENT_SCROLLAMOUNT = 0x00001773;
enum DISPID_IHTMLMARQUEEELEMENT_LOOP = 0x00001774;
enum DISPID_IHTMLMARQUEEELEMENT_VSPACE = 0x00001775;
enum DISPID_IHTMLMARQUEEELEMENT_HSPACE = 0x00001776;
enum DISPID_IHTMLMARQUEEELEMENT_ONFINISH = 0x0001178a;
enum DISPID_IHTMLMARQUEEELEMENT_ONSTART = 0x0001178b;
enum DISPID_IHTMLMARQUEEELEMENT_ONBOUNCE = 0x00011784;
enum DISPID_IHTMLMARQUEEELEMENT_WIDTH = 0x00010005;
enum DISPID_IHTMLMARQUEEELEMENT_HEIGHT = 0x00010006;
enum DISPID_IHTMLMARQUEEELEMENT_TRUESPEED = 0x00001777;
enum DISPID_IHTMLMARQUEEELEMENT_START = 0x0000177a;
enum DISPID_IHTMLMARQUEEELEMENT_STOP = 0x0000177b;
enum DISPID_HTMLMARQUEEELEMENTEVENTS2_ONBOUNCE = 0x000003f1;
enum DISPID_HTMLMARQUEEELEMENTEVENTS2_ONFINISH = 0x000003f2;
enum DISPID_HTMLMARQUEEELEMENTEVENTS2_ONSTART = 0x000003f3;
enum DISPID_HTMLMARQUEEELEMENTEVENTS_ONBOUNCE = 0x000003f1;
enum DISPID_HTMLMARQUEEELEMENTEVENTS_ONFINISH = 0x000003f2;
enum DISPID_HTMLMARQUEEELEMENTEVENTS_ONSTART = 0x000003f3;
enum DISPID_IHTMLHTMLELEMENT_VERSION = 0x000003e9;
enum DISPID_IHTMLHEADELEMENT_PROFILE = 0x000003e9;
enum DISPID_IHTMLHEADELEMENT2_IE8_PROFILE = 0x0000047e;
enum DISPID_IHTMLTITLEELEMENT_TEXT = 0x000113ed;
enum DISPID_IHTMLMETAELEMENT_HTTPEQUIV = 0x000003e9;
enum DISPID_IHTMLMETAELEMENT_CONTENT = 0x000003ea;
enum DISPID_IHTMLMETAELEMENT_NAME = 0x00010000;
enum DISPID_IHTMLMETAELEMENT_URL = 0x000003eb;
enum DISPID_IHTMLMETAELEMENT_CHARSET = 0x000003f5;
enum DISPID_IHTMLMETAELEMENT2_SCHEME = 0x000003fc;
enum DISPID_IHTMLMETAELEMENT3_IE8_URL = 0x0000047e;
enum DISPID_IHTMLBASEELEMENT_HREF = 0x000003eb;
enum DISPID_IHTMLBASEELEMENT_TARGET = 0x000003ec;
enum DISPID_IHTMLBASEELEMENT2_IE8_HREF = 0x0000047e;
enum DISPID_IHTMLISINDEXELEMENT_PROMPT = 0x000003f2;
enum DISPID_IHTMLISINDEXELEMENT_ACTION = 0x000003f3;
enum DISPID_IHTMLISINDEXELEMENT2_FORM = 0x000003f4;
enum DISPID_IHTMLNEXTIDELEMENT_N = 0x000003f4;
enum DISPID_IHTMLBASEFONTELEMENT_COLOR = 0x0001138a;
enum DISPID_IHTMLBASEFONTELEMENT_FACE = 0x0001139a;
enum DISPID_IHTMLBASEFONTELEMENT_SIZE = 0x000113a2;
enum DISPID_IOMHISTORY_LENGTH = 0x00000001;
enum DISPID_IOMHISTORY_BACK = 0x00000002;
enum DISPID_IOMHISTORY_FORWARD = 0x00000003;
enum DISPID_IOMHISTORY_GO = 0x00000004;
enum DISPID_IHTMLOPSPROFILE_ADDREQUEST = 0x00000001;
enum DISPID_IHTMLOPSPROFILE_CLEARREQUEST = 0x00000002;
enum DISPID_IHTMLOPSPROFILE_DOREQUEST = 0x00000003;
enum DISPID_IHTMLOPSPROFILE_GETATTRIBUTE = 0x00000004;
enum DISPID_IHTMLOPSPROFILE_SETATTRIBUTE = 0x00000005;
enum DISPID_IHTMLOPSPROFILE_COMMITCHANGES = 0x00000006;
enum DISPID_IHTMLOPSPROFILE_ADDREADREQUEST = 0x00000007;
enum DISPID_IHTMLOPSPROFILE_DOREADREQUEST = 0x00000008;
enum DISPID_IHTMLOPSPROFILE_DOWRITEREQUEST = 0x00000009;
enum DISPID_IOMNAVIGATOR_APPCODENAME = 0x00000001;
enum DISPID_IOMNAVIGATOR_APPNAME = 0x00000002;
enum DISPID_IOMNAVIGATOR_APPVERSION = 0x00000003;
enum DISPID_IOMNAVIGATOR_USERAGENT = 0x00000004;
enum DISPID_IOMNAVIGATOR_JAVAENABLED = 0x00000005;
enum DISPID_IOMNAVIGATOR_TAINTENABLED = 0x00000006;
enum DISPID_IOMNAVIGATOR_MIMETYPES = 0x00000007;
enum DISPID_IOMNAVIGATOR_PLUGINS = 0x00000008;
enum DISPID_IOMNAVIGATOR_COOKIEENABLED = 0x00000009;
enum DISPID_IOMNAVIGATOR_OPSPROFILE = 0x0000000a;
enum DISPID_IOMNAVIGATOR_TOSTRING = 0x0000000b;
enum DISPID_IOMNAVIGATOR_CPUCLASS = 0x0000000c;
enum DISPID_IOMNAVIGATOR_SYSTEMLANGUAGE = 0x0000000d;
enum DISPID_IOMNAVIGATOR_BROWSERLANGUAGE = 0x0000000e;
enum DISPID_IOMNAVIGATOR_USERLANGUAGE = 0x0000000f;
enum DISPID_IOMNAVIGATOR_PLATFORM = 0x00000010;
enum DISPID_IOMNAVIGATOR_APPMINORVERSION = 0x00000011;
enum DISPID_IOMNAVIGATOR_CONNECTIONSPEED = 0x00000012;
enum DISPID_IOMNAVIGATOR_ONLINE = 0x00000013;
enum DISPID_IOMNAVIGATOR_USERPROFILE = 0x00000014;
enum DISPID_INAVIGATORGEOLOCATION_GEOLOCATION = 0x00000015;
enum DISPID_INAVIGATORDONOTTRACK_MSDONOTTRACK = 0x00000016;
enum DISPID_IHTMLLOCATION_HREF = 0x00000000;
enum DISPID_IHTMLLOCATION_PROTOCOL = 0x00000001;
enum DISPID_IHTMLLOCATION_HOST = 0x00000002;
enum DISPID_IHTMLLOCATION_HOSTNAME = 0x00000003;
enum DISPID_IHTMLLOCATION_PORT = 0x00000004;
enum DISPID_IHTMLLOCATION_PATHNAME = 0x00000005;
enum DISPID_IHTMLLOCATION_SEARCH = 0x00000006;
enum DISPID_IHTMLLOCATION_HASH = 0x00000007;
enum DISPID_IHTMLLOCATION_RELOAD = 0x00000008;
enum DISPID_IHTMLLOCATION_REPLACE = 0x00000009;
enum DISPID_IHTMLLOCATION_ASSIGN = 0x0000000a;
enum DISPID_IHTMLLOCATION_TOSTRING = 0x0000000b;
enum DISPID_IHTMLMIMETYPESCOLLECTION_LENGTH = 0x00000001;
enum DISPID_IHTMLPLUGINSCOLLECTION_LENGTH = 0x00000001;
enum DISPID_IHTMLPLUGINSCOLLECTION_REFRESH = 0x00000002;
enum DISPID_IHTMLBOOKMARKCOLLECTION_LENGTH = 0x000005dd;
enum DISPID_IHTMLBOOKMARKCOLLECTION__NEWENUM = 0xfffffffffffffffc;
enum DISPID_IHTMLBOOKMARKCOLLECTION_ITEM = 0x00000000;
enum DISPID_IHTMLDATATRANSFER_SETDATA = 0x000003e9;
enum DISPID_IHTMLDATATRANSFER_GETDATA = 0x000003ea;
enum DISPID_IHTMLDATATRANSFER_CLEARDATA = 0x000003eb;
enum DISPID_IHTMLDATATRANSFER_DROPEFFECT = 0x000003ec;
enum DISPID_IHTMLDATATRANSFER_EFFECTALLOWED = 0x000003ed;
enum DISPID_IHTMLEVENTOBJ_SRCELEMENT = 0x000003e9;
enum DISPID_IHTMLEVENTOBJ_ALTKEY = 0x000003ea;
enum DISPID_IHTMLEVENTOBJ_CTRLKEY = 0x000003eb;
enum DISPID_IHTMLEVENTOBJ_SHIFTKEY = 0x000003ec;
enum DISPID_IHTMLEVENTOBJ_RETURNVALUE = 0x000003ef;
enum DISPID_IHTMLEVENTOBJ_CANCELBUBBLE = 0x000003f0;
enum DISPID_IHTMLEVENTOBJ_FROMELEMENT = 0x000003f1;
enum DISPID_IHTMLEVENTOBJ_TOELEMENT = 0x000003f2;
enum DISPID_IHTMLEVENTOBJ_KEYCODE = 0x000003f3;
enum DISPID_IHTMLEVENTOBJ_BUTTON = 0x000003f4;
enum DISPID_IHTMLEVENTOBJ_TYPE = 0x000003f5;
enum DISPID_IHTMLEVENTOBJ_QUALIFIER = 0x000003f6;
enum DISPID_IHTMLEVENTOBJ_REASON = 0x000003f7;
enum DISPID_IHTMLEVENTOBJ_X = 0x000003ed;
enum DISPID_IHTMLEVENTOBJ_Y = 0x000003ee;
enum DISPID_IHTMLEVENTOBJ_CLIENTX = 0x000003fc;
enum DISPID_IHTMLEVENTOBJ_CLIENTY = 0x000003fd;
enum DISPID_IHTMLEVENTOBJ_OFFSETX = 0x000003fe;
enum DISPID_IHTMLEVENTOBJ_OFFSETY = 0x000003ff;
enum DISPID_IHTMLEVENTOBJ_SCREENX = 0x00000400;
enum DISPID_IHTMLEVENTOBJ_SCREENY = 0x00000401;
enum DISPID_IHTMLEVENTOBJ_SRCFILTER = 0x00000402;
enum DISPID_IHTMLEVENTOBJ2_SETATTRIBUTE = 0x000101f5;
enum DISPID_IHTMLEVENTOBJ2_GETATTRIBUTE = 0x000101f6;
enum DISPID_IHTMLEVENTOBJ2_REMOVEATTRIBUTE = 0x000101f7;
enum DISPID_IHTMLEVENTOBJ2_PROPERTYNAME = 0x00000403;
enum DISPID_IHTMLEVENTOBJ2_BOOKMARKS = 0x00000407;
enum DISPID_IHTMLEVENTOBJ2_RECORDSET = 0x00000408;
enum DISPID_IHTMLEVENTOBJ2_DATAFLD = 0x00000409;
enum DISPID_IHTMLEVENTOBJ2_BOUNDELEMENTS = 0x0000040a;
enum DISPID_IHTMLEVENTOBJ2_REPEAT = 0x0000040b;
enum DISPID_IHTMLEVENTOBJ2_SRCURN = 0x0000040c;
enum DISPID_IHTMLEVENTOBJ2_SRCELEMENT = 0x000003e9;
enum DISPID_IHTMLEVENTOBJ2_ALTKEY = 0x000003ea;
enum DISPID_IHTMLEVENTOBJ2_CTRLKEY = 0x000003eb;
enum DISPID_IHTMLEVENTOBJ2_SHIFTKEY = 0x000003ec;
enum DISPID_IHTMLEVENTOBJ2_FROMELEMENT = 0x000003f1;
enum DISPID_IHTMLEVENTOBJ2_TOELEMENT = 0x000003f2;
enum DISPID_IHTMLEVENTOBJ2_BUTTON = 0x000003f4;
enum DISPID_IHTMLEVENTOBJ2_TYPE = 0x000003f5;
enum DISPID_IHTMLEVENTOBJ2_QUALIFIER = 0x000003f6;
enum DISPID_IHTMLEVENTOBJ2_REASON = 0x000003f7;
enum DISPID_IHTMLEVENTOBJ2_X = 0x000003ed;
enum DISPID_IHTMLEVENTOBJ2_Y = 0x000003ee;
enum DISPID_IHTMLEVENTOBJ2_CLIENTX = 0x000003fc;
enum DISPID_IHTMLEVENTOBJ2_CLIENTY = 0x000003fd;
enum DISPID_IHTMLEVENTOBJ2_OFFSETX = 0x000003fe;
enum DISPID_IHTMLEVENTOBJ2_OFFSETY = 0x000003ff;
enum DISPID_IHTMLEVENTOBJ2_SCREENX = 0x00000400;
enum DISPID_IHTMLEVENTOBJ2_SCREENY = 0x00000401;
enum DISPID_IHTMLEVENTOBJ2_SRCFILTER = 0x00000402;
enum DISPID_IHTMLEVENTOBJ2_DATATRANSFER = 0x0000040d;
enum DISPID_IHTMLEVENTOBJ3_CONTENTOVERFLOW = 0x0000040e;
enum DISPID_IHTMLEVENTOBJ3_SHIFTLEFT = 0x0000040f;
enum DISPID_IHTMLEVENTOBJ3_ALTLEFT = 0x00000410;
enum DISPID_IHTMLEVENTOBJ3_CTRLLEFT = 0x00000411;
enum DISPID_IHTMLEVENTOBJ3_IMECOMPOSITIONCHANGE = 0x00000412;
enum DISPID_IHTMLEVENTOBJ3_IMENOTIFYCOMMAND = 0x00000413;
enum DISPID_IHTMLEVENTOBJ3_IMENOTIFYDATA = 0x00000414;
enum DISPID_IHTMLEVENTOBJ3_IMEREQUEST = 0x00000416;
enum DISPID_IHTMLEVENTOBJ3_IMEREQUESTDATA = 0x00000417;
enum DISPID_IHTMLEVENTOBJ3_KEYBOARDLAYOUT = 0x00000415;
enum DISPID_IHTMLEVENTOBJ3_BEHAVIORCOOKIE = 0x00000418;
enum DISPID_IHTMLEVENTOBJ3_BEHAVIORPART = 0x00000419;
enum DISPID_IHTMLEVENTOBJ3_NEXTPAGE = 0x0000041a;
enum DISPID_IHTMLEVENTOBJ4_WHEELDELTA = 0x0000041b;
enum DISPID_IHTMLEVENTOBJ5_URL = 0x0000041c;
enum DISPID_IHTMLEVENTOBJ5_DATA = 0x0000041e;
enum DISPID_IHTMLEVENTOBJ5_SOURCE = 0x0000041f;
enum DISPID_IHTMLEVENTOBJ5_ORIGIN = 0x0000041d;
enum DISPID_IHTMLEVENTOBJ5_ISSESSION = 0x00000420;
enum DISPID_IHTMLEVENTOBJ6_ACTIONURL = 0x00000422;
enum DISPID_IHTMLEVENTOBJ6_BUTTONID = 0x00000421;
enum DISPID_IHTMLSTYLEMEDIA_TYPE = 0x000003e9;
enum DISPID_IHTMLSTYLEMEDIA_MATCHMEDIUM = 0x000003ea;
enum DISPID_IHTMLFRAMESCOLLECTION2_ITEM = 0x00000000;
enum DISPID_IHTMLFRAMESCOLLECTION2_LENGTH = 0x000003e9;
enum DISPID_IHTMLSCREEN_COLORDEPTH = 0x000003e9;
enum DISPID_IHTMLSCREEN_BUFFERDEPTH = 0x000003ea;
enum DISPID_IHTMLSCREEN_WIDTH = 0x000003eb;
enum DISPID_IHTMLSCREEN_HEIGHT = 0x000003ec;
enum DISPID_IHTMLSCREEN_UPDATEINTERVAL = 0x000003ed;
enum DISPID_IHTMLSCREEN_AVAILHEIGHT = 0x000003ee;
enum DISPID_IHTMLSCREEN_AVAILWIDTH = 0x000003ef;
enum DISPID_IHTMLSCREEN_FONTSMOOTHINGENABLED = 0x000003f0;
enum DISPID_IHTMLSCREEN2_LOGICALXDPI = 0x000003f1;
enum DISPID_IHTMLSCREEN2_LOGICALYDPI = 0x000003f2;
enum DISPID_IHTMLSCREEN2_DEVICEXDPI = 0x000003f3;
enum DISPID_IHTMLSCREEN2_DEVICEYDPI = 0x000003f4;
enum DISPID_IHTMLSCREEN3_SYSTEMXDPI = 0x000003f5;
enum DISPID_IHTMLSCREEN3_SYSTEMYDPI = 0x000003f6;
enum DISPID_IHTMLSCREEN4_PIXELDEPTH = 0x000003f7;
enum DISPID_IHTMLWINDOW2_FRAMES = 0x0000044c;
enum DISPID_IHTMLWINDOW2_DEFAULTSTATUS = 0x0000044d;
enum DISPID_IHTMLWINDOW2_STATUS = 0x0000044e;
enum DISPID_IHTMLWINDOW2_SETTIMEOUT = 0x00000494;
enum DISPID_IHTMLWINDOW2_CLEARTIMEOUT = 0x00000450;
enum DISPID_IHTMLWINDOW2_ALERT = 0x00000451;
enum DISPID_IHTMLWINDOW2_CONFIRM = 0x00000456;
enum DISPID_IHTMLWINDOW2_PROMPT = 0x00000457;
enum DISPID_IHTMLWINDOW2_IMAGE = 0x00000465;
enum DISPID_IHTMLWINDOW2_LOCATION = 0x0000000e;
enum DISPID_IHTMLWINDOW2_HISTORY = 0x00000002;
enum DISPID_IHTMLWINDOW2_CLOSE = 0x00000003;
enum DISPID_IHTMLWINDOW2_OPENER = 0x00000004;
enum DISPID_IHTMLWINDOW2_NAVIGATOR = 0x00000005;
enum DISPID_IHTMLWINDOW2_NAME = 0x0000000b;
enum DISPID_IHTMLWINDOW2_PARENT = 0x0000000c;
enum DISPID_IHTMLWINDOW2_OPEN = 0x0000000d;
enum DISPID_IHTMLWINDOW2_SELF = 0x00000014;
enum DISPID_IHTMLWINDOW2_TOP = 0x00000015;
enum DISPID_IHTMLWINDOW2_WINDOW = 0x00000016;
enum DISPID_IHTMLWINDOW2_NAVIGATE = 0x00000019;
enum DISPID_IHTMLWINDOW2_ONFOCUS = 0x0001177e;
enum DISPID_IHTMLWINDOW2_ONBLUR = 0x0001177f;
enum DISPID_IHTMLWINDOW2_ONLOAD = 0x00011790;
enum DISPID_IHTMLWINDOW2_ONBEFOREUNLOAD = 0x00011797;
enum DISPID_IHTMLWINDOW2_ONUNLOAD = 0x00011791;
enum DISPID_IHTMLWINDOW2_ONHELP = 0x0001177d;
enum DISPID_IHTMLWINDOW2_ONERROR = 0x0001178d;
enum DISPID_IHTMLWINDOW2_ONRESIZE = 0x00011794;
enum DISPID_IHTMLWINDOW2_ONSCROLL = 0x0001178f;
enum DISPID_IHTMLWINDOW2_DOCUMENT = 0x0000047f;
enum DISPID_IHTMLWINDOW2_EVENT = 0x00000480;
enum DISPID_IHTMLWINDOW2__NEWENUM = 0x00000481;
enum DISPID_IHTMLWINDOW2_SHOWMODALDIALOG = 0x00000482;
enum DISPID_IHTMLWINDOW2_SHOWHELP = 0x00000483;
enum DISPID_IHTMLWINDOW2_SCREEN = 0x00000484;
enum DISPID_IHTMLWINDOW2_OPTION = 0x00000485;
enum DISPID_IHTMLWINDOW2_FOCUS = 0x00000486;
enum DISPID_IHTMLWINDOW2_CLOSED = 0x00000017;
enum DISPID_IHTMLWINDOW2_BLUR = 0x00000487;
enum DISPID_IHTMLWINDOW2_SCROLL = 0x00000488;
enum DISPID_IHTMLWINDOW2_CLIENTINFORMATION = 0x00000489;
enum DISPID_IHTMLWINDOW2_SETINTERVAL = 0x00000495;
enum DISPID_IHTMLWINDOW2_CLEARINTERVAL = 0x0000048b;
enum DISPID_IHTMLWINDOW2_OFFSCREENBUFFERING = 0x0000048c;
enum DISPID_IHTMLWINDOW2_EXECSCRIPT = 0x0000048d;
enum DISPID_IHTMLWINDOW2_TOSTRING = 0x0000048e;
enum DISPID_IHTMLWINDOW2_SCROLLBY = 0x0000048f;
enum DISPID_IHTMLWINDOW2_SCROLLTO = 0x00000490;
enum DISPID_IHTMLWINDOW2_MOVETO = 0x00000006;
enum DISPID_IHTMLWINDOW2_MOVEBY = 0x00000007;
enum DISPID_IHTMLWINDOW2_RESIZETO = 0x00000009;
enum DISPID_IHTMLWINDOW2_RESIZEBY = 0x00000008;
enum DISPID_IHTMLWINDOW2_EXTERNAL = 0x00000491;
enum DISPID_IHTMLWINDOW3_SCREENLEFT = 0x00000492;
enum DISPID_IHTMLWINDOW3_SCREENTOP = 0x00000493;
enum DISPID_IHTMLWINDOW3_ATTACHEVENT = 0x000101fb;
enum DISPID_IHTMLWINDOW3_DETACHEVENT = 0x000101fc;
enum DISPID_IHTMLWINDOW3_SETTIMEOUT = 0x0000044f;
enum DISPID_IHTMLWINDOW3_SETINTERVAL = 0x0000048a;
enum DISPID_IHTMLWINDOW3_PRINT = 0x00000496;
enum DISPID_IHTMLWINDOW3_ONBEFOREPRINT = 0x000117b2;
enum DISPID_IHTMLWINDOW3_ONAFTERPRINT = 0x000117b3;
enum DISPID_IHTMLWINDOW3_CLIPBOARDDATA = 0x00000497;
enum DISPID_IHTMLWINDOW3_SHOWMODELESSDIALOG = 0x00000498;
enum DISPID_IHTMLWINDOW4_CREATEPOPUP = 0x0000049c;
enum DISPID_IHTMLWINDOW4_FRAMEELEMENT = 0x0000049d;
enum DISPID_IHTMLWINDOW5_XMLHTTPREQUEST = 0x000004a6;
enum DISPID_IHTMLWINDOW6_XDOMAINREQUEST = 0x000004a7;
enum DISPID_IHTMLWINDOW6_SESSIONSTORAGE = 0x000004a8;
enum DISPID_IHTMLWINDOW6_LOCALSTORAGE = 0x000004a9;
enum DISPID_IHTMLWINDOW6_ONHASHCHANGE = 0x000117dd;
enum DISPID_IHTMLWINDOW6_MAXCONNECTIONSPERSERVER = 0x000004aa;
enum DISPID_IHTMLWINDOW6_POSTMESSAGE = 0x000004ac;
enum DISPID_IHTMLWINDOW6_TOSTATICHTML = 0x000004ad;
enum DISPID_IHTMLWINDOW6_ONMESSAGE = 0x000117de;
enum DISPID_IHTMLWINDOW6_MSWRITEPROFILERMARK = 0x000004ae;
enum DISPID_IHTMLWINDOW7_GETSELECTION = 0x000004af;
enum DISPID_IHTMLWINDOW7_GETCOMPUTEDSTYLE = 0x000004b0;
enum DISPID_IHTMLWINDOW7_STYLEMEDIA = 0x000004b2;
enum DISPID_IHTMLWINDOW7_PERFORMANCE = 0x000004b3;
enum DISPID_IHTMLWINDOW7_INNERWIDTH = 0x000004b4;
enum DISPID_IHTMLWINDOW7_INNERHEIGHT = 0x000004b5;
enum DISPID_IHTMLWINDOW7_PAGEXOFFSET = 0x000004b6;
enum DISPID_IHTMLWINDOW7_PAGEYOFFSET = 0x000004b7;
enum DISPID_IHTMLWINDOW7_SCREENX = 0x000004b8;
enum DISPID_IHTMLWINDOW7_SCREENY = 0x000004b9;
enum DISPID_IHTMLWINDOW7_OUTERWIDTH = 0x000004ba;
enum DISPID_IHTMLWINDOW7_OUTERHEIGHT = 0x000004bb;
enum DISPID_IHTMLWINDOW7_ONABORT = 0x0001178c;
enum DISPID_IHTMLWINDOW7_ONCANPLAY = 0x000117f6;
enum DISPID_IHTMLWINDOW7_ONCANPLAYTHROUGH = 0x000117f7;
enum DISPID_IHTMLWINDOW7_ONCHANGE = 0x0001178e;
enum DISPID_IHTMLWINDOW7_ONCLICK = 0x00011778;
enum DISPID_IHTMLWINDOW7_ONCONTEXTMENU = 0x000117b1;
enum DISPID_IHTMLWINDOW7_ONDBLCLICK = 0x00011779;
enum DISPID_IHTMLWINDOW7_ONDRAG = 0x000117a1;
enum DISPID_IHTMLWINDOW7_ONDRAGEND = 0x000117a2;
enum DISPID_IHTMLWINDOW7_ONDRAGENTER = 0x000117a3;
enum DISPID_IHTMLWINDOW7_ONDRAGLEAVE = 0x000117a5;
enum DISPID_IHTMLWINDOW7_ONDRAGOVER = 0x000117a4;
enum DISPID_IHTMLWINDOW7_ONDRAGSTART = 0x00011793;
enum DISPID_IHTMLWINDOW7_ONDROP = 0x000117a6;
enum DISPID_IHTMLWINDOW7_ONDURATIONCHANGE = 0x000117f8;
enum DISPID_IHTMLWINDOW7_ONFOCUSIN = 0x000117cb;
enum DISPID_IHTMLWINDOW7_ONFOCUSOUT = 0x000117cc;
enum DISPID_IHTMLWINDOW7_ONINPUT = 0x000117ef;
enum DISPID_IHTMLWINDOW7_ONEMPTIED = 0x000117f9;
enum DISPID_IHTMLWINDOW7_ONENDED = 0x000117fa;
enum DISPID_IHTMLWINDOW7_ONKEYDOWN = 0x00011775;
enum DISPID_IHTMLWINDOW7_ONKEYPRESS = 0x00011777;
enum DISPID_IHTMLWINDOW7_ONKEYUP = 0x00011776;
enum DISPID_IHTMLWINDOW7_ONLOADEDDATA = 0x000117fb;
enum DISPID_IHTMLWINDOW7_ONLOADEDMETADATA = 0x000117fc;
enum DISPID_IHTMLWINDOW7_ONLOADSTART = 0x000117fd;
enum DISPID_IHTMLWINDOW7_ONMOUSEDOWN = 0x00011772;
enum DISPID_IHTMLWINDOW7_ONMOUSEENTER = 0x000117c5;
enum DISPID_IHTMLWINDOW7_ONMOUSELEAVE = 0x000117c6;
enum DISPID_IHTMLWINDOW7_ONMOUSEMOVE = 0x00011774;
enum DISPID_IHTMLWINDOW7_ONMOUSEOUT = 0x00011771;
enum DISPID_IHTMLWINDOW7_ONMOUSEOVER = 0x00011770;
enum DISPID_IHTMLWINDOW7_ONMOUSEUP = 0x00011773;
enum DISPID_IHTMLWINDOW7_ONMOUSEWHEEL = 0x000117bc;
enum DISPID_IHTMLWINDOW7_ONOFFLINE = 0x000117dc;
enum DISPID_IHTMLWINDOW7_ONONLINE = 0x000117db;
enum DISPID_IHTMLWINDOW7_ONPROGRESS = 0x00011801;
enum DISPID_IHTMLWINDOW7_ONRATECHANGE = 0x00011802;
enum DISPID_IHTMLWINDOW7_ONREADYSTATECHANGE = 0x00011789;
enum DISPID_IHTMLWINDOW7_ONRESET = 0x0001177c;
enum DISPID_IHTMLWINDOW7_ONSEEKED = 0x00011803;
enum DISPID_IHTMLWINDOW7_ONSEEKING = 0x00011804;
enum DISPID_IHTMLWINDOW7_ONSELECT = 0x0001177a;
enum DISPID_IHTMLWINDOW7_ONSTALLED = 0x00011805;
enum DISPID_IHTMLWINDOW7_ONSTORAGE = 0x000117d4;
enum DISPID_IHTMLWINDOW7_ONSUBMIT = 0x0001177b;
enum DISPID_IHTMLWINDOW7_ONSUSPEND = 0x00011806;
enum DISPID_IHTMLWINDOW7_ONTIMEUPDATE = 0x00011807;
enum DISPID_IHTMLWINDOW7_ONPAUSE = 0x000117fe;
enum DISPID_IHTMLWINDOW7_ONPLAY = 0x000117ff;
enum DISPID_IHTMLWINDOW7_ONPLAYING = 0x00011800;
enum DISPID_IHTMLWINDOW7_ONVOLUMECHANGE = 0x00011808;
enum DISPID_IHTMLWINDOW7_ONWAITING = 0x00011809;
enum DISPID_IHTMLWINDOW8_ONMSPOINTERDOWN = 0x0001180a;
enum DISPID_IHTMLWINDOW8_ONMSPOINTERMOVE = 0x0001180b;
enum DISPID_IHTMLWINDOW8_ONMSPOINTERUP = 0x0001180c;
enum DISPID_IHTMLWINDOW8_ONMSPOINTEROVER = 0x0001180d;
enum DISPID_IHTMLWINDOW8_ONMSPOINTEROUT = 0x0001180e;
enum DISPID_IHTMLWINDOW8_ONMSPOINTERCANCEL = 0x0001180f;
enum DISPID_IHTMLWINDOW8_ONMSPOINTERHOVER = 0x00011810;
enum DISPID_IHTMLWINDOW8_ONMSGESTURESTART = 0x00011813;
enum DISPID_IHTMLWINDOW8_ONMSGESTURECHANGE = 0x00011814;
enum DISPID_IHTMLWINDOW8_ONMSGESTUREEND = 0x00011815;
enum DISPID_IHTMLWINDOW8_ONMSGESTUREHOLD = 0x00011816;
enum DISPID_IHTMLWINDOW8_ONMSGESTURETAP = 0x00011817;
enum DISPID_IHTMLWINDOW8_ONMSGESTUREDOUBLETAP = 0x00011818;
enum DISPID_IHTMLWINDOW8_ONMSINERTIASTART = 0x00011819;
enum DISPID_IHTMLWINDOW8_APPLICATIONCACHE = 0x000004bd;
enum DISPID_IHTMLWINDOW8_ONPOPSTATE = 0x00011830;
enum DISPID_HTMLWINDOWEVENTS3_ONHASHCHANGE = 0x0000042a;
enum DISPID_HTMLWINDOWEVENTS3_ONMESSAGE = 0x0000042b;
enum DISPID_HTMLWINDOWEVENTS2_ONLOAD = 0x000003eb;
enum DISPID_HTMLWINDOWEVENTS2_ONUNLOAD = 0x000003f0;
enum DISPID_HTMLWINDOWEVENTS2_ONHELP = 0x0001000a;
enum DISPID_HTMLWINDOWEVENTS2_ONFOCUS = 0x00010001;
enum DISPID_HTMLWINDOWEVENTS2_ONERROR = 0x000003ea;
enum DISPID_HTMLWINDOWEVENTS2_ONRESIZE = 0x000003f8;
enum DISPID_HTMLWINDOWEVENTS2_ONSCROLL = 0x000003f6;
enum DISPID_HTMLWINDOWEVENTS2_ONBEFOREUNLOAD = 0x000003f9;
enum DISPID_HTMLWINDOWEVENTS2_ONBEFOREPRINT = 0x00000400;
enum DISPID_HTMLWINDOWEVENTS2_ONAFTERPRINT = 0x00000401;
enum DISPID_HTMLWINDOWEVENTS_ONLOAD = 0x000003eb;
enum DISPID_HTMLWINDOWEVENTS_ONUNLOAD = 0x000003f0;
enum DISPID_HTMLWINDOWEVENTS_ONHELP = 0x0001000a;
enum DISPID_HTMLWINDOWEVENTS_ONFOCUS = 0x00010001;
enum DISPID_HTMLWINDOWEVENTS_ONERROR = 0x000003ea;
enum DISPID_HTMLWINDOWEVENTS_ONRESIZE = 0x000003f8;
enum DISPID_HTMLWINDOWEVENTS_ONSCROLL = 0x000003f6;
enum DISPID_HTMLWINDOWEVENTS_ONBEFOREUNLOAD = 0x000003f9;
enum DISPID_HTMLWINDOWEVENTS_ONBEFOREPRINT = 0x00000400;
enum DISPID_HTMLWINDOWEVENTS_ONAFTERPRINT = 0x00000401;
enum DISPID_IHTMLDOCUMENTCOMPATIBLEINFO_USERAGENT = 0x000003e9;
enum DISPID_IHTMLDOCUMENTCOMPATIBLEINFO_VERSION = 0x000003ea;
enum DISPID_IHTMLDOCUMENTCOMPATIBLEINFOCOLLECTION_LENGTH = 0x000003e9;
enum DISPID_IHTMLDOCUMENTCOMPATIBLEINFOCOLLECTION_ITEM = 0x00000000;
enum DISPID_IHTMLDOCUMENT_SCRIPT = 0x000003e9;
enum DISPID_IHTMLDOCUMENT2_ALL = 0x000003eb;
enum DISPID_IHTMLDOCUMENT2_BODY = 0x000003ec;
enum DISPID_IHTMLDOCUMENT2_ACTIVEELEMENT = 0x000003ed;
enum DISPID_IHTMLDOCUMENT2_IMAGES = 0x000003f3;
enum DISPID_IHTMLDOCUMENT2_APPLETS = 0x000003f0;
enum DISPID_IHTMLDOCUMENT2_LINKS = 0x000003f1;
enum DISPID_IHTMLDOCUMENT2_FORMS = 0x000003f2;
enum DISPID_IHTMLDOCUMENT2_ANCHORS = 0x000003ef;
enum DISPID_IHTMLDOCUMENT2_TITLE = 0x000003f4;
enum DISPID_IHTMLDOCUMENT2_SCRIPTS = 0x000003f5;
enum DISPID_IHTMLDOCUMENT2_DESIGNMODE = 0x000003f6;
enum DISPID_IHTMLDOCUMENT2_SELECTION = 0x000003f9;
enum DISPID_IHTMLDOCUMENT2_READYSTATE = 0x000003fa;
enum DISPID_IHTMLDOCUMENT2_FRAMES = 0x000003fb;
enum DISPID_IHTMLDOCUMENT2_EMBEDS = 0x000003f7;
enum DISPID_IHTMLDOCUMENT2_PLUGINS = 0x000003fd;
enum DISPID_IHTMLDOCUMENT2_ALINKCOLOR = 0x000003fe;
enum DISPID_IHTMLDOCUMENT2_BGCOLOR = 0xfffffffffffffe0b;
enum DISPID_IHTMLDOCUMENT2_FGCOLOR = 0x0001138a;
enum DISPID_IHTMLDOCUMENT2_LINKCOLOR = 0x00000400;
enum DISPID_IHTMLDOCUMENT2_VLINKCOLOR = 0x000003ff;
enum DISPID_IHTMLDOCUMENT2_REFERRER = 0x00000403;
enum DISPID_IHTMLDOCUMENT2_LOCATION = 0x00000402;
enum DISPID_IHTMLDOCUMENT2_LASTMODIFIED = 0x00000404;
enum DISPID_IHTMLDOCUMENT2_URL = 0x00000401;
enum DISPID_IHTMLDOCUMENT2_DOMAIN = 0x00000405;
enum DISPID_IHTMLDOCUMENT2_COOKIE = 0x00000406;
enum DISPID_IHTMLDOCUMENT2_EXPANDO = 0x00000407;
enum DISPID_IHTMLDOCUMENT2_CHARSET = 0x00000408;
enum DISPID_IHTMLDOCUMENT2_DEFAULTCHARSET = 0x00000409;
enum DISPID_IHTMLDOCUMENT2_MIMETYPE = 0x00000411;
enum DISPID_IHTMLDOCUMENT2_FILESIZE = 0x00000412;
enum DISPID_IHTMLDOCUMENT2_FILECREATEDDATE = 0x00000413;
enum DISPID_IHTMLDOCUMENT2_FILEMODIFIEDDATE = 0x00000414;
enum DISPID_IHTMLDOCUMENT2_FILEUPDATEDDATE = 0x00000415;
enum DISPID_IHTMLDOCUMENT2_SECURITY = 0x00000416;
enum DISPID_IHTMLDOCUMENT2_PROTOCOL = 0x00000417;
enum DISPID_IHTMLDOCUMENT2_NAMEPROP = 0x00000418;
enum DISPID_IHTMLDOCUMENT2_WRITE = 0x0000041e;
enum DISPID_IHTMLDOCUMENT2_WRITELN = 0x0000041f;
enum DISPID_IHTMLDOCUMENT2_OPEN = 0x00000420;
enum DISPID_IHTMLDOCUMENT2_CLOSE = 0x00000421;
enum DISPID_IHTMLDOCUMENT2_CLEAR = 0x00000422;
enum DISPID_IHTMLDOCUMENT2_QUERYCOMMANDSUPPORTED = 0x00000423;
enum DISPID_IHTMLDOCUMENT2_QUERYCOMMANDENABLED = 0x00000424;
enum DISPID_IHTMLDOCUMENT2_QUERYCOMMANDSTATE = 0x00000425;
enum DISPID_IHTMLDOCUMENT2_QUERYCOMMANDINDETERM = 0x00000426;
enum DISPID_IHTMLDOCUMENT2_QUERYCOMMANDTEXT = 0x00000427;
enum DISPID_IHTMLDOCUMENT2_QUERYCOMMANDVALUE = 0x00000428;
enum DISPID_IHTMLDOCUMENT2_EXECCOMMAND = 0x00000429;
enum DISPID_IHTMLDOCUMENT2_EXECCOMMANDSHOWHELP = 0x0000042a;
enum DISPID_IHTMLDOCUMENT2_CREATEELEMENT = 0x0000042b;
enum DISPID_IHTMLDOCUMENT2_ONHELP = 0x0001177d;
enum DISPID_IHTMLDOCUMENT2_ONCLICK = 0x00011778;
enum DISPID_IHTMLDOCUMENT2_ONDBLCLICK = 0x00011779;
enum DISPID_IHTMLDOCUMENT2_ONKEYUP = 0x00011776;
enum DISPID_IHTMLDOCUMENT2_ONKEYDOWN = 0x00011775;
enum DISPID_IHTMLDOCUMENT2_ONKEYPRESS = 0x00011777;
enum DISPID_IHTMLDOCUMENT2_ONMOUSEUP = 0x00011773;
enum DISPID_IHTMLDOCUMENT2_ONMOUSEDOWN = 0x00011772;
enum DISPID_IHTMLDOCUMENT2_ONMOUSEMOVE = 0x00011774;
enum DISPID_IHTMLDOCUMENT2_ONMOUSEOUT = 0x00011771;
enum DISPID_IHTMLDOCUMENT2_ONMOUSEOVER = 0x00011770;
enum DISPID_IHTMLDOCUMENT2_ONREADYSTATECHANGE = 0x00011789;
enum DISPID_IHTMLDOCUMENT2_ONAFTERUPDATE = 0x00011786;
enum DISPID_IHTMLDOCUMENT2_ONROWEXIT = 0x00011782;
enum DISPID_IHTMLDOCUMENT2_ONROWENTER = 0x00011783;
enum DISPID_IHTMLDOCUMENT2_ONDRAGSTART = 0x00011793;
enum DISPID_IHTMLDOCUMENT2_ONSELECTSTART = 0x00011795;
enum DISPID_IHTMLDOCUMENT2_ELEMENTFROMPOINT = 0x0000042c;
enum DISPID_IHTMLDOCUMENT2_PARENTWINDOW = 0x0000040a;
enum DISPID_IHTMLDOCUMENT2_STYLESHEETS = 0x0000042d;
enum DISPID_IHTMLDOCUMENT2_ONBEFOREUPDATE = 0x00011785;
enum DISPID_IHTMLDOCUMENT2_ONERRORUPDATE = 0x00011796;
enum DISPID_IHTMLDOCUMENT2_TOSTRING = 0x0000042e;
enum DISPID_IHTMLDOCUMENT2_CREATESTYLESHEET = 0x0000042f;
enum DISPID_IHTMLDOCUMENT3_RELEASECAPTURE = 0x00000430;
enum DISPID_IHTMLDOCUMENT3_RECALC = 0x00000431;
enum DISPID_IHTMLDOCUMENT3_CREATETEXTNODE = 0x00000432;
enum DISPID_IHTMLDOCUMENT3_DOCUMENTELEMENT = 0x00000433;
enum DISPID_IHTMLDOCUMENT3_UNIQUEID = 0x00000435;
enum DISPID_IHTMLDOCUMENT3_ATTACHEVENT = 0x000101fb;
enum DISPID_IHTMLDOCUMENT3_DETACHEVENT = 0x000101fc;
enum DISPID_IHTMLDOCUMENT3_ONROWSDELETE = 0x000117ae;
enum DISPID_IHTMLDOCUMENT3_ONROWSINSERTED = 0x000117af;
enum DISPID_IHTMLDOCUMENT3_ONCELLCHANGE = 0x000117b0;
enum DISPID_IHTMLDOCUMENT3_ONDATASETCHANGED = 0x00011798;
enum DISPID_IHTMLDOCUMENT3_ONDATAAVAILABLE = 0x00011799;
enum DISPID_IHTMLDOCUMENT3_ONDATASETCOMPLETE = 0x0001179a;
enum DISPID_IHTMLDOCUMENT3_ONPROPERTYCHANGE = 0x0001179f;
enum DISPID_IHTMLDOCUMENT3_DIR = 0x000113fd;
enum DISPID_IHTMLDOCUMENT3_ONCONTEXTMENU = 0x000117b1;
enum DISPID_IHTMLDOCUMENT3_ONSTOP = 0x000117b4;
enum DISPID_IHTMLDOCUMENT3_CREATEDOCUMENTFRAGMENT = 0x00000434;
enum DISPID_IHTMLDOCUMENT3_PARENTDOCUMENT = 0x00000436;
enum DISPID_IHTMLDOCUMENT3_ENABLEDOWNLOAD = 0x00000437;
enum DISPID_IHTMLDOCUMENT3_BASEURL = 0x00000438;
enum DISPID_IHTMLDOCUMENT3_CHILDNODES = 0x00010419;
enum DISPID_IHTMLDOCUMENT3_INHERITSTYLESHEETS = 0x0000043a;
enum DISPID_IHTMLDOCUMENT3_ONBEFOREEDITFOCUS = 0x000117b5;
enum DISPID_IHTMLDOCUMENT3_GETELEMENTSBYNAME = 0x0000043e;
enum DISPID_IHTMLDOCUMENT3_GETELEMENTBYID = 0x00000440;
enum DISPID_IHTMLDOCUMENT3_GETELEMENTSBYTAGNAME = 0x0000043f;
enum DISPID_IHTMLDOCUMENT4_FOCUS = 0x00000441;
enum DISPID_IHTMLDOCUMENT4_HASFOCUS = 0x00000442;
enum DISPID_IHTMLDOCUMENT4_ONSELECTIONCHANGE = 0x000117c0;
enum DISPID_IHTMLDOCUMENT4_NAMESPACES = 0x00000443;
enum DISPID_IHTMLDOCUMENT4_CREATEDOCUMENTFROMURL = 0x00000444;
enum DISPID_IHTMLDOCUMENT4_MEDIA = 0x00000445;
enum DISPID_IHTMLDOCUMENT4_CREATEEVENTOBJECT = 0x00000446;
enum DISPID_IHTMLDOCUMENT4_FIREEVENT = 0x00000447;
enum DISPID_IHTMLDOCUMENT4_CREATERENDERSTYLE = 0x00000448;
enum DISPID_IHTMLDOCUMENT4_ONCONTROLSELECT = 0x000117bf;
enum DISPID_IHTMLDOCUMENT4_URLUNENCODED = 0x00000449;
enum DISPID_IHTMLDOCUMENT5_ONMOUSEWHEEL = 0x000117bc;
enum DISPID_IHTMLDOCUMENT5_DOCTYPE = 0x0000044a;
enum DISPID_IHTMLDOCUMENT5_IMPLEMENTATION = 0x0000044b;
enum DISPID_IHTMLDOCUMENT5_CREATEATTRIBUTE = 0x0000044c;
enum DISPID_IHTMLDOCUMENT5_CREATECOMMENT = 0x0000044d;
enum DISPID_IHTMLDOCUMENT5_ONFOCUSIN = 0x000117cb;
enum DISPID_IHTMLDOCUMENT5_ONFOCUSOUT = 0x000117cc;
enum DISPID_IHTMLDOCUMENT5_ONACTIVATE = 0x000117c7;
enum DISPID_IHTMLDOCUMENT5_ONDEACTIVATE = 0x000117c8;
enum DISPID_IHTMLDOCUMENT5_ONBEFOREACTIVATE = 0x000117ca;
enum DISPID_IHTMLDOCUMENT5_ONBEFOREDEACTIVATE = 0x000117bd;
enum DISPID_IHTMLDOCUMENT5_COMPATMODE = 0x0000044e;
enum DISPID_IHTMLDOCUMENT6_COMPATIBLE = 0x0000044f;
enum DISPID_IHTMLDOCUMENT6_DOCUMENTMODE = 0x00000450;
enum DISPID_IHTMLDOCUMENT6_ONSTORAGE = 0x000117d4;
enum DISPID_IHTMLDOCUMENT6_ONSTORAGECOMMIT = 0x000117d5;
enum DISPID_IHTMLDOCUMENT6_IE8_GETELEMENTBYID = 0x00000453;
enum DISPID_IHTMLDOCUMENT6_UPDATESETTINGS = 0x00000455;
enum DISPID_IHTMLDOCUMENT7_DEFAULTVIEW = 0x00000456;
enum DISPID_IHTMLDOCUMENT7_CREATECDATASECTION = 0x00000463;
enum DISPID_IHTMLDOCUMENT7_GETSELECTION = 0x00000458;
enum DISPID_IHTMLDOCUMENT7_GETELEMENTSBYTAGNAMENS = 0x00000459;
enum DISPID_IHTMLDOCUMENT7_CREATEELEMENTNS = 0x0000045a;
enum DISPID_IHTMLDOCUMENT7_CREATEATTRIBUTENS = 0x0000045b;
enum DISPID_IHTMLDOCUMENT7_ONMSTHUMBNAILCLICK = 0x000117e9;
enum DISPID_IHTMLDOCUMENT7_CHARACTERSET = 0x0000045d;
enum DISPID_IHTMLDOCUMENT7_IE9_CREATEELEMENT = 0x0000045e;
enum DISPID_IHTMLDOCUMENT7_IE9_CREATEATTRIBUTE = 0x0000045f;
enum DISPID_IHTMLDOCUMENT7_GETELEMENTSBYCLASSNAME = 0x00000460;
enum DISPID_IHTMLDOCUMENT7_CREATEPROCESSINGINSTRUCTION = 0x00000464;
enum DISPID_IHTMLDOCUMENT7_ADOPTNODE = 0x00000465;
enum DISPID_IHTMLDOCUMENT7_ONMSSITEMODEJUMPLISTITEMREMOVED = 0x000117f2;
enum DISPID_IHTMLDOCUMENT7_IE9_ALL = 0x00000466;
enum DISPID_IHTMLDOCUMENT7_INPUTENCODING = 0x00000467;
enum DISPID_IHTMLDOCUMENT7_XMLENCODING = 0x00000468;
enum DISPID_IHTMLDOCUMENT7_XMLSTANDALONE = 0x00000469;
enum DISPID_IHTMLDOCUMENT7_XMLVERSION = 0x0000046a;
enum DISPID_IHTMLDOCUMENT7_HASATTRIBUTES = 0x0000046c;
enum DISPID_IHTMLDOCUMENT7_ONABORT = 0x0001178c;
enum DISPID_IHTMLDOCUMENT7_ONBLUR = 0x0001177f;
enum DISPID_IHTMLDOCUMENT7_ONCANPLAY = 0x000117f6;
enum DISPID_IHTMLDOCUMENT7_ONCANPLAYTHROUGH = 0x000117f7;
enum DISPID_IHTMLDOCUMENT7_ONCHANGE = 0x0001178e;
enum DISPID_IHTMLDOCUMENT7_ONDRAG = 0x000117a1;
enum DISPID_IHTMLDOCUMENT7_ONDRAGEND = 0x000117a2;
enum DISPID_IHTMLDOCUMENT7_ONDRAGENTER = 0x000117a3;
enum DISPID_IHTMLDOCUMENT7_ONDRAGLEAVE = 0x000117a5;
enum DISPID_IHTMLDOCUMENT7_ONDRAGOVER = 0x000117a4;
enum DISPID_IHTMLDOCUMENT7_ONDROP = 0x000117a6;
enum DISPID_IHTMLDOCUMENT7_ONDURATIONCHANGE = 0x000117f8;
enum DISPID_IHTMLDOCUMENT7_ONEMPTIED = 0x000117f9;
enum DISPID_IHTMLDOCUMENT7_ONENDED = 0x000117fa;
enum DISPID_IHTMLDOCUMENT7_ONERROR = 0x0001178d;
enum DISPID_IHTMLDOCUMENT7_ONFOCUS = 0x0001177e;
enum DISPID_IHTMLDOCUMENT7_ONINPUT = 0x000117ef;
enum DISPID_IHTMLDOCUMENT7_ONLOAD = 0x00011790;
enum DISPID_IHTMLDOCUMENT7_ONLOADEDDATA = 0x000117fb;
enum DISPID_IHTMLDOCUMENT7_ONLOADEDMETADATA = 0x000117fc;
enum DISPID_IHTMLDOCUMENT7_ONLOADSTART = 0x000117fd;
enum DISPID_IHTMLDOCUMENT7_ONPAUSE = 0x000117fe;
enum DISPID_IHTMLDOCUMENT7_ONPLAY = 0x000117ff;
enum DISPID_IHTMLDOCUMENT7_ONPLAYING = 0x00011800;
enum DISPID_IHTMLDOCUMENT7_ONPROGRESS = 0x00011801;
enum DISPID_IHTMLDOCUMENT7_ONRATECHANGE = 0x00011802;
enum DISPID_IHTMLDOCUMENT7_ONRESET = 0x0001177c;
enum DISPID_IHTMLDOCUMENT7_ONSCROLL = 0x0001178f;
enum DISPID_IHTMLDOCUMENT7_ONSEEKED = 0x00011803;
enum DISPID_IHTMLDOCUMENT7_ONSEEKING = 0x00011804;
enum DISPID_IHTMLDOCUMENT7_ONSELECT = 0x0001177a;
enum DISPID_IHTMLDOCUMENT7_ONSTALLED = 0x00011805;
enum DISPID_IHTMLDOCUMENT7_ONSUBMIT = 0x0001177b;
enum DISPID_IHTMLDOCUMENT7_ONSUSPEND = 0x00011806;
enum DISPID_IHTMLDOCUMENT7_ONTIMEUPDATE = 0x00011807;
enum DISPID_IHTMLDOCUMENT7_ONVOLUMECHANGE = 0x00011808;
enum DISPID_IHTMLDOCUMENT7_ONWAITING = 0x00011809;
enum DISPID_IHTMLDOCUMENT7_NORMALIZE = 0x0000046e;
enum DISPID_IHTMLDOCUMENT7_IMPORTNODE = 0x0000046f;
enum DISPID_IHTMLDOCUMENT7_IE9_PARENTWINDOW = 0x00000470;
enum DISPID_IHTMLDOCUMENT7_IE9_BODY = 0x00000471;
enum DISPID_IHTMLDOCUMENT7_HEAD = 0x00000472;
enum DISPID_IHTMLDOCUMENT8_ONMSCONTENTZOOM = 0x0001181c;
enum DISPID_IHTMLDOCUMENT8_ONMSPOINTERDOWN = 0x0001180a;
enum DISPID_IHTMLDOCUMENT8_ONMSPOINTERMOVE = 0x0001180b;
enum DISPID_IHTMLDOCUMENT8_ONMSPOINTERUP = 0x0001180c;
enum DISPID_IHTMLDOCUMENT8_ONMSPOINTEROVER = 0x0001180d;
enum DISPID_IHTMLDOCUMENT8_ONMSPOINTEROUT = 0x0001180e;
enum DISPID_IHTMLDOCUMENT8_ONMSPOINTERCANCEL = 0x0001180f;
enum DISPID_IHTMLDOCUMENT8_ONMSPOINTERHOVER = 0x00011810;
enum DISPID_IHTMLDOCUMENT8_ONMSGESTURESTART = 0x00011813;
enum DISPID_IHTMLDOCUMENT8_ONMSGESTURECHANGE = 0x00011814;
enum DISPID_IHTMLDOCUMENT8_ONMSGESTUREEND = 0x00011815;
enum DISPID_IHTMLDOCUMENT8_ONMSGESTUREHOLD = 0x00011816;
enum DISPID_IHTMLDOCUMENT8_ONMSGESTURETAP = 0x00011817;
enum DISPID_IHTMLDOCUMENT8_ONMSGESTUREDOUBLETAP = 0x00011818;
enum DISPID_IHTMLDOCUMENT8_ONMSINERTIASTART = 0x00011819;
enum DISPID_IHTMLDOCUMENT8_ELEMENTSFROMPOINT = 0x00000473;
enum DISPID_IHTMLDOCUMENT8_ELEMENTSFROMRECT = 0x00000474;
enum DISPID_IHTMLDOCUMENT8_ONMSMANIPULATIONSTATECHANGED = 0x00011822;
enum DISPID_IHTMLDOCUMENT8_MSCAPSLOCKWARNINGOFF = 0x00000475;
enum DISPID_IDOCUMENTEVENT_CREATEEVENT = 0x00000454;
enum DISPID_IDOCUMENTRANGE_CREATERANGE = 0x00000457;
enum DISPID_IDOCUMENTSELECTOR_QUERYSELECTOR = 0x00000451;
enum DISPID_IDOCUMENTSELECTOR_QUERYSELECTORALL = 0x00000452;
enum DISPID_IDOCUMENTTRAVERSAL_CREATENODEITERATOR = 0x00000461;
enum DISPID_IDOCUMENTTRAVERSAL_CREATETREEWALKER = 0x00000462;
enum DISPID_HTMLDOCUMENTEVENTS4_ONMSTHUMBNAILCLICK = 0x000117e9;
enum DISPID_HTMLDOCUMENTEVENTS4_ONMSSITEMODEJUMPLISTITEMREMOVED = 0x000117f2;
enum DISPID_HTMLDOCUMENTEVENTS3_ONSTORAGE = 0x00000421;
enum DISPID_HTMLDOCUMENTEVENTS3_ONSTORAGECOMMIT = 0x00000422;
enum DISPID_HTMLDOCUMENTEVENTS2_ONHELP = 0x0001000a;
enum DISPID_HTMLDOCUMENTEVENTS2_ONCLICK = 0xfffffffffffffda8;
enum DISPID_HTMLDOCUMENTEVENTS2_ONDBLCLICK = 0xfffffffffffffda7;
enum DISPID_HTMLDOCUMENTEVENTS2_ONKEYDOWN = 0xfffffffffffffda6;
enum DISPID_HTMLDOCUMENTEVENTS2_ONKEYUP = 0xfffffffffffffda4;
enum DISPID_HTMLDOCUMENTEVENTS2_ONKEYPRESS = 0xfffffffffffffda5;
enum DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEDOWN = 0xfffffffffffffda3;
enum DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEMOVE = 0xfffffffffffffda2;
enum DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEUP = 0xfffffffffffffda1;
enum DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEOUT = 0x00010009;
enum DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEOVER = 0x00010008;
enum DISPID_HTMLDOCUMENTEVENTS2_ONREADYSTATECHANGE = 0xfffffffffffffd9f;
enum DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREUPDATE = 0x00010004;
enum DISPID_HTMLDOCUMENTEVENTS2_ONAFTERUPDATE = 0x00010005;
enum DISPID_HTMLDOCUMENTEVENTS2_ONROWEXIT = 0x00010006;
enum DISPID_HTMLDOCUMENTEVENTS2_ONROWENTER = 0x00010007;
enum DISPID_HTMLDOCUMENTEVENTS2_ONDRAGSTART = 0x0001000b;
enum DISPID_HTMLDOCUMENTEVENTS2_ONSELECTSTART = 0x0001000c;
enum DISPID_HTMLDOCUMENTEVENTS2_ONERRORUPDATE = 0x0001000d;
enum DISPID_HTMLDOCUMENTEVENTS2_ONCONTEXTMENU = 0x000003ff;
enum DISPID_HTMLDOCUMENTEVENTS2_ONSTOP = 0x00000402;
enum DISPID_HTMLDOCUMENTEVENTS2_ONROWSDELETE = 0x00010020;
enum DISPID_HTMLDOCUMENTEVENTS2_ONROWSINSERTED = 0x00010021;
enum DISPID_HTMLDOCUMENTEVENTS2_ONCELLCHANGE = 0x00010022;
enum DISPID_HTMLDOCUMENTEVENTS2_ONPROPERTYCHANGE = 0x00010013;
enum DISPID_HTMLDOCUMENTEVENTS2_ONDATASETCHANGED = 0x0001000e;
enum DISPID_HTMLDOCUMENTEVENTS2_ONDATAAVAILABLE = 0x0001000f;
enum DISPID_HTMLDOCUMENTEVENTS2_ONDATASETCOMPLETE = 0x00010010;
enum DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREEDITFOCUS = 0x00000403;
enum DISPID_HTMLDOCUMENTEVENTS2_ONSELECTIONCHANGE = 0x0000040d;
enum DISPID_HTMLDOCUMENTEVENTS2_ONCONTROLSELECT = 0x0000040c;
enum DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEWHEEL = 0x00000409;
enum DISPID_HTMLDOCUMENTEVENTS2_ONFOCUSIN = 0x00000418;
enum DISPID_HTMLDOCUMENTEVENTS2_ONFOCUSOUT = 0x00000419;
enum DISPID_HTMLDOCUMENTEVENTS2_ONACTIVATE = 0x00000414;
enum DISPID_HTMLDOCUMENTEVENTS2_ONDEACTIVATE = 0x00000415;
enum DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREACTIVATE = 0x00000417;
enum DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREDEACTIVATE = 0x0000040a;
enum DISPID_HTMLDOCUMENTEVENTS_ONHELP = 0x0001000a;
enum DISPID_HTMLDOCUMENTEVENTS_ONCLICK = 0xfffffffffffffda8;
enum DISPID_HTMLDOCUMENTEVENTS_ONDBLCLICK = 0xfffffffffffffda7;
enum DISPID_HTMLDOCUMENTEVENTS_ONKEYDOWN = 0xfffffffffffffda6;
enum DISPID_HTMLDOCUMENTEVENTS_ONKEYUP = 0xfffffffffffffda4;
enum DISPID_HTMLDOCUMENTEVENTS_ONKEYPRESS = 0xfffffffffffffda5;
enum DISPID_HTMLDOCUMENTEVENTS_ONMOUSEDOWN = 0xfffffffffffffda3;
enum DISPID_HTMLDOCUMENTEVENTS_ONMOUSEMOVE = 0xfffffffffffffda2;
enum DISPID_HTMLDOCUMENTEVENTS_ONMOUSEUP = 0xfffffffffffffda1;
enum DISPID_HTMLDOCUMENTEVENTS_ONMOUSEOUT = 0x00010009;
enum DISPID_HTMLDOCUMENTEVENTS_ONMOUSEOVER = 0x00010008;
enum DISPID_HTMLDOCUMENTEVENTS_ONREADYSTATECHANGE = 0xfffffffffffffd9f;
enum DISPID_HTMLDOCUMENTEVENTS_ONBEFOREUPDATE = 0x00010004;
enum DISPID_HTMLDOCUMENTEVENTS_ONAFTERUPDATE = 0x00010005;
enum DISPID_HTMLDOCUMENTEVENTS_ONROWEXIT = 0x00010006;
enum DISPID_HTMLDOCUMENTEVENTS_ONROWENTER = 0x00010007;
enum DISPID_HTMLDOCUMENTEVENTS_ONDRAGSTART = 0x0001000b;
enum DISPID_HTMLDOCUMENTEVENTS_ONSELECTSTART = 0x0001000c;
enum DISPID_HTMLDOCUMENTEVENTS_ONERRORUPDATE = 0x0001000d;
enum DISPID_HTMLDOCUMENTEVENTS_ONCONTEXTMENU = 0x000003ff;
enum DISPID_HTMLDOCUMENTEVENTS_ONSTOP = 0x00000402;
enum DISPID_HTMLDOCUMENTEVENTS_ONROWSDELETE = 0x00010020;
enum DISPID_HTMLDOCUMENTEVENTS_ONROWSINSERTED = 0x00010021;
enum DISPID_HTMLDOCUMENTEVENTS_ONCELLCHANGE = 0x00010022;
enum DISPID_HTMLDOCUMENTEVENTS_ONPROPERTYCHANGE = 0x00010013;
enum DISPID_HTMLDOCUMENTEVENTS_ONDATASETCHANGED = 0x0001000e;
enum DISPID_HTMLDOCUMENTEVENTS_ONDATAAVAILABLE = 0x0001000f;
enum DISPID_HTMLDOCUMENTEVENTS_ONDATASETCOMPLETE = 0x00010010;
enum DISPID_HTMLDOCUMENTEVENTS_ONBEFOREEDITFOCUS = 0x00000403;
enum DISPID_HTMLDOCUMENTEVENTS_ONSELECTIONCHANGE = 0x0000040d;
enum DISPID_HTMLDOCUMENTEVENTS_ONCONTROLSELECT = 0x0000040c;
enum DISPID_HTMLDOCUMENTEVENTS_ONMOUSEWHEEL = 0x00000409;
enum DISPID_HTMLDOCUMENTEVENTS_ONFOCUSIN = 0x00000418;
enum DISPID_HTMLDOCUMENTEVENTS_ONFOCUSOUT = 0x00000419;
enum DISPID_HTMLDOCUMENTEVENTS_ONACTIVATE = 0x00000414;
enum DISPID_HTMLDOCUMENTEVENTS_ONDEACTIVATE = 0x00000415;
enum DISPID_HTMLDOCUMENTEVENTS_ONBEFOREACTIVATE = 0x00000417;
enum DISPID_HTMLDOCUMENTEVENTS_ONBEFOREDEACTIVATE = 0x0000040a;
enum DISPID_IWEBBRIDGE_URL = 0x00000001;
enum DISPID_IWEBBRIDGE_SCROLLBAR = 0x00000002;
enum DISPID_IWEBBRIDGE_EMBED = 0x00000003;
enum DISPID_IWEBBRIDGE_EVENT = 0x00000480;
enum DISPID_IWEBBRIDGE_READYSTATE = 0xfffffffffffffdf3;
enum DISPID_IWEBBRIDGE_ABOUTBOX = 0xfffffffffffffdd8;
enum DISPID_IWBSCRIPTCONTROL_RAISEEVENT = 0x00000001;
enum DISPID_IWBSCRIPTCONTROL_BUBBLEEVENT = 0x00000002;
enum DISPID_IWBSCRIPTCONTROL_SETCONTEXTMENU = 0x00000003;
enum DISPID_IWBSCRIPTCONTROL_SELECTABLECONTENT = 0x00000004;
enum DISPID_IWBSCRIPTCONTROL_FROZEN = 0x00000005;
enum DISPID_IWBSCRIPTCONTROL_SCROLLBAR = 0x00000007;
enum DISPID_IWBSCRIPTCONTROL_VERSION = 0x00000008;
enum DISPID_IWBSCRIPTCONTROL_VISIBILITY = 0x00000009;
enum DISPID_IWBSCRIPTCONTROL_ONVISIBILITYCHANGE = 0x0000000a;
enum DISPID_DWEBBRIDGEEVENTS_ONSCRIPTLETEVENT = 0x00000001;
enum DISPID_DWEBBRIDGEEVENTS_ONREADYSTATECHANGE = 0xfffffffffffffd9f;
enum DISPID_DWEBBRIDGEEVENTS_ONCLICK = 0xfffffffffffffda8;
enum DISPID_DWEBBRIDGEEVENTS_ONDBLCLICK = 0xfffffffffffffda7;
enum DISPID_DWEBBRIDGEEVENTS_ONKEYDOWN = 0xfffffffffffffda6;
enum DISPID_DWEBBRIDGEEVENTS_ONKEYUP = 0xfffffffffffffda4;
enum DISPID_DWEBBRIDGEEVENTS_ONKEYPRESS = 0xfffffffffffffda5;
enum DISPID_DWEBBRIDGEEVENTS_ONMOUSEDOWN = 0xfffffffffffffda3;
enum DISPID_DWEBBRIDGEEVENTS_ONMOUSEMOVE = 0xfffffffffffffda2;
enum DISPID_DWEBBRIDGEEVENTS_ONMOUSEUP = 0xfffffffffffffda1;
enum DISPID_IHTMLEMBEDELEMENT_HIDDEN = 0x00010bc2;
enum DISPID_IHTMLEMBEDELEMENT_PALETTE = 0x00010bbc;
enum DISPID_IHTMLEMBEDELEMENT_PLUGINSPAGE = 0x00010bbd;
enum DISPID_IHTMLEMBEDELEMENT_SRC = 0x00010bbe;
enum DISPID_IHTMLEMBEDELEMENT_UNITS = 0x00010bc0;
enum DISPID_IHTMLEMBEDELEMENT_NAME = 0x00010000;
enum DISPID_IHTMLEMBEDELEMENT_WIDTH = 0x00010005;
enum DISPID_IHTMLEMBEDELEMENT_HEIGHT = 0x00010006;
enum DISPID_IHTMLEMBEDELEMENT2_IE8_SRC = 0x0000047e;
enum DISPID_IHTMLEMBEDELEMENT2_IE8_PLUGINSPAGE = 0x0000047f;
enum DISPID_IHTMLAREASCOLLECTION_LENGTH = 0x000005dc;
enum DISPID_IHTMLAREASCOLLECTION__NEWENUM = 0xfffffffffffffffc;
enum DISPID_IHTMLAREASCOLLECTION_ITEM = 0x00000000;
enum DISPID_IHTMLAREASCOLLECTION_TAGS = 0x000005de;
enum DISPID_IHTMLAREASCOLLECTION_ADD = 0x000005df;
enum DISPID_IHTMLAREASCOLLECTION_REMOVE = 0x000005e0;
enum DISPID_IHTMLAREASCOLLECTION2_URNS = 0x000005e1;
enum DISPID_IHTMLAREASCOLLECTION3_NAMEDITEM = 0x000005e2;
enum DISPID_IHTMLAREASCOLLECTION4_IE8_LENGTH = 0x0000047e;
enum DISPID_IHTMLAREASCOLLECTION4_IE8_ITEM = 0x00000480;
enum DISPID_IHTMLAREASCOLLECTION4_IE8_NAMEDITEM = 0x00000481;
enum DISPID_IHTMLMAPELEMENT_AREAS = 0x000003ea;
enum DISPID_IHTMLMAPELEMENT_NAME = 0x00010000;
enum DISPID_IHTMLAREAELEMENT_SHAPE = 0x000003e9;
enum DISPID_IHTMLAREAELEMENT_COORDS = 0x000003ea;
enum DISPID_IHTMLAREAELEMENT_HREF = 0x00000000;
enum DISPID_IHTMLAREAELEMENT_TARGET = 0x000003ec;
enum DISPID_IHTMLAREAELEMENT_ALT = 0x000003ed;
enum DISPID_IHTMLAREAELEMENT_NOHREF = 0x000003ee;
enum DISPID_IHTMLAREAELEMENT_HOST = 0x000003ef;
enum DISPID_IHTMLAREAELEMENT_HOSTNAME = 0x000003f0;
enum DISPID_IHTMLAREAELEMENT_PATHNAME = 0x000003f1;
enum DISPID_IHTMLAREAELEMENT_PORT = 0x000003f2;
enum DISPID_IHTMLAREAELEMENT_PROTOCOL = 0x000003f3;
enum DISPID_IHTMLAREAELEMENT_SEARCH = 0x000003f4;
enum DISPID_IHTMLAREAELEMENT_HASH = 0x000003f5;
enum DISPID_IHTMLAREAELEMENT_ONBLUR = 0x0001177f;
enum DISPID_IHTMLAREAELEMENT_ONFOCUS = 0x0001177e;
enum DISPID_IHTMLAREAELEMENT_TABINDEX = 0x0001000f;
enum DISPID_IHTMLAREAELEMENT_FOCUS = 0x000107d0;
enum DISPID_IHTMLAREAELEMENT_BLUR = 0x000107d2;
enum DISPID_IHTMLAREAELEMENT2_IE8_SHAPE = 0x0000047f;
enum DISPID_IHTMLAREAELEMENT2_IE8_COORDS = 0x00000480;
enum DISPID_IHTMLAREAELEMENT2_IE8_HREF = 0x00000481;
enum DISPID_IHTMLTABLECAPTION_ALIGN = 0x00010048;
enum DISPID_IHTMLTABLECAPTION_VALIGN = 0x000113a7;
enum DISPID_IHTMLCOMMENTELEMENT_TEXT = 0x000003e9;
enum DISPID_IHTMLCOMMENTELEMENT_ATOMIC = 0x000003ea;
enum DISPID_IHTMLCOMMENTELEMENT2_DATA = 0x000003eb;
enum DISPID_IHTMLCOMMENTELEMENT2_LENGTH = 0x000003ec;
enum DISPID_IHTMLCOMMENTELEMENT2_SUBSTRINGDATA = 0x000003ed;
enum DISPID_IHTMLCOMMENTELEMENT2_APPENDDATA = 0x000003ee;
enum DISPID_IHTMLCOMMENTELEMENT2_INSERTDATA = 0x000003ef;
enum DISPID_IHTMLCOMMENTELEMENT2_DELETEDATA = 0x000003f0;
enum DISPID_IHTMLCOMMENTELEMENT2_REPLACEDATA = 0x000003f1;
enum DISPID_IHTMLCOMMENTELEMENT3_IE9_SUBSTRINGDATA = 0x000003f2;
enum DISPID_IHTMLCOMMENTELEMENT3_IE9_INSERTDATA = 0x000003f3;
enum DISPID_IHTMLCOMMENTELEMENT3_IE9_DELETEDATA = 0x000003f4;
enum DISPID_IHTMLCOMMENTELEMENT3_IE9_REPLACEDATA = 0x000003f5;
enum DISPID_IHTMLPHRASEELEMENT2_CITE = 0x000003e9;
enum DISPID_IHTMLPHRASEELEMENT2_DATETIME = 0x000003ea;
enum DISPID_IHTMLPHRASEELEMENT3_IE8_CITE = 0x0000047e;
enum DISPID_IHTMLTABLE_COLS = 0x000003e9;
enum DISPID_IHTMLTABLE_BORDER = 0x000003ea;
enum DISPID_IHTMLTABLE_FRAME = 0x000003ec;
enum DISPID_IHTMLTABLE_RULES = 0x000003eb;
enum DISPID_IHTMLTABLE_CELLSPACING = 0x000003ed;
enum DISPID_IHTMLTABLE_CELLPADDING = 0x000003ee;
enum DISPID_IHTMLTABLE_BACKGROUND = 0x00011389;
enum DISPID_IHTMLTABLE_BGCOLOR = 0xfffffffffffffe0b;
enum DISPID_IHTMLTABLE_BORDERCOLOR = 0x000113a4;
enum DISPID_IHTMLTABLE_BORDERCOLORLIGHT = 0x000113a5;
enum DISPID_IHTMLTABLE_BORDERCOLORDARK = 0x000113a6;
enum DISPID_IHTMLTABLE_ALIGN = 0x00010049;
enum DISPID_IHTMLTABLE_REFRESH = 0x000003f7;
enum DISPID_IHTMLTABLE_ROWS = 0x000003f8;
enum DISPID_IHTMLTABLE_WIDTH = 0x00010005;
enum DISPID_IHTMLTABLE_HEIGHT = 0x00010006;
enum DISPID_IHTMLTABLE_DATAPAGESIZE = 0x000003f9;
enum DISPID_IHTMLTABLE_NEXTPAGE = 0x000003fa;
enum DISPID_IHTMLTABLE_PREVIOUSPAGE = 0x000003fb;
enum DISPID_IHTMLTABLE_THEAD = 0x000003fc;
enum DISPID_IHTMLTABLE_TFOOT = 0x000003fd;
enum DISPID_IHTMLTABLE_TBODIES = 0x00000400;
enum DISPID_IHTMLTABLE_CAPTION = 0x00000401;
enum DISPID_IHTMLTABLE_CREATETHEAD = 0x00000402;
enum DISPID_IHTMLTABLE_DELETETHEAD = 0x00000403;
enum DISPID_IHTMLTABLE_CREATETFOOT = 0x00000404;
enum DISPID_IHTMLTABLE_DELETETFOOT = 0x00000405;
enum DISPID_IHTMLTABLE_CREATECAPTION = 0x00000406;
enum DISPID_IHTMLTABLE_DELETECAPTION = 0x00000407;
enum DISPID_IHTMLTABLE_INSERTROW = 0x00000408;
enum DISPID_IHTMLTABLE_DELETEROW = 0x00000409;
enum DISPID_IHTMLTABLE_READYSTATE = 0x000113fc;
enum DISPID_IHTMLTABLE_ONREADYSTATECHANGE = 0x00011789;
enum DISPID_IHTMLTABLE2_FIRSTPAGE = 0x0000040b;
enum DISPID_IHTMLTABLE2_LASTPAGE = 0x0000040c;
enum DISPID_IHTMLTABLE2_CELLS = 0x0000040d;
enum DISPID_IHTMLTABLE2_MOVEROW = 0x0000040e;
enum DISPID_IHTMLTABLE3_SUMMARY = 0x0000040f;
enum DISPID_IHTMLTABLE4_IE9_THEAD = 0x00000410;
enum DISPID_IHTMLTABLE4_IE9_TFOOT = 0x00000411;
enum DISPID_IHTMLTABLE4_IE9_CAPTION = 0x00000412;
enum DISPID_IHTMLTABLE4_IE9_INSERTROW = 0x00000413;
enum DISPID_IHTMLTABLE4_IE9_DELETEROW = 0x00000414;
enum DISPID_IHTMLTABLE4_CREATETBODY = 0x00000415;
enum DISPID_IHTMLTABLECOL_SPAN = 0x000003e9;
enum DISPID_IHTMLTABLECOL_WIDTH = 0x00010005;
enum DISPID_IHTMLTABLECOL_ALIGN = 0x00010048;
enum DISPID_IHTMLTABLECOL_VALIGN = 0x000113a7;
enum DISPID_IHTMLTABLECOL2_CH = 0x000003ea;
enum DISPID_IHTMLTABLECOL2_CHOFF = 0x000003eb;
enum DISPID_IHTMLTABLECOL3_IE9_CH = 0x000003ec;
enum DISPID_IHTMLTABLECOL3_IE9_CHOFF = 0x000003ed;
enum DISPID_IHTMLTABLESECTION_ALIGN = 0x00010048;
enum DISPID_IHTMLTABLESECTION_VALIGN = 0x000113a7;
enum DISPID_IHTMLTABLESECTION_BGCOLOR = 0xfffffffffffffe0b;
enum DISPID_IHTMLTABLESECTION_ROWS = 0x000003e8;
enum DISPID_IHTMLTABLESECTION_INSERTROW = 0x000003e9;
enum DISPID_IHTMLTABLESECTION_DELETEROW = 0x000003ea;
enum DISPID_IHTMLTABLESECTION2_MOVEROW = 0x000003eb;
enum DISPID_IHTMLTABLESECTION3_CH = 0x000003ec;
enum DISPID_IHTMLTABLESECTION3_CHOFF = 0x000003ed;
enum DISPID_IHTMLTABLESECTION4_IE9_CH = 0x000003ee;
enum DISPID_IHTMLTABLESECTION4_IE9_CHOFF = 0x000003ef;
enum DISPID_IHTMLTABLESECTION4_IE9_INSERTROW = 0x000003f0;
enum DISPID_IHTMLTABLESECTION4_IE9_DELETEROW = 0x000003f1;
enum DISPID_IHTMLTABLEROW_ALIGN = 0x00010048;
enum DISPID_IHTMLTABLEROW_VALIGN = 0x000113a7;
enum DISPID_IHTMLTABLEROW_BGCOLOR = 0xfffffffffffffe0b;
enum DISPID_IHTMLTABLEROW_BORDERCOLOR = 0x000113a4;
enum DISPID_IHTMLTABLEROW_BORDERCOLORLIGHT = 0x000113a5;
enum DISPID_IHTMLTABLEROW_BORDERCOLORDARK = 0x000113a6;
enum DISPID_IHTMLTABLEROW_ROWINDEX = 0x000003e8;
enum DISPID_IHTMLTABLEROW_SECTIONROWINDEX = 0x000003e9;
enum DISPID_IHTMLTABLEROW_CELLS = 0x000003ea;
enum DISPID_IHTMLTABLEROW_INSERTCELL = 0x000003eb;
enum DISPID_IHTMLTABLEROW_DELETECELL = 0x000003ec;
enum DISPID_IHTMLTABLEROW2_HEIGHT = 0x00010006;
enum DISPID_IHTMLTABLEROW3_CH = 0x000003f1;
enum DISPID_IHTMLTABLEROW3_CHOFF = 0x000003f2;
enum DISPID_IHTMLTABLEROW4_IE9_CH = 0x000003f3;
enum DISPID_IHTMLTABLEROW4_IE9_CHOFF = 0x000003f4;
enum DISPID_IHTMLTABLEROW4_IE9_INSERTCELL = 0x000003f5;
enum DISPID_IHTMLTABLEROW4_IE9_DELETECELL = 0x000003f6;
enum DISPID_IHTMLTABLEROWMETRICS_CLIENTHEIGHT = 0x000107e3;
enum DISPID_IHTMLTABLEROWMETRICS_CLIENTWIDTH = 0x000107e4;
enum DISPID_IHTMLTABLEROWMETRICS_CLIENTTOP = 0x000107e5;
enum DISPID_IHTMLTABLEROWMETRICS_CLIENTLEFT = 0x000107e6;
enum DISPID_IHTMLTABLECELL_ROWSPAN = 0x000007d1;
enum DISPID_IHTMLTABLECELL_COLSPAN = 0x000007d2;
enum DISPID_IHTMLTABLECELL_ALIGN = 0x00010048;
enum DISPID_IHTMLTABLECELL_VALIGN = 0x000113a7;
enum DISPID_IHTMLTABLECELL_BGCOLOR = 0xfffffffffffffe0b;
enum DISPID_IHTMLTABLECELL_NOWRAP = 0x0001138d;
enum DISPID_IHTMLTABLECELL_BACKGROUND = 0x00011389;
enum DISPID_IHTMLTABLECELL_BORDERCOLOR = 0x000113a4;
enum DISPID_IHTMLTABLECELL_BORDERCOLORLIGHT = 0x000113a5;
enum DISPID_IHTMLTABLECELL_BORDERCOLORDARK = 0x000113a6;
enum DISPID_IHTMLTABLECELL_WIDTH = 0x00010005;
enum DISPID_IHTMLTABLECELL_HEIGHT = 0x00010006;
enum DISPID_IHTMLTABLECELL_CELLINDEX = 0x000007d3;
enum DISPID_IHTMLTABLECELL2_ABBR = 0x000007d4;
enum DISPID_IHTMLTABLECELL2_AXIS = 0x000007d5;
enum DISPID_IHTMLTABLECELL2_CH = 0x000007d6;
enum DISPID_IHTMLTABLECELL2_CHOFF = 0x000007d7;
enum DISPID_IHTMLTABLECELL2_HEADERS = 0x000007d8;
enum DISPID_IHTMLTABLECELL2_SCOPE = 0x000007d9;
enum DISPID_IHTMLTABLECELL3_IE9_CH = 0x000007da;
enum DISPID_IHTMLTABLECELL3_IE9_CHOFF = 0x000007db;
enum DISPID_IHTMLSCRIPTELEMENT_SRC = 0x000003e9;
enum DISPID_IHTMLSCRIPTELEMENT_HTMLFOR = 0x000003ec;
enum DISPID_IHTMLSCRIPTELEMENT_EVENT = 0x000003ed;
enum DISPID_IHTMLSCRIPTELEMENT_TEXT = 0x000003ee;
enum DISPID_IHTMLSCRIPTELEMENT_DEFER = 0x000003ef;
enum DISPID_IHTMLSCRIPTELEMENT_READYSTATE = 0x000113fc;
enum DISPID_IHTMLSCRIPTELEMENT_ONERROR = 0x0001178d;
enum DISPID_IHTMLSCRIPTELEMENT_TYPE = 0x000003f1;
enum DISPID_IHTMLSCRIPTELEMENT2_CHARSET = 0x000003f2;
enum DISPID_IHTMLSCRIPTELEMENT3_IE8_SRC = 0x0000047e;
enum DISPID_IHTMLSCRIPTELEMENT4_USEDCHARSET = 0x000003f3;
enum DISPID_HTMLSCRIPTEVENTS2_ONERROR = 0x000003ea;
enum DISPID_HTMLSCRIPTEVENTS_ONERROR = 0x000003ea;
enum DISPID_IHTMLOBJECTELEMENT_OBJECT = 0x00010bb9;
enum DISPID_IHTMLOBJECTELEMENT_CLASSID = 0x00010bba;
enum DISPID_IHTMLOBJECTELEMENT_DATA = 0x00010bbb;
enum DISPID_IHTMLOBJECTELEMENT_RECORDSET = 0x00010bbd;
enum DISPID_IHTMLOBJECTELEMENT_ALIGN = 0x00010049;
enum DISPID_IHTMLOBJECTELEMENT_NAME = 0x00010000;
enum DISPID_IHTMLOBJECTELEMENT_CODEBASE = 0x00010bbe;
enum DISPID_IHTMLOBJECTELEMENT_CODETYPE = 0x00010bbf;
enum DISPID_IHTMLOBJECTELEMENT_CODE = 0x00010bc0;
enum DISPID_IHTMLOBJECTELEMENT_BASEHREF = 0x00010002;
enum DISPID_IHTMLOBJECTELEMENT_TYPE = 0x00010bc1;
enum DISPID_IHTMLOBJECTELEMENT_FORM = 0x000107d4;
enum DISPID_IHTMLOBJECTELEMENT_WIDTH = 0x00010005;
enum DISPID_IHTMLOBJECTELEMENT_HEIGHT = 0x00010006;
enum DISPID_IHTMLOBJECTELEMENT_READYSTATE = 0x00010bc2;
enum DISPID_IHTMLOBJECTELEMENT_ONREADYSTATECHANGE = 0x00011789;
enum DISPID_IHTMLOBJECTELEMENT_ONERROR = 0x0001178d;
enum DISPID_IHTMLOBJECTELEMENT_ALTHTML = 0x00010bc3;
enum DISPID_IHTMLOBJECTELEMENT_VSPACE = 0x00010bc4;
enum DISPID_IHTMLOBJECTELEMENT_HSPACE = 0x00010bc5;
enum DISPID_IHTMLOBJECTELEMENT2_NAMEDRECORDSET = 0x00010bc6;
enum DISPID_IHTMLOBJECTELEMENT2_CLASSID = 0x00010bba;
enum DISPID_IHTMLOBJECTELEMENT2_DATA = 0x00010bbb;
enum DISPID_IHTMLOBJECTELEMENT3_ARCHIVE = 0x00010bc7;
enum DISPID_IHTMLOBJECTELEMENT3_ALT = 0x00010bc8;
enum DISPID_IHTMLOBJECTELEMENT3_DECLARE = 0x00010bc9;
enum DISPID_IHTMLOBJECTELEMENT3_STANDBY = 0x00010bca;
enum DISPID_IHTMLOBJECTELEMENT3_BORDER = 0x00010bcb;
enum DISPID_IHTMLOBJECTELEMENT3_USEMAP = 0x00010bcc;
enum DISPID_IHTMLOBJECTELEMENT4_CONTENTDOCUMENT = 0x00010bd6;
enum DISPID_IHTMLOBJECTELEMENT4_IE8_CODEBASE = 0x00010bd7;
enum DISPID_IHTMLOBJECTELEMENT4_IE8_DATA = 0x00010bd8;
enum DISPID_IHTMLOBJECTELEMENT5_IE9_OBJECT = 0x00010bd9;
enum DISPID_IHTMLPARAMELEMENT_NAME = 0x000003e9;
enum DISPID_IHTMLPARAMELEMENT_VALUE = 0x000003ea;
enum DISPID_IHTMLPARAMELEMENT_TYPE = 0x000003eb;
enum DISPID_IHTMLPARAMELEMENT_VALUETYPE = 0x000003ec;
enum DISPID_IHTMLPARAMELEMENT2_NAME = 0x000003e9;
enum DISPID_IHTMLPARAMELEMENT2_TYPE = 0x000003eb;
enum DISPID_IHTMLPARAMELEMENT2_VALUE = 0x000003ea;
enum DISPID_IHTMLPARAMELEMENT2_IE8_VALUETYPE = 0x0000047e;
enum DISPID_HTMLOBJECTELEMENTEVENTS2_ONBEFOREUPDATE = 0x00010004;
enum DISPID_HTMLOBJECTELEMENTEVENTS2_ONAFTERUPDATE = 0x00010005;
enum DISPID_HTMLOBJECTELEMENTEVENTS2_ONERRORUPDATE = 0x0001000d;
enum DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWEXIT = 0x00010006;
enum DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWENTER = 0x00010007;
enum DISPID_HTMLOBJECTELEMENTEVENTS2_ONDATASETCHANGED = 0x0001000e;
enum DISPID_HTMLOBJECTELEMENTEVENTS2_ONDATAAVAILABLE = 0x0001000f;
enum DISPID_HTMLOBJECTELEMENTEVENTS2_ONDATASETCOMPLETE = 0x00010010;
enum DISPID_HTMLOBJECTELEMENTEVENTS2_ONERROR = 0x00010013;
enum DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWSDELETE = 0x00010020;
enum DISPID_HTMLOBJECTELEMENTEVENTS2_ONROWSINSERTED = 0x00010021;
enum DISPID_HTMLOBJECTELEMENTEVENTS2_ONCELLCHANGE = 0x00010022;
enum DISPID_HTMLOBJECTELEMENTEVENTS2_ONREADYSTATECHANGE = 0x00010014;
enum DISPID_HTMLOBJECTELEMENTEVENTS_ONBEFOREUPDATE = 0x00010004;
enum DISPID_HTMLOBJECTELEMENTEVENTS_ONAFTERUPDATE = 0x00010005;
enum DISPID_HTMLOBJECTELEMENTEVENTS_ONERRORUPDATE = 0x0001000d;
enum DISPID_HTMLOBJECTELEMENTEVENTS_ONROWEXIT = 0x00010006;
enum DISPID_HTMLOBJECTELEMENTEVENTS_ONROWENTER = 0x00010007;
enum DISPID_HTMLOBJECTELEMENTEVENTS_ONDATASETCHANGED = 0x0001000e;
enum DISPID_HTMLOBJECTELEMENTEVENTS_ONDATAAVAILABLE = 0x0001000f;
enum DISPID_HTMLOBJECTELEMENTEVENTS_ONDATASETCOMPLETE = 0x00010010;
enum DISPID_HTMLOBJECTELEMENTEVENTS_ONERROR = 0x00010013;
enum DISPID_HTMLOBJECTELEMENTEVENTS_ONROWSDELETE = 0x00010020;
enum DISPID_HTMLOBJECTELEMENTEVENTS_ONROWSINSERTED = 0x00010021;
enum DISPID_HTMLOBJECTELEMENTEVENTS_ONCELLCHANGE = 0x00010022;
enum DISPID_HTMLOBJECTELEMENTEVENTS_ONREADYSTATECHANGE = 0x00010014;
enum DISPID_IHTMLFRAMEBASE_SRC = 0x00010bb8;
enum DISPID_IHTMLFRAMEBASE_NAME = 0x00010000;
enum DISPID_IHTMLFRAMEBASE_BORDER = 0x00010bba;
enum DISPID_IHTMLFRAMEBASE_FRAMEBORDER = 0x00010bbb;
enum DISPID_IHTMLFRAMEBASE_FRAMESPACING = 0x00010bbc;
enum DISPID_IHTMLFRAMEBASE_MARGINWIDTH = 0x00010bbd;
enum DISPID_IHTMLFRAMEBASE_MARGINHEIGHT = 0x00010bbe;
enum DISPID_IHTMLFRAMEBASE_NORESIZE = 0x00010bbf;
enum DISPID_IHTMLFRAMEBASE_SCROLLING = 0x00010bc0;
enum DISPID_IHTMLFRAMEBASE2_CONTENTWINDOW = 0x00010bc1;
enum DISPID_IHTMLFRAMEBASE2_ONLOAD = 0x00011790;
enum DISPID_IHTMLFRAMEBASE2_ONREADYSTATECHANGE = 0x00011789;
enum DISPID_IHTMLFRAMEBASE2_READYSTATE = 0x000113fc;
enum DISPID_IHTMLFRAMEBASE2_ALLOWTRANSPARENCY = 0x00011456;
enum DISPID_IHTMLFRAMEBASE3_LONGDESC = 0x00010bc2;
enum DISPID_HTMLFRAMESITEEVENTS2_ONLOAD = 0x000003eb;
enum DISPID_HTMLFRAMESITEEVENTS_ONLOAD = 0x000003eb;
enum DISPID_IHTMLFRAMEELEMENT_BORDERCOLOR = 0x00010fa1;
enum DISPID_IHTMLFRAMEELEMENT2_HEIGHT = 0x00010006;
enum DISPID_IHTMLFRAMEELEMENT2_WIDTH = 0x00010005;
enum DISPID_IHTMLFRAMEELEMENT3_CONTENTDOCUMENT = 0x00011018;
enum DISPID_IHTMLFRAMEELEMENT3_IE8_SRC = 0x00011019;
enum DISPID_IHTMLFRAMEELEMENT3_IE8_LONGDESC = 0x0001101a;
enum DISPID_IHTMLFRAMEELEMENT3_IE8_FRAMEBORDER = 0x0001101b;
enum DISPID_IHTMLIFRAMEELEMENT_VSPACE = 0x00010fa1;
enum DISPID_IHTMLIFRAMEELEMENT_HSPACE = 0x00010fa2;
enum DISPID_IHTMLIFRAMEELEMENT_ALIGN = 0x00010049;
enum DISPID_IHTMLIFRAMEELEMENT2_HEIGHT = 0x00010006;
enum DISPID_IHTMLIFRAMEELEMENT2_WIDTH = 0x00010005;
enum DISPID_IHTMLIFRAMEELEMENT3_CONTENTDOCUMENT = 0x00011018;
enum DISPID_IHTMLIFRAMEELEMENT3_IE8_SRC = 0x00011019;
enum DISPID_IHTMLIFRAMEELEMENT3_IE8_LONGDESC = 0x0001101a;
enum DISPID_IHTMLIFRAMEELEMENT3_IE8_FRAMEBORDER = 0x0001101b;
enum DISPID_IHTMLDIVPOSITION_ALIGN = 0x00010049;
enum DISPID_IHTMLFIELDSETELEMENT_ALIGN = 0x00010049;
enum DISPID_IHTMLFIELDSETELEMENT2_FORM = 0x000107d4;
enum DISPID_IHTMLLEGENDELEMENT_ALIGN = 0x00010049;
enum DISPID_IHTMLLEGENDELEMENT2_FORM = 0x000107d4;
enum DISPID_IHTMLSPANFLOW_ALIGN = 0x00010049;
enum DISPID_IHTMLFRAMESETELEMENT_ROWS = 0x000003e8;
enum DISPID_IHTMLFRAMESETELEMENT_COLS = 0x000003e9;
enum DISPID_IHTMLFRAMESETELEMENT_BORDER = 0x000003ea;
enum DISPID_IHTMLFRAMESETELEMENT_BORDERCOLOR = 0x000003eb;
enum DISPID_IHTMLFRAMESETELEMENT_FRAMEBORDER = 0x000003ec;
enum DISPID_IHTMLFRAMESETELEMENT_FRAMESPACING = 0x000003ed;
enum DISPID_IHTMLFRAMESETELEMENT_NAME = 0x00010000;
enum DISPID_IHTMLFRAMESETELEMENT_ONLOAD = 0x00011790;
enum DISPID_IHTMLFRAMESETELEMENT_ONUNLOAD = 0x00011791;
enum DISPID_IHTMLFRAMESETELEMENT_ONBEFOREUNLOAD = 0x00011797;
enum DISPID_IHTMLFRAMESETELEMENT2_ONBEFOREPRINT = 0x000117b2;
enum DISPID_IHTMLFRAMESETELEMENT2_ONAFTERPRINT = 0x000117b3;
enum DISPID_IHTMLFRAMESETELEMENT3_ONHASHCHANGE = 0x000117dd;
enum DISPID_IHTMLFRAMESETELEMENT3_ONMESSAGE = 0x000117de;
enum DISPID_IHTMLFRAMESETELEMENT3_ONOFFLINE = 0x000117dc;
enum DISPID_IHTMLFRAMESETELEMENT3_ONONLINE = 0x000117db;
enum DISPID_IHTMLFRAMESETELEMENT3_ONSTORAGE = 0x000117d4;
enum DISPID_IHTMLBGSOUND_SRC = 0x000003e9;
enum DISPID_IHTMLBGSOUND_LOOP = 0x000003ea;
enum DISPID_IHTMLBGSOUND_VOLUME = 0x000003eb;
enum DISPID_IHTMLBGSOUND_BALANCE = 0x000003ec;
enum DISPID_IHTMLFONTNAMESCOLLECTION_LENGTH = 0x000005dd;
enum DISPID_IHTMLFONTNAMESCOLLECTION__NEWENUM = 0xfffffffffffffffc;
enum DISPID_IHTMLFONTNAMESCOLLECTION_ITEM = 0x00000000;
enum DISPID_IHTMLFONTSIZESCOLLECTION_LENGTH = 0x000005de;
enum DISPID_IHTMLFONTSIZESCOLLECTION__NEWENUM = 0xfffffffffffffffc;
enum DISPID_IHTMLFONTSIZESCOLLECTION_FORFONT = 0x000005df;
enum DISPID_IHTMLFONTSIZESCOLLECTION_ITEM = 0x00000000;
enum DISPID_IHTMLOPTIONSHOLDER_DOCUMENT = 0x000005df;
enum DISPID_IHTMLOPTIONSHOLDER_FONTS = 0x000005e0;
enum DISPID_IHTMLOPTIONSHOLDER_EXECARG = 0x000005e1;
enum DISPID_IHTMLOPTIONSHOLDER_ERRORLINE = 0x000005e2;
enum DISPID_IHTMLOPTIONSHOLDER_ERRORCHARACTER = 0x000005e3;
enum DISPID_IHTMLOPTIONSHOLDER_ERRORCODE = 0x000005e4;
enum DISPID_IHTMLOPTIONSHOLDER_ERRORMESSAGE = 0x000005e5;
enum DISPID_IHTMLOPTIONSHOLDER_ERRORDEBUG = 0x000005e6;
enum DISPID_IHTMLOPTIONSHOLDER_UNSECUREDWINDOWOFDOCUMENT = 0x000005e7;
enum DISPID_IHTMLOPTIONSHOLDER_FINDTEXT = 0x000005e8;
enum DISPID_IHTMLOPTIONSHOLDER_ANYTHINGAFTERFRAMESET = 0x000005e9;
enum DISPID_IHTMLOPTIONSHOLDER_SIZES = 0x000005ea;
enum DISPID_IHTMLOPTIONSHOLDER_OPENFILEDLG = 0x000005eb;
enum DISPID_IHTMLOPTIONSHOLDER_SAVEFILEDLG = 0x000005ec;
enum DISPID_IHTMLOPTIONSHOLDER_CHOOSECOLORDLG = 0x000005ed;
enum DISPID_IHTMLOPTIONSHOLDER_SHOWSECURITYINFO = 0x000005ee;
enum DISPID_IHTMLOPTIONSHOLDER_ISAPARTMENTMODEL = 0x000005ef;
enum DISPID_IHTMLOPTIONSHOLDER_GETCHARSET = 0x000005f0;
enum DISPID_IHTMLOPTIONSHOLDER_SECURECONNECTIONINFO = 0x000005f1;
enum DISPID_IHTMLSTYLEELEMENT_TYPE = 0x000003ea;
enum DISPID_IHTMLSTYLEELEMENT_READYSTATE = 0x000113fc;
enum DISPID_IHTMLSTYLEELEMENT_ONREADYSTATECHANGE = 0x00011789;
enum DISPID_IHTMLSTYLEELEMENT_ONLOAD = 0x00011790;
enum DISPID_IHTMLSTYLEELEMENT_ONERROR = 0x0001178d;
enum DISPID_IHTMLSTYLEELEMENT_STYLESHEET = 0x000003ec;
enum DISPID_IHTMLSTYLEELEMENT_DISABLED = 0x0001004c;
enum DISPID_IHTMLSTYLEELEMENT_MEDIA = 0x000003ee;
enum DISPID_IHTMLSTYLEELEMENT2_SHEET = 0x000003ef;
enum DISPID_HTMLSTYLEELEMENTEVENTS2_ONLOAD = 0x000003eb;
enum DISPID_HTMLSTYLEELEMENTEVENTS2_ONERROR = 0x000003ea;
enum DISPID_HTMLSTYLEELEMENTEVENTS_ONLOAD = 0x000003eb;
enum DISPID_HTMLSTYLEELEMENTEVENTS_ONERROR = 0x000003ea;
enum DISPID_IHTMLSTYLEFONTFACE_FONTSRC = 0x000113e9;
enum DISPID_IHTMLSTYLEFONTFACE2_STYLE = 0x0001004a;
enum DISPID_IHTMLXDOMAINREQUEST_RESPONSETEXT = 0x000003eb;
enum DISPID_IHTMLXDOMAINREQUEST_TIMEOUT = 0x000003ec;
enum DISPID_IHTMLXDOMAINREQUEST_CONTENTTYPE = 0x000003ed;
enum DISPID_IHTMLXDOMAINREQUEST_ONPROGRESS = 0x000003ee;
enum DISPID_IHTMLXDOMAINREQUEST_ONERROR = 0x0001178d;
enum DISPID_IHTMLXDOMAINREQUEST_ONTIMEOUT = 0x000117e0;
enum DISPID_IHTMLXDOMAINREQUEST_ONLOAD = 0x00011790;
enum DISPID_IHTMLXDOMAINREQUEST_ABORT = 0x000003f2;
enum DISPID_IHTMLXDOMAINREQUEST_OPEN = 0x000003f3;
enum DISPID_IHTMLXDOMAINREQUEST_SEND = 0x000003f4;
enum DISPID_IHTMLXDOMAINREQUESTFACTORY_CREATE = 0x00000000;
enum DISPID_IHTMLSTORAGE_LENGTH = 0x000003e9;
enum DISPID_IHTMLSTORAGE_REMAININGSPACE = 0x000003ea;
enum DISPID_IHTMLSTORAGE_KEY = 0x000003ee;
enum DISPID_IHTMLSTORAGE_GETITEM = 0x000003eb;
enum DISPID_IHTMLSTORAGE_SETITEM = 0x000003ec;
enum DISPID_IHTMLSTORAGE_REMOVEITEM = 0x000003ed;
enum DISPID_IHTMLSTORAGE_CLEAR = 0x000003ef;
enum DISPID_IHTMLSTORAGE2_IE9_SETITEM = 0x000003f0;
enum DISPID_IEVENTTARGET_ADDEVENTLISTENER = 0x000101fe;
enum DISPID_IEVENTTARGET_REMOVEEVENTLISTENER = 0x000101ff;
enum DISPID_IEVENTTARGET_DISPATCHEVENT = 0x00010200;
enum DISPID_IDOMEVENT_BUBBLES = 0x000003e9;
enum DISPID_IDOMEVENT_CANCELABLE = 0x000003ea;
enum DISPID_IDOMEVENT_CURRENTTARGET = 0x000003eb;
enum DISPID_IDOMEVENT_DEFAULTPREVENTED = 0x000003ec;
enum DISPID_IDOMEVENT_EVENTPHASE = 0x000003ed;
enum DISPID_IDOMEVENT_TARGET = 0x000003ee;
enum DISPID_IDOMEVENT_TIMESTAMP = 0x000003ef;
enum DISPID_IDOMEVENT_TYPE = 0x000003f0;
enum DISPID_IDOMEVENT_INITEVENT = 0x000003f1;
enum DISPID_IDOMEVENT_PREVENTDEFAULT = 0x000003f2;
enum DISPID_IDOMEVENT_STOPPROPAGATION = 0x000003f3;
enum DISPID_IDOMEVENT_STOPIMMEDIATEPROPAGATION = 0x000003f4;
enum DISPID_IDOMEVENT_ISTRUSTED = 0x000003f5;
enum DISPID_IDOMEVENT_CANCELBUBBLE = 0x000003f6;
enum DISPID_IDOMEVENT_SRCELEMENT = 0x000003f7;
enum DISPID_IDOMUIEVENT_VIEW = 0x00000402;
enum DISPID_IDOMUIEVENT_DETAIL = 0x00000403;
enum DISPID_IDOMUIEVENT_INITUIEVENT = 0x00000404;
enum DISPID_IDOMMOUSEEVENT_SCREENX = 0x0000041b;
enum DISPID_IDOMMOUSEEVENT_SCREENY = 0x0000041c;
enum DISPID_IDOMMOUSEEVENT_CLIENTX = 0x0000041d;
enum DISPID_IDOMMOUSEEVENT_CLIENTY = 0x0000041e;
enum DISPID_IDOMMOUSEEVENT_CTRLKEY = 0x0000041f;
enum DISPID_IDOMMOUSEEVENT_SHIFTKEY = 0x00000420;
enum DISPID_IDOMMOUSEEVENT_ALTKEY = 0x00000421;
enum DISPID_IDOMMOUSEEVENT_METAKEY = 0x00000422;
enum DISPID_IDOMMOUSEEVENT_BUTTON = 0x00000423;
enum DISPID_IDOMMOUSEEVENT_RELATEDTARGET = 0x00000424;
enum DISPID_IDOMMOUSEEVENT_INITMOUSEEVENT = 0x00000425;
enum DISPID_IDOMMOUSEEVENT_GETMODIFIERSTATE = 0x00000426;
enum DISPID_IDOMMOUSEEVENT_BUTTONS = 0x00000427;
enum DISPID_IDOMMOUSEEVENT_FROMELEMENT = 0x00000428;
enum DISPID_IDOMMOUSEEVENT_TOELEMENT = 0x00000429;
enum DISPID_IDOMMOUSEEVENT_X = 0x0000042a;
enum DISPID_IDOMMOUSEEVENT_Y = 0x0000042b;
enum DISPID_IDOMMOUSEEVENT_OFFSETX = 0x0000042c;
enum DISPID_IDOMMOUSEEVENT_OFFSETY = 0x0000042d;
enum DISPID_IDOMMOUSEEVENT_PAGEX = 0x0000042e;
enum DISPID_IDOMMOUSEEVENT_PAGEY = 0x0000042f;
enum DISPID_IDOMMOUSEEVENT_LAYERX = 0x00000430;
enum DISPID_IDOMMOUSEEVENT_LAYERY = 0x00000431;
enum DISPID_IDOMMOUSEEVENT_WHICH = 0x00000432;
enum DISPID_IDOMDRAGEVENT_DATATRANSFER = 0x00000579;
enum DISPID_IDOMDRAGEVENT_INITDRAGEVENT = 0x0000057a;
enum DISPID_IDOMMOUSEWHEELEVENT_WHEELDELTA = 0x00000434;
enum DISPID_IDOMMOUSEWHEELEVENT_INITMOUSEWHEELEVENT = 0x00000435;
enum DISPID_IDOMWHEELEVENT_DELTAX = 0x0000044d;
enum DISPID_IDOMWHEELEVENT_DELTAY = 0x0000044e;
enum DISPID_IDOMWHEELEVENT_DELTAZ = 0x0000044f;
enum DISPID_IDOMWHEELEVENT_DELTAMODE = 0x00000450;
enum DISPID_IDOMWHEELEVENT_INITWHEELEVENT = 0x00000451;
enum DISPID_IDOMTEXTEVENT_DATA = 0x00000466;
enum DISPID_IDOMTEXTEVENT_INPUTMETHOD = 0x00000467;
enum DISPID_IDOMTEXTEVENT_INITTEXTEVENT = 0x00000468;
enum DISPID_IDOMTEXTEVENT_LOCALE = 0x00000469;
enum DISPID_IDOMKEYBOARDEVENT_KEY = 0x0000047f;
enum DISPID_IDOMKEYBOARDEVENT_LOCATION = 0x00000480;
enum DISPID_IDOMKEYBOARDEVENT_CTRLKEY = 0x00000481;
enum DISPID_IDOMKEYBOARDEVENT_SHIFTKEY = 0x00000482;
enum DISPID_IDOMKEYBOARDEVENT_ALTKEY = 0x00000483;
enum DISPID_IDOMKEYBOARDEVENT_METAKEY = 0x00000484;
enum DISPID_IDOMKEYBOARDEVENT_REPEAT = 0x00000485;
enum DISPID_IDOMKEYBOARDEVENT_GETMODIFIERSTATE = 0x00000486;
enum DISPID_IDOMKEYBOARDEVENT_INITKEYBOARDEVENT = 0x00000487;
enum DISPID_IDOMKEYBOARDEVENT_KEYCODE = 0x00000488;
enum DISPID_IDOMKEYBOARDEVENT_CHARCODE = 0x00000489;
enum DISPID_IDOMKEYBOARDEVENT_WHICH = 0x0000048a;
enum DISPID_IDOMKEYBOARDEVENT_IE9_CHAR = 0x0000048b;
enum DISPID_IDOMKEYBOARDEVENT_LOCALE = 0x0000048c;
enum DISPID_IDOMCOMPOSITIONEVENT_DATA = 0x00000498;
enum DISPID_IDOMCOMPOSITIONEVENT_INITCOMPOSITIONEVENT = 0x00000499;
enum DISPID_IDOMCOMPOSITIONEVENT_LOCALE = 0x0000049a;
enum DISPID_IDOMMUTATIONEVENT_RELATEDNODE = 0x000004ca;
enum DISPID_IDOMMUTATIONEVENT_PREVVALUE = 0x000004cb;
enum DISPID_IDOMMUTATIONEVENT_NEWVALUE = 0x000004cc;
enum DISPID_IDOMMUTATIONEVENT_ATTRNAME = 0x000004cd;
enum DISPID_IDOMMUTATIONEVENT_ATTRCHANGE = 0x000004ce;
enum DISPID_IDOMMUTATIONEVENT_INITMUTATIONEVENT = 0x000004cf;
enum DISPID_IDOMBEFOREUNLOADEVENT_RETURNVALUE = 0x00000560;
enum DISPID_IDOMFOCUSEVENT_RELATEDTARGET = 0x000004e3;
enum DISPID_IDOMFOCUSEVENT_INITFOCUSEVENT = 0x000004e4;
enum DISPID_IDOMCUSTOMEVENT_DETAIL = 0x000004b1;
enum DISPID_IDOMCUSTOMEVENT_INITCUSTOMEVENT = 0x000004b2;
enum DISPID_ICANVASGRADIENT_ADDCOLORSTOP = 0x000003e8;
enum DISPID_ICANVASTEXTMETRICS_WIDTH = 0x000003e8;
enum DISPID_ICANVASIMAGEDATA_WIDTH = 0x000003e8;
enum DISPID_ICANVASIMAGEDATA_HEIGHT = 0x000003e9;
enum DISPID_ICANVASIMAGEDATA_DATA = 0x000003ea;
enum DISPID_ICANVASPIXELARRAY_LENGTH = 0x000003e8;
enum DISPID_ICANVASRENDERINGCONTEXT2D_CANVAS = 0x000003e8;
enum DISPID_ICANVASRENDERINGCONTEXT2D_RESTORE = 0x000003e9;
enum DISPID_ICANVASRENDERINGCONTEXT2D_SAVE = 0x000003ea;
enum DISPID_ICANVASRENDERINGCONTEXT2D_ROTATE = 0x000003eb;
enum DISPID_ICANVASRENDERINGCONTEXT2D_SCALE = 0x000003ec;
enum DISPID_ICANVASRENDERINGCONTEXT2D_SETTRANSFORM = 0x000003ed;
enum DISPID_ICANVASRENDERINGCONTEXT2D_TRANSFORM = 0x000003ee;
enum DISPID_ICANVASRENDERINGCONTEXT2D_TRANSLATE = 0x000003ef;
enum DISPID_ICANVASRENDERINGCONTEXT2D_GLOBALALPHA = 0x000003f0;
enum DISPID_ICANVASRENDERINGCONTEXT2D_GLOBALCOMPOSITEOPERATION = 0x000003f1;
enum DISPID_ICANVASRENDERINGCONTEXT2D_FILLSTYLE = 0x000003f2;
enum DISPID_ICANVASRENDERINGCONTEXT2D_STROKESTYLE = 0x000003f3;
enum DISPID_ICANVASRENDERINGCONTEXT2D_CREATELINEARGRADIENT = 0x000003f4;
enum DISPID_ICANVASRENDERINGCONTEXT2D_CREATERADIALGRADIENT = 0x000003f5;
enum DISPID_ICANVASRENDERINGCONTEXT2D_CREATEPATTERN = 0x000003f6;
enum DISPID_ICANVASRENDERINGCONTEXT2D_LINECAP = 0x000003f7;
enum DISPID_ICANVASRENDERINGCONTEXT2D_LINEJOIN = 0x000003f8;
enum DISPID_ICANVASRENDERINGCONTEXT2D_LINEWIDTH = 0x000003f9;
enum DISPID_ICANVASRENDERINGCONTEXT2D_MITERLIMIT = 0x000003fa;
enum DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWBLUR = 0x000003fb;
enum DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWCOLOR = 0x000003fc;
enum DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWOFFSETX = 0x000003fd;
enum DISPID_ICANVASRENDERINGCONTEXT2D_SHADOWOFFSETY = 0x000003fe;
enum DISPID_ICANVASRENDERINGCONTEXT2D_CLEARRECT = 0x000003ff;
enum DISPID_ICANVASRENDERINGCONTEXT2D_FILLRECT = 0x00000400;
enum DISPID_ICANVASRENDERINGCONTEXT2D_STROKERECT = 0x00000401;
enum DISPID_ICANVASRENDERINGCONTEXT2D_ARC = 0x00000402;
enum DISPID_ICANVASRENDERINGCONTEXT2D_ARCTO = 0x00000403;
enum DISPID_ICANVASRENDERINGCONTEXT2D_BEGINPATH = 0x00000404;
enum DISPID_ICANVASRENDERINGCONTEXT2D_BEZIERCURVETO = 0x00000405;
enum DISPID_ICANVASRENDERINGCONTEXT2D_CLIP = 0x00000406;
enum DISPID_ICANVASRENDERINGCONTEXT2D_CLOSEPATH = 0x00000407;
enum DISPID_ICANVASRENDERINGCONTEXT2D_FILL = 0x00000408;
enum DISPID_ICANVASRENDERINGCONTEXT2D_LINETO = 0x00000409;
enum DISPID_ICANVASRENDERINGCONTEXT2D_MOVETO = 0x0000040a;
enum DISPID_ICANVASRENDERINGCONTEXT2D_QUADRATICCURVETO = 0x0000040b;
enum DISPID_ICANVASRENDERINGCONTEXT2D_RECT = 0x0000040c;
enum DISPID_ICANVASRENDERINGCONTEXT2D_STROKE = 0x0000040d;
enum DISPID_ICANVASRENDERINGCONTEXT2D_ISPOINTINPATH = 0x0000040e;
enum DISPID_ICANVASRENDERINGCONTEXT2D_FONT = 0x0000040f;
enum DISPID_ICANVASRENDERINGCONTEXT2D_TEXTALIGN = 0x00000410;
enum DISPID_ICANVASRENDERINGCONTEXT2D_TEXTBASELINE = 0x00000411;
enum DISPID_ICANVASRENDERINGCONTEXT2D_FILLTEXT = 0x00000412;
enum DISPID_ICANVASRENDERINGCONTEXT2D_MEASURETEXT = 0x00000413;
enum DISPID_ICANVASRENDERINGCONTEXT2D_STROKETEXT = 0x00000414;
enum DISPID_ICANVASRENDERINGCONTEXT2D_DRAWIMAGE = 0x00000415;
enum DISPID_ICANVASRENDERINGCONTEXT2D_CREATEIMAGEDATA = 0x00000416;
enum DISPID_ICANVASRENDERINGCONTEXT2D_GETIMAGEDATA = 0x00000417;
enum DISPID_ICANVASRENDERINGCONTEXT2D_PUTIMAGEDATA = 0x00000418;
enum DISPID_IHTMLCANVASELEMENT_WIDTH = 0x00010005;
enum DISPID_IHTMLCANVASELEMENT_HEIGHT = 0x00010006;
enum DISPID_IHTMLCANVASELEMENT_GETCONTEXT = 0x000003e9;
enum DISPID_IHTMLCANVASELEMENT_TODATAURL = 0x000003ea;
enum DISPID_IDOMPROGRESSEVENT_LENGTHCOMPUTABLE = 0x0000060f;
enum DISPID_IDOMPROGRESSEVENT_LOADED = 0x00000610;
enum DISPID_IDOMPROGRESSEVENT_TOTAL = 0x00000611;
enum DISPID_IDOMPROGRESSEVENT_INITPROGRESSEVENT = 0x00000612;
enum DISPID_IDOMMESSAGEEVENT_DATA = 0x0000052e;
enum DISPID_IDOMMESSAGEEVENT_ORIGIN = 0x0000052f;
enum DISPID_IDOMMESSAGEEVENT_SOURCE = 0x00000530;
enum DISPID_IDOMMESSAGEEVENT_INITMESSAGEEVENT = 0x00000531;
enum DISPID_IDOMSITEMODEEVENT_BUTTONID = 0x00000515;
enum DISPID_IDOMSITEMODEEVENT_ACTIONURL = 0x00000516;
enum DISPID_IDOMSTORAGEEVENT_KEY = 0x00000547;
enum DISPID_IDOMSTORAGEEVENT_OLDVALUE = 0x00000548;
enum DISPID_IDOMSTORAGEEVENT_NEWVALUE = 0x00000549;
enum DISPID_IDOMSTORAGEEVENT_URL = 0x0000054a;
enum DISPID_IDOMSTORAGEEVENT_STORAGEAREA = 0x0000054b;
enum DISPID_IDOMSTORAGEEVENT_INITSTORAGEEVENT = 0x0000054c;
enum DISPID_IHTMLXMLHTTPREQUEST_READYSTATE = 0x000003ea;
enum DISPID_IHTMLXMLHTTPREQUEST_RESPONSEBODY = 0x000003eb;
enum DISPID_IHTMLXMLHTTPREQUEST_RESPONSETEXT = 0x000003ec;
enum DISPID_IHTMLXMLHTTPREQUEST_RESPONSEXML = 0x000003ed;
enum DISPID_IHTMLXMLHTTPREQUEST_STATUS = 0x000003ee;
enum DISPID_IHTMLXMLHTTPREQUEST_STATUSTEXT = 0x000003ef;
enum DISPID_IHTMLXMLHTTPREQUEST_ONREADYSTATECHANGE = 0x00011789;
enum DISPID_IHTMLXMLHTTPREQUEST_ABORT = 0x000003f1;
enum DISPID_IHTMLXMLHTTPREQUEST_OPEN = 0x000003f2;
enum DISPID_IHTMLXMLHTTPREQUEST_SEND = 0x000003f3;
enum DISPID_IHTMLXMLHTTPREQUEST_GETALLRESPONSEHEADERS = 0x000003f4;
enum DISPID_IHTMLXMLHTTPREQUEST_GETRESPONSEHEADER = 0x000003f5;
enum DISPID_IHTMLXMLHTTPREQUEST_SETREQUESTHEADER = 0x000003f6;
enum DISPID_IHTMLXMLHTTPREQUEST2_TIMEOUT = 0x000003f7;
enum DISPID_IHTMLXMLHTTPREQUEST2_ONTIMEOUT = 0x000117e0;
enum DISPID_IHTMLXMLHTTPREQUESTFACTORY_CREATE = 0x00000000;
enum DISPID_HTMLXMLHTTPREQUESTEVENTS_ONTIMEOUT = 0x000003f8;
enum DISPID_HTMLXMLHTTPREQUESTEVENTS_ONREADYSTATECHANGE = 0x000003f0;
enum DISPID_ISVGANGLE_UNITTYPE = 0x000003e8;
enum DISPID_ISVGANGLE_VALUE = 0x000003e9;
enum DISPID_ISVGANGLE_VALUEINSPECIFIEDUNITS = 0x000003ea;
enum DISPID_ISVGANGLE_VALUEASSTRING = 0x000003eb;
enum DISPID_ISVGANGLE_NEWVALUESPECIFIEDUNITS = 0x000003ec;
enum DISPID_ISVGANGLE_CONVERTTOSPECIFIEDUNITS = 0x000003ed;
enum DISPID_ISVGSTYLABLE_CLASSNAME = 0x000003e9;
enum DISPID_ISVGLOCATABLE_NEARESTVIEWPORTELEMENT = 0x000003ea;
enum DISPID_ISVGLOCATABLE_FARTHESTVIEWPORTELEMENT = 0x000003eb;
enum DISPID_ISVGLOCATABLE_GETBBOX = 0x000003ec;
enum DISPID_ISVGLOCATABLE_GETCTM = 0x000003ed;
enum DISPID_ISVGLOCATABLE_GETSCREENCTM = 0x000003ee;
enum DISPID_ISVGLOCATABLE_GETTRANSFORMTOELEMENT = 0x000003ef;
enum DISPID_ISVGTRANSFORMABLE_TRANSFORM = 0x000003f1;
enum DISPID_ISVGTESTS_REQUIREDFEATURES = 0x000003f3;
enum DISPID_ISVGTESTS_REQUIREDEXTENSIONS = 0x000003f5;
enum DISPID_ISVGTESTS_SYSTEMLANGUAGE = 0x000003f7;
enum DISPID_ISVGTESTS_HASEXTENSION = 0x000003f8;
enum DISPID_ISVGLANGSPACE_XMLLANG = 0x000003f9;
enum DISPID_ISVGLANGSPACE_XMLSPACE = 0x000003fa;
enum DISPID_ISVGEXTERNALRESOURCESREQUIRED_EXTERNALRESOURCESREQUIRED = 0x000003fc;
enum DISPID_ISVGFITTOVIEWBOX_VIEWBOX = 0x000003fe;
enum DISPID_ISVGFITTOVIEWBOX_PRESERVEASPECTRATIO = 0x00000400;
enum DISPID_ISVGZOOMANDPAN_ZOOMANDPAN = 0x00000401;
enum DISPID_ISVGURIREFERENCE_HREF = 0x00000402;
enum DISPID_ISVGANIMATEDANGLE_BASEVAL = 0x000003e8;
enum DISPID_ISVGANIMATEDANGLE_ANIMVAL = 0x000003e9;
enum DISPID_ISVGANIMATEDTRANSFORMLIST_BASEVAL = 0x000003e8;
enum DISPID_ISVGANIMATEDTRANSFORMLIST_ANIMVAL = 0x000003e9;
enum DISPID_ISVGANIMATEDBOOLEAN_BASEVAL = 0x000003e8;
enum DISPID_ISVGANIMATEDBOOLEAN_ANIMVAL = 0x000003e9;
enum DISPID_ISVGANIMATEDENUMERATION_BASEVAL = 0x000003e8;
enum DISPID_ISVGANIMATEDENUMERATION_ANIMVAL = 0x000003e9;
enum DISPID_ISVGANIMATEDINTEGER_BASEVAL = 0x000003e8;
enum DISPID_ISVGANIMATEDINTEGER_ANIMVAL = 0x000003e9;
enum DISPID_ISVGANIMATEDLENGTH_BASEVAL = 0x000003e8;
enum DISPID_ISVGANIMATEDLENGTH_ANIMVAL = 0x000003e9;
enum DISPID_ISVGANIMATEDLENGTHLIST_BASEVAL = 0x000003e8;
enum DISPID_ISVGANIMATEDLENGTHLIST_ANIMVAL = 0x000003e9;
enum DISPID_ISVGANIMATEDNUMBER_BASEVAL = 0x000003e8;
enum DISPID_ISVGANIMATEDNUMBER_ANIMVAL = 0x000003e9;
enum DISPID_ISVGANIMATEDNUMBERLIST_BASEVAL = 0x000003e8;
enum DISPID_ISVGANIMATEDNUMBERLIST_ANIMVAL = 0x000003e9;
enum DISPID_ISVGANIMATEDRECT_BASEVAL = 0x000003e8;
enum DISPID_ISVGANIMATEDRECT_ANIMVAL = 0x000003e9;
enum DISPID_ISVGANIMATEDSTRING_BASEVAL = 0x000003e8;
enum DISPID_ISVGANIMATEDSTRING_ANIMVAL = 0x000003e9;
enum DISPID_ISVGCLIPPATHELEMENT_CLIPPATHUNITS = 0x0000041b;
enum DISPID_ISVGDOCUMENT_ROOTELEMENT = 0x0000045c;
enum DISPID_IGETSVGDOCUMENT_GETSVGDOCUMENT = 0x0001004f;
enum DISPID_ISVGELEMENT_XMLBASE = 0x00000408;
enum DISPID_ISVGELEMENT_OWNERSVGELEMENT = 0x00000409;
enum DISPID_ISVGELEMENT_VIEWPORTELEMENT = 0x0000040a;
enum DISPID_ISVGELEMENT_FOCUSABLE = 0x0000040c;
enum DISPID_ISVGLENGTH_UNITTYPE = 0x000003e8;
enum DISPID_ISVGLENGTH_VALUE = 0x000003e9;
enum DISPID_ISVGLENGTH_VALUEINSPECIFIEDUNITS = 0x000003ea;
enum DISPID_ISVGLENGTH_VALUEASSTRING = 0x000003eb;
enum DISPID_ISVGLENGTH_NEWVALUESPECIFIEDUNITS = 0x000003ec;
enum DISPID_ISVGLENGTH_CONVERTTOSPECIFIEDUNITS = 0x000003ed;
enum DISPID_ISVGLENGTHLIST_NUMBEROFITEMS = 0x000003e8;
enum DISPID_ISVGLENGTHLIST_CLEAR = 0x000003e9;
enum DISPID_ISVGLENGTHLIST_INITIALIZE = 0x000003ea;
enum DISPID_ISVGLENGTHLIST_GETITEM = 0x000003eb;
enum DISPID_ISVGLENGTHLIST_INSERTITEMBEFORE = 0x000003ec;
enum DISPID_ISVGLENGTHLIST_REPLACEITEM = 0x000003ed;
enum DISPID_ISVGLENGTHLIST_REMOVEITEM = 0x000003ee;
enum DISPID_ISVGLENGTHLIST_APPENDITEM = 0x000003ef;
enum DISPID_ISVGMATRIX_A = 0x000003e8;
enum DISPID_ISVGMATRIX_B = 0x000003e9;
enum DISPID_ISVGMATRIX_C = 0x000003ea;
enum DISPID_ISVGMATRIX_D = 0x000003eb;
enum DISPID_ISVGMATRIX_E = 0x000003ec;
enum DISPID_ISVGMATRIX_F = 0x000003ed;
enum DISPID_ISVGMATRIX_MULTIPLY = 0x000003ee;
enum DISPID_ISVGMATRIX_INVERSE = 0x000003ef;
enum DISPID_ISVGMATRIX_TRANSLATE = 0x000003f0;
enum DISPID_ISVGMATRIX_SCALE = 0x000003f1;
enum DISPID_ISVGMATRIX_SCALENONUNIFORM = 0x000003f2;
enum DISPID_ISVGMATRIX_ROTATE = 0x000003f3;
enum DISPID_ISVGMATRIX_ROTATEFROMVECTOR = 0x000003f4;
enum DISPID_ISVGMATRIX_FLIPX = 0x000003f5;
enum DISPID_ISVGMATRIX_FLIPY = 0x000003f6;
enum DISPID_ISVGMATRIX_SKEWX = 0x000003f7;
enum DISPID_ISVGMATRIX_SKEWY = 0x000003f8;
enum DISPID_ISVGNUMBER_VALUE = 0x000003e8;
enum DISPID_ISVGNUMBERLIST_NUMBEROFITEMS = 0x000003e8;
enum DISPID_ISVGNUMBERLIST_CLEAR = 0x000003e9;
enum DISPID_ISVGNUMBERLIST_INITIALIZE = 0x000003ea;
enum DISPID_ISVGNUMBERLIST_GETITEM = 0x000003eb;
enum DISPID_ISVGNUMBERLIST_INSERTITEMBEFORE = 0x000003ec;
enum DISPID_ISVGNUMBERLIST_REPLACEITEM = 0x000003ed;
enum DISPID_ISVGNUMBERLIST_REMOVEITEM = 0x000003ee;
enum DISPID_ISVGNUMBERLIST_APPENDITEM = 0x000003ef;
enum DISPID_ISVGPATTERNELEMENT_PATTERNUNITS = 0x0000041b;
enum DISPID_ISVGPATTERNELEMENT_PATTERNCONTENTUNITS = 0x0000041d;
enum DISPID_ISVGPATTERNELEMENT_PATTERNTRANSFORM = 0x0000041f;
enum DISPID_ISVGPATTERNELEMENT_X = 0x00000421;
enum DISPID_ISVGPATTERNELEMENT_Y = 0x00000423;
enum DISPID_ISVGPATTERNELEMENT_WIDTH = 0x00000425;
enum DISPID_ISVGPATTERNELEMENT_HEIGHT = 0x00000427;
enum DISPID_ISVGPATHSEG_PATHSEGTYPE = 0x000003e8;
enum DISPID_ISVGPATHSEG_PATHSEGTYPEASLETTER = 0x000003e9;
enum DISPID_ISVGPATHSEGARCABS_X = 0x000003fc;
enum DISPID_ISVGPATHSEGARCABS_Y = 0x000003fd;
enum DISPID_ISVGPATHSEGARCABS_R1 = 0x000003fe;
enum DISPID_ISVGPATHSEGARCABS_R2 = 0x000003ff;
enum DISPID_ISVGPATHSEGARCABS_ANGLE = 0x00000400;
enum DISPID_ISVGPATHSEGARCABS_LARGEARCFLAG = 0x00000401;
enum DISPID_ISVGPATHSEGARCABS_SWEEPFLAG = 0x00000402;
enum DISPID_ISVGPATHSEGARCREL_X = 0x000003fc;
enum DISPID_ISVGPATHSEGARCREL_Y = 0x000003fd;
enum DISPID_ISVGPATHSEGARCREL_R1 = 0x000003fe;
enum DISPID_ISVGPATHSEGARCREL_R2 = 0x000003ff;
enum DISPID_ISVGPATHSEGARCREL_ANGLE = 0x00000400;
enum DISPID_ISVGPATHSEGARCREL_LARGEARCFLAG = 0x00000401;
enum DISPID_ISVGPATHSEGARCREL_SWEEPFLAG = 0x00000402;
enum DISPID_ISVGPATHSEGMOVETOABS_X = 0x000003fc;
enum DISPID_ISVGPATHSEGMOVETOABS_Y = 0x000003fd;
enum DISPID_ISVGPATHSEGMOVETOREL_X = 0x000003fc;
enum DISPID_ISVGPATHSEGMOVETOREL_Y = 0x000003fd;
enum DISPID_ISVGPATHSEGLINETOABS_X = 0x000003fc;
enum DISPID_ISVGPATHSEGLINETOABS_Y = 0x000003fd;
enum DISPID_ISVGPATHSEGLINETOREL_X = 0x000003fc;
enum DISPID_ISVGPATHSEGLINETOREL_Y = 0x000003fd;
enum DISPID_ISVGPATHSEGCURVETOCUBICABS_X = 0x000003fc;
enum DISPID_ISVGPATHSEGCURVETOCUBICABS_Y = 0x000003fd;
enum DISPID_ISVGPATHSEGCURVETOCUBICABS_X1 = 0x000003fe;
enum DISPID_ISVGPATHSEGCURVETOCUBICABS_Y1 = 0x000003ff;
enum DISPID_ISVGPATHSEGCURVETOCUBICABS_X2 = 0x00000400;
enum DISPID_ISVGPATHSEGCURVETOCUBICABS_Y2 = 0x00000401;
enum DISPID_ISVGPATHSEGCURVETOCUBICREL_X = 0x000003fc;
enum DISPID_ISVGPATHSEGCURVETOCUBICREL_Y = 0x000003fd;
enum DISPID_ISVGPATHSEGCURVETOCUBICREL_X1 = 0x000003fe;
enum DISPID_ISVGPATHSEGCURVETOCUBICREL_Y1 = 0x000003ff;
enum DISPID_ISVGPATHSEGCURVETOCUBICREL_X2 = 0x00000400;
enum DISPID_ISVGPATHSEGCURVETOCUBICREL_Y2 = 0x00000401;
enum DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_X = 0x000003fc;
enum DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_Y = 0x000003fd;
enum DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_X2 = 0x000003fe;
enum DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHABS_Y2 = 0x000003ff;
enum DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_X = 0x000003fc;
enum DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_Y = 0x000003fd;
enum DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_X2 = 0x000003fe;
enum DISPID_ISVGPATHSEGCURVETOCUBICSMOOTHREL_Y2 = 0x000003ff;
enum DISPID_ISVGPATHSEGCURVETOQUADRATICABS_X = 0x000003fc;
enum DISPID_ISVGPATHSEGCURVETOQUADRATICABS_Y = 0x000003fd;
enum DISPID_ISVGPATHSEGCURVETOQUADRATICABS_X1 = 0x000003fe;
enum DISPID_ISVGPATHSEGCURVETOQUADRATICABS_Y1 = 0x000003ff;
enum DISPID_ISVGPATHSEGCURVETOQUADRATICREL_X = 0x000003fc;
enum DISPID_ISVGPATHSEGCURVETOQUADRATICREL_Y = 0x000003fd;
enum DISPID_ISVGPATHSEGCURVETOQUADRATICREL_X1 = 0x000003fe;
enum DISPID_ISVGPATHSEGCURVETOQUADRATICREL_Y1 = 0x000003ff;
enum DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHABS_X = 0x000003fc;
enum DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHABS_Y = 0x000003fd;
enum DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHREL_X = 0x000003fc;
enum DISPID_ISVGPATHSEGCURVETOQUADRATICSMOOTHREL_Y = 0x000003fd;
enum DISPID_ISVGPATHSEGLINETOHORIZONTALABS_X = 0x000003fc;
enum DISPID_ISVGPATHSEGLINETOHORIZONTALREL_X = 0x000003fc;
enum DISPID_ISVGPATHSEGLINETOVERTICALABS_Y = 0x000003fc;
enum DISPID_ISVGPATHSEGLINETOVERTICALREL_Y = 0x000003fc;
enum DISPID_ISVGPATHSEGLIST_NUMBEROFITEMS = 0x000003e8;
enum DISPID_ISVGPATHSEGLIST_CLEAR = 0x000003e9;
enum DISPID_ISVGPATHSEGLIST_INITIALIZE = 0x000003ea;
enum DISPID_ISVGPATHSEGLIST_GETITEM = 0x000003eb;
enum DISPID_ISVGPATHSEGLIST_INSERTITEMBEFORE = 0x000003ec;
enum DISPID_ISVGPATHSEGLIST_REPLACEITEM = 0x000003ed;
enum DISPID_ISVGPATHSEGLIST_REMOVEITEM = 0x000003ee;
enum DISPID_ISVGPATHSEGLIST_APPENDITEM = 0x000003ef;
enum DISPID_ISVGPOINT_X = 0x000003e8;
enum DISPID_ISVGPOINT_Y = 0x000003e9;
enum DISPID_ISVGPOINT_MATRIXTRANSFORM = 0x000003ea;
enum DISPID_ISVGPOINTLIST_NUMBEROFITEMS = 0x000003e8;
enum DISPID_ISVGPOINTLIST_CLEAR = 0x000003e9;
enum DISPID_ISVGPOINTLIST_INITIALIZE = 0x000003ea;
enum DISPID_ISVGPOINTLIST_GETITEM = 0x000003eb;
enum DISPID_ISVGPOINTLIST_INSERTITEMBEFORE = 0x000003ec;
enum DISPID_ISVGPOINTLIST_REPLACEITEM = 0x000003ed;
enum DISPID_ISVGPOINTLIST_REMOVEITEM = 0x000003ee;
enum DISPID_ISVGPOINTLIST_APPENDITEM = 0x000003ef;
enum DISPID_ISVGRECT_X = 0x000003e8;
enum DISPID_ISVGRECT_Y = 0x000003e9;
enum DISPID_ISVGRECT_WIDTH = 0x000003ea;
enum DISPID_ISVGRECT_HEIGHT = 0x000003eb;
enum DISPID_ISVGSTRINGLIST_NUMBEROFITEMS = 0x000003e8;
enum DISPID_ISVGSTRINGLIST_CLEAR = 0x000003e9;
enum DISPID_ISVGSTRINGLIST_INITIALIZE = 0x000003ea;
enum DISPID_ISVGSTRINGLIST_GETITEM = 0x000003eb;
enum DISPID_ISVGSTRINGLIST_INSERTITEMBEFORE = 0x000003ec;
enum DISPID_ISVGSTRINGLIST_REPLACEITEM = 0x000003ed;
enum DISPID_ISVGSTRINGLIST_REMOVEITEM = 0x000003ee;
enum DISPID_ISVGSTRINGLIST_APPENDITEM = 0x000003ef;
enum DISPID_ISVGTRANSFORM_TYPE = 0x000003e8;
enum DISPID_ISVGTRANSFORM_MATRIX = 0x000003e9;
enum DISPID_ISVGTRANSFORM_ANGLE = 0x000003ea;
enum DISPID_ISVGTRANSFORM_SETMATRIX = 0x000003eb;
enum DISPID_ISVGTRANSFORM_SETTRANSLATE = 0x000003ec;
enum DISPID_ISVGTRANSFORM_SETSCALE = 0x000003ed;
enum DISPID_ISVGTRANSFORM_SETROTATE = 0x000003ee;
enum DISPID_ISVGTRANSFORM_SETSKEWX = 0x000003ef;
enum DISPID_ISVGTRANSFORM_SETSKEWY = 0x000003f0;
enum DISPID_ISVGSVGELEMENT_X = 0x0000041c;
enum DISPID_ISVGSVGELEMENT_Y = 0x0000041e;
enum DISPID_ISVGSVGELEMENT_WIDTH = 0x00000420;
enum DISPID_ISVGSVGELEMENT_HEIGHT = 0x00000422;
enum DISPID_ISVGSVGELEMENT_CONTENTSCRIPTTYPE = 0x00000423;
enum DISPID_ISVGSVGELEMENT_CONTENTSTYLETYPE = 0x00000424;
enum DISPID_ISVGSVGELEMENT_VIEWPORT = 0x00000425;
enum DISPID_ISVGSVGELEMENT_PIXELUNITTOMILLIMETERX = 0x00000426;
enum DISPID_ISVGSVGELEMENT_PIXELUNITTOMILLIMETERY = 0x00000427;
enum DISPID_ISVGSVGELEMENT_SCREENPIXELTOMILLIMETERX = 0x00000428;
enum DISPID_ISVGSVGELEMENT_SCREENPIXELTOMILLIMETERY = 0x00000429;
enum DISPID_ISVGSVGELEMENT_USECURRENTVIEW = 0x0000042a;
enum DISPID_ISVGSVGELEMENT_CURRENTVIEW = 0x0000042b;
enum DISPID_ISVGSVGELEMENT_CURRENTSCALE = 0x0000042c;
enum DISPID_ISVGSVGELEMENT_CURRENTTRANSLATE = 0x0000042d;
enum DISPID_ISVGSVGELEMENT_SUSPENDREDRAW = 0x0000042e;
enum DISPID_ISVGSVGELEMENT_UNSUSPENDREDRAW = 0x0000042f;
enum DISPID_ISVGSVGELEMENT_UNSUSPENDREDRAWALL = 0x00000430;
enum DISPID_ISVGSVGELEMENT_FORCEREDRAW = 0x00000431;
enum DISPID_ISVGSVGELEMENT_PAUSEANIMATIONS = 0x00000432;
enum DISPID_ISVGSVGELEMENT_UNPAUSEANIMATIONS = 0x00000433;
enum DISPID_ISVGSVGELEMENT_ANIMATIONSPAUSED = 0x00000434;
enum DISPID_ISVGSVGELEMENT_GETCURRENTTIME = 0x00000435;
enum DISPID_ISVGSVGELEMENT_SETCURRENTTIME = 0x00000436;
enum DISPID_ISVGSVGELEMENT_GETINTERSECTIONLIST = 0x00000437;
enum DISPID_ISVGSVGELEMENT_GETENCLOSURELIST = 0x00000438;
enum DISPID_ISVGSVGELEMENT_CHECKINTERSECTION = 0x00000439;
enum DISPID_ISVGSVGELEMENT_CHECKENCLOSURE = 0x0000043a;
enum DISPID_ISVGSVGELEMENT_DESELECTALL = 0x0000043b;
enum DISPID_ISVGSVGELEMENT_CREATESVGNUMBER = 0x0000043c;
enum DISPID_ISVGSVGELEMENT_CREATESVGLENGTH = 0x0000043d;
enum DISPID_ISVGSVGELEMENT_CREATESVGANGLE = 0x0000043e;
enum DISPID_ISVGSVGELEMENT_CREATESVGPOINT = 0x0000043f;
enum DISPID_ISVGSVGELEMENT_CREATESVGMATRIX = 0x00000440;
enum DISPID_ISVGSVGELEMENT_CREATESVGRECT = 0x00000441;
enum DISPID_ISVGSVGELEMENT_CREATESVGTRANSFORM = 0x00000442;
enum DISPID_ISVGSVGELEMENT_CREATESVGTRANSFORMFROMMATRIX = 0x00000443;
enum DISPID_ISVGSVGELEMENT_GETELEMENTBYID = 0x00000444;
enum DISPID_ISVGUSEELEMENT_X = 0x0000041c;
enum DISPID_ISVGUSEELEMENT_Y = 0x0000041e;
enum DISPID_ISVGUSEELEMENT_WIDTH = 0x00000420;
enum DISPID_ISVGUSEELEMENT_HEIGHT = 0x00000422;
enum DISPID_ISVGUSEELEMENT_INSTANCEROOT = 0x00000423;
enum DISPID_ISVGUSEELEMENT_ANIMATEDINSTANCEROOT = 0x00000424;
enum DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_ITEM = 0x00000000;
enum DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_LENGTH = 0x000003e9;
enum DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_PROPERTYAPPLIEDBY = 0x000003ea;
enum DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_PROPERTYAPPLIEDTRACE = 0x000003ec;
enum DISPID_IHTMLSTYLESHEETRULESAPPLIEDCOLLECTION_PROPERTYAPPLIEDTRACELENGTH = 0x000003ed;
enum DISPID_IRULESAPPLIED_ELEMENT = 0x000003e9;
enum DISPID_IRULESAPPLIED_INLINESTYLES = 0x000003ea;
enum DISPID_IRULESAPPLIED_APPLIEDRULES = 0x000003eb;
enum DISPID_IRULESAPPLIED_PROPERTYISINLINE = 0x000003ec;
enum DISPID_IRULESAPPLIED_PROPERTYISINHERITABLE = 0x000003ed;
enum DISPID_IRULESAPPLIED_HASINHERITABLEPROPERTY = 0x000003ee;
enum DISPID_IRULESAPPLIEDCOLLECTION_ITEM = 0x00000000;
enum DISPID_IRULESAPPLIEDCOLLECTION_LENGTH = 0x000003e9;
enum DISPID_IRULESAPPLIEDCOLLECTION_ELEMENT = 0x000003ea;
enum DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYINHERITEDFROM = 0x000003eb;
enum DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYCOUNT = 0x000003ec;
enum DISPID_IRULESAPPLIEDCOLLECTION_PROPERTY = 0x000003ed;
enum DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYINHERITEDTRACE = 0x000003ee;
enum DISPID_IRULESAPPLIEDCOLLECTION_PROPERTYINHERITEDTRACELENGTH = 0x000003ef;
enum DISPID_ISVGTRANSFORMLIST_NUMBEROFITEMS = 0x000003e8;
enum DISPID_ISVGTRANSFORMLIST_CLEAR = 0x000003e9;
enum DISPID_ISVGTRANSFORMLIST_INITIALIZE = 0x000003ea;
enum DISPID_ISVGTRANSFORMLIST_GETITEM = 0x000003eb;
enum DISPID_ISVGTRANSFORMLIST_INSERTITEMBEFORE = 0x000003ec;
enum DISPID_ISVGTRANSFORMLIST_REPLACEITEM = 0x000003ed;
enum DISPID_ISVGTRANSFORMLIST_REMOVEITEM = 0x000003ee;
enum DISPID_ISVGTRANSFORMLIST_APPENDITEM = 0x000003ef;
enum DISPID_ISVGTRANSFORMLIST_CREATESVGTRANSFORMFROMMATRIX = 0x000003f0;
enum DISPID_ISVGTRANSFORMLIST_CONSOLIDATE = 0x000003f1;
enum DISPID_ISVGANIMATEDPOINTS_POINTS = 0x0000041a;
enum DISPID_ISVGANIMATEDPOINTS_ANIMATEDPOINTS = 0x0000041c;
enum DISPID_ISVGCIRCLEELEMENT_CX = 0x0000041c;
enum DISPID_ISVGCIRCLEELEMENT_CY = 0x0000041e;
enum DISPID_ISVGCIRCLEELEMENT_R = 0x00000420;
enum DISPID_ISVGELLIPSEELEMENT_CX = 0x0000041c;
enum DISPID_ISVGELLIPSEELEMENT_CY = 0x0000041e;
enum DISPID_ISVGELLIPSEELEMENT_RX = 0x00000420;
enum DISPID_ISVGELLIPSEELEMENT_RY = 0x00000422;
enum DISPID_ISVGLINEELEMENT_X1 = 0x0000041c;
enum DISPID_ISVGLINEELEMENT_Y1 = 0x0000041e;
enum DISPID_ISVGLINEELEMENT_X2 = 0x00000420;
enum DISPID_ISVGLINEELEMENT_Y2 = 0x00000422;
enum DISPID_ISVGRECTELEMENT_X = 0x0000041c;
enum DISPID_ISVGRECTELEMENT_Y = 0x0000041e;
enum DISPID_ISVGRECTELEMENT_WIDTH = 0x00000420;
enum DISPID_ISVGRECTELEMENT_HEIGHT = 0x00000422;
enum DISPID_ISVGRECTELEMENT_RX = 0x00000424;
enum DISPID_ISVGRECTELEMENT_RY = 0x00000426;
enum DISPID_ISVGANIMATEDPATHDATA_PATHSEGLIST = 0x0000041c;
enum DISPID_ISVGANIMATEDPATHDATA_NORMALIZEDPATHSEGLIST = 0x00000434;
enum DISPID_ISVGANIMATEDPATHDATA_ANIMATEDPATHSEGLIST = 0x00000435;
enum DISPID_ISVGANIMATEDPATHDATA_ANIMATEDNORMALIZEDPATHSEGLIST = 0x00000436;
enum DISPID_ISVGPATHELEMENT_PATHLENGTH = 0x0000041d;
enum DISPID_ISVGPATHELEMENT_GETTOTALLENGTH = 0x00000431;
enum DISPID_ISVGPATHELEMENT_GETPOINTATLENGTH = 0x00000432;
enum DISPID_ISVGPATHELEMENT_GETPATHSEGATLENGTH = 0x00000433;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCLOSEPATH = 0x0000041e;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGMOVETOABS = 0x0000041f;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGMOVETOREL = 0x00000420;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOABS = 0x00000421;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOREL = 0x00000422;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICABS = 0x00000423;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICREL = 0x00000424;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICABS = 0x00000425;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICREL = 0x00000426;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGARCABS = 0x00000427;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGARCREL = 0x00000428;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOHORIZONTALABS = 0x00000429;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOHORIZONTALREL = 0x0000042a;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOVERTICALABS = 0x0000042b;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGLINETOVERTICALREL = 0x0000042c;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICSMOOTHABS = 0x0000042d;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOCUBICSMOOTHREL = 0x0000042e;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICSMOOTHABS = 0x0000042f;
enum DISPID_ISVGPATHELEMENT_CREATESVGPATHSEGCURVETOQUADRATICSMOOTHREL = 0x00000430;
enum DISPID_ISVGPRESERVEASPECTRATIO_ALIGN = 0x000003e8;
enum DISPID_ISVGPRESERVEASPECTRATIO_MEETORSLICE = 0x000003e9;
enum DISPID_ISVGANIMATEDPRESERVEASPECTRATIO_BASEVAL = 0x000003e8;
enum DISPID_ISVGANIMATEDPRESERVEASPECTRATIO_ANIMVAL = 0x000003e9;
enum DISPID_ISVGIMAGEELEMENT_X = 0x0000041b;
enum DISPID_ISVGIMAGEELEMENT_Y = 0x0000041d;
enum DISPID_ISVGIMAGEELEMENT_WIDTH = 0x0000041f;
enum DISPID_ISVGIMAGEELEMENT_HEIGHT = 0x00000421;
enum DISPID_ISVGSTOPELEMENT_OFFSET = 0x0000041b;
enum DISPID_ISVGGRADIENTELEMENT_GRADIENTUNITS = 0x0000041b;
enum DISPID_ISVGGRADIENTELEMENT_GRADIENTTRANSFORM = 0x0000041d;
enum DISPID_ISVGGRADIENTELEMENT_SPREADMETHOD = 0x0000041f;
enum DISPID_ISVGLINEARGRADIENTELEMENT_X1 = 0x0000042f;
enum DISPID_ISVGLINEARGRADIENTELEMENT_Y1 = 0x00000431;
enum DISPID_ISVGLINEARGRADIENTELEMENT_X2 = 0x00000433;
enum DISPID_ISVGLINEARGRADIENTELEMENT_Y2 = 0x00000435;
enum DISPID_ISVGRADIALGRADIENTELEMENT_CX = 0x0000042f;
enum DISPID_ISVGRADIALGRADIENTELEMENT_CY = 0x00000431;
enum DISPID_ISVGRADIALGRADIENTELEMENT_R = 0x00000433;
enum DISPID_ISVGRADIALGRADIENTELEMENT_FX = 0x00000435;
enum DISPID_ISVGRADIALGRADIENTELEMENT_FY = 0x00000437;
enum DISPID_ISVGMASKELEMENT_MASKUNITS = 0x0000041b;
enum DISPID_ISVGMASKELEMENT_MASKCONTENTUNITS = 0x0000041d;
enum DISPID_ISVGMASKELEMENT_X = 0x0000041f;
enum DISPID_ISVGMASKELEMENT_Y = 0x00000421;
enum DISPID_ISVGMASKELEMENT_WIDTH = 0x00000423;
enum DISPID_ISVGMASKELEMENT_HEIGHT = 0x00000425;
enum DISPID_ISVGMARKERELEMENT_REFX = 0x0000041b;
enum DISPID_ISVGMARKERELEMENT_REFY = 0x0000041d;
enum DISPID_ISVGMARKERELEMENT_MARKERUNITS = 0x0000041f;
enum DISPID_ISVGMARKERELEMENT_MARKERWIDTH = 0x00000421;
enum DISPID_ISVGMARKERELEMENT_MARKERHEIGHT = 0x00000423;
enum DISPID_ISVGMARKERELEMENT_ORIENTTYPE = 0x00000425;
enum DISPID_ISVGMARKERELEMENT_ORIENTANGLE = 0x00000426;
enum DISPID_ISVGMARKERELEMENT_SETORIENTTOAUTO = 0x00000427;
enum DISPID_ISVGMARKERELEMENT_SETORIENTTOANGLE = 0x00000428;
enum DISPID_ISVGZOOMEVENT_ZOOMRECTSCREEN = 0x000004fc;
enum DISPID_ISVGZOOMEVENT_PREVIOUSSCALE = 0x000004fd;
enum DISPID_ISVGZOOMEVENT_PREVIOUSTRANSLATE = 0x000004fe;
enum DISPID_ISVGZOOMEVENT_NEWSCALE = 0x000004ff;
enum DISPID_ISVGZOOMEVENT_NEWTRANSLATE = 0x00000500;
enum DISPID_ISVGAELEMENT_TARGET = 0x0000041c;
enum DISPID_ISVGVIEWELEMENT_VIEWTARGET = 0x0000041c;
enum DISPID_IHTMLMEDIAERROR_CODE = 0x000003e8;
enum DISPID_IHTMLTIMERANGES_LENGTH = 0x000003e8;
enum DISPID_IHTMLTIMERANGES_START = 0x000003e9;
enum DISPID_IHTMLTIMERANGES_END = 0x000003ea;
enum DISPID_IHTMLTIMERANGES2_STARTDOUBLE = 0x000003eb;
enum DISPID_IHTMLTIMERANGES2_ENDDOUBLE = 0x000003ec;
enum DISPID_IHTMLMEDIAELEMENT_ERROR = 0x000003e8;
enum DISPID_IHTMLMEDIAELEMENT_SRC = 0x000003e9;
enum DISPID_IHTMLMEDIAELEMENT_CURRENTSRC = 0x000003ea;
enum DISPID_IHTMLMEDIAELEMENT_NETWORKSTATE = 0x000003eb;
enum DISPID_IHTMLMEDIAELEMENT_PRELOAD = 0x000003ec;
enum DISPID_IHTMLMEDIAELEMENT_BUFFERED = 0x000003ed;
enum DISPID_IHTMLMEDIAELEMENT_LOAD = 0x000003ee;
enum DISPID_IHTMLMEDIAELEMENT_CANPLAYTYPE = 0x000003ef;
enum DISPID_IHTMLMEDIAELEMENT_SEEKING = 0x000003f1;
enum DISPID_IHTMLMEDIAELEMENT_CURRENTTIME = 0x000003f2;
enum DISPID_IHTMLMEDIAELEMENT_INITIALTIME = 0x000003f3;
enum DISPID_IHTMLMEDIAELEMENT_DURATION = 0x000003f4;
enum DISPID_IHTMLMEDIAELEMENT_PAUSED = 0x000003f5;
enum DISPID_IHTMLMEDIAELEMENT_DEFAULTPLAYBACKRATE = 0x000003f6;
enum DISPID_IHTMLMEDIAELEMENT_PLAYBACKRATE = 0x000003f7;
enum DISPID_IHTMLMEDIAELEMENT_PLAYED = 0x000003f8;
enum DISPID_IHTMLMEDIAELEMENT_SEEKABLE = 0x000003f9;
enum DISPID_IHTMLMEDIAELEMENT_ENDED = 0x000003fa;
enum DISPID_IHTMLMEDIAELEMENT_AUTOPLAY = 0x000003fb;
enum DISPID_IHTMLMEDIAELEMENT_LOOP = 0x000003fc;
enum DISPID_IHTMLMEDIAELEMENT_PLAY = 0x000003fd;
enum DISPID_IHTMLMEDIAELEMENT_PAUSE = 0x000003fe;
enum DISPID_IHTMLMEDIAELEMENT_CONTROLS = 0x000003ff;
enum DISPID_IHTMLMEDIAELEMENT_VOLUME = 0x00000400;
enum DISPID_IHTMLMEDIAELEMENT_MUTED = 0x00000401;
enum DISPID_IHTMLMEDIAELEMENT_AUTOBUFFER = 0x00000402;
enum DISPID_IHTMLMEDIAELEMENT2_CURRENTTIMEDOUBLE = 0x00000403;
enum DISPID_IHTMLMEDIAELEMENT2_INITIALTIMEDOUBLE = 0x00000404;
enum DISPID_IHTMLMEDIAELEMENT2_DURATIONDOUBLE = 0x00000405;
enum DISPID_IHTMLMEDIAELEMENT2_DEFAULTPLAYBACKRATEDOUBLE = 0x00000406;
enum DISPID_IHTMLMEDIAELEMENT2_PLAYBACKRATEDOUBLE = 0x00000407;
enum DISPID_IHTMLMEDIAELEMENT2_VOLUMEDOUBLE = 0x00000408;
enum DISPID_IHTMLMSMEDIAELEMENT_MSPLAYTODISABLED = 0x00000409;
enum DISPID_IHTMLMSMEDIAELEMENT_MSPLAYTOPRIMARY = 0x0000040a;
enum DISPID_IHTMLSOURCEELEMENT_SRC = 0x000003e8;
enum DISPID_IHTMLSOURCEELEMENT_TYPE = 0x000003e9;
enum DISPID_IHTMLSOURCEELEMENT_MEDIA = 0x000003ea;
enum DISPID_IHTMLVIDEOELEMENT_WIDTH = 0x00010005;
enum DISPID_IHTMLVIDEOELEMENT_HEIGHT = 0x00010006;
enum DISPID_IHTMLVIDEOELEMENT_VIDEOWIDTH = 0x0000041a;
enum DISPID_IHTMLVIDEOELEMENT_VIDEOHEIGHT = 0x0000041b;
enum DISPID_IHTMLVIDEOELEMENT_POSTER = 0x0000041c;
enum DISPID_IHTMLAUDIOELEMENTFACTORY_CREATE = 0x00000000;
enum DISPID_ISVGELEMENTINSTANCE_CORRESPONDINGELEMENT = 0x000003e8;
enum DISPID_ISVGELEMENTINSTANCE_CORRESPONDINGUSEELEMENT = 0x000003e9;
enum DISPID_ISVGELEMENTINSTANCE_PARENTNODE = 0x000003ea;
enum DISPID_ISVGELEMENTINSTANCE_CHILDNODES = 0x000003eb;
enum DISPID_ISVGELEMENTINSTANCE_FIRSTCHILD = 0x000003ec;
enum DISPID_ISVGELEMENTINSTANCE_LASTCHILD = 0x000003ed;
enum DISPID_ISVGELEMENTINSTANCE_PREVIOUSSIBLING = 0x000003ee;
enum DISPID_ISVGELEMENTINSTANCE_NEXTSIBLING = 0x000003ef;
enum DISPID_ISVGELEMENTINSTANCELIST_LENGTH = 0x000003e8;
enum DISPID_ISVGELEMENTINSTANCELIST_ITEM = 0x000003e9;
enum DISPID_IDOMEXCEPTION_CODE = 0x000003e8;
enum DISPID_IDOMEXCEPTION_MESSAGE = 0x000003e9;
enum DISPID_IRANGEEXCEPTION_CODE = 0x000003e8;
enum DISPID_IRANGEEXCEPTION_MESSAGE = 0x000003e9;
enum DISPID_ISVGEXCEPTION_CODE = 0x000003e8;
enum DISPID_ISVGEXCEPTION_MESSAGE = 0x000003e9;
enum DISPID_IEVENTEXCEPTION_CODE = 0x000003e8;
enum DISPID_IEVENTEXCEPTION_MESSAGE = 0x000003e9;
enum DISPID_ISVGSCRIPTELEMENT_TYPE = 0x0000041c;
enum DISPID_ISVGSTYLEELEMENT_TYPE = 0x0000041b;
enum DISPID_ISVGSTYLEELEMENT_MEDIA = 0x0000041c;
enum DISPID_ISVGTEXTCONTENTELEMENT_TEXTLENGTH = 0x0000041d;
enum DISPID_ISVGTEXTCONTENTELEMENT_LENGTHADJUST = 0x0000041b;
enum DISPID_ISVGTEXTCONTENTELEMENT_GETNUMBEROFCHARS = 0x0000041e;
enum DISPID_ISVGTEXTCONTENTELEMENT_GETCOMPUTEDTEXTLENGTH = 0x0000041f;
enum DISPID_ISVGTEXTCONTENTELEMENT_GETSUBSTRINGLENGTH = 0x00000420;
enum DISPID_ISVGTEXTCONTENTELEMENT_GETSTARTPOSITIONOFCHAR = 0x00000421;
enum DISPID_ISVGTEXTCONTENTELEMENT_GETENDPOSITIONOFCHAR = 0x00000422;
enum DISPID_ISVGTEXTCONTENTELEMENT_GETEXTENTOFCHAR = 0x00000423;
enum DISPID_ISVGTEXTCONTENTELEMENT_GETROTATIONOFCHAR = 0x00000424;
enum DISPID_ISVGTEXTCONTENTELEMENT_GETCHARNUMATPOSITION = 0x00000425;
enum DISPID_ISVGTEXTCONTENTELEMENT_SELECTSUBSTRING = 0x00000426;
enum DISPID_ISVGTEXTPOSITIONINGELEMENT_X = 0x0000042f;
enum DISPID_ISVGTEXTPOSITIONINGELEMENT_Y = 0x00000431;
enum DISPID_ISVGTEXTPOSITIONINGELEMENT_DX = 0x00000433;
enum DISPID_ISVGTEXTPOSITIONINGELEMENT_DY = 0x00000435;
enum DISPID_ISVGTEXTPOSITIONINGELEMENT_ROTATE = 0x00000437;
enum DISPID_IDOMDOCUMENTTYPE_NAME = 0x000003e8;
enum DISPID_IDOMDOCUMENTTYPE_ENTITIES = 0x000003e9;
enum DISPID_IDOMDOCUMENTTYPE_NOTATIONS = 0x000003ea;
enum DISPID_IDOMDOCUMENTTYPE_PUBLICID = 0x000003eb;
enum DISPID_IDOMDOCUMENTTYPE_SYSTEMID = 0x000003ec;
enum DISPID_IDOMDOCUMENTTYPE_INTERNALSUBSET = 0x000003ed;
enum DISPID_IDOMNODEITERATOR_ROOT = 0x000003e8;
enum DISPID_IDOMNODEITERATOR_WHATTOSHOW = 0x000003e9;
enum DISPID_IDOMNODEITERATOR_FILTER = 0x000003ea;
enum DISPID_IDOMNODEITERATOR_EXPANDENTITYREFERENCES = 0x000003eb;
enum DISPID_IDOMNODEITERATOR_NEXTNODE = 0x000003f2;
enum DISPID_IDOMNODEITERATOR_PREVIOUSNODE = 0x000003f3;
enum DISPID_IDOMNODEITERATOR_DETACH = 0x000003f4;
enum DISPID_IDOMTREEWALKER_ROOT = 0x000003e8;
enum DISPID_IDOMTREEWALKER_WHATTOSHOW = 0x000003e9;
enum DISPID_IDOMTREEWALKER_FILTER = 0x000003ea;
enum DISPID_IDOMTREEWALKER_EXPANDENTITYREFERENCES = 0x000003eb;
enum DISPID_IDOMTREEWALKER_CURRENTNODE = 0x000003fc;
enum DISPID_IDOMTREEWALKER_PARENTNODE = 0x000003fd;
enum DISPID_IDOMTREEWALKER_FIRSTCHILD = 0x000003fe;
enum DISPID_IDOMTREEWALKER_LASTCHILD = 0x000003ff;
enum DISPID_IDOMTREEWALKER_PREVIOUSSIBLING = 0x00000400;
enum DISPID_IDOMTREEWALKER_NEXTSIBLING = 0x00000401;
enum DISPID_IDOMTREEWALKER_PREVIOUSNODE = 0x00000402;
enum DISPID_IDOMTREEWALKER_NEXTNODE = 0x00000403;
enum DISPID_IDOMPROCESSINGINSTRUCTION_TARGET = 0x000003e8;
enum DISPID_IDOMPROCESSINGINSTRUCTION_DATA = 0x000003e9;
enum DISPID_IHTMLPERFORMANCE_NAVIGATION = 0x000003e8;
enum DISPID_IHTMLPERFORMANCE_TIMING = 0x000003e9;
enum DISPID_IHTMLPERFORMANCE_TOSTRING = 0x000003ea;
enum DISPID_IHTMLPERFORMANCE_TOJSON = 0x000003eb;
enum DISPID_IHTMLPERFORMANCENAVIGATION_TYPE = 0x000003e8;
enum DISPID_IHTMLPERFORMANCENAVIGATION_REDIRECTCOUNT = 0x000003e9;
enum DISPID_IHTMLPERFORMANCENAVIGATION_TOSTRING = 0x000003ea;
enum DISPID_IHTMLPERFORMANCENAVIGATION_TOJSON = 0x000003eb;
enum DISPID_IHTMLPERFORMANCETIMING_NAVIGATIONSTART = 0x000003e8;
enum DISPID_IHTMLPERFORMANCETIMING_UNLOADEVENTSTART = 0x000003e9;
enum DISPID_IHTMLPERFORMANCETIMING_UNLOADEVENTEND = 0x000003ea;
enum DISPID_IHTMLPERFORMANCETIMING_REDIRECTSTART = 0x000003eb;
enum DISPID_IHTMLPERFORMANCETIMING_REDIRECTEND = 0x000003ec;
enum DISPID_IHTMLPERFORMANCETIMING_FETCHSTART = 0x000003ed;
enum DISPID_IHTMLPERFORMANCETIMING_DOMAINLOOKUPSTART = 0x000003ee;
enum DISPID_IHTMLPERFORMANCETIMING_DOMAINLOOKUPEND = 0x000003ef;
enum DISPID_IHTMLPERFORMANCETIMING_CONNECTSTART = 0x000003f0;
enum DISPID_IHTMLPERFORMANCETIMING_CONNECTEND = 0x000003f1;
enum DISPID_IHTMLPERFORMANCETIMING_REQUESTSTART = 0x000003f2;
enum DISPID_IHTMLPERFORMANCETIMING_RESPONSESTART = 0x000003f3;
enum DISPID_IHTMLPERFORMANCETIMING_RESPONSEEND = 0x000003f4;
enum DISPID_IHTMLPERFORMANCETIMING_DOMLOADING = 0x000003f5;
enum DISPID_IHTMLPERFORMANCETIMING_DOMINTERACTIVE = 0x000003f6;
enum DISPID_IHTMLPERFORMANCETIMING_DOMCONTENTLOADEDEVENTSTART = 0x000003f7;
enum DISPID_IHTMLPERFORMANCETIMING_DOMCONTENTLOADEDEVENTEND = 0x000003f8;
enum DISPID_IHTMLPERFORMANCETIMING_DOMCOMPLETE = 0x000003f9;
enum DISPID_IHTMLPERFORMANCETIMING_LOADEVENTSTART = 0x000003fa;
enum DISPID_IHTMLPERFORMANCETIMING_LOADEVENTEND = 0x000003fb;
enum DISPID_IHTMLPERFORMANCETIMING_MSFIRSTPAINT = 0x000003fc;
enum DISPID_IHTMLPERFORMANCETIMING_TOSTRING = 0x000003fd;
enum DISPID_IHTMLPERFORMANCETIMING_TOJSON = 0x000003fe;
enum DISPID_ITEMPLATEPRINTER_STARTDOC = 0x00000001;
enum DISPID_ITEMPLATEPRINTER_STOPDOC = 0x00000002;
enum DISPID_ITEMPLATEPRINTER_PRINTBLANKPAGE = 0x00000003;
enum DISPID_ITEMPLATEPRINTER_PRINTPAGE = 0x00000004;
enum DISPID_ITEMPLATEPRINTER_ENSUREPRINTDIALOGDEFAULTS = 0x00000005;
enum DISPID_ITEMPLATEPRINTER_SHOWPRINTDIALOG = 0x00000006;
enum DISPID_ITEMPLATEPRINTER_SHOWPAGESETUPDIALOG = 0x00000007;
enum DISPID_ITEMPLATEPRINTER_PRINTNONNATIVE = 0x00000008;
enum DISPID_ITEMPLATEPRINTER_PRINTNONNATIVEFRAMES = 0x00000009;
enum DISPID_ITEMPLATEPRINTER_FRAMESETDOCUMENT = 0x0000000a;
enum DISPID_ITEMPLATEPRINTER_FRAMEACTIVE = 0x0000000b;
enum DISPID_ITEMPLATEPRINTER_FRAMEASSHOWN = 0x0000000c;
enum DISPID_ITEMPLATEPRINTER_SELECTION = 0x0000000d;
enum DISPID_ITEMPLATEPRINTER_SELECTEDPAGES = 0x0000000e;
enum DISPID_ITEMPLATEPRINTER_CURRENTPAGE = 0x0000000f;
enum DISPID_ITEMPLATEPRINTER_CURRENTPAGEAVAIL = 0x00000010;
enum DISPID_ITEMPLATEPRINTER_COLLATE = 0x00000011;
enum DISPID_ITEMPLATEPRINTER_DUPLEX = 0x00000012;
enum DISPID_ITEMPLATEPRINTER_COPIES = 0x00000013;
enum DISPID_ITEMPLATEPRINTER_PAGEFROM = 0x00000014;
enum DISPID_ITEMPLATEPRINTER_PAGETO = 0x00000015;
enum DISPID_ITEMPLATEPRINTER_TABLEOFLINKS = 0x00000016;
enum DISPID_ITEMPLATEPRINTER_ALLLINKEDDOCUMENTS = 0x00000017;
enum DISPID_ITEMPLATEPRINTER_HEADER = 0x00000018;
enum DISPID_ITEMPLATEPRINTER_FOOTER = 0x00000019;
enum DISPID_ITEMPLATEPRINTER_MARGINLEFT = 0x0000001a;
enum DISPID_ITEMPLATEPRINTER_MARGINRIGHT = 0x0000001b;
enum DISPID_ITEMPLATEPRINTER_MARGINTOP = 0x0000001c;
enum DISPID_ITEMPLATEPRINTER_MARGINBOTTOM = 0x0000001d;
enum DISPID_ITEMPLATEPRINTER_PAGEWIDTH = 0x0000001e;
enum DISPID_ITEMPLATEPRINTER_PAGEHEIGHT = 0x0000001f;
enum DISPID_ITEMPLATEPRINTER_UNPRINTABLELEFT = 0x00000020;
enum DISPID_ITEMPLATEPRINTER_UNPRINTABLETOP = 0x00000021;
enum DISPID_ITEMPLATEPRINTER_UNPRINTABLERIGHT = 0x00000022;
enum DISPID_ITEMPLATEPRINTER_UNPRINTABLEBOTTOM = 0x00000023;
enum DISPID_ITEMPLATEPRINTER_UPDATEPAGESTATUS = 0x00000024;
enum DISPID_ITEMPLATEPRINTER2_SELECTIONENABLED = 0x00000025;
enum DISPID_ITEMPLATEPRINTER2_FRAMEACTIVEENABLED = 0x00000026;
enum DISPID_ITEMPLATEPRINTER2_ORIENTATION = 0x00000027;
enum DISPID_ITEMPLATEPRINTER2_USEPRINTERCOPYCOLLATE = 0x00000028;
enum DISPID_ITEMPLATEPRINTER2_DEVICESUPPORTS = 0x00000029;
enum DISPID_ITEMPLATEPRINTER3_HEADERFOOTERFONT = 0x0000002a;
enum DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINTOP = 0x0000002b;
enum DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINRIGHT = 0x0000002c;
enum DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINBOTTOM = 0x0000002d;
enum DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINLEFT = 0x0000002e;
enum DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINTOPIMPORTANT = 0x0000002f;
enum DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINRIGHTIMPORTANT = 0x00000030;
enum DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINBOTTOMIMPORTANT = 0x00000031;
enum DISPID_ITEMPLATEPRINTER3_GETPAGEMARGINLEFTIMPORTANT = 0x00000032;
enum DISPID_IPRINTMANAGERTEMPLATEPRINTER_STARTPRINT = 0x000001f5;
enum DISPID_IPRINTMANAGERTEMPLATEPRINTER_DRAWPREVIEWPAGE = 0x000001f6;
enum DISPID_IPRINTMANAGERTEMPLATEPRINTER_SETPAGECOUNT = 0x000001f7;
enum DISPID_IPRINTMANAGERTEMPLATEPRINTER_INVALIDATEPREVIEW = 0x000001f8;
enum DISPID_IPRINTMANAGERTEMPLATEPRINTER_GETPRINTTASKOPTIONVALUE = 0x000001f9;
enum DISPID_IPRINTMANAGERTEMPLATEPRINTER_ENDPRINT = 0x000001fa;
enum DISPID_IPRINTMANAGERTEMPLATEPRINTER2_SHOWHEADERFOOTER = 0x000001fb;
enum DISPID_IPRINTMANAGERTEMPLATEPRINTER2_SHRINKTOFIT = 0x000001fc;
enum DISPID_IPRINTMANAGERTEMPLATEPRINTER2_PERCENTSCALE = 0x000001fd;
enum DISPID_ISVGTEXTPATHELEMENT_STARTOFFSET = 0x0000042f;
enum DISPID_ISVGTEXTPATHELEMENT_METHOD = 0x00000431;
enum DISPID_ISVGTEXTPATHELEMENT_SPACING = 0x00000433;
enum DISPID_IDOMXMLSERIALIZER_SERIALIZETOSTRING = 0x000003e8;
enum DISPID_IDOMPARSER_PARSEFROMSTRING = 0x000003e8;
enum DISPID_IDOMXMLSERIALIZERFACTORY_CREATE = 0x00000000;
enum DISPID_IDOMPARSERFACTORY_CREATE = 0x00000000;
enum DISPID_IHTMLPROGRESSELEMENT_VALUE = 0x00000000;
enum DISPID_IHTMLPROGRESSELEMENT_MAX = 0x000003e8;
enum DISPID_IHTMLPROGRESSELEMENT_POSITION = 0x000003e9;
enum DISPID_IHTMLPROGRESSELEMENT_FORM = 0x000107d4;
enum DISPID_IDOMMSTRANSITIONEVENT_PROPERTYNAME = 0x000005c4;
enum DISPID_IDOMMSTRANSITIONEVENT_ELAPSEDTIME = 0x000005c5;
enum DISPID_IDOMMSTRANSITIONEVENT_INITMSTRANSITIONEVENT = 0x000005c6;
enum DISPID_IDOMMSANIMATIONEVENT_ANIMATIONNAME = 0x000005dd;
enum DISPID_IDOMMSANIMATIONEVENT_ELAPSEDTIME = 0x000005de;
enum DISPID_IDOMMSANIMATIONEVENT_INITMSANIMATIONEVENT = 0x000005df;
enum DISPID_IWEBGEOLOCATION_GETCURRENTPOSITION = 0x000003e9;
enum DISPID_IWEBGEOLOCATION_WATCHPOSITION = 0x000003ea;
enum DISPID_IWEBGEOLOCATION_CLEARWATCH = 0x000003eb;
enum DISPID_IWEBGEOCOORDINATES_LATITUDE = 0x000003e9;
enum DISPID_IWEBGEOCOORDINATES_LONGITUDE = 0x000003ea;
enum DISPID_IWEBGEOCOORDINATES_ALTITUDE = 0x000003eb;
enum DISPID_IWEBGEOCOORDINATES_ACCURACY = 0x000003ec;
enum DISPID_IWEBGEOCOORDINATES_ALTITUDEACCURACY = 0x000003ed;
enum DISPID_IWEBGEOCOORDINATES_HEADING = 0x000003ee;
enum DISPID_IWEBGEOCOORDINATES_SPEED = 0x000003ef;
enum DISPID_IWEBGEOPOSITIONERROR_CODE = 0x000003e9;
enum DISPID_IWEBGEOPOSITIONERROR_MESSAGE = 0x000003ea;
enum DISPID_IWEBGEOPOSITION_COORDS = 0x000003e9;
enum DISPID_IWEBGEOPOSITION_TIMESTAMP = 0x000003ea;
enum DISPID_ICLIENTCAPS_JAVAENABLED = 0x00000001;
enum DISPID_ICLIENTCAPS_COOKIEENABLED = 0x00000002;
enum DISPID_ICLIENTCAPS_CPUCLASS = 0x00000003;
enum DISPID_ICLIENTCAPS_SYSTEMLANGUAGE = 0x00000004;
enum DISPID_ICLIENTCAPS_USERLANGUAGE = 0x00000005;
enum DISPID_ICLIENTCAPS_PLATFORM = 0x00000006;
enum DISPID_ICLIENTCAPS_CONNECTIONSPEED = 0x00000007;
enum DISPID_ICLIENTCAPS_ONLINE = 0x00000008;
enum DISPID_ICLIENTCAPS_COLORDEPTH = 0x00000009;
enum DISPID_ICLIENTCAPS_BUFFERDEPTH = 0x0000000a;
enum DISPID_ICLIENTCAPS_WIDTH = 0x0000000b;
enum DISPID_ICLIENTCAPS_HEIGHT = 0x0000000c;
enum DISPID_ICLIENTCAPS_AVAILHEIGHT = 0x0000000d;
enum DISPID_ICLIENTCAPS_AVAILWIDTH = 0x0000000e;
enum DISPID_ICLIENTCAPS_CONNECTIONTYPE = 0x0000000f;
enum DISPID_ICLIENTCAPS_ISCOMPONENTINSTALLED = 0x00000010;
enum DISPID_ICLIENTCAPS_GETCOMPONENTVERSION = 0x00000011;
enum DISPID_ICLIENTCAPS_COMPAREVERSIONS = 0x00000012;
enum DISPID_ICLIENTCAPS_ADDCOMPONENTREQUEST = 0x00000013;
enum DISPID_ICLIENTCAPS_DOCOMPONENTREQUEST = 0x00000014;
enum DISPID_ICLIENTCAPS_CLEARCOMPONENTREQUEST = 0x00000015;
enum DISPID_IDOMMSMANIPULATIONEVENT_LASTSTATE = 0x000005f6;
enum DISPID_IDOMMSMANIPULATIONEVENT_CURRENTSTATE = 0x000005f7;
enum DISPID_IDOMMSMANIPULATIONEVENT_INITMSMANIPULATIONEVENT = 0x000005f8;
enum DISPID_IDOMCLOSEEVENT_WASCLEAN = 0x000005f6;
enum DISPID_IDOMCLOSEEVENT_INITCLOSEEVENT = 0x000005f9;
enum DISPID_IHTMLAPPLICATIONCACHE_STATUS = 0x000003e9;
enum DISPID_IHTMLAPPLICATIONCACHE_ONCHECKING = 0x00011825;
enum DISPID_IHTMLAPPLICATIONCACHE_ONERROR = 0x0001178d;
enum DISPID_IHTMLAPPLICATIONCACHE_ONNOUPDATE = 0x00011826;
enum DISPID_IHTMLAPPLICATIONCACHE_ONDOWNLOADING = 0x00011827;
enum DISPID_IHTMLAPPLICATIONCACHE_ONPROGRESS = 0x00011801;
enum DISPID_IHTMLAPPLICATIONCACHE_ONUPDATEREADY = 0x00011828;
enum DISPID_IHTMLAPPLICATIONCACHE_ONCACHED = 0x00011829;
enum DISPID_IHTMLAPPLICATIONCACHE_ONOBSOLETE = 0x0001182a;
enum DISPID_IHTMLAPPLICATIONCACHE_UPDATE = 0x000003ea;
enum DISPID_IHTMLAPPLICATIONCACHE_SWAPCACHE = 0x000003eb;
enum DISPID_IHTMLAPPLICATIONCACHE_ABORT = 0x000003ec;
enum DISPID_ILINEINFO_X = 0x000003e9;
enum DISPID_ILINEINFO_BASELINE = 0x000003ea;
enum DISPID_ILINEINFO_TEXTDESCENT = 0x000003eb;
enum DISPID_ILINEINFO_TEXTHEIGHT = 0x000003ec;
enum DISPID_ILINEINFO_LINEDIRECTION = 0x000003ed;
enum DISPID_IHTMLCOMPUTEDSTYLE_BOLD = 0x000003e9;
enum DISPID_IHTMLCOMPUTEDSTYLE_ITALIC = 0x000003ea;
enum DISPID_IHTMLCOMPUTEDSTYLE_UNDERLINE = 0x000003eb;
enum DISPID_IHTMLCOMPUTEDSTYLE_OVERLINE = 0x000003ec;
enum DISPID_IHTMLCOMPUTEDSTYLE_STRIKEOUT = 0x000003ed;
enum DISPID_IHTMLCOMPUTEDSTYLE_SUBSCRIPT = 0x000003ee;
enum DISPID_IHTMLCOMPUTEDSTYLE_SUPERSCRIPT = 0x000003ef;
enum DISPID_IHTMLCOMPUTEDSTYLE_EXPLICITFACE = 0x000003f0;
enum DISPID_IHTMLCOMPUTEDSTYLE_FONTWEIGHT = 0x000003f1;
enum DISPID_IHTMLCOMPUTEDSTYLE_FONTSIZE = 0x000003f2;
enum DISPID_IHTMLCOMPUTEDSTYLE_FONTNAME = 0x000003f3;
enum DISPID_IHTMLCOMPUTEDSTYLE_HASBGCOLOR = 0x000003f4;
enum DISPID_IHTMLCOMPUTEDSTYLE_TEXTCOLOR = 0x000003f5;
enum DISPID_IHTMLCOMPUTEDSTYLE_BACKGROUNDCOLOR = 0x000003f6;
enum DISPID_IHTMLCOMPUTEDSTYLE_PREFORMATTED = 0x000003f7;
enum DISPID_IHTMLCOMPUTEDSTYLE_DIRECTION = 0x000003f8;
enum DISPID_IHTMLCOMPUTEDSTYLE_BLOCKDIRECTION = 0x000003f9;
enum DISPID_IHTMLCOMPUTEDSTYLE_OL = 0x000003fa;
enum DISPID_IHTMLDLGSAFEHELPER_CHOOSECOLORDLG = 0x00000001;
enum DISPID_IHTMLDLGSAFEHELPER_GETCHARSET = 0x00000002;
enum DISPID_IHTMLDLGSAFEHELPER_FONTS = 0x00000003;
enum DISPID_IHTMLDLGSAFEHELPER_BLOCKFORMATS = 0x00000004;
enum DISPID_IBLOCKFORMATS__NEWENUM = 0xfffffffffffffffc;
enum DISPID_IBLOCKFORMATS_COUNT = 0x00000001;
enum DISPID_IBLOCKFORMATS_ITEM = 0x00000000;
enum DISPID_IFONTNAMES__NEWENUM = 0xfffffffffffffffc;
enum DISPID_IFONTNAMES_COUNT = 0x00000001;
enum DISPID_IFONTNAMES_ITEM = 0x00000000;
enum DISPID_IHTMLNAMESPACE_NAME = 0x000003e8;
enum DISPID_IHTMLNAMESPACE_URN = 0x000003e9;
enum DISPID_IHTMLNAMESPACE_TAGNAMES = 0x000003ea;
enum DISPID_IHTMLNAMESPACE_READYSTATE = 0x000113fc;
enum DISPID_IHTMLNAMESPACE_ONREADYSTATECHANGE = 0x00011789;
enum DISPID_IHTMLNAMESPACE_DOIMPORT = 0x000003eb;
enum DISPID_IHTMLNAMESPACE_ATTACHEVENT = 0x000101fb;
enum DISPID_IHTMLNAMESPACE_DETACHEVENT = 0x000101fc;
enum DISPID_IHTMLNAMESPACECOLLECTION_LENGTH = 0x000003e8;
enum DISPID_IHTMLNAMESPACECOLLECTION_ITEM = 0x00000000;
enum DISPID_IHTMLNAMESPACECOLLECTION_ADD = 0x000003e9;
enum DISPID_HTMLNAMESPACEEVENTS_ONREADYSTATECHANGE = 0xfffffffffffffd9f;
enum DISPID_IHTMLIPRINTCOLLECTION_LENGTH = 0x000005dd;
enum DISPID_IHTMLIPRINTCOLLECTION__NEWENUM = 0xfffffffffffffffc;
enum DISPID_IHTMLIPRINTCOLLECTION_ITEM = 0x00000000;
enum DISPID_IHTMLDIALOG_DIALOGTOP = 0x00010004;
enum DISPID_IHTMLDIALOG_DIALOGLEFT = 0x00010003;
enum DISPID_IHTMLDIALOG_DIALOGWIDTH = 0x00010005;
enum DISPID_IHTMLDIALOG_DIALOGHEIGHT = 0x00010006;
enum DISPID_IHTMLDIALOG_DIALOGARGUMENTS = 0x000061a8;
enum DISPID_IHTMLDIALOG_MENUARGUMENTS = 0x000061b5;
enum DISPID_IHTMLDIALOG_RETURNVALUE = 0x000061a9;
enum DISPID_IHTMLDIALOG_CLOSE = 0x000061b3;
enum DISPID_IHTMLDIALOG_TOSTRING = 0x000061b4;
enum DISPID_IHTMLDIALOG2_STATUS = 0x000061b6;
enum DISPID_IHTMLDIALOG2_RESIZABLE = 0x000061b7;
enum DISPID_IHTMLDIALOG3_UNADORNED = 0x000061b8;
enum DISPID_IHTMLDIALOG3_DIALOGHIDE = 0x000061af;
enum DISPID_IHTMLMODELESSINIT_PARAMETERS = 0x000061a8;
enum DISPID_IHTMLMODELESSINIT_OPTIONSTRING = 0x000061a9;
enum DISPID_IHTMLMODELESSINIT_MONIKER = 0x000061ae;
enum DISPID_IHTMLMODELESSINIT_DOCUMENT = 0x000061af;
enum DISPID_IHTMLPOPUP_SHOW = 0x00006979;
enum DISPID_IHTMLPOPUP_HIDE = 0x0000697a;
enum DISPID_IHTMLPOPUP_DOCUMENT = 0x0000697b;
enum DISPID_IHTMLPOPUP_ISOPEN = 0x0000697c;
enum DISPID_IHTMLAPPBEHAVIOR_APPLICATIONNAME = 0x00001388;
enum DISPID_IHTMLAPPBEHAVIOR_VERSION = 0x00001389;
enum DISPID_IHTMLAPPBEHAVIOR_ICON = 0x0000138a;
enum DISPID_IHTMLAPPBEHAVIOR_SINGLEINSTANCE = 0x0000138b;
enum DISPID_IHTMLAPPBEHAVIOR_MINIMIZEBUTTON = 0x0000138d;
enum DISPID_IHTMLAPPBEHAVIOR_MAXIMIZEBUTTON = 0x0000138e;
enum DISPID_IHTMLAPPBEHAVIOR_BORDER = 0x0000138f;
enum DISPID_IHTMLAPPBEHAVIOR_BORDERSTYLE = 0x00001390;
enum DISPID_IHTMLAPPBEHAVIOR_SYSMENU = 0x00001391;
enum DISPID_IHTMLAPPBEHAVIOR_CAPTION = 0x00001392;
enum DISPID_IHTMLAPPBEHAVIOR_WINDOWSTATE = 0x00001393;
enum DISPID_IHTMLAPPBEHAVIOR_SHOWINTASKBAR = 0x00001394;
enum DISPID_IHTMLAPPBEHAVIOR_COMMANDLINE = 0x00001395;
enum DISPID_IHTMLAPPBEHAVIOR2_CONTEXTMENU = 0x00001396;
enum DISPID_IHTMLAPPBEHAVIOR2_INNERBORDER = 0x00001397;
enum DISPID_IHTMLAPPBEHAVIOR2_SCROLL = 0x00001398;
enum DISPID_IHTMLAPPBEHAVIOR2_SCROLLFLAT = 0x00001399;
enum DISPID_IHTMLAPPBEHAVIOR2_SELECTION = 0x0000139a;
enum DISPID_IHTMLAPPBEHAVIOR3_NAVIGABLE = 0x0000139b;
enum DISPID_IHTMLTXTRANGEINTERNAL_GET_VISIBLETEXT = 0x0000041a;
enum DISPID_IE9EVENTS_ABORT = 0x000003e8;
enum DISPID_IE9EVENTS_ACTIVATE = 0x00000414;
enum DISPID_IE9EVENTS_AFTERPRINT = 0x00000401;
enum DISPID_IE9EVENTS_BEFOREACTIVATE = 0x00000417;
enum DISPID_IE9EVENTS_BEFOREDEACTIVATE = 0x0000040a;
enum DISPID_IE9EVENTS_BEFOREUNLOAD = 0x000003f9;
enum DISPID_IE9EVENTS_BEFOREPRINT = 0x00000400;
enum DISPID_IE9EVENTS_BOUNCE = 0x000003f1;
enum DISPID_IE9EVENTS_CHANGE = 0x000003e9;
enum DISPID_IE9EVENTS_CLICK = 0xfffffffffffffda8;
enum DISPID_IE9EVENTS_COMPLETE = 0x0001182f;
enum DISPID_IE9EVENTS_CONTEXTMENU = 0x000003ff;
enum DISPID_IE9EVENTS_DEACTIVATE = 0x00000415;
enum DISPID_IE9EVENTS_DOMCONTENTLOADED = 0x000117ee;
enum DISPID_IE9EVENTS_SUCCESS = 0x0001182d;
enum DISPID_IE9EVENTS_ERROR = 0x000003ea;
enum DISPID_IE9EVENTS_FINISH = 0x000003f2;
enum DISPID_IE9EVENTS_FOCUS = 0x00010001;
enum DISPID_IE9EVENTS_FOCUSIN = 0x00000418;
enum DISPID_IE9EVENTS_FOCUSOUT = 0x00000419;
enum DISPID_IE9EVENTS_HASHCHANGE = 0x0000042a;
enum DISPID_IE9EVENTS_HELP = 0x0001000a;
enum DISPID_IE9EVENTS_INPUT = 0x000117ef;
enum DISPID_IE9EVENTS_LOAD = 0x000003eb;
enum DISPID_IE9EVENTS_KEYDOWN = 0xfffffffffffffda6;
enum DISPID_IE9EVENTS_KEYPRESS = 0xfffffffffffffda5;
enum DISPID_IE9EVENTS_KEYUP = 0xfffffffffffffda4;
enum DISPID_IE9EVENTS_MESSAGE = 0x0000042b;
enum DISPID_IE9EVENTS_ONLINE = 0x00000428;
enum DISPID_IE9EVENTS_OFFLINE = 0x00000429;
enum DISPID_IE9EVENTS_READYSTATECHANGE = 0xfffffffffffffd9f;
enum DISPID_IE9EVENTS_RESET = 0x000003f7;
enum DISPID_IE9EVENTS_RESIZE = 0x000003f8;
enum DISPID_IE9EVENTS_SCROLL = 0x000003f6;
enum DISPID_IE9EVENTS_SELECT = 0x000003ee;
enum DISPID_IE9EVENTS_SELECTIONCHANGE = 0x0000040d;
enum DISPID_IE9EVENTS_SELECTSTART = 0x0001000c;
enum DISPID_IE9EVENTS_START = 0x000003f3;
enum DISPID_IE9EVENTS_STOP = 0x00000402;
enum DISPID_IE9EVENTS_STORAGE = 0x00000421;
enum DISPID_IE9EVENTS_STORAGECOMMIT = 0x00000422;
enum DISPID_IE9EVENTS_SUBMIT = 0x000003ef;
enum DISPID_IE9EVENTS_TEXTINPUT = 0x000117f1;
enum DISPID_IE9EVENTS_TIMEOUT = 0x00000000;
enum DISPID_IE9EVENTS_UNLOAD = 0x000003f0;
enum DISPID_IE9EVENTS_WHEEL = 0x000117e1;
enum DISPID_IE9EVENTS_DBLCLICK = 0xfffffffffffffda7;
enum DISPID_IE9EVENTS_MOUSEDOWN = 0xfffffffffffffda3;
enum DISPID_IE9EVENTS_MOUSEENTER = 0x00000412;
enum DISPID_IE9EVENTS_MOUSELEAVE = 0x00000413;
enum DISPID_IE9EVENTS_MOUSEMOVE = 0xfffffffffffffda2;
enum DISPID_IE9EVENTS_MOUSEOUT = 0x00010009;
enum DISPID_IE9EVENTS_MOUSEOVER = 0x00010008;
enum DISPID_IE9EVENTS_MOUSEUP = 0xfffffffffffffda1;
enum DISPID_IE9EVENTS_MOUSEWHEEL = 0x00000409;
enum DISPID_IE9EVENTS_BEFORECOPY = 0x0001001e;
enum DISPID_IE9EVENTS_BEFORECUT = 0x0001001d;
enum DISPID_IE9EVENTS_BEFOREPASTE = 0x0001001f;
enum DISPID_IE9EVENTS_COPY = 0x0001001b;
enum DISPID_IE9EVENTS_CUT = 0x0001001a;
enum DISPID_IE9EVENTS_DRAG = 0x00010014;
enum DISPID_IE9EVENTS_DRAGEND = 0x00010015;
enum DISPID_IE9EVENTS_DRAGENTER = 0x00010016;
enum DISPID_IE9EVENTS_DRAGLEAVE = 0x00010018;
enum DISPID_IE9EVENTS_DRAGOVER = 0x00010017;
enum DISPID_IE9EVENTS_DRAGSTART = 0x0001000b;
enum DISPID_IE9EVENTS_DROP = 0x00010019;
enum DISPID_IE9EVENTS_PASTE = 0x0001001c;
enum DISPID_IE9EVENTS_MSBEFOREEDITFOCUS = 0x00000403;
enum DISPID_IE9EVENTS_MSCONTROLSELECT = 0x0000040c;
enum DISPID_IE9EVENTS_MSCONTROLRESIZESTART = 0x00000410;
enum DISPID_IE9EVENTS_MSCONTROLRESIZEEND = 0x00000411;
enum DISPID_IE9EVENTS_COMPOSITIONSTART = 0x000117ea;
enum DISPID_IE9EVENTS_COMPOSITIONUPDATE = 0x000117eb;
enum DISPID_IE9EVENTS_COMPOSITIONEND = 0x000117ec;
enum DISPID_IE9EVENTS_DOMATTRMODIFIED = 0x000117ed;
enum DISPID_IE9EVENTS_DOMCHARACTERDATAMODIFIED = 0x000117f0;
enum DISPID_IE9EVENTS_DOMNODEINSERTED = 0x000117f3;
enum DISPID_IE9EVENTS_DOMNODEREMOVED = 0x000117f4;
enum DISPID_IE9EVENTS_DOMSUBTREEMODIFIED = 0x000117f5;
enum DISPID_IE9EVENTS_SVGLOAD = 0x000117e2;
enum DISPID_IE9EVENTS_SVGUNLOAD = 0x000117e3;
enum DISPID_IE9EVENTS_SVGABORT = 0x000117e4;
enum DISPID_IE9EVENTS_SVGERROR = 0x000117e5;
enum DISPID_IE9EVENTS_SVGRESIZE = 0x000117e6;
enum DISPID_IE9EVENTS_SVGSCROLL = 0x000117e7;
enum DISPID_IE9EVENTS_SVGZOOM = 0x000117e8;
enum DISPID_IE9EVENTS_MSTHUMBNAILCLICK = 0x000117e9;
enum DISPID_IE9EVENTS_MSSITEMODEJUMPLISTITEMREMOVED = 0x000117f2;
enum DISPID_IE9EVENTS_CANPLAY = 0x000117f6;
enum DISPID_IE9EVENTS_CANPLAYTHROUGH = 0x000117f7;
enum DISPID_IE9EVENTS_DURATIONCHANGE = 0x000117f8;
enum DISPID_IE9EVENTS_EMPTIED = 0x000117f9;
enum DISPID_IE9EVENTS_ENDED = 0x000117fa;
enum DISPID_IE9EVENTS_LOADEDDATA = 0x000117fb;
enum DISPID_IE9EVENTS_LOADEDMETADATA = 0x000117fc;
enum DISPID_IE9EVENTS_LOADSTART = 0x000117fd;
enum DISPID_IE9EVENTS_PAUSE = 0x000117fe;
enum DISPID_IE9EVENTS_PLAY = 0x000117ff;
enum DISPID_IE9EVENTS_PLAYING = 0x00011800;
enum DISPID_IE9EVENTS_PROGRESS = 0x00011801;
enum DISPID_IE9EVENTS_RATECHANGE = 0x00011802;
enum DISPID_IE9EVENTS_SEEKED = 0x00011803;
enum DISPID_IE9EVENTS_SEEKING = 0x00011804;
enum DISPID_IE9EVENTS_STALLED = 0x00011805;
enum DISPID_IE9EVENTS_SUSPEND = 0x00011806;
enum DISPID_IE9EVENTS_TIMEUPDATE = 0x00011807;
enum DISPID_IE9EVENTS_VOLUMECHANGE = 0x00011808;
enum DISPID_IE9EVENTS_WAITING = 0x00011809;
enum DISPID_IE9EVENTS_BLOCKED = 0x0001182e;
enum DISPID_IE9EVENTS_UPGRADENEEDED = 0x00011836;
enum DISPID_IE9EVENTS_CUECHANGE = 0x00011831;
enum DISPID_IE9EVENTS_ENTER = 0x00011832;
enum DISPID_IE9EVENTS_EXIT = 0x00011833;
enum DISPID_IE9EVENTS_ADDTRACK = 0x00011838;
enum DISPID_IE9EVENTS_REMOVETRACK = 0x00011865;
enum DISPID_IE9EVENTS_MSPOINTERDOWN = 0x0001180a;
enum DISPID_IE9EVENTS_MSPOINTERMOVE = 0x0001180b;
enum DISPID_IE9EVENTS_MSPOINTERUP = 0x0001180c;
enum DISPID_IE9EVENTS_MSPOINTEROVER = 0x0001180d;
enum DISPID_IE9EVENTS_MSPOINTEROUT = 0x0001180e;
enum DISPID_IE9EVENTS_MSPOINTERCANCEL = 0x0001180f;
enum DISPID_IE9EVENTS_MSPOINTERHOVER = 0x00011810;
enum DISPID_IE9EVENTS_MSLOSTPOINTERCAPTURE = 0x0001181a;
enum DISPID_IE9EVENTS_MSGOTPOINTERCAPTURE = 0x0001181b;
enum DISPID_IE9EVENTS_MSPOINTERENTER = 0x00011859;
enum DISPID_IE9EVENTS_MSPOINTERLEAVE = 0x0001185a;
enum DISPID_IE9EVENTS_TOUCHSTART = 0x00011868;
enum DISPID_IE9EVENTS_TOUCHEND = 0x00011869;
enum DISPID_IE9EVENTS_TOUCHMOVE = 0x0001186a;
enum DISPID_IE9EVENTS_TOUCHCANCEL = 0x0001186b;
enum DISPID_IE9EVENTS_MSGESTURESTART = 0x00011813;
enum DISPID_IE9EVENTS_MSGESTURECHANGE = 0x00011814;
enum DISPID_IE9EVENTS_MSGESTUREEND = 0x00011815;
enum DISPID_IE9EVENTS_MSGESTUREHOLD = 0x00011816;
enum DISPID_IE9EVENTS_MSGESTURETAP = 0x00011817;
enum DISPID_IE9EVENTS_MSGESTUREDOUBLETAP = 0x00011818;
enum DISPID_IE9EVENTS_MSINERTIASTART = 0x00011819;
enum DISPID_IE9EVENTS_MSCONTENTZOOM = 0x0001181c;
enum DISPID_IE9EVENTS_MSHOLDVISUAL = 0x0001183a;
enum DISPID_IE9EVENTS_TRANSITIONSTART = 0x0001181d;
enum DISPID_IE9EVENTS_TRANSITIONEND = 0x0001181e;
enum DISPID_IE9EVENTS_ANIMATIONSTART = 0x0001181f;
enum DISPID_IE9EVENTS_ANIMATIONEND = 0x00011820;
enum DISPID_IE9EVENTS_ANIMATIONITERATION = 0x00011821;
enum DISPID_IE9EVENTS_MSMANIPULATIONSTATECHANGED = 0x00011822;
enum DISPID_IE9EVENTS_CHECKING = 0x00011825;
enum DISPID_IE9EVENTS_NOUPDATE = 0x00011826;
enum DISPID_IE9EVENTS_DOWNLOADING = 0x00011827;
enum DISPID_IE9EVENTS_UPDATEREADY = 0x00011828;
enum DISPID_IE9EVENTS_CACHED = 0x00011829;
enum DISPID_IE9EVENTS_OBSOLETE = 0x0001182a;
enum DISPID_IE9EVENTS_INVALID = 0x0001182c;
enum DISPID_IE9EVENTS_OPEN = 0x00011823;
enum DISPID_IE9EVENTS_CLOSE = 0x00011824;
enum DISPID_IE9EVENTS_LOADEND = 0x0001182b;
enum DISPID_IE9EVENTS_POPSTATE = 0x00011830;
enum DISPID_IE9EVENTS_VISIBILITYCHANGE = 0x00011834;
enum DISPID_IE9EVENTS_MSREGIONUPDATE = 0x00011835;
enum DISPID_IE9EVENTS_MSVIDEOFORMATCHANGED = 0x00011837;
enum DISPID_IE9EVENTS_MSVIDEOFRAMESTEPCOMPLETED = 0x00011839;
enum DISPID_IE9EVENTS_MSVIDEOOPTIMALLAYOUTCHANGED = 0x0001183b;
enum DISPID_IE9EVENTS_MSFULLSCREENCHANGE = 0x0001183c;
enum DISPID_IE9EVENTS_MSFULLSCREENERROR = 0x0001183d;
enum DISPID_IE9EVENTS_MSELEMENTRESIZE = 0x0001183e;
enum DISPID_IE9EVENTS_SOURCEOPEN = 0x0001183f;
enum DISPID_IE9EVENTS_SOURCEENDED = 0x00011841;
enum DISPID_IE9EVENTS_SOURCECLOSE = 0x00011840;
enum DISPID_IE9EVENTS_ADDSOURCEBUFFER = 0x00011842;
enum DISPID_IE9EVENTS_REMOVESOURCEBUFFER = 0x00011843;
enum DISPID_IE9EVENTS_UPDATESTART = 0x00011856;
enum DISPID_IE9EVENTS_UPDATE = 0x00011857;
enum DISPID_IE9EVENTS_UPDATEEND = 0x00011858;
enum DISPID_IE9EVENTS_MSNEEDKEY = 0x00011844;
enum DISPID_IE9EVENTS_MSKEYMESSAGE = 0x00011845;
enum DISPID_IE9EVENTS_MSKEYERROR = 0x00011846;
enum DISPID_IE9EVENTS_MSKEYADDED = 0x00011847;
enum DISPID_IE9EVENTS_MSWEBVIEWDOMCONTENTLOADED = 0x00011848;
enum DISPID_IE9EVENTS_MSWEBVIEWCONTENTLOADING = 0x00011849;
enum DISPID_IE9EVENTS_MSWEBVIEWNAVIGATIONSTARTING = 0x0001184a;
enum DISPID_IE9EVENTS_MSWEBVIEWNAVIGATIONCOMPLETED = 0x0001184b;
enum DISPID_IE9EVENTS_MSWEBVIEWFRAMEDOMCONTENTLOADED = 0x0001184c;
enum DISPID_IE9EVENTS_MSWEBVIEWFRAMECONTENTLOADING = 0x0001184d;
enum DISPID_IE9EVENTS_MSWEBVIEWFRAMENAVIGATIONSTARTING = 0x0001184e;
enum DISPID_IE9EVENTS_MSWEBVIEWFRAMENAVIGATIONCOMPLETED = 0x0001184f;
enum DISPID_IE9EVENTS_MSWEBVIEWSCRIPTNOTIFY = 0x00011850;
enum DISPID_IE9EVENTS_MSWEBVIEWLONGRUNNINGSCRIPTDETECTED = 0x00011853;
enum DISPID_IE9EVENTS_MSWEBVIEWUNVIEWABLECONTENTIDENTIFIED = 0x00011851;
enum DISPID_IE9EVENTS_MSWEBVIEWUNSAFECONTENTWARNINGDISPLAYING = 0x00011852;
enum DISPID_IE9EVENTS_MSWEBVIEWCONTAINSFULLSCREENELEMENTCHANGED = 0x00011867;
enum DISPID_IE9EVENTS_WEBGLCONTEXTLOST = 0x00011854;
enum DISPID_IE9EVENTS_WEBGLCONTEXTRESTORED = 0x00011855;
enum DISPID_IE9EVENTS_WEBGLCONTEXTCREATIONERROR = 0x00011870;
enum DISPID_IE9EVENTS_MSSITEPINNED = 0x0001185b;
enum DISPID_IE9EVENTS_MSORIENTATIONCHANGE = 0x0001185c;
enum DISPID_IE9EVENTS_ORIENTATIONCHANGE = 0x00011873;
enum DISPID_IE9EVENTS_DEVICEORIENTATION = 0x0001185d;
enum DISPID_IE9EVENTS_DEVICEMOTION = 0x0001185e;
enum DISPID_IE9EVENTS_COMPASSNEEDSCALIBRATION = 0x00011866;
enum DISPID_IE9EVENTS_PAGESHOW = 0x0001185f;
enum DISPID_IE9EVENTS_PAGEHIDE = 0x00011860;
enum DISPID_IE9EVENTS_MSCANDIDATEWINDOWSHOW = 0x00011861;
enum DISPID_IE9EVENTS_MSCANDIDATEWINDOWUPDATE = 0x00011862;
enum DISPID_IE9EVENTS_MSCANDIDATEWINDOWHIDE = 0x00011863;
enum CONTEXT_MENU_DEFAULT = 0x00000000;
enum CONTEXT_MENU_IMAGE = 0x00000001;
enum CONTEXT_MENU_CONTROL = 0x00000002;
enum CONTEXT_MENU_TABLE = 0x00000003;
enum CONTEXT_MENU_TEXTSELECT = 0x00000004;
enum CONTEXT_MENU_ANCHOR = 0x00000005;
enum CONTEXT_MENU_UNKNOWN = 0x00000006;
enum CONTEXT_MENU_IMGDYNSRC = 0x00000007;
enum CONTEXT_MENU_DEBUG = 0x00000008;
enum CONTEXT_MENU_VSCROLL = 0x00000009;
enum CONTEXT_MENU_HSCROLL = 0x0000000a;
enum CONTEXT_MENU_MEDIA = 0x0000000b;
enum CONTEXT_MENU_ENTITY = 0x0000000c;
enum CONTEXT_MENU_PDF = 0x0000000d;
enum CONTEXT_MENU_DISABLEDFLASH = 0x0000000e;
enum MENUEXT_SHOWDIALOG = 0x00000001;
enum HTMLDLG_NOUI = 0x00000010;
enum HTMLDLG_MODAL = 0x00000020;
enum HTMLDLG_MODELESS = 0x00000040;
enum HTMLDLG_PRINT_TEMPLATE = 0x00000080;
enum HTMLDLG_VERIFY = 0x00000100;
enum HTMLDLG_ALLOW_UNKNOWN_THREAD = 0x00000200;
enum PRINT_DONTBOTHERUSER = 0x00000001;
enum PRINT_WAITFORCOMPLETION = 0x00000002;
enum CMDID_SCRIPTSITE_URL = 0x00000000;
enum CMDID_SCRIPTSITE_HTMLDLGTRUST = 0x00000001;
enum CMDID_SCRIPTSITE_SECSTATE = 0x00000002;
enum CMDID_SCRIPTSITE_SID = 0x00000003;
enum CMDID_SCRIPTSITE_TRUSTEDDOC = 0x00000004;
enum CMDID_SCRIPTSITE_SECURITY_WINDOW = 0x00000005;
enum CMDID_SCRIPTSITE_NAMESPACE = 0x00000006;
enum CMDID_SCRIPTSITE_IURI = 0x00000007;
enum CMDID_HOSTCONTEXT_URL = 0x00000008;
enum CMDID_SCRIPTSITE_ALLOWRECOVERY = 0x00000009;
enum CMDID_SCRIPTSITE_BASEIURI = 0x0000000a;
enum SZ_HTML_CLIENTSITE_OBJECTPARAM = "{d4db6850-5385-11d0-89e9-00a0c90a90ac}";
enum CGID_DocHostCommandHandler = GUID(0xf38bc242, 0xb950, 0x11d1, [0x89, 0x18, 0x0, 0xc0, 0x4f, 0xc2, 0xc8, 0x36]);
enum IECMDID_CLEAR_AUTOCOMPLETE_FOR_FORMS = 0x00000000;
enum IECMDID_SETID_AUTOCOMPLETE_FOR_FORMS = 0x00000001;
enum IECMDID_BEFORENAVIGATE_GETSHELLBROWSE = 0x00000002;
enum IECMDID_BEFORENAVIGATE_DOEXTERNALBROWSE = 0x00000003;
enum IECMDID_BEFORENAVIGATE_GETIDLIST = 0x00000004;
enum IECMDID_SET_INVOKE_DEFAULT_BROWSER_ON_NEW_WINDOW = 0x00000005;
enum IECMDID_GET_INVOKE_DEFAULT_BROWSER_ON_NEW_WINDOW = 0x00000006;
enum IECMDID_ARG_CLEAR_FORMS_ALL = 0x00000000;
enum IECMDID_ARG_CLEAR_FORMS_ALL_BUT_PASSWORDS = 0x00000001;
enum IECMDID_ARG_CLEAR_FORMS_PASSWORDS_ONLY = 0x00000002;
enum CATID_MSOfficeAntiVirus = GUID(0x56ffcc30, 0xd398, 0x11d0, [0xb2, 0xae, 0x0, 0xa0, 0xc9, 0x8, 0xfa, 0x49]);
enum msoedmEnable = 0x00000001;
enum msoedmDisable = 0x00000002;
enum msoedmDontOpen = 0x00000003;
enum msoslUndefined = 0x00000000;
enum msoslNone = 0x00000001;
enum msoslMedium = 0x00000002;
enum msoslHigh = 0x00000003;
enum msodsvNoMacros = 0x00000000;
enum msodsvUnsigned = 0x00000001;
enum msodsvPassedTrusted = 0x00000002;
enum msodsvFailed = 0x00000003;
enum msodsvLowSecurityLevel = 0x00000004;
enum msodsvPassedTrustedCert = 0x00000005;
enum STATURL_QUERYFLAG_ISCACHED = 0x00010000;
enum STATURL_QUERYFLAG_NOURL = 0x00020000;
enum STATURL_QUERYFLAG_NOTITLE = 0x00040000;
enum STATURL_QUERYFLAG_TOPLEVEL = 0x00080000;
enum STATURLFLAG_ISCACHED = 0x00000001;
enum STATURLFLAG_ISTOPLEVEL = 0x00000002;
enum SURFACE_LOCK_EXCLUSIVE = 0x00000001;
enum SURFACE_LOCK_ALLOW_DISCARD = 0x00000002;
enum SURFACE_LOCK_WAIT = 0x00000004;
enum E_SURFACE_NOSURFACE = 0xffffffff8000c000;
enum E_SURFACE_UNKNOWN_FORMAT = 0xffffffff8000c001;
enum E_SURFACE_NOTMYPOINTER = 0xffffffff8000c002;
enum E_SURFACE_DISCARDED = 0xffffffff8000c003;
enum E_SURFACE_NODC = 0xffffffff8000c004;
enum E_SURFACE_NOTMYDC = 0xffffffff8000c005;
enum S_SURFACE_DISCARDED = 0x0000c003;
enum COLOR_NO_TRANSPARENT = 0xffffffff;
enum IMGDECODE_EVENT_PROGRESS = 0x00000001;
enum IMGDECODE_EVENT_PALETTE = 0x00000002;
enum IMGDECODE_EVENT_BEGINBITS = 0x00000004;
enum IMGDECODE_EVENT_BITSCOMPLETE = 0x00000008;
enum IMGDECODE_EVENT_USEDDRAW = 0x00000010;
enum IMGDECODE_HINT_TOPDOWN = 0x00000001;
enum IMGDECODE_HINT_BOTTOMUP = 0x00000002;
enum IMGDECODE_HINT_FULLWIDTH = 0x00000004;
enum MAPMIME_DEFAULT = 0x00000000;
enum MAPMIME_CLSID = 0x00000001;
enum MAPMIME_DISABLE = 0x00000002;
enum MAPMIME_DEFAULT_ALWAYS = 0x00000003;
enum TIMERMODE_NORMAL = 0x00000000;
enum TIMERMODE_VISIBILITYAWARE = 0x00000001;
enum CLSID_HTMLCSSStyleDeclaration = GUID(0x30510741, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLCSSStyleDeclaration
{
}
enum CLSID_HTMLStyle = GUID(0x3050f285, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLStyle
{
}
enum CLSID_HTMLRuleStyle = GUID(0x3050f3d0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLRuleStyle
{
}
enum CLSID_HTMLCSSRule = GUID(0x305106ef, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLCSSRule
{
}
enum CLSID_HTMLCSSImportRule = GUID(0x305106f0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLCSSImportRule
{
}
enum CLSID_HTMLCSSMediaRule = GUID(0x305106f1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLCSSMediaRule
{
}
enum CLSID_HTMLCSSMediaList = GUID(0x30510732, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLCSSMediaList
{
}
enum CLSID_HTMLCSSNamespaceRule = GUID(0x305106f2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLCSSNamespaceRule
{
}
enum CLSID_HTMLMSCSSKeyframeRule = GUID(0x3051080e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLMSCSSKeyframeRule
{
}
enum CLSID_HTMLMSCSSKeyframesRule = GUID(0x3051080f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLMSCSSKeyframesRule
{
}
enum CLSID_HTMLRenderStyle = GUID(0x3050f6aa, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLRenderStyle
{
}
enum CLSID_HTMLCurrentStyle = GUID(0x3050f3dc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLCurrentStyle
{
}
enum CLSID_HTMLDOMAttribute = GUID(0x3050f4b2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLDOMAttribute
{
}
enum CLSID_HTMLDOMTextNode = GUID(0x3050f4ba, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLDOMTextNode
{
}
enum CLSID_HTMLDOMImplementation = GUID(0x3050f80e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLDOMImplementation
{
}
enum CLSID_HTMLAttributeCollection = GUID(0x3050f4cc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLAttributeCollection
{
}
enum CLSID_StaticNodeList = GUID(0x30510467, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct StaticNodeList
{
}
enum CLSID_DOMChildrenCollection = GUID(0x3050f5aa, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMChildrenCollection
{
}
enum CLSID_HTMLDefaults = GUID(0x3050f6c8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLDefaults
{
}
enum CLSID_HTCDefaultDispatch = GUID(0x3050f4fc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTCDefaultDispatch
{
}
enum CLSID_HTCPropertyBehavior = GUID(0x3050f5de, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTCPropertyBehavior
{
}
enum CLSID_HTCMethodBehavior = GUID(0x3050f630, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTCMethodBehavior
{
}
enum CLSID_HTCEventBehavior = GUID(0x3050f4fe, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTCEventBehavior
{
}
enum CLSID_HTCAttachBehavior = GUID(0x3050f5f5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTCAttachBehavior
{
}
enum CLSID_HTCDescBehavior = GUID(0x3050f5dd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTCDescBehavior
{
}
enum CLSID_HTMLUrnCollection = GUID(0x3050f580, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLUrnCollection
{
}
enum CLSID_HTMLGenericElement = GUID(0x3050f4b8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLGenericElement
{
}
enum CLSID_HTMLStyleSheetRule = GUID(0x3050f3ce, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLStyleSheetRule
{
}
enum CLSID_HTMLStyleSheetRulesCollection = GUID(0x3050f3cd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLStyleSheetRulesCollection
{
}
enum CLSID_HTMLStyleSheetPage = GUID(0x3050f7ef, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLStyleSheetPage
{
}
enum CLSID_HTMLStyleSheetPagesCollection = GUID(0x3050f7f1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLStyleSheetPagesCollection
{
}
enum CLSID_HTMLStyleSheet = GUID(0x3050f2e4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLStyleSheet
{
}
enum CLSID_HTMLStyleSheetsCollection = GUID(0x3050f37f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLStyleSheetsCollection
{
}
enum CLSID_HTMLLinkElement = GUID(0x3050f277, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLLinkElement
{
}
enum CLSID_HTMLDOMRange = GUID(0x305106c3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLDOMRange
{
}
enum CLSID_HTMLFormElement = GUID(0x3050f251, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLFormElement
{
}
enum CLSID_HTMLTextElement = GUID(0x3050f26a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLTextElement
{
}
enum CLSID_HTMLImg = GUID(0x3050f241, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLImg
{
}
enum CLSID_HTMLImageElementFactory = GUID(0x3050f38f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLImageElementFactory
{
}
enum CLSID_HTMLBody = GUID(0x3050f24a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLBody
{
}
enum CLSID_HTMLFontElement = GUID(0x3050f27b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLFontElement
{
}
enum CLSID_HTMLAnchorElement = GUID(0x3050f248, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLAnchorElement
{
}
enum CLSID_HTMLLabelElement = GUID(0x3050f32b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLLabelElement
{
}
enum CLSID_HTMLListElement = GUID(0x3050f272, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLListElement
{
}
enum CLSID_HTMLUListElement = GUID(0x3050f269, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLUListElement
{
}
enum CLSID_HTMLOListElement = GUID(0x3050f270, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLOListElement
{
}
enum CLSID_HTMLLIElement = GUID(0x3050f273, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLLIElement
{
}
enum CLSID_HTMLBlockElement = GUID(0x3050f281, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLBlockElement
{
}
enum CLSID_HTMLDivElement = GUID(0x3050f27e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLDivElement
{
}
enum CLSID_HTMLDDElement = GUID(0x3050f27f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLDDElement
{
}
enum CLSID_HTMLDTElement = GUID(0x3050f27c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLDTElement
{
}
enum CLSID_HTMLBRElement = GUID(0x3050f280, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLBRElement
{
}
enum CLSID_HTMLDListElement = GUID(0x3050f27d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLDListElement
{
}
enum CLSID_HTMLHRElement = GUID(0x3050f252, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLHRElement
{
}
enum CLSID_HTMLParaElement = GUID(0x3050f26f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLParaElement
{
}
enum CLSID_HTMLElementCollection = GUID(0x3050f4cb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLElementCollection
{
}
enum CLSID_HTMLHeaderElement = GUID(0x3050f27a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLHeaderElement
{
}
enum CLSID_HTMLSelectElement = GUID(0x3050f245, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLSelectElement
{
}
enum CLSID_HTMLWndSelectElement = GUID(0x3050f2cf, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLWndSelectElement
{
}
enum CLSID_HTMLOptionElement = GUID(0x3050f24d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLOptionElement
{
}
enum CLSID_HTMLOptionElementFactory = GUID(0x3050f38d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLOptionElementFactory
{
}
enum CLSID_HTMLWndOptionElement = GUID(0x3050f2d0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLWndOptionElement
{
}
enum CLSID_HTMLInputElement = GUID(0x3050f5d8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLInputElement
{
}
enum CLSID_HTMLTextAreaElement = GUID(0x3050f2ac, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLTextAreaElement
{
}
enum CLSID_HTMLRichtextElement = GUID(0x3050f2df, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLRichtextElement
{
}
enum CLSID_HTMLButtonElement = GUID(0x3050f2c6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLButtonElement
{
}
enum CLSID_HTMLMarqueeElement = GUID(0x3050f2b9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLMarqueeElement
{
}
enum CLSID_HTMLHtmlElement = GUID(0x3050f491, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLHtmlElement
{
}
enum CLSID_HTMLHeadElement = GUID(0x3050f493, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLHeadElement
{
}
enum CLSID_HTMLTitleElement = GUID(0x3050f284, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLTitleElement
{
}
enum CLSID_HTMLMetaElement = GUID(0x3050f275, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLMetaElement
{
}
enum CLSID_HTMLBaseElement = GUID(0x3050f276, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLBaseElement
{
}
enum CLSID_HTMLIsIndexElement = GUID(0x3050f278, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLIsIndexElement
{
}
enum CLSID_HTMLNextIdElement = GUID(0x3050f279, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLNextIdElement
{
}
enum CLSID_HTMLBaseFontElement = GUID(0x3050f282, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLBaseFontElement
{
}
enum CLSID_HTMLUnknownElement = GUID(0x3050f268, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLUnknownElement
{
}
enum CLSID_HTMLHistory = GUID(0xfeceaaa3, 0x8405, 0x11cf, [0x8b, 0xa1, 0x0, 0xaa, 0x0, 0x47, 0x6d, 0xa6]);
struct HTMLHistory
{
}
enum CLSID_COpsProfile = GUID(0x3050f402, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct COpsProfile
{
}
enum CLSID_HTMLNavigator = GUID(0xfeceaaa6, 0x8405, 0x11cf, [0x8b, 0xa1, 0x0, 0xaa, 0x0, 0x47, 0x6d, 0xa6]);
struct HTMLNavigator
{
}
enum CLSID_HTMLLocation = GUID(0x163bb1e1, 0x6e00, 0x11cf, [0x83, 0x7a, 0x48, 0xdc, 0x4, 0xc1, 0x0, 0x0]);
struct HTMLLocation
{
}
enum CLSID_CMimeTypes = GUID(0x3050f3fe, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct CMimeTypes
{
}
enum CLSID_CPlugins = GUID(0x3050f3ff, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct CPlugins
{
}
enum CLSID_CEventObj = GUID(0x3050f48a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct CEventObj
{
}
enum CLSID_HTMLStyleMedia = GUID(0x3051074c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLStyleMedia
{
}
enum CLSID_FramesCollection = GUID(0x3050f7f6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct FramesCollection
{
}
enum CLSID_HTMLScreen = GUID(0x3050f35d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLScreen
{
}
enum CLSID_HTMLWindow2 = GUID(0xd48a6ec6, 0x6a4a, 0x11cf, [0x94, 0xa7, 0x44, 0x45, 0x53, 0x54, 0x0, 0x0]);
struct HTMLWindow2
{
}
enum CLSID_HTMLWindowProxy = GUID(0x3050f391, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLWindowProxy
{
}
enum CLSID_HTMLDocumentCompatibleInfo = GUID(0x3051041b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLDocumentCompatibleInfo
{
}
enum CLSID_HTMLDocumentCompatibleInfoCollection = GUID(0x30510419, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLDocumentCompatibleInfoCollection
{
}
enum CLSID_HTMLDocument = GUID(0x25336920, 0x3f9, 0x11cf, [0x8f, 0xd0, 0x0, 0xaa, 0x0, 0x68, 0x6f, 0x13]);
struct HTMLDocument
{
}
enum CLSID_Scriptlet = GUID(0xae24fdae, 0x3c6, 0x11d1, [0x8b, 0x76, 0x0, 0x80, 0xc7, 0x44, 0xf3, 0x89]);
struct Scriptlet
{
}
enum CLSID_HTMLEmbed = GUID(0x3050f25d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLEmbed
{
}
enum CLSID_HTMLAreasCollection = GUID(0x3050f4ca, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLAreasCollection
{
}
enum CLSID_HTMLMapElement = GUID(0x3050f271, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLMapElement
{
}
enum CLSID_HTMLAreaElement = GUID(0x3050f283, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLAreaElement
{
}
enum CLSID_HTMLTableCaption = GUID(0x3050f2ec, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLTableCaption
{
}
enum CLSID_HTMLCommentElement = GUID(0x3050f317, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLCommentElement
{
}
enum CLSID_HTMLPhraseElement = GUID(0x3050f26e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLPhraseElement
{
}
enum CLSID_HTMLSpanElement = GUID(0x3050f3f5, 0x98b4, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLSpanElement
{
}
enum CLSID_HTMLTable = GUID(0x3050f26b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLTable
{
}
enum CLSID_HTMLTableCol = GUID(0x3050f26c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLTableCol
{
}
enum CLSID_HTMLTableSection = GUID(0x3050f2e9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLTableSection
{
}
enum CLSID_HTMLTableRow = GUID(0x3050f26d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLTableRow
{
}
enum CLSID_HTMLTableCell = GUID(0x3050f246, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLTableCell
{
}
enum CLSID_HTMLScriptElement = GUID(0x3050f28c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLScriptElement
{
}
enum CLSID_HTMLNoShowElement = GUID(0x3050f38b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLNoShowElement
{
}
enum CLSID_HTMLObjectElement = GUID(0x3050f24e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLObjectElement
{
}
enum CLSID_HTMLParamElement = GUID(0x3050f83e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLParamElement
{
}
enum CLSID_HTMLFrameBase = GUID(0x3050f312, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLFrameBase
{
}
enum CLSID_HTMLFrameElement = GUID(0x3050f314, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLFrameElement
{
}
enum CLSID_HTMLIFrame = GUID(0x3050f316, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLIFrame
{
}
enum CLSID_HTMLDivPosition = GUID(0x3050f249, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLDivPosition
{
}
enum CLSID_HTMLFieldSetElement = GUID(0x3050f3e8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLFieldSetElement
{
}
enum CLSID_HTMLLegendElement = GUID(0x3050f3e9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLLegendElement
{
}
enum CLSID_HTMLSpanFlow = GUID(0x3050f3e6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLSpanFlow
{
}
enum CLSID_HTMLFrameSetSite = GUID(0x3050f31a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLFrameSetSite
{
}
enum CLSID_HTMLBGsound = GUID(0x3050f370, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLBGsound
{
}
enum CLSID_HTMLStyleElement = GUID(0x3050f37d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLStyleElement
{
}
enum CLSID_HTMLStyleFontFace = GUID(0x3050f3d4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLStyleFontFace
{
}
enum CLSID_XDomainRequest = GUID(0x30510455, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct XDomainRequest
{
}
enum CLSID_XDomainRequestFactory = GUID(0x30510457, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct XDomainRequestFactory
{
}
enum CLSID_HTMLStorage = GUID(0x30510475, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLStorage
{
}
enum CLSID_DOMEvent = GUID(0x305104bb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMEvent
{
}
enum CLSID_DOMUIEvent = GUID(0x305106cb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMUIEvent
{
}
enum CLSID_DOMMouseEvent = GUID(0x305106cf, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMMouseEvent
{
}
enum CLSID_DOMDragEvent = GUID(0x30510762, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMDragEvent
{
}
enum CLSID_DOMMouseWheelEvent = GUID(0x305106d1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMMouseWheelEvent
{
}
enum CLSID_DOMWheelEvent = GUID(0x305106d3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMWheelEvent
{
}
enum CLSID_DOMTextEvent = GUID(0x305106d5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMTextEvent
{
}
enum CLSID_DOMKeyboardEvent = GUID(0x305106d7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMKeyboardEvent
{
}
enum CLSID_DOMCompositionEvent = GUID(0x305106d9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMCompositionEvent
{
}
enum CLSID_DOMMutationEvent = GUID(0x305106db, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMMutationEvent
{
}
enum CLSID_DOMBeforeUnloadEvent = GUID(0x30510764, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMBeforeUnloadEvent
{
}
enum CLSID_DOMFocusEvent = GUID(0x305106cd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMFocusEvent
{
}
enum CLSID_DOMCustomEvent = GUID(0x305106df, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMCustomEvent
{
}
enum CLSID_CanvasGradient = GUID(0x30510715, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct CanvasGradient
{
}
enum CLSID_CanvasPattern = GUID(0x30510717, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct CanvasPattern
{
}
enum CLSID_CanvasTextMetrics = GUID(0x30510719, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct CanvasTextMetrics
{
}
enum CLSID_CanvasImageData = GUID(0x3051071b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct CanvasImageData
{
}
enum CLSID_CanvasRenderingContext2D = GUID(0x30510700, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct CanvasRenderingContext2D
{
}
enum CLSID_HTMLCanvasElement = GUID(0x305106e5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLCanvasElement
{
}
enum CLSID_DOMProgressEvent = GUID(0x3051071f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMProgressEvent
{
}
enum CLSID_DOMMessageEvent = GUID(0x30510721, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMMessageEvent
{
}
enum CLSID_DOMSiteModeEvent = GUID(0x30510766, 0x98b6, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMSiteModeEvent
{
}
enum CLSID_DOMStorageEvent = GUID(0x30510723, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMStorageEvent
{
}
enum CLSID_XMLHttpRequestEventTarget = GUID(0x30510831, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct XMLHttpRequestEventTarget
{
}
enum CLSID_HTMLXMLHttpRequest = GUID(0x3051040b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLXMLHttpRequest
{
}
enum CLSID_HTMLXMLHttpRequestFactory = GUID(0x3051040d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLXMLHttpRequestFactory
{
}
enum CLSID_SVGAngle = GUID(0x30510584, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGAngle
{
}
enum CLSID_SVGAnimatedAngle = GUID(0x305105e4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGAnimatedAngle
{
}
enum CLSID_SVGAnimatedTransformList = GUID(0x305105b1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGAnimatedTransformList
{
}
enum CLSID_SVGAnimatedBoolean = GUID(0x3051058b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGAnimatedBoolean
{
}
enum CLSID_SVGAnimatedEnumeration = GUID(0x3051058e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGAnimatedEnumeration
{
}
enum CLSID_SVGAnimatedInteger = GUID(0x3051058f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGAnimatedInteger
{
}
enum CLSID_SVGAnimatedLength = GUID(0x30510581, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGAnimatedLength
{
}
enum CLSID_SVGAnimatedLengthList = GUID(0x30510582, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGAnimatedLengthList
{
}
enum CLSID_SVGAnimatedNumber = GUID(0x30510588, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGAnimatedNumber
{
}
enum CLSID_SVGAnimatedNumberList = GUID(0x3051058a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGAnimatedNumberList
{
}
enum CLSID_SVGAnimatedRect = GUID(0x30510586, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGAnimatedRect
{
}
enum CLSID_SVGAnimatedString = GUID(0x3051058c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGAnimatedString
{
}
enum CLSID_SVGClipPathElement = GUID(0x305105e6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGClipPathElement
{
}
enum CLSID_SVGElement = GUID(0x30510564, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGElement
{
}
enum CLSID_SVGLength = GUID(0x3051057e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGLength
{
}
enum CLSID_SVGLengthList = GUID(0x30510580, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGLengthList
{
}
enum CLSID_SVGMatrix = GUID(0x305105ae, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGMatrix
{
}
enum CLSID_SVGNumber = GUID(0x30510587, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGNumber
{
}
enum CLSID_SVGNumberList = GUID(0x30510589, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGNumberList
{
}
enum CLSID_SVGPatternElement = GUID(0x305105d4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPatternElement
{
}
enum CLSID_SVGPathSeg = GUID(0x305105b3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSeg
{
}
enum CLSID_SVGPathSegArcAbs = GUID(0x305105bb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegArcAbs
{
}
enum CLSID_SVGPathSegArcRel = GUID(0x305105bc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegArcRel
{
}
enum CLSID_SVGPathSegClosePath = GUID(0x305105bd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegClosePath
{
}
enum CLSID_SVGPathSegMovetoAbs = GUID(0x305105cc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegMovetoAbs
{
}
enum CLSID_SVGPathSegMovetoRel = GUID(0x305105cd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegMovetoRel
{
}
enum CLSID_SVGPathSegLinetoAbs = GUID(0x305105c6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegLinetoAbs
{
}
enum CLSID_SVGPathSegLinetoRel = GUID(0x305105c9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegLinetoRel
{
}
enum CLSID_SVGPathSegCurvetoCubicAbs = GUID(0x305105be, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegCurvetoCubicAbs
{
}
enum CLSID_SVGPathSegCurvetoCubicRel = GUID(0x305105bf, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegCurvetoCubicRel
{
}
enum CLSID_SVGPathSegCurvetoCubicSmoothAbs = GUID(0x305105c0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegCurvetoCubicSmoothAbs
{
}
enum CLSID_SVGPathSegCurvetoCubicSmoothRel = GUID(0x305105c1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegCurvetoCubicSmoothRel
{
}
enum CLSID_SVGPathSegCurvetoQuadraticAbs = GUID(0x305105c2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegCurvetoQuadraticAbs
{
}
enum CLSID_SVGPathSegCurvetoQuadraticRel = GUID(0x305105c3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegCurvetoQuadraticRel
{
}
enum CLSID_SVGPathSegCurvetoQuadraticSmoothAbs = GUID(0x305105c4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegCurvetoQuadraticSmoothAbs
{
}
enum CLSID_SVGPathSegCurvetoQuadraticSmoothRel = GUID(0x305105c5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegCurvetoQuadraticSmoothRel
{
}
enum CLSID_SVGPathSegLinetoHorizontalAbs = GUID(0x305105c7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegLinetoHorizontalAbs
{
}
enum CLSID_SVGPathSegLinetoHorizontalRel = GUID(0x305105c8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegLinetoHorizontalRel
{
}
enum CLSID_SVGPathSegLinetoVerticalAbs = GUID(0x305105ca, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegLinetoVerticalAbs
{
}
enum CLSID_SVGPathSegLinetoVerticalRel = GUID(0x305105cb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegLinetoVerticalRel
{
}
enum CLSID_SVGPathSegList = GUID(0x305105b4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathSegList
{
}
enum CLSID_SVGPoint = GUID(0x305105ba, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPoint
{
}
enum CLSID_SVGPointList = GUID(0x305105b9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPointList
{
}
enum CLSID_SVGRect = GUID(0x30510583, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGRect
{
}
enum CLSID_SVGStringList = GUID(0x3051058d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGStringList
{
}
enum CLSID_SVGTransform = GUID(0x305105af, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGTransform
{
}
enum CLSID_SVGSVGElement = GUID(0x30510574, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGSVGElement
{
}
enum CLSID_SVGUseElement = GUID(0x30510590, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGUseElement
{
}
enum CLSID_HTMLStyleSheetRulesAppliedCollection = GUID(0xeb36f845, 0x2395, 0x4719, [0xb8, 0x5c, 0xd0, 0xd8, 0xe, 0x18, 0x4b, 0xd9]);
struct HTMLStyleSheetRulesAppliedCollection
{
}
enum CLSID_RulesApplied = GUID(0x7c803920, 0x7a53, 0x4d26, [0x98, 0xac, 0xfd, 0xd2, 0x3e, 0x6b, 0x9e, 0x1]);
struct RulesApplied
{
}
enum CLSID_RulesAppliedCollection = GUID(0x671926ee, 0xc3cf, 0x40af, [0xbe, 0x8f, 0x1c, 0xba, 0xee, 0x64, 0x86, 0xe8]);
struct RulesAppliedCollection
{
}
enum CLSID_HTMLW3CComputedStyle = GUID(0x305106c8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLW3CComputedStyle
{
}
enum CLSID_SVGTransformList = GUID(0x305105b0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGTransformList
{
}
enum CLSID_SVGCircleElement = GUID(0x30510578, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGCircleElement
{
}
enum CLSID_SVGEllipseElement = GUID(0x30510579, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGEllipseElement
{
}
enum CLSID_SVGLineElement = GUID(0x3051057a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGLineElement
{
}
enum CLSID_SVGRectElement = GUID(0x30510577, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGRectElement
{
}
enum CLSID_SVGPolygonElement = GUID(0x3051057b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPolygonElement
{
}
enum CLSID_SVGPolylineElement = GUID(0x3051057c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPolylineElement
{
}
enum CLSID_SVGGElement = GUID(0x3051056f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGGElement
{
}
enum CLSID_SVGSymbolElement = GUID(0x30510571, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGSymbolElement
{
}
enum CLSID_SVGDefsElement = GUID(0x30510570, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGDefsElement
{
}
enum CLSID_SVGPathElement = GUID(0x305105b2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPathElement
{
}
enum CLSID_SVGPreserveAspectRatio = GUID(0x305105d0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGPreserveAspectRatio
{
}
enum CLSID_SVGTextElement = GUID(0x305105df, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGTextElement
{
}
enum CLSID_SVGAnimatedPreserveAspectRatio = GUID(0x305105ce, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGAnimatedPreserveAspectRatio
{
}
enum CLSID_SVGImageElement = GUID(0x305105cf, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGImageElement
{
}
enum CLSID_SVGStopElement = GUID(0x305105d5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGStopElement
{
}
enum CLSID_SVGGradientElement = GUID(0x305105d6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGGradientElement
{
}
enum CLSID_SVGLinearGradientElement = GUID(0x305105d2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGLinearGradientElement
{
}
enum CLSID_SVGRadialGradientElement = GUID(0x305105d3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGRadialGradientElement
{
}
enum CLSID_SVGMaskElement = GUID(0x305105e7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGMaskElement
{
}
enum CLSID_SVGMarkerElement = GUID(0x305105de, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGMarkerElement
{
}
enum CLSID_SVGZoomEvent = GUID(0x305105d9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGZoomEvent
{
}
enum CLSID_SVGAElement = GUID(0x305105db, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGAElement
{
}
enum CLSID_SVGViewElement = GUID(0x305105dc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGViewElement
{
}
enum CLSID_HTMLMediaError = GUID(0x3051070a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLMediaError
{
}
enum CLSID_HTMLTimeRanges = GUID(0x3051070b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLTimeRanges
{
}
enum CLSID_HTMLMediaElement = GUID(0x3051070c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLMediaElement
{
}
enum CLSID_HTMLSourceElement = GUID(0x3051070d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLSourceElement
{
}
enum CLSID_HTMLAudioElement = GUID(0x3051070e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLAudioElement
{
}
enum CLSID_HTMLAudioElementFactory = GUID(0x305107ec, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLAudioElementFactory
{
}
enum CLSID_HTMLVideoElement = GUID(0x3051070f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLVideoElement
{
}
enum CLSID_SVGSwitchElement = GUID(0x305105d8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGSwitchElement
{
}
enum CLSID_SVGDescElement = GUID(0x30510572, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGDescElement
{
}
enum CLSID_SVGTitleElement = GUID(0x30510573, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGTitleElement
{
}
enum CLSID_SVGMetadataElement = GUID(0x305105d7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGMetadataElement
{
}
enum CLSID_SVGElementInstance = GUID(0x30510575, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGElementInstance
{
}
enum CLSID_SVGElementInstanceList = GUID(0x30510576, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGElementInstanceList
{
}
enum CLSID_DOMException = GUID(0x3051072c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMException
{
}
enum CLSID_RangeException = GUID(0x3051072e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct RangeException
{
}
enum CLSID_SVGException = GUID(0x30510730, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGException
{
}
enum CLSID_EventException = GUID(0x3051073b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct EventException
{
}
enum CLSID_SVGScriptElement = GUID(0x305105e1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGScriptElement
{
}
enum CLSID_SVGStyleElement = GUID(0x305105d1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGStyleElement
{
}
enum CLSID_SVGTextContentElement = GUID(0x305105dd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGTextContentElement
{
}
enum CLSID_SVGTextPositioningElement = GUID(0x305105e0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGTextPositioningElement
{
}
enum CLSID_DOMDocumentType = GUID(0x30510739, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMDocumentType
{
}
enum CLSID_NodeIterator = GUID(0x30510745, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct NodeIterator
{
}
enum CLSID_TreeWalker = GUID(0x30510747, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct TreeWalker
{
}
enum CLSID_DOMProcessingInstruction = GUID(0x30510743, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMProcessingInstruction
{
}
enum CLSID_HTMLPerformance = GUID(0x3051074f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLPerformance
{
}
enum CLSID_HTMLPerformanceNavigation = GUID(0x30510751, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLPerformanceNavigation
{
}
enum CLSID_HTMLPerformanceTiming = GUID(0x30510753, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLPerformanceTiming
{
}
enum CLSID_SVGTSpanElement = GUID(0x305105e2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGTSpanElement
{
}
enum CLSID_CTemplatePrinter = GUID(0x3050f6b3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct CTemplatePrinter
{
}
enum CLSID_CPrintManagerTemplatePrinter = GUID(0x63619f54, 0x9d71, 0x4c23, [0xa0, 0x8d, 0x50, 0xd7, 0xf1, 0x8d, 0xb2, 0xe9]);
struct CPrintManagerTemplatePrinter
{
}
enum CLSID_SVGTextPathElement = GUID(0x305105eb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct SVGTextPathElement
{
}
enum CLSID_XMLSerializer = GUID(0x3051077e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct XMLSerializer
{
}
enum CLSID_DOMParser = GUID(0x30510782, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMParser
{
}
enum CLSID_HTMLDOMXmlSerializerFactory = GUID(0x30510780, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLDOMXmlSerializerFactory
{
}
enum CLSID_DOMParserFactory = GUID(0x30510784, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMParserFactory
{
}
enum CLSID_HTMLSemanticElement = GUID(0x305107b0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLSemanticElement
{
}
enum CLSID_HTMLProgressElement = GUID(0x3050f2d5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLProgressElement
{
}
enum CLSID_DOMMSTransitionEvent = GUID(0x305107b6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMMSTransitionEvent
{
}
enum CLSID_DOMMSAnimationEvent = GUID(0x305107b8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMMSAnimationEvent
{
}
enum CLSID_WebGeolocation = GUID(0x305107c6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct WebGeolocation
{
}
enum CLSID_WebGeocoordinates = GUID(0x305107c8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct WebGeocoordinates
{
}
enum CLSID_WebGeopositionError = GUID(0x305107ca, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct WebGeopositionError
{
}
enum CLSID_WebGeoposition = GUID(0x305107ce, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct WebGeoposition
{
}
enum CLSID_CClientCaps = GUID(0x7e8bc44e, 0xaeff, 0x11d1, [0x89, 0xc2, 0x0, 0xc0, 0x4f, 0xb6, 0xbf, 0xc4]);
struct CClientCaps
{
}
enum CLSID_DOMMSManipulationEvent = GUID(0x30510817, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMMSManipulationEvent
{
}
enum CLSID_DOMCloseEvent = GUID(0x30510800, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct DOMCloseEvent
{
}
enum CLSID_ApplicationCache = GUID(0x30510829, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct ApplicationCache
{
}
enum CLSID_HtmlDlgSafeHelper = GUID(0x3050f819, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HtmlDlgSafeHelper
{
}
enum CLSID_BlockFormats = GUID(0x3050f831, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct BlockFormats
{
}
enum CLSID_FontNames = GUID(0x3050f83a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct FontNames
{
}
enum CLSID_HTMLNamespace = GUID(0x3050f6bc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLNamespace
{
}
enum CLSID_HTMLNamespaceCollection = GUID(0x3050f6b9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLNamespaceCollection
{
}
enum CLSID_ThreadDialogProcParam = GUID(0x3050f5eb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct ThreadDialogProcParam
{
}
enum CLSID_HTMLDialog = GUID(0x3050f28a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLDialog
{
}
enum CLSID_HTMLPopup = GUID(0x3050f667, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLPopup
{
}
enum CLSID_HTMLAppBehavior = GUID(0x3050f5cb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLAppBehavior
{
}
enum CLSID_OldHTMLDocument = GUID(0xd48a6ec9, 0x6a4a, 0x11cf, [0x94, 0xa7, 0x44, 0x45, 0x53, 0x54, 0x0, 0x0]);
struct OldHTMLDocument
{
}
enum CLSID_OldHTMLFormElement = GUID(0xd04d285, 0x6bec, 0x11cf, [0x8b, 0x97, 0x0, 0xaa, 0x0, 0x47, 0x6d, 0xa6]);
struct OldHTMLFormElement
{
}
enum CLSID_HTMLInputButtonElement = GUID(0x3050f2b4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLInputButtonElement
{
}
enum CLSID_HTMLInputTextElement = GUID(0x3050f2ab, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLInputTextElement
{
}
enum CLSID_HTMLInputFileElement = GUID(0x3050f2ae, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLInputFileElement
{
}
enum CLSID_HTMLOptionButtonElement = GUID(0x3050f2be, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLOptionButtonElement
{
}
enum CLSID_HTMLInputImage = GUID(0x3050f2c4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct HTMLInputImage
{
}
enum IID_IHTMLFiltersCollection = GUID(0x3050f3ee, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFiltersCollection : IDispatch
{
    HRESULT get_length(int*);
    HRESULT get__newEnum(IUnknown*);
    HRESULT item(VARIANT*, VARIANT*);
}
enum IID_IIE70DispatchEx = GUID(0x3051046b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IIE70DispatchEx : IDispatchEx
{
}
enum IID_IIE80DispatchEx = GUID(0x3051046c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IIE80DispatchEx : IDispatchEx
{
}
alias htmlDesignMode = int;
enum : int
{
    htmlDesignModeInherit = 0xfffffffe,
    htmlDesignModeOn      = 0xffffffff,
    htmlDesignModeOff     = 0x00000000,
    htmlDesignMode_Max    = 0x7fffffff,
}

alias htmlZOrder = int;
enum : int
{
    htmlZOrderFront = 0x00000000,
    htmlZOrderBack  = 0x00000001,
    htmlZOrder_Max  = 0x7fffffff,
}

alias htmlClear = int;
enum : int
{
    htmlClearNotSet = 0x00000000,
    htmlClearAll    = 0x00000001,
    htmlClearLeft   = 0x00000002,
    htmlClearRight  = 0x00000003,
    htmlClearBoth   = 0x00000004,
    htmlClearNone   = 0x00000005,
    htmlClear_Max   = 0x7fffffff,
}

alias htmlControlAlign = int;
enum : int
{
    htmlControlAlignNotSet    = 0x00000000,
    htmlControlAlignLeft      = 0x00000001,
    htmlControlAlignCenter    = 0x00000002,
    htmlControlAlignRight     = 0x00000003,
    htmlControlAlignTextTop   = 0x00000004,
    htmlControlAlignAbsMiddle = 0x00000005,
    htmlControlAlignBaseline  = 0x00000006,
    htmlControlAlignAbsBottom = 0x00000007,
    htmlControlAlignBottom    = 0x00000008,
    htmlControlAlignMiddle    = 0x00000009,
    htmlControlAlignTop       = 0x0000000a,
    htmlControlAlign_Max      = 0x7fffffff,
}

alias htmlBlockAlign = int;
enum : int
{
    htmlBlockAlignNotSet  = 0x00000000,
    htmlBlockAlignLeft    = 0x00000001,
    htmlBlockAlignCenter  = 0x00000002,
    htmlBlockAlignRight   = 0x00000003,
    htmlBlockAlignJustify = 0x00000004,
    htmlBlockAlign_Max    = 0x7fffffff,
}

alias htmlReadyState = int;
enum : int
{
    htmlReadyStateuninitialized = 0x00000000,
    htmlReadyStateloading       = 0x00000001,
    htmlReadyStateloaded        = 0x00000002,
    htmlReadyStateinteractive   = 0x00000003,
    htmlReadyStatecomplete      = 0x00000004,
    htmlReadyState_Max          = 0x7fffffff,
}

alias htmlLoop = int;
enum : int
{
    htmlLoopLoopInfinite = 0xffffffff,
    htmlLoop_Max         = 0x7fffffff,
}

alias mediaType = int;
enum : int
{
    mediaTypeNotSet     = 0x00000000,
    mediaTypeAll        = 0x000001ff,
    mediaTypeAural      = 0x00000001,
    mediaTypeBraille    = 0x00000002,
    mediaTypeEmbossed   = 0x00000004,
    mediaTypeHandheld   = 0x00000008,
    mediaTypePrint      = 0x00000010,
    mediaTypeProjection = 0x00000020,
    mediaTypeScreen     = 0x00000040,
    mediaTypeTty        = 0x00000080,
    mediaTypeTv         = 0x00000100,
    mediaType_Max       = 0x7fffffff,
}

alias DomConstructor = int;
enum : int
{
    DomConstructorObject                      = 0x00000000,
    DomConstructorAttr                        = 0x00000001,
    DomConstructorBehaviorUrnsCollection      = 0x00000002,
    DomConstructorBookmarkCollection          = 0x00000003,
    DomConstructorCompatibleInfo              = 0x00000004,
    DomConstructorCompatibleInfoCollection    = 0x00000005,
    DomConstructorControlRangeCollection      = 0x00000006,
    DomConstructorCSSCurrentStyleDeclaration  = 0x00000007,
    DomConstructorCSSRuleList                 = 0x00000008,
    DomConstructorCSSRuleStyleDeclaration     = 0x00000009,
    DomConstructorCSSStyleDeclaration         = 0x0000000a,
    DomConstructorCSSStyleRule                = 0x0000000b,
    DomConstructorCSSStyleSheet               = 0x0000000c,
    DomConstructorDataTransfer                = 0x0000000d,
    DomConstructorDOMImplementation           = 0x0000000e,
    DomConstructorElement                     = 0x0000000f,
    DomConstructorEvent                       = 0x00000010,
    DomConstructorHistory                     = 0x00000011,
    DomConstructorHTCElementBehaviorDefaults  = 0x00000012,
    DomConstructorHTMLAnchorElement           = 0x00000013,
    DomConstructorHTMLAreaElement             = 0x00000014,
    DomConstructorHTMLAreasCollection         = 0x00000015,
    DomConstructorHTMLBaseElement             = 0x00000016,
    DomConstructorHTMLBaseFontElement         = 0x00000017,
    DomConstructorHTMLBGSoundElement          = 0x00000018,
    DomConstructorHTMLBlockElement            = 0x00000019,
    DomConstructorHTMLBodyElement             = 0x0000001a,
    DomConstructorHTMLBRElement               = 0x0000001b,
    DomConstructorHTMLButtonElement           = 0x0000001c,
    DomConstructorHTMLCollection              = 0x0000001d,
    DomConstructorHTMLCommentElement          = 0x0000001e,
    DomConstructorHTMLDDElement               = 0x0000001f,
    DomConstructorHTMLDivElement              = 0x00000020,
    DomConstructorHTMLDocument                = 0x00000021,
    DomConstructorHTMLDListElement            = 0x00000022,
    DomConstructorHTMLDTElement               = 0x00000023,
    DomConstructorHTMLEmbedElement            = 0x00000024,
    DomConstructorHTMLFieldSetElement         = 0x00000025,
    DomConstructorHTMLFontElement             = 0x00000026,
    DomConstructorHTMLFormElement             = 0x00000027,
    DomConstructorHTMLFrameElement            = 0x00000028,
    DomConstructorHTMLFrameSetElement         = 0x00000029,
    DomConstructorHTMLGenericElement          = 0x0000002a,
    DomConstructorHTMLHeadElement             = 0x0000002b,
    DomConstructorHTMLHeadingElement          = 0x0000002c,
    DomConstructorHTMLHRElement               = 0x0000002d,
    DomConstructorHTMLHtmlElement             = 0x0000002e,
    DomConstructorHTMLIFrameElement           = 0x0000002f,
    DomConstructorHTMLImageElement            = 0x00000030,
    DomConstructorHTMLInputElement            = 0x00000031,
    DomConstructorHTMLIsIndexElement          = 0x00000032,
    DomConstructorHTMLLabelElement            = 0x00000033,
    DomConstructorHTMLLegendElement           = 0x00000034,
    DomConstructorHTMLLIElement               = 0x00000035,
    DomConstructorHTMLLinkElement             = 0x00000036,
    DomConstructorHTMLMapElement              = 0x00000037,
    DomConstructorHTMLMarqueeElement          = 0x00000038,
    DomConstructorHTMLMetaElement             = 0x00000039,
    DomConstructorHTMLModelessDialog          = 0x0000003a,
    DomConstructorHTMLNamespaceInfo           = 0x0000003b,
    DomConstructorHTMLNamespaceInfoCollection = 0x0000003c,
    DomConstructorHTMLNextIdElement           = 0x0000003d,
    DomConstructorHTMLNoShowElement           = 0x0000003e,
    DomConstructorHTMLObjectElement           = 0x0000003f,
    DomConstructorHTMLOListElement            = 0x00000040,
    DomConstructorHTMLOptionElement           = 0x00000041,
    DomConstructorHTMLParagraphElement        = 0x00000042,
    DomConstructorHTMLParamElement            = 0x00000043,
    DomConstructorHTMLPhraseElement           = 0x00000044,
    DomConstructorHTMLPluginsCollection       = 0x00000045,
    DomConstructorHTMLPopup                   = 0x00000046,
    DomConstructorHTMLScriptElement           = 0x00000047,
    DomConstructorHTMLSelectElement           = 0x00000048,
    DomConstructorHTMLSpanElement             = 0x00000049,
    DomConstructorHTMLStyleElement            = 0x0000004a,
    DomConstructorHTMLTableCaptionElement     = 0x0000004b,
    DomConstructorHTMLTableCellElement        = 0x0000004c,
    DomConstructorHTMLTableColElement         = 0x0000004d,
    DomConstructorHTMLTableElement            = 0x0000004e,
    DomConstructorHTMLTableRowElement         = 0x0000004f,
    DomConstructorHTMLTableSectionElement     = 0x00000050,
    DomConstructorHTMLTextAreaElement         = 0x00000051,
    DomConstructorHTMLTextElement             = 0x00000052,
    DomConstructorHTMLTitleElement            = 0x00000053,
    DomConstructorHTMLUListElement            = 0x00000054,
    DomConstructorHTMLUnknownElement          = 0x00000055,
    DomConstructorImage                       = 0x00000056,
    DomConstructorLocation                    = 0x00000057,
    DomConstructorNamedNodeMap                = 0x00000058,
    DomConstructorNavigator                   = 0x00000059,
    DomConstructorNodeList                    = 0x0000005a,
    DomConstructorOption                      = 0x0000005b,
    DomConstructorScreen                      = 0x0000005c,
    DomConstructorSelection                   = 0x0000005d,
    DomConstructorStaticNodeList              = 0x0000005e,
    DomConstructorStorage                     = 0x0000005f,
    DomConstructorStyleSheetList              = 0x00000060,
    DomConstructorStyleSheetPage              = 0x00000061,
    DomConstructorStyleSheetPageList          = 0x00000062,
    DomConstructorText                        = 0x00000063,
    DomConstructorTextRange                   = 0x00000064,
    DomConstructorTextRangeCollection         = 0x00000065,
    DomConstructorTextRectangle               = 0x00000066,
    DomConstructorTextRectangleList           = 0x00000067,
    DomConstructorWindow                      = 0x00000068,
    DomConstructorXDomainRequest              = 0x00000069,
    DomConstructorXMLHttpRequest              = 0x0000006a,
    DomConstructorMax                         = 0x0000006b,
    DomConstructor_Max                        = 0x7fffffff,
}

alias styleTextTransform = int;
enum : int
{
    styleTextTransformNotSet     = 0x00000000,
    styleTextTransformCapitalize = 0x00000001,
    styleTextTransformLowercase  = 0x00000002,
    styleTextTransformUppercase  = 0x00000003,
    styleTextTransformNone       = 0x00000004,
    styleTextTransform_Max       = 0x7fffffff,
}

alias styleDataRepeat = int;
enum : int
{
    styleDataRepeatNone  = 0x00000000,
    styleDataRepeatInner = 0x00000001,
    styleDataRepeat_Max  = 0x7fffffff,
}

alias styleOverflow = int;
enum : int
{
    styleOverflowNotSet  = 0x00000000,
    styleOverflowAuto    = 0x00000001,
    styleOverflowHidden  = 0x00000002,
    styleOverflowVisible = 0x00000003,
    styleOverflowScroll  = 0x00000004,
    styleOverflow_Max    = 0x7fffffff,
}

alias styleMsOverflowStyle = int;
enum : int
{
    styleMsOverflowStyleNotSet                = 0x00000000,
    styleMsOverflowStyleAuto                  = 0x00000001,
    styleMsOverflowStyleNone                  = 0x00000002,
    styleMsOverflowStyleScrollbar             = 0x00000003,
    styleMsOverflowStyleMsAutoHidingScrollbar = 0x00000004,
    styleMsOverflowStyle_Max                  = 0x7fffffff,
}

alias styleTableLayout = int;
enum : int
{
    styleTableLayoutNotSet = 0x00000000,
    styleTableLayoutAuto   = 0x00000001,
    styleTableLayoutFixed  = 0x00000002,
    styleTableLayout_Max   = 0x7fffffff,
}

alias styleBorderCollapse = int;
enum : int
{
    styleBorderCollapseNotSet   = 0x00000000,
    styleBorderCollapseSeparate = 0x00000001,
    styleBorderCollapseCollapse = 0x00000002,
    styleBorderCollapse_Max     = 0x7fffffff,
}

alias styleCaptionSide = int;
enum : int
{
    styleCaptionSideNotSet = 0x00000000,
    styleCaptionSideTop    = 0x00000001,
    styleCaptionSideBottom = 0x00000002,
    styleCaptionSideLeft   = 0x00000003,
    styleCaptionSideRight  = 0x00000004,
    styleCaptionSide_Max   = 0x7fffffff,
}

alias styleEmptyCells = int;
enum : int
{
    styleEmptyCellsNotSet = 0x00000000,
    styleEmptyCellsShow   = 0x00000001,
    styleEmptyCellsHide   = 0x00000002,
    styleEmptyCells_Max   = 0x7fffffff,
}

alias styleFontStyle = int;
enum : int
{
    styleFontStyleNotSet  = 0x00000000,
    styleFontStyleItalic  = 0x00000001,
    styleFontStyleOblique = 0x00000002,
    styleFontStyleNormal  = 0x00000003,
    styleFontStyle_Max    = 0x7fffffff,
}

alias styleFontVariant = int;
enum : int
{
    styleFontVariantNotSet    = 0x00000000,
    styleFontVariantSmallCaps = 0x00000001,
    styleFontVariantNormal    = 0x00000002,
    styleFontVariant_Max      = 0x7fffffff,
}

alias styleBackgroundRepeat = int;
enum : int
{
    styleBackgroundRepeatRepeat   = 0x00000000,
    styleBackgroundRepeatRepeatX  = 0x00000001,
    styleBackgroundRepeatRepeatY  = 0x00000002,
    styleBackgroundRepeatNoRepeat = 0x00000003,
    styleBackgroundRepeatNotSet   = 0x00000004,
    styleBackgroundRepeat_Max     = 0x7fffffff,
}

alias styleBackgroundAttachment = int;
enum : int
{
    styleBackgroundAttachmentFixed  = 0x00000000,
    styleBackgroundAttachmentScroll = 0x00000001,
    styleBackgroundAttachmentNotSet = 0x00000002,
    styleBackgroundAttachment_Max   = 0x7fffffff,
}

alias styleBackgroundAttachment3 = int;
enum : int
{
    styleBackgroundAttachment3Fixed  = 0x00000000,
    styleBackgroundAttachment3Scroll = 0x00000001,
    styleBackgroundAttachment3Local  = 0x00000002,
    styleBackgroundAttachment3NotSet = 0x00000003,
    styleBackgroundAttachment3_Max   = 0x7fffffff,
}

alias styleBackgroundClip = int;
enum : int
{
    styleBackgroundClipBorderBox  = 0x00000000,
    styleBackgroundClipPaddingBox = 0x00000001,
    styleBackgroundClipContentBox = 0x00000002,
    styleBackgroundClipNotSet     = 0x00000003,
    styleBackgroundClip_Max       = 0x7fffffff,
}

alias styleBackgroundOrigin = int;
enum : int
{
    styleBackgroundOriginBorderBox  = 0x00000000,
    styleBackgroundOriginPaddingBox = 0x00000001,
    styleBackgroundOriginContentBox = 0x00000002,
    styleBackgroundOriginNotSet     = 0x00000003,
    styleBackgroundOrigin_Max       = 0x7fffffff,
}

alias styleVerticalAlign = int;
enum : int
{
    styleVerticalAlignAuto       = 0x00000000,
    styleVerticalAlignBaseline   = 0x00000001,
    styleVerticalAlignSub        = 0x00000002,
    styleVerticalAlignSuper      = 0x00000003,
    styleVerticalAlignTop        = 0x00000004,
    styleVerticalAlignTextTop    = 0x00000005,
    styleVerticalAlignMiddle     = 0x00000006,
    styleVerticalAlignBottom     = 0x00000007,
    styleVerticalAlignTextBottom = 0x00000008,
    styleVerticalAlignInherit    = 0x00000009,
    styleVerticalAlignNotSet     = 0x0000000a,
    styleVerticalAlign_Max       = 0x7fffffff,
}

alias styleFontWeight = int;
enum : int
{
    styleFontWeightNotSet  = 0x00000000,
    styleFontWeight100     = 0x00000001,
    styleFontWeight200     = 0x00000002,
    styleFontWeight300     = 0x00000003,
    styleFontWeight400     = 0x00000004,
    styleFontWeight500     = 0x00000005,
    styleFontWeight600     = 0x00000006,
    styleFontWeight700     = 0x00000007,
    styleFontWeight800     = 0x00000008,
    styleFontWeight900     = 0x00000009,
    styleFontWeightNormal  = 0x0000000a,
    styleFontWeightBold    = 0x0000000b,
    styleFontWeightBolder  = 0x0000000c,
    styleFontWeightLighter = 0x0000000d,
    styleFontWeight_Max    = 0x7fffffff,
}

alias styleFontSize = int;
enum : int
{
    styleFontSizeXXSmall = 0x00000000,
    styleFontSizeXSmall  = 0x00000001,
    styleFontSizeSmall   = 0x00000002,
    styleFontSizeMedium  = 0x00000003,
    styleFontSizeLarge   = 0x00000004,
    styleFontSizeXLarge  = 0x00000005,
    styleFontSizeXXLarge = 0x00000006,
    styleFontSizeSmaller = 0x00000007,
    styleFontSizeLarger  = 0x00000008,
    styleFontSize_Max    = 0x7fffffff,
}

alias styleZIndex = int;
enum : int
{
    styleZIndexAuto = 0x80000001,
    styleZIndex_Max = 0x7fffffff,
}

alias styleWidowsOrphans = int;
enum : int
{
    styleWidowsOrphansNotSet = 0x80000001,
    styleWidowsOrphans_Max   = 0x7fffffff,
}

alias styleAuto = int;
enum : int
{
    styleAutoAuto = 0x00000000,
    styleAuto_Max = 0x7fffffff,
}

alias styleNone = int;
enum : int
{
    styleNoneNone = 0x00000000,
    styleNone_Max = 0x7fffffff,
}

alias styleNormal = int;
enum : int
{
    styleNormalNormal = 0x00000000,
    styleNormal_Max   = 0x7fffffff,
}

alias styleBorderWidth = int;
enum : int
{
    styleBorderWidthThin   = 0x00000000,
    styleBorderWidthMedium = 0x00000001,
    styleBorderWidthThick  = 0x00000002,
    styleBorderWidth_Max   = 0x7fffffff,
}

alias stylePosition = int;
enum : int
{
    stylePositionNotSet        = 0x00000000,
    stylePositionstatic        = 0x00000001,
    stylePositionrelative      = 0x00000002,
    stylePositionabsolute      = 0x00000003,
    stylePositionfixed         = 0x00000004,
    stylePositionMsPage        = 0x00000005,
    stylePositionMsDeviceFixed = 0x00000006,
    stylePosition_Max          = 0x7fffffff,
}

alias styleBorderStyle = int;
enum : int
{
    styleBorderStyleNotSet      = 0x00000000,
    styleBorderStyleDotted      = 0x00000001,
    styleBorderStyleDashed      = 0x00000002,
    styleBorderStyleSolid       = 0x00000003,
    styleBorderStyleDouble      = 0x00000004,
    styleBorderStyleGroove      = 0x00000005,
    styleBorderStyleRidge       = 0x00000006,
    styleBorderStyleInset       = 0x00000007,
    styleBorderStyleOutset      = 0x00000008,
    styleBorderStyleWindowInset = 0x00000009,
    styleBorderStyleNone        = 0x0000000a,
    styleBorderStyleHidden      = 0x0000000b,
    styleBorderStyle_Max        = 0x7fffffff,
}

alias styleOutlineStyle = int;
enum : int
{
    styleOutlineStyleNotSet      = 0x00000000,
    styleOutlineStyleDotted      = 0x00000001,
    styleOutlineStyleDashed      = 0x00000002,
    styleOutlineStyleSolid       = 0x00000003,
    styleOutlineStyleDouble      = 0x00000004,
    styleOutlineStyleGroove      = 0x00000005,
    styleOutlineStyleRidge       = 0x00000006,
    styleOutlineStyleInset       = 0x00000007,
    styleOutlineStyleOutset      = 0x00000008,
    styleOutlineStyleWindowInset = 0x00000009,
    styleOutlineStyleNone        = 0x0000000a,
    styleOutlineStyle_Max        = 0x7fffffff,
}

alias styleStyleFloat = int;
enum : int
{
    styleStyleFloatNotSet = 0x00000000,
    styleStyleFloatLeft   = 0x00000001,
    styleStyleFloatRight  = 0x00000002,
    styleStyleFloatNone   = 0x00000003,
    styleStyleFloat_Max   = 0x7fffffff,
}

alias styleDisplay = int;
enum : int
{
    styleDisplayNotSet            = 0x00000000,
    styleDisplayBlock             = 0x00000001,
    styleDisplayInline            = 0x00000002,
    styleDisplayListItem          = 0x00000003,
    styleDisplayNone              = 0x00000004,
    styleDisplayTableHeaderGroup  = 0x00000005,
    styleDisplayTableFooterGroup  = 0x00000006,
    styleDisplayInlineBlock       = 0x00000007,
    styleDisplayTable             = 0x00000008,
    styleDisplayInlineTable       = 0x00000009,
    styleDisplayTableRow          = 0x0000000a,
    styleDisplayTableRowGroup     = 0x0000000b,
    styleDisplayTableColumn       = 0x0000000c,
    styleDisplayTableColumnGroup  = 0x0000000d,
    styleDisplayTableCell         = 0x0000000e,
    styleDisplayTableCaption      = 0x0000000f,
    styleDisplayRunIn             = 0x00000010,
    styleDisplayRuby              = 0x00000011,
    styleDisplayRubyBase          = 0x00000012,
    styleDisplayRubyText          = 0x00000013,
    styleDisplayRubyBaseContainer = 0x00000014,
    styleDisplayRubyTextContainer = 0x00000015,
    styleDisplayMsFlexbox         = 0x00000016,
    styleDisplayMsInlineFlexbox   = 0x00000017,
    styleDisplayMsGrid            = 0x00000018,
    styleDisplayMsInlineGrid      = 0x00000019,
    styleDisplayFlex              = 0x0000001a,
    styleDisplayInlineFlex        = 0x0000001b,
    styleDisplayWebkitBox         = 0x0000001c,
    styleDisplayWebkitInlineBox   = 0x0000001d,
    styleDisplay_Max              = 0x7fffffff,
}

alias styleVisibility = int;
enum : int
{
    styleVisibilityNotSet   = 0x00000000,
    styleVisibilityInherit  = 0x00000001,
    styleVisibilityVisible  = 0x00000002,
    styleVisibilityHidden   = 0x00000003,
    styleVisibilityCollapse = 0x00000004,
    styleVisibility_Max     = 0x7fffffff,
}

alias styleListStyleType = int;
enum : int
{
    styleListStyleTypeNotSet             = 0x00000000,
    styleListStyleTypeDisc               = 0x00000001,
    styleListStyleTypeCircle             = 0x00000002,
    styleListStyleTypeSquare             = 0x00000003,
    styleListStyleTypeDecimal            = 0x00000004,
    styleListStyleTypeLowerRoman         = 0x00000005,
    styleListStyleTypeUpperRoman         = 0x00000006,
    styleListStyleTypeLowerAlpha         = 0x00000007,
    styleListStyleTypeUpperAlpha         = 0x00000008,
    styleListStyleTypeNone               = 0x00000009,
    styleListStyleTypeDecimalLeadingZero = 0x0000000a,
    styleListStyleTypeGeorgian           = 0x0000000b,
    styleListStyleTypeArmenian           = 0x0000000c,
    styleListStyleTypeUpperLatin         = 0x0000000d,
    styleListStyleTypeLowerLatin         = 0x0000000e,
    styleListStyleTypeUpperGreek         = 0x0000000f,
    styleListStyleTypeLowerGreek         = 0x00000010,
    styleListStyleType_Max               = 0x7fffffff,
}

alias styleListStylePosition = int;
enum : int
{
    styleListStylePositionNotSet  = 0x00000000,
    styleListStylePositionInside  = 0x00000001,
    styleListStylePositionOutSide = 0x00000002,
    styleListStylePosition_Max    = 0x7fffffff,
}

alias styleWhiteSpace = int;
enum : int
{
    styleWhiteSpaceNotSet  = 0x00000000,
    styleWhiteSpaceNormal  = 0x00000001,
    styleWhiteSpacePre     = 0x00000002,
    styleWhiteSpaceNowrap  = 0x00000003,
    styleWhiteSpacePreline = 0x00000004,
    styleWhiteSpacePrewrap = 0x00000005,
    styleWhiteSpace_Max    = 0x7fffffff,
}

alias stylePageBreak = int;
enum : int
{
    stylePageBreakNotSet = 0x00000000,
    stylePageBreakAuto   = 0x00000001,
    stylePageBreakAlways = 0x00000002,
    stylePageBreakLeft   = 0x00000003,
    stylePageBreakRight  = 0x00000004,
    stylePageBreakAvoid  = 0x00000005,
    stylePageBreak_Max   = 0x7fffffff,
}

alias stylePageBreakInside = int;
enum : int
{
    stylePageBreakInsideNotSet = 0x00000000,
    stylePageBreakInsideAuto   = 0x00000001,
    stylePageBreakInsideAvoid  = 0x00000002,
    stylePageBreakInside_Max   = 0x7fffffff,
}

alias styleCursor = int;
enum : int
{
    styleCursorAuto          = 0x00000000,
    styleCursorCrosshair     = 0x00000001,
    styleCursorDefault       = 0x00000002,
    styleCursorHand          = 0x00000003,
    styleCursorMove          = 0x00000004,
    styleCursorE_resize      = 0x00000005,
    styleCursorNe_resize     = 0x00000006,
    styleCursorNw_resize     = 0x00000007,
    styleCursorN_resize      = 0x00000008,
    styleCursorSe_resize     = 0x00000009,
    styleCursorSw_resize     = 0x0000000a,
    styleCursorS_resize      = 0x0000000b,
    styleCursorW_resize      = 0x0000000c,
    styleCursorText          = 0x0000000d,
    styleCursorWait          = 0x0000000e,
    styleCursorHelp          = 0x0000000f,
    styleCursorPointer       = 0x00000010,
    styleCursorProgress      = 0x00000011,
    styleCursorNot_allowed   = 0x00000012,
    styleCursorNo_drop       = 0x00000013,
    styleCursorVertical_text = 0x00000014,
    styleCursorall_scroll    = 0x00000015,
    styleCursorcol_resize    = 0x00000016,
    styleCursorrow_resize    = 0x00000017,
    styleCursorNone          = 0x00000018,
    styleCursorContext_menu  = 0x00000019,
    styleCursorEw_resize     = 0x0000001a,
    styleCursorNs_resize     = 0x0000001b,
    styleCursorNesw_resize   = 0x0000001c,
    styleCursorNwse_resize   = 0x0000001d,
    styleCursorCell          = 0x0000001e,
    styleCursorCopy          = 0x0000001f,
    styleCursorAlias         = 0x00000020,
    styleCursorcustom        = 0x00000021,
    styleCursorNotSet        = 0x00000022,
    styleCursor_Max          = 0x7fffffff,
}

alias styleDir = int;
enum : int
{
    styleDirNotSet      = 0x00000000,
    styleDirLeftToRight = 0x00000001,
    styleDirRightToLeft = 0x00000002,
    styleDirInherit     = 0x00000003,
    styleDir_Max        = 0x7fffffff,
}

alias styleBidi = int;
enum : int
{
    styleBidiNotSet   = 0x00000000,
    styleBidiNormal   = 0x00000001,
    styleBidiEmbed    = 0x00000002,
    styleBidiOverride = 0x00000003,
    styleBidiInherit  = 0x00000004,
    styleBidi_Max     = 0x7fffffff,
}

alias styleImeMode = int;
enum : int
{
    styleImeModeAuto     = 0x00000000,
    styleImeModeActive   = 0x00000001,
    styleImeModeInactive = 0x00000002,
    styleImeModeDisabled = 0x00000003,
    styleImeModeNotSet   = 0x00000004,
    styleImeMode_Max     = 0x7fffffff,
}

alias styleRubyAlign = int;
enum : int
{
    styleRubyAlignNotSet           = 0x00000000,
    styleRubyAlignAuto             = 0x00000001,
    styleRubyAlignLeft             = 0x00000002,
    styleRubyAlignCenter           = 0x00000003,
    styleRubyAlignRight            = 0x00000004,
    styleRubyAlignDistributeLetter = 0x00000005,
    styleRubyAlignDistributeSpace  = 0x00000006,
    styleRubyAlignLineEdge         = 0x00000007,
    styleRubyAlign_Max             = 0x7fffffff,
}

alias styleRubyPosition = int;
enum : int
{
    styleRubyPositionNotSet = 0x00000000,
    styleRubyPositionAbove  = 0x00000001,
    styleRubyPositionInline = 0x00000002,
    styleRubyPosition_Max   = 0x7fffffff,
}

alias styleRubyOverhang = int;
enum : int
{
    styleRubyOverhangNotSet     = 0x00000000,
    styleRubyOverhangAuto       = 0x00000001,
    styleRubyOverhangWhitespace = 0x00000002,
    styleRubyOverhangNone       = 0x00000003,
    styleRubyOverhang_Max       = 0x7fffffff,
}

alias styleLayoutGridChar = int;
enum : int
{
    styleLayoutGridCharNotSet = 0x00000000,
    styleLayoutGridCharAuto   = 0x00000001,
    styleLayoutGridCharNone   = 0x00000002,
    styleLayoutGridChar_Max   = 0x7fffffff,
}

alias styleLayoutGridLine = int;
enum : int
{
    styleLayoutGridLineNotSet = 0x00000000,
    styleLayoutGridLineAuto   = 0x00000001,
    styleLayoutGridLineNone   = 0x00000002,
    styleLayoutGridLine_Max   = 0x7fffffff,
}

alias styleLayoutGridMode = int;
enum : int
{
    styleLayoutGridModeNotSet = 0x00000000,
    styleLayoutGridModeChar   = 0x00000001,
    styleLayoutGridModeLine   = 0x00000002,
    styleLayoutGridModeBoth   = 0x00000003,
    styleLayoutGridModeNone   = 0x00000004,
    styleLayoutGridMode_Max   = 0x7fffffff,
}

alias styleLayoutGridType = int;
enum : int
{
    styleLayoutGridTypeNotSet = 0x00000000,
    styleLayoutGridTypeLoose  = 0x00000001,
    styleLayoutGridTypeStrict = 0x00000002,
    styleLayoutGridTypeFixed  = 0x00000003,
    styleLayoutGridType_Max   = 0x7fffffff,
}

alias styleLineBreak = int;
enum : int
{
    styleLineBreakNotSet = 0x00000000,
    styleLineBreakNormal = 0x00000001,
    styleLineBreakStrict = 0x00000002,
    styleLineBreak_Max   = 0x7fffffff,
}

alias styleWordBreak = int;
enum : int
{
    styleWordBreakNotSet   = 0x00000000,
    styleWordBreakNormal   = 0x00000001,
    styleWordBreakBreakAll = 0x00000002,
    styleWordBreakKeepAll  = 0x00000003,
    styleWordBreak_Max     = 0x7fffffff,
}

alias styleWordWrap = int;
enum : int
{
    styleWordWrapNotSet = 0x00000000,
    styleWordWrapOff    = 0x00000001,
    styleWordWrapOn     = 0x00000002,
    styleWordWrap_Max   = 0x7fffffff,
}

alias styleTextJustify = int;
enum : int
{
    styleTextJustifyNotSet             = 0x00000000,
    styleTextJustifyInterWord          = 0x00000001,
    styleTextJustifyNewspaper          = 0x00000002,
    styleTextJustifyDistribute         = 0x00000003,
    styleTextJustifyDistributeAllLines = 0x00000004,
    styleTextJustifyInterIdeograph     = 0x00000005,
    styleTextJustifyInterCluster       = 0x00000006,
    styleTextJustifyKashida            = 0x00000007,
    styleTextJustifyAuto               = 0x00000008,
    styleTextJustify_Max               = 0x7fffffff,
}

alias styleTextAlignLast = int;
enum : int
{
    styleTextAlignLastNotSet  = 0x00000000,
    styleTextAlignLastLeft    = 0x00000001,
    styleTextAlignLastCenter  = 0x00000002,
    styleTextAlignLastRight   = 0x00000003,
    styleTextAlignLastJustify = 0x00000004,
    styleTextAlignLastAuto    = 0x00000005,
    styleTextAlignLast_Max    = 0x7fffffff,
}

alias styleTextJustifyTrim = int;
enum : int
{
    styleTextJustifyTrimNotSet       = 0x00000000,
    styleTextJustifyTrimNone         = 0x00000001,
    styleTextJustifyTrimPunctuation  = 0x00000002,
    styleTextJustifyTrimPunctAndKana = 0x00000003,
    styleTextJustifyTrim_Max         = 0x7fffffff,
}

alias styleAccelerator = int;
enum : int
{
    styleAcceleratorFalse = 0x00000000,
    styleAcceleratorTrue  = 0x00000001,
    styleAccelerator_Max  = 0x7fffffff,
}

alias styleLayoutFlow = int;
enum : int
{
    styleLayoutFlowHorizontal          = 0x00000000,
    styleLayoutFlowVerticalIdeographic = 0x00000001,
    styleLayoutFlowNotSet              = 0x00000002,
    styleLayoutFlow_Max                = 0x7fffffff,
}

alias styleBlockProgression = int;
enum : int
{
    styleBlockProgressionTb     = 0x00000000,
    styleBlockProgressionRl     = 0x00000001,
    styleBlockProgressionBt     = 0x00000002,
    styleBlockProgressionLr     = 0x00000003,
    styleBlockProgressionNotSet = 0x00000004,
    styleBlockProgression_Max   = 0x7fffffff,
}

alias styleWritingMode = int;
enum : int
{
    styleWritingModeLrtb   = 0x00000000,
    styleWritingModeTbrl   = 0x00000001,
    styleWritingModeRltb   = 0x00000002,
    styleWritingModeBtrl   = 0x00000003,
    styleWritingModeNotSet = 0x00000004,
    styleWritingModeTblr   = 0x00000005,
    styleWritingModeBtlr   = 0x00000006,
    styleWritingModeLrbt   = 0x00000007,
    styleWritingModeRlbt   = 0x00000008,
    styleWritingModeLr     = 0x00000009,
    styleWritingModeRl     = 0x0000000a,
    styleWritingModeTb     = 0x0000000b,
    styleWritingMode_Max   = 0x7fffffff,
}

alias styleBool = int;
enum : int
{
    styleBoolFalse = 0x00000000,
    styleBoolTrue  = 0x00000001,
    styleBool_Max  = 0x7fffffff,
}

alias styleTextUnderlinePosition = int;
enum : int
{
    styleTextUnderlinePositionBelow  = 0x00000000,
    styleTextUnderlinePositionAbove  = 0x00000001,
    styleTextUnderlinePositionAuto   = 0x00000002,
    styleTextUnderlinePositionNotSet = 0x00000003,
    styleTextUnderlinePosition_Max   = 0x7fffffff,
}

alias styleTextOverflow = int;
enum : int
{
    styleTextOverflowClip     = 0x00000000,
    styleTextOverflowEllipsis = 0x00000001,
    styleTextOverflowNotSet   = 0x00000002,
    styleTextOverflow_Max     = 0x7fffffff,
}

alias styleInterpolation = int;
enum : int
{
    styleInterpolationNotSet = 0x00000000,
    styleInterpolationNN     = 0x00000001,
    styleInterpolationBCH    = 0x00000002,
    styleInterpolation_Max   = 0x7fffffff,
}

alias styleBoxSizing = int;
enum : int
{
    styleBoxSizingNotSet     = 0x00000000,
    styleBoxSizingContentBox = 0x00000001,
    styleBoxSizingBorderBox  = 0x00000002,
    styleBoxSizing_Max       = 0x7fffffff,
}

alias styleFlex = int;
enum : int
{
    styleFlexNone   = 0x00000000,
    styleFlexNotSet = 0x00000001,
    styleFlex_Max   = 0x7fffffff,
}

alias styleFlexBasis = int;
enum : int
{
    styleFlexBasisAuto   = 0x00000000,
    styleFlexBasisNotSet = 0x00000001,
    styleFlexBasis_Max   = 0x7fffffff,
}

alias styleFlexDirection = int;
enum : int
{
    styleFlexDirectionRow           = 0x00000000,
    styleFlexDirectionRowReverse    = 0x00000001,
    styleFlexDirectionColumn        = 0x00000002,
    styleFlexDirectionColumnReverse = 0x00000003,
    styleFlexDirectionNotSet        = 0x00000004,
    styleFlexDirection_Max          = 0x7fffffff,
}

alias styleWebkitBoxOrient = int;
enum : int
{
    styleWebkitBoxOrientHorizontal = 0x00000000,
    styleWebkitBoxOrientInlineAxis = 0x00000001,
    styleWebkitBoxOrientVertical   = 0x00000002,
    styleWebkitBoxOrientBlockAxis  = 0x00000003,
    styleWebkitBoxOrientNotSet     = 0x00000004,
    styleWebkitBoxOrient_Max       = 0x7fffffff,
}

alias styleWebkitBoxDirection = int;
enum : int
{
    styleWebkitBoxDirectionNormal  = 0x00000000,
    styleWebkitBoxDirectionReverse = 0x00000001,
    styleWebkitBoxDirectionNotSet  = 0x00000002,
    styleWebkitBoxDirection_Max    = 0x7fffffff,
}

alias styleFlexWrap = int;
enum : int
{
    styleFlexWrapNowrap      = 0x00000000,
    styleFlexWrapWrap        = 0x00000001,
    styleFlexWrapWrapReverse = 0x00000002,
    styleFlexWrapNotSet      = 0x00000003,
    styleFlexWrap_Max        = 0x7fffffff,
}

alias styleAlignItems = int;
enum : int
{
    styleAlignItemsFlexStart = 0x00000000,
    styleAlignItemsFlexEnd   = 0x00000001,
    styleAlignItemsCenter    = 0x00000002,
    styleAlignItemsBaseline  = 0x00000003,
    styleAlignItemsStretch   = 0x00000004,
    styleAlignItemsNotSet    = 0x00000005,
    styleAlignItems_Max      = 0x7fffffff,
}

alias styleMsFlexAlign = int;
enum : int
{
    styleMsFlexAlignStart    = 0x00000000,
    styleMsFlexAlignEnd      = 0x00000001,
    styleMsFlexAlignCenter   = 0x00000002,
    styleMsFlexAlignBaseline = 0x00000003,
    styleMsFlexAlignStretch  = 0x00000004,
    styleMsFlexAlignNotSet   = 0x00000005,
    styleMsFlexAlign_Max     = 0x7fffffff,
}

alias styleMsFlexItemAlign = int;
enum : int
{
    styleMsFlexItemAlignStart    = 0x00000000,
    styleMsFlexItemAlignEnd      = 0x00000001,
    styleMsFlexItemAlignCenter   = 0x00000002,
    styleMsFlexItemAlignBaseline = 0x00000003,
    styleMsFlexItemAlignStretch  = 0x00000004,
    styleMsFlexItemAlignAuto     = 0x00000005,
    styleMsFlexItemAlignNotSet   = 0x00000006,
    styleMsFlexItemAlign_Max     = 0x7fffffff,
}

alias styleAlignSelf = int;
enum : int
{
    styleAlignSelfFlexStart = 0x00000000,
    styleAlignSelfFlexEnd   = 0x00000001,
    styleAlignSelfCenter    = 0x00000002,
    styleAlignSelfBaseline  = 0x00000003,
    styleAlignSelfStretch   = 0x00000004,
    styleAlignSelfAuto      = 0x00000005,
    styleAlignSelfNotSet    = 0x00000006,
    styleAlignSelf_Max      = 0x7fffffff,
}

alias styleJustifyContent = int;
enum : int
{
    styleJustifyContentFlexStart    = 0x00000000,
    styleJustifyContentFlexEnd      = 0x00000001,
    styleJustifyContentCenter       = 0x00000002,
    styleJustifyContentSpaceBetween = 0x00000003,
    styleJustifyContentSpaceAround  = 0x00000004,
    styleJustifyContentNotSet       = 0x00000005,
    styleJustifyContent_Max         = 0x7fffffff,
}

alias styleMsFlexPack = int;
enum : int
{
    styleMsFlexPackStart      = 0x00000000,
    styleMsFlexPackEnd        = 0x00000001,
    styleMsFlexPackCenter     = 0x00000002,
    styleMsFlexPackJustify    = 0x00000003,
    styleMsFlexPackDistribute = 0x00000004,
    styleMsFlexPackNotSet     = 0x00000005,
    styleMsFlexPack_Max       = 0x7fffffff,
}

alias styleWebkitBoxPack = int;
enum : int
{
    styleWebkitBoxPackStart   = 0x00000000,
    styleWebkitBoxPackEnd     = 0x00000001,
    styleWebkitBoxPackCenter  = 0x00000002,
    styleWebkitBoxPackJustify = 0x00000003,
    styleWebkitBoxPackNotSet  = 0x00000005,
    styleWebkitBoxPack_Max    = 0x7fffffff,
}

alias styleMsFlexLinePack = int;
enum : int
{
    styleMsFlexLinePackStart      = 0x00000000,
    styleMsFlexLinePackEnd        = 0x00000001,
    styleMsFlexLinePackCenter     = 0x00000002,
    styleMsFlexLinePackJustify    = 0x00000003,
    styleMsFlexLinePackDistribute = 0x00000004,
    styleMsFlexLinePackStretch    = 0x00000005,
    styleMsFlexLinePackNotSet     = 0x00000006,
    styleMsFlexLinePack_Max       = 0x7fffffff,
}

alias styleAlignContent = int;
enum : int
{
    styleAlignContentFlexStart    = 0x00000000,
    styleAlignContentFlexEnd      = 0x00000001,
    styleAlignContentCenter       = 0x00000002,
    styleAlignContentSpaceBetween = 0x00000003,
    styleAlignContentSpaceAround  = 0x00000004,
    styleAlignContentStretch      = 0x00000005,
    styleAlignContentNotSet       = 0x00000006,
    styleAlignContent_Max         = 0x7fffffff,
}

alias styleColumnFill = int;
enum : int
{
    styleColumnFillAuto    = 0x00000000,
    styleColumnFillBalance = 0x00000001,
    styleColumnFillNotSet  = 0x00000002,
    styleColumnFill_Max    = 0x7fffffff,
}

alias styleColumnSpan = int;
enum : int
{
    styleColumnSpanNone   = 0x00000000,
    styleColumnSpanAll    = 0x00000001,
    styleColumnSpanOne    = 0x00000002,
    styleColumnSpanNotSet = 0x00000003,
    styleColumnSpan_Max   = 0x7fffffff,
}

alias styleBreak = int;
enum : int
{
    styleBreakNotSet      = 0x00000000,
    styleBreakAuto        = 0x00000001,
    styleBreakAlways      = 0x00000002,
    styleBreakAvoid       = 0x00000003,
    styleBreakLeft        = 0x00000004,
    styleBreakRight       = 0x00000005,
    styleBreakPage        = 0x00000006,
    styleBreakColumn      = 0x00000007,
    styleBreakAvoidPage   = 0x00000008,
    styleBreakAvoidColumn = 0x00000009,
    styleBreak_Max        = 0x7fffffff,
}

alias styleBreakInside = int;
enum : int
{
    styleBreakInsideNotSet      = 0x00000000,
    styleBreakInsideAuto        = 0x00000001,
    styleBreakInsideAvoid       = 0x00000002,
    styleBreakInsideAvoidPage   = 0x00000003,
    styleBreakInsideAvoidColumn = 0x00000004,
    styleBreakInside_Max        = 0x7fffffff,
}

alias styleMsScrollChaining = int;
enum : int
{
    styleMsScrollChainingNotSet  = 0x00000000,
    styleMsScrollChainingNone    = 0x00000001,
    styleMsScrollChainingChained = 0x00000002,
    styleMsScrollChaining_Max    = 0x7fffffff,
}

alias styleMsContentZooming = int;
enum : int
{
    styleMsContentZoomingNotSet = 0x00000000,
    styleMsContentZoomingNone   = 0x00000001,
    styleMsContentZoomingZoom   = 0x00000002,
    styleMsContentZooming_Max   = 0x7fffffff,
}

alias styleMsContentZoomSnapType = int;
enum : int
{
    styleMsContentZoomSnapTypeNotSet    = 0x00000000,
    styleMsContentZoomSnapTypeNone      = 0x00000001,
    styleMsContentZoomSnapTypeMandatory = 0x00000002,
    styleMsContentZoomSnapTypeProximity = 0x00000003,
    styleMsContentZoomSnapType_Max      = 0x7fffffff,
}

alias styleMsScrollRails = int;
enum : int
{
    styleMsScrollRailsNotSet = 0x00000000,
    styleMsScrollRailsNone   = 0x00000001,
    styleMsScrollRailsRailed = 0x00000002,
    styleMsScrollRails_Max   = 0x7fffffff,
}

alias styleMsContentZoomChaining = int;
enum : int
{
    styleMsContentZoomChainingNotSet  = 0x00000000,
    styleMsContentZoomChainingNone    = 0x00000001,
    styleMsContentZoomChainingChained = 0x00000002,
    styleMsContentZoomChaining_Max    = 0x7fffffff,
}

alias styleMsScrollSnapType = int;
enum : int
{
    styleMsScrollSnapTypeNotSet    = 0x00000000,
    styleMsScrollSnapTypeNone      = 0x00000001,
    styleMsScrollSnapTypeMandatory = 0x00000002,
    styleMsScrollSnapTypeProximity = 0x00000003,
    styleMsScrollSnapType_Max      = 0x7fffffff,
}

alias styleGridColumn = int;
enum : int
{
    styleGridColumnNotSet = 0x00000000,
    styleGridColumn_Max   = 0x7fffffff,
}

alias styleGridColumnAlign = int;
enum : int
{
    styleGridColumnAlignCenter  = 0x00000000,
    styleGridColumnAlignEnd     = 0x00000001,
    styleGridColumnAlignStart   = 0x00000002,
    styleGridColumnAlignStretch = 0x00000003,
    styleGridColumnAlignNotSet  = 0x00000004,
    styleGridColumnAlign_Max    = 0x7fffffff,
}

alias styleGridColumnSpan = int;
enum : int
{
    styleGridColumnSpanNotSet = 0x00000000,
    styleGridColumnSpan_Max   = 0x7fffffff,
}

alias styleGridRow = int;
enum : int
{
    styleGridRowNotSet = 0x00000000,
    styleGridRow_Max   = 0x7fffffff,
}

alias styleGridRowAlign = int;
enum : int
{
    styleGridRowAlignCenter  = 0x00000000,
    styleGridRowAlignEnd     = 0x00000001,
    styleGridRowAlignStart   = 0x00000002,
    styleGridRowAlignStretch = 0x00000003,
    styleGridRowAlignNotSet  = 0x00000004,
    styleGridRowAlign_Max    = 0x7fffffff,
}

alias styleGridRowSpan = int;
enum : int
{
    styleGridRowSpanNotSet = 0x00000000,
    styleGridRowSpan_Max   = 0x7fffffff,
}

alias styleWrapThrough = int;
enum : int
{
    styleWrapThroughNotSet = 0x00000000,
    styleWrapThroughWrap   = 0x00000001,
    styleWrapThroughNone   = 0x00000002,
    styleWrapThrough_Max   = 0x7fffffff,
}

alias styleWrapFlow = int;
enum : int
{
    styleWrapFlowNotSet  = 0x00000000,
    styleWrapFlowAuto    = 0x00000001,
    styleWrapFlowBoth    = 0x00000002,
    styleWrapFlowStart   = 0x00000003,
    styleWrapFlowEnd     = 0x00000004,
    styleWrapFlowClear   = 0x00000005,
    styleWrapFlowMinimum = 0x00000006,
    styleWrapFlowMaximum = 0x00000007,
    styleWrapFlow_Max    = 0x7fffffff,
}

alias styleAlignmentBaseline = int;
enum : int
{
    styleAlignmentBaselineNotSet         = 0x00000000,
    styleAlignmentBaselineAfterEdge      = 0x00000001,
    styleAlignmentBaselineAlphabetic     = 0x00000002,
    styleAlignmentBaselineAuto           = 0x00000003,
    styleAlignmentBaselineBaseline       = 0x00000004,
    styleAlignmentBaselineBeforeEdge     = 0x00000005,
    styleAlignmentBaselineCentral        = 0x00000006,
    styleAlignmentBaselineHanging        = 0x00000007,
    styleAlignmentBaselineMathematical   = 0x00000008,
    styleAlignmentBaselineMiddle         = 0x00000009,
    styleAlignmentBaselineTextAfterEdge  = 0x0000000a,
    styleAlignmentBaselineTextBeforeEdge = 0x0000000b,
    styleAlignmentBaselineIdeographic    = 0x0000000c,
    styleAlignmentBaseline_Max           = 0x7fffffff,
}

alias styleBaselineShift = int;
enum : int
{
    styleBaselineShiftBaseline = 0x00000000,
    styleBaselineShiftSub      = 0x00000001,
    styleBaselineShiftSuper    = 0x00000002,
    styleBaselineShift_Max     = 0x7fffffff,
}

alias styleClipRule = int;
enum : int
{
    styleClipRuleNotSet  = 0x00000000,
    styleClipRuleNonZero = 0x00000001,
    styleClipRuleEvenOdd = 0x00000002,
    styleClipRule_Max    = 0x7fffffff,
}

alias styleDominantBaseline = int;
enum : int
{
    styleDominantBaselineNotSet         = 0x00000000,
    styleDominantBaselineAlphabetic     = 0x00000001,
    styleDominantBaselineAuto           = 0x00000002,
    styleDominantBaselineCentral        = 0x00000003,
    styleDominantBaselineHanging        = 0x00000004,
    styleDominantBaselineIdeographic    = 0x00000005,
    styleDominantBaselineMathematical   = 0x00000006,
    styleDominantBaselineMiddle         = 0x00000007,
    styleDominantBaselineNoChange       = 0x00000008,
    styleDominantBaselineResetSize      = 0x00000009,
    styleDominantBaselineTextAfterEdge  = 0x0000000a,
    styleDominantBaselineTextBeforeEdge = 0x0000000b,
    styleDominantBaselineUseScript      = 0x0000000c,
    styleDominantBaseline_Max           = 0x7fffffff,
}

alias styleFillRule = int;
enum : int
{
    styleFillRuleNotSet  = 0x00000000,
    styleFillRuleNonZero = 0x00000001,
    styleFillRuleEvenOdd = 0x00000002,
    styleFillRule_Max    = 0x7fffffff,
}

alias styleFontStretch = int;
enum : int
{
    styleFontStretchNotSet         = 0x00000000,
    styleFontStretchWider          = 0x00000001,
    styleFontStretchNarrower       = 0x00000002,
    styleFontStretchUltraCondensed = 0x00000003,
    styleFontStretchExtraCondensed = 0x00000004,
    styleFontStretchCondensed      = 0x00000005,
    styleFontStretchSemiCondensed  = 0x00000006,
    styleFontStretchNormal         = 0x00000007,
    styleFontStretchSemiExpanded   = 0x00000008,
    styleFontStretchExpanded       = 0x00000009,
    styleFontStretchExtraExpanded  = 0x0000000a,
    styleFontStretchUltraExpanded  = 0x0000000b,
    styleFontStretch_Max           = 0x7fffffff,
}

alias stylePointerEvents = int;
enum : int
{
    stylePointerEventsNotSet         = 0x00000000,
    stylePointerEventsVisiblePainted = 0x00000001,
    stylePointerEventsVisibleFill    = 0x00000002,
    stylePointerEventsVisibleStroke  = 0x00000003,
    stylePointerEventsVisible        = 0x00000004,
    stylePointerEventsPainted        = 0x00000005,
    stylePointerEventsFill           = 0x00000006,
    stylePointerEventsStroke         = 0x00000007,
    stylePointerEventsAll            = 0x00000008,
    stylePointerEventsNone           = 0x00000009,
    stylePointerEventsInitial        = 0x0000000a,
    stylePointerEventsAuto           = 0x0000000b,
    stylePointerEvents_Max           = 0x7fffffff,
}

alias styleEnableBackground = int;
enum : int
{
    styleEnableBackgroundNotSet     = 0x00000000,
    styleEnableBackgroundAccumulate = 0x00000001,
    styleEnableBackgroundNew        = 0x00000002,
    styleEnableBackgroundInherit    = 0x00000003,
    styleEnableBackground_Max       = 0x7fffffff,
}

alias styleStrokeLinecap = int;
enum : int
{
    styleStrokeLinecapNotSet = 0x00000000,
    styleStrokeLinecapButt   = 0x00000001,
    styleStrokeLinecapRound  = 0x00000002,
    styleStrokeLinecapSquare = 0x00000003,
    styleStrokeLinecap_Max   = 0x7fffffff,
}

alias styleStrokeLinejoin = int;
enum : int
{
    styleStrokeLinejoinNotSet = 0x00000000,
    styleStrokeLinejoinMiter  = 0x00000001,
    styleStrokeLinejoinRound  = 0x00000002,
    styleStrokeLinejoinBevel  = 0x00000003,
    styleStrokeLinejoin_Max   = 0x7fffffff,
}

alias styleTextAnchor = int;
enum : int
{
    styleTextAnchorNotSet = 0x00000000,
    styleTextAnchorStart  = 0x00000001,
    styleTextAnchorMiddle = 0x00000002,
    styleTextAnchorEnd    = 0x00000003,
    styleTextAnchor_Max   = 0x7fffffff,
}

alias styleAttrType = int;
enum : int
{
    styleAttrTypeString     = 0x00000000,
    styleAttrTypeColor      = 0x00000001,
    styleAttrTypeUrl        = 0x00000002,
    styleAttrTypeInteger    = 0x00000003,
    styleAttrTypeNumber     = 0x00000004,
    styleAttrTypeLength     = 0x00000005,
    styleAttrTypePx         = 0x00000006,
    styleAttrTypeEm         = 0x00000007,
    styleAttrTypeEx         = 0x00000008,
    styleAttrTypeIn         = 0x00000009,
    styleAttrTypeCm         = 0x0000000a,
    styleAttrTypeMm         = 0x0000000b,
    styleAttrTypePt         = 0x0000000c,
    styleAttrTypePc         = 0x0000000d,
    styleAttrTypeRem        = 0x0000000e,
    styleAttrTypeCh         = 0x0000000f,
    styleAttrTypeVh         = 0x00000010,
    styleAttrTypeVw         = 0x00000011,
    styleAttrTypeVmin       = 0x00000012,
    styleAttrTypePercentage = 0x00000013,
    styleAttrTypeAngle      = 0x00000014,
    styleAttrTypeDeg        = 0x00000015,
    styleAttrTypeRad        = 0x00000016,
    styleAttrTypeGrad       = 0x00000017,
    styleAttrTypeTime       = 0x00000018,
    styleAttrTypeS          = 0x00000019,
    styleAttrTypeMs         = 0x0000001a,
    styleAttrType_Max       = 0x7fffffff,
}

alias styleInitialColor = int;
enum : int
{
    styleInitialColorNoInitial     = 0x00000000,
    styleInitialColorColorProperty = 0x00000001,
    styleInitialColorTransparent   = 0x00000002,
    styleInitialColorInvert        = 0x00000003,
    styleInitialColor_Max          = 0x7fffffff,
}

alias styleInitialString = int;
enum : int
{
    styleInitialStringNoInitial = 0x00000000,
    styleInitialStringNone      = 0x00000001,
    styleInitialStringAuto      = 0x00000002,
    styleInitialStringNormal    = 0x00000003,
    styleInitialString_Max      = 0x7fffffff,
}

alias styleTransformOriginX = int;
enum : int
{
    styleTransformOriginXNotSet = 0x00000000,
    styleTransformOriginXLeft   = 0x00000001,
    styleTransformOriginXCenter = 0x00000002,
    styleTransformOriginXRight  = 0x00000003,
    styleTransformOriginX_Max   = 0x7fffffff,
}

alias styleTransformOriginY = int;
enum : int
{
    styleTransformOriginYNotSet = 0x00000000,
    styleTransformOriginYTop    = 0x00000001,
    styleTransformOriginYCenter = 0x00000002,
    styleTransformOriginYBottom = 0x00000003,
    styleTransformOriginY_Max   = 0x7fffffff,
}

alias stylePerspectiveOriginX = int;
enum : int
{
    stylePerspectiveOriginXNotSet = 0x00000000,
    stylePerspectiveOriginXLeft   = 0x00000001,
    stylePerspectiveOriginXCenter = 0x00000002,
    stylePerspectiveOriginXRight  = 0x00000003,
    stylePerspectiveOriginX_Max   = 0x7fffffff,
}

alias stylePerspectiveOriginY = int;
enum : int
{
    stylePerspectiveOriginYNotSet = 0x00000000,
    stylePerspectiveOriginYTop    = 0x00000001,
    stylePerspectiveOriginYCenter = 0x00000002,
    stylePerspectiveOriginYBottom = 0x00000003,
    stylePerspectiveOriginY_Max   = 0x7fffffff,
}

alias styleTransformStyle = int;
enum : int
{
    styleTransformStyleFlat       = 0x00000000,
    styleTransformStylePreserve3D = 0x00000001,
    styleTransformStyleNotSet     = 0x00000002,
    styleTransformStyle_Max       = 0x7fffffff,
}

alias styleBackfaceVisibility = int;
enum : int
{
    styleBackfaceVisibilityVisible = 0x00000000,
    styleBackfaceVisibilityHidden  = 0x00000001,
    styleBackfaceVisibilityNotSet  = 0x00000002,
    styleBackfaceVisibility_Max    = 0x7fffffff,
}

alias styleTextSizeAdjust = int;
enum : int
{
    styleTextSizeAdjustNone = 0x00000000,
    styleTextSizeAdjustAuto = 0x00000001,
    styleTextSizeAdjust_Max = 0x7fffffff,
}

alias styleColorInterpolationFilters = int;
enum : int
{
    styleColorInterpolationFiltersAuto      = 0x00000000,
    styleColorInterpolationFiltersSRgb      = 0x00000001,
    styleColorInterpolationFiltersLinearRgb = 0x00000002,
    styleColorInterpolationFiltersNotSet    = 0x00000003,
    styleColorInterpolationFilters_Max      = 0x7fffffff,
}

alias styleHyphens = int;
enum : int
{
    styleHyphensNone   = 0x00000000,
    styleHyphensManual = 0x00000001,
    styleHyphensAuto   = 0x00000002,
    styleHyphensNotSet = 0x00000003,
    styleHyphens_Max   = 0x7fffffff,
}

alias styleHyphenateLimitLines = int;
enum : int
{
    styleHyphenateLimitLinesNoLimit = 0x00000000,
    styleHyphenateLimitLines_Max    = 0x7fffffff,
}

alias styleMsAnimationPlayState = int;
enum : int
{
    styleMsAnimationPlayStateRunning = 0x00000000,
    styleMsAnimationPlayStatePaused  = 0x00000001,
    styleMsAnimationPlayStateNotSet  = 0x00000002,
    styleMsAnimationPlayState_Max    = 0x7fffffff,
}

alias styleMsAnimationDirection = int;
enum : int
{
    styleMsAnimationDirectionNormal           = 0x00000000,
    styleMsAnimationDirectionAlternate        = 0x00000001,
    styleMsAnimationDirectionReverse          = 0x00000002,
    styleMsAnimationDirectionAlternateReverse = 0x00000003,
    styleMsAnimationDirectionNotSet           = 0x00000004,
    styleMsAnimationDirection_Max             = 0x7fffffff,
}

alias styleMsAnimationFillMode = int;
enum : int
{
    styleMsAnimationFillModeNone      = 0x00000000,
    styleMsAnimationFillModeForwards  = 0x00000001,
    styleMsAnimationFillModeBackwards = 0x00000002,
    styleMsAnimationFillModeBoth      = 0x00000003,
    styleMsAnimationFillModeNotSet    = 0x00000004,
    styleMsAnimationFillMode_Max      = 0x7fffffff,
}

alias styleMsHighContrastAdjust = int;
enum : int
{
    styleMsHighContrastAdjustNotSet = 0x00000000,
    styleMsHighContrastAdjustAuto   = 0x00000001,
    styleMsHighContrastAdjustNone   = 0x00000002,
    styleMsHighContrastAdjust_Max   = 0x7fffffff,
}

alias styleMsUserSelect = int;
enum : int
{
    styleMsUserSelectAuto    = 0x00000000,
    styleMsUserSelectText    = 0x00000001,
    styleMsUserSelectElement = 0x00000002,
    styleMsUserSelectNone    = 0x00000003,
    styleMsUserSelectNotSet  = 0x00000004,
    styleMsUserSelect_Max    = 0x7fffffff,
}

alias styleMsTouchAction = int;
enum : int
{
    styleMsTouchActionNotSet        = 0xffffffff,
    styleMsTouchActionNone          = 0x00000000,
    styleMsTouchActionAuto          = 0x00000001,
    styleMsTouchActionManipulation  = 0x00000002,
    styleMsTouchActionDoubleTapZoom = 0x00000004,
    styleMsTouchActionPanX          = 0x00000008,
    styleMsTouchActionPanY          = 0x00000010,
    styleMsTouchActionPinchZoom     = 0x00000020,
    styleMsTouchActionCrossSlideX   = 0x00000040,
    styleMsTouchActionCrossSlideY   = 0x00000080,
    styleMsTouchAction_Max          = 0x7fffffff,
}

alias styleMsTouchSelect = int;
enum : int
{
    styleMsTouchSelectGrippers = 0x00000000,
    styleMsTouchSelectNone     = 0x00000001,
    styleMsTouchSelectNotSet   = 0x00000002,
    styleMsTouchSelect_Max     = 0x7fffffff,
}

alias styleMsScrollTranslation = int;
enum : int
{
    styleMsScrollTranslationNotSet = 0x00000000,
    styleMsScrollTranslationNone   = 0x00000001,
    styleMsScrollTranslationVtoH   = 0x00000002,
    styleMsScrollTranslation_Max   = 0x7fffffff,
}

alias styleBorderImageRepeat = int;
enum : int
{
    styleBorderImageRepeatStretch = 0x00000000,
    styleBorderImageRepeatRepeat  = 0x00000001,
    styleBorderImageRepeatRound   = 0x00000002,
    styleBorderImageRepeatSpace   = 0x00000003,
    styleBorderImageRepeatNotSet  = 0x00000004,
    styleBorderImageRepeat_Max    = 0x7fffffff,
}

alias styleBorderImageSliceFill = int;
enum : int
{
    styleBorderImageSliceFillNotSet = 0x00000000,
    styleBorderImageSliceFillFill   = 0x00000001,
    styleBorderImageSliceFill_Max   = 0x7fffffff,
}

alias styleMsImeAlign = int;
enum : int
{
    styleMsImeAlignAuto   = 0x00000000,
    styleMsImeAlignAfter  = 0x00000001,
    styleMsImeAlignNotSet = 0x00000002,
    styleMsImeAlign_Max   = 0x7fffffff,
}

alias styleMsTextCombineHorizontal = int;
enum : int
{
    styleMsTextCombineHorizontalNone   = 0x00000000,
    styleMsTextCombineHorizontalAll    = 0x00000001,
    styleMsTextCombineHorizontalDigits = 0x00000002,
    styleMsTextCombineHorizontalNotSet = 0x00000003,
    styleMsTextCombineHorizontal_Max   = 0x7fffffff,
}

alias styleWebkitAppearance = int;
enum : int
{
    styleWebkitAppearanceNone                         = 0x00000000,
    styleWebkitAppearanceCapsLockIndicator            = 0x00000001,
    styleWebkitAppearanceButton                       = 0x00000002,
    styleWebkitAppearanceButtonBevel                  = 0x00000003,
    styleWebkitAppearanceCaret                        = 0x00000004,
    styleWebkitAppearanceCheckbox                     = 0x00000005,
    styleWebkitAppearanceDefaultButton                = 0x00000006,
    styleWebkitAppearanceListbox                      = 0x00000007,
    styleWebkitAppearanceListitem                     = 0x00000008,
    styleWebkitAppearanceMediaFullscreenButton        = 0x00000009,
    styleWebkitAppearanceMediaMuteButton              = 0x0000000a,
    styleWebkitAppearanceMediaPlayButton              = 0x0000000b,
    styleWebkitAppearanceMediaSeekBackButton          = 0x0000000c,
    styleWebkitAppearanceMediaSeekForwardButton       = 0x0000000d,
    styleWebkitAppearanceMediaSlider                  = 0x0000000e,
    styleWebkitAppearanceMediaSliderthumb             = 0x0000000f,
    styleWebkitAppearanceMenulist                     = 0x00000010,
    styleWebkitAppearanceMenulistButton               = 0x00000011,
    styleWebkitAppearanceMenulistText                 = 0x00000012,
    styleWebkitAppearanceMenulistTextfield            = 0x00000013,
    styleWebkitAppearancePushButton                   = 0x00000014,
    styleWebkitAppearanceRadio                        = 0x00000015,
    styleWebkitAppearanceSearchfield                  = 0x00000016,
    styleWebkitAppearanceSearchfieldCancelButton      = 0x00000017,
    styleWebkitAppearanceSearchfieldDecoration        = 0x00000018,
    styleWebkitAppearanceSearchfieldResultsButton     = 0x00000019,
    styleWebkitAppearanceSearchfieldResultsDecoration = 0x0000001a,
    styleWebkitAppearanceSliderHorizontal             = 0x0000001b,
    styleWebkitAppearanceSliderVertical               = 0x0000001c,
    styleWebkitAppearanceSliderthumbHorizontal        = 0x0000001d,
    styleWebkitAppearanceSliderthumbVertical          = 0x0000001e,
    styleWebkitAppearanceSquareButton                 = 0x0000001f,
    styleWebkitAppearanceTextarea                     = 0x00000020,
    styleWebkitAppearanceTextfield                    = 0x00000021,
    styleWebkitAppearanceNotSet                       = 0x00000022,
    styleWebkitAppearance_Max                         = 0x7fffffff,
}

alias styleViewportSize = int;
enum : int
{
    styleViewportSizeAuto         = 0x00000000,
    styleViewportSizeDeviceWidth  = 0x00000001,
    styleViewportSizeDeviceHeight = 0x00000002,
    styleViewportSize_Max         = 0x7fffffff,
}

alias styleUserZoom = int;
enum : int
{
    styleUserZoomNotSet = 0x00000000,
    styleUserZoomZoom   = 0x00000001,
    styleUserZoomFixed  = 0x00000002,
    styleUserZoom_Max   = 0x7fffffff,
}

alias styleTextLineThroughStyle = int;
enum : int
{
    styleTextLineThroughStyleUndefined = 0x00000000,
    styleTextLineThroughStyleSingle    = 0x00000001,
    styleTextLineThroughStyleDouble    = 0x00000002,
    styleTextLineThroughStyle_Max      = 0x7fffffff,
}

alias styleTextUnderlineStyle = int;
enum : int
{
    styleTextUnderlineStyleUndefined        = 0x00000000,
    styleTextUnderlineStyleSingle           = 0x00000001,
    styleTextUnderlineStyleDouble           = 0x00000002,
    styleTextUnderlineStyleWords            = 0x00000003,
    styleTextUnderlineStyleDotted           = 0x00000004,
    styleTextUnderlineStyleThick            = 0x00000005,
    styleTextUnderlineStyleDash             = 0x00000006,
    styleTextUnderlineStyleDotDash          = 0x00000007,
    styleTextUnderlineStyleDotDotDash       = 0x00000008,
    styleTextUnderlineStyleWave             = 0x00000009,
    styleTextUnderlineStyleSingleAccounting = 0x0000000a,
    styleTextUnderlineStyleDoubleAccounting = 0x0000000b,
    styleTextUnderlineStyleThickDash        = 0x0000000c,
    styleTextUnderlineStyle_Max             = 0x7fffffff,
}

alias styleTextEffect = int;
enum : int
{
    styleTextEffectNone    = 0x00000000,
    styleTextEffectEmboss  = 0x00000001,
    styleTextEffectEngrave = 0x00000002,
    styleTextEffectOutline = 0x00000003,
    styleTextEffect_Max    = 0x7fffffff,
}

alias styleDefaultTextSelection = int;
enum : int
{
    styleDefaultTextSelectionFalse = 0x00000000,
    styleDefaultTextSelectionTrue  = 0x00000001,
    styleDefaultTextSelection_Max  = 0x7fffffff,
}

alias styleTextDecoration = int;
enum : int
{
    styleTextDecorationNone        = 0x00000000,
    styleTextDecorationUnderline   = 0x00000001,
    styleTextDecorationOverline    = 0x00000002,
    styleTextDecorationLineThrough = 0x00000003,
    styleTextDecorationBlink       = 0x00000004,
    styleTextDecoration_Max        = 0x7fffffff,
}

alias textDecoration = int;
enum : int
{
    textDecorationNone        = 0x00000000,
    textDecorationUnderline   = 0x00000001,
    textDecorationOverline    = 0x00000002,
    textDecorationLineThrough = 0x00000003,
    textDecorationBlink       = 0x00000004,
    textDecoration_Max        = 0x7fffffff,
}

alias htmlListType = int;
enum : int
{
    htmlListTypeNotSet     = 0x00000000,
    htmlListTypeLargeAlpha = 0x00000001,
    htmlListTypeSmallAlpha = 0x00000002,
    htmlListTypeLargeRoman = 0x00000003,
    htmlListTypeSmallRoman = 0x00000004,
    htmlListTypeNumbers    = 0x00000005,
    htmlListTypeDisc       = 0x00000006,
    htmlListTypeCircle     = 0x00000007,
    htmlListTypeSquare     = 0x00000008,
    htmlListType_Max       = 0x7fffffff,
}

alias htmlMethod = int;
enum : int
{
    htmlMethodNotSet = 0x00000000,
    htmlMethodGet    = 0x00000001,
    htmlMethodPost   = 0x00000002,
    htmlMethod_Max   = 0x7fffffff,
}

alias htmlWrap = int;
enum : int
{
    htmlWrapOff  = 0x00000001,
    htmlWrapSoft = 0x00000002,
    htmlWrapHard = 0x00000003,
    htmlWrap_Max = 0x7fffffff,
}

alias htmlDir = int;
enum : int
{
    htmlDirNotSet      = 0x00000000,
    htmlDirLeftToRight = 0x00000001,
    htmlDirRightToLeft = 0x00000002,
    htmlDir_Max        = 0x7fffffff,
}

alias htmlEditable = int;
enum : int
{
    htmlEditableInherit = 0x00000000,
    htmlEditableTrue    = 0x00000001,
    htmlEditableFalse   = 0x00000002,
    htmlEditable_Max    = 0x7fffffff,
}

alias htmlInput = int;
enum : int
{
    htmlInputNotSet         = 0x00000000,
    htmlInputButton         = 0x00000001,
    htmlInputCheckbox       = 0x00000002,
    htmlInputFile           = 0x00000003,
    htmlInputHidden         = 0x00000004,
    htmlInputImage          = 0x00000005,
    htmlInputPassword       = 0x00000006,
    htmlInputRadio          = 0x00000007,
    htmlInputReset          = 0x00000008,
    htmlInputSelectOne      = 0x00000009,
    htmlInputSelectMultiple = 0x0000000a,
    htmlInputSubmit         = 0x0000000b,
    htmlInputText           = 0x0000000c,
    htmlInputTextarea       = 0x0000000d,
    htmlInputRichtext       = 0x0000000e,
    htmlInputRange          = 0x0000000f,
    htmlInputUrl            = 0x00000010,
    htmlInputEmail          = 0x00000011,
    htmlInputNumber         = 0x00000012,
    htmlInputTel            = 0x00000013,
    htmlInputSearch         = 0x00000014,
    htmlInput_Max           = 0x7fffffff,
}

alias htmlSpellCheck = int;
enum : int
{
    htmlSpellCheckNotSet  = 0x00000000,
    htmlSpellCheckTrue    = 0x00000001,
    htmlSpellCheckFalse   = 0x00000002,
    htmlSpellCheckDefault = 0x00000003,
    htmlSpellCheck_Max    = 0x7fffffff,
}

alias htmlEncoding = int;
enum : int
{
    htmlEncodingURL       = 0x00000000,
    htmlEncodingMultipart = 0x00000001,
    htmlEncodingText      = 0x00000002,
    htmlEncoding_Max      = 0x7fffffff,
}

alias htmlAdjacency = int;
enum : int
{
    htmlAdjacencyBeforeBegin = 0x00000001,
    htmlAdjacencyAfterBegin  = 0x00000002,
    htmlAdjacencyBeforeEnd   = 0x00000003,
    htmlAdjacencyAfterEnd    = 0x00000004,
    htmlAdjacency_Max        = 0x7fffffff,
}

alias htmlTabIndex = int;
enum : int
{
    htmlTabIndexNotSet = 0xffff8000,
    htmlTabIndex_Max   = 0x7fffffff,
}

alias htmlComponent = int;
enum : int
{
    htmlComponentClient        = 0x00000000,
    htmlComponentSbLeft        = 0x00000001,
    htmlComponentSbPageLeft    = 0x00000002,
    htmlComponentSbHThumb      = 0x00000003,
    htmlComponentSbPageRight   = 0x00000004,
    htmlComponentSbRight       = 0x00000005,
    htmlComponentSbUp          = 0x00000006,
    htmlComponentSbPageUp      = 0x00000007,
    htmlComponentSbVThumb      = 0x00000008,
    htmlComponentSbPageDown    = 0x00000009,
    htmlComponentSbDown        = 0x0000000a,
    htmlComponentSbLeft2       = 0x0000000b,
    htmlComponentSbPageLeft2   = 0x0000000c,
    htmlComponentSbRight2      = 0x0000000d,
    htmlComponentSbPageRight2  = 0x0000000e,
    htmlComponentSbUp2         = 0x0000000f,
    htmlComponentSbPageUp2     = 0x00000010,
    htmlComponentSbDown2       = 0x00000011,
    htmlComponentSbPageDown2   = 0x00000012,
    htmlComponentSbTop         = 0x00000013,
    htmlComponentSbBottom      = 0x00000014,
    htmlComponentOutside       = 0x00000015,
    htmlComponentGHTopLeft     = 0x00000016,
    htmlComponentGHLeft        = 0x00000017,
    htmlComponentGHTop         = 0x00000018,
    htmlComponentGHBottomLeft  = 0x00000019,
    htmlComponentGHTopRight    = 0x0000001a,
    htmlComponentGHBottom      = 0x0000001b,
    htmlComponentGHRight       = 0x0000001c,
    htmlComponentGHBottomRight = 0x0000001d,
    htmlComponent_Max          = 0x7fffffff,
}

alias htmlApplyLocation = int;
enum : int
{
    htmlApplyLocationInside  = 0x00000000,
    htmlApplyLocationOutside = 0x00000001,
    htmlApplyLocation_Max    = 0x7fffffff,
}

alias htmlGlyphMode = int;
enum : int
{
    htmlGlyphModeNone  = 0x00000000,
    htmlGlyphModeBegin = 0x00000001,
    htmlGlyphModeEnd   = 0x00000002,
    htmlGlyphModeBoth  = 0x00000003,
    htmlGlyphMode_Max  = 0x7fffffff,
}

alias htmlDraggable = int;
enum : int
{
    htmlDraggableAuto  = 0x00000000,
    htmlDraggableTrue  = 0x00000001,
    htmlDraggableFalse = 0x00000002,
    htmlDraggable_Max  = 0x7fffffff,
}

alias htmlUnit = int;
enum : int
{
    htmlUnitCharacter = 0x00000001,
    htmlUnitWord      = 0x00000002,
    htmlUnitSentence  = 0x00000003,
    htmlUnitTextEdit  = 0x00000006,
    htmlUnit_Max      = 0x7fffffff,
}

alias htmlEndPoints = int;
enum : int
{
    htmlEndPointsStartToStart = 0x00000001,
    htmlEndPointsStartToEnd   = 0x00000002,
    htmlEndPointsEndToStart   = 0x00000003,
    htmlEndPointsEndToEnd     = 0x00000004,
    htmlEndPoints_Max         = 0x7fffffff,
}

alias htmlDirection = int;
enum : int
{
    htmlDirectionForward  = 0x0001869f,
    htmlDirectionBackward = 0xfffe7961,
    htmlDirection_Max     = 0x7fffffff,
}

alias htmlStart = int;
enum : int
{
    htmlStartfileopen  = 0x00000000,
    htmlStartmouseover = 0x00000001,
    htmlStart_Max      = 0x7fffffff,
}

alias bodyScroll = int;
enum : int
{
    bodyScrollyes     = 0x00000001,
    bodyScrollno      = 0x00000002,
    bodyScrollauto    = 0x00000004,
    bodyScrolldefault = 0x00000003,
    bodyScroll_Max    = 0x7fffffff,
}

alias htmlSelectType = int;
enum : int
{
    htmlSelectTypeSelectOne      = 0x00000001,
    htmlSelectTypeSelectMultiple = 0x00000002,
    htmlSelectType_Max           = 0x7fffffff,
}

alias htmlSelectExFlag = int;
enum : int
{
    htmlSelectExFlagNone                  = 0x00000000,
    htmlSelectExFlagHideSelectionInDesign = 0x00000001,
    htmlSelectExFlag_Max                  = 0x7fffffff,
}

alias htmlSelection = int;
enum : int
{
    htmlSelectionNone    = 0x00000000,
    htmlSelectionText    = 0x00000001,
    htmlSelectionControl = 0x00000002,
    htmlSelectionTable   = 0x00000003,
    htmlSelection_Max    = 0x7fffffff,
}

alias htmlMarqueeBehavior = int;
enum : int
{
    htmlMarqueeBehaviorscroll    = 0x00000001,
    htmlMarqueeBehaviorslide     = 0x00000002,
    htmlMarqueeBehavioralternate = 0x00000003,
    htmlMarqueeBehavior_Max      = 0x7fffffff,
}

alias htmlMarqueeDirection = int;
enum : int
{
    htmlMarqueeDirectionleft  = 0x00000001,
    htmlMarqueeDirectionright = 0x00000003,
    htmlMarqueeDirectionup    = 0x00000005,
    htmlMarqueeDirectiondown  = 0x00000007,
    htmlMarqueeDirection_Max  = 0x7fffffff,
}

alias htmlPersistState = int;
enum : int
{
    htmlPersistStateNormal   = 0x00000000,
    htmlPersistStateFavorite = 0x00000001,
    htmlPersistStateHistory  = 0x00000002,
    htmlPersistStateSnapshot = 0x00000003,
    htmlPersistStateUserData = 0x00000004,
    htmlPersistState_Max     = 0x7fffffff,
}

alias htmlDropEffect = int;
enum : int
{
    htmlDropEffectCopy = 0x00000000,
    htmlDropEffectLink = 0x00000001,
    htmlDropEffectMove = 0x00000002,
    htmlDropEffectNone = 0x00000003,
    htmlDropEffect_Max = 0x7fffffff,
}

alias htmlEffectAllowed = int;
enum : int
{
    htmlEffectAllowedCopy          = 0x00000000,
    htmlEffectAllowedLink          = 0x00000001,
    htmlEffectAllowedMove          = 0x00000002,
    htmlEffectAllowedCopyLink      = 0x00000003,
    htmlEffectAllowedCopyMove      = 0x00000004,
    htmlEffectAllowedLinkMove      = 0x00000005,
    htmlEffectAllowedAll           = 0x00000006,
    htmlEffectAllowedNone          = 0x00000007,
    htmlEffectAllowedUninitialized = 0x00000008,
    htmlEffectAllowed_Max          = 0x7fffffff,
}

alias htmlCompatMode = int;
enum : int
{
    htmlCompatModeBackCompat = 0x00000000,
    htmlCompatModeCSS1Compat = 0x00000001,
    htmlCompatMode_Max       = 0x7fffffff,
}

alias BoolValue = int;
enum : int
{
    True          = 0x00000001,
    False         = 0x00000000,
    BoolValue_Max = 0x7fffffff,
}

alias htmlCaptionAlign = int;
enum : int
{
    htmlCaptionAlignNotSet  = 0x00000000,
    htmlCaptionAlignLeft    = 0x00000001,
    htmlCaptionAlignCenter  = 0x00000002,
    htmlCaptionAlignRight   = 0x00000003,
    htmlCaptionAlignJustify = 0x00000004,
    htmlCaptionAlignTop     = 0x00000005,
    htmlCaptionAlignBottom  = 0x00000006,
    htmlCaptionAlign_Max    = 0x7fffffff,
}

alias htmlCaptionVAlign = int;
enum : int
{
    htmlCaptionVAlignNotSet = 0x00000000,
    htmlCaptionVAlignTop    = 0x00000001,
    htmlCaptionVAlignBottom = 0x00000002,
    htmlCaptionVAlign_Max   = 0x7fffffff,
}

alias htmlFrame = int;
enum : int
{
    htmlFrameNotSet = 0x00000000,
    htmlFramevoid   = 0x00000001,
    htmlFrameabove  = 0x00000002,
    htmlFramebelow  = 0x00000003,
    htmlFramehsides = 0x00000004,
    htmlFramelhs    = 0x00000005,
    htmlFramerhs    = 0x00000006,
    htmlFramevsides = 0x00000007,
    htmlFramebox    = 0x00000008,
    htmlFrameborder = 0x00000009,
    htmlFrame_Max   = 0x7fffffff,
}

alias htmlRules = int;
enum : int
{
    htmlRulesNotSet = 0x00000000,
    htmlRulesnone   = 0x00000001,
    htmlRulesgroups = 0x00000002,
    htmlRulesrows   = 0x00000003,
    htmlRulescols   = 0x00000004,
    htmlRulesall    = 0x00000005,
    htmlRules_Max   = 0x7fffffff,
}

alias htmlCellAlign = int;
enum : int
{
    htmlCellAlignNotSet = 0x00000000,
    htmlCellAlignLeft   = 0x00000001,
    htmlCellAlignCenter = 0x00000002,
    htmlCellAlignRight  = 0x00000003,
    htmlCellAlignMiddle = 0x00000002,
    htmlCellAlign_Max   = 0x7fffffff,
}

alias htmlCellVAlign = int;
enum : int
{
    htmlCellVAlignNotSet   = 0x00000000,
    htmlCellVAlignTop      = 0x00000001,
    htmlCellVAlignMiddle   = 0x00000002,
    htmlCellVAlignBottom   = 0x00000003,
    htmlCellVAlignBaseline = 0x00000004,
    htmlCellVAlignCenter   = 0x00000002,
    htmlCellVAlign_Max     = 0x7fffffff,
}

alias frameScrolling = int;
enum : int
{
    frameScrollingyes  = 0x00000001,
    frameScrollingno   = 0x00000002,
    frameScrollingauto = 0x00000004,
    frameScrolling_Max = 0x7fffffff,
}

alias sandboxAllow = int;
enum : int
{
    sandboxAllowScripts       = 0x00000000,
    sandboxAllowSameOrigin    = 0x00000001,
    sandboxAllowTopNavigation = 0x00000002,
    sandboxAllowForms         = 0x00000003,
    sandboxAllowPopups        = 0x00000004,
    sandboxAllow_Max          = 0x7fffffff,
}

alias svgAngleType = int;
enum : int
{
    SVG_ANGLETYPE_UNKNOWN     = 0x00000000,
    SVG_ANGLETYPE_UNSPECIFIED = 0x00000001,
    SVG_ANGLETYPE_DEG         = 0x00000002,
    SVG_ANGLETYPE_RAD         = 0x00000003,
    SVG_ANGLETYPE_GRAD        = 0x00000004,
    svgAngleType_Max          = 0x7fffffff,
}

alias svgExternalResourcesRequired = int;
enum : int
{
    svgExternalResourcesRequiredFalse = 0x00000000,
    svgExternalResourcesRequiredTrue  = 0x00000001,
    svgExternalResourcesRequired_Max  = 0x7fffffff,
}

alias svgFocusable = int;
enum : int
{
    svgFocusableNotSet = 0x00000000,
    svgFocusableAuto   = 0x00000001,
    svgFocusableTrue   = 0x00000002,
    svgFocusableFalse  = 0x00000003,
    svgFocusable_Max   = 0x7fffffff,
}

alias svgLengthType = int;
enum : int
{
    SVG_LENGTHTYPE_UNKNOWN    = 0x00000000,
    SVG_LENGTHTYPE_NUMBER     = 0x00000001,
    SVG_LENGTHTYPE_PERCENTAGE = 0x00000002,
    SVG_LENGTHTYPE_EMS        = 0x00000003,
    SVG_LENGTHTYPE_EXS        = 0x00000004,
    SVG_LENGTHTYPE_PX         = 0x00000005,
    SVG_LENGTHTYPE_CM         = 0x00000006,
    SVG_LENGTHTYPE_MM         = 0x00000007,
    SVG_LENGTHTYPE_IN         = 0x00000008,
    SVG_LENGTHTYPE_PT         = 0x00000009,
    SVG_LENGTHTYPE_PC         = 0x0000000a,
    svgLengthType_Max         = 0x7fffffff,
}

alias svgPathSegType = int;
enum : int
{
    PATHSEG_UNKNOWN                      = 0x00000000,
    PATHSEG_CLOSEPATH                    = 0x00000001,
    PATHSEG_MOVETO_ABS                   = 0x00000002,
    PATHSEG_MOVETO_REL                   = 0x00000003,
    PATHSEG_LINETO_ABS                   = 0x00000004,
    PATHSEG_LINETO_REL                   = 0x00000005,
    PATHSEG_CURVETO_CUBIC_ABS            = 0x00000006,
    PATHSEG_CURVETO_CUBIC_REL            = 0x00000007,
    PATHSEG_CURVETO_QUADRATIC_ABS        = 0x00000008,
    PATHSEG_CURVETO_QUADRATIC_REL        = 0x00000009,
    PATHSEG_ARC_ABS                      = 0x0000000a,
    PATHSEG_ARC_REL                      = 0x0000000b,
    PATHSEG_LINETO_HORIZONTAL_ABS        = 0x0000000c,
    PATHSEG_LINETO_HORIZONTAL_REL        = 0x0000000d,
    PATHSEG_LINETO_VERTICAL_ABS          = 0x0000000e,
    PATHSEG_LINETO_VERTICAL_REL          = 0x0000000f,
    PATHSEG_CURVETO_CUBIC_SMOOTH_ABS     = 0x00000010,
    PATHSEG_CURVETO_CUBIC_SMOOTH_REL     = 0x00000011,
    PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 0x00000012,
    PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 0x00000013,
    svgPathSegType_Max                   = 0x7fffffff,
}

alias svgTransformType = int;
enum : int
{
    SVG_TRANSFORM_UNKNOWN   = 0x00000000,
    SVG_TRANSFORM_MATRIX    = 0x00000001,
    SVG_TRANSFORM_TRANSLATE = 0x00000002,
    SVG_TRANSFORM_SCALE     = 0x00000003,
    SVG_TRANSFORM_ROTATE    = 0x00000004,
    SVG_TRANSFORM_SKEWX     = 0x00000005,
    SVG_TRANSFORM_SKEWY     = 0x00000006,
    svgTransformType_Max    = 0x7fffffff,
}

alias svgPreserveAspectRatioAlignType = int;
enum : int
{
    SVG_PRESERVEASPECTRATIO_UNKNOWN     = 0x00000000,
    SVG_PRESERVEASPECTRATIO_NONE        = 0x00000001,
    SVG_PRESERVEASPECTRATIO_XMINYMIN    = 0x00000002,
    SVG_PRESERVEASPECTRATIO_XMIDYMIN    = 0x00000003,
    SVG_PRESERVEASPECTRATIO_XMAXYMIN    = 0x00000004,
    SVG_PRESERVEASPECTRATIO_XMINYMID    = 0x00000005,
    SVG_PRESERVEASPECTRATIO_XMIDYMID    = 0x00000006,
    SVG_PRESERVEASPECTRATIO_XMAXYMID    = 0x00000007,
    SVG_PRESERVEASPECTRATIO_XMINYMAX    = 0x00000008,
    SVG_PRESERVEASPECTRATIO_XMIDYMAX    = 0x00000009,
    SVG_PRESERVEASPECTRATIO_XMAXYMAX    = 0x0000000a,
    svgPreserveAspectRatioAlignType_Max = 0x7fffffff,
}

alias svgPreserveAspectMeetOrSliceType = int;
enum : int
{
    SVG_MEETORSLICE_UNKNOWN              = 0x00000000,
    SVG_MEETORSLICE_MEET                 = 0x00000001,
    SVG_MEETORSLICE_SLICE                = 0x00000002,
    svgPreserveAspectMeetOrSliceType_Max = 0x7fffffff,
}

alias svgUnitTypes = int;
enum : int
{
    SVG_UNITTYPE_UNKNOWN           = 0x00000000,
    SVG_UNITTYPE_USERSPACEONUSE    = 0x00000001,
    SVG_UNITTYPE_OBJECTBOUNDINGBOX = 0x00000002,
    svgUnitTypes_Max               = 0x7fffffff,
}

alias svgSpreadMethod = int;
enum : int
{
    SVG_SPREADMETHOD_UNKNOWN = 0x00000000,
    SVG_SPREADMETHOD_PAD     = 0x00000001,
    SVG_SPREADMETHOD_REFLECT = 0x00000002,
    SVG_SPREADMETHOD_REPEAT  = 0x00000003,
    svgSpreadMethod_Max      = 0x7fffffff,
}

alias svgFeblendMode = int;
enum : int
{
    SVG_FEBLEND_MODE_UNKNOWN  = 0x00000000,
    SVG_FEBLEND_MODE_NORMAL   = 0x00000001,
    SVG_FEBLEND_MODE_MULTIPLY = 0x00000002,
    SVG_FEBLEND_MODE_SCREEN   = 0x00000003,
    SVG_FEBLEND_MODE_DARKEN   = 0x00000004,
    SVG_FEBLEND_MODE_LIGHTEN  = 0x00000005,
    svgFeblendMode_Max        = 0x7fffffff,
}

alias svgFecolormatrixType = int;
enum : int
{
    SVG_FECOLORMATRIX_TYPE_UNKNOWN          = 0x00000000,
    SVG_FECOLORMATRIX_TYPE_MATRIX           = 0x00000001,
    SVG_FECOLORMATRIX_TYPE_SATURATE         = 0x00000002,
    SVG_FECOLORMATRIX_TYPE_HUEROTATE        = 0x00000003,
    SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA = 0x00000004,
    svgFecolormatrixType_Max                = 0x7fffffff,
}

alias svgFecomponenttransferType = int;
enum : int
{
    SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN  = 0x00000000,
    SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY = 0x00000001,
    SVG_FECOMPONENTTRANSFER_TYPE_TABLE    = 0x00000002,
    SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE = 0x00000003,
    SVG_FECOMPONENTTRANSFER_TYPE_LINEAR   = 0x00000004,
    SVG_FECOMPONENTTRANSFER_TYPE_GAMMA    = 0x00000005,
    svgFecomponenttransferType_Max        = 0x7fffffff,
}

alias svgFecompositeOperator = int;
enum : int
{
    SVG_FECOMPOSITE_OPERATOR_UNKNOWN    = 0x00000000,
    SVG_FECOMPOSITE_OPERATOR_OVER       = 0x00000001,
    SVG_FECOMPOSITE_OPERATOR_IN         = 0x00000002,
    SVG_FECOMPOSITE_OPERATOR_OUT        = 0x00000003,
    SVG_FECOMPOSITE_OPERATOR_ATOP       = 0x00000004,
    SVG_FECOMPOSITE_OPERATOR_XOR        = 0x00000005,
    SVG_FECOMPOSITE_OPERATOR_ARITHMETIC = 0x00000006,
    svgFecompositeOperator_Max          = 0x7fffffff,
}

alias svgEdgemode = int;
enum : int
{
    SVG_EDGEMODE_UNKNOWN   = 0x00000000,
    SVG_EDGEMODE_DUPLICATE = 0x00000001,
    SVG_EDGEMODE_WRAP      = 0x00000002,
    SVG_EDGEMODE_NONE      = 0x00000003,
    svgEdgemode_Max        = 0x7fffffff,
}

alias svgPreserveAlpha = int;
enum : int
{
    SVG_PRESERVEALPHA_FALSE = 0x00000000,
    SVG_PRESERVEALPHA_TRUE  = 0x00000001,
    svgPreserveAlpha_Max    = 0x7fffffff,
}

alias svgChannel = int;
enum : int
{
    SVG_CHANNEL_UNKNOWN = 0x00000000,
    SVG_CHANNEL_R       = 0x00000001,
    SVG_CHANNEL_G       = 0x00000002,
    SVG_CHANNEL_B       = 0x00000003,
    SVG_CHANNEL_A       = 0x00000004,
    svgChannel_Max      = 0x7fffffff,
}

alias svgMorphologyOperator = int;
enum : int
{
    SVG_MORPHOLOGY_OPERATOR_UNKNOWN = 0x00000000,
    SVG_MORPHOLOGY_OPERATOR_ERODE   = 0x00000001,
    SVG_MORPHOLOGY_OPERATOR_DILATE  = 0x00000002,
    svgMorphologyOperator_Max       = 0x7fffffff,
}

alias svgTurbulenceType = int;
enum : int
{
    SVG_TURBULENCE_TYPE_UNKNOWN     = 0x00000000,
    SVG_TURBULENCE_TYPE_FACTALNOISE = 0x00000001,
    SVG_TURBULENCE_TYPE_TURBULENCE  = 0x00000002,
    svgTurbulenceType_Max           = 0x7fffffff,
}

alias svgStitchtype = int;
enum : int
{
    SVG_STITCHTYPE_UNKNOWN  = 0x00000000,
    SVG_STITCHTYPE_STITCH   = 0x00000001,
    SVG_STITCHTYPE_NOSTITCH = 0x00000002,
    svgStitchtype_Max       = 0x7fffffff,
}

alias svgMarkerUnits = int;
enum : int
{
    SVG_MARKERUNITS_UNKNOWN        = 0x00000000,
    SVG_MARKERUNITS_USERSPACEONUSE = 0x00000001,
    SVG_MARKERUNITS_STROKEWIDTH    = 0x00000002,
    svgMarkerUnits_Max             = 0x7fffffff,
}

alias svgMarkerOrient = int;
enum : int
{
    SVG_MARKER_ORIENT_UNKNOWN = 0x00000000,
    SVG_MARKER_ORIENT_AUTO    = 0x00000001,
    SVG_MARKER_ORIENT_ANGLE   = 0x00000002,
    svgMarkerOrient_Max       = 0x7fffffff,
}

alias svgMarkerOrientAttribute = int;
enum : int
{
    svgMarkerOrientAttributeAuto = 0x00000000,
    svgMarkerOrientAttribute_Max = 0x7fffffff,
}

alias htmlMediaNetworkState = int;
enum : int
{
    htmlMediaNetworkStateEmpty    = 0x00000000,
    htmlMediaNetworkStateIdle     = 0x00000001,
    htmlMediaNetworkStateLoading  = 0x00000002,
    htmlMediaNetworkStateNoSource = 0x00000003,
    htmlMediaNetworkState_Max     = 0x7fffffff,
}

alias htmlMediaReadyState = int;
enum : int
{
    htmlMediaReadyStateHaveNothing     = 0x00000000,
    htmlMediaReadyStateHaveMetadata    = 0x00000001,
    htmlMediaReadyStateHaveCurrentData = 0x00000002,
    htmlMediaReadyStateHaveFutureData  = 0x00000003,
    htmlMediaReadyStateHaveEnoughData  = 0x00000004,
    htmlMediaReadyState_Max            = 0x7fffffff,
}

alias htmlMediaErr = int;
enum : int
{
    htmlMediaErrAborted         = 0x00000000,
    htmlMediaErrNetwork         = 0x00000001,
    htmlMediaErrDecode          = 0x00000002,
    htmlMediaErrSrcNotSupported = 0x00000003,
    htmlMediaErr_Max            = 0x7fffffff,
}

alias lengthAdjust = int;
enum : int
{
    LENGTHADJUST_UNKNOWN          = 0x00000000,
    LENGTHADJUST_SPACING          = 0x00000001,
    LENGTHADJUST_SPACINGANDGLYPHS = 0x00000002,
    lengthAdjust_Max              = 0x7fffffff,
}

alias textpathMethodtype = int;
enum : int
{
    TEXTPATH_METHODTYPE_UNKNOWN = 0x00000000,
    TEXTPATH_METHODTYPE_ALIGN   = 0x00000001,
    TEXTPATH_METHODTYPE_STRETCH = 0x00000002,
    textpathMethodtype_Max      = 0x7fffffff,
}

alias textpathSpacingtype = int;
enum : int
{
    TEXTPATH_SPACINGTYPE_UNKNOWN = 0x00000000,
    TEXTPATH_SPACINGTYPE_AUTO    = 0x00000001,
    TEXTPATH_SPACINGTYPE_EXACT   = 0x00000002,
    textpathSpacingtype_Max      = 0x7fffffff,
}

alias ELEMENT_CORNER = int;
enum : int
{
    ELEMENT_CORNER_NONE        = 0x00000000,
    ELEMENT_CORNER_TOP         = 0x00000001,
    ELEMENT_CORNER_LEFT        = 0x00000002,
    ELEMENT_CORNER_BOTTOM      = 0x00000003,
    ELEMENT_CORNER_RIGHT       = 0x00000004,
    ELEMENT_CORNER_TOPLEFT     = 0x00000005,
    ELEMENT_CORNER_TOPRIGHT    = 0x00000006,
    ELEMENT_CORNER_BOTTOMLEFT  = 0x00000007,
    ELEMENT_CORNER_BOTTOMRIGHT = 0x00000008,
    ELEMENT_CORNER_Max         = 0x7fffffff,
}

alias SECUREURLHOSTVALIDATE_FLAGS = int;
enum : int
{
    SUHV_PROMPTBEFORENO             = 0x00000001,
    SUHV_SILENTYES                  = 0x00000002,
    SUHV_UNSECURESOURCE             = 0x00000004,
    SECUREURLHOSTVALIDATE_FLAGS_Max = 0x7fffffff,
}

alias POINTER_GRAVITY = int;
enum : int
{
    POINTER_GRAVITY_Left  = 0x00000000,
    POINTER_GRAVITY_Right = 0x00000001,
    POINTER_GRAVITY_Max   = 0x7fffffff,
}

alias ELEMENT_ADJACENCY = int;
enum : int
{
    ELEM_ADJ_BeforeBegin  = 0x00000000,
    ELEM_ADJ_AfterBegin   = 0x00000001,
    ELEM_ADJ_BeforeEnd    = 0x00000002,
    ELEM_ADJ_AfterEnd     = 0x00000003,
    ELEMENT_ADJACENCY_Max = 0x7fffffff,
}

alias MARKUP_CONTEXT_TYPE = int;
enum : int
{
    CONTEXT_TYPE_None       = 0x00000000,
    CONTEXT_TYPE_Text       = 0x00000001,
    CONTEXT_TYPE_EnterScope = 0x00000002,
    CONTEXT_TYPE_ExitScope  = 0x00000003,
    CONTEXT_TYPE_NoScope    = 0x00000004,
    MARKUP_CONTEXT_TYPE_Max = 0x7fffffff,
}

alias FINDTEXT_FLAGS = int;
enum : int
{
    FINDTEXT_BACKWARDS               = 0x00000001,
    FINDTEXT_WHOLEWORD               = 0x00000002,
    FINDTEXT_MATCHCASE               = 0x00000004,
    FINDTEXT_RAW                     = 0x00020000,
    FINDTEXT_MATCHREPEATEDWHITESPACE = 0x00040000,
    FINDTEXT_MATCHDIAC               = 0x20000000,
    FINDTEXT_MATCHKASHIDA            = 0x40000000,
    FINDTEXT_MATCHALEFHAMZA          = 0x80000000,
    FINDTEXT_FLAGS_Max               = 0x7fffffff,
}

alias MOVEUNIT_ACTION = int;
enum : int
{
    MOVEUNIT_PREVCHAR         = 0x00000000,
    MOVEUNIT_NEXTCHAR         = 0x00000001,
    MOVEUNIT_PREVCLUSTERBEGIN = 0x00000002,
    MOVEUNIT_NEXTCLUSTERBEGIN = 0x00000003,
    MOVEUNIT_PREVCLUSTEREND   = 0x00000004,
    MOVEUNIT_NEXTCLUSTEREND   = 0x00000005,
    MOVEUNIT_PREVWORDBEGIN    = 0x00000006,
    MOVEUNIT_NEXTWORDBEGIN    = 0x00000007,
    MOVEUNIT_PREVWORDEND      = 0x00000008,
    MOVEUNIT_NEXTWORDEND      = 0x00000009,
    MOVEUNIT_PREVPROOFWORD    = 0x0000000a,
    MOVEUNIT_NEXTPROOFWORD    = 0x0000000b,
    MOVEUNIT_NEXTURLBEGIN     = 0x0000000c,
    MOVEUNIT_PREVURLBEGIN     = 0x0000000d,
    MOVEUNIT_NEXTURLEND       = 0x0000000e,
    MOVEUNIT_PREVURLEND       = 0x0000000f,
    MOVEUNIT_PREVSENTENCE     = 0x00000010,
    MOVEUNIT_NEXTSENTENCE     = 0x00000011,
    MOVEUNIT_PREVBLOCK        = 0x00000012,
    MOVEUNIT_NEXTBLOCK        = 0x00000013,
    MOVEUNIT_ACTION_Max       = 0x7fffffff,
}

alias PARSE_FLAGS = int;
enum : int
{
    PARSE_ABSOLUTIFYIE40URLS = 0x00000001,
    PARSE_DISABLEVML         = 0x00000002,
    PARSE_FLAGS_Max          = 0x7fffffff,
}

alias ELEMENT_TAG_ID = int;
enum : int
{
    TAGID_NULL                    = 0x00000000,
    TAGID_UNKNOWN                 = 0x00000001,
    TAGID_A                       = 0x00000002,
    TAGID_ACRONYM                 = 0x00000003,
    TAGID_ADDRESS                 = 0x00000004,
    TAGID_APPLET                  = 0x00000005,
    TAGID_AREA                    = 0x00000006,
    TAGID_B                       = 0x00000007,
    TAGID_BASE                    = 0x00000008,
    TAGID_BASEFONT                = 0x00000009,
    TAGID_BDO                     = 0x0000000a,
    TAGID_BGSOUND                 = 0x0000000b,
    TAGID_BIG                     = 0x0000000c,
    TAGID_BLINK                   = 0x0000000d,
    TAGID_BLOCKQUOTE              = 0x0000000e,
    TAGID_BODY                    = 0x0000000f,
    TAGID_BR                      = 0x00000010,
    TAGID_BUTTON                  = 0x00000011,
    TAGID_CAPTION                 = 0x00000012,
    TAGID_CENTER                  = 0x00000013,
    TAGID_CITE                    = 0x00000014,
    TAGID_CODE                    = 0x00000015,
    TAGID_COL                     = 0x00000016,
    TAGID_COLGROUP                = 0x00000017,
    TAGID_COMMENT                 = 0x00000018,
    TAGID_COMMENT_RAW             = 0x00000019,
    TAGID_DD                      = 0x0000001a,
    TAGID_DEL                     = 0x0000001b,
    TAGID_DFN                     = 0x0000001c,
    TAGID_DIR                     = 0x0000001d,
    TAGID_DIV                     = 0x0000001e,
    TAGID_DL                      = 0x0000001f,
    TAGID_DT                      = 0x00000020,
    TAGID_EM                      = 0x00000021,
    TAGID_EMBED                   = 0x00000022,
    TAGID_FIELDSET                = 0x00000023,
    TAGID_FONT                    = 0x00000024,
    TAGID_FORM                    = 0x00000025,
    TAGID_FRAME                   = 0x00000026,
    TAGID_FRAMESET                = 0x00000027,
    TAGID_GENERIC                 = 0x00000028,
    TAGID_H1                      = 0x00000029,
    TAGID_H2                      = 0x0000002a,
    TAGID_H3                      = 0x0000002b,
    TAGID_H4                      = 0x0000002c,
    TAGID_H5                      = 0x0000002d,
    TAGID_H6                      = 0x0000002e,
    TAGID_HEAD                    = 0x0000002f,
    TAGID_HR                      = 0x00000030,
    TAGID_HTML                    = 0x00000031,
    TAGID_I                       = 0x00000032,
    TAGID_IFRAME                  = 0x00000033,
    TAGID_IMG                     = 0x00000034,
    TAGID_INPUT                   = 0x00000035,
    TAGID_INS                     = 0x00000036,
    TAGID_KBD                     = 0x00000037,
    TAGID_LABEL                   = 0x00000038,
    TAGID_LEGEND                  = 0x00000039,
    TAGID_LI                      = 0x0000003a,
    TAGID_LINK                    = 0x0000003b,
    TAGID_LISTING                 = 0x0000003c,
    TAGID_MAP                     = 0x0000003d,
    TAGID_MARQUEE                 = 0x0000003e,
    TAGID_MENU                    = 0x0000003f,
    TAGID_META                    = 0x00000040,
    TAGID_NEXTID                  = 0x00000041,
    TAGID_NOBR                    = 0x00000042,
    TAGID_NOEMBED                 = 0x00000043,
    TAGID_NOFRAMES                = 0x00000044,
    TAGID_NOSCRIPT                = 0x00000045,
    TAGID_OBJECT                  = 0x00000046,
    TAGID_OL                      = 0x00000047,
    TAGID_OPTION                  = 0x00000048,
    TAGID_P                       = 0x00000049,
    TAGID_PARAM                   = 0x0000004a,
    TAGID_PLAINTEXT               = 0x0000004b,
    TAGID_PRE                     = 0x0000004c,
    TAGID_Q                       = 0x0000004d,
    TAGID_RP                      = 0x0000004e,
    TAGID_RT                      = 0x0000004f,
    TAGID_RUBY                    = 0x00000050,
    TAGID_S                       = 0x00000051,
    TAGID_SAMP                    = 0x00000052,
    TAGID_SCRIPT                  = 0x00000053,
    TAGID_SELECT                  = 0x00000054,
    TAGID_SMALL                   = 0x00000055,
    TAGID_SPAN                    = 0x00000056,
    TAGID_STRIKE                  = 0x00000057,
    TAGID_STRONG                  = 0x00000058,
    TAGID_STYLE                   = 0x00000059,
    TAGID_SUB                     = 0x0000005a,
    TAGID_SUP                     = 0x0000005b,
    TAGID_TABLE                   = 0x0000005c,
    TAGID_TBODY                   = 0x0000005d,
    TAGID_TC                      = 0x0000005e,
    TAGID_TD                      = 0x0000005f,
    TAGID_TEXTAREA                = 0x00000060,
    TAGID_TFOOT                   = 0x00000061,
    TAGID_TH                      = 0x00000062,
    TAGID_THEAD                   = 0x00000063,
    TAGID_TITLE                   = 0x00000064,
    TAGID_TR                      = 0x00000065,
    TAGID_TT                      = 0x00000066,
    TAGID_U                       = 0x00000067,
    TAGID_UL                      = 0x00000068,
    TAGID_VAR                     = 0x00000069,
    TAGID_WBR                     = 0x0000006a,
    TAGID_XMP                     = 0x0000006b,
    TAGID_ROOT                    = 0x0000006c,
    TAGID_OPTGROUP                = 0x0000006d,
    TAGID_ABBR                    = 0x0000006e,
    TAGID_SVG_A                   = 0x0000006f,
    TAGID_SVG_ALTGLYPH            = 0x00000070,
    TAGID_SVG_ALTGLYPHDEF         = 0x00000071,
    TAGID_SVG_ALTGLYPHITEM        = 0x00000072,
    TAGID_SVG_ANIMATE             = 0x00000073,
    TAGID_SVG_ANIMATECOLOR        = 0x00000074,
    TAGID_SVG_ANIMATEMOTION       = 0x00000075,
    TAGID_SVG_ANIMATETRANSFORM    = 0x00000076,
    TAGID_SVG_CIRCLE              = 0x00000077,
    TAGID_SVG_CLIPPATH            = 0x00000078,
    TAGID_SVG_COLOR_PROFILE       = 0x00000079,
    TAGID_SVG_CURSOR              = 0x0000007a,
    TAGID_SVG_DEFINITION_SRC      = 0x0000007b,
    TAGID_SVG_DEFS                = 0x0000007c,
    TAGID_SVG_DESC                = 0x0000007d,
    TAGID_SVG_ELLIPSE             = 0x0000007e,
    TAGID_SVG_FEBLEND             = 0x0000007f,
    TAGID_SVG_FECOLORMATRIX       = 0x00000080,
    TAGID_SVG_FECOMPONENTTRANSFER = 0x00000081,
    TAGID_SVG_FECOMPOSITE         = 0x00000082,
    TAGID_SVG_FECONVOLVEMATRIX    = 0x00000083,
    TAGID_SVG_FEDIFFUSELIGHTING   = 0x00000084,
    TAGID_SVG_FEDISPLACEMENTMAP   = 0x00000085,
    TAGID_SVG_FEDISTANTLIGHT      = 0x00000086,
    TAGID_SVG_FEFLOOD             = 0x00000087,
    TAGID_SVG_FEFUNCA             = 0x00000088,
    TAGID_SVG_FEFUNCB             = 0x00000089,
    TAGID_SVG_FEFUNCG             = 0x0000008a,
    TAGID_SVG_FEFUNCR             = 0x0000008b,
    TAGID_SVG_FEGAUSSIANBLUR      = 0x0000008c,
    TAGID_SVG_FEIMAGE             = 0x0000008d,
    TAGID_SVG_FEMERGE             = 0x0000008e,
    TAGID_SVG_FEMERGENODE         = 0x0000008f,
    TAGID_SVG_FEMORPHOLOGY        = 0x00000090,
    TAGID_SVG_FEOFFSET            = 0x00000091,
    TAGID_SVG_FEPOINTLIGHT        = 0x00000092,
    TAGID_SVG_FESPECULARLIGHTING  = 0x00000093,
    TAGID_SVG_FESPOTLIGHT         = 0x00000094,
    TAGID_SVG_FETILE              = 0x00000095,
    TAGID_SVG_FETURBULENCE        = 0x00000096,
    TAGID_SVG_FILTER              = 0x00000097,
    TAGID_SVG_FONT                = 0x00000098,
    TAGID_SVG_FONT_FACE           = 0x00000099,
    TAGID_SVG_FONT_FACE_FORMAT    = 0x0000009a,
    TAGID_SVG_FONT_FACE_NAME      = 0x0000009b,
    TAGID_SVG_FONT_FACE_SRC       = 0x0000009c,
    TAGID_SVG_FONT_FACE_URI       = 0x0000009d,
    TAGID_SVG_FOREIGNOBJECT       = 0x0000009e,
    TAGID_SVG_G                   = 0x0000009f,
    TAGID_SVG_GLYPH               = 0x000000a0,
    TAGID_SVG_GLYPHREF            = 0x000000a1,
    TAGID_SVG_HKERN               = 0x000000a2,
    TAGID_SVG_IMAGE               = 0x000000a3,
    TAGID_SVG_LINE                = 0x000000a4,
    TAGID_SVG_LINEARGRADIENT      = 0x000000a5,
    TAGID_SVG_MARKER              = 0x000000a6,
    TAGID_SVG_MASK                = 0x000000a7,
    TAGID_SVG_METADATA            = 0x000000a8,
    TAGID_SVG_MISSING_GLYPH       = 0x000000a9,
    TAGID_SVG_MPATH               = 0x000000aa,
    TAGID_SVG_PATH                = 0x000000ab,
    TAGID_SVG_PATTERN             = 0x000000ac,
    TAGID_SVG_POLYGON             = 0x000000ad,
    TAGID_SVG_POLYLINE            = 0x000000ae,
    TAGID_SVG_RADIALGRADIENT      = 0x000000af,
    TAGID_SVG_RECT                = 0x000000b0,
    TAGID_SVG_SCRIPT              = 0x000000b1,
    TAGID_SVG_SET                 = 0x000000b2,
    TAGID_SVG_STOP                = 0x000000b3,
    TAGID_SVG_STYLE               = 0x000000b4,
    TAGID_SVG_SVG                 = 0x000000b5,
    TAGID_SVG_SWITCH              = 0x000000b6,
    TAGID_SVG_SYMBOL              = 0x000000b7,
    TAGID_SVG_TEXT                = 0x000000b8,
    TAGID_SVG_TEXTPATH            = 0x000000b9,
    TAGID_SVG_TITLE               = 0x000000ba,
    TAGID_SVG_TREF                = 0x000000bb,
    TAGID_SVG_TSPAN               = 0x000000bc,
    TAGID_SVG_USE                 = 0x000000bd,
    TAGID_SVG_VIEW                = 0x000000be,
    TAGID_SVG_VKERN               = 0x000000bf,
    TAGID_AUDIO                   = 0x000000c0,
    TAGID_SOURCE                  = 0x000000c1,
    TAGID_VIDEO                   = 0x000000c2,
    TAGID_CANVAS                  = 0x000000c3,
    TAGID_DOCTYPE                 = 0x000000c4,
    TAGID_KEYGEN                  = 0x000000c5,
    TAGID_PROCESSINGINSTRUCTION   = 0x000000c6,
    TAGID_ARTICLE                 = 0x000000c7,
    TAGID_ASIDE                   = 0x000000c8,
    TAGID_FIGCAPTION              = 0x000000c9,
    TAGID_FIGURE                  = 0x000000ca,
    TAGID_FOOTER                  = 0x000000cb,
    TAGID_HEADER                  = 0x000000cc,
    TAGID_HGROUP                  = 0x000000cd,
    TAGID_MARK                    = 0x000000ce,
    TAGID_NAV                     = 0x000000cf,
    TAGID_SECTION                 = 0x000000d0,
    TAGID_PROGRESS                = 0x000000d1,
    TAGID_MATHML_ANNOTATION_XML   = 0x000000d2,
    TAGID_MATHML_MATH             = 0x000000d3,
    TAGID_MATHML_MI               = 0x000000d4,
    TAGID_MATHML_MN               = 0x000000d5,
    TAGID_MATHML_MO               = 0x000000d6,
    TAGID_MATHML_MS               = 0x000000d7,
    TAGID_MATHML_MTEXT            = 0x000000d8,
    TAGID_DATALIST                = 0x000000d9,
    TAGID_TRACK                   = 0x000000da,
    TAGID_ISINDEX                 = 0x000000db,
    TAGID_COMMAND                 = 0x000000dc,
    TAGID_DETAILS                 = 0x000000dd,
    TAGID_SUMMARY                 = 0x000000de,
    TAGID_X_MS_WEBVIEW            = 0x000000df,
    TAGID_COUNT                   = 0x000000e0,
    TAGID_LAST_PREDEFINED         = 0x00002710,
    ELEMENT_TAG_ID_Max            = 0x7fffffff,
}

alias SELECTION_TYPE = int;
enum : int
{
    SELECTION_TYPE_None    = 0x00000000,
    SELECTION_TYPE_Caret   = 0x00000001,
    SELECTION_TYPE_Text    = 0x00000002,
    SELECTION_TYPE_Control = 0x00000003,
    SELECTION_TYPE_Max     = 0x7fffffff,
}

alias SAVE_SEGMENTS_FLAGS = int;
enum : int
{
    SAVE_SEGMENTS_NoIE4SelectionCompat = 0x00000001,
    SAVE_SEGMENTS_FLAGS_Max            = 0x7fffffff,
}

alias CARET_DIRECTION = int;
enum : int
{
    CARET_DIRECTION_INDETERMINATE = 0x00000000,
    CARET_DIRECTION_SAME          = 0x00000001,
    CARET_DIRECTION_BACKWARD      = 0x00000002,
    CARET_DIRECTION_FORWARD       = 0x00000003,
    CARET_DIRECTION_Max           = 0x7fffffff,
}

alias LINE_DIRECTION = int;
enum : int
{
    LINE_DIRECTION_RightToLeft = 0x00000001,
    LINE_DIRECTION_LeftToRight = 0x00000002,
    LINE_DIRECTION_Max         = 0x7fffffff,
}

alias HT_OPTIONS = int;
enum : int
{
    HT_OPT_AllowAfterEOL = 0x00000001,
    HT_OPTIONS_Max       = 0x7fffffff,
}

alias HT_RESULTS = int;
enum : int
{
    HT_RESULTS_Glyph = 0x00000001,
    HT_RESULTS_Max   = 0x7fffffff,
}

alias DISPLAY_MOVEUNIT = int;
enum : int
{
    DISPLAY_MOVEUNIT_PreviousLine     = 0x00000001,
    DISPLAY_MOVEUNIT_NextLine         = 0x00000002,
    DISPLAY_MOVEUNIT_CurrentLineStart = 0x00000003,
    DISPLAY_MOVEUNIT_CurrentLineEnd   = 0x00000004,
    DISPLAY_MOVEUNIT_TopOfWindow      = 0x00000005,
    DISPLAY_MOVEUNIT_BottomOfWindow   = 0x00000006,
    DISPLAY_MOVEUNIT_Max              = 0x7fffffff,
}

alias DISPLAY_GRAVITY = int;
enum : int
{
    DISPLAY_GRAVITY_PreviousLine = 0x00000001,
    DISPLAY_GRAVITY_NextLine     = 0x00000002,
    DISPLAY_GRAVITY_Max          = 0x7fffffff,
}

alias DISPLAY_BREAK = int;
enum : int
{
    DISPLAY_BREAK_None  = 0x00000000,
    DISPLAY_BREAK_Block = 0x00000001,
    DISPLAY_BREAK_Break = 0x00000002,
    DISPLAY_BREAK_Max   = 0x7fffffff,
}

alias COORD_SYSTEM = int;
enum : int
{
    COORD_SYSTEM_GLOBAL    = 0x00000000,
    COORD_SYSTEM_PARENT    = 0x00000001,
    COORD_SYSTEM_CONTAINER = 0x00000002,
    COORD_SYSTEM_CONTENT   = 0x00000003,
    COORD_SYSTEM_FRAME     = 0x00000004,
    COORD_SYSTEM_CLIENT    = 0x00000005,
    COORD_SYSTEM_Max       = 0x7fffffff,
}

alias DEV_CONSOLE_MESSAGE_LEVEL = int;
enum : int
{
    DCML_INFORMATIONAL            = 0x00000000,
    DCML_WARNING                  = 0x00000001,
    DCML_ERROR                    = 0x00000002,
    DEV_CONSOLE_MESSAGE_LEVEL_Max = 0x7fffffff,
}

alias DOM_EVENT_PHASE = int;
enum : int
{
    DEP_CAPTURING_PHASE = 0x00000001,
    DEP_AT_TARGET       = 0x00000002,
    DEP_BUBBLING_PHASE  = 0x00000003,
    DOM_EVENT_PHASE_Max = 0x7fffffff,
}

alias SCRIPT_TIMER_TYPE = int;
enum : int
{
    STT_TIMEOUT           = 0x00000000,
    STT_INTERVAL          = 0x00000001,
    STT_IMMEDIATE         = 0x00000002,
    STT_ANIMATION_FRAME   = 0x00000003,
    SCRIPT_TIMER_TYPE_Max = 0x7fffffff,
}

alias HTML_PAINTER = int;
enum : int
{
    HTMLPAINTER_OPAQUE         = 0x00000001,
    HTMLPAINTER_TRANSPARENT    = 0x00000002,
    HTMLPAINTER_ALPHA          = 0x00000004,
    HTMLPAINTER_COMPLEX        = 0x00000008,
    HTMLPAINTER_OVERLAY        = 0x00000010,
    HTMLPAINTER_HITTEST        = 0x00000020,
    HTMLPAINTER_SURFACE        = 0x00000100,
    HTMLPAINTER_3DSURFACE      = 0x00000200,
    HTMLPAINTER_NOBAND         = 0x00000400,
    HTMLPAINTER_NODC           = 0x00001000,
    HTMLPAINTER_NOPHYSICALCLIP = 0x00002000,
    HTMLPAINTER_NOSAVEDC       = 0x00004000,
    HTMLPAINTER_SUPPORTS_XFORM = 0x00008000,
    HTMLPAINTER_EXPAND         = 0x00010000,
    HTMLPAINTER_NOSCROLLBITS   = 0x00020000,
    HTML_PAINTER_Max           = 0x7fffffff,
}

alias HTML_PAINT_ZORDER = int;
enum : int
{
    HTMLPAINT_ZORDER_NONE               = 0x00000000,
    HTMLPAINT_ZORDER_REPLACE_ALL        = 0x00000001,
    HTMLPAINT_ZORDER_REPLACE_CONTENT    = 0x00000002,
    HTMLPAINT_ZORDER_REPLACE_BACKGROUND = 0x00000003,
    HTMLPAINT_ZORDER_BELOW_CONTENT      = 0x00000004,
    HTMLPAINT_ZORDER_BELOW_FLOW         = 0x00000005,
    HTMLPAINT_ZORDER_ABOVE_FLOW         = 0x00000006,
    HTMLPAINT_ZORDER_ABOVE_CONTENT      = 0x00000007,
    HTMLPAINT_ZORDER_WINDOW_TOP         = 0x00000008,
    HTML_PAINT_ZORDER_Max               = 0x7fffffff,
}

alias HTML_PAINT_DRAW_FLAGS = int;
enum : int
{
    HTMLPAINT_DRAW_UPDATEREGION = 0x00000001,
    HTMLPAINT_DRAW_USE_XFORM    = 0x00000002,
    HTML_PAINT_DRAW_FLAGS_Max   = 0x7fffffff,
}

alias HTML_PAINT_EVENT_FLAGS = int;
enum : int
{
    HTMLPAINT_EVENT_TARGET     = 0x00000001,
    HTMLPAINT_EVENT_SETCURSOR  = 0x00000002,
    HTML_PAINT_EVENT_FLAGS_Max = 0x7fffffff,
}

alias HTML_PAINT_DRAW_INFO_FLAGS = int;
enum : int
{
    HTMLPAINT_DRAWINFO_VIEWPORT     = 0x00000001,
    HTMLPAINT_DRAWINFO_UPDATEREGION = 0x00000002,
    HTMLPAINT_DRAWINFO_XFORM        = 0x00000004,
    HTML_PAINT_DRAW_INFO_FLAGS_Max  = 0x7fffffff,
}

struct HTML_PAINTER_INFO
{
    int lFlags;
    int lZOrder;
    GUID iidDrawObject;
    RECT rcExpand;
}
struct HTML_PAINT_XFORM
{
    float eM11;
    float eM12;
    float eM21;
    float eM22;
    float eDx;
    float eDy;
}
struct HTML_PAINT_DRAW_INFO
{
    RECT rcViewport;
    HRGN hrgnUpdate;
    HTML_PAINT_XFORM xform;
}
alias HTMLDlgFlag = int;
enum : int
{
    HTMLDlgFlagNo     = 0x00000000,
    HTMLDlgFlagOff    = 0x00000000,
    HTMLDlgFlag0      = 0x00000000,
    HTMLDlgFlagYes    = 0x00000001,
    HTMLDlgFlagOn     = 0x00000001,
    HTMLDlgFlag1      = 0x00000001,
    HTMLDlgFlagNotSet = 0xffffffff,
    HTMLDlgFlag_Max   = 0x7fffffff,
}

alias HTMLDlgBorder = int;
enum : int
{
    HTMLDlgBorderThin  = 0x00000000,
    HTMLDlgBorderThick = 0x00040000,
    HTMLDlgBorder_Max  = 0x7fffffff,
}

alias HTMLDlgEdge = int;
enum : int
{
    HTMLDlgEdgeSunken = 0x00000000,
    HTMLDlgEdgeRaised = 0x00000010,
    HTMLDlgEdge_Max   = 0x7fffffff,
}

alias HTMLDlgCenter = int;
enum : int
{
    HTMLDlgCenterNo      = 0x00000000,
    HTMLDlgCenterOff     = 0x00000000,
    HTMLDlgCenter0       = 0x00000000,
    HTMLDlgCenterYes     = 0x00000001,
    HTMLDlgCenterOn      = 0x00000001,
    HTMLDlgCenter1       = 0x00000001,
    HTMLDlgCenterParent  = 0x00000001,
    HTMLDlgCenterDesktop = 0x00000002,
    HTMLDlgCenter_Max    = 0x7fffffff,
}

alias HTMLAppFlag = int;
enum : int
{
    HTMLAppFlagNo   = 0x00000000,
    HTMLAppFlagOff  = 0x00000000,
    HTMLAppFlag0    = 0x00000000,
    HTMLAppFlagYes  = 0x00000001,
    HTMLAppFlagOn   = 0x00000001,
    HTMLAppFlag1    = 0x00000001,
    HTMLAppFlag_Max = 0x7fffffff,
}

alias HTMLMinimizeFlag = int;
enum : int
{
    HTMLMinimizeFlagNo   = 0x00000000,
    HTMLMinimizeFlagYes  = 0x00020000,
    HTMLMinimizeFlag_Max = 0x7fffffff,
}

alias HTMLMaximizeFlag = int;
enum : int
{
    HTMLMaximizeFlagNo   = 0x00000000,
    HTMLMaximizeFlagYes  = 0x00010000,
    HTMLMaximizeFlag_Max = 0x7fffffff,
}

alias HTMLCaptionFlag = int;
enum : int
{
    HTMLCaptionFlagNo   = 0x00000000,
    HTMLCaptionFlagYes  = 0x00c00000,
    HTMLCaptionFlag_Max = 0x7fffffff,
}

alias HTMLSysMenuFlag = int;
enum : int
{
    HTMLSysMenuFlagNo   = 0x00000000,
    HTMLSysMenuFlagYes  = 0x00080000,
    HTMLSysMenuFlag_Max = 0x7fffffff,
}

alias HTMLBorder = int;
enum : int
{
    HTMLBorderNone   = 0x00000000,
    HTMLBorderThick  = 0x00040000,
    HTMLBorderDialog = 0x00400000,
    HTMLBorderThin   = 0x00800000,
    HTMLBorder_Max   = 0x7fffffff,
}

alias HTMLBorderStyle = int;
enum : int
{
    HTMLBorderStyleNormal   = 0x00000000,
    HTMLBorderStyleRaised   = 0x00000100,
    HTMLBorderStyleSunken   = 0x00000200,
    HTMLBorderStylecombined = 0x00000300,
    HTMLBorderStyleStatic   = 0x00020000,
    HTMLBorderStyle_Max     = 0x7fffffff,
}

alias HTMLWindowState = int;
enum : int
{
    HTMLWindowStateNormal   = 0x00000001,
    HTMLWindowStateMaximize = 0x00000003,
    HTMLWindowStateMinimize = 0x00000006,
    HTMLWindowState_Max     = 0x7fffffff,
}

alias BEHAVIOR_EVENT = int;
enum : int
{
    BEHAVIOREVENT_FIRST                 = 0x00000000,
    BEHAVIOREVENT_CONTENTREADY          = 0x00000000,
    BEHAVIOREVENT_DOCUMENTREADY         = 0x00000001,
    BEHAVIOREVENT_APPLYSTYLE            = 0x00000002,
    BEHAVIOREVENT_DOCUMENTCONTEXTCHANGE = 0x00000003,
    BEHAVIOREVENT_CONTENTSAVE           = 0x00000004,
    BEHAVIOREVENT_LAST                  = 0x00000004,
    BEHAVIOR_EVENT_Max                  = 0x7fffffff,
}

alias BEHAVIOR_EVENT_FLAGS = int;
enum : int
{
    BEHAVIOREVENTFLAGS_BUBBLE           = 0x00000001,
    BEHAVIOREVENTFLAGS_STANDARDADDITIVE = 0x00000002,
    BEHAVIOR_EVENT_FLAGS_Max            = 0x7fffffff,
}

alias BEHAVIOR_RENDER_INFO = int;
enum : int
{
    BEHAVIORRENDERINFO_BEFOREBACKGROUND  = 0x00000001,
    BEHAVIORRENDERINFO_AFTERBACKGROUND   = 0x00000002,
    BEHAVIORRENDERINFO_BEFORECONTENT     = 0x00000004,
    BEHAVIORRENDERINFO_AFTERCONTENT      = 0x00000008,
    BEHAVIORRENDERINFO_AFTERFOREGROUND   = 0x00000020,
    BEHAVIORRENDERINFO_ABOVECONTENT      = 0x00000028,
    BEHAVIORRENDERINFO_ALLLAYERS         = 0x000000ff,
    BEHAVIORRENDERINFO_DISABLEBACKGROUND = 0x00000100,
    BEHAVIORRENDERINFO_DISABLENEGATIVEZ  = 0x00000200,
    BEHAVIORRENDERINFO_DISABLECONTENT    = 0x00000400,
    BEHAVIORRENDERINFO_DISABLEPOSITIVEZ  = 0x00000800,
    BEHAVIORRENDERINFO_DISABLEALLLAYERS  = 0x00000f00,
    BEHAVIORRENDERINFO_HITTESTING        = 0x00001000,
    BEHAVIORRENDERINFO_SURFACE           = 0x00100000,
    BEHAVIORRENDERINFO_3DSURFACE         = 0x00200000,
    BEHAVIOR_RENDER_INFO_Max             = 0x7fffffff,
}

alias BEHAVIOR_RELATION = int;
enum : int
{
    BEHAVIOR_FIRSTRELATION = 0x00000000,
    BEHAVIOR_SAMEELEMENT   = 0x00000000,
    BEHAVIOR_PARENT        = 0x00000001,
    BEHAVIOR_CHILD         = 0x00000002,
    BEHAVIOR_SIBLING       = 0x00000003,
    BEHAVIOR_LASTRELATION  = 0x00000003,
    BEHAVIOR_RELATION_Max  = 0x7fffffff,
}

alias BEHAVIOR_LAYOUT_INFO = int;
enum : int
{
    BEHAVIORLAYOUTINFO_FULLDELEGATION = 0x00000001,
    BEHAVIORLAYOUTINFO_MODIFYNATURAL  = 0x00000002,
    BEHAVIORLAYOUTINFO_MAPSIZE        = 0x00000004,
    BEHAVIOR_LAYOUT_INFO_Max          = 0x7fffffff,
}

alias BEHAVIOR_LAYOUT_MODE = int;
enum : int
{
    BEHAVIORLAYOUTMODE_NATURAL          = 0x00000001,
    BEHAVIORLAYOUTMODE_MINWIDTH         = 0x00000002,
    BEHAVIORLAYOUTMODE_MAXWIDTH         = 0x00000004,
    BEHAVIORLAYOUTMODE_MEDIA_RESOLUTION = 0x00004000,
    BEHAVIORLAYOUTMODE_FINAL_PERCENT    = 0x00008000,
    BEHAVIOR_LAYOUT_MODE_Max            = 0x7fffffff,
}

alias ELEMENTDESCRIPTOR_FLAGS = int;
enum : int
{
    ELEMENTDESCRIPTORFLAGS_LITERAL        = 0x00000001,
    ELEMENTDESCRIPTORFLAGS_NESTED_LITERAL = 0x00000002,
    ELEMENTDESCRIPTOR_FLAGS_Max           = 0x7fffffff,
}

alias ELEMENTNAMESPACE_FLAGS = int;
enum : int
{
    ELEMENTNAMESPACEFLAGS_ALLOWANYTAG         = 0x00000001,
    ELEMENTNAMESPACEFLAGS_QUERYFORUNKNOWNTAGS = 0x00000002,
    ELEMENTNAMESPACE_FLAGS_Max                = 0x7fffffff,
}

alias VIEW_OBJECT_ALPHA_MODE = int;
enum : int
{
    VIEW_OBJECT_ALPHA_MODE_IGNORE        = 0x00000000,
    VIEW_OBJECT_ALPHA_MODE_PREMULTIPLIED = 0x00000001,
    VIEW_OBJECT_ALPHA_MODE_Max           = 0x7fffffff,
}

alias VIEW_OBJECT_COMPOSITION_MODE = int;
enum : int
{
    VIEW_OBJECT_COMPOSITION_MODE_LEGACY           = 0x00000000,
    VIEW_OBJECT_COMPOSITION_MODE_SURFACEPRESENTER = 0x00000001,
    VIEW_OBJECT_COMPOSITION_MODE_Max              = 0x7fffffff,
}

enum IID_IHTMLEventObj = GUID(0x3050f32d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLEventObj : IDispatch
{
    HRESULT get_srcElement(IHTMLElement*);
    HRESULT get_altKey(short*);
    HRESULT get_ctrlKey(short*);
    HRESULT get_shiftKey(short*);
    HRESULT put_returnValue(VARIANT);
    HRESULT get_returnValue(VARIANT*);
    HRESULT put_cancelBubble(short);
    HRESULT get_cancelBubble(short*);
    HRESULT get_fromElement(IHTMLElement*);
    HRESULT get_toElement(IHTMLElement*);
    HRESULT put_keyCode(int);
    HRESULT get_keyCode(int*);
    HRESULT get_button(int*);
    HRESULT get_type(BSTR*);
    HRESULT get_qualifier(BSTR*);
    HRESULT get_reason(int*);
    HRESULT get_x(int*);
    HRESULT get_y(int*);
    HRESULT get_clientX(int*);
    HRESULT get_clientY(int*);
    HRESULT get_offsetX(int*);
    HRESULT get_offsetY(int*);
    HRESULT get_screenX(int*);
    HRESULT get_screenY(int*);
    HRESULT get_srcFilter(IDispatch*);
}
enum IID_IElementBehaviorSite = GUID(0x3050f427, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementBehaviorSite : IUnknown
{
    HRESULT GetElement(IHTMLElement*);
    HRESULT RegisterNotification(int);
}
enum IID_IElementBehavior = GUID(0x3050f425, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementBehavior : IUnknown
{
    HRESULT Init(IElementBehaviorSite);
    HRESULT Notify(int, VARIANT*);
    HRESULT Detach();
}
enum IID_IElementBehaviorFactory = GUID(0x3050f429, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementBehaviorFactory : IUnknown
{
    HRESULT FindBehavior(BSTR, BSTR, IElementBehaviorSite, IElementBehavior*);
}
enum IID_IElementBehaviorSiteOM = GUID(0x3050f489, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementBehaviorSiteOM : IUnknown
{
    HRESULT RegisterEvent(PWSTR, int, int*);
    HRESULT GetEventCookie(PWSTR, int*);
    HRESULT FireEvent(int, IHTMLEventObj);
    HRESULT CreateEventObject(IHTMLEventObj*);
    HRESULT RegisterName(PWSTR);
    HRESULT RegisterUrn(PWSTR);
}
enum IID_IElementBehaviorRender = GUID(0x3050f4aa, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementBehaviorRender : IUnknown
{
    HRESULT Draw(HDC, int, RECT*, IUnknown);
    HRESULT GetRenderInfo(int*);
    HRESULT HitTestPoint(POINT*, IUnknown, BOOL*);
}
enum IID_IElementBehaviorSiteRender = GUID(0x3050f4a7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementBehaviorSiteRender : IUnknown
{
    HRESULT Invalidate(RECT*);
    HRESULT InvalidateRenderInfo();
    HRESULT InvalidateStyle();
}
enum IID_IDOMEvent = GUID(0x305104ba, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMEvent : IDispatch
{
    HRESULT get_bubbles(short*);
    HRESULT get_cancelable(short*);
    HRESULT get_currentTarget(IEventTarget*);
    HRESULT get_defaultPrevented(short*);
    HRESULT get_eventPhase(ushort*);
    HRESULT get_target(IEventTarget*);
    HRESULT get_timeStamp(ulong*);
    HRESULT get_type(BSTR*);
    HRESULT initEvent(BSTR, short, short);
    HRESULT preventDefault();
    HRESULT stopPropagation();
    HRESULT stopImmediatePropagation();
    HRESULT get_isTrusted(short*);
    HRESULT put_cancelBubble(short);
    HRESULT get_cancelBubble(short*);
    HRESULT get_srcElement(IHTMLElement*);
}
enum IID_IHTMLDOMConstructor = GUID(0x3051049b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDOMConstructor : IDispatch
{
    HRESULT get_constructor(IDispatch*);
    HRESULT LookupGetter(BSTR, VARIANT*);
    HRESULT LookupSetter(BSTR, VARIANT*);
    HRESULT DefineGetter(BSTR, VARIANT*);
    HRESULT DefineSetter(BSTR, VARIANT*);
}
enum IID_IHTMLStyleSheetRule = GUID(0x3050f357, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleSheetRule : IDispatch
{
    HRESULT put_selectorText(BSTR);
    HRESULT get_selectorText(BSTR*);
    HRESULT get_style(IHTMLRuleStyle*);
    HRESULT get_readOnly(short*);
}
enum IID_IHTMLCSSStyleDeclaration = GUID(0x30510740, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLCSSStyleDeclaration : IDispatch
{
    HRESULT get_length(int*);
    HRESULT get_parentRule(VARIANT*);
    HRESULT getPropertyValue(BSTR, BSTR*);
    HRESULT getPropertyPriority(BSTR, BSTR*);
    HRESULT removeProperty(BSTR, BSTR*);
    HRESULT setProperty(BSTR, VARIANT*, VARIANT*);
    HRESULT item(int, BSTR*);
    HRESULT put_fontFamily(BSTR);
    HRESULT get_fontFamily(BSTR*);
    HRESULT put_fontStyle(BSTR);
    HRESULT get_fontStyle(BSTR*);
    HRESULT put_fontVariant(BSTR);
    HRESULT get_fontVariant(BSTR*);
    HRESULT put_fontWeight(BSTR);
    HRESULT get_fontWeight(BSTR*);
    HRESULT put_fontSize(VARIANT);
    HRESULT get_fontSize(VARIANT*);
    HRESULT put_font(BSTR);
    HRESULT get_font(BSTR*);
    HRESULT put_color(VARIANT);
    HRESULT get_color(VARIANT*);
    HRESULT put_background(BSTR);
    HRESULT get_background(BSTR*);
    HRESULT put_backgroundColor(VARIANT);
    HRESULT get_backgroundColor(VARIANT*);
    HRESULT put_backgroundImage(BSTR);
    HRESULT get_backgroundImage(BSTR*);
    HRESULT put_backgroundRepeat(BSTR);
    HRESULT get_backgroundRepeat(BSTR*);
    HRESULT put_backgroundAttachment(BSTR);
    HRESULT get_backgroundAttachment(BSTR*);
    HRESULT put_backgroundPosition(BSTR);
    HRESULT get_backgroundPosition(BSTR*);
    HRESULT put_backgroundPositionX(VARIANT);
    HRESULT get_backgroundPositionX(VARIANT*);
    HRESULT put_backgroundPositionY(VARIANT);
    HRESULT get_backgroundPositionY(VARIANT*);
    HRESULT put_wordSpacing(VARIANT);
    HRESULT get_wordSpacing(VARIANT*);
    HRESULT put_letterSpacing(VARIANT);
    HRESULT get_letterSpacing(VARIANT*);
    HRESULT put_textDecoration(BSTR);
    HRESULT get_textDecoration(BSTR*);
    HRESULT put_verticalAlign(VARIANT);
    HRESULT get_verticalAlign(VARIANT*);
    HRESULT put_textTransform(BSTR);
    HRESULT get_textTransform(BSTR*);
    HRESULT put_textAlign(BSTR);
    HRESULT get_textAlign(BSTR*);
    HRESULT put_textIndent(VARIANT);
    HRESULT get_textIndent(VARIANT*);
    HRESULT put_lineHeight(VARIANT);
    HRESULT get_lineHeight(VARIANT*);
    HRESULT put_marginTop(VARIANT);
    HRESULT get_marginTop(VARIANT*);
    HRESULT put_marginRight(VARIANT);
    HRESULT get_marginRight(VARIANT*);
    HRESULT put_marginBottom(VARIANT);
    HRESULT get_marginBottom(VARIANT*);
    HRESULT put_marginLeft(VARIANT);
    HRESULT get_marginLeft(VARIANT*);
    HRESULT put_margin(BSTR);
    HRESULT get_margin(BSTR*);
    HRESULT put_paddingTop(VARIANT);
    HRESULT get_paddingTop(VARIANT*);
    HRESULT put_paddingRight(VARIANT);
    HRESULT get_paddingRight(VARIANT*);
    HRESULT put_paddingBottom(VARIANT);
    HRESULT get_paddingBottom(VARIANT*);
    HRESULT put_paddingLeft(VARIANT);
    HRESULT get_paddingLeft(VARIANT*);
    HRESULT put_padding(BSTR);
    HRESULT get_padding(BSTR*);
    HRESULT put_border(BSTR);
    HRESULT get_border(BSTR*);
    HRESULT put_borderTop(BSTR);
    HRESULT get_borderTop(BSTR*);
    HRESULT put_borderRight(BSTR);
    HRESULT get_borderRight(BSTR*);
    HRESULT put_borderBottom(BSTR);
    HRESULT get_borderBottom(BSTR*);
    HRESULT put_borderLeft(BSTR);
    HRESULT get_borderLeft(BSTR*);
    HRESULT put_borderColor(BSTR);
    HRESULT get_borderColor(BSTR*);
    HRESULT put_borderTopColor(VARIANT);
    HRESULT get_borderTopColor(VARIANT*);
    HRESULT put_borderRightColor(VARIANT);
    HRESULT get_borderRightColor(VARIANT*);
    HRESULT put_borderBottomColor(VARIANT);
    HRESULT get_borderBottomColor(VARIANT*);
    HRESULT put_borderLeftColor(VARIANT);
    HRESULT get_borderLeftColor(VARIANT*);
    HRESULT put_borderWidth(BSTR);
    HRESULT get_borderWidth(BSTR*);
    HRESULT put_borderTopWidth(VARIANT);
    HRESULT get_borderTopWidth(VARIANT*);
    HRESULT put_borderRightWidth(VARIANT);
    HRESULT get_borderRightWidth(VARIANT*);
    HRESULT put_borderBottomWidth(VARIANT);
    HRESULT get_borderBottomWidth(VARIANT*);
    HRESULT put_borderLeftWidth(VARIANT);
    HRESULT get_borderLeftWidth(VARIANT*);
    HRESULT put_borderStyle(BSTR);
    HRESULT get_borderStyle(BSTR*);
    HRESULT put_borderTopStyle(BSTR);
    HRESULT get_borderTopStyle(BSTR*);
    HRESULT put_borderRightStyle(BSTR);
    HRESULT get_borderRightStyle(BSTR*);
    HRESULT put_borderBottomStyle(BSTR);
    HRESULT get_borderBottomStyle(BSTR*);
    HRESULT put_borderLeftStyle(BSTR);
    HRESULT get_borderLeftStyle(BSTR*);
    HRESULT put_width(VARIANT);
    HRESULT get_width(VARIANT*);
    HRESULT put_height(VARIANT);
    HRESULT get_height(VARIANT*);
    HRESULT put_styleFloat(BSTR);
    HRESULT get_styleFloat(BSTR*);
    HRESULT put_clear(BSTR);
    HRESULT get_clear(BSTR*);
    HRESULT put_display(BSTR);
    HRESULT get_display(BSTR*);
    HRESULT put_visibility(BSTR);
    HRESULT get_visibility(BSTR*);
    HRESULT put_listStyleType(BSTR);
    HRESULT get_listStyleType(BSTR*);
    HRESULT put_listStylePosition(BSTR);
    HRESULT get_listStylePosition(BSTR*);
    HRESULT put_listStyleImage(BSTR);
    HRESULT get_listStyleImage(BSTR*);
    HRESULT put_listStyle(BSTR);
    HRESULT get_listStyle(BSTR*);
    HRESULT put_whiteSpace(BSTR);
    HRESULT get_whiteSpace(BSTR*);
    HRESULT put_top(VARIANT);
    HRESULT get_top(VARIANT*);
    HRESULT put_left(VARIANT);
    HRESULT get_left(VARIANT*);
    HRESULT put_zIndex(VARIANT);
    HRESULT get_zIndex(VARIANT*);
    HRESULT put_overflow(BSTR);
    HRESULT get_overflow(BSTR*);
    HRESULT put_pageBreakBefore(BSTR);
    HRESULT get_pageBreakBefore(BSTR*);
    HRESULT put_pageBreakAfter(BSTR);
    HRESULT get_pageBreakAfter(BSTR*);
    HRESULT put_cssText(BSTR);
    HRESULT get_cssText(BSTR*);
    HRESULT put_cursor(BSTR);
    HRESULT get_cursor(BSTR*);
    HRESULT put_clip(BSTR);
    HRESULT get_clip(BSTR*);
    HRESULT put_filter(BSTR);
    HRESULT get_filter(BSTR*);
    HRESULT put_tableLayout(BSTR);
    HRESULT get_tableLayout(BSTR*);
    HRESULT put_borderCollapse(BSTR);
    HRESULT get_borderCollapse(BSTR*);
    HRESULT put_direction(BSTR);
    HRESULT get_direction(BSTR*);
    HRESULT put_behavior(BSTR);
    HRESULT get_behavior(BSTR*);
    HRESULT put_position(BSTR);
    HRESULT get_position(BSTR*);
    HRESULT put_unicodeBidi(BSTR);
    HRESULT get_unicodeBidi(BSTR*);
    HRESULT put_bottom(VARIANT);
    HRESULT get_bottom(VARIANT*);
    HRESULT put_right(VARIANT);
    HRESULT get_right(VARIANT*);
    HRESULT put_imeMode(BSTR);
    HRESULT get_imeMode(BSTR*);
    HRESULT put_rubyAlign(BSTR);
    HRESULT get_rubyAlign(BSTR*);
    HRESULT put_rubyPosition(BSTR);
    HRESULT get_rubyPosition(BSTR*);
    HRESULT put_rubyOverhang(BSTR);
    HRESULT get_rubyOverhang(BSTR*);
    HRESULT put_layoutGridChar(VARIANT);
    HRESULT get_layoutGridChar(VARIANT*);
    HRESULT put_layoutGridLine(VARIANT);
    HRESULT get_layoutGridLine(VARIANT*);
    HRESULT put_layoutGridMode(BSTR);
    HRESULT get_layoutGridMode(BSTR*);
    HRESULT put_layoutGridType(BSTR);
    HRESULT get_layoutGridType(BSTR*);
    HRESULT put_layoutGrid(BSTR);
    HRESULT get_layoutGrid(BSTR*);
    HRESULT put_textAutospace(BSTR);
    HRESULT get_textAutospace(BSTR*);
    HRESULT put_wordBreak(BSTR);
    HRESULT get_wordBreak(BSTR*);
    HRESULT put_lineBreak(BSTR);
    HRESULT get_lineBreak(BSTR*);
    HRESULT put_textJustify(BSTR);
    HRESULT get_textJustify(BSTR*);
    HRESULT put_textJustifyTrim(BSTR);
    HRESULT get_textJustifyTrim(BSTR*);
    HRESULT put_textKashida(VARIANT);
    HRESULT get_textKashida(VARIANT*);
    HRESULT put_overflowX(BSTR);
    HRESULT get_overflowX(BSTR*);
    HRESULT put_overflowY(BSTR);
    HRESULT get_overflowY(BSTR*);
    HRESULT put_accelerator(BSTR);
    HRESULT get_accelerator(BSTR*);
    HRESULT put_layoutFlow(BSTR);
    HRESULT get_layoutFlow(BSTR*);
    HRESULT put_zoom(VARIANT);
    HRESULT get_zoom(VARIANT*);
    HRESULT put_wordWrap(BSTR);
    HRESULT get_wordWrap(BSTR*);
    HRESULT put_textUnderlinePosition(BSTR);
    HRESULT get_textUnderlinePosition(BSTR*);
    HRESULT put_scrollbarBaseColor(VARIANT);
    HRESULT get_scrollbarBaseColor(VARIANT*);
    HRESULT put_scrollbarFaceColor(VARIANT);
    HRESULT get_scrollbarFaceColor(VARIANT*);
    HRESULT put_scrollbar3dLightColor(VARIANT);
    HRESULT get_scrollbar3dLightColor(VARIANT*);
    HRESULT put_scrollbarShadowColor(VARIANT);
    HRESULT get_scrollbarShadowColor(VARIANT*);
    HRESULT put_scrollbarHighlightColor(VARIANT);
    HRESULT get_scrollbarHighlightColor(VARIANT*);
    HRESULT put_scrollbarDarkShadowColor(VARIANT);
    HRESULT get_scrollbarDarkShadowColor(VARIANT*);
    HRESULT put_scrollbarArrowColor(VARIANT);
    HRESULT get_scrollbarArrowColor(VARIANT*);
    HRESULT put_scrollbarTrackColor(VARIANT);
    HRESULT get_scrollbarTrackColor(VARIANT*);
    HRESULT put_writingMode(BSTR);
    HRESULT get_writingMode(BSTR*);
    HRESULT put_textAlignLast(BSTR);
    HRESULT get_textAlignLast(BSTR*);
    HRESULT put_textKashidaSpace(VARIANT);
    HRESULT get_textKashidaSpace(VARIANT*);
    HRESULT put_textOverflow(BSTR);
    HRESULT get_textOverflow(BSTR*);
    HRESULT put_minHeight(VARIANT);
    HRESULT get_minHeight(VARIANT*);
    HRESULT put_msInterpolationMode(BSTR);
    HRESULT get_msInterpolationMode(BSTR*);
    HRESULT put_maxHeight(VARIANT);
    HRESULT get_maxHeight(VARIANT*);
    HRESULT put_minWidth(VARIANT);
    HRESULT get_minWidth(VARIANT*);
    HRESULT put_maxWidth(VARIANT);
    HRESULT get_maxWidth(VARIANT*);
    HRESULT put_content(BSTR);
    HRESULT get_content(BSTR*);
    HRESULT put_captionSide(BSTR);
    HRESULT get_captionSide(BSTR*);
    HRESULT put_counterIncrement(BSTR);
    HRESULT get_counterIncrement(BSTR*);
    HRESULT put_counterReset(BSTR);
    HRESULT get_counterReset(BSTR*);
    HRESULT put_outline(BSTR);
    HRESULT get_outline(BSTR*);
    HRESULT put_outlineWidth(VARIANT);
    HRESULT get_outlineWidth(VARIANT*);
    HRESULT put_outlineStyle(BSTR);
    HRESULT get_outlineStyle(BSTR*);
    HRESULT put_outlineColor(VARIANT);
    HRESULT get_outlineColor(VARIANT*);
    HRESULT put_boxSizing(BSTR);
    HRESULT get_boxSizing(BSTR*);
    HRESULT put_borderSpacing(BSTR);
    HRESULT get_borderSpacing(BSTR*);
    HRESULT put_orphans(VARIANT);
    HRESULT get_orphans(VARIANT*);
    HRESULT put_widows(VARIANT);
    HRESULT get_widows(VARIANT*);
    HRESULT put_pageBreakInside(BSTR);
    HRESULT get_pageBreakInside(BSTR*);
    HRESULT put_emptyCells(BSTR);
    HRESULT get_emptyCells(BSTR*);
    HRESULT put_msBlockProgression(BSTR);
    HRESULT get_msBlockProgression(BSTR*);
    HRESULT put_quotes(BSTR);
    HRESULT get_quotes(BSTR*);
    HRESULT put_alignmentBaseline(BSTR);
    HRESULT get_alignmentBaseline(BSTR*);
    HRESULT put_baselineShift(VARIANT);
    HRESULT get_baselineShift(VARIANT*);
    HRESULT put_dominantBaseline(BSTR);
    HRESULT get_dominantBaseline(BSTR*);
    HRESULT put_fontSizeAdjust(VARIANT);
    HRESULT get_fontSizeAdjust(VARIANT*);
    HRESULT put_fontStretch(BSTR);
    HRESULT get_fontStretch(BSTR*);
    HRESULT put_opacity(VARIANT);
    HRESULT get_opacity(VARIANT*);
    HRESULT put_clipPath(BSTR);
    HRESULT get_clipPath(BSTR*);
    HRESULT put_clipRule(BSTR);
    HRESULT get_clipRule(BSTR*);
    HRESULT put_fill(BSTR);
    HRESULT get_fill(BSTR*);
    HRESULT put_fillOpacity(VARIANT);
    HRESULT get_fillOpacity(VARIANT*);
    HRESULT put_fillRule(BSTR);
    HRESULT get_fillRule(BSTR*);
    HRESULT put_kerning(VARIANT);
    HRESULT get_kerning(VARIANT*);
    HRESULT put_marker(BSTR);
    HRESULT get_marker(BSTR*);
    HRESULT put_markerEnd(BSTR);
    HRESULT get_markerEnd(BSTR*);
    HRESULT put_markerMid(BSTR);
    HRESULT get_markerMid(BSTR*);
    HRESULT put_markerStart(BSTR);
    HRESULT get_markerStart(BSTR*);
    HRESULT put_mask(BSTR);
    HRESULT get_mask(BSTR*);
    HRESULT put_pointerEvents(BSTR);
    HRESULT get_pointerEvents(BSTR*);
    HRESULT put_stopColor(VARIANT);
    HRESULT get_stopColor(VARIANT*);
    HRESULT put_stopOpacity(VARIANT);
    HRESULT get_stopOpacity(VARIANT*);
    HRESULT put_stroke(BSTR);
    HRESULT get_stroke(BSTR*);
    HRESULT put_strokeDasharray(BSTR);
    HRESULT get_strokeDasharray(BSTR*);
    HRESULT put_strokeDashoffset(VARIANT);
    HRESULT get_strokeDashoffset(VARIANT*);
    HRESULT put_strokeLinecap(BSTR);
    HRESULT get_strokeLinecap(BSTR*);
    HRESULT put_strokeLinejoin(BSTR);
    HRESULT get_strokeLinejoin(BSTR*);
    HRESULT put_strokeMiterlimit(VARIANT);
    HRESULT get_strokeMiterlimit(VARIANT*);
    HRESULT put_strokeOpacity(VARIANT);
    HRESULT get_strokeOpacity(VARIANT*);
    HRESULT put_strokeWidth(VARIANT);
    HRESULT get_strokeWidth(VARIANT*);
    HRESULT put_textAnchor(BSTR);
    HRESULT get_textAnchor(BSTR*);
    HRESULT put_glyphOrientationHorizontal(VARIANT);
    HRESULT get_glyphOrientationHorizontal(VARIANT*);
    HRESULT put_glyphOrientationVertical(VARIANT);
    HRESULT get_glyphOrientationVertical(VARIANT*);
    HRESULT put_borderRadius(BSTR);
    HRESULT get_borderRadius(BSTR*);
    HRESULT put_borderTopLeftRadius(BSTR);
    HRESULT get_borderTopLeftRadius(BSTR*);
    HRESULT put_borderTopRightRadius(BSTR);
    HRESULT get_borderTopRightRadius(BSTR*);
    HRESULT put_borderBottomRightRadius(BSTR);
    HRESULT get_borderBottomRightRadius(BSTR*);
    HRESULT put_borderBottomLeftRadius(BSTR);
    HRESULT get_borderBottomLeftRadius(BSTR*);
    HRESULT put_clipTop(VARIANT);
    HRESULT get_clipTop(VARIANT*);
    HRESULT put_clipRight(VARIANT);
    HRESULT get_clipRight(VARIANT*);
    HRESULT get_clipBottom(VARIANT*);
    HRESULT put_clipLeft(VARIANT);
    HRESULT get_clipLeft(VARIANT*);
    HRESULT put_cssFloat(BSTR);
    HRESULT get_cssFloat(BSTR*);
    HRESULT put_backgroundClip(BSTR);
    HRESULT get_backgroundClip(BSTR*);
    HRESULT put_backgroundOrigin(BSTR);
    HRESULT get_backgroundOrigin(BSTR*);
    HRESULT put_backgroundSize(BSTR);
    HRESULT get_backgroundSize(BSTR*);
    HRESULT put_boxShadow(BSTR);
    HRESULT get_boxShadow(BSTR*);
    HRESULT put_msTransform(BSTR);
    HRESULT get_msTransform(BSTR*);
    HRESULT put_msTransformOrigin(BSTR);
    HRESULT get_msTransformOrigin(BSTR*);
}
enum IID_IHTMLCSSStyleDeclaration2 = GUID(0x305107d1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLCSSStyleDeclaration2 : IDispatch
{
    HRESULT put_msScrollChaining(BSTR);
    HRESULT get_msScrollChaining(BSTR*);
    HRESULT put_msContentZooming(BSTR);
    HRESULT get_msContentZooming(BSTR*);
    HRESULT put_msContentZoomSnapType(BSTR);
    HRESULT get_msContentZoomSnapType(BSTR*);
    HRESULT put_msScrollRails(BSTR);
    HRESULT get_msScrollRails(BSTR*);
    HRESULT put_msContentZoomChaining(BSTR);
    HRESULT get_msContentZoomChaining(BSTR*);
    HRESULT put_msScrollSnapType(BSTR);
    HRESULT get_msScrollSnapType(BSTR*);
    HRESULT put_msContentZoomLimit(BSTR);
    HRESULT get_msContentZoomLimit(BSTR*);
    HRESULT put_msContentZoomSnap(BSTR);
    HRESULT get_msContentZoomSnap(BSTR*);
    HRESULT put_msContentZoomSnapPoints(BSTR);
    HRESULT get_msContentZoomSnapPoints(BSTR*);
    HRESULT put_msContentZoomLimitMin(VARIANT);
    HRESULT get_msContentZoomLimitMin(VARIANT*);
    HRESULT put_msContentZoomLimitMax(VARIANT);
    HRESULT get_msContentZoomLimitMax(VARIANT*);
    HRESULT put_msScrollSnapX(BSTR);
    HRESULT get_msScrollSnapX(BSTR*);
    HRESULT put_msScrollSnapY(BSTR);
    HRESULT get_msScrollSnapY(BSTR*);
    HRESULT put_msScrollSnapPointsX(BSTR);
    HRESULT get_msScrollSnapPointsX(BSTR*);
    HRESULT put_msScrollSnapPointsY(BSTR);
    HRESULT get_msScrollSnapPointsY(BSTR*);
    HRESULT put_msGridColumn(VARIANT);
    HRESULT get_msGridColumn(VARIANT*);
    HRESULT put_msGridColumnAlign(BSTR);
    HRESULT get_msGridColumnAlign(BSTR*);
    HRESULT put_msGridColumns(BSTR);
    HRESULT get_msGridColumns(BSTR*);
    HRESULT put_msGridColumnSpan(VARIANT);
    HRESULT get_msGridColumnSpan(VARIANT*);
    HRESULT put_msGridRow(VARIANT);
    HRESULT get_msGridRow(VARIANT*);
    HRESULT put_msGridRowAlign(BSTR);
    HRESULT get_msGridRowAlign(BSTR*);
    HRESULT put_msGridRows(BSTR);
    HRESULT get_msGridRows(BSTR*);
    HRESULT put_msGridRowSpan(VARIANT);
    HRESULT get_msGridRowSpan(VARIANT*);
    HRESULT put_msWrapThrough(BSTR);
    HRESULT get_msWrapThrough(BSTR*);
    HRESULT put_msWrapMargin(VARIANT);
    HRESULT get_msWrapMargin(VARIANT*);
    HRESULT put_msWrapFlow(BSTR);
    HRESULT get_msWrapFlow(BSTR*);
    HRESULT put_msAnimationName(BSTR);
    HRESULT get_msAnimationName(BSTR*);
    HRESULT put_msAnimationDuration(BSTR);
    HRESULT get_msAnimationDuration(BSTR*);
    HRESULT put_msAnimationTimingFunction(BSTR);
    HRESULT get_msAnimationTimingFunction(BSTR*);
    HRESULT put_msAnimationDelay(BSTR);
    HRESULT get_msAnimationDelay(BSTR*);
    HRESULT put_msAnimationDirection(BSTR);
    HRESULT get_msAnimationDirection(BSTR*);
    HRESULT put_msAnimationPlayState(BSTR);
    HRESULT get_msAnimationPlayState(BSTR*);
    HRESULT put_msAnimationIterationCount(BSTR);
    HRESULT get_msAnimationIterationCount(BSTR*);
    HRESULT put_msAnimation(BSTR);
    HRESULT get_msAnimation(BSTR*);
    HRESULT put_msAnimationFillMode(BSTR);
    HRESULT get_msAnimationFillMode(BSTR*);
    HRESULT put_colorInterpolationFilters(BSTR);
    HRESULT get_colorInterpolationFilters(BSTR*);
    HRESULT put_columnCount(VARIANT);
    HRESULT get_columnCount(VARIANT*);
    HRESULT put_columnWidth(VARIANT);
    HRESULT get_columnWidth(VARIANT*);
    HRESULT put_columnGap(VARIANT);
    HRESULT get_columnGap(VARIANT*);
    HRESULT put_columnFill(BSTR);
    HRESULT get_columnFill(BSTR*);
    HRESULT put_columnSpan(BSTR);
    HRESULT get_columnSpan(BSTR*);
    HRESULT put_columns(BSTR);
    HRESULT get_columns(BSTR*);
    HRESULT put_columnRule(BSTR);
    HRESULT get_columnRule(BSTR*);
    HRESULT put_columnRuleColor(VARIANT);
    HRESULT get_columnRuleColor(VARIANT*);
    HRESULT put_columnRuleStyle(BSTR);
    HRESULT get_columnRuleStyle(BSTR*);
    HRESULT put_columnRuleWidth(VARIANT);
    HRESULT get_columnRuleWidth(VARIANT*);
    HRESULT put_breakBefore(BSTR);
    HRESULT get_breakBefore(BSTR*);
    HRESULT put_breakAfter(BSTR);
    HRESULT get_breakAfter(BSTR*);
    HRESULT put_breakInside(BSTR);
    HRESULT get_breakInside(BSTR*);
    HRESULT put_floodColor(VARIANT);
    HRESULT get_floodColor(VARIANT*);
    HRESULT put_floodOpacity(VARIANT);
    HRESULT get_floodOpacity(VARIANT*);
    HRESULT put_lightingColor(VARIANT);
    HRESULT get_lightingColor(VARIANT*);
    HRESULT put_msScrollLimitXMin(VARIANT);
    HRESULT get_msScrollLimitXMin(VARIANT*);
    HRESULT put_msScrollLimitYMin(VARIANT);
    HRESULT get_msScrollLimitYMin(VARIANT*);
    HRESULT put_msScrollLimitXMax(VARIANT);
    HRESULT get_msScrollLimitXMax(VARIANT*);
    HRESULT put_msScrollLimitYMax(VARIANT);
    HRESULT get_msScrollLimitYMax(VARIANT*);
    HRESULT put_msScrollLimit(BSTR);
    HRESULT get_msScrollLimit(BSTR*);
    HRESULT put_textShadow(BSTR);
    HRESULT get_textShadow(BSTR*);
    HRESULT put_msFlowFrom(BSTR);
    HRESULT get_msFlowFrom(BSTR*);
    HRESULT put_msFlowInto(BSTR);
    HRESULT get_msFlowInto(BSTR*);
    HRESULT put_msHyphens(BSTR);
    HRESULT get_msHyphens(BSTR*);
    HRESULT put_msHyphenateLimitZone(VARIANT);
    HRESULT get_msHyphenateLimitZone(VARIANT*);
    HRESULT put_msHyphenateLimitChars(BSTR);
    HRESULT get_msHyphenateLimitChars(BSTR*);
    HRESULT put_msHyphenateLimitLines(VARIANT);
    HRESULT get_msHyphenateLimitLines(VARIANT*);
    HRESULT put_msHighContrastAdjust(BSTR);
    HRESULT get_msHighContrastAdjust(BSTR*);
    HRESULT put_enableBackground(BSTR);
    HRESULT get_enableBackground(BSTR*);
    HRESULT put_msFontFeatureSettings(BSTR);
    HRESULT get_msFontFeatureSettings(BSTR*);
    HRESULT put_msUserSelect(BSTR);
    HRESULT get_msUserSelect(BSTR*);
    HRESULT put_msOverflowStyle(BSTR);
    HRESULT get_msOverflowStyle(BSTR*);
    HRESULT put_msTransformStyle(BSTR);
    HRESULT get_msTransformStyle(BSTR*);
    HRESULT put_msBackfaceVisibility(BSTR);
    HRESULT get_msBackfaceVisibility(BSTR*);
    HRESULT put_msPerspective(VARIANT);
    HRESULT get_msPerspective(VARIANT*);
    HRESULT put_msPerspectiveOrigin(BSTR);
    HRESULT get_msPerspectiveOrigin(BSTR*);
    HRESULT put_msTransitionProperty(BSTR);
    HRESULT get_msTransitionProperty(BSTR*);
    HRESULT put_msTransitionDuration(BSTR);
    HRESULT get_msTransitionDuration(BSTR*);
    HRESULT put_msTransitionTimingFunction(BSTR);
    HRESULT get_msTransitionTimingFunction(BSTR*);
    HRESULT put_msTransitionDelay(BSTR);
    HRESULT get_msTransitionDelay(BSTR*);
    HRESULT put_msTransition(BSTR);
    HRESULT get_msTransition(BSTR*);
    HRESULT put_msTouchAction(BSTR);
    HRESULT get_msTouchAction(BSTR*);
    HRESULT put_msScrollTranslation(BSTR);
    HRESULT get_msScrollTranslation(BSTR*);
    HRESULT put_msFlex(BSTR);
    HRESULT get_msFlex(BSTR*);
    HRESULT put_msFlexPositive(VARIANT);
    HRESULT get_msFlexPositive(VARIANT*);
    HRESULT put_msFlexNegative(VARIANT);
    HRESULT get_msFlexNegative(VARIANT*);
    HRESULT put_msFlexPreferredSize(VARIANT);
    HRESULT get_msFlexPreferredSize(VARIANT*);
    HRESULT put_msFlexFlow(BSTR);
    HRESULT get_msFlexFlow(BSTR*);
    HRESULT put_msFlexDirection(BSTR);
    HRESULT get_msFlexDirection(BSTR*);
    HRESULT put_msFlexWrap(BSTR);
    HRESULT get_msFlexWrap(BSTR*);
    HRESULT put_msFlexAlign(BSTR);
    HRESULT get_msFlexAlign(BSTR*);
    HRESULT put_msFlexItemAlign(BSTR);
    HRESULT get_msFlexItemAlign(BSTR*);
    HRESULT put_msFlexPack(BSTR);
    HRESULT get_msFlexPack(BSTR*);
    HRESULT put_msFlexLinePack(BSTR);
    HRESULT get_msFlexLinePack(BSTR*);
    HRESULT put_msFlexOrder(VARIANT);
    HRESULT get_msFlexOrder(VARIANT*);
    HRESULT put_msTouchSelect(BSTR);
    HRESULT get_msTouchSelect(BSTR*);
    HRESULT put_transform(BSTR);
    HRESULT get_transform(BSTR*);
    HRESULT put_transformOrigin(BSTR);
    HRESULT get_transformOrigin(BSTR*);
    HRESULT put_transformStyle(BSTR);
    HRESULT get_transformStyle(BSTR*);
    HRESULT put_backfaceVisibility(BSTR);
    HRESULT get_backfaceVisibility(BSTR*);
    HRESULT put_perspective(VARIANT);
    HRESULT get_perspective(VARIANT*);
    HRESULT put_perspectiveOrigin(BSTR);
    HRESULT get_perspectiveOrigin(BSTR*);
    HRESULT put_transitionProperty(BSTR);
    HRESULT get_transitionProperty(BSTR*);
    HRESULT put_transitionDuration(BSTR);
    HRESULT get_transitionDuration(BSTR*);
    HRESULT put_transitionTimingFunction(BSTR);
    HRESULT get_transitionTimingFunction(BSTR*);
    HRESULT put_transitionDelay(BSTR);
    HRESULT get_transitionDelay(BSTR*);
    HRESULT put_transition(BSTR);
    HRESULT get_transition(BSTR*);
    HRESULT put_fontFeatureSettings(BSTR);
    HRESULT get_fontFeatureSettings(BSTR*);
    HRESULT put_animationName(BSTR);
    HRESULT get_animationName(BSTR*);
    HRESULT put_animationDuration(BSTR);
    HRESULT get_animationDuration(BSTR*);
    HRESULT put_animationTimingFunction(BSTR);
    HRESULT get_animationTimingFunction(BSTR*);
    HRESULT put_animationDelay(BSTR);
    HRESULT get_animationDelay(BSTR*);
    HRESULT put_animationDirection(BSTR);
    HRESULT get_animationDirection(BSTR*);
    HRESULT put_animationPlayState(BSTR);
    HRESULT get_animationPlayState(BSTR*);
    HRESULT put_animationIterationCount(BSTR);
    HRESULT get_animationIterationCount(BSTR*);
    HRESULT put_animation(BSTR);
    HRESULT get_animation(BSTR*);
    HRESULT put_animationFillMode(BSTR);
    HRESULT get_animationFillMode(BSTR*);
}
enum IID_IHTMLCSSStyleDeclaration3 = GUID(0x3051085c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLCSSStyleDeclaration3 : IDispatch
{
    HRESULT put_flex(BSTR);
    HRESULT get_flex(BSTR*);
    HRESULT put_flexDirection(BSTR);
    HRESULT get_flexDirection(BSTR*);
    HRESULT put_flexWrap(BSTR);
    HRESULT get_flexWrap(BSTR*);
    HRESULT put_flexFlow(BSTR);
    HRESULT get_flexFlow(BSTR*);
    HRESULT put_flexGrow(VARIANT);
    HRESULT get_flexGrow(VARIANT*);
    HRESULT put_flexShrink(VARIANT);
    HRESULT get_flexShrink(VARIANT*);
    HRESULT put_flexBasis(VARIANT);
    HRESULT get_flexBasis(VARIANT*);
    HRESULT put_justifyContent(BSTR);
    HRESULT get_justifyContent(BSTR*);
    HRESULT put_alignItems(BSTR);
    HRESULT get_alignItems(BSTR*);
    HRESULT put_alignSelf(BSTR);
    HRESULT get_alignSelf(BSTR*);
    HRESULT put_alignContent(BSTR);
    HRESULT get_alignContent(BSTR*);
    HRESULT put_borderImage(BSTR);
    HRESULT get_borderImage(BSTR*);
    HRESULT put_borderImageSource(BSTR);
    HRESULT get_borderImageSource(BSTR*);
    HRESULT put_borderImageSlice(BSTR);
    HRESULT get_borderImageSlice(BSTR*);
    HRESULT put_borderImageWidth(BSTR);
    HRESULT get_borderImageWidth(BSTR*);
    HRESULT put_borderImageOutset(BSTR);
    HRESULT get_borderImageOutset(BSTR*);
    HRESULT put_borderImageRepeat(BSTR);
    HRESULT get_borderImageRepeat(BSTR*);
    HRESULT put_msImeAlign(BSTR);
    HRESULT get_msImeAlign(BSTR*);
    HRESULT put_msTextCombineHorizontal(BSTR);
    HRESULT get_msTextCombineHorizontal(BSTR*);
    HRESULT put_touchAction(BSTR);
    HRESULT get_touchAction(BSTR*);
}
enum IID_IHTMLCSSStyleDeclaration4 = GUID(0xd6100f3b, 0x27c8, 0x4132, [0xaf, 0xea, 0xf0, 0xe4, 0xb1, 0xe0, 0x0, 0x60]);
interface IHTMLCSSStyleDeclaration4 : IDispatch
{
    HRESULT put_webkitAppearance(BSTR);
    HRESULT get_webkitAppearance(BSTR*);
    HRESULT put_webkitUserSelect(BSTR);
    HRESULT get_webkitUserSelect(BSTR*);
    HRESULT put_webkitBoxAlign(BSTR);
    HRESULT get_webkitBoxAlign(BSTR*);
    HRESULT put_webkitBoxOrdinalGroup(VARIANT);
    HRESULT get_webkitBoxOrdinalGroup(VARIANT*);
    HRESULT put_webkitBoxPack(BSTR);
    HRESULT get_webkitBoxPack(BSTR*);
    HRESULT put_webkitBoxFlex(VARIANT);
    HRESULT get_webkitBoxFlex(VARIANT*);
    HRESULT put_webkitBoxOrient(BSTR);
    HRESULT get_webkitBoxOrient(BSTR*);
    HRESULT put_webkitBoxDirection(BSTR);
    HRESULT get_webkitBoxDirection(BSTR*);
    HRESULT put_webkitTransform(BSTR);
    HRESULT get_webkitTransform(BSTR*);
    HRESULT put_webkitBackgroundSize(BSTR);
    HRESULT get_webkitBackgroundSize(BSTR*);
    HRESULT put_webkitBackfaceVisibility(BSTR);
    HRESULT get_webkitBackfaceVisibility(BSTR*);
    HRESULT put_webkitAnimation(BSTR);
    HRESULT get_webkitAnimation(BSTR*);
    HRESULT put_webkitTransition(BSTR);
    HRESULT get_webkitTransition(BSTR*);
    HRESULT put_webkitAnimationName(BSTR);
    HRESULT get_webkitAnimationName(BSTR*);
    HRESULT put_webkitAnimationDuration(BSTR);
    HRESULT get_webkitAnimationDuration(BSTR*);
    HRESULT put_webkitAnimationTimingFunction(BSTR);
    HRESULT get_webkitAnimationTimingFunction(BSTR*);
    HRESULT put_webkitAnimationDelay(BSTR);
    HRESULT get_webkitAnimationDelay(BSTR*);
    HRESULT put_webkitAnimationIterationCount(BSTR);
    HRESULT get_webkitAnimationIterationCount(BSTR*);
    HRESULT put_webkitAnimationDirection(BSTR);
    HRESULT get_webkitAnimationDirection(BSTR*);
    HRESULT put_webkitAnimationPlayState(BSTR);
    HRESULT get_webkitAnimationPlayState(BSTR*);
    HRESULT put_webkitTransitionProperty(BSTR);
    HRESULT get_webkitTransitionProperty(BSTR*);
    HRESULT put_webkitTransitionDuration(BSTR);
    HRESULT get_webkitTransitionDuration(BSTR*);
    HRESULT put_webkitTransitionTimingFunction(BSTR);
    HRESULT get_webkitTransitionTimingFunction(BSTR*);
    HRESULT put_webkitTransitionDelay(BSTR);
    HRESULT get_webkitTransitionDelay(BSTR*);
    HRESULT put_webkitBackgroundAttachment(BSTR);
    HRESULT get_webkitBackgroundAttachment(BSTR*);
    HRESULT put_webkitBackgroundColor(VARIANT);
    HRESULT get_webkitBackgroundColor(VARIANT*);
    HRESULT put_webkitBackgroundClip(BSTR);
    HRESULT get_webkitBackgroundClip(BSTR*);
    HRESULT put_webkitBackgroundImage(BSTR);
    HRESULT get_webkitBackgroundImage(BSTR*);
    HRESULT put_webkitBackgroundRepeat(BSTR);
    HRESULT get_webkitBackgroundRepeat(BSTR*);
    HRESULT put_webkitBackgroundOrigin(BSTR);
    HRESULT get_webkitBackgroundOrigin(BSTR*);
    HRESULT put_webkitBackgroundPosition(BSTR);
    HRESULT get_webkitBackgroundPosition(BSTR*);
    HRESULT put_webkitBackgroundPositionX(VARIANT);
    HRESULT get_webkitBackgroundPositionX(VARIANT*);
    HRESULT put_webkitBackgroundPositionY(VARIANT);
    HRESULT get_webkitBackgroundPositionY(VARIANT*);
    HRESULT put_webkitBackground(BSTR);
    HRESULT get_webkitBackground(BSTR*);
    HRESULT put_webkitTransformOrigin(BSTR);
    HRESULT get_webkitTransformOrigin(BSTR*);
    HRESULT put_msTextSizeAdjust(VARIANT);
    HRESULT get_msTextSizeAdjust(VARIANT*);
    HRESULT put_webkitTextSizeAdjust(VARIANT);
    HRESULT get_webkitTextSizeAdjust(VARIANT*);
    HRESULT put_webkitBorderImage(BSTR);
    HRESULT get_webkitBorderImage(BSTR*);
    HRESULT put_webkitBorderImageSource(BSTR);
    HRESULT get_webkitBorderImageSource(BSTR*);
    HRESULT put_webkitBorderImageSlice(BSTR);
    HRESULT get_webkitBorderImageSlice(BSTR*);
    HRESULT put_webkitBorderImageWidth(BSTR);
    HRESULT get_webkitBorderImageWidth(BSTR*);
    HRESULT put_webkitBorderImageOutset(BSTR);
    HRESULT get_webkitBorderImageOutset(BSTR*);
    HRESULT put_webkitBorderImageRepeat(BSTR);
    HRESULT get_webkitBorderImageRepeat(BSTR*);
    HRESULT put_webkitBoxSizing(BSTR);
    HRESULT get_webkitBoxSizing(BSTR*);
    HRESULT put_webkitAnimationFillMode(BSTR);
    HRESULT get_webkitAnimationFillMode(BSTR*);
}
enum IID_IHTMLStyleEnabled = GUID(0x305104c2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleEnabled : IDispatch
{
    HRESULT msGetPropertyEnabled(BSTR, short*);
    HRESULT msPutPropertyEnabled(BSTR, short);
}
enum IID_DispHTMLCSSStyleDeclaration = GUID(0x3059009a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLCSSStyleDeclaration : IDispatch
{
}
enum IID_IHTMLStyle = GUID(0x3050f25e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyle : IDispatch
{
    HRESULT put_fontFamily(BSTR);
    HRESULT get_fontFamily(BSTR*);
    HRESULT put_fontStyle(BSTR);
    HRESULT get_fontStyle(BSTR*);
    HRESULT put_fontVariant(BSTR);
    HRESULT get_fontVariant(BSTR*);
    HRESULT put_fontWeight(BSTR);
    HRESULT get_fontWeight(BSTR*);
    HRESULT put_fontSize(VARIANT);
    HRESULT get_fontSize(VARIANT*);
    HRESULT put_font(BSTR);
    HRESULT get_font(BSTR*);
    HRESULT put_color(VARIANT);
    HRESULT get_color(VARIANT*);
    HRESULT put_background(BSTR);
    HRESULT get_background(BSTR*);
    HRESULT put_backgroundColor(VARIANT);
    HRESULT get_backgroundColor(VARIANT*);
    HRESULT put_backgroundImage(BSTR);
    HRESULT get_backgroundImage(BSTR*);
    HRESULT put_backgroundRepeat(BSTR);
    HRESULT get_backgroundRepeat(BSTR*);
    HRESULT put_backgroundAttachment(BSTR);
    HRESULT get_backgroundAttachment(BSTR*);
    HRESULT put_backgroundPosition(BSTR);
    HRESULT get_backgroundPosition(BSTR*);
    HRESULT put_backgroundPositionX(VARIANT);
    HRESULT get_backgroundPositionX(VARIANT*);
    HRESULT put_backgroundPositionY(VARIANT);
    HRESULT get_backgroundPositionY(VARIANT*);
    HRESULT put_wordSpacing(VARIANT);
    HRESULT get_wordSpacing(VARIANT*);
    HRESULT put_letterSpacing(VARIANT);
    HRESULT get_letterSpacing(VARIANT*);
    HRESULT put_textDecoration(BSTR);
    HRESULT get_textDecoration(BSTR*);
    HRESULT put_textDecorationNone(short);
    HRESULT get_textDecorationNone(short*);
    HRESULT put_textDecorationUnderline(short);
    HRESULT get_textDecorationUnderline(short*);
    HRESULT put_textDecorationOverline(short);
    HRESULT get_textDecorationOverline(short*);
    HRESULT put_textDecorationLineThrough(short);
    HRESULT get_textDecorationLineThrough(short*);
    HRESULT put_textDecorationBlink(short);
    HRESULT get_textDecorationBlink(short*);
    HRESULT put_verticalAlign(VARIANT);
    HRESULT get_verticalAlign(VARIANT*);
    HRESULT put_textTransform(BSTR);
    HRESULT get_textTransform(BSTR*);
    HRESULT put_textAlign(BSTR);
    HRESULT get_textAlign(BSTR*);
    HRESULT put_textIndent(VARIANT);
    HRESULT get_textIndent(VARIANT*);
    HRESULT put_lineHeight(VARIANT);
    HRESULT get_lineHeight(VARIANT*);
    HRESULT put_marginTop(VARIANT);
    HRESULT get_marginTop(VARIANT*);
    HRESULT put_marginRight(VARIANT);
    HRESULT get_marginRight(VARIANT*);
    HRESULT put_marginBottom(VARIANT);
    HRESULT get_marginBottom(VARIANT*);
    HRESULT put_marginLeft(VARIANT);
    HRESULT get_marginLeft(VARIANT*);
    HRESULT put_margin(BSTR);
    HRESULT get_margin(BSTR*);
    HRESULT put_paddingTop(VARIANT);
    HRESULT get_paddingTop(VARIANT*);
    HRESULT put_paddingRight(VARIANT);
    HRESULT get_paddingRight(VARIANT*);
    HRESULT put_paddingBottom(VARIANT);
    HRESULT get_paddingBottom(VARIANT*);
    HRESULT put_paddingLeft(VARIANT);
    HRESULT get_paddingLeft(VARIANT*);
    HRESULT put_padding(BSTR);
    HRESULT get_padding(BSTR*);
    HRESULT put_border(BSTR);
    HRESULT get_border(BSTR*);
    HRESULT put_borderTop(BSTR);
    HRESULT get_borderTop(BSTR*);
    HRESULT put_borderRight(BSTR);
    HRESULT get_borderRight(BSTR*);
    HRESULT put_borderBottom(BSTR);
    HRESULT get_borderBottom(BSTR*);
    HRESULT put_borderLeft(BSTR);
    HRESULT get_borderLeft(BSTR*);
    HRESULT put_borderColor(BSTR);
    HRESULT get_borderColor(BSTR*);
    HRESULT put_borderTopColor(VARIANT);
    HRESULT get_borderTopColor(VARIANT*);
    HRESULT put_borderRightColor(VARIANT);
    HRESULT get_borderRightColor(VARIANT*);
    HRESULT put_borderBottomColor(VARIANT);
    HRESULT get_borderBottomColor(VARIANT*);
    HRESULT put_borderLeftColor(VARIANT);
    HRESULT get_borderLeftColor(VARIANT*);
    HRESULT put_borderWidth(BSTR);
    HRESULT get_borderWidth(BSTR*);
    HRESULT put_borderTopWidth(VARIANT);
    HRESULT get_borderTopWidth(VARIANT*);
    HRESULT put_borderRightWidth(VARIANT);
    HRESULT get_borderRightWidth(VARIANT*);
    HRESULT put_borderBottomWidth(VARIANT);
    HRESULT get_borderBottomWidth(VARIANT*);
    HRESULT put_borderLeftWidth(VARIANT);
    HRESULT get_borderLeftWidth(VARIANT*);
    HRESULT put_borderStyle(BSTR);
    HRESULT get_borderStyle(BSTR*);
    HRESULT put_borderTopStyle(BSTR);
    HRESULT get_borderTopStyle(BSTR*);
    HRESULT put_borderRightStyle(BSTR);
    HRESULT get_borderRightStyle(BSTR*);
    HRESULT put_borderBottomStyle(BSTR);
    HRESULT get_borderBottomStyle(BSTR*);
    HRESULT put_borderLeftStyle(BSTR);
    HRESULT get_borderLeftStyle(BSTR*);
    HRESULT put_width(VARIANT);
    HRESULT get_width(VARIANT*);
    HRESULT put_height(VARIANT);
    HRESULT get_height(VARIANT*);
    HRESULT put_styleFloat(BSTR);
    HRESULT get_styleFloat(BSTR*);
    HRESULT put_clear(BSTR);
    HRESULT get_clear(BSTR*);
    HRESULT put_display(BSTR);
    HRESULT get_display(BSTR*);
    HRESULT put_visibility(BSTR);
    HRESULT get_visibility(BSTR*);
    HRESULT put_listStyleType(BSTR);
    HRESULT get_listStyleType(BSTR*);
    HRESULT put_listStylePosition(BSTR);
    HRESULT get_listStylePosition(BSTR*);
    HRESULT put_listStyleImage(BSTR);
    HRESULT get_listStyleImage(BSTR*);
    HRESULT put_listStyle(BSTR);
    HRESULT get_listStyle(BSTR*);
    HRESULT put_whiteSpace(BSTR);
    HRESULT get_whiteSpace(BSTR*);
    HRESULT put_top(VARIANT);
    HRESULT get_top(VARIANT*);
    HRESULT put_left(VARIANT);
    HRESULT get_left(VARIANT*);
    HRESULT get_position(BSTR*);
    HRESULT put_zIndex(VARIANT);
    HRESULT get_zIndex(VARIANT*);
    HRESULT put_overflow(BSTR);
    HRESULT get_overflow(BSTR*);
    HRESULT put_pageBreakBefore(BSTR);
    HRESULT get_pageBreakBefore(BSTR*);
    HRESULT put_pageBreakAfter(BSTR);
    HRESULT get_pageBreakAfter(BSTR*);
    HRESULT put_cssText(BSTR);
    HRESULT get_cssText(BSTR*);
    HRESULT put_pixelTop(int);
    HRESULT get_pixelTop(int*);
    HRESULT put_pixelLeft(int);
    HRESULT get_pixelLeft(int*);
    HRESULT put_pixelWidth(int);
    HRESULT get_pixelWidth(int*);
    HRESULT put_pixelHeight(int);
    HRESULT get_pixelHeight(int*);
    HRESULT put_posTop(float);
    HRESULT get_posTop(float*);
    HRESULT put_posLeft(float);
    HRESULT get_posLeft(float*);
    HRESULT put_posWidth(float);
    HRESULT get_posWidth(float*);
    HRESULT put_posHeight(float);
    HRESULT get_posHeight(float*);
    HRESULT put_cursor(BSTR);
    HRESULT get_cursor(BSTR*);
    HRESULT put_clip(BSTR);
    HRESULT get_clip(BSTR*);
    HRESULT put_filter(BSTR);
    HRESULT get_filter(BSTR*);
    HRESULT setAttribute(BSTR, VARIANT, int);
    HRESULT getAttribute(BSTR, int, VARIANT*);
    HRESULT removeAttribute(BSTR, int, short*);
    HRESULT toString(BSTR*);
}
enum IID_IHTMLStyle2 = GUID(0x3050f4a2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyle2 : IDispatch
{
    HRESULT put_tableLayout(BSTR);
    HRESULT get_tableLayout(BSTR*);
    HRESULT put_borderCollapse(BSTR);
    HRESULT get_borderCollapse(BSTR*);
    HRESULT put_direction(BSTR);
    HRESULT get_direction(BSTR*);
    HRESULT put_behavior(BSTR);
    HRESULT get_behavior(BSTR*);
    HRESULT setExpression(BSTR, BSTR, BSTR);
    HRESULT getExpression(BSTR, VARIANT*);
    HRESULT removeExpression(BSTR, short*);
    HRESULT put_position(BSTR);
    HRESULT get_position(BSTR*);
    HRESULT put_unicodeBidi(BSTR);
    HRESULT get_unicodeBidi(BSTR*);
    HRESULT put_bottom(VARIANT);
    HRESULT get_bottom(VARIANT*);
    HRESULT put_right(VARIANT);
    HRESULT get_right(VARIANT*);
    HRESULT put_pixelBottom(int);
    HRESULT get_pixelBottom(int*);
    HRESULT put_pixelRight(int);
    HRESULT get_pixelRight(int*);
    HRESULT put_posBottom(float);
    HRESULT get_posBottom(float*);
    HRESULT put_posRight(float);
    HRESULT get_posRight(float*);
    HRESULT put_imeMode(BSTR);
    HRESULT get_imeMode(BSTR*);
    HRESULT put_rubyAlign(BSTR);
    HRESULT get_rubyAlign(BSTR*);
    HRESULT put_rubyPosition(BSTR);
    HRESULT get_rubyPosition(BSTR*);
    HRESULT put_rubyOverhang(BSTR);
    HRESULT get_rubyOverhang(BSTR*);
    HRESULT put_layoutGridChar(VARIANT);
    HRESULT get_layoutGridChar(VARIANT*);
    HRESULT put_layoutGridLine(VARIANT);
    HRESULT get_layoutGridLine(VARIANT*);
    HRESULT put_layoutGridMode(BSTR);
    HRESULT get_layoutGridMode(BSTR*);
    HRESULT put_layoutGridType(BSTR);
    HRESULT get_layoutGridType(BSTR*);
    HRESULT put_layoutGrid(BSTR);
    HRESULT get_layoutGrid(BSTR*);
    HRESULT put_wordBreak(BSTR);
    HRESULT get_wordBreak(BSTR*);
    HRESULT put_lineBreak(BSTR);
    HRESULT get_lineBreak(BSTR*);
    HRESULT put_textJustify(BSTR);
    HRESULT get_textJustify(BSTR*);
    HRESULT put_textJustifyTrim(BSTR);
    HRESULT get_textJustifyTrim(BSTR*);
    HRESULT put_textKashida(VARIANT);
    HRESULT get_textKashida(VARIANT*);
    HRESULT put_textAutospace(BSTR);
    HRESULT get_textAutospace(BSTR*);
    HRESULT put_overflowX(BSTR);
    HRESULT get_overflowX(BSTR*);
    HRESULT put_overflowY(BSTR);
    HRESULT get_overflowY(BSTR*);
    HRESULT put_accelerator(BSTR);
    HRESULT get_accelerator(BSTR*);
}
enum IID_IHTMLStyle3 = GUID(0x3050f656, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyle3 : IDispatch
{
    HRESULT put_layoutFlow(BSTR);
    HRESULT get_layoutFlow(BSTR*);
    HRESULT put_zoom(VARIANT);
    HRESULT get_zoom(VARIANT*);
    HRESULT put_wordWrap(BSTR);
    HRESULT get_wordWrap(BSTR*);
    HRESULT put_textUnderlinePosition(BSTR);
    HRESULT get_textUnderlinePosition(BSTR*);
    HRESULT put_scrollbarBaseColor(VARIANT);
    HRESULT get_scrollbarBaseColor(VARIANT*);
    HRESULT put_scrollbarFaceColor(VARIANT);
    HRESULT get_scrollbarFaceColor(VARIANT*);
    HRESULT put_scrollbar3dLightColor(VARIANT);
    HRESULT get_scrollbar3dLightColor(VARIANT*);
    HRESULT put_scrollbarShadowColor(VARIANT);
    HRESULT get_scrollbarShadowColor(VARIANT*);
    HRESULT put_scrollbarHighlightColor(VARIANT);
    HRESULT get_scrollbarHighlightColor(VARIANT*);
    HRESULT put_scrollbarDarkShadowColor(VARIANT);
    HRESULT get_scrollbarDarkShadowColor(VARIANT*);
    HRESULT put_scrollbarArrowColor(VARIANT);
    HRESULT get_scrollbarArrowColor(VARIANT*);
    HRESULT put_scrollbarTrackColor(VARIANT);
    HRESULT get_scrollbarTrackColor(VARIANT*);
    HRESULT put_writingMode(BSTR);
    HRESULT get_writingMode(BSTR*);
    HRESULT put_textAlignLast(BSTR);
    HRESULT get_textAlignLast(BSTR*);
    HRESULT put_textKashidaSpace(VARIANT);
    HRESULT get_textKashidaSpace(VARIANT*);
}
enum IID_IHTMLStyle4 = GUID(0x3050f816, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyle4 : IDispatch
{
    HRESULT put_textOverflow(BSTR);
    HRESULT get_textOverflow(BSTR*);
    HRESULT put_minHeight(VARIANT);
    HRESULT get_minHeight(VARIANT*);
}
enum IID_IHTMLStyle5 = GUID(0x3050f33a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyle5 : IDispatch
{
    HRESULT put_msInterpolationMode(BSTR);
    HRESULT get_msInterpolationMode(BSTR*);
    HRESULT put_maxHeight(VARIANT);
    HRESULT get_maxHeight(VARIANT*);
    HRESULT put_minWidth(VARIANT);
    HRESULT get_minWidth(VARIANT*);
    HRESULT put_maxWidth(VARIANT);
    HRESULT get_maxWidth(VARIANT*);
}
enum IID_IHTMLStyle6 = GUID(0x30510480, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyle6 : IDispatch
{
    HRESULT put_content(BSTR);
    HRESULT get_content(BSTR*);
    HRESULT put_captionSide(BSTR);
    HRESULT get_captionSide(BSTR*);
    HRESULT put_counterIncrement(BSTR);
    HRESULT get_counterIncrement(BSTR*);
    HRESULT put_counterReset(BSTR);
    HRESULT get_counterReset(BSTR*);
    HRESULT put_outline(BSTR);
    HRESULT get_outline(BSTR*);
    HRESULT put_outlineWidth(VARIANT);
    HRESULT get_outlineWidth(VARIANT*);
    HRESULT put_outlineStyle(BSTR);
    HRESULT get_outlineStyle(BSTR*);
    HRESULT put_outlineColor(VARIANT);
    HRESULT get_outlineColor(VARIANT*);
    HRESULT put_boxSizing(BSTR);
    HRESULT get_boxSizing(BSTR*);
    HRESULT put_borderSpacing(BSTR);
    HRESULT get_borderSpacing(BSTR*);
    HRESULT put_orphans(VARIANT);
    HRESULT get_orphans(VARIANT*);
    HRESULT put_widows(VARIANT);
    HRESULT get_widows(VARIANT*);
    HRESULT put_pageBreakInside(BSTR);
    HRESULT get_pageBreakInside(BSTR*);
    HRESULT put_emptyCells(BSTR);
    HRESULT get_emptyCells(BSTR*);
    HRESULT put_msBlockProgression(BSTR);
    HRESULT get_msBlockProgression(BSTR*);
    HRESULT put_quotes(BSTR);
    HRESULT get_quotes(BSTR*);
}
enum IID_IHTMLRuleStyle = GUID(0x3050f3cf, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLRuleStyle : IDispatch
{
    HRESULT put_fontFamily(BSTR);
    HRESULT get_fontFamily(BSTR*);
    HRESULT put_fontStyle(BSTR);
    HRESULT get_fontStyle(BSTR*);
    HRESULT put_fontVariant(BSTR);
    HRESULT get_fontVariant(BSTR*);
    HRESULT put_fontWeight(BSTR);
    HRESULT get_fontWeight(BSTR*);
    HRESULT put_fontSize(VARIANT);
    HRESULT get_fontSize(VARIANT*);
    HRESULT put_font(BSTR);
    HRESULT get_font(BSTR*);
    HRESULT put_color(VARIANT);
    HRESULT get_color(VARIANT*);
    HRESULT put_background(BSTR);
    HRESULT get_background(BSTR*);
    HRESULT put_backgroundColor(VARIANT);
    HRESULT get_backgroundColor(VARIANT*);
    HRESULT put_backgroundImage(BSTR);
    HRESULT get_backgroundImage(BSTR*);
    HRESULT put_backgroundRepeat(BSTR);
    HRESULT get_backgroundRepeat(BSTR*);
    HRESULT put_backgroundAttachment(BSTR);
    HRESULT get_backgroundAttachment(BSTR*);
    HRESULT put_backgroundPosition(BSTR);
    HRESULT get_backgroundPosition(BSTR*);
    HRESULT put_backgroundPositionX(VARIANT);
    HRESULT get_backgroundPositionX(VARIANT*);
    HRESULT put_backgroundPositionY(VARIANT);
    HRESULT get_backgroundPositionY(VARIANT*);
    HRESULT put_wordSpacing(VARIANT);
    HRESULT get_wordSpacing(VARIANT*);
    HRESULT put_letterSpacing(VARIANT);
    HRESULT get_letterSpacing(VARIANT*);
    HRESULT put_textDecoration(BSTR);
    HRESULT get_textDecoration(BSTR*);
    HRESULT put_textDecorationNone(short);
    HRESULT get_textDecorationNone(short*);
    HRESULT put_textDecorationUnderline(short);
    HRESULT get_textDecorationUnderline(short*);
    HRESULT put_textDecorationOverline(short);
    HRESULT get_textDecorationOverline(short*);
    HRESULT put_textDecorationLineThrough(short);
    HRESULT get_textDecorationLineThrough(short*);
    HRESULT put_textDecorationBlink(short);
    HRESULT get_textDecorationBlink(short*);
    HRESULT put_verticalAlign(VARIANT);
    HRESULT get_verticalAlign(VARIANT*);
    HRESULT put_textTransform(BSTR);
    HRESULT get_textTransform(BSTR*);
    HRESULT put_textAlign(BSTR);
    HRESULT get_textAlign(BSTR*);
    HRESULT put_textIndent(VARIANT);
    HRESULT get_textIndent(VARIANT*);
    HRESULT put_lineHeight(VARIANT);
    HRESULT get_lineHeight(VARIANT*);
    HRESULT put_marginTop(VARIANT);
    HRESULT get_marginTop(VARIANT*);
    HRESULT put_marginRight(VARIANT);
    HRESULT get_marginRight(VARIANT*);
    HRESULT put_marginBottom(VARIANT);
    HRESULT get_marginBottom(VARIANT*);
    HRESULT put_marginLeft(VARIANT);
    HRESULT get_marginLeft(VARIANT*);
    HRESULT put_margin(BSTR);
    HRESULT get_margin(BSTR*);
    HRESULT put_paddingTop(VARIANT);
    HRESULT get_paddingTop(VARIANT*);
    HRESULT put_paddingRight(VARIANT);
    HRESULT get_paddingRight(VARIANT*);
    HRESULT put_paddingBottom(VARIANT);
    HRESULT get_paddingBottom(VARIANT*);
    HRESULT put_paddingLeft(VARIANT);
    HRESULT get_paddingLeft(VARIANT*);
    HRESULT put_padding(BSTR);
    HRESULT get_padding(BSTR*);
    HRESULT put_border(BSTR);
    HRESULT get_border(BSTR*);
    HRESULT put_borderTop(BSTR);
    HRESULT get_borderTop(BSTR*);
    HRESULT put_borderRight(BSTR);
    HRESULT get_borderRight(BSTR*);
    HRESULT put_borderBottom(BSTR);
    HRESULT get_borderBottom(BSTR*);
    HRESULT put_borderLeft(BSTR);
    HRESULT get_borderLeft(BSTR*);
    HRESULT put_borderColor(BSTR);
    HRESULT get_borderColor(BSTR*);
    HRESULT put_borderTopColor(VARIANT);
    HRESULT get_borderTopColor(VARIANT*);
    HRESULT put_borderRightColor(VARIANT);
    HRESULT get_borderRightColor(VARIANT*);
    HRESULT put_borderBottomColor(VARIANT);
    HRESULT get_borderBottomColor(VARIANT*);
    HRESULT put_borderLeftColor(VARIANT);
    HRESULT get_borderLeftColor(VARIANT*);
    HRESULT put_borderWidth(BSTR);
    HRESULT get_borderWidth(BSTR*);
    HRESULT put_borderTopWidth(VARIANT);
    HRESULT get_borderTopWidth(VARIANT*);
    HRESULT put_borderRightWidth(VARIANT);
    HRESULT get_borderRightWidth(VARIANT*);
    HRESULT put_borderBottomWidth(VARIANT);
    HRESULT get_borderBottomWidth(VARIANT*);
    HRESULT put_borderLeftWidth(VARIANT);
    HRESULT get_borderLeftWidth(VARIANT*);
    HRESULT put_borderStyle(BSTR);
    HRESULT get_borderStyle(BSTR*);
    HRESULT put_borderTopStyle(BSTR);
    HRESULT get_borderTopStyle(BSTR*);
    HRESULT put_borderRightStyle(BSTR);
    HRESULT get_borderRightStyle(BSTR*);
    HRESULT put_borderBottomStyle(BSTR);
    HRESULT get_borderBottomStyle(BSTR*);
    HRESULT put_borderLeftStyle(BSTR);
    HRESULT get_borderLeftStyle(BSTR*);
    HRESULT put_width(VARIANT);
    HRESULT get_width(VARIANT*);
    HRESULT put_height(VARIANT);
    HRESULT get_height(VARIANT*);
    HRESULT put_styleFloat(BSTR);
    HRESULT get_styleFloat(BSTR*);
    HRESULT put_clear(BSTR);
    HRESULT get_clear(BSTR*);
    HRESULT put_display(BSTR);
    HRESULT get_display(BSTR*);
    HRESULT put_visibility(BSTR);
    HRESULT get_visibility(BSTR*);
    HRESULT put_listStyleType(BSTR);
    HRESULT get_listStyleType(BSTR*);
    HRESULT put_listStylePosition(BSTR);
    HRESULT get_listStylePosition(BSTR*);
    HRESULT put_listStyleImage(BSTR);
    HRESULT get_listStyleImage(BSTR*);
    HRESULT put_listStyle(BSTR);
    HRESULT get_listStyle(BSTR*);
    HRESULT put_whiteSpace(BSTR);
    HRESULT get_whiteSpace(BSTR*);
    HRESULT put_top(VARIANT);
    HRESULT get_top(VARIANT*);
    HRESULT put_left(VARIANT);
    HRESULT get_left(VARIANT*);
    HRESULT get_position(BSTR*);
    HRESULT put_zIndex(VARIANT);
    HRESULT get_zIndex(VARIANT*);
    HRESULT put_overflow(BSTR);
    HRESULT get_overflow(BSTR*);
    HRESULT put_pageBreakBefore(BSTR);
    HRESULT get_pageBreakBefore(BSTR*);
    HRESULT put_pageBreakAfter(BSTR);
    HRESULT get_pageBreakAfter(BSTR*);
    HRESULT put_cssText(BSTR);
    HRESULT get_cssText(BSTR*);
    HRESULT put_cursor(BSTR);
    HRESULT get_cursor(BSTR*);
    HRESULT put_clip(BSTR);
    HRESULT get_clip(BSTR*);
    HRESULT put_filter(BSTR);
    HRESULT get_filter(BSTR*);
    HRESULT setAttribute(BSTR, VARIANT, int);
    HRESULT getAttribute(BSTR, int, VARIANT*);
    HRESULT removeAttribute(BSTR, int, short*);
}
enum IID_IHTMLRuleStyle2 = GUID(0x3050f4ac, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLRuleStyle2 : IDispatch
{
    HRESULT put_tableLayout(BSTR);
    HRESULT get_tableLayout(BSTR*);
    HRESULT put_borderCollapse(BSTR);
    HRESULT get_borderCollapse(BSTR*);
    HRESULT put_direction(BSTR);
    HRESULT get_direction(BSTR*);
    HRESULT put_behavior(BSTR);
    HRESULT get_behavior(BSTR*);
    HRESULT put_position(BSTR);
    HRESULT get_position(BSTR*);
    HRESULT put_unicodeBidi(BSTR);
    HRESULT get_unicodeBidi(BSTR*);
    HRESULT put_bottom(VARIANT);
    HRESULT get_bottom(VARIANT*);
    HRESULT put_right(VARIANT);
    HRESULT get_right(VARIANT*);
    HRESULT put_pixelBottom(int);
    HRESULT get_pixelBottom(int*);
    HRESULT put_pixelRight(int);
    HRESULT get_pixelRight(int*);
    HRESULT put_posBottom(float);
    HRESULT get_posBottom(float*);
    HRESULT put_posRight(float);
    HRESULT get_posRight(float*);
    HRESULT put_imeMode(BSTR);
    HRESULT get_imeMode(BSTR*);
    HRESULT put_rubyAlign(BSTR);
    HRESULT get_rubyAlign(BSTR*);
    HRESULT put_rubyPosition(BSTR);
    HRESULT get_rubyPosition(BSTR*);
    HRESULT put_rubyOverhang(BSTR);
    HRESULT get_rubyOverhang(BSTR*);
    HRESULT put_layoutGridChar(VARIANT);
    HRESULT get_layoutGridChar(VARIANT*);
    HRESULT put_layoutGridLine(VARIANT);
    HRESULT get_layoutGridLine(VARIANT*);
    HRESULT put_layoutGridMode(BSTR);
    HRESULT get_layoutGridMode(BSTR*);
    HRESULT put_layoutGridType(BSTR);
    HRESULT get_layoutGridType(BSTR*);
    HRESULT put_layoutGrid(BSTR);
    HRESULT get_layoutGrid(BSTR*);
    HRESULT put_textAutospace(BSTR);
    HRESULT get_textAutospace(BSTR*);
    HRESULT put_wordBreak(BSTR);
    HRESULT get_wordBreak(BSTR*);
    HRESULT put_lineBreak(BSTR);
    HRESULT get_lineBreak(BSTR*);
    HRESULT put_textJustify(BSTR);
    HRESULT get_textJustify(BSTR*);
    HRESULT put_textJustifyTrim(BSTR);
    HRESULT get_textJustifyTrim(BSTR*);
    HRESULT put_textKashida(VARIANT);
    HRESULT get_textKashida(VARIANT*);
    HRESULT put_overflowX(BSTR);
    HRESULT get_overflowX(BSTR*);
    HRESULT put_overflowY(BSTR);
    HRESULT get_overflowY(BSTR*);
    HRESULT put_accelerator(BSTR);
    HRESULT get_accelerator(BSTR*);
}
enum IID_IHTMLRuleStyle3 = GUID(0x3050f657, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLRuleStyle3 : IDispatch
{
    HRESULT put_layoutFlow(BSTR);
    HRESULT get_layoutFlow(BSTR*);
    HRESULT put_zoom(VARIANT);
    HRESULT get_zoom(VARIANT*);
    HRESULT put_wordWrap(BSTR);
    HRESULT get_wordWrap(BSTR*);
    HRESULT put_textUnderlinePosition(BSTR);
    HRESULT get_textUnderlinePosition(BSTR*);
    HRESULT put_scrollbarBaseColor(VARIANT);
    HRESULT get_scrollbarBaseColor(VARIANT*);
    HRESULT put_scrollbarFaceColor(VARIANT);
    HRESULT get_scrollbarFaceColor(VARIANT*);
    HRESULT put_scrollbar3dLightColor(VARIANT);
    HRESULT get_scrollbar3dLightColor(VARIANT*);
    HRESULT put_scrollbarShadowColor(VARIANT);
    HRESULT get_scrollbarShadowColor(VARIANT*);
    HRESULT put_scrollbarHighlightColor(VARIANT);
    HRESULT get_scrollbarHighlightColor(VARIANT*);
    HRESULT put_scrollbarDarkShadowColor(VARIANT);
    HRESULT get_scrollbarDarkShadowColor(VARIANT*);
    HRESULT put_scrollbarArrowColor(VARIANT);
    HRESULT get_scrollbarArrowColor(VARIANT*);
    HRESULT put_scrollbarTrackColor(VARIANT);
    HRESULT get_scrollbarTrackColor(VARIANT*);
    HRESULT put_writingMode(BSTR);
    HRESULT get_writingMode(BSTR*);
    HRESULT put_textAlignLast(BSTR);
    HRESULT get_textAlignLast(BSTR*);
    HRESULT put_textKashidaSpace(VARIANT);
    HRESULT get_textKashidaSpace(VARIANT*);
}
enum IID_IHTMLRuleStyle4 = GUID(0x3050f817, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLRuleStyle4 : IDispatch
{
    HRESULT put_textOverflow(BSTR);
    HRESULT get_textOverflow(BSTR*);
    HRESULT put_minHeight(VARIANT);
    HRESULT get_minHeight(VARIANT*);
}
enum IID_IHTMLRuleStyle5 = GUID(0x3050f335, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLRuleStyle5 : IDispatch
{
    HRESULT put_msInterpolationMode(BSTR);
    HRESULT get_msInterpolationMode(BSTR*);
    HRESULT put_maxHeight(VARIANT);
    HRESULT get_maxHeight(VARIANT*);
    HRESULT put_minWidth(VARIANT);
    HRESULT get_minWidth(VARIANT*);
    HRESULT put_maxWidth(VARIANT);
    HRESULT get_maxWidth(VARIANT*);
}
enum IID_IHTMLRuleStyle6 = GUID(0x30510471, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLRuleStyle6 : IDispatch
{
    HRESULT put_content(BSTR);
    HRESULT get_content(BSTR*);
    HRESULT put_captionSide(BSTR);
    HRESULT get_captionSide(BSTR*);
    HRESULT put_counterIncrement(BSTR);
    HRESULT get_counterIncrement(BSTR*);
    HRESULT put_counterReset(BSTR);
    HRESULT get_counterReset(BSTR*);
    HRESULT put_outline(BSTR);
    HRESULT get_outline(BSTR*);
    HRESULT put_outlineWidth(VARIANT);
    HRESULT get_outlineWidth(VARIANT*);
    HRESULT put_outlineStyle(BSTR);
    HRESULT get_outlineStyle(BSTR*);
    HRESULT put_outlineColor(VARIANT);
    HRESULT get_outlineColor(VARIANT*);
    HRESULT put_boxSizing(BSTR);
    HRESULT get_boxSizing(BSTR*);
    HRESULT put_borderSpacing(BSTR);
    HRESULT get_borderSpacing(BSTR*);
    HRESULT put_orphans(VARIANT);
    HRESULT get_orphans(VARIANT*);
    HRESULT put_widows(VARIANT);
    HRESULT get_widows(VARIANT*);
    HRESULT put_pageBreakInside(BSTR);
    HRESULT get_pageBreakInside(BSTR*);
    HRESULT put_emptyCells(BSTR);
    HRESULT get_emptyCells(BSTR*);
    HRESULT put_msBlockProgression(BSTR);
    HRESULT get_msBlockProgression(BSTR*);
    HRESULT put_quotes(BSTR);
    HRESULT get_quotes(BSTR*);
}
enum IID_DispHTMLStyle = GUID(0x3050f55a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLStyle : IDispatch
{
}
enum IID_DispHTMLRuleStyle = GUID(0x3050f55c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLRuleStyle : IDispatch
{
}
enum IID_IHTMLStyleSheetRulesCollection = GUID(0x3050f2e5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleSheetRulesCollection : IDispatch
{
    HRESULT get_length(int*);
    HRESULT item(int, IHTMLStyleSheetRule*);
}
enum IID_IHTMLStyleSheet = GUID(0x3050f2e3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleSheet : IDispatch
{
    HRESULT put_title(BSTR);
    HRESULT get_title(BSTR*);
    HRESULT get_parentStyleSheet(IHTMLStyleSheet*);
    HRESULT get_owningElement(IHTMLElement*);
    HRESULT put_disabled(short);
    HRESULT get_disabled(short*);
    HRESULT get_readOnly(short*);
    HRESULT get_imports(IHTMLStyleSheetsCollection*);
    HRESULT put_href(BSTR);
    HRESULT get_href(BSTR*);
    HRESULT get_type(BSTR*);
    HRESULT get_id(BSTR*);
    HRESULT addImport(BSTR, int, int*);
    HRESULT addRule(BSTR, BSTR, int, int*);
    HRESULT removeImport(int);
    HRESULT removeRule(int);
    HRESULT put_media(BSTR);
    HRESULT get_media(BSTR*);
    HRESULT put_cssText(BSTR);
    HRESULT get_cssText(BSTR*);
    HRESULT get_rules(IHTMLStyleSheetRulesCollection*);
}
enum IID_IHTMLCSSRule = GUID(0x305106e9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLCSSRule : IDispatch
{
    HRESULT get_type(ushort*);
    HRESULT put_cssText(BSTR);
    HRESULT get_cssText(BSTR*);
    HRESULT get_parentRule(IHTMLCSSRule*);
    HRESULT get_parentStyleSheet(IHTMLStyleSheet*);
}
enum IID_IHTMLCSSImportRule = GUID(0x305106ea, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLCSSImportRule : IDispatch
{
    HRESULT get_href(BSTR*);
    HRESULT put_media(VARIANT);
    HRESULT get_media(VARIANT*);
    HRESULT get_styleSheet(IHTMLStyleSheet*);
}
enum IID_IHTMLCSSMediaRule = GUID(0x305106eb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLCSSMediaRule : IDispatch
{
    HRESULT put_media(VARIANT);
    HRESULT get_media(VARIANT*);
    HRESULT get_cssRules(IHTMLStyleSheetRulesCollection*);
    HRESULT insertRule(BSTR, int, int*);
    HRESULT deleteRule(int);
}
enum IID_IHTMLCSSMediaList = GUID(0x30510731, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLCSSMediaList : IDispatch
{
    HRESULT put_mediaText(BSTR);
    HRESULT get_mediaText(BSTR*);
    HRESULT get_length(int*);
    HRESULT item(int, BSTR*);
    HRESULT appendMedium(BSTR);
    HRESULT deleteMedium(BSTR);
}
enum IID_IHTMLCSSNamespaceRule = GUID(0x305106ee, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLCSSNamespaceRule : IDispatch
{
    HRESULT get_namespaceURI(BSTR*);
    HRESULT get_prefix(BSTR*);
}
enum IID_IHTMLMSCSSKeyframeRule = GUID(0x3051080c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLMSCSSKeyframeRule : IDispatch
{
    HRESULT put_keyText(BSTR);
    HRESULT get_keyText(BSTR*);
    HRESULT get_style(IHTMLRuleStyle*);
}
enum IID_IHTMLMSCSSKeyframesRule = GUID(0x3051080d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLMSCSSKeyframesRule : IDispatch
{
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT get_cssRules(IHTMLStyleSheetRulesCollection*);
    HRESULT appendRule(BSTR);
    HRESULT deleteRule(BSTR);
    HRESULT findRule(BSTR, IHTMLMSCSSKeyframeRule*);
}
enum IID_DispHTMLCSSRule = GUID(0x3059007d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLCSSRule : IDispatch
{
}
enum IID_DispHTMLCSSImportRule = GUID(0x3059007e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLCSSImportRule : IDispatch
{
}
enum IID_DispHTMLCSSMediaRule = GUID(0x3059007f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLCSSMediaRule : IDispatch
{
}
enum IID_DispHTMLCSSMediaList = GUID(0x30590097, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLCSSMediaList : IDispatch
{
}
enum IID_DispHTMLCSSNamespaceRule = GUID(0x30590080, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLCSSNamespaceRule : IDispatch
{
}
enum IID_DispHTMLMSCSSKeyframeRule = GUID(0x305900de, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLMSCSSKeyframeRule : IDispatch
{
}
enum IID_DispHTMLMSCSSKeyframesRule = GUID(0x305900df, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLMSCSSKeyframesRule : IDispatch
{
}
enum IID_IHTMLRenderStyle = GUID(0x3050f6ae, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLRenderStyle : IDispatch
{
    HRESULT put_textLineThroughStyle(BSTR);
    HRESULT get_textLineThroughStyle(BSTR*);
    HRESULT put_textUnderlineStyle(BSTR);
    HRESULT get_textUnderlineStyle(BSTR*);
    HRESULT put_textEffect(BSTR);
    HRESULT get_textEffect(BSTR*);
    HRESULT put_textColor(VARIANT);
    HRESULT get_textColor(VARIANT*);
    HRESULT put_textBackgroundColor(VARIANT);
    HRESULT get_textBackgroundColor(VARIANT*);
    HRESULT put_textDecorationColor(VARIANT);
    HRESULT get_textDecorationColor(VARIANT*);
    HRESULT put_renderingPriority(int);
    HRESULT get_renderingPriority(int*);
    HRESULT put_defaultTextSelection(BSTR);
    HRESULT get_defaultTextSelection(BSTR*);
    HRESULT put_textDecoration(BSTR);
    HRESULT get_textDecoration(BSTR*);
}
enum IID_DispHTMLRenderStyle = GUID(0x3050f58b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLRenderStyle : IDispatch
{
}
enum IID_IHTMLCurrentStyle = GUID(0x3050f3db, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLCurrentStyle : IDispatch
{
    HRESULT get_position(BSTR*);
    HRESULT get_styleFloat(BSTR*);
    HRESULT get_color(VARIANT*);
    HRESULT get_backgroundColor(VARIANT*);
    HRESULT get_fontFamily(BSTR*);
    HRESULT get_fontStyle(BSTR*);
    HRESULT get_fontVariant(BSTR*);
    HRESULT get_fontWeight(VARIANT*);
    HRESULT get_fontSize(VARIANT*);
    HRESULT get_backgroundImage(BSTR*);
    HRESULT get_backgroundPositionX(VARIANT*);
    HRESULT get_backgroundPositionY(VARIANT*);
    HRESULT get_backgroundRepeat(BSTR*);
    HRESULT get_borderLeftColor(VARIANT*);
    HRESULT get_borderTopColor(VARIANT*);
    HRESULT get_borderRightColor(VARIANT*);
    HRESULT get_borderBottomColor(VARIANT*);
    HRESULT get_borderTopStyle(BSTR*);
    HRESULT get_borderRightStyle(BSTR*);
    HRESULT get_borderBottomStyle(BSTR*);
    HRESULT get_borderLeftStyle(BSTR*);
    HRESULT get_borderTopWidth(VARIANT*);
    HRESULT get_borderRightWidth(VARIANT*);
    HRESULT get_borderBottomWidth(VARIANT*);
    HRESULT get_borderLeftWidth(VARIANT*);
    HRESULT get_left(VARIANT*);
    HRESULT get_top(VARIANT*);
    HRESULT get_width(VARIANT*);
    HRESULT get_height(VARIANT*);
    HRESULT get_paddingLeft(VARIANT*);
    HRESULT get_paddingTop(VARIANT*);
    HRESULT get_paddingRight(VARIANT*);
    HRESULT get_paddingBottom(VARIANT*);
    HRESULT get_textAlign(BSTR*);
    HRESULT get_textDecoration(BSTR*);
    HRESULT get_display(BSTR*);
    HRESULT get_visibility(BSTR*);
    HRESULT get_zIndex(VARIANT*);
    HRESULT get_letterSpacing(VARIANT*);
    HRESULT get_lineHeight(VARIANT*);
    HRESULT get_textIndent(VARIANT*);
    HRESULT get_verticalAlign(VARIANT*);
    HRESULT get_backgroundAttachment(BSTR*);
    HRESULT get_marginTop(VARIANT*);
    HRESULT get_marginRight(VARIANT*);
    HRESULT get_marginBottom(VARIANT*);
    HRESULT get_marginLeft(VARIANT*);
    HRESULT get_clear(BSTR*);
    HRESULT get_listStyleType(BSTR*);
    HRESULT get_listStylePosition(BSTR*);
    HRESULT get_listStyleImage(BSTR*);
    HRESULT get_clipTop(VARIANT*);
    HRESULT get_clipRight(VARIANT*);
    HRESULT get_clipBottom(VARIANT*);
    HRESULT get_clipLeft(VARIANT*);
    HRESULT get_overflow(BSTR*);
    HRESULT get_pageBreakBefore(BSTR*);
    HRESULT get_pageBreakAfter(BSTR*);
    HRESULT get_cursor(BSTR*);
    HRESULT get_tableLayout(BSTR*);
    HRESULT get_borderCollapse(BSTR*);
    HRESULT get_direction(BSTR*);
    HRESULT get_behavior(BSTR*);
    HRESULT getAttribute(BSTR, int, VARIANT*);
    HRESULT get_unicodeBidi(BSTR*);
    HRESULT get_right(VARIANT*);
    HRESULT get_bottom(VARIANT*);
    HRESULT get_imeMode(BSTR*);
    HRESULT get_rubyAlign(BSTR*);
    HRESULT get_rubyPosition(BSTR*);
    HRESULT get_rubyOverhang(BSTR*);
    HRESULT get_textAutospace(BSTR*);
    HRESULT get_lineBreak(BSTR*);
    HRESULT get_wordBreak(BSTR*);
    HRESULT get_textJustify(BSTR*);
    HRESULT get_textJustifyTrim(BSTR*);
    HRESULT get_textKashida(VARIANT*);
    HRESULT get_blockDirection(BSTR*);
    HRESULT get_layoutGridChar(VARIANT*);
    HRESULT get_layoutGridLine(VARIANT*);
    HRESULT get_layoutGridMode(BSTR*);
    HRESULT get_layoutGridType(BSTR*);
    HRESULT get_borderStyle(BSTR*);
    HRESULT get_borderColor(BSTR*);
    HRESULT get_borderWidth(BSTR*);
    HRESULT get_padding(BSTR*);
    HRESULT get_margin(BSTR*);
    HRESULT get_accelerator(BSTR*);
    HRESULT get_overflowX(BSTR*);
    HRESULT get_overflowY(BSTR*);
    HRESULT get_textTransform(BSTR*);
}
enum IID_IHTMLCurrentStyle2 = GUID(0x3050f658, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLCurrentStyle2 : IDispatch
{
    HRESULT get_layoutFlow(BSTR*);
    HRESULT get_wordWrap(BSTR*);
    HRESULT get_textUnderlinePosition(BSTR*);
    HRESULT get_hasLayout(short*);
    HRESULT get_scrollbarBaseColor(VARIANT*);
    HRESULT get_scrollbarFaceColor(VARIANT*);
    HRESULT get_scrollbar3dLightColor(VARIANT*);
    HRESULT get_scrollbarShadowColor(VARIANT*);
    HRESULT get_scrollbarHighlightColor(VARIANT*);
    HRESULT get_scrollbarDarkShadowColor(VARIANT*);
    HRESULT get_scrollbarArrowColor(VARIANT*);
    HRESULT get_scrollbarTrackColor(VARIANT*);
    HRESULT get_writingMode(BSTR*);
    HRESULT get_zoom(VARIANT*);
    HRESULT get_filter(BSTR*);
    HRESULT get_textAlignLast(BSTR*);
    HRESULT get_textKashidaSpace(VARIANT*);
    HRESULT get_isBlock(short*);
}
enum IID_IHTMLCurrentStyle3 = GUID(0x3050f818, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLCurrentStyle3 : IDispatch
{
    HRESULT get_textOverflow(BSTR*);
    HRESULT get_minHeight(VARIANT*);
    HRESULT get_wordSpacing(VARIANT*);
    HRESULT get_whiteSpace(BSTR*);
}
enum IID_IHTMLCurrentStyle4 = GUID(0x3050f33b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLCurrentStyle4 : IDispatch
{
    HRESULT get_msInterpolationMode(BSTR*);
    HRESULT get_maxHeight(VARIANT*);
    HRESULT get_minWidth(VARIANT*);
    HRESULT get_maxWidth(VARIANT*);
}
enum IID_IHTMLCurrentStyle5 = GUID(0x30510481, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLCurrentStyle5 : IDispatch
{
    HRESULT get_captionSide(BSTR*);
    HRESULT get_outline(BSTR*);
    HRESULT get_outlineWidth(VARIANT*);
    HRESULT get_outlineStyle(BSTR*);
    HRESULT get_outlineColor(VARIANT*);
    HRESULT get_boxSizing(BSTR*);
    HRESULT get_borderSpacing(BSTR*);
    HRESULT get_orphans(VARIANT*);
    HRESULT get_widows(VARIANT*);
    HRESULT get_pageBreakInside(BSTR*);
    HRESULT get_emptyCells(BSTR*);
    HRESULT get_msBlockProgression(BSTR*);
    HRESULT get_quotes(BSTR*);
}
enum IID_DispHTMLCurrentStyle = GUID(0x3050f557, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLCurrentStyle : IDispatch
{
}
enum IID_IHTMLElement = GUID(0x3050f1ff, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLElement : IDispatch
{
    HRESULT setAttribute(BSTR, VARIANT, int);
    HRESULT getAttribute(BSTR, int, VARIANT*);
    HRESULT removeAttribute(BSTR, int, short*);
    HRESULT put_className(BSTR);
    HRESULT get_className(BSTR*);
    HRESULT put_id(BSTR);
    HRESULT get_id(BSTR*);
    HRESULT get_tagName(BSTR*);
    HRESULT get_parentElement(IHTMLElement*);
    HRESULT get_style(IHTMLStyle*);
    HRESULT put_onhelp(VARIANT);
    HRESULT get_onhelp(VARIANT*);
    HRESULT put_onclick(VARIANT);
    HRESULT get_onclick(VARIANT*);
    HRESULT put_ondblclick(VARIANT);
    HRESULT get_ondblclick(VARIANT*);
    HRESULT put_onkeydown(VARIANT);
    HRESULT get_onkeydown(VARIANT*);
    HRESULT put_onkeyup(VARIANT);
    HRESULT get_onkeyup(VARIANT*);
    HRESULT put_onkeypress(VARIANT);
    HRESULT get_onkeypress(VARIANT*);
    HRESULT put_onmouseout(VARIANT);
    HRESULT get_onmouseout(VARIANT*);
    HRESULT put_onmouseover(VARIANT);
    HRESULT get_onmouseover(VARIANT*);
    HRESULT put_onmousemove(VARIANT);
    HRESULT get_onmousemove(VARIANT*);
    HRESULT put_onmousedown(VARIANT);
    HRESULT get_onmousedown(VARIANT*);
    HRESULT put_onmouseup(VARIANT);
    HRESULT get_onmouseup(VARIANT*);
    HRESULT get_document(IDispatch*);
    HRESULT put_title(BSTR);
    HRESULT get_title(BSTR*);
    HRESULT put_language(BSTR);
    HRESULT get_language(BSTR*);
    HRESULT put_onselectstart(VARIANT);
    HRESULT get_onselectstart(VARIANT*);
    HRESULT scrollIntoView(VARIANT);
    HRESULT contains(IHTMLElement, short*);
    HRESULT get_sourceIndex(int*);
    HRESULT get_recordNumber(VARIANT*);
    HRESULT put_lang(BSTR);
    HRESULT get_lang(BSTR*);
    HRESULT get_offsetLeft(int*);
    HRESULT get_offsetTop(int*);
    HRESULT get_offsetWidth(int*);
    HRESULT get_offsetHeight(int*);
    HRESULT get_offsetParent(IHTMLElement*);
    HRESULT put_innerHTML(BSTR);
    HRESULT get_innerHTML(BSTR*);
    HRESULT put_innerText(BSTR);
    HRESULT get_innerText(BSTR*);
    HRESULT put_outerHTML(BSTR);
    HRESULT get_outerHTML(BSTR*);
    HRESULT put_outerText(BSTR);
    HRESULT get_outerText(BSTR*);
    HRESULT insertAdjacentHTML(BSTR, BSTR);
    HRESULT insertAdjacentText(BSTR, BSTR);
    HRESULT get_parentTextEdit(IHTMLElement*);
    HRESULT get_isTextEdit(short*);
    HRESULT click();
    HRESULT get_filters(IHTMLFiltersCollection*);
    HRESULT put_ondragstart(VARIANT);
    HRESULT get_ondragstart(VARIANT*);
    HRESULT toString(BSTR*);
    HRESULT put_onbeforeupdate(VARIANT);
    HRESULT get_onbeforeupdate(VARIANT*);
    HRESULT put_onafterupdate(VARIANT);
    HRESULT get_onafterupdate(VARIANT*);
    HRESULT put_onerrorupdate(VARIANT);
    HRESULT get_onerrorupdate(VARIANT*);
    HRESULT put_onrowexit(VARIANT);
    HRESULT get_onrowexit(VARIANT*);
    HRESULT put_onrowenter(VARIANT);
    HRESULT get_onrowenter(VARIANT*);
    HRESULT put_ondatasetchanged(VARIANT);
    HRESULT get_ondatasetchanged(VARIANT*);
    HRESULT put_ondataavailable(VARIANT);
    HRESULT get_ondataavailable(VARIANT*);
    HRESULT put_ondatasetcomplete(VARIANT);
    HRESULT get_ondatasetcomplete(VARIANT*);
    HRESULT put_onfilterchange(VARIANT);
    HRESULT get_onfilterchange(VARIANT*);
    HRESULT get_children(IDispatch*);
    HRESULT get_all(IDispatch*);
}
enum IID_IHTMLRect = GUID(0x3050f4a3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLRect : IDispatch
{
    HRESULT put_left(int);
    HRESULT get_left(int*);
    HRESULT put_top(int);
    HRESULT get_top(int*);
    HRESULT put_right(int);
    HRESULT get_right(int*);
    HRESULT put_bottom(int);
    HRESULT get_bottom(int*);
}
enum IID_IHTMLRect2 = GUID(0x3051076c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLRect2 : IDispatch
{
    HRESULT get_width(float*);
    HRESULT get_height(float*);
}
enum IID_IHTMLRectCollection = GUID(0x3050f4a4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLRectCollection : IDispatch
{
    HRESULT get_length(int*);
    HRESULT get__newEnum(IUnknown*);
    HRESULT item(VARIANT*, VARIANT*);
}
enum IID_IHTMLElementCollection = GUID(0x3050f21f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLElementCollection : IDispatch
{
    HRESULT toString(BSTR*);
    HRESULT put_length(int);
    HRESULT get_length(int*);
    HRESULT get__newEnum(IUnknown*);
    HRESULT item(VARIANT, VARIANT, IDispatch*);
    HRESULT tags(VARIANT, IDispatch*);
}
enum IID_IHTMLElement2 = GUID(0x3050f434, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLElement2 : IDispatch
{
    HRESULT get_scopeName(BSTR*);
    HRESULT setCapture(short);
    HRESULT releaseCapture();
    HRESULT put_onlosecapture(VARIANT);
    HRESULT get_onlosecapture(VARIANT*);
    HRESULT componentFromPoint(int, int, BSTR*);
    HRESULT doScroll(VARIANT);
    HRESULT put_onscroll(VARIANT);
    HRESULT get_onscroll(VARIANT*);
    HRESULT put_ondrag(VARIANT);
    HRESULT get_ondrag(VARIANT*);
    HRESULT put_ondragend(VARIANT);
    HRESULT get_ondragend(VARIANT*);
    HRESULT put_ondragenter(VARIANT);
    HRESULT get_ondragenter(VARIANT*);
    HRESULT put_ondragover(VARIANT);
    HRESULT get_ondragover(VARIANT*);
    HRESULT put_ondragleave(VARIANT);
    HRESULT get_ondragleave(VARIANT*);
    HRESULT put_ondrop(VARIANT);
    HRESULT get_ondrop(VARIANT*);
    HRESULT put_onbeforecut(VARIANT);
    HRESULT get_onbeforecut(VARIANT*);
    HRESULT put_oncut(VARIANT);
    HRESULT get_oncut(VARIANT*);
    HRESULT put_onbeforecopy(VARIANT);
    HRESULT get_onbeforecopy(VARIANT*);
    HRESULT put_oncopy(VARIANT);
    HRESULT get_oncopy(VARIANT*);
    HRESULT put_onbeforepaste(VARIANT);
    HRESULT get_onbeforepaste(VARIANT*);
    HRESULT put_onpaste(VARIANT);
    HRESULT get_onpaste(VARIANT*);
    HRESULT get_currentStyle(IHTMLCurrentStyle*);
    HRESULT put_onpropertychange(VARIANT);
    HRESULT get_onpropertychange(VARIANT*);
    HRESULT getClientRects(IHTMLRectCollection*);
    HRESULT getBoundingClientRect(IHTMLRect*);
    HRESULT setExpression(BSTR, BSTR, BSTR);
    HRESULT getExpression(BSTR, VARIANT*);
    HRESULT removeExpression(BSTR, short*);
    HRESULT put_tabIndex(short);
    HRESULT get_tabIndex(short*);
    HRESULT focus();
    HRESULT put_accessKey(BSTR);
    HRESULT get_accessKey(BSTR*);
    HRESULT put_onblur(VARIANT);
    HRESULT get_onblur(VARIANT*);
    HRESULT put_onfocus(VARIANT);
    HRESULT get_onfocus(VARIANT*);
    HRESULT put_onresize(VARIANT);
    HRESULT get_onresize(VARIANT*);
    HRESULT blur();
    HRESULT addFilter(IUnknown);
    HRESULT removeFilter(IUnknown);
    HRESULT get_clientHeight(int*);
    HRESULT get_clientWidth(int*);
    HRESULT get_clientTop(int*);
    HRESULT get_clientLeft(int*);
    HRESULT attachEvent(BSTR, IDispatch, short*);
    HRESULT detachEvent(BSTR, IDispatch);
    HRESULT get_readyState(VARIANT*);
    HRESULT put_onreadystatechange(VARIANT);
    HRESULT get_onreadystatechange(VARIANT*);
    HRESULT put_onrowsdelete(VARIANT);
    HRESULT get_onrowsdelete(VARIANT*);
    HRESULT put_onrowsinserted(VARIANT);
    HRESULT get_onrowsinserted(VARIANT*);
    HRESULT put_oncellchange(VARIANT);
    HRESULT get_oncellchange(VARIANT*);
    HRESULT put_dir(BSTR);
    HRESULT get_dir(BSTR*);
    HRESULT createControlRange(IDispatch*);
    HRESULT get_scrollHeight(int*);
    HRESULT get_scrollWidth(int*);
    HRESULT put_scrollTop(int);
    HRESULT get_scrollTop(int*);
    HRESULT put_scrollLeft(int);
    HRESULT get_scrollLeft(int*);
    HRESULT clearAttributes();
    HRESULT mergeAttributes(IHTMLElement);
    HRESULT put_oncontextmenu(VARIANT);
    HRESULT get_oncontextmenu(VARIANT*);
    HRESULT insertAdjacentElement(BSTR, IHTMLElement, IHTMLElement*);
    HRESULT applyElement(IHTMLElement, BSTR, IHTMLElement*);
    HRESULT getAdjacentText(BSTR, BSTR*);
    HRESULT replaceAdjacentText(BSTR, BSTR, BSTR*);
    HRESULT get_canHaveChildren(short*);
    HRESULT addBehavior(BSTR, VARIANT*, int*);
    HRESULT removeBehavior(int, short*);
    HRESULT get_runtimeStyle(IHTMLStyle*);
    HRESULT get_behaviorUrns(IDispatch*);
    HRESULT put_tagUrn(BSTR);
    HRESULT get_tagUrn(BSTR*);
    HRESULT put_onbeforeeditfocus(VARIANT);
    HRESULT get_onbeforeeditfocus(VARIANT*);
    HRESULT get_readyStateValue(int*);
    HRESULT getElementsByTagName(BSTR, IHTMLElementCollection*);
}
enum IID_IHTMLAttributeCollection3 = GUID(0x30510469, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLAttributeCollection3 : IDispatch
{
    HRESULT getNamedItem(BSTR, IHTMLDOMAttribute*);
    HRESULT setNamedItem(IHTMLDOMAttribute, IHTMLDOMAttribute*);
    HRESULT removeNamedItem(BSTR, IHTMLDOMAttribute*);
    HRESULT item(int, IHTMLDOMAttribute*);
    HRESULT get_length(int*);
}
enum IID_IDOMDocumentType = GUID(0x30510738, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMDocumentType : IDispatch
{
    HRESULT get_name(BSTR*);
    HRESULT get_entities(IDispatch*);
    HRESULT get_notations(IDispatch*);
    HRESULT get_publicId(VARIANT*);
    HRESULT get_systemId(VARIANT*);
    HRESULT get_internalSubset(VARIANT*);
}
enum IID_IHTMLDocument7 = GUID(0x305104b8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDocument7 : IDispatch
{
    HRESULT get_defaultView(IHTMLWindow2*);
    HRESULT createCDATASection(BSTR, IHTMLDOMNode*);
    HRESULT getSelection(IHTMLSelection*);
    HRESULT getElementsByTagNameNS(VARIANT*, BSTR, IHTMLElementCollection*);
    HRESULT createElementNS(VARIANT*, BSTR, IHTMLElement*);
    HRESULT createAttributeNS(VARIANT*, BSTR, IHTMLDOMAttribute*);
    HRESULT put_onmsthumbnailclick(VARIANT);
    HRESULT get_onmsthumbnailclick(VARIANT*);
    HRESULT get_characterSet(BSTR*);
    HRESULT createElement(BSTR, IHTMLElement*);
    HRESULT createAttribute(BSTR, IHTMLDOMAttribute*);
    HRESULT getElementsByClassName(BSTR, IHTMLElementCollection*);
    HRESULT createProcessingInstruction(BSTR, BSTR, IDOMProcessingInstruction*);
    HRESULT adoptNode(IHTMLDOMNode, IHTMLDOMNode3*);
    HRESULT put_onmssitemodejumplistitemremoved(VARIANT);
    HRESULT get_onmssitemodejumplistitemremoved(VARIANT*);
    HRESULT get_all(IHTMLElementCollection*);
    HRESULT get_inputEncoding(BSTR*);
    HRESULT get_xmlEncoding(BSTR*);
    HRESULT put_xmlStandalone(short);
    HRESULT get_xmlStandalone(short*);
    HRESULT put_xmlVersion(BSTR);
    HRESULT get_xmlVersion(BSTR*);
    HRESULT hasAttributes(short*);
    HRESULT put_onabort(VARIANT);
    HRESULT get_onabort(VARIANT*);
    HRESULT put_onblur(VARIANT);
    HRESULT get_onblur(VARIANT*);
    HRESULT put_oncanplay(VARIANT);
    HRESULT get_oncanplay(VARIANT*);
    HRESULT put_oncanplaythrough(VARIANT);
    HRESULT get_oncanplaythrough(VARIANT*);
    HRESULT put_onchange(VARIANT);
    HRESULT get_onchange(VARIANT*);
    HRESULT put_ondrag(VARIANT);
    HRESULT get_ondrag(VARIANT*);
    HRESULT put_ondragend(VARIANT);
    HRESULT get_ondragend(VARIANT*);
    HRESULT put_ondragenter(VARIANT);
    HRESULT get_ondragenter(VARIANT*);
    HRESULT put_ondragleave(VARIANT);
    HRESULT get_ondragleave(VARIANT*);
    HRESULT put_ondragover(VARIANT);
    HRESULT get_ondragover(VARIANT*);
    HRESULT put_ondrop(VARIANT);
    HRESULT get_ondrop(VARIANT*);
    HRESULT put_ondurationchange(VARIANT);
    HRESULT get_ondurationchange(VARIANT*);
    HRESULT put_onemptied(VARIANT);
    HRESULT get_onemptied(VARIANT*);
    HRESULT put_onended(VARIANT);
    HRESULT get_onended(VARIANT*);
    HRESULT put_onerror(VARIANT);
    HRESULT get_onerror(VARIANT*);
    HRESULT put_onfocus(VARIANT);
    HRESULT get_onfocus(VARIANT*);
    HRESULT put_oninput(VARIANT);
    HRESULT get_oninput(VARIANT*);
    HRESULT put_onload(VARIANT);
    HRESULT get_onload(VARIANT*);
    HRESULT put_onloadeddata(VARIANT);
    HRESULT get_onloadeddata(VARIANT*);
    HRESULT put_onloadedmetadata(VARIANT);
    HRESULT get_onloadedmetadata(VARIANT*);
    HRESULT put_onloadstart(VARIANT);
    HRESULT get_onloadstart(VARIANT*);
    HRESULT put_onpause(VARIANT);
    HRESULT get_onpause(VARIANT*);
    HRESULT put_onplay(VARIANT);
    HRESULT get_onplay(VARIANT*);
    HRESULT put_onplaying(VARIANT);
    HRESULT get_onplaying(VARIANT*);
    HRESULT put_onprogress(VARIANT);
    HRESULT get_onprogress(VARIANT*);
    HRESULT put_onratechange(VARIANT);
    HRESULT get_onratechange(VARIANT*);
    HRESULT put_onreset(VARIANT);
    HRESULT get_onreset(VARIANT*);
    HRESULT put_onscroll(VARIANT);
    HRESULT get_onscroll(VARIANT*);
    HRESULT put_onseeked(VARIANT);
    HRESULT get_onseeked(VARIANT*);
    HRESULT put_onseeking(VARIANT);
    HRESULT get_onseeking(VARIANT*);
    HRESULT put_onselect(VARIANT);
    HRESULT get_onselect(VARIANT*);
    HRESULT put_onstalled(VARIANT);
    HRESULT get_onstalled(VARIANT*);
    HRESULT put_onsubmit(VARIANT);
    HRESULT get_onsubmit(VARIANT*);
    HRESULT put_onsuspend(VARIANT);
    HRESULT get_onsuspend(VARIANT*);
    HRESULT put_ontimeupdate(VARIANT);
    HRESULT get_ontimeupdate(VARIANT*);
    HRESULT put_onvolumechange(VARIANT);
    HRESULT get_onvolumechange(VARIANT*);
    HRESULT put_onwaiting(VARIANT);
    HRESULT get_onwaiting(VARIANT*);
    HRESULT normalize();
    HRESULT importNode(IHTMLDOMNode, short, IHTMLDOMNode3*);
    HRESULT get_parentWindow(IHTMLWindow2*);
    HRESULT putref_body(IHTMLElement);
    HRESULT get_body(IHTMLElement*);
    HRESULT get_head(IHTMLElement*);
}
enum IID_IHTMLDOMNode = GUID(0x3050f5da, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDOMNode : IDispatch
{
    HRESULT get_nodeType(int*);
    HRESULT get_parentNode(IHTMLDOMNode*);
    HRESULT hasChildNodes(short*);
    HRESULT get_childNodes(IDispatch*);
    HRESULT get_attributes(IDispatch*);
    HRESULT insertBefore(IHTMLDOMNode, VARIANT, IHTMLDOMNode*);
    HRESULT removeChild(IHTMLDOMNode, IHTMLDOMNode*);
    HRESULT replaceChild(IHTMLDOMNode, IHTMLDOMNode, IHTMLDOMNode*);
    HRESULT cloneNode(short, IHTMLDOMNode*);
    HRESULT removeNode(short, IHTMLDOMNode*);
    HRESULT swapNode(IHTMLDOMNode, IHTMLDOMNode*);
    HRESULT replaceNode(IHTMLDOMNode, IHTMLDOMNode*);
    HRESULT appendChild(IHTMLDOMNode, IHTMLDOMNode*);
    HRESULT get_nodeName(BSTR*);
    HRESULT put_nodeValue(VARIANT);
    HRESULT get_nodeValue(VARIANT*);
    HRESULT get_firstChild(IHTMLDOMNode*);
    HRESULT get_lastChild(IHTMLDOMNode*);
    HRESULT get_previousSibling(IHTMLDOMNode*);
    HRESULT get_nextSibling(IHTMLDOMNode*);
}
enum IID_IHTMLDOMNode2 = GUID(0x3050f80b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDOMNode2 : IDispatch
{
    HRESULT get_ownerDocument(IDispatch*);
}
enum IID_IHTMLDOMNode3 = GUID(0x305106e0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDOMNode3 : IDispatch
{
    HRESULT put_prefix(VARIANT);
    HRESULT get_prefix(VARIANT*);
    HRESULT get_localName(VARIANT*);
    HRESULT get_namespaceURI(VARIANT*);
    HRESULT put_textContent(VARIANT);
    HRESULT get_textContent(VARIANT*);
    HRESULT isEqualNode(IHTMLDOMNode3, short*);
    HRESULT lookupNamespaceURI(VARIANT*, VARIANT*);
    HRESULT lookupPrefix(VARIANT*, VARIANT*);
    HRESULT isDefaultNamespace(VARIANT*, short*);
    HRESULT appendChild(IHTMLDOMNode, IHTMLDOMNode*);
    HRESULT insertBefore(IHTMLDOMNode, VARIANT, IHTMLDOMNode*);
    HRESULT removeChild(IHTMLDOMNode, IHTMLDOMNode*);
    HRESULT replaceChild(IHTMLDOMNode, IHTMLDOMNode, IHTMLDOMNode*);
    HRESULT isSameNode(IHTMLDOMNode3, short*);
    HRESULT compareDocumentPosition(IHTMLDOMNode, ushort*);
    HRESULT isSupported(BSTR, VARIANT, short*);
}
enum IID_IHTMLDOMAttribute = GUID(0x3050f4b0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDOMAttribute : IDispatch
{
    HRESULT get_nodeName(BSTR*);
    HRESULT put_nodeValue(VARIANT);
    HRESULT get_nodeValue(VARIANT*);
    HRESULT get_specified(short*);
}
enum IID_IHTMLDOMAttribute2 = GUID(0x3050f810, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDOMAttribute2 : IDispatch
{
    HRESULT get_name(BSTR*);
    HRESULT put_value(BSTR);
    HRESULT get_value(BSTR*);
    HRESULT get_expando(short*);
    HRESULT get_nodeType(int*);
    HRESULT get_parentNode(IHTMLDOMNode*);
    HRESULT get_childNodes(IDispatch*);
    HRESULT get_firstChild(IHTMLDOMNode*);
    HRESULT get_lastChild(IHTMLDOMNode*);
    HRESULT get_previousSibling(IHTMLDOMNode*);
    HRESULT get_nextSibling(IHTMLDOMNode*);
    HRESULT get_attributes(IDispatch*);
    HRESULT get_ownerDocument(IDispatch*);
    HRESULT insertBefore(IHTMLDOMNode, VARIANT, IHTMLDOMNode*);
    HRESULT replaceChild(IHTMLDOMNode, IHTMLDOMNode, IHTMLDOMNode*);
    HRESULT removeChild(IHTMLDOMNode, IHTMLDOMNode*);
    HRESULT appendChild(IHTMLDOMNode, IHTMLDOMNode*);
    HRESULT hasChildNodes(short*);
    HRESULT cloneNode(short, IHTMLDOMAttribute*);
}
enum IID_IHTMLDOMAttribute3 = GUID(0x30510468, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDOMAttribute3 : IDispatch
{
    HRESULT put_nodeValue(VARIANT);
    HRESULT get_nodeValue(VARIANT*);
    HRESULT put_value(BSTR);
    HRESULT get_value(BSTR*);
    HRESULT get_specified(short*);
    HRESULT get_ownerElement(IHTMLElement2*);
}
enum IID_IHTMLDOMAttribute4 = GUID(0x305106f9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDOMAttribute4 : IDispatch
{
    HRESULT put_nodeValue(VARIANT);
    HRESULT get_nodeValue(VARIANT*);
    HRESULT get_nodeName(BSTR*);
    HRESULT get_name(BSTR*);
    HRESULT put_value(BSTR);
    HRESULT get_value(BSTR*);
    HRESULT get_firstChild(IHTMLDOMNode*);
    HRESULT get_lastChild(IHTMLDOMNode*);
    HRESULT get_childNodes(IDispatch*);
    HRESULT hasAttributes(short*);
    HRESULT hasChildNodes(short*);
    HRESULT normalize();
    HRESULT get_specified(short*);
}
enum IID_IHTMLDOMTextNode = GUID(0x3050f4b1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDOMTextNode : IDispatch
{
    HRESULT put_data(BSTR);
    HRESULT get_data(BSTR*);
    HRESULT toString(BSTR*);
    HRESULT get_length(int*);
    HRESULT splitText(int, IHTMLDOMNode*);
}
enum IID_IHTMLDOMTextNode2 = GUID(0x3050f809, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDOMTextNode2 : IDispatch
{
    HRESULT substringData(int, int, BSTR*);
    HRESULT appendData(BSTR);
    HRESULT insertData(int, BSTR);
    HRESULT deleteData(int, int);
    HRESULT replaceData(int, int, BSTR);
}
enum IID_IHTMLDOMTextNode3 = GUID(0x3051073e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDOMTextNode3 : IDispatch
{
    HRESULT substringData(int, int, BSTR*);
    HRESULT insertData(int, BSTR);
    HRESULT deleteData(int, int);
    HRESULT replaceData(int, int, BSTR);
    HRESULT splitText(int, IHTMLDOMNode*);
    HRESULT get_wholeText(BSTR*);
    HRESULT replaceWholeText(BSTR, IHTMLDOMNode*);
    HRESULT hasAttributes(short*);
    HRESULT normalize();
}
enum IID_IHTMLDOMImplementation = GUID(0x3050f80d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDOMImplementation : IDispatch
{
    HRESULT hasFeature(BSTR, VARIANT, short*);
}
enum IID_IHTMLDOMImplementation2 = GUID(0x3051073c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDOMImplementation2 : IDispatch
{
    HRESULT createDocumentType(BSTR, VARIANT*, VARIANT*, IDOMDocumentType*);
    HRESULT createDocument(VARIANT*, VARIANT*, IDOMDocumentType, IHTMLDocument7*);
    HRESULT createHTMLDocument(BSTR, IHTMLDocument7*);
    HRESULT hasFeature(BSTR, VARIANT, short*);
}
enum IID_DispHTMLDOMAttribute = GUID(0x3050f564, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLDOMAttribute : IDispatch
{
}
enum IID_DispHTMLDOMTextNode = GUID(0x3050f565, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLDOMTextNode : IDispatch
{
}
enum IID_DispHTMLDOMImplementation = GUID(0x3050f58f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLDOMImplementation : IDispatch
{
}
enum IID_IHTMLAttributeCollection = GUID(0x3050f4c3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLAttributeCollection : IDispatch
{
    HRESULT get_length(int*);
    HRESULT get__newEnum(IUnknown*);
    HRESULT item(VARIANT*, IDispatch*);
}
enum IID_IHTMLAttributeCollection2 = GUID(0x3050f80a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLAttributeCollection2 : IDispatch
{
    HRESULT getNamedItem(BSTR, IHTMLDOMAttribute*);
    HRESULT setNamedItem(IHTMLDOMAttribute, IHTMLDOMAttribute*);
    HRESULT removeNamedItem(BSTR, IHTMLDOMAttribute*);
}
enum IID_IHTMLAttributeCollection4 = GUID(0x305106fa, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLAttributeCollection4 : IDispatch
{
    HRESULT getNamedItemNS(VARIANT*, BSTR, IHTMLDOMAttribute2*);
    HRESULT setNamedItemNS(IHTMLDOMAttribute2, IHTMLDOMAttribute2*);
    HRESULT removeNamedItemNS(VARIANT*, BSTR, IHTMLDOMAttribute2*);
    HRESULT getNamedItem(BSTR, IHTMLDOMAttribute2*);
    HRESULT setNamedItem(IHTMLDOMAttribute2, IHTMLDOMAttribute2*);
    HRESULT removeNamedItem(BSTR, IHTMLDOMAttribute2*);
    HRESULT item(int, IHTMLDOMAttribute2*);
    HRESULT get_length(int*);
}
enum IID_IHTMLDOMChildrenCollection = GUID(0x3050f5ab, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDOMChildrenCollection : IDispatch
{
    HRESULT get_length(int*);
    HRESULT get__newEnum(IUnknown*);
    HRESULT item(int, IDispatch*);
}
enum IID_IHTMLDOMChildrenCollection2 = GUID(0x30510791, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDOMChildrenCollection2 : IDispatch
{
    HRESULT item(int, IDispatch*);
}
enum IID_DispHTMLAttributeCollection = GUID(0x3050f56c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLAttributeCollection : IDispatch
{
}
enum IID_DispStaticNodeList = GUID(0x3050f59b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispStaticNodeList : IDispatch
{
}
enum IID_DispDOMChildrenCollection = GUID(0x3050f577, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMChildrenCollection : IDispatch
{
}
enum IID_HTMLElementEvents4 = GUID(0x3051075e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLElementEvents4 : IDispatch
{
}
enum IID_HTMLElementEvents3 = GUID(0x3050f59f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLElementEvents3 : IDispatch
{
}
enum IID_HTMLElementEvents2 = GUID(0x3050f60f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLElementEvents2 : IDispatch
{
}
enum IID_HTMLElementEvents = GUID(0x3050f33c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLElementEvents : IDispatch
{
}
enum IID_IRulesAppliedCollection = GUID(0x305104be, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IRulesAppliedCollection : IDispatch
{
    HRESULT item(int, IRulesApplied*);
    HRESULT get_length(int*);
    HRESULT get_element(IHTMLElement*);
    HRESULT propertyInheritedFrom(BSTR, IRulesApplied*);
    HRESULT get_propertyCount(int*);
    HRESULT property(int, BSTR*);
    HRESULT propertyInheritedTrace(BSTR, int, IRulesApplied*);
    HRESULT propertyInheritedTraceLength(BSTR, int*);
}
enum IID_IHTMLElement3 = GUID(0x3050f673, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLElement3 : IDispatch
{
    HRESULT mergeAttributes(IHTMLElement, VARIANT*);
    HRESULT get_isMultiLine(short*);
    HRESULT get_canHaveHTML(short*);
    HRESULT put_onlayoutcomplete(VARIANT);
    HRESULT get_onlayoutcomplete(VARIANT*);
    HRESULT put_onpage(VARIANT);
    HRESULT get_onpage(VARIANT*);
    HRESULT put_inflateBlock(short);
    HRESULT get_inflateBlock(short*);
    HRESULT put_onbeforedeactivate(VARIANT);
    HRESULT get_onbeforedeactivate(VARIANT*);
    HRESULT setActive();
    HRESULT put_contentEditable(BSTR);
    HRESULT get_contentEditable(BSTR*);
    HRESULT get_isContentEditable(short*);
    HRESULT put_hideFocus(short);
    HRESULT get_hideFocus(short*);
    HRESULT put_disabled(short);
    HRESULT get_disabled(short*);
    HRESULT get_isDisabled(short*);
    HRESULT put_onmove(VARIANT);
    HRESULT get_onmove(VARIANT*);
    HRESULT put_oncontrolselect(VARIANT);
    HRESULT get_oncontrolselect(VARIANT*);
    HRESULT fireEvent(BSTR, VARIANT*, short*);
    HRESULT put_onresizestart(VARIANT);
    HRESULT get_onresizestart(VARIANT*);
    HRESULT put_onresizeend(VARIANT);
    HRESULT get_onresizeend(VARIANT*);
    HRESULT put_onmovestart(VARIANT);
    HRESULT get_onmovestart(VARIANT*);
    HRESULT put_onmoveend(VARIANT);
    HRESULT get_onmoveend(VARIANT*);
    HRESULT put_onmouseenter(VARIANT);
    HRESULT get_onmouseenter(VARIANT*);
    HRESULT put_onmouseleave(VARIANT);
    HRESULT get_onmouseleave(VARIANT*);
    HRESULT put_onactivate(VARIANT);
    HRESULT get_onactivate(VARIANT*);
    HRESULT put_ondeactivate(VARIANT);
    HRESULT get_ondeactivate(VARIANT*);
    HRESULT dragDrop(short*);
    HRESULT get_glyphMode(int*);
}
enum IID_IHTMLElement4 = GUID(0x3050f80f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLElement4 : IDispatch
{
    HRESULT put_onmousewheel(VARIANT);
    HRESULT get_onmousewheel(VARIANT*);
    HRESULT normalize();
    HRESULT getAttributeNode(BSTR, IHTMLDOMAttribute*);
    HRESULT setAttributeNode(IHTMLDOMAttribute, IHTMLDOMAttribute*);
    HRESULT removeAttributeNode(IHTMLDOMAttribute, IHTMLDOMAttribute*);
    HRESULT put_onbeforeactivate(VARIANT);
    HRESULT get_onbeforeactivate(VARIANT*);
    HRESULT put_onfocusin(VARIANT);
    HRESULT get_onfocusin(VARIANT*);
    HRESULT put_onfocusout(VARIANT);
    HRESULT get_onfocusout(VARIANT*);
}
enum IID_IElementSelector = GUID(0x30510463, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementSelector : IDispatch
{
    HRESULT querySelector(BSTR, IHTMLElement*);
    HRESULT querySelectorAll(BSTR, IHTMLDOMChildrenCollection*);
}
enum IID_IHTMLElementRender = GUID(0x3050f669, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLElementRender : IUnknown
{
    HRESULT DrawToDC(HDC);
    HRESULT SetDocumentPrinter(BSTR, HDC);
}
enum IID_IHTMLUniqueName = GUID(0x3050f4d0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLUniqueName : IDispatch
{
    HRESULT get_uniqueNumber(int*);
    HRESULT get_uniqueID(BSTR*);
}
enum IID_IHTMLElement5 = GUID(0x3051045d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLElement5 : IDispatch
{
    HRESULT getAttributeNode(BSTR, IHTMLDOMAttribute2*);
    HRESULT setAttributeNode(IHTMLDOMAttribute2, IHTMLDOMAttribute2*);
    HRESULT removeAttributeNode(IHTMLDOMAttribute2, IHTMLDOMAttribute2*);
    HRESULT hasAttribute(BSTR, short*);
    HRESULT put_role(BSTR);
    HRESULT get_role(BSTR*);
    HRESULT put_ariaBusy(BSTR);
    HRESULT get_ariaBusy(BSTR*);
    HRESULT put_ariaChecked(BSTR);
    HRESULT get_ariaChecked(BSTR*);
    HRESULT put_ariaDisabled(BSTR);
    HRESULT get_ariaDisabled(BSTR*);
    HRESULT put_ariaExpanded(BSTR);
    HRESULT get_ariaExpanded(BSTR*);
    HRESULT put_ariaHaspopup(BSTR);
    HRESULT get_ariaHaspopup(BSTR*);
    HRESULT put_ariaHidden(BSTR);
    HRESULT get_ariaHidden(BSTR*);
    HRESULT put_ariaInvalid(BSTR);
    HRESULT get_ariaInvalid(BSTR*);
    HRESULT put_ariaMultiselectable(BSTR);
    HRESULT get_ariaMultiselectable(BSTR*);
    HRESULT put_ariaPressed(BSTR);
    HRESULT get_ariaPressed(BSTR*);
    HRESULT put_ariaReadonly(BSTR);
    HRESULT get_ariaReadonly(BSTR*);
    HRESULT put_ariaRequired(BSTR);
    HRESULT get_ariaRequired(BSTR*);
    HRESULT put_ariaSecret(BSTR);
    HRESULT get_ariaSecret(BSTR*);
    HRESULT put_ariaSelected(BSTR);
    HRESULT get_ariaSelected(BSTR*);
    HRESULT getAttribute(BSTR, VARIANT*);
    HRESULT setAttribute(BSTR, VARIANT);
    HRESULT removeAttribute(BSTR, short*);
    HRESULT get_attributes(IHTMLAttributeCollection3*);
    HRESULT put_ariaValuenow(BSTR);
    HRESULT get_ariaValuenow(BSTR*);
    HRESULT put_ariaPosinset(short);
    HRESULT get_ariaPosinset(short*);
    HRESULT put_ariaSetsize(short);
    HRESULT get_ariaSetsize(short*);
    HRESULT put_ariaLevel(short);
    HRESULT get_ariaLevel(short*);
    HRESULT put_ariaValuemin(BSTR);
    HRESULT get_ariaValuemin(BSTR*);
    HRESULT put_ariaValuemax(BSTR);
    HRESULT get_ariaValuemax(BSTR*);
    HRESULT put_ariaControls(BSTR);
    HRESULT get_ariaControls(BSTR*);
    HRESULT put_ariaDescribedby(BSTR);
    HRESULT get_ariaDescribedby(BSTR*);
    HRESULT put_ariaFlowto(BSTR);
    HRESULT get_ariaFlowto(BSTR*);
    HRESULT put_ariaLabelledby(BSTR);
    HRESULT get_ariaLabelledby(BSTR*);
    HRESULT put_ariaActivedescendant(BSTR);
    HRESULT get_ariaActivedescendant(BSTR*);
    HRESULT put_ariaOwns(BSTR);
    HRESULT get_ariaOwns(BSTR*);
    HRESULT hasAttributes(short*);
    HRESULT put_ariaLive(BSTR);
    HRESULT get_ariaLive(BSTR*);
    HRESULT put_ariaRelevant(BSTR);
    HRESULT get_ariaRelevant(BSTR*);
}
enum IID_IHTMLElement6 = GUID(0x305106f8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLElement6 : IDispatch
{
    HRESULT getAttributeNS(VARIANT*, BSTR, VARIANT*);
    HRESULT setAttributeNS(VARIANT*, BSTR, VARIANT*);
    HRESULT removeAttributeNS(VARIANT*, BSTR);
    HRESULT getAttributeNodeNS(VARIANT*, BSTR, IHTMLDOMAttribute2*);
    HRESULT setAttributeNodeNS(IHTMLDOMAttribute2, IHTMLDOMAttribute2*);
    HRESULT hasAttributeNS(VARIANT*, BSTR, short*);
    HRESULT getAttribute(BSTR, VARIANT*);
    HRESULT setAttribute(BSTR, VARIANT*);
    HRESULT removeAttribute(BSTR);
    HRESULT getAttributeNode(BSTR, IHTMLDOMAttribute2*);
    HRESULT setAttributeNode(IHTMLDOMAttribute2, IHTMLDOMAttribute2*);
    HRESULT removeAttributeNode(IHTMLDOMAttribute2, IHTMLDOMAttribute2*);
    HRESULT hasAttribute(BSTR, short*);
    HRESULT getElementsByTagNameNS(VARIANT*, BSTR, IHTMLElementCollection*);
    HRESULT get_tagName(BSTR*);
    HRESULT get_nodeName(BSTR*);
    HRESULT getElementsByClassName(BSTR, IHTMLElementCollection*);
    HRESULT msMatchesSelector(BSTR, short*);
    HRESULT put_onabort(VARIANT);
    HRESULT get_onabort(VARIANT*);
    HRESULT put_oncanplay(VARIANT);
    HRESULT get_oncanplay(VARIANT*);
    HRESULT put_oncanplaythrough(VARIANT);
    HRESULT get_oncanplaythrough(VARIANT*);
    HRESULT put_onchange(VARIANT);
    HRESULT get_onchange(VARIANT*);
    HRESULT put_ondurationchange(VARIANT);
    HRESULT get_ondurationchange(VARIANT*);
    HRESULT put_onemptied(VARIANT);
    HRESULT get_onemptied(VARIANT*);
    HRESULT put_onended(VARIANT);
    HRESULT get_onended(VARIANT*);
    HRESULT put_onerror(VARIANT);
    HRESULT get_onerror(VARIANT*);
    HRESULT put_oninput(VARIANT);
    HRESULT get_oninput(VARIANT*);
    HRESULT put_onload(VARIANT);
    HRESULT get_onload(VARIANT*);
    HRESULT put_onloadeddata(VARIANT);
    HRESULT get_onloadeddata(VARIANT*);
    HRESULT put_onloadedmetadata(VARIANT);
    HRESULT get_onloadedmetadata(VARIANT*);
    HRESULT put_onloadstart(VARIANT);
    HRESULT get_onloadstart(VARIANT*);
    HRESULT put_onpause(VARIANT);
    HRESULT get_onpause(VARIANT*);
    HRESULT put_onplay(VARIANT);
    HRESULT get_onplay(VARIANT*);
    HRESULT put_onplaying(VARIANT);
    HRESULT get_onplaying(VARIANT*);
    HRESULT put_onprogress(VARIANT);
    HRESULT get_onprogress(VARIANT*);
    HRESULT put_onratechange(VARIANT);
    HRESULT get_onratechange(VARIANT*);
    HRESULT put_onreset(VARIANT);
    HRESULT get_onreset(VARIANT*);
    HRESULT put_onseeked(VARIANT);
    HRESULT get_onseeked(VARIANT*);
    HRESULT put_onseeking(VARIANT);
    HRESULT get_onseeking(VARIANT*);
    HRESULT put_onselect(VARIANT);
    HRESULT get_onselect(VARIANT*);
    HRESULT put_onstalled(VARIANT);
    HRESULT get_onstalled(VARIANT*);
    HRESULT put_onsubmit(VARIANT);
    HRESULT get_onsubmit(VARIANT*);
    HRESULT put_onsuspend(VARIANT);
    HRESULT get_onsuspend(VARIANT*);
    HRESULT put_ontimeupdate(VARIANT);
    HRESULT get_ontimeupdate(VARIANT*);
    HRESULT put_onvolumechange(VARIANT);
    HRESULT get_onvolumechange(VARIANT*);
    HRESULT put_onwaiting(VARIANT);
    HRESULT get_onwaiting(VARIANT*);
    HRESULT hasAttributes(short*);
}
enum IID_IHTMLElement7 = GUID(0x305107aa, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLElement7 : IDispatch
{
    HRESULT put_onmspointerdown(VARIANT);
    HRESULT get_onmspointerdown(VARIANT*);
    HRESULT put_onmspointermove(VARIANT);
    HRESULT get_onmspointermove(VARIANT*);
    HRESULT put_onmspointerup(VARIANT);
    HRESULT get_onmspointerup(VARIANT*);
    HRESULT put_onmspointerover(VARIANT);
    HRESULT get_onmspointerover(VARIANT*);
    HRESULT put_onmspointerout(VARIANT);
    HRESULT get_onmspointerout(VARIANT*);
    HRESULT put_onmspointercancel(VARIANT);
    HRESULT get_onmspointercancel(VARIANT*);
    HRESULT put_onmspointerhover(VARIANT);
    HRESULT get_onmspointerhover(VARIANT*);
    HRESULT put_onmslostpointercapture(VARIANT);
    HRESULT get_onmslostpointercapture(VARIANT*);
    HRESULT put_onmsgotpointercapture(VARIANT);
    HRESULT get_onmsgotpointercapture(VARIANT*);
    HRESULT put_onmsgesturestart(VARIANT);
    HRESULT get_onmsgesturestart(VARIANT*);
    HRESULT put_onmsgesturechange(VARIANT);
    HRESULT get_onmsgesturechange(VARIANT*);
    HRESULT put_onmsgestureend(VARIANT);
    HRESULT get_onmsgestureend(VARIANT*);
    HRESULT put_onmsgesturehold(VARIANT);
    HRESULT get_onmsgesturehold(VARIANT*);
    HRESULT put_onmsgesturetap(VARIANT);
    HRESULT get_onmsgesturetap(VARIANT*);
    HRESULT put_onmsgesturedoubletap(VARIANT);
    HRESULT get_onmsgesturedoubletap(VARIANT*);
    HRESULT put_onmsinertiastart(VARIANT);
    HRESULT get_onmsinertiastart(VARIANT*);
    HRESULT msSetPointerCapture(int);
    HRESULT msReleasePointerCapture(int);
    HRESULT put_onmstransitionstart(VARIANT);
    HRESULT get_onmstransitionstart(VARIANT*);
    HRESULT put_onmstransitionend(VARIANT);
    HRESULT get_onmstransitionend(VARIANT*);
    HRESULT put_onmsanimationstart(VARIANT);
    HRESULT get_onmsanimationstart(VARIANT*);
    HRESULT put_onmsanimationend(VARIANT);
    HRESULT get_onmsanimationend(VARIANT*);
    HRESULT put_onmsanimationiteration(VARIANT);
    HRESULT get_onmsanimationiteration(VARIANT*);
    HRESULT put_oninvalid(VARIANT);
    HRESULT get_oninvalid(VARIANT*);
    HRESULT put_xmsAcceleratorKey(BSTR);
    HRESULT get_xmsAcceleratorKey(BSTR*);
    HRESULT put_spellcheck(VARIANT);
    HRESULT get_spellcheck(VARIANT*);
    HRESULT put_onmsmanipulationstatechanged(VARIANT);
    HRESULT get_onmsmanipulationstatechanged(VARIANT*);
    HRESULT put_oncuechange(VARIANT);
    HRESULT get_oncuechange(VARIANT*);
}
enum IID_IHTMLElementAppliedStyles = GUID(0x305104bd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLElementAppliedStyles : IDispatch
{
    HRESULT msGetRulesApplied(IRulesAppliedCollection*);
    HRESULT msGetRulesAppliedWithAncestor(VARIANT, IRulesAppliedCollection*);
}
enum IID_IElementTraversal = GUID(0x30510736, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementTraversal : IDispatch
{
    HRESULT get_firstElementChild(IHTMLElement*);
    HRESULT get_lastElementChild(IHTMLElement*);
    HRESULT get_previousElementSibling(IHTMLElement*);
    HRESULT get_nextElementSibling(IHTMLElement*);
    HRESULT get_childElementCount(int*);
}
enum IID_IHTMLDatabinding = GUID(0x3050f3f2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDatabinding : IDispatch
{
    HRESULT put_dataFld(BSTR);
    HRESULT get_dataFld(BSTR*);
    HRESULT put_dataSrc(BSTR);
    HRESULT get_dataSrc(BSTR*);
    HRESULT put_dataFormatAs(BSTR);
    HRESULT get_dataFormatAs(BSTR*);
}
enum IID_IHTMLDocument = GUID(0x626fc520, 0xa41e, 0x11cf, [0xa7, 0x31, 0x0, 0xa0, 0xc9, 0x8, 0x26, 0x37]);
interface IHTMLDocument : IDispatch
{
    HRESULT get_Script(IDispatch*);
}
enum IID_IHTMLElementDefaults = GUID(0x3050f6c9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLElementDefaults : IDispatch
{
    HRESULT get_style(IHTMLStyle*);
    HRESULT put_tabStop(short);
    HRESULT get_tabStop(short*);
    HRESULT put_viewInheritStyle(short);
    HRESULT get_viewInheritStyle(short*);
    HRESULT put_viewMasterTab(short);
    HRESULT get_viewMasterTab(short*);
    HRESULT put_scrollSegmentX(int);
    HRESULT get_scrollSegmentX(int*);
    HRESULT put_scrollSegmentY(int);
    HRESULT get_scrollSegmentY(int*);
    HRESULT put_isMultiLine(short);
    HRESULT get_isMultiLine(short*);
    HRESULT put_contentEditable(BSTR);
    HRESULT get_contentEditable(BSTR*);
    HRESULT put_canHaveHTML(short);
    HRESULT get_canHaveHTML(short*);
    HRESULT putref_viewLink(IHTMLDocument);
    HRESULT get_viewLink(IHTMLDocument*);
    HRESULT put_frozen(short);
    HRESULT get_frozen(short*);
}
enum IID_DispHTMLDefaults = GUID(0x3050f58c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLDefaults : IDispatch
{
}
enum IID_IHTCDefaultDispatch = GUID(0x3050f4fd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTCDefaultDispatch : IDispatch
{
    HRESULT get_element(IHTMLElement*);
    HRESULT createEventObject(IHTMLEventObj*);
    HRESULT get_defaults(IDispatch*);
    HRESULT get_document(IDispatch*);
}
enum IID_IHTCPropertyBehavior = GUID(0x3050f5df, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTCPropertyBehavior : IDispatch
{
    HRESULT fireChange();
    HRESULT put_value(VARIANT);
    HRESULT get_value(VARIANT*);
}
enum IID_IHTCMethodBehavior = GUID(0x3050f631, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTCMethodBehavior : IDispatch
{
}
enum IID_IHTCEventBehavior = GUID(0x3050f4ff, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTCEventBehavior : IDispatch
{
    HRESULT fire(IHTMLEventObj);
}
enum IID_IHTCAttachBehavior = GUID(0x3050f5f4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTCAttachBehavior : IDispatch
{
    HRESULT fireEvent(IDispatch);
    HRESULT detachEvent();
}
enum IID_IHTCAttachBehavior2 = GUID(0x3050f7eb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTCAttachBehavior2 : IDispatch
{
    HRESULT fireEvent(VARIANT);
}
enum IID_IHTCDescBehavior = GUID(0x3050f5dc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTCDescBehavior : IDispatch
{
    HRESULT get_urn(BSTR*);
    HRESULT get_name(BSTR*);
}
enum IID_DispHTCDefaultDispatch = GUID(0x3050f573, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTCDefaultDispatch : IDispatch
{
}
enum IID_DispHTCPropertyBehavior = GUID(0x3050f57f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTCPropertyBehavior : IDispatch
{
}
enum IID_DispHTCMethodBehavior = GUID(0x3050f587, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTCMethodBehavior : IDispatch
{
}
enum IID_DispHTCEventBehavior = GUID(0x3050f574, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTCEventBehavior : IDispatch
{
}
enum IID_DispHTCAttachBehavior = GUID(0x3050f583, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTCAttachBehavior : IDispatch
{
}
enum IID_DispHTCDescBehavior = GUID(0x3050f57e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTCDescBehavior : IDispatch
{
}
enum IID_IHTMLUrnCollection = GUID(0x3050f5e2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLUrnCollection : IDispatch
{
    HRESULT get_length(int*);
    HRESULT item(int, BSTR*);
}
enum IID_DispHTMLUrnCollection = GUID(0x3050f551, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLUrnCollection : IDispatch
{
}
enum IID_IHTMLGenericElement = GUID(0x3050f4b7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLGenericElement : IDispatch
{
    HRESULT get_recordset(IDispatch*);
    HRESULT namedRecordset(BSTR, VARIANT*, IDispatch*);
}
enum IID_DispHTMLGenericElement = GUID(0x3050f563, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLGenericElement : IDispatch
{
}
enum IID_IHTMLStyleSheetRuleApplied = GUID(0x305104c1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleSheetRuleApplied : IDispatch
{
    HRESULT get_msSpecificity(int*);
    HRESULT msGetSpecificity(int, int*);
}
enum IID_IHTMLStyleSheetRule2 = GUID(0x305106fd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleSheetRule2 : IDispatch
{
    HRESULT put_selectorText(BSTR);
    HRESULT get_selectorText(BSTR*);
}
enum IID_IHTMLStyleSheetRulesCollection2 = GUID(0x305106e8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleSheetRulesCollection2 : IDispatch
{
    HRESULT get_length(int*);
    HRESULT item(int, IHTMLCSSRule*);
}
enum IID_DispHTMLStyleSheetRule = GUID(0x3050f50e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLStyleSheetRule : IDispatch
{
}
enum IID_DispHTMLStyleSheetRulesCollection = GUID(0x3050f52f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLStyleSheetRulesCollection : IDispatch
{
}
enum IID_IHTMLStyleSheetPage = GUID(0x3050f7ee, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleSheetPage : IDispatch
{
    HRESULT get_selector(BSTR*);
    HRESULT get_pseudoClass(BSTR*);
}
enum IID_IHTMLStyleSheetPage2 = GUID(0x305106ed, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleSheetPage2 : IDispatch
{
    HRESULT put_selectorText(BSTR);
    HRESULT get_selectorText(BSTR*);
    HRESULT get_style(IHTMLRuleStyle*);
}
enum IID_IHTMLStyleSheetPagesCollection = GUID(0x3050f7f0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleSheetPagesCollection : IDispatch
{
    HRESULT get_length(int*);
    HRESULT item(int, IHTMLStyleSheetPage*);
}
enum IID_DispHTMLStyleSheetPage = GUID(0x3050f540, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLStyleSheetPage : IDispatch
{
}
enum IID_DispHTMLStyleSheetPagesCollection = GUID(0x3050f543, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLStyleSheetPagesCollection : IDispatch
{
}
enum IID_IHTMLStyleSheetsCollection = GUID(0x3050f37e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleSheetsCollection : IDispatch
{
    HRESULT get_length(int*);
    HRESULT get__newEnum(IUnknown*);
    HRESULT item(VARIANT*, VARIANT*);
}
enum IID_IHTMLStyleSheet2 = GUID(0x3050f3d1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleSheet2 : IDispatch
{
    HRESULT get_pages(IHTMLStyleSheetPagesCollection*);
    HRESULT addPageRule(BSTR, BSTR, int, int*);
}
enum IID_IHTMLStyleSheet3 = GUID(0x30510496, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleSheet3 : IDispatch
{
    HRESULT put_href(BSTR);
    HRESULT get_href(BSTR*);
    HRESULT get_isAlternate(short*);
    HRESULT get_isPrefAlternate(short*);
}
enum IID_IHTMLStyleSheet4 = GUID(0x305106f4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleSheet4 : IDispatch
{
    HRESULT get_type(BSTR*);
    HRESULT get_href(VARIANT*);
    HRESULT get_title(BSTR*);
    HRESULT get_ownerNode(IHTMLElement*);
    HRESULT get_ownerRule(IHTMLCSSRule*);
    HRESULT get_cssRules(IHTMLStyleSheetRulesCollection*);
    HRESULT get_media(VARIANT*);
    HRESULT insertRule(BSTR, int, int*);
    HRESULT deleteRule(int);
}
enum IID_DispHTMLStyleSheet = GUID(0x3050f58d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLStyleSheet : IDispatch
{
}
enum IID_IHTMLStyleSheetsCollection2 = GUID(0x305106e7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleSheetsCollection2 : IDispatch
{
    HRESULT item(int, VARIANT*);
}
enum IID_DispHTMLStyleSheetsCollection = GUID(0x3050f547, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLStyleSheetsCollection : IDispatch
{
}
enum IID_HTMLLinkElementEvents2 = GUID(0x3050f61d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLLinkElementEvents2 : IDispatch
{
}
enum IID_HTMLLinkElementEvents = GUID(0x3050f3cc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLLinkElementEvents : IDispatch
{
}
enum IID_IHTMLLinkElement = GUID(0x3050f205, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLLinkElement : IDispatch
{
    HRESULT put_href(BSTR);
    HRESULT get_href(BSTR*);
    HRESULT put_rel(BSTR);
    HRESULT get_rel(BSTR*);
    HRESULT put_rev(BSTR);
    HRESULT get_rev(BSTR*);
    HRESULT put_type(BSTR);
    HRESULT get_type(BSTR*);
    HRESULT get_readyState(BSTR*);
    HRESULT put_onreadystatechange(VARIANT);
    HRESULT get_onreadystatechange(VARIANT*);
    HRESULT put_onload(VARIANT);
    HRESULT get_onload(VARIANT*);
    HRESULT put_onerror(VARIANT);
    HRESULT get_onerror(VARIANT*);
    HRESULT get_styleSheet(IHTMLStyleSheet*);
    HRESULT put_disabled(short);
    HRESULT get_disabled(short*);
    HRESULT put_media(BSTR);
    HRESULT get_media(BSTR*);
}
enum IID_IHTMLLinkElement2 = GUID(0x3050f4e5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLLinkElement2 : IDispatch
{
    HRESULT put_target(BSTR);
    HRESULT get_target(BSTR*);
}
enum IID_IHTMLLinkElement3 = GUID(0x3050f81e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLLinkElement3 : IDispatch
{
    HRESULT put_charset(BSTR);
    HRESULT get_charset(BSTR*);
    HRESULT put_hreflang(BSTR);
    HRESULT get_hreflang(BSTR*);
}
enum IID_IHTMLLinkElement4 = GUID(0x3051043a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLLinkElement4 : IDispatch
{
    HRESULT put_href(BSTR);
    HRESULT get_href(BSTR*);
}
enum IID_IHTMLLinkElement5 = GUID(0x30510726, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLLinkElement5 : IDispatch
{
    HRESULT get_sheet(IHTMLStyleSheet*);
}
enum IID_DispHTMLLinkElement = GUID(0x3050f524, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLLinkElement : IDispatch
{
}
enum IID_IHTMLTxtRange = GUID(0x3050f220, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTxtRange : IDispatch
{
    HRESULT get_htmlText(BSTR*);
    HRESULT put_text(BSTR);
    HRESULT get_text(BSTR*);
    HRESULT parentElement(IHTMLElement*);
    HRESULT duplicate(IHTMLTxtRange*);
    HRESULT inRange(IHTMLTxtRange, short*);
    HRESULT isEqual(IHTMLTxtRange, short*);
    HRESULT scrollIntoView(short);
    HRESULT collapse(short);
    HRESULT expand(BSTR, short*);
    HRESULT move(BSTR, int, int*);
    HRESULT moveStart(BSTR, int, int*);
    HRESULT moveEnd(BSTR, int, int*);
    HRESULT select();
    HRESULT pasteHTML(BSTR);
    HRESULT moveToElementText(IHTMLElement);
    HRESULT setEndPoint(BSTR, IHTMLTxtRange);
    HRESULT compareEndPoints(BSTR, IHTMLTxtRange, int*);
    HRESULT findText(BSTR, int, int, short*);
    HRESULT moveToPoint(int, int);
    HRESULT getBookmark(BSTR*);
    HRESULT moveToBookmark(BSTR, short*);
    HRESULT queryCommandSupported(BSTR, short*);
    HRESULT queryCommandEnabled(BSTR, short*);
    HRESULT queryCommandState(BSTR, short*);
    HRESULT queryCommandIndeterm(BSTR, short*);
    HRESULT queryCommandText(BSTR, BSTR*);
    HRESULT queryCommandValue(BSTR, VARIANT*);
    HRESULT execCommand(BSTR, short, VARIANT, short*);
    HRESULT execCommandShowHelp(BSTR, short*);
}
enum IID_IHTMLTextRangeMetrics = GUID(0x3050f40b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTextRangeMetrics : IDispatch
{
    HRESULT get_offsetTop(int*);
    HRESULT get_offsetLeft(int*);
    HRESULT get_boundingTop(int*);
    HRESULT get_boundingLeft(int*);
    HRESULT get_boundingWidth(int*);
    HRESULT get_boundingHeight(int*);
}
enum IID_IHTMLTextRangeMetrics2 = GUID(0x3050f4a6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTextRangeMetrics2 : IDispatch
{
    HRESULT getClientRects(IHTMLRectCollection*);
    HRESULT getBoundingClientRect(IHTMLRect*);
}
enum IID_IHTMLTxtRangeCollection = GUID(0x3050f7ed, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTxtRangeCollection : IDispatch
{
    HRESULT get_length(int*);
    HRESULT get__newEnum(IUnknown*);
    HRESULT item(VARIANT*, VARIANT*);
}
enum IID_IHTMLDOMRange = GUID(0x305104ae, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDOMRange : IDispatch
{
    HRESULT get_startContainer(IHTMLDOMNode*);
    HRESULT get_startOffset(int*);
    HRESULT get_endContainer(IHTMLDOMNode*);
    HRESULT get_endOffset(int*);
    HRESULT get_collapsed(short*);
    HRESULT get_commonAncestorContainer(IHTMLDOMNode*);
    HRESULT setStart(IDispatch, int);
    HRESULT setEnd(IDispatch, int);
    HRESULT setStartBefore(IDispatch);
    HRESULT setStartAfter(IDispatch);
    HRESULT setEndBefore(IDispatch);
    HRESULT setEndAfter(IDispatch);
    HRESULT collapse(short);
    HRESULT selectNode(IDispatch);
    HRESULT selectNodeContents(IDispatch);
    HRESULT compareBoundaryPoints(short, IDispatch, int*);
    HRESULT deleteContents();
    HRESULT extractContents(IDispatch*);
    HRESULT cloneContents(IDispatch*);
    HRESULT insertNode(IDispatch);
    HRESULT surroundContents(IDispatch);
    HRESULT cloneRange(IHTMLDOMRange*);
    HRESULT toString(BSTR*);
    HRESULT detach();
    HRESULT getClientRects(IHTMLRectCollection*);
    HRESULT getBoundingClientRect(IHTMLRect*);
}
enum IID_DispHTMLDOMRange = GUID(0x3050f5a3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLDOMRange : IDispatch
{
}
enum IID_HTMLFormElementEvents2 = GUID(0x3050f614, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLFormElementEvents2 : IDispatch
{
}
enum IID_HTMLFormElementEvents = GUID(0x3050f364, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLFormElementEvents : IDispatch
{
}
enum IID_IHTMLFormElement = GUID(0x3050f1f7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFormElement : IDispatch
{
    HRESULT put_action(BSTR);
    HRESULT get_action(BSTR*);
    HRESULT put_dir(BSTR);
    HRESULT get_dir(BSTR*);
    HRESULT put_encoding(BSTR);
    HRESULT get_encoding(BSTR*);
    HRESULT put_method(BSTR);
    HRESULT get_method(BSTR*);
    HRESULT get_elements(IDispatch*);
    HRESULT put_target(BSTR);
    HRESULT get_target(BSTR*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_onsubmit(VARIANT);
    HRESULT get_onsubmit(VARIANT*);
    HRESULT put_onreset(VARIANT);
    HRESULT get_onreset(VARIANT*);
    HRESULT submit();
    HRESULT reset();
    HRESULT put_length(int);
    HRESULT get_length(int*);
    HRESULT get__newEnum(IUnknown*);
    HRESULT item(VARIANT, VARIANT, IDispatch*);
    HRESULT tags(VARIANT, IDispatch*);
}
enum IID_IHTMLFormElement2 = GUID(0x3050f4f6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFormElement2 : IDispatch
{
    HRESULT put_acceptCharset(BSTR);
    HRESULT get_acceptCharset(BSTR*);
    HRESULT urns(VARIANT, IDispatch*);
}
enum IID_IHTMLFormElement3 = GUID(0x3050f836, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFormElement3 : IDispatch
{
    HRESULT namedItem(BSTR, IDispatch*);
}
enum IID_IHTMLSubmitData = GUID(0x3050f645, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLSubmitData : IDispatch
{
    HRESULT appendNameValuePair(BSTR, BSTR);
    HRESULT appendNameFilePair(BSTR, BSTR);
    HRESULT appendItemSeparator();
}
enum IID_IHTMLFormElement4 = GUID(0x3051042c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFormElement4 : IDispatch
{
    HRESULT put_action(BSTR);
    HRESULT get_action(BSTR*);
}
enum IID_DispHTMLFormElement = GUID(0x3050f510, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLFormElement : IDispatch
{
}
enum IID_HTMLControlElementEvents2 = GUID(0x3050f612, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLControlElementEvents2 : IDispatch
{
}
enum IID_HTMLControlElementEvents = GUID(0x3050f4ea, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLControlElementEvents : IDispatch
{
}
enum IID_IHTMLControlElement = GUID(0x3050f4e9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLControlElement : IDispatch
{
    HRESULT put_tabIndex(short);
    HRESULT get_tabIndex(short*);
    HRESULT focus();
    HRESULT put_accessKey(BSTR);
    HRESULT get_accessKey(BSTR*);
    HRESULT put_onblur(VARIANT);
    HRESULT get_onblur(VARIANT*);
    HRESULT put_onfocus(VARIANT);
    HRESULT get_onfocus(VARIANT*);
    HRESULT put_onresize(VARIANT);
    HRESULT get_onresize(VARIANT*);
    HRESULT blur();
    HRESULT addFilter(IUnknown);
    HRESULT removeFilter(IUnknown);
    HRESULT get_clientHeight(int*);
    HRESULT get_clientWidth(int*);
    HRESULT get_clientTop(int*);
    HRESULT get_clientLeft(int*);
}
enum IID_IHTMLTextElement = GUID(0x3050f218, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTextElement : IDispatch
{
}
enum IID_DispHTMLTextElement = GUID(0x3050f537, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLTextElement : IDispatch
{
}
enum IID_HTMLTextContainerEvents2 = GUID(0x3050f624, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLTextContainerEvents2 : IDispatch
{
}
enum IID_HTMLTextContainerEvents = GUID(0x1ff6aa72, 0x5842, 0x11cf, [0xa7, 0x7, 0x0, 0xaa, 0x0, 0xc0, 0x9, 0x8d]);
interface HTMLTextContainerEvents : IDispatch
{
}
enum IID_IHTMLTextContainer = GUID(0x3050f230, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTextContainer : IDispatch
{
    HRESULT createControlRange(IDispatch*);
    HRESULT get_scrollHeight(int*);
    HRESULT get_scrollWidth(int*);
    HRESULT put_scrollTop(int);
    HRESULT get_scrollTop(int*);
    HRESULT put_scrollLeft(int);
    HRESULT get_scrollLeft(int*);
    HRESULT put_onscroll(VARIANT);
    HRESULT get_onscroll(VARIANT*);
}
enum IID_IHTMLControlRange = GUID(0x3050f29c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLControlRange : IDispatch
{
    HRESULT select();
    HRESULT add(IHTMLControlElement);
    HRESULT remove(int);
    HRESULT item(int, IHTMLElement*);
    HRESULT scrollIntoView(VARIANT);
    HRESULT queryCommandSupported(BSTR, short*);
    HRESULT queryCommandEnabled(BSTR, short*);
    HRESULT queryCommandState(BSTR, short*);
    HRESULT queryCommandIndeterm(BSTR, short*);
    HRESULT queryCommandText(BSTR, BSTR*);
    HRESULT queryCommandValue(BSTR, VARIANT*);
    HRESULT execCommand(BSTR, short, VARIANT, short*);
    HRESULT execCommandShowHelp(BSTR, short*);
    HRESULT commonParentElement(IHTMLElement*);
    HRESULT get_length(int*);
}
enum IID_IHTMLControlRange2 = GUID(0x3050f65e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLControlRange2 : IDispatch
{
    HRESULT addElement(IHTMLElement);
}
enum IID_HTMLImgEvents2 = GUID(0x3050f616, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLImgEvents2 : IDispatch
{
}
enum IID_HTMLImgEvents = GUID(0x3050f25b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLImgEvents : IDispatch
{
}
enum IID_IHTMLImgElement = GUID(0x3050f240, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLImgElement : IDispatch
{
    HRESULT put_isMap(short);
    HRESULT get_isMap(short*);
    HRESULT put_useMap(BSTR);
    HRESULT get_useMap(BSTR*);
    HRESULT get_mimeType(BSTR*);
    HRESULT get_fileSize(BSTR*);
    HRESULT get_fileCreatedDate(BSTR*);
    HRESULT get_fileModifiedDate(BSTR*);
    HRESULT get_fileUpdatedDate(BSTR*);
    HRESULT get_protocol(BSTR*);
    HRESULT get_href(BSTR*);
    HRESULT get_nameProp(BSTR*);
    HRESULT put_border(VARIANT);
    HRESULT get_border(VARIANT*);
    HRESULT put_vspace(int);
    HRESULT get_vspace(int*);
    HRESULT put_hspace(int);
    HRESULT get_hspace(int*);
    HRESULT put_alt(BSTR);
    HRESULT get_alt(BSTR*);
    HRESULT put_src(BSTR);
    HRESULT get_src(BSTR*);
    HRESULT put_lowsrc(BSTR);
    HRESULT get_lowsrc(BSTR*);
    HRESULT put_vrml(BSTR);
    HRESULT get_vrml(BSTR*);
    HRESULT put_dynsrc(BSTR);
    HRESULT get_dynsrc(BSTR*);
    HRESULT get_readyState(BSTR*);
    HRESULT get_complete(short*);
    HRESULT put_loop(VARIANT);
    HRESULT get_loop(VARIANT*);
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
    HRESULT put_onload(VARIANT);
    HRESULT get_onload(VARIANT*);
    HRESULT put_onerror(VARIANT);
    HRESULT get_onerror(VARIANT*);
    HRESULT put_onabort(VARIANT);
    HRESULT get_onabort(VARIANT*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_width(int);
    HRESULT get_width(int*);
    HRESULT put_height(int);
    HRESULT get_height(int*);
    HRESULT put_start(BSTR);
    HRESULT get_start(BSTR*);
}
enum IID_IHTMLImgElement2 = GUID(0x3050f826, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLImgElement2 : IDispatch
{
    HRESULT put_longDesc(BSTR);
    HRESULT get_longDesc(BSTR*);
}
enum IID_IHTMLImgElement3 = GUID(0x30510434, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLImgElement3 : IDispatch
{
    HRESULT put_longDesc(BSTR);
    HRESULT get_longDesc(BSTR*);
    HRESULT put_vrml(BSTR);
    HRESULT get_vrml(BSTR*);
    HRESULT put_lowsrc(BSTR);
    HRESULT get_lowsrc(BSTR*);
    HRESULT put_dynsrc(BSTR);
    HRESULT get_dynsrc(BSTR*);
}
enum IID_IHTMLImgElement4 = GUID(0x305107f6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLImgElement4 : IDispatch
{
    HRESULT get_naturalWidth(int*);
    HRESULT get_naturalHeight(int*);
}
enum IID_IHTMLMSImgElement = GUID(0x30510793, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLMSImgElement : IDispatch
{
    HRESULT put_msPlayToDisabled(short);
    HRESULT get_msPlayToDisabled(short*);
    HRESULT put_msPlayToPrimary(short);
    HRESULT get_msPlayToPrimary(short*);
}
enum IID_IHTMLImageElementFactory = GUID(0x3050f38e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLImageElementFactory : IDispatch
{
    HRESULT create(VARIANT, VARIANT, IHTMLImgElement*);
}
enum IID_DispHTMLImg = GUID(0x3050f51c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLImg : IDispatch
{
}
enum IID_IHTMLBodyElement = GUID(0x3050f1d8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLBodyElement : IDispatch
{
    HRESULT put_background(BSTR);
    HRESULT get_background(BSTR*);
    HRESULT put_bgProperties(BSTR);
    HRESULT get_bgProperties(BSTR*);
    HRESULT put_leftMargin(VARIANT);
    HRESULT get_leftMargin(VARIANT*);
    HRESULT put_topMargin(VARIANT);
    HRESULT get_topMargin(VARIANT*);
    HRESULT put_rightMargin(VARIANT);
    HRESULT get_rightMargin(VARIANT*);
    HRESULT put_bottomMargin(VARIANT);
    HRESULT get_bottomMargin(VARIANT*);
    HRESULT put_noWrap(short);
    HRESULT get_noWrap(short*);
    HRESULT put_bgColor(VARIANT);
    HRESULT get_bgColor(VARIANT*);
    HRESULT put_text(VARIANT);
    HRESULT get_text(VARIANT*);
    HRESULT put_link(VARIANT);
    HRESULT get_link(VARIANT*);
    HRESULT put_vLink(VARIANT);
    HRESULT get_vLink(VARIANT*);
    HRESULT put_aLink(VARIANT);
    HRESULT get_aLink(VARIANT*);
    HRESULT put_onload(VARIANT);
    HRESULT get_onload(VARIANT*);
    HRESULT put_onunload(VARIANT);
    HRESULT get_onunload(VARIANT*);
    HRESULT put_scroll(BSTR);
    HRESULT get_scroll(BSTR*);
    HRESULT put_onselect(VARIANT);
    HRESULT get_onselect(VARIANT*);
    HRESULT put_onbeforeunload(VARIANT);
    HRESULT get_onbeforeunload(VARIANT*);
    HRESULT createTextRange(IHTMLTxtRange*);
}
enum IID_IHTMLBodyElement2 = GUID(0x3050f5c5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLBodyElement2 : IDispatch
{
    HRESULT put_onbeforeprint(VARIANT);
    HRESULT get_onbeforeprint(VARIANT*);
    HRESULT put_onafterprint(VARIANT);
    HRESULT get_onafterprint(VARIANT*);
}
enum IID_IHTMLBodyElement3 = GUID(0x30510422, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLBodyElement3 : IDispatch
{
    HRESULT put_background(BSTR);
    HRESULT get_background(BSTR*);
    HRESULT put_ononline(VARIANT);
    HRESULT get_ononline(VARIANT*);
    HRESULT put_onoffline(VARIANT);
    HRESULT get_onoffline(VARIANT*);
    HRESULT put_onhashchange(VARIANT);
    HRESULT get_onhashchange(VARIANT*);
}
enum IID_IHTMLBodyElement4 = GUID(0x30510795, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLBodyElement4 : IDispatch
{
    HRESULT put_onmessage(VARIANT);
    HRESULT get_onmessage(VARIANT*);
    HRESULT put_onstorage(VARIANT);
    HRESULT get_onstorage(VARIANT*);
}
enum IID_IHTMLBodyElement5 = GUID(0x30510822, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLBodyElement5 : IDispatch
{
    HRESULT put_onpopstate(VARIANT);
    HRESULT get_onpopstate(VARIANT*);
}
enum IID_DispHTMLBody = GUID(0x3050f507, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLBody : IDispatch
{
}
enum IID_IHTMLFontElement = GUID(0x3050f1d9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFontElement : IDispatch
{
    HRESULT put_color(VARIANT);
    HRESULT get_color(VARIANT*);
    HRESULT put_face(BSTR);
    HRESULT get_face(BSTR*);
    HRESULT put_size(VARIANT);
    HRESULT get_size(VARIANT*);
}
enum IID_DispHTMLFontElement = GUID(0x3050f512, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLFontElement : IDispatch
{
}
enum IID_HTMLAnchorEvents2 = GUID(0x3050f610, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLAnchorEvents2 : IDispatch
{
}
enum IID_HTMLAnchorEvents = GUID(0x3050f29d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLAnchorEvents : IDispatch
{
}
enum IID_IHTMLAnchorElement = GUID(0x3050f1da, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLAnchorElement : IDispatch
{
    HRESULT put_href(BSTR);
    HRESULT get_href(BSTR*);
    HRESULT put_target(BSTR);
    HRESULT get_target(BSTR*);
    HRESULT put_rel(BSTR);
    HRESULT get_rel(BSTR*);
    HRESULT put_rev(BSTR);
    HRESULT get_rev(BSTR*);
    HRESULT put_urn(BSTR);
    HRESULT get_urn(BSTR*);
    HRESULT put_Methods(BSTR);
    HRESULT get_Methods(BSTR*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_host(BSTR);
    HRESULT get_host(BSTR*);
    HRESULT put_hostname(BSTR);
    HRESULT get_hostname(BSTR*);
    HRESULT put_pathname(BSTR);
    HRESULT get_pathname(BSTR*);
    HRESULT put_port(BSTR);
    HRESULT get_port(BSTR*);
    HRESULT put_protocol(BSTR);
    HRESULT get_protocol(BSTR*);
    HRESULT put_search(BSTR);
    HRESULT get_search(BSTR*);
    HRESULT put_hash(BSTR);
    HRESULT get_hash(BSTR*);
    HRESULT put_onblur(VARIANT);
    HRESULT get_onblur(VARIANT*);
    HRESULT put_onfocus(VARIANT);
    HRESULT get_onfocus(VARIANT*);
    HRESULT put_accessKey(BSTR);
    HRESULT get_accessKey(BSTR*);
    HRESULT get_protocolLong(BSTR*);
    HRESULT get_mimeType(BSTR*);
    HRESULT get_nameProp(BSTR*);
    HRESULT put_tabIndex(short);
    HRESULT get_tabIndex(short*);
    HRESULT focus();
    HRESULT blur();
}
enum IID_IHTMLAnchorElement2 = GUID(0x3050f825, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLAnchorElement2 : IDispatch
{
    HRESULT put_charset(BSTR);
    HRESULT get_charset(BSTR*);
    HRESULT put_coords(BSTR);
    HRESULT get_coords(BSTR*);
    HRESULT put_hreflang(BSTR);
    HRESULT get_hreflang(BSTR*);
    HRESULT put_shape(BSTR);
    HRESULT get_shape(BSTR*);
    HRESULT put_type(BSTR);
    HRESULT get_type(BSTR*);
}
enum IID_IHTMLAnchorElement3 = GUID(0x3051041d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLAnchorElement3 : IDispatch
{
    HRESULT put_shape(BSTR);
    HRESULT get_shape(BSTR*);
    HRESULT put_coords(BSTR);
    HRESULT get_coords(BSTR*);
    HRESULT put_href(BSTR);
    HRESULT get_href(BSTR*);
}
enum IID_DispHTMLAnchorElement = GUID(0x3050f502, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLAnchorElement : IDispatch
{
}
enum IID_HTMLLabelEvents2 = GUID(0x3050f61c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLLabelEvents2 : IDispatch
{
}
enum IID_HTMLLabelEvents = GUID(0x3050f329, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLLabelEvents : IDispatch
{
}
enum IID_IHTMLLabelElement = GUID(0x3050f32a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLLabelElement : IDispatch
{
    HRESULT put_htmlFor(BSTR);
    HRESULT get_htmlFor(BSTR*);
    HRESULT put_accessKey(BSTR);
    HRESULT get_accessKey(BSTR*);
}
enum IID_IHTMLLabelElement2 = GUID(0x3050f832, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLLabelElement2 : IDispatch
{
    HRESULT get_form(IHTMLFormElement*);
}
enum IID_DispHTMLLabelElement = GUID(0x3050f522, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLLabelElement : IDispatch
{
}
enum IID_IHTMLListElement = GUID(0x3050f20e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLListElement : IDispatch
{
}
enum IID_IHTMLListElement2 = GUID(0x3050f822, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLListElement2 : IDispatch
{
    HRESULT put_compact(short);
    HRESULT get_compact(short*);
}
enum IID_DispHTMLListElement = GUID(0x3050f525, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLListElement : IDispatch
{
}
enum IID_IHTMLUListElement = GUID(0x3050f1dd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLUListElement : IDispatch
{
    HRESULT put_compact(short);
    HRESULT get_compact(short*);
    HRESULT put_type(BSTR);
    HRESULT get_type(BSTR*);
}
enum IID_DispHTMLUListElement = GUID(0x3050f538, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLUListElement : IDispatch
{
}
enum IID_IHTMLOListElement = GUID(0x3050f1de, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLOListElement : IDispatch
{
    HRESULT put_compact(short);
    HRESULT get_compact(short*);
    HRESULT put_start(int);
    HRESULT get_start(int*);
    HRESULT put_type(BSTR);
    HRESULT get_type(BSTR*);
}
enum IID_DispHTMLOListElement = GUID(0x3050f52a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLOListElement : IDispatch
{
}
enum IID_IHTMLLIElement = GUID(0x3050f1e0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLLIElement : IDispatch
{
    HRESULT put_type(BSTR);
    HRESULT get_type(BSTR*);
    HRESULT put_value(int);
    HRESULT get_value(int*);
}
enum IID_DispHTMLLIElement = GUID(0x3050f523, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLLIElement : IDispatch
{
}
enum IID_IHTMLBlockElement = GUID(0x3050f208, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLBlockElement : IDispatch
{
    HRESULT put_clear(BSTR);
    HRESULT get_clear(BSTR*);
}
enum IID_IHTMLBlockElement2 = GUID(0x3050f823, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLBlockElement2 : IDispatch
{
    HRESULT put_cite(BSTR);
    HRESULT get_cite(BSTR*);
    HRESULT put_width(BSTR);
    HRESULT get_width(BSTR*);
}
enum IID_IHTMLBlockElement3 = GUID(0x30510494, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLBlockElement3 : IDispatch
{
    HRESULT put_cite(BSTR);
    HRESULT get_cite(BSTR*);
}
enum IID_DispHTMLBlockElement = GUID(0x3050f506, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLBlockElement : IDispatch
{
}
enum IID_IHTMLDivElement = GUID(0x3050f200, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDivElement : IDispatch
{
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
    HRESULT put_noWrap(short);
    HRESULT get_noWrap(short*);
}
enum IID_DispHTMLDivElement = GUID(0x3050f50c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLDivElement : IDispatch
{
}
enum IID_IHTMLDDElement = GUID(0x3050f1f2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDDElement : IDispatch
{
    HRESULT put_noWrap(short);
    HRESULT get_noWrap(short*);
}
enum IID_DispHTMLDDElement = GUID(0x3050f50b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLDDElement : IDispatch
{
}
enum IID_IHTMLDTElement = GUID(0x3050f1f3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDTElement : IDispatch
{
    HRESULT put_noWrap(short);
    HRESULT get_noWrap(short*);
}
enum IID_DispHTMLDTElement = GUID(0x3050f50d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLDTElement : IDispatch
{
}
enum IID_IHTMLBRElement = GUID(0x3050f1f0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLBRElement : IDispatch
{
    HRESULT put_clear(BSTR);
    HRESULT get_clear(BSTR*);
}
enum IID_DispHTMLBRElement = GUID(0x3050f53a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLBRElement : IDispatch
{
}
enum IID_IHTMLDListElement = GUID(0x3050f1f1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDListElement : IDispatch
{
    HRESULT put_compact(short);
    HRESULT get_compact(short*);
}
enum IID_DispHTMLDListElement = GUID(0x3050f53b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLDListElement : IDispatch
{
}
enum IID_IHTMLHRElement = GUID(0x3050f1f4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLHRElement : IDispatch
{
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
    HRESULT put_color(VARIANT);
    HRESULT get_color(VARIANT*);
    HRESULT put_noShade(short);
    HRESULT get_noShade(short*);
    HRESULT put_width(VARIANT);
    HRESULT get_width(VARIANT*);
    HRESULT put_size(VARIANT);
    HRESULT get_size(VARIANT*);
}
enum IID_DispHTMLHRElement = GUID(0x3050f53d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLHRElement : IDispatch
{
}
enum IID_IHTMLParaElement = GUID(0x3050f1f5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLParaElement : IDispatch
{
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
}
enum IID_DispHTMLParaElement = GUID(0x3050f52c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLParaElement : IDispatch
{
}
enum IID_IHTMLElementCollection2 = GUID(0x3050f5ee, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLElementCollection2 : IDispatch
{
    HRESULT urns(VARIANT, IDispatch*);
}
enum IID_IHTMLElementCollection3 = GUID(0x3050f835, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLElementCollection3 : IDispatch
{
    HRESULT namedItem(BSTR, IDispatch*);
}
enum IID_IHTMLElementCollection4 = GUID(0x30510425, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLElementCollection4 : IDispatch
{
    HRESULT get_length(int*);
    HRESULT item(int, IHTMLElement2*);
    HRESULT namedItem(BSTR, IHTMLElement2*);
}
enum IID_DispHTMLElementCollection = GUID(0x3050f56b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLElementCollection : IDispatch
{
}
enum IID_IHTMLHeaderElement = GUID(0x3050f1f6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLHeaderElement : IDispatch
{
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
}
enum IID_DispHTMLHeaderElement = GUID(0x3050f515, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLHeaderElement : IDispatch
{
}
enum IID_HTMLSelectElementEvents2 = GUID(0x3050f622, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLSelectElementEvents2 : IDispatch
{
}
enum IID_HTMLSelectElementEvents = GUID(0x3050f302, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLSelectElementEvents : IDispatch
{
}
enum IID_IHTMLOptionElement = GUID(0x3050f211, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLOptionElement : IDispatch
{
    HRESULT put_selected(short);
    HRESULT get_selected(short*);
    HRESULT put_value(BSTR);
    HRESULT get_value(BSTR*);
    HRESULT put_defaultSelected(short);
    HRESULT get_defaultSelected(short*);
    HRESULT put_index(int);
    HRESULT get_index(int*);
    HRESULT put_text(BSTR);
    HRESULT get_text(BSTR*);
    HRESULT get_form(IHTMLFormElement*);
}
enum IID_IHTMLSelectElementEx = GUID(0x3050f2d1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLSelectElementEx : IUnknown
{
    HRESULT ShowDropdown(BOOL);
    HRESULT SetSelectExFlags(uint);
    HRESULT GetSelectExFlags(uint*);
    HRESULT GetDropdownOpen(BOOL*);
}
enum IID_IHTMLSelectElement = GUID(0x3050f244, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLSelectElement : IDispatch
{
    HRESULT put_size(int);
    HRESULT get_size(int*);
    HRESULT put_multiple(short);
    HRESULT get_multiple(short*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT get_options(IDispatch*);
    HRESULT put_onchange(VARIANT);
    HRESULT get_onchange(VARIANT*);
    HRESULT put_selectedIndex(int);
    HRESULT get_selectedIndex(int*);
    HRESULT get_type(BSTR*);
    HRESULT put_value(BSTR);
    HRESULT get_value(BSTR*);
    HRESULT put_disabled(short);
    HRESULT get_disabled(short*);
    HRESULT get_form(IHTMLFormElement*);
    HRESULT add(IHTMLElement, VARIANT);
    HRESULT remove(int);
    HRESULT put_length(int);
    HRESULT get_length(int*);
    HRESULT get__newEnum(IUnknown*);
    HRESULT item(VARIANT, VARIANT, IDispatch*);
    HRESULT tags(VARIANT, IDispatch*);
}
enum IID_IHTMLSelectElement2 = GUID(0x3050f5ed, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLSelectElement2 : IDispatch
{
    HRESULT urns(VARIANT, IDispatch*);
}
enum IID_IHTMLSelectElement4 = GUID(0x3050f838, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLSelectElement4 : IDispatch
{
    HRESULT namedItem(BSTR, IDispatch*);
}
enum IID_IHTMLSelectElement5 = GUID(0x3051049d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLSelectElement5 : IDispatch
{
    HRESULT add(IHTMLOptionElement, VARIANT*);
}
enum IID_IHTMLSelectElement6 = GUID(0x30510760, 0x98b6, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLSelectElement6 : IDispatch
{
    HRESULT add(IHTMLOptionElement, VARIANT*);
    HRESULT put_value(BSTR);
    HRESULT get_value(BSTR*);
}
enum IID_DispHTMLSelectElement = GUID(0x3050f531, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLSelectElement : IDispatch
{
}
enum IID_DispHTMLWndSelectElement = GUID(0x3050f597, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLWndSelectElement : IDispatch
{
}
enum IID_IHTMLSelectionObject = GUID(0x3050f25a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLSelectionObject : IDispatch
{
    HRESULT createRange(IDispatch*);
    HRESULT empty();
    HRESULT clear();
    HRESULT get_type(BSTR*);
}
enum IID_IHTMLSelectionObject2 = GUID(0x3050f7ec, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLSelectionObject2 : IDispatch
{
    HRESULT createRangeCollection(IDispatch*);
    HRESULT get_typeDetail(BSTR*);
}
enum IID_IHTMLSelection = GUID(0x305104b6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLSelection : IDispatch
{
    HRESULT get_anchorNode(IHTMLDOMNode*);
    HRESULT get_anchorOffset(int*);
    HRESULT get_focusNode(IHTMLDOMNode*);
    HRESULT get_focusOffset(int*);
    HRESULT get_isCollapsed(short*);
    HRESULT collapse(IDispatch, int);
    HRESULT collapseToStart();
    HRESULT collapseToEnd();
    HRESULT selectAllChildren(IDispatch);
    HRESULT deleteFromDocument();
    HRESULT get_rangeCount(int*);
    HRESULT getRangeAt(int, IHTMLDOMRange*);
    HRESULT addRange(IDispatch);
    HRESULT removeRange(IDispatch);
    HRESULT removeAllRanges();
    HRESULT toString(BSTR*);
}
enum IID_IHTMLOptionElement3 = GUID(0x3050f820, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLOptionElement3 : IDispatch
{
    HRESULT put_label(BSTR);
    HRESULT get_label(BSTR*);
}
enum IID_IHTMLOptionElement4 = GUID(0x305107b4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLOptionElement4 : IDispatch
{
    HRESULT put_value(BSTR);
    HRESULT get_value(BSTR*);
}
enum IID_IHTMLOptionElementFactory = GUID(0x3050f38c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLOptionElementFactory : IDispatch
{
    HRESULT create(VARIANT, VARIANT, VARIANT, VARIANT, IHTMLOptionElement*);
}
enum IID_DispHTMLOptionElement = GUID(0x3050f52b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLOptionElement : IDispatch
{
}
enum IID_DispHTMLWndOptionElement = GUID(0x3050f598, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLWndOptionElement : IDispatch
{
}
enum IID_HTMLButtonElementEvents2 = GUID(0x3050f617, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLButtonElementEvents2 : IDispatch
{
}
enum IID_HTMLButtonElementEvents = GUID(0x3050f2b3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLButtonElementEvents : IDispatch
{
}
enum IID_HTMLInputTextElementEvents2 = GUID(0x3050f618, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLInputTextElementEvents2 : IDispatch
{
}
enum IID_HTMLOptionButtonElementEvents2 = GUID(0x3050f619, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLOptionButtonElementEvents2 : IDispatch
{
}
enum IID_HTMLInputFileElementEvents2 = GUID(0x3050f61a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLInputFileElementEvents2 : IDispatch
{
}
enum IID_HTMLInputImageEvents2 = GUID(0x3050f61b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLInputImageEvents2 : IDispatch
{
}
enum IID_HTMLInputTextElementEvents = GUID(0x3050f2a7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLInputTextElementEvents : IDispatch
{
}
enum IID_HTMLOptionButtonElementEvents = GUID(0x3050f2bd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLOptionButtonElementEvents : IDispatch
{
}
enum IID_HTMLInputFileElementEvents = GUID(0x3050f2af, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLInputFileElementEvents : IDispatch
{
}
enum IID_HTMLInputImageEvents = GUID(0x3050f2c3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLInputImageEvents : IDispatch
{
}
enum IID_IHTMLInputElement = GUID(0x3050f5d2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLInputElement : IDispatch
{
    HRESULT put_type(BSTR);
    HRESULT get_type(BSTR*);
    HRESULT put_value(BSTR);
    HRESULT get_value(BSTR*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_status(short);
    HRESULT get_status(short*);
    HRESULT put_disabled(short);
    HRESULT get_disabled(short*);
    HRESULT get_form(IHTMLFormElement*);
    HRESULT put_size(int);
    HRESULT get_size(int*);
    HRESULT put_maxLength(int);
    HRESULT get_maxLength(int*);
    HRESULT select();
    HRESULT put_onchange(VARIANT);
    HRESULT get_onchange(VARIANT*);
    HRESULT put_onselect(VARIANT);
    HRESULT get_onselect(VARIANT*);
    HRESULT put_defaultValue(BSTR);
    HRESULT get_defaultValue(BSTR*);
    HRESULT put_readOnly(short);
    HRESULT get_readOnly(short*);
    HRESULT createTextRange(IHTMLTxtRange*);
    HRESULT put_indeterminate(short);
    HRESULT get_indeterminate(short*);
    HRESULT put_defaultChecked(short);
    HRESULT get_defaultChecked(short*);
    HRESULT put_checked(short);
    HRESULT get_checked(short*);
    HRESULT put_border(VARIANT);
    HRESULT get_border(VARIANT*);
    HRESULT put_vspace(int);
    HRESULT get_vspace(int*);
    HRESULT put_hspace(int);
    HRESULT get_hspace(int*);
    HRESULT put_alt(BSTR);
    HRESULT get_alt(BSTR*);
    HRESULT put_src(BSTR);
    HRESULT get_src(BSTR*);
    HRESULT put_lowsrc(BSTR);
    HRESULT get_lowsrc(BSTR*);
    HRESULT put_vrml(BSTR);
    HRESULT get_vrml(BSTR*);
    HRESULT put_dynsrc(BSTR);
    HRESULT get_dynsrc(BSTR*);
    HRESULT get_readyState(BSTR*);
    HRESULT get_complete(short*);
    HRESULT put_loop(VARIANT);
    HRESULT get_loop(VARIANT*);
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
    HRESULT put_onload(VARIANT);
    HRESULT get_onload(VARIANT*);
    HRESULT put_onerror(VARIANT);
    HRESULT get_onerror(VARIANT*);
    HRESULT put_onabort(VARIANT);
    HRESULT get_onabort(VARIANT*);
    HRESULT put_width(int);
    HRESULT get_width(int*);
    HRESULT put_height(int);
    HRESULT get_height(int*);
    HRESULT put_start(BSTR);
    HRESULT get_start(BSTR*);
}
enum IID_IHTMLInputElement2 = GUID(0x3050f821, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLInputElement2 : IDispatch
{
    HRESULT put_accept(BSTR);
    HRESULT get_accept(BSTR*);
    HRESULT put_useMap(BSTR);
    HRESULT get_useMap(BSTR*);
}
enum IID_IHTMLInputElement3 = GUID(0x30510435, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLInputElement3 : IDispatch
{
    HRESULT put_src(BSTR);
    HRESULT get_src(BSTR*);
    HRESULT put_lowsrc(BSTR);
    HRESULT get_lowsrc(BSTR*);
    HRESULT put_vrml(BSTR);
    HRESULT get_vrml(BSTR*);
    HRESULT put_dynsrc(BSTR);
    HRESULT get_dynsrc(BSTR*);
}
enum IID_IHTMLInputButtonElement = GUID(0x3050f2b2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLInputButtonElement : IDispatch
{
    HRESULT get_type(BSTR*);
    HRESULT put_value(BSTR);
    HRESULT get_value(BSTR*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_status(VARIANT);
    HRESULT get_status(VARIANT*);
    HRESULT put_disabled(short);
    HRESULT get_disabled(short*);
    HRESULT get_form(IHTMLFormElement*);
    HRESULT createTextRange(IHTMLTxtRange*);
}
enum IID_IHTMLInputHiddenElement = GUID(0x3050f2a4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLInputHiddenElement : IDispatch
{
    HRESULT get_type(BSTR*);
    HRESULT put_value(BSTR);
    HRESULT get_value(BSTR*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_status(VARIANT);
    HRESULT get_status(VARIANT*);
    HRESULT put_disabled(short);
    HRESULT get_disabled(short*);
    HRESULT get_form(IHTMLFormElement*);
    HRESULT createTextRange(IHTMLTxtRange*);
}
enum IID_IHTMLInputTextElement = GUID(0x3050f2a6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLInputTextElement : IDispatch
{
    HRESULT get_type(BSTR*);
    HRESULT put_value(BSTR);
    HRESULT get_value(BSTR*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_status(VARIANT);
    HRESULT get_status(VARIANT*);
    HRESULT put_disabled(short);
    HRESULT get_disabled(short*);
    HRESULT get_form(IHTMLFormElement*);
    HRESULT put_defaultValue(BSTR);
    HRESULT get_defaultValue(BSTR*);
    HRESULT put_size(int);
    HRESULT get_size(int*);
    HRESULT put_maxLength(int);
    HRESULT get_maxLength(int*);
    HRESULT select();
    HRESULT put_onchange(VARIANT);
    HRESULT get_onchange(VARIANT*);
    HRESULT put_onselect(VARIANT);
    HRESULT get_onselect(VARIANT*);
    HRESULT put_readOnly(short);
    HRESULT get_readOnly(short*);
    HRESULT createTextRange(IHTMLTxtRange*);
}
enum IID_IHTMLInputTextElement2 = GUID(0x3050f2d2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLInputTextElement2 : IDispatch
{
    HRESULT put_selectionStart(int);
    HRESULT get_selectionStart(int*);
    HRESULT put_selectionEnd(int);
    HRESULT get_selectionEnd(int*);
    HRESULT setSelectionRange(int, int);
}
enum IID_IHTMLInputFileElement = GUID(0x3050f2ad, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLInputFileElement : IDispatch
{
    HRESULT get_type(BSTR*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_status(VARIANT);
    HRESULT get_status(VARIANT*);
    HRESULT put_disabled(short);
    HRESULT get_disabled(short*);
    HRESULT get_form(IHTMLFormElement*);
    HRESULT put_size(int);
    HRESULT get_size(int*);
    HRESULT put_maxLength(int);
    HRESULT get_maxLength(int*);
    HRESULT select();
    HRESULT put_onchange(VARIANT);
    HRESULT get_onchange(VARIANT*);
    HRESULT put_onselect(VARIANT);
    HRESULT get_onselect(VARIANT*);
    HRESULT put_value(BSTR);
    HRESULT get_value(BSTR*);
}
enum IID_IHTMLOptionButtonElement = GUID(0x3050f2bc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLOptionButtonElement : IDispatch
{
    HRESULT put_value(BSTR);
    HRESULT get_value(BSTR*);
    HRESULT get_type(BSTR*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_checked(short);
    HRESULT get_checked(short*);
    HRESULT put_defaultChecked(short);
    HRESULT get_defaultChecked(short*);
    HRESULT put_onchange(VARIANT);
    HRESULT get_onchange(VARIANT*);
    HRESULT put_disabled(short);
    HRESULT get_disabled(short*);
    HRESULT put_status(short);
    HRESULT get_status(short*);
    HRESULT put_indeterminate(short);
    HRESULT get_indeterminate(short*);
    HRESULT get_form(IHTMLFormElement*);
}
enum IID_IHTMLInputImage = GUID(0x3050f2c2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLInputImage : IDispatch
{
    HRESULT get_type(BSTR*);
    HRESULT put_disabled(short);
    HRESULT get_disabled(short*);
    HRESULT put_border(VARIANT);
    HRESULT get_border(VARIANT*);
    HRESULT put_vspace(int);
    HRESULT get_vspace(int*);
    HRESULT put_hspace(int);
    HRESULT get_hspace(int*);
    HRESULT put_alt(BSTR);
    HRESULT get_alt(BSTR*);
    HRESULT put_src(BSTR);
    HRESULT get_src(BSTR*);
    HRESULT put_lowsrc(BSTR);
    HRESULT get_lowsrc(BSTR*);
    HRESULT put_vrml(BSTR);
    HRESULT get_vrml(BSTR*);
    HRESULT put_dynsrc(BSTR);
    HRESULT get_dynsrc(BSTR*);
    HRESULT get_readyState(BSTR*);
    HRESULT get_complete(short*);
    HRESULT put_loop(VARIANT);
    HRESULT get_loop(VARIANT*);
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
    HRESULT put_onload(VARIANT);
    HRESULT get_onload(VARIANT*);
    HRESULT put_onerror(VARIANT);
    HRESULT get_onerror(VARIANT*);
    HRESULT put_onabort(VARIANT);
    HRESULT get_onabort(VARIANT*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_width(int);
    HRESULT get_width(int*);
    HRESULT put_height(int);
    HRESULT get_height(int*);
    HRESULT put_start(BSTR);
    HRESULT get_start(BSTR*);
}
enum IID_IHTMLInputRangeElement = GUID(0x3050f2d4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLInputRangeElement : IDispatch
{
    HRESULT put_disabled(short);
    HRESULT get_disabled(short*);
    HRESULT get_type(BSTR*);
    HRESULT put_alt(BSTR);
    HRESULT get_alt(BSTR*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_value(BSTR);
    HRESULT get_value(BSTR*);
    HRESULT put_min(BSTR);
    HRESULT get_min(BSTR*);
    HRESULT put_max(BSTR);
    HRESULT get_max(BSTR*);
    HRESULT put_step(BSTR);
    HRESULT get_step(BSTR*);
    HRESULT put_valueAsNumber(double);
    HRESULT get_valueAsNumber(double*);
    HRESULT stepUp(int);
    HRESULT stepDown(int);
}
enum IID_DispHTMLInputElement = GUID(0x3050f57d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLInputElement : IDispatch
{
}
enum IID_IHTMLTextAreaElement = GUID(0x3050f2aa, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTextAreaElement : IDispatch
{
    HRESULT get_type(BSTR*);
    HRESULT put_value(BSTR);
    HRESULT get_value(BSTR*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_status(VARIANT);
    HRESULT get_status(VARIANT*);
    HRESULT put_disabled(short);
    HRESULT get_disabled(short*);
    HRESULT get_form(IHTMLFormElement*);
    HRESULT put_defaultValue(BSTR);
    HRESULT get_defaultValue(BSTR*);
    HRESULT select();
    HRESULT put_onchange(VARIANT);
    HRESULT get_onchange(VARIANT*);
    HRESULT put_onselect(VARIANT);
    HRESULT get_onselect(VARIANT*);
    HRESULT put_readOnly(short);
    HRESULT get_readOnly(short*);
    HRESULT put_rows(int);
    HRESULT get_rows(int*);
    HRESULT put_cols(int);
    HRESULT get_cols(int*);
    HRESULT put_wrap(BSTR);
    HRESULT get_wrap(BSTR*);
    HRESULT createTextRange(IHTMLTxtRange*);
}
enum IID_IHTMLTextAreaElement2 = GUID(0x3050f2d3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTextAreaElement2 : IDispatch
{
    HRESULT put_selectionStart(int);
    HRESULT get_selectionStart(int*);
    HRESULT put_selectionEnd(int);
    HRESULT get_selectionEnd(int*);
    HRESULT setSelectionRange(int, int);
}
enum IID_DispHTMLTextAreaElement = GUID(0x3050f521, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLTextAreaElement : IDispatch
{
}
enum IID_DispHTMLRichtextElement = GUID(0x3050f54d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLRichtextElement : IDispatch
{
}
enum IID_IHTMLButtonElement = GUID(0x3050f2bb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLButtonElement : IDispatch
{
    HRESULT get_type(BSTR*);
    HRESULT put_value(BSTR);
    HRESULT get_value(BSTR*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_status(VARIANT);
    HRESULT get_status(VARIANT*);
    HRESULT put_disabled(short);
    HRESULT get_disabled(short*);
    HRESULT get_form(IHTMLFormElement*);
    HRESULT createTextRange(IHTMLTxtRange*);
}
enum IID_IHTMLButtonElement2 = GUID(0x305106f3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLButtonElement2 : IDispatch
{
    HRESULT put_type(BSTR);
    HRESULT get_type(BSTR*);
}
enum IID_DispHTMLButtonElement = GUID(0x3050f51f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLButtonElement : IDispatch
{
}
enum IID_HTMLMarqueeElementEvents2 = GUID(0x3050f61f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLMarqueeElementEvents2 : IDispatch
{
}
enum IID_HTMLMarqueeElementEvents = GUID(0x3050f2b8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLMarqueeElementEvents : IDispatch
{
}
enum IID_IHTMLMarqueeElement = GUID(0x3050f2b5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLMarqueeElement : IDispatch
{
    HRESULT put_bgColor(VARIANT);
    HRESULT get_bgColor(VARIANT*);
    HRESULT put_scrollDelay(int);
    HRESULT get_scrollDelay(int*);
    HRESULT put_direction(BSTR);
    HRESULT get_direction(BSTR*);
    HRESULT put_behavior(BSTR);
    HRESULT get_behavior(BSTR*);
    HRESULT put_scrollAmount(int);
    HRESULT get_scrollAmount(int*);
    HRESULT put_loop(int);
    HRESULT get_loop(int*);
    HRESULT put_vspace(int);
    HRESULT get_vspace(int*);
    HRESULT put_hspace(int);
    HRESULT get_hspace(int*);
    HRESULT put_onfinish(VARIANT);
    HRESULT get_onfinish(VARIANT*);
    HRESULT put_onstart(VARIANT);
    HRESULT get_onstart(VARIANT*);
    HRESULT put_onbounce(VARIANT);
    HRESULT get_onbounce(VARIANT*);
    HRESULT put_width(VARIANT);
    HRESULT get_width(VARIANT*);
    HRESULT put_height(VARIANT);
    HRESULT get_height(VARIANT*);
    HRESULT put_trueSpeed(short);
    HRESULT get_trueSpeed(short*);
    HRESULT start();
    HRESULT stop();
}
enum IID_DispHTMLMarqueeElement = GUID(0x3050f527, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLMarqueeElement : IDispatch
{
}
enum IID_IHTMLHtmlElement = GUID(0x3050f81c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLHtmlElement : IDispatch
{
    HRESULT put_version(BSTR);
    HRESULT get_version(BSTR*);
}
enum IID_IHTMLHeadElement = GUID(0x3050f81d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLHeadElement : IDispatch
{
    HRESULT put_profile(BSTR);
    HRESULT get_profile(BSTR*);
}
enum IID_IHTMLHeadElement2 = GUID(0x3051042f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLHeadElement2 : IDispatch
{
    HRESULT put_profile(BSTR);
    HRESULT get_profile(BSTR*);
}
enum IID_IHTMLTitleElement = GUID(0x3050f322, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTitleElement : IDispatch
{
    HRESULT put_text(BSTR);
    HRESULT get_text(BSTR*);
}
enum IID_IHTMLMetaElement = GUID(0x3050f203, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLMetaElement : IDispatch
{
    HRESULT put_httpEquiv(BSTR);
    HRESULT get_httpEquiv(BSTR*);
    HRESULT put_content(BSTR);
    HRESULT get_content(BSTR*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_url(BSTR);
    HRESULT get_url(BSTR*);
    HRESULT put_charset(BSTR);
    HRESULT get_charset(BSTR*);
}
enum IID_IHTMLMetaElement2 = GUID(0x3050f81f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLMetaElement2 : IDispatch
{
    HRESULT put_scheme(BSTR);
    HRESULT get_scheme(BSTR*);
}
enum IID_IHTMLMetaElement3 = GUID(0x30510495, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLMetaElement3 : IDispatch
{
    HRESULT put_url(BSTR);
    HRESULT get_url(BSTR*);
}
enum IID_IHTMLBaseElement = GUID(0x3050f204, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLBaseElement : IDispatch
{
    HRESULT put_href(BSTR);
    HRESULT get_href(BSTR*);
    HRESULT put_target(BSTR);
    HRESULT get_target(BSTR*);
}
enum IID_IHTMLBaseElement2 = GUID(0x30510420, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLBaseElement2 : IDispatch
{
    HRESULT put_href(BSTR);
    HRESULT get_href(BSTR*);
}
enum IID_DispHTMLHtmlElement = GUID(0x3050f560, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLHtmlElement : IDispatch
{
}
enum IID_DispHTMLHeadElement = GUID(0x3050f561, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLHeadElement : IDispatch
{
}
enum IID_DispHTMLTitleElement = GUID(0x3050f516, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLTitleElement : IDispatch
{
}
enum IID_DispHTMLMetaElement = GUID(0x3050f517, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLMetaElement : IDispatch
{
}
enum IID_DispHTMLBaseElement = GUID(0x3050f518, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLBaseElement : IDispatch
{
}
enum IID_IHTMLIsIndexElement = GUID(0x3050f206, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLIsIndexElement : IDispatch
{
    HRESULT put_prompt(BSTR);
    HRESULT get_prompt(BSTR*);
    HRESULT put_action(BSTR);
    HRESULT get_action(BSTR*);
}
enum IID_IHTMLIsIndexElement2 = GUID(0x3050f82f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLIsIndexElement2 : IDispatch
{
    HRESULT get_form(IHTMLFormElement*);
}
enum IID_IHTMLNextIdElement = GUID(0x3050f207, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLNextIdElement : IDispatch
{
    HRESULT put_n(BSTR);
    HRESULT get_n(BSTR*);
}
enum IID_DispHTMLIsIndexElement = GUID(0x3050f519, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLIsIndexElement : IDispatch
{
}
enum IID_DispHTMLNextIdElement = GUID(0x3050f51a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLNextIdElement : IDispatch
{
}
enum IID_IHTMLBaseFontElement = GUID(0x3050f202, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLBaseFontElement : IDispatch
{
    HRESULT put_color(VARIANT);
    HRESULT get_color(VARIANT*);
    HRESULT put_face(BSTR);
    HRESULT get_face(BSTR*);
    HRESULT put_size(int);
    HRESULT get_size(int*);
}
enum IID_DispHTMLBaseFontElement = GUID(0x3050f504, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLBaseFontElement : IDispatch
{
}
enum IID_IHTMLUnknownElement = GUID(0x3050f209, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLUnknownElement : IDispatch
{
}
enum IID_DispHTMLUnknownElement = GUID(0x3050f539, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLUnknownElement : IDispatch
{
}
enum IID_IWebGeolocation = GUID(0x305107c5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IWebGeolocation : IDispatch
{
    HRESULT getCurrentPosition(IDispatch, IDispatch, IDispatch);
    HRESULT watchPosition(IDispatch, IDispatch, IDispatch, int*);
    HRESULT clearWatch(int);
}
enum IID_IHTMLMimeTypesCollection = GUID(0x3050f3fc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLMimeTypesCollection : IDispatch
{
    HRESULT get_length(int*);
}
enum IID_IHTMLPluginsCollection = GUID(0x3050f3fd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLPluginsCollection : IDispatch
{
    HRESULT get_length(int*);
    HRESULT refresh(short);
}
enum IID_IOmHistory = GUID(0xfeceaaa2, 0x8405, 0x11cf, [0x8b, 0xa1, 0x0, 0xaa, 0x0, 0x47, 0x6d, 0xa6]);
interface IOmHistory : IDispatch
{
    HRESULT get_length(short*);
    HRESULT back(VARIANT*);
    HRESULT forward(VARIANT*);
    HRESULT go(VARIANT*);
}
enum IID_IHTMLOpsProfile = GUID(0x3050f401, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLOpsProfile : IDispatch
{
    HRESULT addRequest(BSTR, VARIANT, short*);
    HRESULT clearRequest();
    HRESULT doRequest(VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT);
    HRESULT getAttribute(BSTR, BSTR*);
    HRESULT setAttribute(BSTR, BSTR, VARIANT, short*);
    HRESULT commitChanges(short*);
    HRESULT addReadRequest(BSTR, VARIANT, short*);
    HRESULT doReadRequest(VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT);
    HRESULT doWriteRequest(short*);
}
enum IID_IOmNavigator = GUID(0xfeceaaa5, 0x8405, 0x11cf, [0x8b, 0xa1, 0x0, 0xaa, 0x0, 0x47, 0x6d, 0xa6]);
interface IOmNavigator : IDispatch
{
    HRESULT get_appCodeName(BSTR*);
    HRESULT get_appName(BSTR*);
    HRESULT get_appVersion(BSTR*);
    HRESULT get_userAgent(BSTR*);
    HRESULT javaEnabled(short*);
    HRESULT taintEnabled(short*);
    HRESULT get_mimeTypes(IHTMLMimeTypesCollection*);
    HRESULT get_plugins(IHTMLPluginsCollection*);
    HRESULT get_cookieEnabled(short*);
    HRESULT get_opsProfile(IHTMLOpsProfile*);
    HRESULT toString(BSTR*);
    HRESULT get_cpuClass(BSTR*);
    HRESULT get_systemLanguage(BSTR*);
    HRESULT get_browserLanguage(BSTR*);
    HRESULT get_userLanguage(BSTR*);
    HRESULT get_platform(BSTR*);
    HRESULT get_appMinorVersion(BSTR*);
    HRESULT get_connectionSpeed(int*);
    HRESULT get_onLine(short*);
    HRESULT get_userProfile(IHTMLOpsProfile*);
}
enum IID_INavigatorGeolocation = GUID(0x305107cf, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface INavigatorGeolocation : IDispatch
{
    HRESULT get_geolocation(IWebGeolocation*);
}
enum IID_INavigatorDoNotTrack = GUID(0x30510804, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface INavigatorDoNotTrack : IDispatch
{
    HRESULT get_msDoNotTrack(BSTR*);
}
enum IID_IHTMLLocation = GUID(0x163bb1e0, 0x6e00, 0x11cf, [0x83, 0x7a, 0x48, 0xdc, 0x4, 0xc1, 0x0, 0x0]);
interface IHTMLLocation : IDispatch
{
    HRESULT put_href(BSTR);
    HRESULT get_href(BSTR*);
    HRESULT put_protocol(BSTR);
    HRESULT get_protocol(BSTR*);
    HRESULT put_host(BSTR);
    HRESULT get_host(BSTR*);
    HRESULT put_hostname(BSTR);
    HRESULT get_hostname(BSTR*);
    HRESULT put_port(BSTR);
    HRESULT get_port(BSTR*);
    HRESULT put_pathname(BSTR);
    HRESULT get_pathname(BSTR*);
    HRESULT put_search(BSTR);
    HRESULT get_search(BSTR*);
    HRESULT put_hash(BSTR);
    HRESULT get_hash(BSTR*);
    HRESULT reload(short);
    HRESULT replace(BSTR);
    HRESULT assign(BSTR);
    HRESULT toString(BSTR*);
}
enum IID_DispHTMLHistory = GUID(0x3050f549, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLHistory : IDispatch
{
}
enum IID_DispHTMLNavigator = GUID(0x3050f54c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLNavigator : IDispatch
{
}
enum IID_DispHTMLLocation = GUID(0x3050f54e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLLocation : IDispatch
{
}
enum IID_DispCPlugins = GUID(0x3050f54a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispCPlugins : IDispatch
{
}
enum IID_IHTMLBookmarkCollection = GUID(0x3050f4ce, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLBookmarkCollection : IDispatch
{
    HRESULT get_length(int*);
    HRESULT get__newEnum(IUnknown*);
    HRESULT item(int, VARIANT*);
}
enum IID_IHTMLDataTransfer = GUID(0x3050f4b3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDataTransfer : IDispatch
{
    HRESULT setData(BSTR, VARIANT*, short*);
    HRESULT getData(BSTR, VARIANT*);
    HRESULT clearData(BSTR, short*);
    HRESULT put_dropEffect(BSTR);
    HRESULT get_dropEffect(BSTR*);
    HRESULT put_effectAllowed(BSTR);
    HRESULT get_effectAllowed(BSTR*);
}
enum IID_IHTMLEventObj2 = GUID(0x3050f48b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLEventObj2 : IDispatch
{
    HRESULT setAttribute(BSTR, VARIANT, int);
    HRESULT getAttribute(BSTR, int, VARIANT*);
    HRESULT removeAttribute(BSTR, int, short*);
    HRESULT put_propertyName(BSTR);
    HRESULT get_propertyName(BSTR*);
    HRESULT putref_bookmarks(IHTMLBookmarkCollection);
    HRESULT get_bookmarks(IHTMLBookmarkCollection*);
    HRESULT putref_recordset(IDispatch);
    HRESULT get_recordset(IDispatch*);
    HRESULT put_dataFld(BSTR);
    HRESULT get_dataFld(BSTR*);
    HRESULT putref_boundElements(IHTMLElementCollection);
    HRESULT get_boundElements(IHTMLElementCollection*);
    HRESULT put_repeat(short);
    HRESULT get_repeat(short*);
    HRESULT put_srcUrn(BSTR);
    HRESULT get_srcUrn(BSTR*);
    HRESULT putref_srcElement(IHTMLElement);
    HRESULT get_srcElement(IHTMLElement*);
    HRESULT put_altKey(short);
    HRESULT get_altKey(short*);
    HRESULT put_ctrlKey(short);
    HRESULT get_ctrlKey(short*);
    HRESULT put_shiftKey(short);
    HRESULT get_shiftKey(short*);
    HRESULT putref_fromElement(IHTMLElement);
    HRESULT get_fromElement(IHTMLElement*);
    HRESULT putref_toElement(IHTMLElement);
    HRESULT get_toElement(IHTMLElement*);
    HRESULT put_button(int);
    HRESULT get_button(int*);
    HRESULT put_type(BSTR);
    HRESULT get_type(BSTR*);
    HRESULT put_qualifier(BSTR);
    HRESULT get_qualifier(BSTR*);
    HRESULT put_reason(int);
    HRESULT get_reason(int*);
    HRESULT put_x(int);
    HRESULT get_x(int*);
    HRESULT put_y(int);
    HRESULT get_y(int*);
    HRESULT put_clientX(int);
    HRESULT get_clientX(int*);
    HRESULT put_clientY(int);
    HRESULT get_clientY(int*);
    HRESULT put_offsetX(int);
    HRESULT get_offsetX(int*);
    HRESULT put_offsetY(int);
    HRESULT get_offsetY(int*);
    HRESULT put_screenX(int);
    HRESULT get_screenX(int*);
    HRESULT put_screenY(int);
    HRESULT get_screenY(int*);
    HRESULT putref_srcFilter(IDispatch);
    HRESULT get_srcFilter(IDispatch*);
    HRESULT get_dataTransfer(IHTMLDataTransfer*);
}
enum IID_IHTMLEventObj3 = GUID(0x3050f680, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLEventObj3 : IDispatch
{
    HRESULT get_contentOverflow(short*);
    HRESULT put_shiftLeft(short);
    HRESULT get_shiftLeft(short*);
    HRESULT put_altLeft(short);
    HRESULT get_altLeft(short*);
    HRESULT put_ctrlLeft(short);
    HRESULT get_ctrlLeft(short*);
    HRESULT get_imeCompositionChange(long*);
    HRESULT get_imeNotifyCommand(long*);
    HRESULT get_imeNotifyData(long*);
    HRESULT get_imeRequest(long*);
    HRESULT get_imeRequestData(long*);
    HRESULT get_keyboardLayout(long*);
    HRESULT get_behaviorCookie(int*);
    HRESULT get_behaviorPart(int*);
    HRESULT get_nextPage(BSTR*);
}
enum IID_IHTMLEventObj4 = GUID(0x3050f814, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLEventObj4 : IDispatch
{
    HRESULT get_wheelDelta(int*);
}
enum IID_IHTMLEventObj5 = GUID(0x30510478, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLEventObj5 : IDispatch
{
    HRESULT put_url(BSTR);
    HRESULT get_url(BSTR*);
    HRESULT put_data(BSTR);
    HRESULT get_data(BSTR*);
    HRESULT get_source(IDispatch*);
    HRESULT put_origin(BSTR);
    HRESULT get_origin(BSTR*);
    HRESULT put_issession(short);
    HRESULT get_issession(short*);
}
enum IID_IHTMLEventObj6 = GUID(0x30510734, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLEventObj6 : IDispatch
{
    HRESULT get_actionURL(BSTR*);
    HRESULT get_buttonID(int*);
}
enum IID_DispCEventObj = GUID(0x3050f558, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispCEventObj : IDispatch
{
}
enum IID_IHTMLStyleMedia = GUID(0x3051074b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleMedia : IDispatch
{
    HRESULT get_type(BSTR*);
    HRESULT matchMedium(BSTR, short*);
}
enum IID_DispHTMLStyleMedia = GUID(0x3059009e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLStyleMedia : IDispatch
{
}
enum IID_IHTMLFramesCollection2 = GUID(0x332c4426, 0x26cb, 0x11d0, [0xb4, 0x83, 0x0, 0xc0, 0x4f, 0xd9, 0x1, 0x19]);
interface IHTMLFramesCollection2 : IDispatch
{
    HRESULT item(VARIANT*, VARIANT*);
    HRESULT get_length(int*);
}
enum IID_HTMLWindowEvents3 = GUID(0x3050f5a1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLWindowEvents3 : IDispatch
{
}
enum IID_HTMLWindowEvents2 = GUID(0x3050f625, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLWindowEvents2 : IDispatch
{
}
enum IID_HTMLWindowEvents = GUID(0x96a0a4e0, 0xd062, 0x11cf, [0x94, 0xb6, 0x0, 0xaa, 0x0, 0x60, 0x27, 0x5c]);
interface HTMLWindowEvents : IDispatch
{
}
enum IID_IHTMLDocument2 = GUID(0x332c4425, 0x26cb, 0x11d0, [0xb4, 0x83, 0x0, 0xc0, 0x4f, 0xd9, 0x1, 0x19]);
interface IHTMLDocument2 : IHTMLDocument
{
    HRESULT get_all(IHTMLElementCollection*);
    HRESULT get_body(IHTMLElement*);
    HRESULT get_activeElement(IHTMLElement*);
    HRESULT get_images(IHTMLElementCollection*);
    HRESULT get_applets(IHTMLElementCollection*);
    HRESULT get_links(IHTMLElementCollection*);
    HRESULT get_forms(IHTMLElementCollection*);
    HRESULT get_anchors(IHTMLElementCollection*);
    HRESULT put_title(BSTR);
    HRESULT get_title(BSTR*);
    HRESULT get_scripts(IHTMLElementCollection*);
    HRESULT put_designMode(BSTR);
    HRESULT get_designMode(BSTR*);
    HRESULT get_selection(IHTMLSelectionObject*);
    HRESULT get_readyState(BSTR*);
    HRESULT get_frames(IHTMLFramesCollection2*);
    HRESULT get_embeds(IHTMLElementCollection*);
    HRESULT get_plugins(IHTMLElementCollection*);
    HRESULT put_alinkColor(VARIANT);
    HRESULT get_alinkColor(VARIANT*);
    HRESULT put_bgColor(VARIANT);
    HRESULT get_bgColor(VARIANT*);
    HRESULT put_fgColor(VARIANT);
    HRESULT get_fgColor(VARIANT*);
    HRESULT put_linkColor(VARIANT);
    HRESULT get_linkColor(VARIANT*);
    HRESULT put_vlinkColor(VARIANT);
    HRESULT get_vlinkColor(VARIANT*);
    HRESULT get_referrer(BSTR*);
    HRESULT get_location(IHTMLLocation*);
    HRESULT get_lastModified(BSTR*);
    HRESULT put_URL(BSTR);
    HRESULT get_URL(BSTR*);
    HRESULT put_domain(BSTR);
    HRESULT get_domain(BSTR*);
    HRESULT put_cookie(BSTR);
    HRESULT get_cookie(BSTR*);
    HRESULT put_expando(short);
    HRESULT get_expando(short*);
    HRESULT put_charset(BSTR);
    HRESULT get_charset(BSTR*);
    HRESULT put_defaultCharset(BSTR);
    HRESULT get_defaultCharset(BSTR*);
    HRESULT get_mimeType(BSTR*);
    HRESULT get_fileSize(BSTR*);
    HRESULT get_fileCreatedDate(BSTR*);
    HRESULT get_fileModifiedDate(BSTR*);
    HRESULT get_fileUpdatedDate(BSTR*);
    HRESULT get_security(BSTR*);
    HRESULT get_protocol(BSTR*);
    HRESULT get_nameProp(BSTR*);
    HRESULT write(SAFEARRAY*);
    HRESULT writeln(SAFEARRAY*);
    HRESULT open(BSTR, VARIANT, VARIANT, VARIANT, IDispatch*);
    HRESULT close();
    HRESULT clear();
    HRESULT queryCommandSupported(BSTR, short*);
    HRESULT queryCommandEnabled(BSTR, short*);
    HRESULT queryCommandState(BSTR, short*);
    HRESULT queryCommandIndeterm(BSTR, short*);
    HRESULT queryCommandText(BSTR, BSTR*);
    HRESULT queryCommandValue(BSTR, VARIANT*);
    HRESULT execCommand(BSTR, short, VARIANT, short*);
    HRESULT execCommandShowHelp(BSTR, short*);
    HRESULT createElement(BSTR, IHTMLElement*);
    HRESULT put_onhelp(VARIANT);
    HRESULT get_onhelp(VARIANT*);
    HRESULT put_onclick(VARIANT);
    HRESULT get_onclick(VARIANT*);
    HRESULT put_ondblclick(VARIANT);
    HRESULT get_ondblclick(VARIANT*);
    HRESULT put_onkeyup(VARIANT);
    HRESULT get_onkeyup(VARIANT*);
    HRESULT put_onkeydown(VARIANT);
    HRESULT get_onkeydown(VARIANT*);
    HRESULT put_onkeypress(VARIANT);
    HRESULT get_onkeypress(VARIANT*);
    HRESULT put_onmouseup(VARIANT);
    HRESULT get_onmouseup(VARIANT*);
    HRESULT put_onmousedown(VARIANT);
    HRESULT get_onmousedown(VARIANT*);
    HRESULT put_onmousemove(VARIANT);
    HRESULT get_onmousemove(VARIANT*);
    HRESULT put_onmouseout(VARIANT);
    HRESULT get_onmouseout(VARIANT*);
    HRESULT put_onmouseover(VARIANT);
    HRESULT get_onmouseover(VARIANT*);
    HRESULT put_onreadystatechange(VARIANT);
    HRESULT get_onreadystatechange(VARIANT*);
    HRESULT put_onafterupdate(VARIANT);
    HRESULT get_onafterupdate(VARIANT*);
    HRESULT put_onrowexit(VARIANT);
    HRESULT get_onrowexit(VARIANT*);
    HRESULT put_onrowenter(VARIANT);
    HRESULT get_onrowenter(VARIANT*);
    HRESULT put_ondragstart(VARIANT);
    HRESULT get_ondragstart(VARIANT*);
    HRESULT put_onselectstart(VARIANT);
    HRESULT get_onselectstart(VARIANT*);
    HRESULT elementFromPoint(int, int, IHTMLElement*);
    HRESULT get_parentWindow(IHTMLWindow2*);
    HRESULT get_styleSheets(IHTMLStyleSheetsCollection*);
    HRESULT put_onbeforeupdate(VARIANT);
    HRESULT get_onbeforeupdate(VARIANT*);
    HRESULT put_onerrorupdate(VARIANT);
    HRESULT get_onerrorupdate(VARIANT*);
    HRESULT toString(BSTR*);
    HRESULT createStyleSheet(BSTR, int, IHTMLStyleSheet*);
}
enum IID_IHTMLWindow2 = GUID(0x332c4427, 0x26cb, 0x11d0, [0xb4, 0x83, 0x0, 0xc0, 0x4f, 0xd9, 0x1, 0x19]);
interface IHTMLWindow2 : IHTMLFramesCollection2
{
    HRESULT get_frames(IHTMLFramesCollection2*);
    HRESULT put_defaultStatus(BSTR);
    HRESULT get_defaultStatus(BSTR*);
    HRESULT put_status(BSTR);
    HRESULT get_status(BSTR*);
    HRESULT setTimeout(BSTR, int, VARIANT*, int*);
    HRESULT clearTimeout(int);
    HRESULT alert(BSTR);
    HRESULT confirm(BSTR, short*);
    HRESULT prompt(BSTR, BSTR, VARIANT*);
    HRESULT get_Image(IHTMLImageElementFactory*);
    HRESULT get_location(IHTMLLocation*);
    HRESULT get_history(IOmHistory*);
    HRESULT close();
    HRESULT put_opener(VARIANT);
    HRESULT get_opener(VARIANT*);
    HRESULT get_navigator(IOmNavigator*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT get_parent(IHTMLWindow2*);
    HRESULT open(BSTR, BSTR, BSTR, short, IHTMLWindow2*);
    HRESULT get_self(IHTMLWindow2*);
    HRESULT get_top(IHTMLWindow2*);
    HRESULT get_window(IHTMLWindow2*);
    HRESULT navigate(BSTR);
    HRESULT put_onfocus(VARIANT);
    HRESULT get_onfocus(VARIANT*);
    HRESULT put_onblur(VARIANT);
    HRESULT get_onblur(VARIANT*);
    HRESULT put_onload(VARIANT);
    HRESULT get_onload(VARIANT*);
    HRESULT put_onbeforeunload(VARIANT);
    HRESULT get_onbeforeunload(VARIANT*);
    HRESULT put_onunload(VARIANT);
    HRESULT get_onunload(VARIANT*);
    HRESULT put_onhelp(VARIANT);
    HRESULT get_onhelp(VARIANT*);
    HRESULT put_onerror(VARIANT);
    HRESULT get_onerror(VARIANT*);
    HRESULT put_onresize(VARIANT);
    HRESULT get_onresize(VARIANT*);
    HRESULT put_onscroll(VARIANT);
    HRESULT get_onscroll(VARIANT*);
    HRESULT get_document(IHTMLDocument2*);
    HRESULT get_event(IHTMLEventObj*);
    HRESULT get__newEnum(IUnknown*);
    HRESULT showModalDialog(BSTR, VARIANT*, VARIANT*, VARIANT*);
    HRESULT showHelp(BSTR, VARIANT, BSTR);
    HRESULT get_screen(IHTMLScreen*);
    HRESULT get_Option(IHTMLOptionElementFactory*);
    HRESULT focus();
    HRESULT get_closed(short*);
    HRESULT blur();
    HRESULT scroll(int, int);
    HRESULT get_clientInformation(IOmNavigator*);
    HRESULT setInterval(BSTR, int, VARIANT*, int*);
    HRESULT clearInterval(int);
    HRESULT put_offscreenBuffering(VARIANT);
    HRESULT get_offscreenBuffering(VARIANT*);
    HRESULT execScript(BSTR, BSTR, VARIANT*);
    HRESULT toString(BSTR*);
    HRESULT scrollBy(int, int);
    HRESULT scrollTo(int, int);
    HRESULT moveTo(int, int);
    HRESULT moveBy(int, int);
    HRESULT resizeTo(int, int);
    HRESULT resizeBy(int, int);
    HRESULT get_external(IDispatch*);
}
enum IID_IHTMLWindow3 = GUID(0x3050f4ae, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLWindow3 : IDispatch
{
    HRESULT get_screenLeft(int*);
    HRESULT get_screenTop(int*);
    HRESULT attachEvent(BSTR, IDispatch, short*);
    HRESULT detachEvent(BSTR, IDispatch);
    HRESULT setTimeout(VARIANT*, int, VARIANT*, int*);
    HRESULT setInterval(VARIANT*, int, VARIANT*, int*);
    HRESULT print();
    HRESULT put_onbeforeprint(VARIANT);
    HRESULT get_onbeforeprint(VARIANT*);
    HRESULT put_onafterprint(VARIANT);
    HRESULT get_onafterprint(VARIANT*);
    HRESULT get_clipboardData(IHTMLDataTransfer*);
    HRESULT showModelessDialog(BSTR, VARIANT*, VARIANT*, IHTMLWindow2*);
}
enum IID_IHTMLFrameBase = GUID(0x3050f311, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFrameBase : IDispatch
{
    HRESULT put_src(BSTR);
    HRESULT get_src(BSTR*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_border(VARIANT);
    HRESULT get_border(VARIANT*);
    HRESULT put_frameBorder(BSTR);
    HRESULT get_frameBorder(BSTR*);
    HRESULT put_frameSpacing(VARIANT);
    HRESULT get_frameSpacing(VARIANT*);
    HRESULT put_marginWidth(VARIANT);
    HRESULT get_marginWidth(VARIANT*);
    HRESULT put_marginHeight(VARIANT);
    HRESULT get_marginHeight(VARIANT*);
    HRESULT put_noResize(short);
    HRESULT get_noResize(short*);
    HRESULT put_scrolling(BSTR);
    HRESULT get_scrolling(BSTR*);
}
enum IID_IHTMLStorage = GUID(0x30510474, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStorage : IDispatch
{
    HRESULT get_length(int*);
    HRESULT get_remainingSpace(int*);
    HRESULT key(int, BSTR*);
    HRESULT getItem(BSTR, VARIANT*);
    HRESULT setItem(BSTR, BSTR);
    HRESULT removeItem(BSTR);
    HRESULT clear();
}
enum IID_IHTMLPerformance = GUID(0x3051074e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLPerformance : IDispatch
{
    HRESULT get_navigation(IHTMLPerformanceNavigation*);
    HRESULT get_timing(IHTMLPerformanceTiming*);
    HRESULT toString(BSTR*);
    HRESULT toJSON(VARIANT*);
}
enum IID_IHTMLApplicationCache = GUID(0x30510828, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLApplicationCache : IDispatch
{
    HRESULT get_status(int*);
    HRESULT put_onchecking(VARIANT);
    HRESULT get_onchecking(VARIANT*);
    HRESULT put_onerror(VARIANT);
    HRESULT get_onerror(VARIANT*);
    HRESULT put_onnoupdate(VARIANT);
    HRESULT get_onnoupdate(VARIANT*);
    HRESULT put_ondownloading(VARIANT);
    HRESULT get_ondownloading(VARIANT*);
    HRESULT put_onprogress(VARIANT);
    HRESULT get_onprogress(VARIANT*);
    HRESULT put_onupdateready(VARIANT);
    HRESULT get_onupdateready(VARIANT*);
    HRESULT put_oncached(VARIANT);
    HRESULT get_oncached(VARIANT*);
    HRESULT put_onobsolete(VARIANT);
    HRESULT get_onobsolete(VARIANT*);
    HRESULT update();
    HRESULT swapCache();
    HRESULT abort();
}
enum IID_IHTMLScreen = GUID(0x3050f35c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLScreen : IDispatch
{
    HRESULT get_colorDepth(int*);
    HRESULT put_bufferDepth(int);
    HRESULT get_bufferDepth(int*);
    HRESULT get_width(int*);
    HRESULT get_height(int*);
    HRESULT put_updateInterval(int);
    HRESULT get_updateInterval(int*);
    HRESULT get_availHeight(int*);
    HRESULT get_availWidth(int*);
    HRESULT get_fontSmoothingEnabled(short*);
}
enum IID_IHTMLScreen2 = GUID(0x3050f84a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLScreen2 : IDispatch
{
    HRESULT get_logicalXDPI(int*);
    HRESULT get_logicalYDPI(int*);
    HRESULT get_deviceXDPI(int*);
    HRESULT get_deviceYDPI(int*);
}
enum IID_IHTMLScreen3 = GUID(0x305104a1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLScreen3 : IDispatch
{
    HRESULT get_systemXDPI(int*);
    HRESULT get_systemYDPI(int*);
}
enum IID_IHTMLScreen4 = GUID(0x3051076b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLScreen4 : IDispatch
{
    HRESULT get_pixelDepth(int*);
}
enum IID_IHTMLWindow4 = GUID(0x3050f6cf, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLWindow4 : IDispatch
{
    HRESULT createPopup(VARIANT*, IDispatch*);
    HRESULT get_frameElement(IHTMLFrameBase*);
}
enum IID_IHTMLWindow5 = GUID(0x3051040e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLWindow5 : IDispatch
{
    HRESULT put_XMLHttpRequest(VARIANT);
    HRESULT get_XMLHttpRequest(VARIANT*);
}
enum IID_IHTMLWindow6 = GUID(0x30510453, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLWindow6 : IDispatch
{
    HRESULT put_XDomainRequest(VARIANT);
    HRESULT get_XDomainRequest(VARIANT*);
    HRESULT get_sessionStorage(IHTMLStorage*);
    HRESULT get_localStorage(IHTMLStorage*);
    HRESULT put_onhashchange(VARIANT);
    HRESULT get_onhashchange(VARIANT*);
    HRESULT get_maxConnectionsPerServer(int*);
    HRESULT postMessage(BSTR, VARIANT);
    HRESULT toStaticHTML(BSTR, BSTR*);
    HRESULT put_onmessage(VARIANT);
    HRESULT get_onmessage(VARIANT*);
    HRESULT msWriteProfilerMark(BSTR);
}
enum IID_IHTMLWindow7 = GUID(0x305104b7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLWindow7 : IDispatch
{
    HRESULT getSelection(IHTMLSelection*);
    HRESULT getComputedStyle(IHTMLDOMNode, BSTR, IHTMLCSSStyleDeclaration*);
    HRESULT get_styleMedia(IHTMLStyleMedia*);
    HRESULT put_performance(VARIANT);
    HRESULT get_performance(VARIANT*);
    HRESULT get_innerWidth(int*);
    HRESULT get_innerHeight(int*);
    HRESULT get_pageXOffset(int*);
    HRESULT get_pageYOffset(int*);
    HRESULT get_screenX(int*);
    HRESULT get_screenY(int*);
    HRESULT get_outerWidth(int*);
    HRESULT get_outerHeight(int*);
    HRESULT put_onabort(VARIANT);
    HRESULT get_onabort(VARIANT*);
    HRESULT put_oncanplay(VARIANT);
    HRESULT get_oncanplay(VARIANT*);
    HRESULT put_oncanplaythrough(VARIANT);
    HRESULT get_oncanplaythrough(VARIANT*);
    HRESULT put_onchange(VARIANT);
    HRESULT get_onchange(VARIANT*);
    HRESULT put_onclick(VARIANT);
    HRESULT get_onclick(VARIANT*);
    HRESULT put_oncontextmenu(VARIANT);
    HRESULT get_oncontextmenu(VARIANT*);
    HRESULT put_ondblclick(VARIANT);
    HRESULT get_ondblclick(VARIANT*);
    HRESULT put_ondrag(VARIANT);
    HRESULT get_ondrag(VARIANT*);
    HRESULT put_ondragend(VARIANT);
    HRESULT get_ondragend(VARIANT*);
    HRESULT put_ondragenter(VARIANT);
    HRESULT get_ondragenter(VARIANT*);
    HRESULT put_ondragleave(VARIANT);
    HRESULT get_ondragleave(VARIANT*);
    HRESULT put_ondragover(VARIANT);
    HRESULT get_ondragover(VARIANT*);
    HRESULT put_ondragstart(VARIANT);
    HRESULT get_ondragstart(VARIANT*);
    HRESULT put_ondrop(VARIANT);
    HRESULT get_ondrop(VARIANT*);
    HRESULT put_ondurationchange(VARIANT);
    HRESULT get_ondurationchange(VARIANT*);
    HRESULT put_onfocusin(VARIANT);
    HRESULT get_onfocusin(VARIANT*);
    HRESULT put_onfocusout(VARIANT);
    HRESULT get_onfocusout(VARIANT*);
    HRESULT put_oninput(VARIANT);
    HRESULT get_oninput(VARIANT*);
    HRESULT put_onemptied(VARIANT);
    HRESULT get_onemptied(VARIANT*);
    HRESULT put_onended(VARIANT);
    HRESULT get_onended(VARIANT*);
    HRESULT put_onkeydown(VARIANT);
    HRESULT get_onkeydown(VARIANT*);
    HRESULT put_onkeypress(VARIANT);
    HRESULT get_onkeypress(VARIANT*);
    HRESULT put_onkeyup(VARIANT);
    HRESULT get_onkeyup(VARIANT*);
    HRESULT put_onloadeddata(VARIANT);
    HRESULT get_onloadeddata(VARIANT*);
    HRESULT put_onloadedmetadata(VARIANT);
    HRESULT get_onloadedmetadata(VARIANT*);
    HRESULT put_onloadstart(VARIANT);
    HRESULT get_onloadstart(VARIANT*);
    HRESULT put_onmousedown(VARIANT);
    HRESULT get_onmousedown(VARIANT*);
    HRESULT put_onmouseenter(VARIANT);
    HRESULT get_onmouseenter(VARIANT*);
    HRESULT put_onmouseleave(VARIANT);
    HRESULT get_onmouseleave(VARIANT*);
    HRESULT put_onmousemove(VARIANT);
    HRESULT get_onmousemove(VARIANT*);
    HRESULT put_onmouseout(VARIANT);
    HRESULT get_onmouseout(VARIANT*);
    HRESULT put_onmouseover(VARIANT);
    HRESULT get_onmouseover(VARIANT*);
    HRESULT put_onmouseup(VARIANT);
    HRESULT get_onmouseup(VARIANT*);
    HRESULT put_onmousewheel(VARIANT);
    HRESULT get_onmousewheel(VARIANT*);
    HRESULT put_onoffline(VARIANT);
    HRESULT get_onoffline(VARIANT*);
    HRESULT put_ononline(VARIANT);
    HRESULT get_ononline(VARIANT*);
    HRESULT put_onprogress(VARIANT);
    HRESULT get_onprogress(VARIANT*);
    HRESULT put_onratechange(VARIANT);
    HRESULT get_onratechange(VARIANT*);
    HRESULT put_onreadystatechange(VARIANT);
    HRESULT get_onreadystatechange(VARIANT*);
    HRESULT put_onreset(VARIANT);
    HRESULT get_onreset(VARIANT*);
    HRESULT put_onseeked(VARIANT);
    HRESULT get_onseeked(VARIANT*);
    HRESULT put_onseeking(VARIANT);
    HRESULT get_onseeking(VARIANT*);
    HRESULT put_onselect(VARIANT);
    HRESULT get_onselect(VARIANT*);
    HRESULT put_onstalled(VARIANT);
    HRESULT get_onstalled(VARIANT*);
    HRESULT put_onstorage(VARIANT);
    HRESULT get_onstorage(VARIANT*);
    HRESULT put_onsubmit(VARIANT);
    HRESULT get_onsubmit(VARIANT*);
    HRESULT put_onsuspend(VARIANT);
    HRESULT get_onsuspend(VARIANT*);
    HRESULT put_ontimeupdate(VARIANT);
    HRESULT get_ontimeupdate(VARIANT*);
    HRESULT put_onpause(VARIANT);
    HRESULT get_onpause(VARIANT*);
    HRESULT put_onplay(VARIANT);
    HRESULT get_onplay(VARIANT*);
    HRESULT put_onplaying(VARIANT);
    HRESULT get_onplaying(VARIANT*);
    HRESULT put_onvolumechange(VARIANT);
    HRESULT get_onvolumechange(VARIANT*);
    HRESULT put_onwaiting(VARIANT);
    HRESULT get_onwaiting(VARIANT*);
}
enum IID_IHTMLWindow8 = GUID(0x305107ab, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLWindow8 : IDispatch
{
    HRESULT put_onmspointerdown(VARIANT);
    HRESULT get_onmspointerdown(VARIANT*);
    HRESULT put_onmspointermove(VARIANT);
    HRESULT get_onmspointermove(VARIANT*);
    HRESULT put_onmspointerup(VARIANT);
    HRESULT get_onmspointerup(VARIANT*);
    HRESULT put_onmspointerover(VARIANT);
    HRESULT get_onmspointerover(VARIANT*);
    HRESULT put_onmspointerout(VARIANT);
    HRESULT get_onmspointerout(VARIANT*);
    HRESULT put_onmspointercancel(VARIANT);
    HRESULT get_onmspointercancel(VARIANT*);
    HRESULT put_onmspointerhover(VARIANT);
    HRESULT get_onmspointerhover(VARIANT*);
    HRESULT put_onmsgesturestart(VARIANT);
    HRESULT get_onmsgesturestart(VARIANT*);
    HRESULT put_onmsgesturechange(VARIANT);
    HRESULT get_onmsgesturechange(VARIANT*);
    HRESULT put_onmsgestureend(VARIANT);
    HRESULT get_onmsgestureend(VARIANT*);
    HRESULT put_onmsgesturehold(VARIANT);
    HRESULT get_onmsgesturehold(VARIANT*);
    HRESULT put_onmsgesturetap(VARIANT);
    HRESULT get_onmsgesturetap(VARIANT*);
    HRESULT put_onmsgesturedoubletap(VARIANT);
    HRESULT get_onmsgesturedoubletap(VARIANT*);
    HRESULT put_onmsinertiastart(VARIANT);
    HRESULT get_onmsinertiastart(VARIANT*);
    HRESULT get_applicationCache(IHTMLApplicationCache*);
    HRESULT put_onpopstate(VARIANT);
    HRESULT get_onpopstate(VARIANT*);
}
enum IID_DispHTMLScreen = GUID(0x3050f591, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLScreen : IDispatch
{
}
enum IID_DispHTMLWindow2 = GUID(0x3050f55d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLWindow2 : IDispatch
{
}
enum IID_DispHTMLWindowProxy = GUID(0x3050f55e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLWindowProxy : IDispatch
{
}
enum IID_IHTMLDocumentCompatibleInfo = GUID(0x3051041a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDocumentCompatibleInfo : IDispatch
{
    HRESULT get_userAgent(BSTR*);
    HRESULT get_version(BSTR*);
}
enum IID_IHTMLDocumentCompatibleInfoCollection = GUID(0x30510418, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDocumentCompatibleInfoCollection : IDispatch
{
    HRESULT get_length(int*);
    HRESULT item(int, IHTMLDocumentCompatibleInfo*);
}
enum IID_DispHTMLDocumentCompatibleInfo = GUID(0x3050f53e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLDocumentCompatibleInfo : IDispatch
{
}
enum IID_DispHTMLDocumentCompatibleInfoCollection = GUID(0x3050f53f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLDocumentCompatibleInfoCollection : IDispatch
{
}
enum IID_HTMLDocumentEvents4 = GUID(0x30510737, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLDocumentEvents4 : IDispatch
{
}
enum IID_HTMLDocumentEvents3 = GUID(0x3050f5a0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLDocumentEvents3 : IDispatch
{
}
enum IID_HTMLDocumentEvents2 = GUID(0x3050f613, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLDocumentEvents2 : IDispatch
{
}
enum IID_HTMLDocumentEvents = GUID(0x3050f260, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLDocumentEvents : IDispatch
{
}
enum IID_ISVGSVGElement = GUID(0x305104e7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGSVGElement : IDispatch
{
    HRESULT putref_x(ISVGAnimatedLength);
    HRESULT get_x(ISVGAnimatedLength*);
    HRESULT putref_y(ISVGAnimatedLength);
    HRESULT get_y(ISVGAnimatedLength*);
    HRESULT putref_width(ISVGAnimatedLength);
    HRESULT get_width(ISVGAnimatedLength*);
    HRESULT putref_height(ISVGAnimatedLength);
    HRESULT get_height(ISVGAnimatedLength*);
    HRESULT put_contentScriptType(BSTR);
    HRESULT get_contentScriptType(BSTR*);
    HRESULT put_contentStyleType(BSTR);
    HRESULT get_contentStyleType(BSTR*);
    HRESULT putref_viewport(ISVGRect);
    HRESULT get_viewport(ISVGRect*);
    HRESULT put_pixelUnitToMillimeterX(float);
    HRESULT get_pixelUnitToMillimeterX(float*);
    HRESULT put_pixelUnitToMillimeterY(float);
    HRESULT get_pixelUnitToMillimeterY(float*);
    HRESULT put_screenPixelToMillimeterX(float);
    HRESULT get_screenPixelToMillimeterX(float*);
    HRESULT put_screenPixelToMillimeterY(float);
    HRESULT get_screenPixelToMillimeterY(float*);
    HRESULT put_useCurrentView(short);
    HRESULT get_useCurrentView(short*);
    HRESULT putref_currentView(ISVGViewSpec);
    HRESULT get_currentView(ISVGViewSpec*);
    HRESULT put_currentScale(float);
    HRESULT get_currentScale(float*);
    HRESULT putref_currentTranslate(ISVGPoint);
    HRESULT get_currentTranslate(ISVGPoint*);
    HRESULT suspendRedraw(uint, uint*);
    HRESULT unsuspendRedraw(uint);
    HRESULT unsuspendRedrawAll();
    HRESULT forceRedraw();
    HRESULT pauseAnimations();
    HRESULT unpauseAnimations();
    HRESULT animationsPaused(short*);
    HRESULT getCurrentTime(float*);
    HRESULT setCurrentTime(float);
    HRESULT getIntersectionList(ISVGRect, ISVGElement, VARIANT*);
    HRESULT getEnclosureList(ISVGRect, ISVGElement, VARIANT*);
    HRESULT checkIntersection(ISVGElement, ISVGRect, short*);
    HRESULT checkEnclosure(ISVGElement, ISVGRect, short*);
    HRESULT deselectAll();
    HRESULT createSVGNumber(ISVGNumber*);
    HRESULT createSVGLength(ISVGLength*);
    HRESULT createSVGAngle(ISVGAngle*);
    HRESULT createSVGPoint(ISVGPoint*);
    HRESULT createSVGMatrix(ISVGMatrix*);
    HRESULT createSVGRect(ISVGRect*);
    HRESULT createSVGTransform(ISVGTransform*);
    HRESULT createSVGTransformFromMatrix(ISVGMatrix, ISVGTransform*);
    HRESULT getElementById(BSTR, IHTMLElement*);
}
enum IID_IDOMNodeIterator = GUID(0x30510746, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMNodeIterator : IDispatch
{
    HRESULT get_root(IDispatch*);
    HRESULT get_whatToShow(uint*);
    HRESULT get_filter(IDispatch*);
    HRESULT get_expandEntityReferences(short*);
    HRESULT nextNode(IDispatch*);
    HRESULT previousNode(IDispatch*);
    HRESULT detach();
}
enum IID_IDOMTreeWalker = GUID(0x30510748, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMTreeWalker : IDispatch
{
    HRESULT get_root(IDispatch*);
    HRESULT get_whatToShow(uint*);
    HRESULT get_filter(IDispatch*);
    HRESULT get_expandEntityReferences(short*);
    HRESULT putref_currentNode(IDispatch);
    HRESULT get_currentNode(IDispatch*);
    HRESULT parentNode(IDispatch*);
    HRESULT firstChild(IDispatch*);
    HRESULT lastChild(IDispatch*);
    HRESULT previousSibling(IDispatch*);
    HRESULT nextSibling(IDispatch*);
    HRESULT previousNode(IDispatch*);
    HRESULT nextNode(IDispatch*);
}
enum IID_IDOMProcessingInstruction = GUID(0x30510742, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMProcessingInstruction : IDispatch
{
    HRESULT get_target(BSTR*);
    HRESULT put_data(BSTR);
    HRESULT get_data(BSTR*);
}
enum IID_IHTMLDocument3 = GUID(0x3050f485, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDocument3 : IDispatch
{
    HRESULT releaseCapture();
    HRESULT recalc(short);
    HRESULT createTextNode(BSTR, IHTMLDOMNode*);
    HRESULT get_documentElement(IHTMLElement*);
    HRESULT get_uniqueID(BSTR*);
    HRESULT attachEvent(BSTR, IDispatch, short*);
    HRESULT detachEvent(BSTR, IDispatch);
    HRESULT put_onrowsdelete(VARIANT);
    HRESULT get_onrowsdelete(VARIANT*);
    HRESULT put_onrowsinserted(VARIANT);
    HRESULT get_onrowsinserted(VARIANT*);
    HRESULT put_oncellchange(VARIANT);
    HRESULT get_oncellchange(VARIANT*);
    HRESULT put_ondatasetchanged(VARIANT);
    HRESULT get_ondatasetchanged(VARIANT*);
    HRESULT put_ondataavailable(VARIANT);
    HRESULT get_ondataavailable(VARIANT*);
    HRESULT put_ondatasetcomplete(VARIANT);
    HRESULT get_ondatasetcomplete(VARIANT*);
    HRESULT put_onpropertychange(VARIANT);
    HRESULT get_onpropertychange(VARIANT*);
    HRESULT put_dir(BSTR);
    HRESULT get_dir(BSTR*);
    HRESULT put_oncontextmenu(VARIANT);
    HRESULT get_oncontextmenu(VARIANT*);
    HRESULT put_onstop(VARIANT);
    HRESULT get_onstop(VARIANT*);
    HRESULT createDocumentFragment(IHTMLDocument2*);
    HRESULT get_parentDocument(IHTMLDocument2*);
    HRESULT put_enableDownload(short);
    HRESULT get_enableDownload(short*);
    HRESULT put_baseUrl(BSTR);
    HRESULT get_baseUrl(BSTR*);
    HRESULT get_childNodes(IDispatch*);
    HRESULT put_inheritStyleSheets(short);
    HRESULT get_inheritStyleSheets(short*);
    HRESULT put_onbeforeeditfocus(VARIANT);
    HRESULT get_onbeforeeditfocus(VARIANT*);
    HRESULT getElementsByName(BSTR, IHTMLElementCollection*);
    HRESULT getElementById(BSTR, IHTMLElement*);
    HRESULT getElementsByTagName(BSTR, IHTMLElementCollection*);
}
enum IID_IHTMLDocument4 = GUID(0x3050f69a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDocument4 : IDispatch
{
    HRESULT focus();
    HRESULT hasFocus(short*);
    HRESULT put_onselectionchange(VARIANT);
    HRESULT get_onselectionchange(VARIANT*);
    HRESULT get_namespaces(IDispatch*);
    HRESULT createDocumentFromUrl(BSTR, BSTR, IHTMLDocument2*);
    HRESULT put_media(BSTR);
    HRESULT get_media(BSTR*);
    HRESULT createEventObject(VARIANT*, IHTMLEventObj*);
    HRESULT fireEvent(BSTR, VARIANT*, short*);
    HRESULT createRenderStyle(BSTR, IHTMLRenderStyle*);
    HRESULT put_oncontrolselect(VARIANT);
    HRESULT get_oncontrolselect(VARIANT*);
    HRESULT get_URLUnencoded(BSTR*);
}
enum IID_IHTMLDocument5 = GUID(0x3050f80c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDocument5 : IDispatch
{
    HRESULT put_onmousewheel(VARIANT);
    HRESULT get_onmousewheel(VARIANT*);
    HRESULT get_doctype(IHTMLDOMNode*);
    HRESULT get_implementation(IHTMLDOMImplementation*);
    HRESULT createAttribute(BSTR, IHTMLDOMAttribute*);
    HRESULT createComment(BSTR, IHTMLDOMNode*);
    HRESULT put_onfocusin(VARIANT);
    HRESULT get_onfocusin(VARIANT*);
    HRESULT put_onfocusout(VARIANT);
    HRESULT get_onfocusout(VARIANT*);
    HRESULT put_onactivate(VARIANT);
    HRESULT get_onactivate(VARIANT*);
    HRESULT put_ondeactivate(VARIANT);
    HRESULT get_ondeactivate(VARIANT*);
    HRESULT put_onbeforeactivate(VARIANT);
    HRESULT get_onbeforeactivate(VARIANT*);
    HRESULT put_onbeforedeactivate(VARIANT);
    HRESULT get_onbeforedeactivate(VARIANT*);
    HRESULT get_compatMode(BSTR*);
}
enum IID_IHTMLDocument6 = GUID(0x30510417, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDocument6 : IDispatch
{
    HRESULT get_compatible(IHTMLDocumentCompatibleInfoCollection*);
    HRESULT get_documentMode(VARIANT*);
    HRESULT put_onstorage(VARIANT);
    HRESULT get_onstorage(VARIANT*);
    HRESULT put_onstoragecommit(VARIANT);
    HRESULT get_onstoragecommit(VARIANT*);
    HRESULT getElementById(BSTR, IHTMLElement2*);
    HRESULT updateSettings();
}
enum IID_IHTMLDocument8 = GUID(0x305107d0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDocument8 : IDispatch
{
    HRESULT put_onmscontentzoom(VARIANT);
    HRESULT get_onmscontentzoom(VARIANT*);
    HRESULT put_onmspointerdown(VARIANT);
    HRESULT get_onmspointerdown(VARIANT*);
    HRESULT put_onmspointermove(VARIANT);
    HRESULT get_onmspointermove(VARIANT*);
    HRESULT put_onmspointerup(VARIANT);
    HRESULT get_onmspointerup(VARIANT*);
    HRESULT put_onmspointerover(VARIANT);
    HRESULT get_onmspointerover(VARIANT*);
    HRESULT put_onmspointerout(VARIANT);
    HRESULT get_onmspointerout(VARIANT*);
    HRESULT put_onmspointercancel(VARIANT);
    HRESULT get_onmspointercancel(VARIANT*);
    HRESULT put_onmspointerhover(VARIANT);
    HRESULT get_onmspointerhover(VARIANT*);
    HRESULT put_onmsgesturestart(VARIANT);
    HRESULT get_onmsgesturestart(VARIANT*);
    HRESULT put_onmsgesturechange(VARIANT);
    HRESULT get_onmsgesturechange(VARIANT*);
    HRESULT put_onmsgestureend(VARIANT);
    HRESULT get_onmsgestureend(VARIANT*);
    HRESULT put_onmsgesturehold(VARIANT);
    HRESULT get_onmsgesturehold(VARIANT*);
    HRESULT put_onmsgesturetap(VARIANT);
    HRESULT get_onmsgesturetap(VARIANT*);
    HRESULT put_onmsgesturedoubletap(VARIANT);
    HRESULT get_onmsgesturedoubletap(VARIANT*);
    HRESULT put_onmsinertiastart(VARIANT);
    HRESULT get_onmsinertiastart(VARIANT*);
    HRESULT elementsFromPoint(float, float, IHTMLDOMChildrenCollection*);
    HRESULT elementsFromRect(float, float, float, float, IHTMLDOMChildrenCollection*);
    HRESULT put_onmsmanipulationstatechanged(VARIANT);
    HRESULT get_onmsmanipulationstatechanged(VARIANT*);
    HRESULT put_msCapsLockWarningOff(short);
    HRESULT get_msCapsLockWarningOff(short*);
}
enum IID_IDocumentEvent = GUID(0x305104bc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDocumentEvent : IDispatch
{
    HRESULT createEvent(BSTR, IDOMEvent*);
}
enum IID_IDocumentRange = GUID(0x305104af, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDocumentRange : IDispatch
{
    HRESULT createRange(IHTMLDOMRange*);
}
enum IID_IDocumentSelector = GUID(0x30510462, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDocumentSelector : IDispatch
{
    HRESULT querySelector(BSTR, IHTMLElement*);
    HRESULT querySelectorAll(BSTR, IHTMLDOMChildrenCollection*);
}
enum IID_IDocumentTraversal = GUID(0x30510744, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDocumentTraversal : IDispatch
{
    HRESULT createNodeIterator(IDispatch, int, VARIANT*, short, IDOMNodeIterator*);
    HRESULT createTreeWalker(IDispatch, int, VARIANT*, short, IDOMTreeWalker*);
}
enum IID_DispHTMLDocument = GUID(0x3050f55f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLDocument : IDispatch
{
}
enum IID_DWebBridgeEvents = GUID(0xa6d897ff, 0xa95, 0x11d1, [0xb0, 0xba, 0x0, 0x60, 0x8, 0x16, 0x6e, 0x11]);
interface DWebBridgeEvents : IDispatch
{
}
enum IID_IWebBridge = GUID(0xae24fdad, 0x3c6, 0x11d1, [0x8b, 0x76, 0x0, 0x80, 0xc7, 0x44, 0xf3, 0x89]);
interface IWebBridge : IDispatch
{
    HRESULT put_URL(BSTR);
    HRESULT get_URL(BSTR*);
    HRESULT put_Scrollbar(short);
    HRESULT get_Scrollbar(short*);
    HRESULT put_embed(short);
    HRESULT get_embed(short*);
    HRESULT get_event(IDispatch*);
    HRESULT get_readyState(int*);
    HRESULT AboutBox();
}
enum IID_IWBScriptControl = GUID(0xa5170870, 0xcf8, 0x11d1, [0x8b, 0x91, 0x0, 0x80, 0xc7, 0x44, 0xf3, 0x89]);
interface IWBScriptControl : IDispatch
{
    HRESULT raiseEvent(BSTR, VARIANT);
    HRESULT bubbleEvent();
    HRESULT setContextMenu(VARIANT);
    HRESULT put_selectableContent(short);
    HRESULT get_selectableContent(short*);
    HRESULT get_frozen(short*);
    HRESULT put_scrollbar(short);
    HRESULT get_scrollbar(short*);
    HRESULT get_version(BSTR*);
    HRESULT get_visibility(short*);
    HRESULT put_onvisibilitychange(VARIANT);
    HRESULT get_onvisibilitychange(VARIANT*);
}
enum IID_IHTMLEmbedElement = GUID(0x3050f25f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLEmbedElement : IDispatch
{
    HRESULT put_hidden(BSTR);
    HRESULT get_hidden(BSTR*);
    HRESULT get_palette(BSTR*);
    HRESULT get_pluginspage(BSTR*);
    HRESULT put_src(BSTR);
    HRESULT get_src(BSTR*);
    HRESULT put_units(BSTR);
    HRESULT get_units(BSTR*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_width(VARIANT);
    HRESULT get_width(VARIANT*);
    HRESULT put_height(VARIANT);
    HRESULT get_height(VARIANT*);
}
enum IID_IHTMLEmbedElement2 = GUID(0x30510493, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLEmbedElement2 : IDispatch
{
    HRESULT put_src(BSTR);
    HRESULT get_src(BSTR*);
    HRESULT get_pluginspage(BSTR*);
}
enum IID_DispHTMLEmbed = GUID(0x3050f52e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLEmbed : IDispatch
{
}
enum IID_HTMLMapEvents2 = GUID(0x3050f61e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLMapEvents2 : IDispatch
{
}
enum IID_HTMLMapEvents = GUID(0x3050f3ba, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLMapEvents : IDispatch
{
}
enum IID_IHTMLAreasCollection = GUID(0x3050f383, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLAreasCollection : IDispatch
{
    HRESULT put_length(int);
    HRESULT get_length(int*);
    HRESULT get__newEnum(IUnknown*);
    HRESULT item(VARIANT, VARIANT, IDispatch*);
    HRESULT tags(VARIANT, IDispatch*);
    HRESULT add(IHTMLElement, VARIANT);
    HRESULT remove(int);
}
enum IID_IHTMLAreasCollection2 = GUID(0x3050f5ec, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLAreasCollection2 : IDispatch
{
    HRESULT urns(VARIANT, IDispatch*);
}
enum IID_IHTMLAreasCollection3 = GUID(0x3050f837, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLAreasCollection3 : IDispatch
{
    HRESULT namedItem(BSTR, IDispatch*);
}
enum IID_IHTMLAreasCollection4 = GUID(0x30510492, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLAreasCollection4 : IDispatch
{
    HRESULT get_length(int*);
    HRESULT item(int, IHTMLElement2*);
    HRESULT namedItem(BSTR, IHTMLElement2*);
}
enum IID_IHTMLMapElement = GUID(0x3050f266, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLMapElement : IDispatch
{
    HRESULT get_areas(IHTMLAreasCollection*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
}
enum IID_DispHTMLAreasCollection = GUID(0x3050f56a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLAreasCollection : IDispatch
{
}
enum IID_DispHTMLMapElement = GUID(0x3050f526, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLMapElement : IDispatch
{
}
enum IID_HTMLAreaEvents2 = GUID(0x3050f611, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLAreaEvents2 : IDispatch
{
}
enum IID_HTMLAreaEvents = GUID(0x3050f366, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLAreaEvents : IDispatch
{
}
enum IID_IHTMLAreaElement = GUID(0x3050f265, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLAreaElement : IDispatch
{
    HRESULT put_shape(BSTR);
    HRESULT get_shape(BSTR*);
    HRESULT put_coords(BSTR);
    HRESULT get_coords(BSTR*);
    HRESULT put_href(BSTR);
    HRESULT get_href(BSTR*);
    HRESULT put_target(BSTR);
    HRESULT get_target(BSTR*);
    HRESULT put_alt(BSTR);
    HRESULT get_alt(BSTR*);
    HRESULT put_noHref(short);
    HRESULT get_noHref(short*);
    HRESULT put_host(BSTR);
    HRESULT get_host(BSTR*);
    HRESULT put_hostname(BSTR);
    HRESULT get_hostname(BSTR*);
    HRESULT put_pathname(BSTR);
    HRESULT get_pathname(BSTR*);
    HRESULT put_port(BSTR);
    HRESULT get_port(BSTR*);
    HRESULT put_protocol(BSTR);
    HRESULT get_protocol(BSTR*);
    HRESULT put_search(BSTR);
    HRESULT get_search(BSTR*);
    HRESULT put_hash(BSTR);
    HRESULT get_hash(BSTR*);
    HRESULT put_onblur(VARIANT);
    HRESULT get_onblur(VARIANT*);
    HRESULT put_onfocus(VARIANT);
    HRESULT get_onfocus(VARIANT*);
    HRESULT put_tabIndex(short);
    HRESULT get_tabIndex(short*);
    HRESULT focus();
    HRESULT blur();
}
enum IID_IHTMLAreaElement2 = GUID(0x3051041f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLAreaElement2 : IDispatch
{
    HRESULT put_shape(BSTR);
    HRESULT get_shape(BSTR*);
    HRESULT put_coords(BSTR);
    HRESULT get_coords(BSTR*);
    HRESULT put_href(BSTR);
    HRESULT get_href(BSTR*);
}
enum IID_DispHTMLAreaElement = GUID(0x3050f503, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLAreaElement : IDispatch
{
}
enum IID_IHTMLTableCaption = GUID(0x3050f2eb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTableCaption : IDispatch
{
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
    HRESULT put_vAlign(BSTR);
    HRESULT get_vAlign(BSTR*);
}
enum IID_DispHTMLTableCaption = GUID(0x3050f508, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLTableCaption : IDispatch
{
}
enum IID_IHTMLCommentElement = GUID(0x3050f20c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLCommentElement : IDispatch
{
    HRESULT put_text(BSTR);
    HRESULT get_text(BSTR*);
    HRESULT put_atomic(int);
    HRESULT get_atomic(int*);
}
enum IID_IHTMLCommentElement2 = GUID(0x3050f813, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLCommentElement2 : IDispatch
{
    HRESULT put_data(BSTR);
    HRESULT get_data(BSTR*);
    HRESULT get_length(int*);
    HRESULT substringData(int, int, BSTR*);
    HRESULT appendData(BSTR);
    HRESULT insertData(int, BSTR);
    HRESULT deleteData(int, int);
    HRESULT replaceData(int, int, BSTR);
}
enum IID_IHTMLCommentElement3 = GUID(0x3051073f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLCommentElement3 : IDispatch
{
    HRESULT substringData(int, int, BSTR*);
    HRESULT insertData(int, BSTR);
    HRESULT deleteData(int, int);
    HRESULT replaceData(int, int, BSTR);
}
enum IID_DispHTMLCommentElement = GUID(0x3050f50a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLCommentElement : IDispatch
{
}
enum IID_IHTMLPhraseElement = GUID(0x3050f20a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLPhraseElement : IDispatch
{
}
enum IID_IHTMLPhraseElement2 = GUID(0x3050f824, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLPhraseElement2 : IDispatch
{
    HRESULT put_cite(BSTR);
    HRESULT get_cite(BSTR*);
    HRESULT put_dateTime(BSTR);
    HRESULT get_dateTime(BSTR*);
}
enum IID_IHTMLPhraseElement3 = GUID(0x3051043d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLPhraseElement3 : IDispatch
{
    HRESULT put_cite(BSTR);
    HRESULT get_cite(BSTR*);
}
enum IID_IHTMLSpanElement = GUID(0x3050f3f3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLSpanElement : IDispatch
{
}
enum IID_DispHTMLPhraseElement = GUID(0x3050f52d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLPhraseElement : IDispatch
{
}
enum IID_DispHTMLSpanElement = GUID(0x3050f548, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLSpanElement : IDispatch
{
}
enum IID_HTMLTableEvents2 = GUID(0x3050f623, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLTableEvents2 : IDispatch
{
}
enum IID_HTMLTableEvents = GUID(0x3050f407, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLTableEvents : IDispatch
{
}
enum IID_IHTMLTableSection = GUID(0x3050f23b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTableSection : IDispatch
{
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
    HRESULT put_vAlign(BSTR);
    HRESULT get_vAlign(BSTR*);
    HRESULT put_bgColor(VARIANT);
    HRESULT get_bgColor(VARIANT*);
    HRESULT get_rows(IHTMLElementCollection*);
    HRESULT insertRow(int, IDispatch*);
    HRESULT deleteRow(int);
}
enum IID_IHTMLTable = GUID(0x3050f21e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTable : IDispatch
{
    HRESULT put_cols(int);
    HRESULT get_cols(int*);
    HRESULT put_border(VARIANT);
    HRESULT get_border(VARIANT*);
    HRESULT put_frame(BSTR);
    HRESULT get_frame(BSTR*);
    HRESULT put_rules(BSTR);
    HRESULT get_rules(BSTR*);
    HRESULT put_cellSpacing(VARIANT);
    HRESULT get_cellSpacing(VARIANT*);
    HRESULT put_cellPadding(VARIANT);
    HRESULT get_cellPadding(VARIANT*);
    HRESULT put_background(BSTR);
    HRESULT get_background(BSTR*);
    HRESULT put_bgColor(VARIANT);
    HRESULT get_bgColor(VARIANT*);
    HRESULT put_borderColor(VARIANT);
    HRESULT get_borderColor(VARIANT*);
    HRESULT put_borderColorLight(VARIANT);
    HRESULT get_borderColorLight(VARIANT*);
    HRESULT put_borderColorDark(VARIANT);
    HRESULT get_borderColorDark(VARIANT*);
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
    HRESULT refresh();
    HRESULT get_rows(IHTMLElementCollection*);
    HRESULT put_width(VARIANT);
    HRESULT get_width(VARIANT*);
    HRESULT put_height(VARIANT);
    HRESULT get_height(VARIANT*);
    HRESULT put_dataPageSize(int);
    HRESULT get_dataPageSize(int*);
    HRESULT nextPage();
    HRESULT previousPage();
    HRESULT get_tHead(IHTMLTableSection*);
    HRESULT get_tFoot(IHTMLTableSection*);
    HRESULT get_tBodies(IHTMLElementCollection*);
    HRESULT get_caption(IHTMLTableCaption*);
    HRESULT createTHead(IDispatch*);
    HRESULT deleteTHead();
    HRESULT createTFoot(IDispatch*);
    HRESULT deleteTFoot();
    HRESULT createCaption(IHTMLTableCaption*);
    HRESULT deleteCaption();
    HRESULT insertRow(int, IDispatch*);
    HRESULT deleteRow(int);
    HRESULT get_readyState(BSTR*);
    HRESULT put_onreadystatechange(VARIANT);
    HRESULT get_onreadystatechange(VARIANT*);
}
enum IID_IHTMLTable2 = GUID(0x3050f4ad, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTable2 : IDispatch
{
    HRESULT firstPage();
    HRESULT lastPage();
    HRESULT get_cells(IHTMLElementCollection*);
    HRESULT moveRow(int, int, IDispatch*);
}
enum IID_IHTMLTable3 = GUID(0x3050f829, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTable3 : IDispatch
{
    HRESULT put_summary(BSTR);
    HRESULT get_summary(BSTR*);
}
enum IID_IHTMLTable4 = GUID(0x305106c2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTable4 : IDispatch
{
    HRESULT putref_tHead(IHTMLTableSection);
    HRESULT get_tHead(IHTMLTableSection*);
    HRESULT putref_tFoot(IHTMLTableSection);
    HRESULT get_tFoot(IHTMLTableSection*);
    HRESULT putref_caption(IHTMLTableCaption);
    HRESULT get_caption(IHTMLTableCaption*);
    HRESULT insertRow(int, IDispatch*);
    HRESULT deleteRow(int);
    HRESULT createTBody(IHTMLTableSection*);
}
enum IID_IHTMLTableCol = GUID(0x3050f23a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTableCol : IDispatch
{
    HRESULT put_span(int);
    HRESULT get_span(int*);
    HRESULT put_width(VARIANT);
    HRESULT get_width(VARIANT*);
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
    HRESULT put_vAlign(BSTR);
    HRESULT get_vAlign(BSTR*);
}
enum IID_IHTMLTableCol2 = GUID(0x3050f82a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTableCol2 : IDispatch
{
    HRESULT put_ch(BSTR);
    HRESULT get_ch(BSTR*);
    HRESULT put_chOff(BSTR);
    HRESULT get_chOff(BSTR*);
}
enum IID_IHTMLTableCol3 = GUID(0x305106c4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTableCol3 : IDispatch
{
    HRESULT put_ch(BSTR);
    HRESULT get_ch(BSTR*);
    HRESULT put_chOff(BSTR);
    HRESULT get_chOff(BSTR*);
}
enum IID_IHTMLTableSection2 = GUID(0x3050f5c7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTableSection2 : IDispatch
{
    HRESULT moveRow(int, int, IDispatch*);
}
enum IID_IHTMLTableSection3 = GUID(0x3050f82b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTableSection3 : IDispatch
{
    HRESULT put_ch(BSTR);
    HRESULT get_ch(BSTR*);
    HRESULT put_chOff(BSTR);
    HRESULT get_chOff(BSTR*);
}
enum IID_IHTMLTableSection4 = GUID(0x305106c5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTableSection4 : IDispatch
{
    HRESULT put_ch(BSTR);
    HRESULT get_ch(BSTR*);
    HRESULT put_chOff(BSTR);
    HRESULT get_chOff(BSTR*);
    HRESULT insertRow(int, IDispatch*);
    HRESULT deleteRow(int);
}
enum IID_IHTMLTableRow = GUID(0x3050f23c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTableRow : IDispatch
{
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
    HRESULT put_vAlign(BSTR);
    HRESULT get_vAlign(BSTR*);
    HRESULT put_bgColor(VARIANT);
    HRESULT get_bgColor(VARIANT*);
    HRESULT put_borderColor(VARIANT);
    HRESULT get_borderColor(VARIANT*);
    HRESULT put_borderColorLight(VARIANT);
    HRESULT get_borderColorLight(VARIANT*);
    HRESULT put_borderColorDark(VARIANT);
    HRESULT get_borderColorDark(VARIANT*);
    HRESULT get_rowIndex(int*);
    HRESULT get_sectionRowIndex(int*);
    HRESULT get_cells(IHTMLElementCollection*);
    HRESULT insertCell(int, IDispatch*);
    HRESULT deleteCell(int);
}
enum IID_IHTMLTableRow2 = GUID(0x3050f4a1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTableRow2 : IDispatch
{
    HRESULT put_height(VARIANT);
    HRESULT get_height(VARIANT*);
}
enum IID_IHTMLTableRow3 = GUID(0x3050f82c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTableRow3 : IDispatch
{
    HRESULT put_ch(BSTR);
    HRESULT get_ch(BSTR*);
    HRESULT put_chOff(BSTR);
    HRESULT get_chOff(BSTR*);
}
enum IID_IHTMLTableRow4 = GUID(0x305106c6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTableRow4 : IDispatch
{
    HRESULT put_ch(BSTR);
    HRESULT get_ch(BSTR*);
    HRESULT put_chOff(BSTR);
    HRESULT get_chOff(BSTR*);
    HRESULT insertCell(int, IDispatch*);
    HRESULT deleteCell(int);
}
enum IID_IHTMLTableRowMetrics = GUID(0x3050f413, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTableRowMetrics : IDispatch
{
    HRESULT get_clientHeight(int*);
    HRESULT get_clientWidth(int*);
    HRESULT get_clientTop(int*);
    HRESULT get_clientLeft(int*);
}
enum IID_IHTMLTableCell = GUID(0x3050f23d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTableCell : IDispatch
{
    HRESULT put_rowSpan(int);
    HRESULT get_rowSpan(int*);
    HRESULT put_colSpan(int);
    HRESULT get_colSpan(int*);
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
    HRESULT put_vAlign(BSTR);
    HRESULT get_vAlign(BSTR*);
    HRESULT put_bgColor(VARIANT);
    HRESULT get_bgColor(VARIANT*);
    HRESULT put_noWrap(short);
    HRESULT get_noWrap(short*);
    HRESULT put_background(BSTR);
    HRESULT get_background(BSTR*);
    HRESULT put_borderColor(VARIANT);
    HRESULT get_borderColor(VARIANT*);
    HRESULT put_borderColorLight(VARIANT);
    HRESULT get_borderColorLight(VARIANT*);
    HRESULT put_borderColorDark(VARIANT);
    HRESULT get_borderColorDark(VARIANT*);
    HRESULT put_width(VARIANT);
    HRESULT get_width(VARIANT*);
    HRESULT put_height(VARIANT);
    HRESULT get_height(VARIANT*);
    HRESULT get_cellIndex(int*);
}
enum IID_IHTMLTableCell2 = GUID(0x3050f82d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTableCell2 : IDispatch
{
    HRESULT put_abbr(BSTR);
    HRESULT get_abbr(BSTR*);
    HRESULT put_axis(BSTR);
    HRESULT get_axis(BSTR*);
    HRESULT put_ch(BSTR);
    HRESULT get_ch(BSTR*);
    HRESULT put_chOff(BSTR);
    HRESULT get_chOff(BSTR*);
    HRESULT put_headers(BSTR);
    HRESULT get_headers(BSTR*);
    HRESULT put_scope(BSTR);
    HRESULT get_scope(BSTR*);
}
enum IID_IHTMLTableCell3 = GUID(0x305106c7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTableCell3 : IDispatch
{
    HRESULT put_ch(BSTR);
    HRESULT get_ch(BSTR*);
    HRESULT put_chOff(BSTR);
    HRESULT get_chOff(BSTR*);
}
enum IID_DispHTMLTable = GUID(0x3050f532, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLTable : IDispatch
{
}
enum IID_DispHTMLTableCol = GUID(0x3050f533, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLTableCol : IDispatch
{
}
enum IID_DispHTMLTableSection = GUID(0x3050f534, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLTableSection : IDispatch
{
}
enum IID_DispHTMLTableRow = GUID(0x3050f535, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLTableRow : IDispatch
{
}
enum IID_DispHTMLTableCell = GUID(0x3050f536, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLTableCell : IDispatch
{
}
enum IID_HTMLScriptEvents2 = GUID(0x3050f621, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLScriptEvents2 : IDispatch
{
}
enum IID_HTMLScriptEvents = GUID(0x3050f3e2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLScriptEvents : IDispatch
{
}
enum IID_IHTMLScriptElement = GUID(0x3050f28b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLScriptElement : IDispatch
{
    HRESULT put_src(BSTR);
    HRESULT get_src(BSTR*);
    HRESULT put_htmlFor(BSTR);
    HRESULT get_htmlFor(BSTR*);
    HRESULT put_event(BSTR);
    HRESULT get_event(BSTR*);
    HRESULT put_text(BSTR);
    HRESULT get_text(BSTR*);
    HRESULT put_defer(short);
    HRESULT get_defer(short*);
    HRESULT get_readyState(BSTR*);
    HRESULT put_onerror(VARIANT);
    HRESULT get_onerror(VARIANT*);
    HRESULT put_type(BSTR);
    HRESULT get_type(BSTR*);
}
enum IID_IHTMLScriptElement2 = GUID(0x3050f828, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLScriptElement2 : IDispatch
{
    HRESULT put_charset(BSTR);
    HRESULT get_charset(BSTR*);
}
enum IID_IHTMLScriptElement3 = GUID(0x30510447, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLScriptElement3 : IDispatch
{
    HRESULT put_src(BSTR);
    HRESULT get_src(BSTR*);
}
enum IID_IHTMLScriptElement4 = GUID(0x30510801, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLScriptElement4 : IDispatch
{
    HRESULT get_usedCharset(BSTR*);
}
enum IID_DispHTMLScriptElement = GUID(0x3050f530, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLScriptElement : IDispatch
{
}
enum IID_IHTMLNoShowElement = GUID(0x3050f38a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLNoShowElement : IDispatch
{
}
enum IID_DispHTMLNoShowElement = GUID(0x3050f528, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLNoShowElement : IDispatch
{
}
enum IID_HTMLObjectElementEvents2 = GUID(0x3050f620, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLObjectElementEvents2 : IDispatch
{
}
enum IID_HTMLObjectElementEvents = GUID(0x3050f3c4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLObjectElementEvents : IDispatch
{
}
enum IID_IHTMLObjectElement = GUID(0x3050f24f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLObjectElement : IDispatch
{
    HRESULT get_object(IDispatch*);
    HRESULT get_classid(BSTR*);
    HRESULT get_data(BSTR*);
    HRESULT putref_recordset(IDispatch);
    HRESULT get_recordset(IDispatch*);
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_codeBase(BSTR);
    HRESULT get_codeBase(BSTR*);
    HRESULT put_codeType(BSTR);
    HRESULT get_codeType(BSTR*);
    HRESULT put_code(BSTR);
    HRESULT get_code(BSTR*);
    HRESULT get_BaseHref(BSTR*);
    HRESULT put_type(BSTR);
    HRESULT get_type(BSTR*);
    HRESULT get_form(IHTMLFormElement*);
    HRESULT put_width(VARIANT);
    HRESULT get_width(VARIANT*);
    HRESULT put_height(VARIANT);
    HRESULT get_height(VARIANT*);
    HRESULT get_readyState(int*);
    HRESULT put_onreadystatechange(VARIANT);
    HRESULT get_onreadystatechange(VARIANT*);
    HRESULT put_onerror(VARIANT);
    HRESULT get_onerror(VARIANT*);
    HRESULT put_altHtml(BSTR);
    HRESULT get_altHtml(BSTR*);
    HRESULT put_vspace(int);
    HRESULT get_vspace(int*);
    HRESULT put_hspace(int);
    HRESULT get_hspace(int*);
}
enum IID_IHTMLObjectElement2 = GUID(0x3050f4cd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLObjectElement2 : IDispatch
{
    HRESULT namedRecordset(BSTR, VARIANT*, IDispatch*);
    HRESULT put_classid(BSTR);
    HRESULT get_classid(BSTR*);
    HRESULT put_data(BSTR);
    HRESULT get_data(BSTR*);
}
enum IID_IHTMLObjectElement3 = GUID(0x3050f827, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLObjectElement3 : IDispatch
{
    HRESULT put_archive(BSTR);
    HRESULT get_archive(BSTR*);
    HRESULT put_alt(BSTR);
    HRESULT get_alt(BSTR*);
    HRESULT put_declare(short);
    HRESULT get_declare(short*);
    HRESULT put_standby(BSTR);
    HRESULT get_standby(BSTR*);
    HRESULT put_border(VARIANT);
    HRESULT get_border(VARIANT*);
    HRESULT put_useMap(BSTR);
    HRESULT get_useMap(BSTR*);
}
enum IID_IHTMLObjectElement4 = GUID(0x3051043e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLObjectElement4 : IDispatch
{
    HRESULT get_contentDocument(IDispatch*);
    HRESULT put_codeBase(BSTR);
    HRESULT get_codeBase(BSTR*);
    HRESULT put_data(BSTR);
    HRESULT get_data(BSTR*);
}
enum IID_IHTMLObjectElement5 = GUID(0x305104b5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLObjectElement5 : IDispatch
{
    HRESULT put_object(BSTR);
    HRESULT get_object(BSTR*);
}
enum IID_IHTMLParamElement = GUID(0x3050f83d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLParamElement : IDispatch
{
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_value(BSTR);
    HRESULT get_value(BSTR*);
    HRESULT put_type(BSTR);
    HRESULT get_type(BSTR*);
    HRESULT put_valueType(BSTR);
    HRESULT get_valueType(BSTR*);
}
enum IID_IHTMLParamElement2 = GUID(0x30510444, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLParamElement2 : IDispatch
{
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_type(BSTR);
    HRESULT get_type(BSTR*);
    HRESULT put_value(BSTR);
    HRESULT get_value(BSTR*);
    HRESULT put_valueType(BSTR);
    HRESULT get_valueType(BSTR*);
}
enum IID_DispHTMLObjectElement = GUID(0x3050f529, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLObjectElement : IDispatch
{
}
enum IID_DispHTMLParamElement = GUID(0x3050f590, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLParamElement : IDispatch
{
}
enum IID_HTMLFrameSiteEvents2 = GUID(0x3050f7ff, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLFrameSiteEvents2 : IDispatch
{
}
enum IID_HTMLFrameSiteEvents = GUID(0x3050f800, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLFrameSiteEvents : IDispatch
{
}
enum IID_IHTMLFrameBase2 = GUID(0x3050f6db, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFrameBase2 : IDispatch
{
    HRESULT get_contentWindow(IHTMLWindow2*);
    HRESULT put_onload(VARIANT);
    HRESULT get_onload(VARIANT*);
    HRESULT put_onreadystatechange(VARIANT);
    HRESULT get_onreadystatechange(VARIANT*);
    HRESULT get_readyState(BSTR*);
    HRESULT put_allowTransparency(short);
    HRESULT get_allowTransparency(short*);
}
enum IID_IHTMLFrameBase3 = GUID(0x3050f82e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFrameBase3 : IDispatch
{
    HRESULT put_longDesc(BSTR);
    HRESULT get_longDesc(BSTR*);
}
enum IID_DispHTMLFrameBase = GUID(0x3050f541, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLFrameBase : IDispatch
{
}
enum IID_IHTMLFrameElement = GUID(0x3050f313, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFrameElement : IDispatch
{
    HRESULT put_borderColor(VARIANT);
    HRESULT get_borderColor(VARIANT*);
}
enum IID_IHTMLFrameElement2 = GUID(0x3050f7f5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFrameElement2 : IDispatch
{
    HRESULT put_height(VARIANT);
    HRESULT get_height(VARIANT*);
    HRESULT put_width(VARIANT);
    HRESULT get_width(VARIANT*);
}
enum IID_IHTMLFrameElement3 = GUID(0x3051042d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFrameElement3 : IDispatch
{
    HRESULT get_contentDocument(IDispatch*);
    HRESULT put_src(BSTR);
    HRESULT get_src(BSTR*);
    HRESULT put_longDesc(BSTR);
    HRESULT get_longDesc(BSTR*);
    HRESULT put_frameBorder(BSTR);
    HRESULT get_frameBorder(BSTR*);
}
enum IID_DispHTMLFrameElement = GUID(0x3050f513, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLFrameElement : IDispatch
{
}
enum IID_IHTMLIFrameElement = GUID(0x3050f315, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLIFrameElement : IDispatch
{
    HRESULT put_vspace(int);
    HRESULT get_vspace(int*);
    HRESULT put_hspace(int);
    HRESULT get_hspace(int*);
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
}
enum IID_IHTMLIFrameElement2 = GUID(0x3050f4e6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLIFrameElement2 : IDispatch
{
    HRESULT put_height(VARIANT);
    HRESULT get_height(VARIANT*);
    HRESULT put_width(VARIANT);
    HRESULT get_width(VARIANT*);
}
enum IID_IHTMLIFrameElement3 = GUID(0x30510433, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLIFrameElement3 : IDispatch
{
    HRESULT get_contentDocument(IDispatch*);
    HRESULT put_src(BSTR);
    HRESULT get_src(BSTR*);
    HRESULT put_longDesc(BSTR);
    HRESULT get_longDesc(BSTR*);
    HRESULT put_frameBorder(BSTR);
    HRESULT get_frameBorder(BSTR*);
}
enum IID_DispHTMLIFrame = GUID(0x3050f51b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLIFrame : IDispatch
{
}
enum IID_IHTMLDivPosition = GUID(0x3050f212, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDivPosition : IDispatch
{
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
}
enum IID_IHTMLFieldSetElement = GUID(0x3050f3e7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFieldSetElement : IDispatch
{
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
}
enum IID_IHTMLFieldSetElement2 = GUID(0x3050f833, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFieldSetElement2 : IDispatch
{
    HRESULT get_form(IHTMLFormElement*);
}
enum IID_IHTMLLegendElement = GUID(0x3050f3ea, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLLegendElement : IDispatch
{
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
}
enum IID_IHTMLLegendElement2 = GUID(0x3050f834, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLLegendElement2 : IDispatch
{
    HRESULT get_form(IHTMLFormElement*);
}
enum IID_DispHTMLDivPosition = GUID(0x3050f50f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLDivPosition : IDispatch
{
}
enum IID_DispHTMLFieldSetElement = GUID(0x3050f545, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLFieldSetElement : IDispatch
{
}
enum IID_DispHTMLLegendElement = GUID(0x3050f546, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLLegendElement : IDispatch
{
}
enum IID_IHTMLSpanFlow = GUID(0x3050f3e5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLSpanFlow : IDispatch
{
    HRESULT put_align(BSTR);
    HRESULT get_align(BSTR*);
}
enum IID_DispHTMLSpanFlow = GUID(0x3050f544, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLSpanFlow : IDispatch
{
}
enum IID_IHTMLFrameSetElement = GUID(0x3050f319, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFrameSetElement : IDispatch
{
    HRESULT put_rows(BSTR);
    HRESULT get_rows(BSTR*);
    HRESULT put_cols(BSTR);
    HRESULT get_cols(BSTR*);
    HRESULT put_border(VARIANT);
    HRESULT get_border(VARIANT*);
    HRESULT put_borderColor(VARIANT);
    HRESULT get_borderColor(VARIANT*);
    HRESULT put_frameBorder(BSTR);
    HRESULT get_frameBorder(BSTR*);
    HRESULT put_frameSpacing(VARIANT);
    HRESULT get_frameSpacing(VARIANT*);
    HRESULT put_name(BSTR);
    HRESULT get_name(BSTR*);
    HRESULT put_onload(VARIANT);
    HRESULT get_onload(VARIANT*);
    HRESULT put_onunload(VARIANT);
    HRESULT get_onunload(VARIANT*);
    HRESULT put_onbeforeunload(VARIANT);
    HRESULT get_onbeforeunload(VARIANT*);
}
enum IID_IHTMLFrameSetElement2 = GUID(0x3050f5c6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFrameSetElement2 : IDispatch
{
    HRESULT put_onbeforeprint(VARIANT);
    HRESULT get_onbeforeprint(VARIANT*);
    HRESULT put_onafterprint(VARIANT);
    HRESULT get_onafterprint(VARIANT*);
}
enum IID_IHTMLFrameSetElement3 = GUID(0x30510796, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFrameSetElement3 : IDispatch
{
    HRESULT put_onhashchange(VARIANT);
    HRESULT get_onhashchange(VARIANT*);
    HRESULT put_onmessage(VARIANT);
    HRESULT get_onmessage(VARIANT*);
    HRESULT put_onoffline(VARIANT);
    HRESULT get_onoffline(VARIANT*);
    HRESULT put_ononline(VARIANT);
    HRESULT get_ononline(VARIANT*);
    HRESULT put_onstorage(VARIANT);
    HRESULT get_onstorage(VARIANT*);
}
enum IID_DispHTMLFrameSetSite = GUID(0x3050f514, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLFrameSetSite : IDispatch
{
}
enum IID_IHTMLBGsound = GUID(0x3050f369, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLBGsound : IDispatch
{
    HRESULT put_src(BSTR);
    HRESULT get_src(BSTR*);
    HRESULT put_loop(VARIANT);
    HRESULT get_loop(VARIANT*);
    HRESULT put_volume(VARIANT);
    HRESULT get_volume(VARIANT*);
    HRESULT put_balance(VARIANT);
    HRESULT get_balance(VARIANT*);
}
enum IID_DispHTMLBGsound = GUID(0x3050f53c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLBGsound : IDispatch
{
}
enum IID_IHTMLFontNamesCollection = GUID(0x3050f376, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFontNamesCollection : IDispatch
{
    HRESULT get_length(int*);
    HRESULT get__newEnum(IUnknown*);
    HRESULT item(int, BSTR*);
}
enum IID_IHTMLFontSizesCollection = GUID(0x3050f377, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLFontSizesCollection : IDispatch
{
    HRESULT get_length(int*);
    HRESULT get__newEnum(IUnknown*);
    HRESULT get_forFont(BSTR*);
    HRESULT item(int, int*);
}
enum IID_IHTMLOptionsHolder = GUID(0x3050f378, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLOptionsHolder : IDispatch
{
    HRESULT get_document(IHTMLDocument2*);
    HRESULT get_fonts(IHTMLFontNamesCollection*);
    HRESULT put_execArg(VARIANT);
    HRESULT get_execArg(VARIANT*);
    HRESULT put_errorLine(int);
    HRESULT get_errorLine(int*);
    HRESULT put_errorCharacter(int);
    HRESULT get_errorCharacter(int*);
    HRESULT put_errorCode(int);
    HRESULT get_errorCode(int*);
    HRESULT put_errorMessage(BSTR);
    HRESULT get_errorMessage(BSTR*);
    HRESULT put_errorDebug(short);
    HRESULT get_errorDebug(short*);
    HRESULT get_unsecuredWindowOfDocument(IHTMLWindow2*);
    HRESULT put_findText(BSTR);
    HRESULT get_findText(BSTR*);
    HRESULT put_anythingAfterFrameset(short);
    HRESULT get_anythingAfterFrameset(short*);
    HRESULT sizes(BSTR, IHTMLFontSizesCollection*);
    HRESULT openfiledlg(VARIANT, VARIANT, VARIANT, VARIANT, BSTR*);
    HRESULT savefiledlg(VARIANT, VARIANT, VARIANT, VARIANT, BSTR*);
    HRESULT choosecolordlg(VARIANT, int*);
    HRESULT showSecurityInfo();
    HRESULT isApartmentModel(IHTMLObjectElement, short*);
    HRESULT getCharset(BSTR, int*);
    HRESULT get_secureConnectionInfo(BSTR*);
}
enum IID_HTMLStyleElementEvents2 = GUID(0x3050f615, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLStyleElementEvents2 : IDispatch
{
}
enum IID_HTMLStyleElementEvents = GUID(0x3050f3cb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLStyleElementEvents : IDispatch
{
}
enum IID_IHTMLStyleElement = GUID(0x3050f375, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleElement : IDispatch
{
    HRESULT put_type(BSTR);
    HRESULT get_type(BSTR*);
    HRESULT get_readyState(BSTR*);
    HRESULT put_onreadystatechange(VARIANT);
    HRESULT get_onreadystatechange(VARIANT*);
    HRESULT put_onload(VARIANT);
    HRESULT get_onload(VARIANT*);
    HRESULT put_onerror(VARIANT);
    HRESULT get_onerror(VARIANT*);
    HRESULT get_styleSheet(IHTMLStyleSheet*);
    HRESULT put_disabled(short);
    HRESULT get_disabled(short*);
    HRESULT put_media(BSTR);
    HRESULT get_media(BSTR*);
}
enum IID_IHTMLStyleElement2 = GUID(0x3051072a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleElement2 : IDispatch
{
    HRESULT get_sheet(IHTMLStyleSheet*);
}
enum IID_DispHTMLStyleElement = GUID(0x3050f511, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLStyleElement : IDispatch
{
}
enum IID_IHTMLStyleFontFace = GUID(0x3050f3d5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleFontFace : IDispatch
{
    HRESULT put_fontsrc(BSTR);
    HRESULT get_fontsrc(BSTR*);
}
enum IID_IHTMLStyleFontFace2 = GUID(0x305106ec, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleFontFace2 : IDispatch
{
    HRESULT get_style(IHTMLRuleStyle*);
}
enum IID_DispHTMLStyleFontFace = GUID(0x30590081, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLStyleFontFace : IDispatch
{
}
enum IID_IHTMLXDomainRequest = GUID(0x30510454, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLXDomainRequest : IDispatch
{
    HRESULT get_responseText(BSTR*);
    HRESULT put_timeout(int);
    HRESULT get_timeout(int*);
    HRESULT get_contentType(BSTR*);
    HRESULT put_onprogress(VARIANT);
    HRESULT get_onprogress(VARIANT*);
    HRESULT put_onerror(VARIANT);
    HRESULT get_onerror(VARIANT*);
    HRESULT put_ontimeout(VARIANT);
    HRESULT get_ontimeout(VARIANT*);
    HRESULT put_onload(VARIANT);
    HRESULT get_onload(VARIANT*);
    HRESULT abort();
    HRESULT open(BSTR, BSTR);
    HRESULT send(VARIANT);
}
enum IID_IHTMLXDomainRequestFactory = GUID(0x30510456, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLXDomainRequestFactory : IDispatch
{
    HRESULT create(IHTMLXDomainRequest*);
}
enum IID_DispXDomainRequest = GUID(0x3050f599, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispXDomainRequest : IDispatch
{
}
enum IID_IHTMLStorage2 = GUID(0x30510799, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStorage2 : IDispatch
{
    HRESULT setItem(BSTR, BSTR);
}
enum IID_DispHTMLStorage = GUID(0x3050f59d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLStorage : IDispatch
{
}
enum IID_IEventTarget = GUID(0x305104b9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IEventTarget : IDispatch
{
    HRESULT addEventListener(BSTR, IDispatch, short);
    HRESULT removeEventListener(BSTR, IDispatch, short);
    HRESULT dispatchEvent(IDOMEvent, short*);
}
enum IID_DispDOMEvent = GUID(0x3050f5a2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMEvent : IDispatch
{
}
enum IID_IDOMUIEvent = GUID(0x305106ca, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMUIEvent : IDispatch
{
    HRESULT get_view(IHTMLWindow2*);
    HRESULT get_detail(int*);
    HRESULT initUIEvent(BSTR, short, short, IHTMLWindow2, int);
}
enum IID_DispDOMUIEvent = GUID(0x30590072, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMUIEvent : IDispatch
{
}
enum IID_IDOMMouseEvent = GUID(0x305106ce, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMMouseEvent : IDispatch
{
    HRESULT get_screenX(int*);
    HRESULT get_screenY(int*);
    HRESULT get_clientX(int*);
    HRESULT get_clientY(int*);
    HRESULT get_ctrlKey(short*);
    HRESULT get_shiftKey(short*);
    HRESULT get_altKey(short*);
    HRESULT get_metaKey(short*);
    HRESULT get_button(ushort*);
    HRESULT get_relatedTarget(IEventTarget*);
    HRESULT initMouseEvent(BSTR, short, short, IHTMLWindow2, int, int, int, int, int, short, short, short, short, ushort, IEventTarget);
    HRESULT getModifierState(BSTR, short*);
    HRESULT get_buttons(ushort*);
    HRESULT get_fromElement(IHTMLElement*);
    HRESULT get_toElement(IHTMLElement*);
    HRESULT get_x(int*);
    HRESULT get_y(int*);
    HRESULT get_offsetX(int*);
    HRESULT get_offsetY(int*);
    HRESULT get_pageX(int*);
    HRESULT get_pageY(int*);
    HRESULT get_layerX(int*);
    HRESULT get_layerY(int*);
    HRESULT get_which(ushort*);
}
enum IID_DispDOMMouseEvent = GUID(0x30590073, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMMouseEvent : IDispatch
{
}
enum IID_IDOMDragEvent = GUID(0x30510761, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMDragEvent : IDispatch
{
    HRESULT get_dataTransfer(IHTMLDataTransfer*);
    HRESULT initDragEvent(BSTR, short, short, IHTMLWindow2, int, int, int, int, int, short, short, short, short, ushort, IEventTarget, IHTMLDataTransfer);
}
enum IID_DispDOMDragEvent = GUID(0x305900a7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMDragEvent : IDispatch
{
}
enum IID_IDOMMouseWheelEvent = GUID(0x305106d0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMMouseWheelEvent : IDispatch
{
    HRESULT get_wheelDelta(int*);
    HRESULT initMouseWheelEvent(BSTR, short, short, IHTMLWindow2, int, int, int, int, int, ushort, IEventTarget, BSTR, int);
}
enum IID_DispDOMMouseWheelEvent = GUID(0x30590074, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMMouseWheelEvent : IDispatch
{
}
enum IID_IDOMWheelEvent = GUID(0x305106d2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMWheelEvent : IDispatch
{
    HRESULT get_deltaX(int*);
    HRESULT get_deltaY(int*);
    HRESULT get_deltaZ(int*);
    HRESULT get_deltaMode(uint*);
    HRESULT initWheelEvent(BSTR, short, short, IHTMLWindow2, int, int, int, int, int, ushort, IEventTarget, BSTR, int, int, int, uint);
}
enum IID_DispDOMWheelEvent = GUID(0x30590075, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMWheelEvent : IDispatch
{
}
enum IID_IDOMTextEvent = GUID(0x305106d4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMTextEvent : IDispatch
{
    HRESULT get_data(BSTR*);
    HRESULT get_inputMethod(uint*);
    HRESULT initTextEvent(BSTR, short, short, IHTMLWindow2, BSTR, uint, BSTR);
    HRESULT get_locale(BSTR*);
}
enum IID_DispDOMTextEvent = GUID(0x30590076, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMTextEvent : IDispatch
{
}
enum IID_IDOMKeyboardEvent = GUID(0x305106d6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMKeyboardEvent : IDispatch
{
    HRESULT get_key(BSTR*);
    HRESULT get_location(uint*);
    HRESULT get_ctrlKey(short*);
    HRESULT get_shiftKey(short*);
    HRESULT get_altKey(short*);
    HRESULT get_metaKey(short*);
    HRESULT get_repeat(short*);
    HRESULT getModifierState(BSTR, short*);
    HRESULT initKeyboardEvent(BSTR, short, short, IHTMLWindow2, BSTR, uint, BSTR, short, BSTR);
    HRESULT get_keyCode(int*);
    HRESULT get_charCode(int*);
    HRESULT get_which(int*);
    HRESULT get_ie9_char(VARIANT*);
    HRESULT get_locale(BSTR*);
}
enum IID_DispDOMKeyboardEvent = GUID(0x30590077, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMKeyboardEvent : IDispatch
{
}
enum IID_IDOMCompositionEvent = GUID(0x305106d8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMCompositionEvent : IDispatch
{
    HRESULT get_data(BSTR*);
    HRESULT initCompositionEvent(BSTR, short, short, IHTMLWindow2, BSTR, BSTR);
    HRESULT get_locale(BSTR*);
}
enum IID_DispDOMCompositionEvent = GUID(0x30590078, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMCompositionEvent : IDispatch
{
}
enum IID_IDOMMutationEvent = GUID(0x305106da, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMMutationEvent : IDispatch
{
    HRESULT get_relatedNode(IDispatch*);
    HRESULT get_prevValue(BSTR*);
    HRESULT get_newValue(BSTR*);
    HRESULT get_attrName(BSTR*);
    HRESULT get_attrChange(ushort*);
    HRESULT initMutationEvent(BSTR, short, short, IDispatch, BSTR, BSTR, BSTR, ushort);
}
enum IID_DispDOMMutationEvent = GUID(0x30590079, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMMutationEvent : IDispatch
{
}
enum IID_IDOMBeforeUnloadEvent = GUID(0x30510763, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMBeforeUnloadEvent : IDispatch
{
    HRESULT put_returnValue(VARIANT);
    HRESULT get_returnValue(VARIANT*);
}
enum IID_DispDOMBeforeUnloadEvent = GUID(0x305900a8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMBeforeUnloadEvent : IDispatch
{
}
enum IID_IDOMFocusEvent = GUID(0x305106cc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMFocusEvent : IDispatch
{
    HRESULT get_relatedTarget(IEventTarget*);
    HRESULT initFocusEvent(BSTR, short, short, IHTMLWindow2, int, IEventTarget);
}
enum IID_DispDOMFocusEvent = GUID(0x30590071, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMFocusEvent : IDispatch
{
}
enum IID_IDOMCustomEvent = GUID(0x305106de, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMCustomEvent : IDispatch
{
    HRESULT get_detail(VARIANT*);
    HRESULT initCustomEvent(BSTR, short, short, VARIANT*);
}
enum IID_DispDOMCustomEvent = GUID(0x3059007c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMCustomEvent : IDispatch
{
}
enum IID_ICanvasGradient = GUID(0x30510714, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ICanvasGradient : IDispatch
{
    HRESULT addColorStop(float, BSTR);
}
enum IID_ICanvasPattern = GUID(0x30510716, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ICanvasPattern : IDispatch
{
}
enum IID_ICanvasTextMetrics = GUID(0x30510718, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ICanvasTextMetrics : IDispatch
{
    HRESULT get_width(float*);
}
enum IID_ICanvasImageData = GUID(0x3051071a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ICanvasImageData : IDispatch
{
    HRESULT get_width(uint*);
    HRESULT get_height(uint*);
    HRESULT get_data(VARIANT*);
}
enum IID_ICanvasPixelArray = GUID(0x3051071c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ICanvasPixelArray : IDispatch
{
    HRESULT get_length(uint*);
}
enum IID_IHTMLCanvasElement = GUID(0x305106e4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLCanvasElement : IDispatch
{
    HRESULT put_width(int);
    HRESULT get_width(int*);
    HRESULT put_height(int);
    HRESULT get_height(int*);
    HRESULT getContext(BSTR, ICanvasRenderingContext2D*);
    HRESULT toDataURL(BSTR, VARIANT, BSTR*);
}
enum IID_ICanvasRenderingContext2D = GUID(0x305106ff, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ICanvasRenderingContext2D : IDispatch
{
    HRESULT get_canvas(IHTMLCanvasElement*);
    HRESULT restore();
    HRESULT save();
    HRESULT rotate(float);
    HRESULT scale(float, float);
    HRESULT setTransform(float, float, float, float, float, float);
    HRESULT transform(float, float, float, float, float, float);
    HRESULT translate(float, float);
    HRESULT put_globalAlpha(float);
    HRESULT get_globalAlpha(float*);
    HRESULT put_globalCompositeOperation(BSTR);
    HRESULT get_globalCompositeOperation(BSTR*);
    HRESULT put_fillStyle(VARIANT);
    HRESULT get_fillStyle(VARIANT*);
    HRESULT put_strokeStyle(VARIANT);
    HRESULT get_strokeStyle(VARIANT*);
    HRESULT createLinearGradient(float, float, float, float, ICanvasGradient*);
    HRESULT createRadialGradient(float, float, float, float, float, float, ICanvasGradient*);
    HRESULT createPattern(IDispatch, VARIANT, ICanvasPattern*);
    HRESULT put_lineCap(BSTR);
    HRESULT get_lineCap(BSTR*);
    HRESULT put_lineJoin(BSTR);
    HRESULT get_lineJoin(BSTR*);
    HRESULT put_lineWidth(float);
    HRESULT get_lineWidth(float*);
    HRESULT put_miterLimit(float);
    HRESULT get_miterLimit(float*);
    HRESULT put_shadowBlur(float);
    HRESULT get_shadowBlur(float*);
    HRESULT put_shadowColor(BSTR);
    HRESULT get_shadowColor(BSTR*);
    HRESULT put_shadowOffsetX(float);
    HRESULT get_shadowOffsetX(float*);
    HRESULT put_shadowOffsetY(float);
    HRESULT get_shadowOffsetY(float*);
    HRESULT clearRect(float, float, float, float);
    HRESULT fillRect(float, float, float, float);
    HRESULT strokeRect(float, float, float, float);
    HRESULT arc(float, float, float, float, float, BOOL);
    HRESULT arcTo(float, float, float, float, float);
    HRESULT beginPath();
    HRESULT bezierCurveTo(float, float, float, float, float, float);
    HRESULT clip();
    HRESULT closePath();
    HRESULT fill();
    HRESULT lineTo(float, float);
    HRESULT moveTo(float, float);
    HRESULT quadraticCurveTo(float, float, float, float);
    HRESULT rect(float, float, float, float);
    HRESULT stroke();
    HRESULT isPointInPath(float, float, short*);
    HRESULT put_font(BSTR);
    HRESULT get_font(BSTR*);
    HRESULT put_textAlign(BSTR);
    HRESULT get_textAlign(BSTR*);
    HRESULT put_textBaseline(BSTR);
    HRESULT get_textBaseline(BSTR*);
    HRESULT fillText(BSTR, float, float, VARIANT);
    HRESULT measureText(BSTR, ICanvasTextMetrics*);
    HRESULT strokeText(BSTR, float, float, VARIANT);
    HRESULT drawImage(IDispatch, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT, VARIANT);
    HRESULT createImageData(VARIANT, VARIANT, ICanvasImageData*);
    HRESULT getImageData(float, float, float, float, ICanvasImageData*);
    HRESULT putImageData(ICanvasImageData, float, float, VARIANT, VARIANT, VARIANT, VARIANT);
}
enum IID_DispCanvasGradient = GUID(0x3059008c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispCanvasGradient : IDispatch
{
}
enum IID_DispCanvasPattern = GUID(0x3059008d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispCanvasPattern : IDispatch
{
}
enum IID_DispCanvasTextMetrics = GUID(0x3059008e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispCanvasTextMetrics : IDispatch
{
}
enum IID_DispCanvasImageData = GUID(0x3059008f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispCanvasImageData : IDispatch
{
}
enum IID_DispCanvasRenderingContext2D = GUID(0x30590082, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispCanvasRenderingContext2D : IDispatch
{
}
enum IID_DispHTMLCanvasElement = GUID(0x3059007b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLCanvasElement : IDispatch
{
}
enum IID_IDOMProgressEvent = GUID(0x3051071e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMProgressEvent : IDispatch
{
    HRESULT get_lengthComputable(short*);
    HRESULT get_loaded(ulong*);
    HRESULT get_total(ulong*);
    HRESULT initProgressEvent(BSTR, short, short, short, ulong, ulong);
}
enum IID_DispDOMProgressEvent = GUID(0x30590091, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMProgressEvent : IDispatch
{
}
enum IID_IDOMMessageEvent = GUID(0x30510720, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMMessageEvent : IDispatch
{
    HRESULT get_data(BSTR*);
    HRESULT get_origin(BSTR*);
    HRESULT get_source(IHTMLWindow2*);
    HRESULT initMessageEvent(BSTR, short, short, BSTR, BSTR, BSTR, IHTMLWindow2);
}
enum IID_DispDOMMessageEvent = GUID(0x30590092, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMMessageEvent : IDispatch
{
}
enum IID_IDOMSiteModeEvent = GUID(0x30510765, 0x98b6, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMSiteModeEvent : IDispatch
{
    HRESULT get_buttonID(int*);
    HRESULT get_actionURL(BSTR*);
}
enum IID_DispDOMSiteModeEvent = GUID(0x305900a9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMSiteModeEvent : IDispatch
{
}
enum IID_IDOMStorageEvent = GUID(0x30510722, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMStorageEvent : IDispatch
{
    HRESULT get_key(BSTR*);
    HRESULT get_oldValue(BSTR*);
    HRESULT get_newValue(BSTR*);
    HRESULT get_url(BSTR*);
    HRESULT get_storageArea(IHTMLStorage*);
    HRESULT initStorageEvent(BSTR, short, short, BSTR, BSTR, BSTR, BSTR, IHTMLStorage);
}
enum IID_DispDOMStorageEvent = GUID(0x30590093, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMStorageEvent : IDispatch
{
}
enum IID_IXMLHttpRequestEventTarget = GUID(0x30510830, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IXMLHttpRequestEventTarget : IDispatch
{
}
enum IID_DispXMLHttpRequestEventTarget = GUID(0x305900e7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispXMLHttpRequestEventTarget : IDispatch
{
}
enum IID_HTMLXMLHttpRequestEvents = GUID(0x30510498, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLXMLHttpRequestEvents : IDispatch
{
}
enum IID_IHTMLXMLHttpRequest = GUID(0x3051040a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLXMLHttpRequest : IDispatch
{
    HRESULT get_readyState(int*);
    HRESULT get_responseBody(VARIANT*);
    HRESULT get_responseText(BSTR*);
    HRESULT get_responseXML(IDispatch*);
    HRESULT get_status(int*);
    HRESULT get_statusText(BSTR*);
    HRESULT put_onreadystatechange(VARIANT);
    HRESULT get_onreadystatechange(VARIANT*);
    HRESULT abort();
    HRESULT open(BSTR, BSTR, VARIANT, VARIANT, VARIANT);
    HRESULT send(VARIANT);
    HRESULT getAllResponseHeaders(BSTR*);
    HRESULT getResponseHeader(BSTR, BSTR*);
    HRESULT setRequestHeader(BSTR, BSTR);
}
enum IID_IHTMLXMLHttpRequest2 = GUID(0x30510482, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLXMLHttpRequest2 : IDispatch
{
    HRESULT put_timeout(int);
    HRESULT get_timeout(int*);
    HRESULT put_ontimeout(VARIANT);
    HRESULT get_ontimeout(VARIANT*);
}
enum IID_IHTMLXMLHttpRequestFactory = GUID(0x3051040c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLXMLHttpRequestFactory : IDispatch
{
    HRESULT create(IHTMLXMLHttpRequest*);
}
enum IID_DispHTMLXMLHttpRequest = GUID(0x3050f596, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLXMLHttpRequest : IDispatch
{
}
enum IID_ISVGAngle = GUID(0x305104d3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGAngle : IDispatch
{
    HRESULT put_unitType(short);
    HRESULT get_unitType(short*);
    HRESULT put_value(float);
    HRESULT get_value(float*);
    HRESULT put_valueInSpecifiedUnits(float);
    HRESULT get_valueInSpecifiedUnits(float*);
    HRESULT put_valueAsString(BSTR);
    HRESULT get_valueAsString(BSTR*);
    HRESULT newValueSpecifiedUnits(short, float);
    HRESULT convertToSpecifiedUnits(short);
}
enum IID_ISVGElement = GUID(0x305104c5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGElement : IDispatch
{
    HRESULT put_xmlbase(BSTR);
    HRESULT get_xmlbase(BSTR*);
    HRESULT putref_ownerSVGElement(ISVGSVGElement);
    HRESULT get_ownerSVGElement(ISVGSVGElement*);
    HRESULT putref_viewportElement(ISVGElement);
    HRESULT get_viewportElement(ISVGElement*);
    HRESULT putref_focusable(ISVGAnimatedEnumeration);
    HRESULT get_focusable(ISVGAnimatedEnumeration*);
}
enum IID_ISVGRect = GUID(0x305104d7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGRect : IDispatch
{
    HRESULT put_x(float);
    HRESULT get_x(float*);
    HRESULT put_y(float);
    HRESULT get_y(float*);
    HRESULT put_width(float);
    HRESULT get_width(float*);
    HRESULT put_height(float);
    HRESULT get_height(float*);
}
enum IID_ISVGMatrix = GUID(0x305104f6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGMatrix : IDispatch
{
    HRESULT put_a(float);
    HRESULT get_a(float*);
    HRESULT put_b(float);
    HRESULT get_b(float*);
    HRESULT put_c(float);
    HRESULT get_c(float*);
    HRESULT put_d(float);
    HRESULT get_d(float*);
    HRESULT put_e(float);
    HRESULT get_e(float*);
    HRESULT put_f(float);
    HRESULT get_f(float*);
    HRESULT multiply(ISVGMatrix, ISVGMatrix*);
    HRESULT inverse(ISVGMatrix*);
    HRESULT translate(float, float, ISVGMatrix*);
    HRESULT scale(float, ISVGMatrix*);
    HRESULT scaleNonUniform(float, float, ISVGMatrix*);
    HRESULT rotate(float, ISVGMatrix*);
    HRESULT rotateFromVector(float, float, ISVGMatrix*);
    HRESULT flipX(ISVGMatrix*);
    HRESULT flipY(ISVGMatrix*);
    HRESULT skewX(float, ISVGMatrix*);
    HRESULT skewY(float, ISVGMatrix*);
}
enum IID_ISVGStringList = GUID(0x305104c8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGStringList : IDispatch
{
    HRESULT put_numberOfItems(int);
    HRESULT get_numberOfItems(int*);
    HRESULT clear();
    HRESULT initialize(BSTR, BSTR*);
    HRESULT getItem(int, BSTR*);
    HRESULT insertItemBefore(BSTR, int, BSTR*);
    HRESULT replaceItem(BSTR, int, BSTR*);
    HRESULT removeItem(int, BSTR*);
    HRESULT appendItem(BSTR, BSTR*);
}
enum IID_ISVGAnimatedRect = GUID(0x305104d8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGAnimatedRect : IDispatch
{
    HRESULT putref_baseVal(ISVGRect);
    HRESULT get_baseVal(ISVGRect*);
    HRESULT putref_animVal(ISVGRect);
    HRESULT get_animVal(ISVGRect*);
}
enum IID_ISVGAnimatedString = GUID(0x305104c7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGAnimatedString : IDispatch
{
    HRESULT put_baseVal(BSTR);
    HRESULT get_baseVal(BSTR*);
    HRESULT get_animVal(BSTR*);
}
enum IID_ISVGAnimatedBoolean = GUID(0x305104c6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGAnimatedBoolean : IDispatch
{
    HRESULT put_baseVal(short);
    HRESULT get_baseVal(short*);
    HRESULT put_animVal(short);
    HRESULT get_animVal(short*);
}
enum IID_ISVGAnimatedTransformList = GUID(0x305104f9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGAnimatedTransformList : IDispatch
{
    HRESULT putref_baseVal(ISVGTransformList);
    HRESULT get_baseVal(ISVGTransformList*);
    HRESULT putref_animVal(ISVGTransformList);
    HRESULT get_animVal(ISVGTransformList*);
}
enum IID_ISVGAnimatedPreserveAspectRatio = GUID(0x305104fb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGAnimatedPreserveAspectRatio : IDispatch
{
    HRESULT putref_baseVal(ISVGPreserveAspectRatio);
    HRESULT get_baseVal(ISVGPreserveAspectRatio*);
    HRESULT putref_animVal(ISVGPreserveAspectRatio);
    HRESULT get_animVal(ISVGPreserveAspectRatio*);
}
enum IID_ISVGStylable = GUID(0x305104da, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGStylable : IDispatch
{
    HRESULT get_className(ISVGAnimatedString*);
}
enum IID_ISVGLocatable = GUID(0x305104db, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGLocatable : IDispatch
{
    HRESULT get_nearestViewportElement(ISVGElement*);
    HRESULT get_farthestViewportElement(ISVGElement*);
    HRESULT getBBox(ISVGRect*);
    HRESULT getCTM(ISVGMatrix*);
    HRESULT getScreenCTM(ISVGMatrix*);
    HRESULT getTransformToElement(ISVGElement, ISVGMatrix*);
}
enum IID_ISVGTransformable = GUID(0x305104dc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGTransformable : IDispatch
{
    HRESULT get_transform(ISVGAnimatedTransformList*);
}
enum IID_ISVGTests = GUID(0x305104dd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGTests : IDispatch
{
    HRESULT get_requiredFeatures(ISVGStringList*);
    HRESULT get_requiredExtensions(ISVGStringList*);
    HRESULT get_systemLanguage(ISVGStringList*);
    HRESULT hasExtension(BSTR, short*);
}
enum IID_ISVGLangSpace = GUID(0x305104de, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGLangSpace : IDispatch
{
    HRESULT put_xmllang(BSTR);
    HRESULT get_xmllang(BSTR*);
    HRESULT put_xmlspace(BSTR);
    HRESULT get_xmlspace(BSTR*);
}
enum IID_ISVGExternalResourcesRequired = GUID(0x305104df, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGExternalResourcesRequired : IDispatch
{
    HRESULT get_externalResourcesRequired(ISVGAnimatedBoolean*);
}
enum IID_ISVGFitToViewBox = GUID(0x305104e0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGFitToViewBox : IDispatch
{
    HRESULT get_viewBox(ISVGAnimatedRect*);
    HRESULT putref_preserveAspectRatio(ISVGAnimatedPreserveAspectRatio);
    HRESULT get_preserveAspectRatio(ISVGAnimatedPreserveAspectRatio*);
}
enum IID_ISVGZoomAndPan = GUID(0x305104e1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGZoomAndPan : IDispatch
{
    HRESULT get_zoomAndPan(short*);
}
enum IID_ISVGURIReference = GUID(0x305104e3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGURIReference : IDispatch
{
    HRESULT get_href(ISVGAnimatedString*);
}
enum IID_ISVGAnimatedAngle = GUID(0x305104d4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGAnimatedAngle : IDispatch
{
    HRESULT putref_baseVal(ISVGAngle);
    HRESULT get_baseVal(ISVGAngle*);
    HRESULT putref_animVal(ISVGAngle);
    HRESULT get_animVal(ISVGAngle*);
}
enum IID_ISVGTransformList = GUID(0x305104f8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGTransformList : IDispatch
{
    HRESULT put_numberOfItems(int);
    HRESULT get_numberOfItems(int*);
    HRESULT clear();
    HRESULT initialize(ISVGTransform, ISVGTransform*);
    HRESULT getItem(int, ISVGTransform*);
    HRESULT insertItemBefore(ISVGTransform, int, ISVGTransform*);
    HRESULT replaceItem(ISVGTransform, int, ISVGTransform*);
    HRESULT removeItem(int, ISVGTransform*);
    HRESULT appendItem(ISVGTransform, ISVGTransform*);
    HRESULT createSVGTransformFromMatrix(ISVGMatrix, ISVGTransform*);
    HRESULT consolidate(ISVGTransform*);
}
enum IID_ISVGAnimatedEnumeration = GUID(0x305104c9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGAnimatedEnumeration : IDispatch
{
    HRESULT put_baseVal(ushort);
    HRESULT get_baseVal(ushort*);
    HRESULT put_animVal(ushort);
    HRESULT get_animVal(ushort*);
}
enum IID_ISVGAnimatedInteger = GUID(0x305104ca, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGAnimatedInteger : IDispatch
{
    HRESULT put_baseVal(int);
    HRESULT get_baseVal(int*);
    HRESULT put_animVal(int);
    HRESULT get_animVal(int*);
}
enum IID_ISVGLength = GUID(0x305104cf, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGLength : IDispatch
{
    HRESULT put_unitType(short);
    HRESULT get_unitType(short*);
    HRESULT put_value(float);
    HRESULT get_value(float*);
    HRESULT put_valueInSpecifiedUnits(float);
    HRESULT get_valueInSpecifiedUnits(float*);
    HRESULT put_valueAsString(BSTR);
    HRESULT get_valueAsString(BSTR*);
    HRESULT newValueSpecifiedUnits(short, float);
    HRESULT convertToSpecifiedUnits(short);
}
enum IID_ISVGAnimatedLength = GUID(0x305104d0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGAnimatedLength : IDispatch
{
    HRESULT putref_baseVal(ISVGLength);
    HRESULT get_baseVal(ISVGLength*);
    HRESULT putref_animVal(ISVGLength);
    HRESULT get_animVal(ISVGLength*);
}
enum IID_ISVGLengthList = GUID(0x305104d1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGLengthList : IDispatch
{
    HRESULT put_numberOfItems(int);
    HRESULT get_numberOfItems(int*);
    HRESULT clear();
    HRESULT initialize(ISVGLength, ISVGLength*);
    HRESULT getItem(int, ISVGLength*);
    HRESULT insertItemBefore(ISVGLength, int, ISVGLength*);
    HRESULT replaceItem(ISVGLength, int, ISVGLength*);
    HRESULT removeItem(int, ISVGLength*);
    HRESULT appendItem(ISVGLength, ISVGLength*);
}
enum IID_ISVGAnimatedLengthList = GUID(0x305104d2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGAnimatedLengthList : IDispatch
{
    HRESULT putref_baseVal(ISVGLengthList);
    HRESULT get_baseVal(ISVGLengthList*);
    HRESULT putref_animVal(ISVGLengthList);
    HRESULT get_animVal(ISVGLengthList*);
}
enum IID_ISVGNumber = GUID(0x305104cb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGNumber : IDispatch
{
    HRESULT put_value(float);
    HRESULT get_value(float*);
}
enum IID_ISVGAnimatedNumber = GUID(0x305104cc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGAnimatedNumber : IDispatch
{
    HRESULT put_baseVal(float);
    HRESULT get_baseVal(float*);
    HRESULT put_animVal(float);
    HRESULT get_animVal(float*);
}
enum IID_ISVGNumberList = GUID(0x305104cd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGNumberList : IDispatch
{
    HRESULT put_numberOfItems(int);
    HRESULT get_numberOfItems(int*);
    HRESULT clear();
    HRESULT initialize(ISVGNumber, ISVGNumber*);
    HRESULT getItem(int, ISVGNumber*);
    HRESULT insertItemBefore(ISVGNumber, int, ISVGNumber*);
    HRESULT replaceItem(ISVGNumber, int, ISVGNumber*);
    HRESULT removeItem(int, ISVGNumber*);
    HRESULT appendItem(ISVGNumber, ISVGNumber*);
}
enum IID_ISVGAnimatedNumberList = GUID(0x305104ce, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGAnimatedNumberList : IDispatch
{
    HRESULT putref_baseVal(ISVGNumberList);
    HRESULT get_baseVal(ISVGNumberList*);
    HRESULT putref_animVal(ISVGNumberList);
    HRESULT get_animVal(ISVGNumberList*);
}
enum IID_ISVGClipPathElement = GUID(0x3051052d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGClipPathElement : IDispatch
{
    HRESULT putref_clipPathUnits(ISVGAnimatedEnumeration);
    HRESULT get_clipPathUnits(ISVGAnimatedEnumeration*);
}
enum IID_DispSVGClipPathElement = GUID(0x3059003b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGClipPathElement : IDispatch
{
}
enum IID_ISVGDocument = GUID(0x305104e6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGDocument : IDispatch
{
    HRESULT get_rootElement(ISVGSVGElement*);
}
enum IID_IGetSVGDocument = GUID(0x305105ab, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IGetSVGDocument : IDispatch
{
    HRESULT getSVGDocument(IDispatch*);
}
enum IID_DispSVGElement = GUID(0x30590000, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGElement : IDispatch
{
}
enum IID_IICCSVGColor = GUID(0x305104d6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IICCSVGColor : IDispatch
{
}
enum IID_ISVGPaint = GUID(0x30510524, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPaint : IDispatch
{
}
enum IID_ISVGPatternElement = GUID(0x3051052c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPatternElement : IDispatch
{
    HRESULT putref_patternUnits(ISVGAnimatedEnumeration);
    HRESULT get_patternUnits(ISVGAnimatedEnumeration*);
    HRESULT putref_patternContentUnits(ISVGAnimatedEnumeration);
    HRESULT get_patternContentUnits(ISVGAnimatedEnumeration*);
    HRESULT putref_patternTransform(ISVGAnimatedTransformList);
    HRESULT get_patternTransform(ISVGAnimatedTransformList*);
    HRESULT putref_x(ISVGAnimatedLength);
    HRESULT get_x(ISVGAnimatedLength*);
    HRESULT putref_y(ISVGAnimatedLength);
    HRESULT get_y(ISVGAnimatedLength*);
    HRESULT putref_width(ISVGAnimatedLength);
    HRESULT get_width(ISVGAnimatedLength*);
    HRESULT putref_height(ISVGAnimatedLength);
    HRESULT get_height(ISVGAnimatedLength*);
}
enum IID_DispSVGPatternElement = GUID(0x3059002c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPatternElement : IDispatch
{
}
enum IID_ISVGPathSeg = GUID(0x305104fc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSeg : IDispatch
{
    HRESULT put_pathSegType(short);
    HRESULT get_pathSegType(short*);
    HRESULT get_pathSegTypeAsLetter(BSTR*);
}
enum IID_ISVGPathSegArcAbs = GUID(0x30510506, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegArcAbs : IDispatch
{
    HRESULT put_x(float);
    HRESULT get_x(float*);
    HRESULT put_y(float);
    HRESULT get_y(float*);
    HRESULT put_r1(float);
    HRESULT get_r1(float*);
    HRESULT put_r2(float);
    HRESULT get_r2(float*);
    HRESULT put_angle(float);
    HRESULT get_angle(float*);
    HRESULT put_largeArcFlag(short);
    HRESULT get_largeArcFlag(short*);
    HRESULT put_sweepFlag(short);
    HRESULT get_sweepFlag(short*);
}
enum IID_ISVGPathSegArcRel = GUID(0x30510507, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegArcRel : IDispatch
{
    HRESULT put_x(float);
    HRESULT get_x(float*);
    HRESULT put_y(float);
    HRESULT get_y(float*);
    HRESULT put_r1(float);
    HRESULT get_r1(float*);
    HRESULT put_r2(float);
    HRESULT get_r2(float*);
    HRESULT put_angle(float);
    HRESULT get_angle(float*);
    HRESULT put_largeArcFlag(short);
    HRESULT get_largeArcFlag(short*);
    HRESULT put_sweepFlag(short);
    HRESULT get_sweepFlag(short*);
}
enum IID_ISVGPathSegClosePath = GUID(0x305104fd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegClosePath : IDispatch
{
}
enum IID_ISVGPathSegMovetoAbs = GUID(0x305104fe, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegMovetoAbs : IDispatch
{
    HRESULT put_x(float);
    HRESULT get_x(float*);
    HRESULT put_y(float);
    HRESULT get_y(float*);
}
enum IID_ISVGPathSegMovetoRel = GUID(0x305104ff, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegMovetoRel : IDispatch
{
    HRESULT put_x(float);
    HRESULT get_x(float*);
    HRESULT put_y(float);
    HRESULT get_y(float*);
}
enum IID_ISVGPathSegLinetoAbs = GUID(0x30510500, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegLinetoAbs : IDispatch
{
    HRESULT put_x(float);
    HRESULT get_x(float*);
    HRESULT put_y(float);
    HRESULT get_y(float*);
}
enum IID_ISVGPathSegLinetoRel = GUID(0x30510501, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegLinetoRel : IDispatch
{
    HRESULT put_x(float);
    HRESULT get_x(float*);
    HRESULT put_y(float);
    HRESULT get_y(float*);
}
enum IID_ISVGPathSegCurvetoCubicAbs = GUID(0x30510502, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegCurvetoCubicAbs : IDispatch
{
    HRESULT put_x(float);
    HRESULT get_x(float*);
    HRESULT put_y(float);
    HRESULT get_y(float*);
    HRESULT put_x1(float);
    HRESULT get_x1(float*);
    HRESULT put_y1(float);
    HRESULT get_y1(float*);
    HRESULT put_x2(float);
    HRESULT get_x2(float*);
    HRESULT put_y2(float);
    HRESULT get_y2(float*);
}
enum IID_ISVGPathSegCurvetoCubicRel = GUID(0x30510503, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegCurvetoCubicRel : IDispatch
{
    HRESULT put_x(float);
    HRESULT get_x(float*);
    HRESULT put_y(float);
    HRESULT get_y(float*);
    HRESULT put_x1(float);
    HRESULT get_x1(float*);
    HRESULT put_y1(float);
    HRESULT get_y1(float*);
    HRESULT put_x2(float);
    HRESULT get_x2(float*);
    HRESULT put_y2(float);
    HRESULT get_y2(float*);
}
enum IID_ISVGPathSegCurvetoCubicSmoothAbs = GUID(0x3051050c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegCurvetoCubicSmoothAbs : IDispatch
{
    HRESULT put_x(float);
    HRESULT get_x(float*);
    HRESULT put_y(float);
    HRESULT get_y(float*);
    HRESULT put_x2(float);
    HRESULT get_x2(float*);
    HRESULT put_y2(float);
    HRESULT get_y2(float*);
}
enum IID_ISVGPathSegCurvetoCubicSmoothRel = GUID(0x3051050d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegCurvetoCubicSmoothRel : IDispatch
{
    HRESULT put_x(float);
    HRESULT get_x(float*);
    HRESULT put_y(float);
    HRESULT get_y(float*);
    HRESULT put_x2(float);
    HRESULT get_x2(float*);
    HRESULT put_y2(float);
    HRESULT get_y2(float*);
}
enum IID_ISVGPathSegCurvetoQuadraticAbs = GUID(0x30510504, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegCurvetoQuadraticAbs : IDispatch
{
    HRESULT put_x(float);
    HRESULT get_x(float*);
    HRESULT put_y(float);
    HRESULT get_y(float*);
    HRESULT put_x1(float);
    HRESULT get_x1(float*);
    HRESULT put_y1(float);
    HRESULT get_y1(float*);
}
enum IID_ISVGPathSegCurvetoQuadraticRel = GUID(0x30510505, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegCurvetoQuadraticRel : IDispatch
{
    HRESULT put_x(float);
    HRESULT get_x(float*);
    HRESULT put_y(float);
    HRESULT get_y(float*);
    HRESULT put_x1(float);
    HRESULT get_x1(float*);
    HRESULT put_y1(float);
    HRESULT get_y1(float*);
}
enum IID_ISVGPathSegCurvetoQuadraticSmoothAbs = GUID(0x3051050e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegCurvetoQuadraticSmoothAbs : IDispatch
{
    HRESULT put_x(float);
    HRESULT get_x(float*);
    HRESULT put_y(float);
    HRESULT get_y(float*);
}
enum IID_ISVGPathSegCurvetoQuadraticSmoothRel = GUID(0x3051050f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegCurvetoQuadraticSmoothRel : IDispatch
{
    HRESULT put_x(float);
    HRESULT get_x(float*);
    HRESULT put_y(float);
    HRESULT get_y(float*);
}
enum IID_ISVGPathSegLinetoHorizontalAbs = GUID(0x30510508, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegLinetoHorizontalAbs : IDispatch
{
    HRESULT put_x(float);
    HRESULT get_x(float*);
}
enum IID_ISVGPathSegLinetoHorizontalRel = GUID(0x30510509, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegLinetoHorizontalRel : IDispatch
{
    HRESULT put_x(float);
    HRESULT get_x(float*);
}
enum IID_ISVGPathSegLinetoVerticalAbs = GUID(0x3051050a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegLinetoVerticalAbs : IDispatch
{
    HRESULT put_y(float);
    HRESULT get_y(float*);
}
enum IID_ISVGPathSegLinetoVerticalRel = GUID(0x3051050b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegLinetoVerticalRel : IDispatch
{
    HRESULT put_y(float);
    HRESULT get_y(float*);
}
enum IID_DispSVGPathSegArcAbs = GUID(0x30590013, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegArcAbs : IDispatch
{
}
enum IID_DispSVGPathSegArcRel = GUID(0x30590014, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegArcRel : IDispatch
{
}
enum IID_DispSVGPathSegClosePath = GUID(0x30590015, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegClosePath : IDispatch
{
}
enum IID_DispSVGPathSegMovetoAbs = GUID(0x30590024, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegMovetoAbs : IDispatch
{
}
enum IID_DispSVGPathSegMovetoRel = GUID(0x30590025, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegMovetoRel : IDispatch
{
}
enum IID_DispSVGPathSegLinetoAbs = GUID(0x3059001e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegLinetoAbs : IDispatch
{
}
enum IID_DispSVGPathSegLinetoRel = GUID(0x30590021, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegLinetoRel : IDispatch
{
}
enum IID_DispSVGPathSegCurvetoCubicAbs = GUID(0x30590016, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegCurvetoCubicAbs : IDispatch
{
}
enum IID_DispSVGPathSegCurvetoCubicRel = GUID(0x30590017, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegCurvetoCubicRel : IDispatch
{
}
enum IID_DispSVGPathSegCurvetoCubicSmoothAbs = GUID(0x30590018, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegCurvetoCubicSmoothAbs : IDispatch
{
}
enum IID_DispSVGPathSegCurvetoCubicSmoothRel = GUID(0x30590019, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegCurvetoCubicSmoothRel : IDispatch
{
}
enum IID_DispSVGPathSegCurvetoQuadraticAbs = GUID(0x3059001a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegCurvetoQuadraticAbs : IDispatch
{
}
enum IID_DispSVGPathSegCurvetoQuadraticRel = GUID(0x3059001b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegCurvetoQuadraticRel : IDispatch
{
}
enum IID_DispSVGPathSegCurvetoQuadraticSmoothAbs = GUID(0x3059001c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegCurvetoQuadraticSmoothAbs : IDispatch
{
}
enum IID_DispSVGPathSegCurvetoQuadraticSmoothRel = GUID(0x3059001d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegCurvetoQuadraticSmoothRel : IDispatch
{
}
enum IID_DispSVGPathSegLinetoHorizontalAbs = GUID(0x3059001f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegLinetoHorizontalAbs : IDispatch
{
}
enum IID_DispSVGPathSegLinetoHorizontalRel = GUID(0x30590020, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegLinetoHorizontalRel : IDispatch
{
}
enum IID_DispSVGPathSegLinetoVerticalAbs = GUID(0x30590022, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegLinetoVerticalAbs : IDispatch
{
}
enum IID_DispSVGPathSegLinetoVerticalRel = GUID(0x30590023, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathSegLinetoVerticalRel : IDispatch
{
}
enum IID_ISVGPathSegList = GUID(0x30510510, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathSegList : IDispatch
{
    HRESULT put_numberOfItems(int);
    HRESULT get_numberOfItems(int*);
    HRESULT clear();
    HRESULT initialize(ISVGPathSeg, ISVGPathSeg*);
    HRESULT getItem(int, ISVGPathSeg*);
    HRESULT insertItemBefore(ISVGPathSeg, int, ISVGPathSeg*);
    HRESULT replaceItem(ISVGPathSeg, int, ISVGPathSeg*);
    HRESULT removeItem(int, ISVGPathSeg*);
    HRESULT appendItem(ISVGPathSeg, ISVGPathSeg*);
}
enum IID_ISVGPoint = GUID(0x305104f4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPoint : IDispatch
{
    HRESULT put_x(float);
    HRESULT get_x(float*);
    HRESULT put_y(float);
    HRESULT get_y(float*);
    HRESULT matrixTransform(ISVGMatrix, ISVGPoint*);
}
enum IID_ISVGPointList = GUID(0x305104f5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPointList : IDispatch
{
    HRESULT put_numberOfItems(int);
    HRESULT get_numberOfItems(int*);
    HRESULT clear();
    HRESULT initialize(ISVGPoint, ISVGPoint*);
    HRESULT getItem(int, ISVGPoint*);
    HRESULT insertItemBefore(ISVGPoint, int, ISVGPoint*);
    HRESULT replaceItem(ISVGPoint, int, ISVGPoint*);
    HRESULT removeItem(int, ISVGPoint*);
    HRESULT appendItem(ISVGPoint, ISVGPoint*);
}
enum IID_ISVGViewSpec = GUID(0x305104e2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGViewSpec : IDispatch
{
}
enum IID_ISVGTransform = GUID(0x305104f7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGTransform : IDispatch
{
    HRESULT put_type(short);
    HRESULT get_type(short*);
    HRESULT putref_matrix(ISVGMatrix);
    HRESULT get_matrix(ISVGMatrix*);
    HRESULT put_angle(float);
    HRESULT get_angle(float*);
    HRESULT setMatrix(ISVGMatrix);
    HRESULT setTranslate(float, float);
    HRESULT setScale(float, float);
    HRESULT setRotate(float, float, float);
    HRESULT setSkewX(float);
    HRESULT setSkewY(float);
}
enum IID_DispSVGSVGElement = GUID(0x30590001, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGSVGElement : IDispatch
{
}
enum IID_ISVGElementInstance = GUID(0x305104ee, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGElementInstance : IDispatch
{
    HRESULT get_correspondingElement(ISVGElement*);
    HRESULT get_correspondingUseElement(ISVGUseElement*);
    HRESULT get_parentNode(ISVGElementInstance*);
    HRESULT get_childNodes(ISVGElementInstanceList*);
    HRESULT get_firstChild(ISVGElementInstance*);
    HRESULT get_lastChild(ISVGElementInstance*);
    HRESULT get_previousSibling(ISVGElementInstance*);
    HRESULT get_nextSibling(ISVGElementInstance*);
}
enum IID_ISVGUseElement = GUID(0x305104ed, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGUseElement : IDispatch
{
    HRESULT putref_x(ISVGAnimatedLength);
    HRESULT get_x(ISVGAnimatedLength*);
    HRESULT putref_y(ISVGAnimatedLength);
    HRESULT get_y(ISVGAnimatedLength*);
    HRESULT putref_width(ISVGAnimatedLength);
    HRESULT get_width(ISVGAnimatedLength*);
    HRESULT putref_height(ISVGAnimatedLength);
    HRESULT get_height(ISVGAnimatedLength*);
    HRESULT putref_instanceRoot(ISVGElementInstance);
    HRESULT get_instanceRoot(ISVGElementInstance*);
    HRESULT putref_animatedInstanceRoot(ISVGElementInstance);
    HRESULT get_animatedInstanceRoot(ISVGElementInstance*);
}
enum IID_DispSVGUseElement = GUID(0x30590010, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGUseElement : IDispatch
{
}
enum IID_IHTMLStyleSheetRulesAppliedCollection = GUID(0x305104c0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLStyleSheetRulesAppliedCollection : IDispatch
{
    HRESULT item(int, IHTMLStyleSheetRule*);
    HRESULT get_length(int*);
    HRESULT propertyAppliedBy(BSTR, IHTMLStyleSheetRule*);
    HRESULT propertyAppliedTrace(BSTR, int, IHTMLStyleSheetRule*);
    HRESULT propertyAppliedTraceLength(BSTR, int*);
}
enum IID_IRulesApplied = GUID(0x305104bf, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IRulesApplied : IDispatch
{
    HRESULT get_element(IHTMLElement*);
    HRESULT get_inlineStyles(IHTMLStyle*);
    HRESULT get_appliedRules(IHTMLStyleSheetRulesAppliedCollection*);
    HRESULT propertyIsInline(BSTR, short*);
    HRESULT propertyIsInheritable(BSTR, short*);
    HRESULT hasInheritableProperty(short*);
}
enum IID_DispHTMLStyleSheetRulesAppliedCollection = GUID(0x3050f5a6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLStyleSheetRulesAppliedCollection : IDispatch
{
}
enum IID_DispRulesApplied = GUID(0x3050f5a5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispRulesApplied : IDispatch
{
}
enum IID_DispRulesAppliedCollection = GUID(0x3050f5a4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispRulesAppliedCollection : IDispatch
{
}
enum IID_DispHTMLW3CComputedStyle = GUID(0x30590070, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLW3CComputedStyle : IDispatch
{
}
enum IID_ISVGAnimatedPoints = GUID(0x30510517, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGAnimatedPoints : IDispatch
{
    HRESULT putref_points(ISVGPointList);
    HRESULT get_points(ISVGPointList*);
    HRESULT putref_animatedPoints(ISVGPointList);
    HRESULT get_animatedPoints(ISVGPointList*);
}
enum IID_ISVGCircleElement = GUID(0x30510514, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGCircleElement : IDispatch
{
    HRESULT putref_cx(ISVGAnimatedLength);
    HRESULT get_cx(ISVGAnimatedLength*);
    HRESULT putref_cy(ISVGAnimatedLength);
    HRESULT get_cy(ISVGAnimatedLength*);
    HRESULT putref_r(ISVGAnimatedLength);
    HRESULT get_r(ISVGAnimatedLength*);
}
enum IID_ISVGEllipseElement = GUID(0x30510515, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGEllipseElement : IDispatch
{
    HRESULT putref_cx(ISVGAnimatedLength);
    HRESULT get_cx(ISVGAnimatedLength*);
    HRESULT putref_cy(ISVGAnimatedLength);
    HRESULT get_cy(ISVGAnimatedLength*);
    HRESULT putref_rx(ISVGAnimatedLength);
    HRESULT get_rx(ISVGAnimatedLength*);
    HRESULT putref_ry(ISVGAnimatedLength);
    HRESULT get_ry(ISVGAnimatedLength*);
}
enum IID_ISVGLineElement = GUID(0x30510516, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGLineElement : IDispatch
{
    HRESULT putref_x1(ISVGAnimatedLength);
    HRESULT get_x1(ISVGAnimatedLength*);
    HRESULT putref_y1(ISVGAnimatedLength);
    HRESULT get_y1(ISVGAnimatedLength*);
    HRESULT putref_x2(ISVGAnimatedLength);
    HRESULT get_x2(ISVGAnimatedLength*);
    HRESULT putref_y2(ISVGAnimatedLength);
    HRESULT get_y2(ISVGAnimatedLength*);
}
enum IID_ISVGRectElement = GUID(0x30510513, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGRectElement : IDispatch
{
    HRESULT putref_x(ISVGAnimatedLength);
    HRESULT get_x(ISVGAnimatedLength*);
    HRESULT putref_y(ISVGAnimatedLength);
    HRESULT get_y(ISVGAnimatedLength*);
    HRESULT putref_width(ISVGAnimatedLength);
    HRESULT get_width(ISVGAnimatedLength*);
    HRESULT putref_height(ISVGAnimatedLength);
    HRESULT get_height(ISVGAnimatedLength*);
    HRESULT putref_rx(ISVGAnimatedLength);
    HRESULT get_rx(ISVGAnimatedLength*);
    HRESULT putref_ry(ISVGAnimatedLength);
    HRESULT get_ry(ISVGAnimatedLength*);
}
enum IID_ISVGPolygonElement = GUID(0x30510519, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPolygonElement : IDispatch
{
}
enum IID_ISVGPolylineElement = GUID(0x30510518, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPolylineElement : IDispatch
{
}
enum IID_DispSVGCircleElement = GUID(0x3059000a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGCircleElement : IDispatch
{
}
enum IID_DispSVGEllipseElement = GUID(0x3059000b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGEllipseElement : IDispatch
{
}
enum IID_DispSVGLineElement = GUID(0x3059000c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGLineElement : IDispatch
{
}
enum IID_DispSVGRectElement = GUID(0x30590009, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGRectElement : IDispatch
{
}
enum IID_DispSVGPolygonElement = GUID(0x3059000d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPolygonElement : IDispatch
{
}
enum IID_DispSVGPolylineElement = GUID(0x3059000e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPolylineElement : IDispatch
{
}
enum IID_ISVGGElement = GUID(0x305104e8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGGElement : IDispatch
{
}
enum IID_DispSVGGElement = GUID(0x30590002, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGGElement : IDispatch
{
}
enum IID_ISVGSymbolElement = GUID(0x305104ec, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGSymbolElement : IDispatch
{
}
enum IID_DispSVGSymbolElement = GUID(0x30590004, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGSymbolElement : IDispatch
{
}
enum IID_ISVGDefsElement = GUID(0x305104e9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGDefsElement : IDispatch
{
}
enum IID_DispSVGDefsElement = GUID(0x30590003, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGDefsElement : IDispatch
{
}
enum IID_ISVGAnimatedPathData = GUID(0x30510511, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGAnimatedPathData : IDispatch
{
    HRESULT putref_pathSegList(ISVGPathSegList);
    HRESULT get_pathSegList(ISVGPathSegList*);
    HRESULT putref_normalizedPathSegList(ISVGPathSegList);
    HRESULT get_normalizedPathSegList(ISVGPathSegList*);
    HRESULT putref_animatedPathSegList(ISVGPathSegList);
    HRESULT get_animatedPathSegList(ISVGPathSegList*);
    HRESULT putref_animatedNormalizedPathSegList(ISVGPathSegList);
    HRESULT get_animatedNormalizedPathSegList(ISVGPathSegList*);
}
enum IID_ISVGPathElement = GUID(0x30510512, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPathElement : IDispatch
{
    HRESULT putref_pathLength(ISVGAnimatedNumber);
    HRESULT get_pathLength(ISVGAnimatedNumber*);
    HRESULT getTotalLength(float*);
    HRESULT getPointAtLength(float, ISVGPoint*);
    HRESULT getPathSegAtLength(float, int*);
    HRESULT createSVGPathSegClosePath(ISVGPathSegClosePath*);
    HRESULT createSVGPathSegMovetoAbs(float, float, ISVGPathSegMovetoAbs*);
    HRESULT createSVGPathSegMovetoRel(float, float, ISVGPathSegMovetoRel*);
    HRESULT createSVGPathSegLinetoAbs(float, float, ISVGPathSegLinetoAbs*);
    HRESULT createSVGPathSegLinetoRel(float, float, ISVGPathSegLinetoRel*);
    HRESULT createSVGPathSegCurvetoCubicAbs(float, float, float, float, float, float, ISVGPathSegCurvetoCubicAbs*);
    HRESULT createSVGPathSegCurvetoCubicRel(float, float, float, float, float, float, ISVGPathSegCurvetoCubicRel*);
    HRESULT createSVGPathSegCurvetoQuadraticAbs(float, float, float, float, ISVGPathSegCurvetoQuadraticAbs*);
    HRESULT createSVGPathSegCurvetoQuadraticRel(float, float, float, float, ISVGPathSegCurvetoQuadraticRel*);
    HRESULT createSVGPathSegArcAbs(float, float, float, float, float, short, short, ISVGPathSegArcAbs*);
    HRESULT createSVGPathSegArcRel(float, float, float, float, float, short, short, ISVGPathSegArcRel*);
    HRESULT createSVGPathSegLinetoHorizontalAbs(float, ISVGPathSegLinetoHorizontalAbs*);
    HRESULT createSVGPathSegLinetoHorizontalRel(float, ISVGPathSegLinetoHorizontalRel*);
    HRESULT createSVGPathSegLinetoVerticalAbs(float, ISVGPathSegLinetoVerticalAbs*);
    HRESULT createSVGPathSegLinetoVerticalRel(float, ISVGPathSegLinetoVerticalRel*);
    HRESULT createSVGPathSegCurvetoCubicSmoothAbs(float, float, float, float, ISVGPathSegCurvetoCubicSmoothAbs*);
    HRESULT createSVGPathSegCurvetoCubicSmoothRel(float, float, float, float, ISVGPathSegCurvetoCubicSmoothRel*);
    HRESULT createSVGPathSegCurvetoQuadraticSmoothAbs(float, float, ISVGPathSegCurvetoQuadraticSmoothAbs*);
    HRESULT createSVGPathSegCurvetoQuadraticSmoothRel(float, float, ISVGPathSegCurvetoQuadraticSmoothRel*);
}
enum IID_DispSVGPathElement = GUID(0x30590011, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGPathElement : IDispatch
{
}
enum IID_ISVGPreserveAspectRatio = GUID(0x305104fa, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGPreserveAspectRatio : IDispatch
{
    HRESULT put_align(short);
    HRESULT get_align(short*);
    HRESULT put_meetOrSlice(short);
    HRESULT get_meetOrSlice(short*);
}
enum IID_ISVGTextElement = GUID(0x3051051c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGTextElement : IDispatch
{
}
enum IID_DispSVGTextElement = GUID(0x30590037, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGTextElement : IDispatch
{
}
enum IID_ISVGImageElement = GUID(0x305104f0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGImageElement : IDispatch
{
    HRESULT putref_x(ISVGAnimatedLength);
    HRESULT get_x(ISVGAnimatedLength*);
    HRESULT putref_y(ISVGAnimatedLength);
    HRESULT get_y(ISVGAnimatedLength*);
    HRESULT putref_width(ISVGAnimatedLength);
    HRESULT get_width(ISVGAnimatedLength*);
    HRESULT putref_height(ISVGAnimatedLength);
    HRESULT get_height(ISVGAnimatedLength*);
}
enum IID_DispSVGImageElement = GUID(0x30590027, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGImageElement : IDispatch
{
}
enum IID_ISVGStopElement = GUID(0x3051052b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGStopElement : IDispatch
{
    HRESULT putref_offset(ISVGAnimatedNumber);
    HRESULT get_offset(ISVGAnimatedNumber*);
}
enum IID_DispSVGStopElement = GUID(0x3059002d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGStopElement : IDispatch
{
}
enum IID_ISVGGradientElement = GUID(0x30510528, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGGradientElement : IDispatch
{
    HRESULT putref_gradientUnits(ISVGAnimatedEnumeration);
    HRESULT get_gradientUnits(ISVGAnimatedEnumeration*);
    HRESULT putref_gradientTransform(ISVGAnimatedTransformList);
    HRESULT get_gradientTransform(ISVGAnimatedTransformList*);
    HRESULT putref_spreadMethod(ISVGAnimatedEnumeration);
    HRESULT get_spreadMethod(ISVGAnimatedEnumeration*);
}
enum IID_DispSVGGradientElement = GUID(0x3059002e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGGradientElement : IDispatch
{
}
enum IID_ISVGLinearGradientElement = GUID(0x30510529, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGLinearGradientElement : IDispatch
{
    HRESULT putref_x1(ISVGAnimatedLength);
    HRESULT get_x1(ISVGAnimatedLength*);
    HRESULT putref_y1(ISVGAnimatedLength);
    HRESULT get_y1(ISVGAnimatedLength*);
    HRESULT putref_x2(ISVGAnimatedLength);
    HRESULT get_x2(ISVGAnimatedLength*);
    HRESULT putref_y2(ISVGAnimatedLength);
    HRESULT get_y2(ISVGAnimatedLength*);
}
enum IID_DispSVGLinearGradientElement = GUID(0x3059002a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGLinearGradientElement : IDispatch
{
}
enum IID_ISVGRadialGradientElement = GUID(0x3051052a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGRadialGradientElement : IDispatch
{
    HRESULT putref_cx(ISVGAnimatedLength);
    HRESULT get_cx(ISVGAnimatedLength*);
    HRESULT putref_cy(ISVGAnimatedLength);
    HRESULT get_cy(ISVGAnimatedLength*);
    HRESULT putref_r(ISVGAnimatedLength);
    HRESULT get_r(ISVGAnimatedLength*);
    HRESULT putref_fx(ISVGAnimatedLength);
    HRESULT get_fx(ISVGAnimatedLength*);
    HRESULT putref_fy(ISVGAnimatedLength);
    HRESULT get_fy(ISVGAnimatedLength*);
}
enum IID_DispSVGRadialGradientElement = GUID(0x3059002b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGRadialGradientElement : IDispatch
{
}
enum IID_ISVGMaskElement = GUID(0x3051052e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGMaskElement : IDispatch
{
    HRESULT putref_maskUnits(ISVGAnimatedEnumeration);
    HRESULT get_maskUnits(ISVGAnimatedEnumeration*);
    HRESULT putref_maskContentUnits(ISVGAnimatedEnumeration);
    HRESULT get_maskContentUnits(ISVGAnimatedEnumeration*);
    HRESULT putref_x(ISVGAnimatedLength);
    HRESULT get_x(ISVGAnimatedLength*);
    HRESULT putref_y(ISVGAnimatedLength);
    HRESULT get_y(ISVGAnimatedLength*);
    HRESULT putref_width(ISVGAnimatedLength);
    HRESULT get_width(ISVGAnimatedLength*);
    HRESULT putref_height(ISVGAnimatedLength);
    HRESULT get_height(ISVGAnimatedLength*);
}
enum IID_DispSVGMaskElement = GUID(0x3059003c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGMaskElement : IDispatch
{
}
enum IID_ISVGMarkerElement = GUID(0x30510525, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGMarkerElement : IDispatch
{
    HRESULT putref_refX(ISVGAnimatedLength);
    HRESULT get_refX(ISVGAnimatedLength*);
    HRESULT putref_refY(ISVGAnimatedLength);
    HRESULT get_refY(ISVGAnimatedLength*);
    HRESULT putref_markerUnits(ISVGAnimatedEnumeration);
    HRESULT get_markerUnits(ISVGAnimatedEnumeration*);
    HRESULT putref_markerWidth(ISVGAnimatedLength);
    HRESULT get_markerWidth(ISVGAnimatedLength*);
    HRESULT putref_markerHeight(ISVGAnimatedLength);
    HRESULT get_markerHeight(ISVGAnimatedLength*);
    HRESULT putref_orientType(ISVGAnimatedEnumeration);
    HRESULT get_orientType(ISVGAnimatedEnumeration*);
    HRESULT putref_orientAngle(ISVGAnimatedAngle);
    HRESULT get_orientAngle(ISVGAnimatedAngle*);
    HRESULT setOrientToAuto();
    HRESULT setOrientToAngle(ISVGAngle);
}
enum IID_DispSVGMarkerElement = GUID(0x30590036, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGMarkerElement : IDispatch
{
}
enum IID_ISVGZoomEvent = GUID(0x3051054e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGZoomEvent : IDispatch
{
    HRESULT get_zoomRectScreen(ISVGRect*);
    HRESULT get_previousScale(float*);
    HRESULT get_previousTranslate(ISVGPoint*);
    HRESULT get_newScale(float*);
    HRESULT get_newTranslate(ISVGPoint*);
}
enum IID_DispSVGZoomEvent = GUID(0x30590031, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGZoomEvent : IDispatch
{
}
enum IID_ISVGAElement = GUID(0x3051054b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGAElement : IDispatch
{
    HRESULT putref_target(ISVGAnimatedString);
    HRESULT get_target(ISVGAnimatedString*);
}
enum IID_DispSVGAElement = GUID(0x30590033, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGAElement : IDispatch
{
}
enum IID_ISVGViewElement = GUID(0x3051054c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGViewElement : IDispatch
{
    HRESULT putref_viewTarget(ISVGStringList);
    HRESULT get_viewTarget(ISVGStringList*);
}
enum IID_DispSVGViewElement = GUID(0x30590034, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGViewElement : IDispatch
{
}
enum IID_IHTMLMediaError = GUID(0x30510704, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLMediaError : IDispatch
{
    HRESULT get_code(short*);
}
enum IID_IHTMLTimeRanges = GUID(0x30510705, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTimeRanges : IDispatch
{
    HRESULT get_length(int*);
    HRESULT start(int, float*);
    HRESULT end(int, float*);
}
enum IID_IHTMLTimeRanges2 = GUID(0x3051080b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLTimeRanges2 : IDispatch
{
    HRESULT startDouble(int, double*);
    HRESULT endDouble(int, double*);
}
enum IID_IHTMLMediaElement = GUID(0x30510706, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLMediaElement : IDispatch
{
    HRESULT get_error(IHTMLMediaError*);
    HRESULT put_src(BSTR);
    HRESULT get_src(BSTR*);
    HRESULT get_currentSrc(BSTR*);
    HRESULT get_networkState(ushort*);
    HRESULT put_preload(BSTR);
    HRESULT get_preload(BSTR*);
    HRESULT get_buffered(IHTMLTimeRanges*);
    HRESULT load();
    HRESULT canPlayType(BSTR, BSTR*);
    HRESULT get_seeking(short*);
    HRESULT put_currentTime(float);
    HRESULT get_currentTime(float*);
    HRESULT get_initialTime(float*);
    HRESULT get_duration(float*);
    HRESULT get_paused(short*);
    HRESULT put_defaultPlaybackRate(float);
    HRESULT get_defaultPlaybackRate(float*);
    HRESULT put_playbackRate(float);
    HRESULT get_playbackRate(float*);
    HRESULT get_played(IHTMLTimeRanges*);
    HRESULT get_seekable(IHTMLTimeRanges*);
    HRESULT get_ended(short*);
    HRESULT put_autoplay(short);
    HRESULT get_autoplay(short*);
    HRESULT put_loop(short);
    HRESULT get_loop(short*);
    HRESULT play();
    HRESULT pause();
    HRESULT put_controls(short);
    HRESULT get_controls(short*);
    HRESULT put_volume(float);
    HRESULT get_volume(float*);
    HRESULT put_muted(short);
    HRESULT get_muted(short*);
    HRESULT put_autobuffer(short);
    HRESULT get_autobuffer(short*);
}
enum IID_IHTMLMediaElement2 = GUID(0x30510809, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLMediaElement2 : IDispatch
{
    HRESULT put_currentTimeDouble(double);
    HRESULT get_currentTimeDouble(double*);
    HRESULT get_initialTimeDouble(double*);
    HRESULT get_durationDouble(double*);
    HRESULT put_defaultPlaybackRateDouble(double);
    HRESULT get_defaultPlaybackRateDouble(double*);
    HRESULT put_playbackRateDouble(double);
    HRESULT get_playbackRateDouble(double*);
    HRESULT put_volumeDouble(double);
    HRESULT get_volumeDouble(double*);
}
enum IID_IHTMLMSMediaElement = GUID(0x30510792, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLMSMediaElement : IDispatch
{
    HRESULT put_msPlayToDisabled(short);
    HRESULT get_msPlayToDisabled(short*);
    HRESULT put_msPlayToPrimary(short);
    HRESULT get_msPlayToPrimary(short*);
}
enum IID_IHTMLSourceElement = GUID(0x30510707, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLSourceElement : IDispatch
{
    HRESULT put_src(BSTR);
    HRESULT get_src(BSTR*);
    HRESULT put_type(BSTR);
    HRESULT get_type(BSTR*);
    HRESULT put_media(BSTR);
    HRESULT get_media(BSTR*);
}
enum IID_IHTMLAudioElement = GUID(0x30510708, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLAudioElement : IDispatch
{
}
enum IID_IHTMLVideoElement = GUID(0x30510709, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLVideoElement : IDispatch
{
    HRESULT put_width(int);
    HRESULT get_width(int*);
    HRESULT put_height(int);
    HRESULT get_height(int*);
    HRESULT get_videoWidth(uint*);
    HRESULT get_videoHeight(uint*);
    HRESULT put_poster(BSTR);
    HRESULT get_poster(BSTR*);
}
enum IID_IHTMLAudioElementFactory = GUID(0x305107eb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLAudioElementFactory : IDispatch
{
    HRESULT create(VARIANT, IHTMLAudioElement*);
}
enum IID_DispHTMLMediaError = GUID(0x30590086, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLMediaError : IDispatch
{
}
enum IID_DispHTMLTimeRanges = GUID(0x30590087, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLTimeRanges : IDispatch
{
}
enum IID_DispHTMLMediaElement = GUID(0x30590088, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLMediaElement : IDispatch
{
}
enum IID_DispHTMLSourceElement = GUID(0x30590089, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLSourceElement : IDispatch
{
}
enum IID_DispHTMLAudioElement = GUID(0x3059008a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLAudioElement : IDispatch
{
}
enum IID_DispHTMLVideoElement = GUID(0x3059008b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLVideoElement : IDispatch
{
}
enum IID_ISVGSwitchElement = GUID(0x305104f1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGSwitchElement : IDispatch
{
}
enum IID_DispSVGSwitchElement = GUID(0x30590030, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGSwitchElement : IDispatch
{
}
enum IID_ISVGDescElement = GUID(0x305104ea, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGDescElement : IDispatch
{
}
enum IID_DispSVGDescElement = GUID(0x30590005, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGDescElement : IDispatch
{
}
enum IID_ISVGTitleElement = GUID(0x305104eb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGTitleElement : IDispatch
{
}
enum IID_DispSVGTitleElement = GUID(0x30590006, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGTitleElement : IDispatch
{
}
enum IID_ISVGMetadataElement = GUID(0x30510560, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGMetadataElement : IDispatch
{
}
enum IID_DispSVGMetadataElement = GUID(0x3059002f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGMetadataElement : IDispatch
{
}
enum IID_ISVGElementInstanceList = GUID(0x305104ef, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGElementInstanceList : IDispatch
{
    HRESULT get_length(int*);
    HRESULT item(int, ISVGElementInstance*);
}
enum IID_DispSVGElementInstance = GUID(0x30590007, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGElementInstance : IDispatch
{
}
enum IID_DispSVGElementInstanceList = GUID(0x30590008, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGElementInstanceList : IDispatch
{
}
enum IID_IDOMException = GUID(0x3051072b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMException : IDispatch
{
    HRESULT put_code(int);
    HRESULT get_code(int*);
    HRESULT get_message(BSTR*);
}
enum IID_DispDOMException = GUID(0x30590094, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMException : IDispatch
{
}
enum IID_IRangeException = GUID(0x3051072d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IRangeException : IDispatch
{
    HRESULT put_code(int);
    HRESULT get_code(int*);
    HRESULT get_message(BSTR*);
}
enum IID_DispRangeException = GUID(0x30590095, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispRangeException : IDispatch
{
}
enum IID_ISVGException = GUID(0x3051072f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGException : IDispatch
{
    HRESULT put_code(int);
    HRESULT get_code(int*);
    HRESULT get_message(BSTR*);
}
enum IID_DispSVGException = GUID(0x30590096, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGException : IDispatch
{
}
enum IID_IEventException = GUID(0x3051073a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IEventException : IDispatch
{
    HRESULT put_code(int);
    HRESULT get_code(int*);
    HRESULT get_message(BSTR*);
}
enum IID_DispEventException = GUID(0x30590099, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispEventException : IDispatch
{
}
enum IID_ISVGScriptElement = GUID(0x3051054d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGScriptElement : IDispatch
{
    HRESULT put_type(BSTR);
    HRESULT get_type(BSTR*);
}
enum IID_DispSVGScriptElement = GUID(0x30590039, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGScriptElement : IDispatch
{
}
enum IID_ISVGStyleElement = GUID(0x305104f3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGStyleElement : IDispatch
{
    HRESULT put_type(BSTR);
    HRESULT get_type(BSTR*);
    HRESULT put_media(BSTR);
    HRESULT get_media(BSTR*);
}
enum IID_DispSVGStyleElement = GUID(0x30590029, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGStyleElement : IDispatch
{
}
enum IID_ISVGTextContentElement = GUID(0x3051051a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGTextContentElement : IDispatch
{
    HRESULT putref_textLength(ISVGAnimatedLength);
    HRESULT get_textLength(ISVGAnimatedLength*);
    HRESULT putref_lengthAdjust(ISVGAnimatedEnumeration);
    HRESULT get_lengthAdjust(ISVGAnimatedEnumeration*);
    HRESULT getNumberOfChars(int*);
    HRESULT getComputedTextLength(float*);
    HRESULT getSubStringLength(int, int, float*);
    HRESULT getStartPositionOfChar(int, ISVGPoint*);
    HRESULT getEndPositionOfChar(int, ISVGPoint*);
    HRESULT getExtentOfChar(int, ISVGRect*);
    HRESULT getRotationOfChar(int, float*);
    HRESULT getCharNumAtPosition(ISVGPoint, int*);
    HRESULT selectSubString(int, int);
}
enum IID_DispSVGTextContentElement = GUID(0x30590035, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGTextContentElement : IDispatch
{
}
enum IID_ISVGTextPositioningElement = GUID(0x3051051b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGTextPositioningElement : IDispatch
{
    HRESULT putref_x(ISVGAnimatedLengthList);
    HRESULT get_x(ISVGAnimatedLengthList*);
    HRESULT putref_y(ISVGAnimatedLengthList);
    HRESULT get_y(ISVGAnimatedLengthList*);
    HRESULT putref_dx(ISVGAnimatedLengthList);
    HRESULT get_dx(ISVGAnimatedLengthList*);
    HRESULT putref_dy(ISVGAnimatedLengthList);
    HRESULT get_dy(ISVGAnimatedLengthList*);
    HRESULT putref_rotate(ISVGAnimatedNumberList);
    HRESULT get_rotate(ISVGAnimatedNumberList*);
}
enum IID_DispSVGTextPositioningElement = GUID(0x30590038, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGTextPositioningElement : IDispatch
{
}
enum IID_DispDOMDocumentType = GUID(0x30590098, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMDocumentType : IDispatch
{
}
enum IID_DispNodeIterator = GUID(0x3059009c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispNodeIterator : IDispatch
{
}
enum IID_DispTreeWalker = GUID(0x3059009d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispTreeWalker : IDispatch
{
}
enum IID_DispDOMProcessingInstruction = GUID(0x3059009b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMProcessingInstruction : IDispatch
{
}
enum IID_IHTMLPerformanceNavigation = GUID(0x30510750, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLPerformanceNavigation : IDispatch
{
    HRESULT get_type(uint*);
    HRESULT get_redirectCount(uint*);
    HRESULT toString(BSTR*);
    HRESULT toJSON(VARIANT*);
}
enum IID_IHTMLPerformanceTiming = GUID(0x30510752, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLPerformanceTiming : IDispatch
{
    HRESULT get_navigationStart(ulong*);
    HRESULT get_unloadEventStart(ulong*);
    HRESULT get_unloadEventEnd(ulong*);
    HRESULT get_redirectStart(ulong*);
    HRESULT get_redirectEnd(ulong*);
    HRESULT get_fetchStart(ulong*);
    HRESULT get_domainLookupStart(ulong*);
    HRESULT get_domainLookupEnd(ulong*);
    HRESULT get_connectStart(ulong*);
    HRESULT get_connectEnd(ulong*);
    HRESULT get_requestStart(ulong*);
    HRESULT get_responseStart(ulong*);
    HRESULT get_responseEnd(ulong*);
    HRESULT get_domLoading(ulong*);
    HRESULT get_domInteractive(ulong*);
    HRESULT get_domContentLoadedEventStart(ulong*);
    HRESULT get_domContentLoadedEventEnd(ulong*);
    HRESULT get_domComplete(ulong*);
    HRESULT get_loadEventStart(ulong*);
    HRESULT get_loadEventEnd(ulong*);
    HRESULT get_msFirstPaint(ulong*);
    HRESULT toString(BSTR*);
    HRESULT toJSON(VARIANT*);
}
enum IID_DispHTMLPerformance = GUID(0x3059009f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLPerformance : IDispatch
{
}
enum IID_DispHTMLPerformanceNavigation = GUID(0x305900a0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLPerformanceNavigation : IDispatch
{
}
enum IID_DispHTMLPerformanceTiming = GUID(0x305900a1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLPerformanceTiming : IDispatch
{
}
enum IID_ISVGTSpanElement = GUID(0x3051051d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGTSpanElement : IDispatch
{
}
enum IID_DispSVGTSpanElement = GUID(0x3059003a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGTSpanElement : IDispatch
{
}
enum IID_ITemplatePrinter = GUID(0x3050f6b4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ITemplatePrinter : IDispatch
{
    HRESULT startDoc(BSTR, short*);
    HRESULT stopDoc();
    HRESULT printBlankPage();
    HRESULT printPage(IDispatch);
    HRESULT ensurePrintDialogDefaults(short*);
    HRESULT showPrintDialog(short*);
    HRESULT showPageSetupDialog(short*);
    HRESULT printNonNative(IUnknown, short*);
    HRESULT printNonNativeFrames(IUnknown, short);
    HRESULT put_framesetDocument(short);
    HRESULT get_framesetDocument(short*);
    HRESULT put_frameActive(short);
    HRESULT get_frameActive(short*);
    HRESULT put_frameAsShown(short);
    HRESULT get_frameAsShown(short*);
    HRESULT put_selection(short);
    HRESULT get_selection(short*);
    HRESULT put_selectedPages(short);
    HRESULT get_selectedPages(short*);
    HRESULT put_currentPage(short);
    HRESULT get_currentPage(short*);
    HRESULT put_currentPageAvail(short);
    HRESULT get_currentPageAvail(short*);
    HRESULT put_collate(short);
    HRESULT get_collate(short*);
    HRESULT get_duplex(short*);
    HRESULT put_copies(ushort);
    HRESULT get_copies(ushort*);
    HRESULT put_pageFrom(ushort);
    HRESULT get_pageFrom(ushort*);
    HRESULT put_pageTo(ushort);
    HRESULT get_pageTo(ushort*);
    HRESULT put_tableOfLinks(short);
    HRESULT get_tableOfLinks(short*);
    HRESULT put_allLinkedDocuments(short);
    HRESULT get_allLinkedDocuments(short*);
    HRESULT put_header(BSTR);
    HRESULT get_header(BSTR*);
    HRESULT put_footer(BSTR);
    HRESULT get_footer(BSTR*);
    HRESULT put_marginLeft(int);
    HRESULT get_marginLeft(int*);
    HRESULT put_marginRight(int);
    HRESULT get_marginRight(int*);
    HRESULT put_marginTop(int);
    HRESULT get_marginTop(int*);
    HRESULT put_marginBottom(int);
    HRESULT get_marginBottom(int*);
    HRESULT get_pageWidth(int*);
    HRESULT get_pageHeight(int*);
    HRESULT get_unprintableLeft(int*);
    HRESULT get_unprintableTop(int*);
    HRESULT get_unprintableRight(int*);
    HRESULT get_unprintableBottom(int*);
    HRESULT updatePageStatus(int*);
}
enum IID_ITemplatePrinter2 = GUID(0x3050f83f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ITemplatePrinter2 : ITemplatePrinter
{
    HRESULT put_selectionEnabled(short);
    HRESULT get_selectionEnabled(short*);
    HRESULT put_frameActiveEnabled(short);
    HRESULT get_frameActiveEnabled(short*);
    HRESULT put_orientation(BSTR);
    HRESULT get_orientation(BSTR*);
    HRESULT put_usePrinterCopyCollate(short);
    HRESULT get_usePrinterCopyCollate(short*);
    HRESULT deviceSupports(BSTR, VARIANT*);
}
enum IID_ITemplatePrinter3 = GUID(0x305104a3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ITemplatePrinter3 : ITemplatePrinter2
{
    HRESULT put_headerFooterFont(BSTR);
    HRESULT get_headerFooterFont(BSTR*);
    HRESULT getPageMarginTop(IDispatch, int, int, VARIANT*);
    HRESULT getPageMarginRight(IDispatch, int, int, VARIANT*);
    HRESULT getPageMarginBottom(IDispatch, int, int, VARIANT*);
    HRESULT getPageMarginLeft(IDispatch, int, int, VARIANT*);
    HRESULT getPageMarginTopImportant(IDispatch, short*);
    HRESULT getPageMarginRightImportant(IDispatch, short*);
    HRESULT getPageMarginBottomImportant(IDispatch, short*);
    HRESULT getPageMarginLeftImportant(IDispatch, short*);
}
enum IID_IPrintManagerTemplatePrinter = GUID(0xf633be14, 0x9eff, 0x4c4d, [0x92, 0x9e, 0x5, 0x71, 0x7b, 0x21, 0xb3, 0xe6]);
interface IPrintManagerTemplatePrinter : IDispatch
{
    HRESULT startPrint();
    HRESULT drawPreviewPage(IDispatch, int);
    HRESULT setPageCount(int);
    HRESULT invalidatePreview();
    HRESULT getPrintTaskOptionValue(BSTR, VARIANT*);
    HRESULT endPrint();
}
enum IID_IPrintManagerTemplatePrinter2 = GUID(0xc6403497, 0x7493, 0x4f09, [0x80, 0x16, 0x54, 0xb0, 0x3e, 0x9b, 0xda, 0x69]);
interface IPrintManagerTemplatePrinter2 : IPrintManagerTemplatePrinter
{
    HRESULT get_showHeaderFooter(short*);
    HRESULT get_shrinkToFit(short*);
    HRESULT get_percentScale(float*);
}
enum IID_DispCPrintManagerTemplatePrinter = GUID(0x305900e9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispCPrintManagerTemplatePrinter : IDispatch
{
}
enum IID_ISVGTextPathElement = GUID(0x3051051f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISVGTextPathElement : IDispatch
{
    HRESULT putref_startOffset(ISVGAnimatedLength);
    HRESULT get_startOffset(ISVGAnimatedLength*);
    HRESULT putref_method(ISVGAnimatedEnumeration);
    HRESULT get_method(ISVGAnimatedEnumeration*);
    HRESULT putref_spacing(ISVGAnimatedEnumeration);
    HRESULT get_spacing(ISVGAnimatedEnumeration*);
}
enum IID_DispSVGTextPathElement = GUID(0x3059003d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispSVGTextPathElement : IDispatch
{
}
enum IID_IDOMXmlSerializer = GUID(0x3051077d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMXmlSerializer : IDispatch
{
    HRESULT serializeToString(IHTMLDOMNode, BSTR*);
}
enum IID_IDOMParser = GUID(0x30510781, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMParser : IDispatch
{
    HRESULT parseFromString(BSTR, BSTR, IHTMLDocument2*);
}
enum IID_DispXMLSerializer = GUID(0x305900ad, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispXMLSerializer : IDispatch
{
}
enum IID_DispDOMParser = GUID(0x305900ae, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMParser : IDispatch
{
}
enum IID_IDOMXmlSerializerFactory = GUID(0x3051077f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMXmlSerializerFactory : IDispatch
{
    HRESULT create(IDOMXmlSerializer*);
}
enum IID_IDOMParserFactory = GUID(0x30510783, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMParserFactory : IDispatch
{
    HRESULT create(IDOMParser*);
}
enum IID_DispHTMLSemanticElement = GUID(0x305900ba, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLSemanticElement : IDispatch
{
}
enum IID_IHTMLProgressElement = GUID(0x3050f2d6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLProgressElement : IDispatch
{
    HRESULT put_value(float);
    HRESULT get_value(float*);
    HRESULT put_max(float);
    HRESULT get_max(float*);
    HRESULT get_position(float*);
    HRESULT get_form(IHTMLFormElement*);
}
enum IID_DispHTMLProgressElement = GUID(0x305900af, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLProgressElement : IDispatch
{
}
enum IID_IDOMMSTransitionEvent = GUID(0x305107b5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMMSTransitionEvent : IDispatch
{
    HRESULT get_propertyName(BSTR*);
    HRESULT get_elapsedTime(float*);
    HRESULT initMSTransitionEvent(BSTR, short, short, BSTR, float);
}
enum IID_DispDOMMSTransitionEvent = GUID(0x305900bb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMMSTransitionEvent : IDispatch
{
}
enum IID_IDOMMSAnimationEvent = GUID(0x305107b7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMMSAnimationEvent : IDispatch
{
    HRESULT get_animationName(BSTR*);
    HRESULT get_elapsedTime(float*);
    HRESULT initMSAnimationEvent(BSTR, short, short, BSTR, float);
}
enum IID_DispDOMMSAnimationEvent = GUID(0x305900bc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMMSAnimationEvent : IDispatch
{
}
enum IID_IWebGeocoordinates = GUID(0x305107c7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IWebGeocoordinates : IDispatch
{
    HRESULT get_latitude(double*);
    HRESULT get_longitude(double*);
    HRESULT get_altitude(VARIANT*);
    HRESULT get_accuracy(double*);
    HRESULT get_altitudeAccuracy(VARIANT*);
    HRESULT get_heading(VARIANT*);
    HRESULT get_speed(VARIANT*);
}
enum IID_IWebGeopositionError = GUID(0x305107c9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IWebGeopositionError : IDispatch
{
    HRESULT get_code(int*);
    HRESULT get_message(BSTR*);
}
enum IID_IWebGeoposition = GUID(0x305107cd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IWebGeoposition : IDispatch
{
    HRESULT get_coords(IWebGeocoordinates*);
    HRESULT get_timestamp(ulong*);
}
enum IID_DispWebGeolocation = GUID(0x305900bd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispWebGeolocation : IDispatch
{
}
enum IID_DispWebGeocoordinates = GUID(0x305900be, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispWebGeocoordinates : IDispatch
{
}
enum IID_DispWebGeopositionError = GUID(0x305900bf, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispWebGeopositionError : IDispatch
{
}
enum IID_DispWebGeoposition = GUID(0x305900c1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispWebGeoposition : IDispatch
{
}
enum IID_IClientCaps = GUID(0x7e8bc44d, 0xaeff, 0x11d1, [0x89, 0xc2, 0x0, 0xc0, 0x4f, 0xb6, 0xbf, 0xc4]);
interface IClientCaps : IDispatch
{
    HRESULT get_javaEnabled(short*);
    HRESULT get_cookieEnabled(short*);
    HRESULT get_cpuClass(BSTR*);
    HRESULT get_systemLanguage(BSTR*);
    HRESULT get_userLanguage(BSTR*);
    HRESULT get_platform(BSTR*);
    HRESULT get_connectionSpeed(int*);
    HRESULT get_onLine(short*);
    HRESULT get_colorDepth(int*);
    HRESULT get_bufferDepth(int*);
    HRESULT get_width(int*);
    HRESULT get_height(int*);
    HRESULT get_availHeight(int*);
    HRESULT get_availWidth(int*);
    HRESULT get_connectionType(BSTR*);
    HRESULT isComponentInstalled(BSTR, BSTR, BSTR, short*);
    HRESULT getComponentVersion(BSTR, BSTR, BSTR*);
    HRESULT compareVersions(BSTR, BSTR, int*);
    HRESULT addComponentRequest(BSTR, BSTR, BSTR);
    HRESULT doComponentRequest(short*);
    HRESULT clearComponentRequest();
}
enum IID_IDOMMSManipulationEvent = GUID(0x30510816, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMMSManipulationEvent : IDispatch
{
    HRESULT get_lastState(int*);
    HRESULT get_currentState(int*);
    HRESULT initMSManipulationEvent(BSTR, short, short, IHTMLWindow2, int, int, int);
}
enum IID_DispDOMMSManipulationEvent = GUID(0x305900e1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMMSManipulationEvent : IDispatch
{
}
enum IID_IDOMCloseEvent = GUID(0x305107ff, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMCloseEvent : IDispatch
{
    HRESULT get_wasClean(short*);
    HRESULT initCloseEvent(BSTR, short, short, short, int, BSTR);
}
enum IID_DispDOMCloseEvent = GUID(0x305900dc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispDOMCloseEvent : IDispatch
{
}
enum IID_DispApplicationCache = GUID(0x305900e4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispApplicationCache : IDispatch
{
}
enum IID_ICSSFilterSite = GUID(0x3050f3ed, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ICSSFilterSite : IUnknown
{
    HRESULT GetElement(IHTMLElement*);
    HRESULT FireOnFilterChangeEvent();
}
enum IID_IMarkupPointer = GUID(0x3050f49f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IMarkupPointer : IUnknown
{
    HRESULT OwningDoc(IHTMLDocument2*);
    HRESULT Gravity(POINTER_GRAVITY*);
    HRESULT SetGravity(POINTER_GRAVITY);
    HRESULT Cling(BOOL*);
    HRESULT SetCling(BOOL);
    HRESULT Unposition();
    HRESULT IsPositioned(BOOL*);
    HRESULT GetContainer(IMarkupContainer*);
    HRESULT MoveAdjacentToElement(IHTMLElement, ELEMENT_ADJACENCY);
    HRESULT MoveToPointer(IMarkupPointer);
    HRESULT MoveToContainer(IMarkupContainer, BOOL);
    HRESULT Left(BOOL, MARKUP_CONTEXT_TYPE*, IHTMLElement*, int*, PWSTR);
    HRESULT Right(BOOL, MARKUP_CONTEXT_TYPE*, IHTMLElement*, int*, PWSTR);
    HRESULT CurrentScope(IHTMLElement*);
    HRESULT IsLeftOf(IMarkupPointer, BOOL*);
    HRESULT IsLeftOfOrEqualTo(IMarkupPointer, BOOL*);
    HRESULT IsRightOf(IMarkupPointer, BOOL*);
    HRESULT IsRightOfOrEqualTo(IMarkupPointer, BOOL*);
    HRESULT IsEqualTo(IMarkupPointer, BOOL*);
    HRESULT MoveUnit(MOVEUNIT_ACTION);
    HRESULT FindText(PWSTR, uint, IMarkupPointer, IMarkupPointer);
}
enum IID_IMarkupContainer = GUID(0x3050f5f9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IMarkupContainer : IUnknown
{
    HRESULT OwningDoc(IHTMLDocument2*);
}
enum IID_IMarkupContainer2 = GUID(0x3050f648, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IMarkupContainer2 : IMarkupContainer
{
    HRESULT CreateChangeLog(IHTMLChangeSink, IHTMLChangeLog*, BOOL, BOOL);
    HRESULT RegisterForDirtyRange(IHTMLChangeSink, uint*);
    HRESULT UnRegisterForDirtyRange(uint);
    HRESULT GetAndClearDirtyRange(uint, IMarkupPointer, IMarkupPointer);
    int GetVersionNumber();
    HRESULT GetMasterElement(IHTMLElement*);
}
enum IID_IHTMLChangeLog = GUID(0x3050f649, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLChangeLog : IUnknown
{
    HRESULT GetNextChange(ubyte*, int, int*);
}
enum IID_IHTMLChangeSink = GUID(0x3050f64a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLChangeSink : IUnknown
{
    HRESULT Notify();
}
enum IID_ISegmentList = GUID(0x3050f605, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISegmentList : IUnknown
{
    HRESULT CreateIterator(ISegmentListIterator*);
    HRESULT GetType(SELECTION_TYPE*);
    HRESULT IsEmpty(BOOL*);
}
enum IID_ISegmentListIterator = GUID(0x3050f692, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISegmentListIterator : IUnknown
{
    HRESULT Current(ISegment*);
    HRESULT First();
    HRESULT IsDone();
    HRESULT Advance();
}
enum IID_IHTMLCaret = GUID(0x3050f604, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLCaret : IUnknown
{
    HRESULT MoveCaretToPointer(IDisplayPointer, BOOL, CARET_DIRECTION);
    HRESULT MoveCaretToPointerEx(IDisplayPointer, BOOL, BOOL, CARET_DIRECTION);
    HRESULT MoveMarkupPointerToCaret(IMarkupPointer);
    HRESULT MoveDisplayPointerToCaret(IDisplayPointer);
    HRESULT IsVisible(BOOL*);
    HRESULT Show(BOOL);
    HRESULT Hide();
    HRESULT InsertText(PWSTR, int);
    HRESULT ScrollIntoView();
    HRESULT GetLocation(POINT*, BOOL);
    HRESULT GetCaretDirection(CARET_DIRECTION*);
    HRESULT SetCaretDirection(CARET_DIRECTION);
}
enum IID_ISegment = GUID(0x3050f683, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISegment : IUnknown
{
    HRESULT GetPointers(IMarkupPointer, IMarkupPointer);
}
enum IID_IElementSegment = GUID(0x3050f68f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementSegment : ISegment
{
    HRESULT GetElement(IHTMLElement*);
    HRESULT SetPrimary(BOOL);
    HRESULT IsPrimary(BOOL*);
}
enum IID_IHighlightSegment = GUID(0x3050f690, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHighlightSegment : ISegment
{
}
enum IID_IHighlightRenderingServices = GUID(0x3050f606, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHighlightRenderingServices : IUnknown
{
    HRESULT AddSegment(IDisplayPointer, IDisplayPointer, IHTMLRenderStyle, IHighlightSegment*);
    HRESULT MoveSegmentToPointers(IHighlightSegment, IDisplayPointer, IDisplayPointer);
    HRESULT RemoveSegment(IHighlightSegment);
}
enum IID_ILineInfo = GUID(0x3050f7e2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ILineInfo : IUnknown
{
    HRESULT get_x(int*);
    HRESULT get_baseLine(int*);
    HRESULT get_textDescent(int*);
    HRESULT get_textHeight(int*);
    HRESULT get_lineDirection(int*);
}
enum IID_IDisplayPointer = GUID(0x3050f69e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDisplayPointer : IUnknown
{
    HRESULT MoveToPoint(POINT, COORD_SYSTEM, IHTMLElement, uint, uint*);
    HRESULT MoveUnit(DISPLAY_MOVEUNIT, int);
    HRESULT PositionMarkupPointer(IMarkupPointer);
    HRESULT MoveToPointer(IDisplayPointer);
    HRESULT SetPointerGravity(POINTER_GRAVITY);
    HRESULT GetPointerGravity(POINTER_GRAVITY*);
    HRESULT SetDisplayGravity(DISPLAY_GRAVITY);
    HRESULT GetDisplayGravity(DISPLAY_GRAVITY*);
    HRESULT IsPositioned(BOOL*);
    HRESULT Unposition();
    HRESULT IsEqualTo(IDisplayPointer, BOOL*);
    HRESULT IsLeftOf(IDisplayPointer, BOOL*);
    HRESULT IsRightOf(IDisplayPointer, BOOL*);
    HRESULT IsAtBOL(BOOL*);
    HRESULT MoveToMarkupPointer(IMarkupPointer, IDisplayPointer);
    HRESULT ScrollIntoView();
    HRESULT GetLineInfo(ILineInfo*);
    HRESULT GetFlowElement(IHTMLElement*);
    HRESULT QueryBreaks(uint*);
}
enum IID_IDisplayServices = GUID(0x3050f69d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDisplayServices : IUnknown
{
    HRESULT CreateDisplayPointer(IDisplayPointer*);
    HRESULT TransformRect(RECT*, COORD_SYSTEM, COORD_SYSTEM, IHTMLElement);
    HRESULT TransformPoint(POINT*, COORD_SYSTEM, COORD_SYSTEM, IHTMLElement);
    HRESULT GetCaret(IHTMLCaret*);
    HRESULT GetComputedStyle(IMarkupPointer, IHTMLComputedStyle*);
    HRESULT ScrollRectIntoView(IHTMLElement, RECT);
    HRESULT HasFlowLayout(IHTMLElement, BOOL*);
}
enum IID_IHtmlDlgSafeHelper = GUID(0x3050f81a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHtmlDlgSafeHelper : IDispatch
{
    HRESULT choosecolordlg(VARIANT, VARIANT*);
    HRESULT getCharset(BSTR, VARIANT*);
    HRESULT get_Fonts(IDispatch*);
    HRESULT get_BlockFormats(IDispatch*);
}
enum IID_IBlockFormats = GUID(0x3050f830, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IBlockFormats : IDispatch
{
    HRESULT get__NewEnum(IUnknown*);
    HRESULT get_Count(int*);
    HRESULT Item(VARIANT*, BSTR*);
}
enum IID_IFontNames = GUID(0x3050f839, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IFontNames : IDispatch
{
    HRESULT get__NewEnum(IUnknown*);
    HRESULT get_Count(int*);
    HRESULT Item(VARIANT*, BSTR*);
}
enum IID_ICSSFilter = GUID(0x3050f3ec, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ICSSFilter : IUnknown
{
    HRESULT SetSite(ICSSFilterSite);
    HRESULT OnAmbientPropertyChange(int);
}
enum IID_ISecureUrlHost = GUID(0xc81984c4, 0x74c8, 0x11d2, [0xba, 0xa9, 0x0, 0xc0, 0x4f, 0xc2, 0x4, 0xe]);
interface ISecureUrlHost : IUnknown
{
    HRESULT ValidateSecureUrl(BOOL*, PWSTR, uint);
}
enum IID_IMarkupServices = GUID(0x3050f4a0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IMarkupServices : IUnknown
{
    HRESULT CreateMarkupPointer(IMarkupPointer*);
    HRESULT CreateMarkupContainer(IMarkupContainer*);
    HRESULT CreateElement(ELEMENT_TAG_ID, PWSTR, IHTMLElement*);
    HRESULT CloneElement(IHTMLElement, IHTMLElement*);
    HRESULT InsertElement(IHTMLElement, IMarkupPointer, IMarkupPointer);
    HRESULT RemoveElement(IHTMLElement);
    HRESULT Remove(IMarkupPointer, IMarkupPointer);
    HRESULT Copy(IMarkupPointer, IMarkupPointer, IMarkupPointer);
    HRESULT Move(IMarkupPointer, IMarkupPointer, IMarkupPointer);
    HRESULT InsertText(PWSTR, int, IMarkupPointer);
    HRESULT ParseString(PWSTR, uint, IMarkupContainer*, IMarkupPointer, IMarkupPointer);
    HRESULT ParseGlobal(long, uint, IMarkupContainer*, IMarkupPointer, IMarkupPointer);
    HRESULT IsScopedElement(IHTMLElement, BOOL*);
    HRESULT GetElementTagId(IHTMLElement, ELEMENT_TAG_ID*);
    HRESULT GetTagIDForName(BSTR, ELEMENT_TAG_ID*);
    HRESULT GetNameForTagID(ELEMENT_TAG_ID, BSTR*);
    HRESULT MovePointersToRange(IHTMLTxtRange, IMarkupPointer, IMarkupPointer);
    HRESULT MoveRangeToPointers(IMarkupPointer, IMarkupPointer, IHTMLTxtRange);
    HRESULT BeginUndoUnit(PWSTR);
    HRESULT EndUndoUnit();
}
enum IID_IMarkupServices2 = GUID(0x3050f682, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IMarkupServices2 : IMarkupServices
{
    HRESULT ParseGlobalEx(long, uint, IMarkupContainer, IMarkupContainer*, IMarkupPointer, IMarkupPointer);
    HRESULT ValidateElements(IMarkupPointer, IMarkupPointer, IMarkupPointer, IMarkupPointer, IHTMLElement*, IHTMLElement*);
    HRESULT SaveSegmentsToClipboard(ISegmentList, uint);
}
enum IID_IHTMLChangePlayback = GUID(0x3050f6e0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLChangePlayback : IUnknown
{
    HRESULT ExecChange(ubyte*, BOOL);
}
enum IID_IMarkupPointer2 = GUID(0x3050f675, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IMarkupPointer2 : IMarkupPointer
{
    HRESULT IsAtWordBreak(BOOL*);
    HRESULT GetMarkupPosition(int*);
    HRESULT MoveToMarkupPosition(IMarkupContainer, int);
    HRESULT MoveUnitBounded(MOVEUNIT_ACTION, IMarkupPointer);
    HRESULT IsInsideURL(IMarkupPointer, BOOL*);
    HRESULT MoveToContent(IHTMLElement, BOOL);
}
enum IID_IMarkupTextFrags = GUID(0x3050f5fa, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IMarkupTextFrags : IUnknown
{
    HRESULT GetTextFragCount(int*);
    HRESULT GetTextFrag(int, BSTR*, IMarkupPointer);
    HRESULT RemoveTextFrag(int);
    HRESULT InsertTextFrag(int, BSTR, IMarkupPointer);
    HRESULT FindTextFragFromMarkupPointer(IMarkupPointer, int*, BOOL*);
}
enum IID_IXMLGenericParse = GUID(0xe4e23071, 0x4d07, 0x11d2, [0xae, 0x76, 0x0, 0x80, 0xc7, 0x3b, 0xc1, 0x99]);
interface IXMLGenericParse : IUnknown
{
    HRESULT SetGenericParse(short);
}
enum IID_IHTMLEditHost = GUID(0x3050f6a0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLEditHost : IUnknown
{
    HRESULT SnapRect(IHTMLElement, RECT*, ELEMENT_CORNER);
}
enum IID_IHTMLEditHost2 = GUID(0x3050f848, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xd]);
interface IHTMLEditHost2 : IHTMLEditHost
{
    HRESULT PreDrag();
}
enum IID_ISequenceNumber = GUID(0x3050f6c1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISequenceNumber : IUnknown
{
    HRESULT GetSequenceNumber(int, int*);
}
enum IID_IIMEServices = GUID(0x3050f6ca, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IIMEServices : IUnknown
{
    HRESULT GetActiveIMM(IActiveIMMApp*);
}
enum IID_ISelectionServicesListener = GUID(0x3050f699, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISelectionServicesListener : IUnknown
{
    HRESULT BeginSelectionUndo();
    HRESULT EndSelectionUndo();
    HRESULT OnSelectedElementExit(IMarkupPointer, IMarkupPointer, IMarkupPointer, IMarkupPointer);
    HRESULT OnChangeType(SELECTION_TYPE, ISelectionServicesListener);
    HRESULT GetTypeDetail(BSTR*);
}
enum IID_ISelectionServices = GUID(0x3050f684, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISelectionServices : IUnknown
{
    HRESULT SetSelectionType(SELECTION_TYPE, ISelectionServicesListener);
    HRESULT GetMarkupContainer(IMarkupContainer*);
    HRESULT AddSegment(IMarkupPointer, IMarkupPointer, ISegment*);
    HRESULT AddElementSegment(IHTMLElement, IElementSegment*);
    HRESULT RemoveSegment(ISegment);
    HRESULT GetSelectionServicesListener(ISelectionServicesListener*);
}
enum IID_IHTMLEditDesigner = GUID(0x3050f662, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLEditDesigner : IUnknown
{
    HRESULT PreHandleEvent(int, IHTMLEventObj);
    HRESULT PostHandleEvent(int, IHTMLEventObj);
    HRESULT TranslateAccelerator(int, IHTMLEventObj);
    HRESULT PostEditorEventNotify(int, IHTMLEventObj);
}
enum IID_IHTMLEditServices = GUID(0x3050f663, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLEditServices : IUnknown
{
    HRESULT AddDesigner(IHTMLEditDesigner);
    HRESULT RemoveDesigner(IHTMLEditDesigner);
    HRESULT GetSelectionServices(IMarkupContainer, ISelectionServices*);
    HRESULT MoveToSelectionAnchor(IMarkupPointer);
    HRESULT MoveToSelectionEnd(IMarkupPointer);
    HRESULT SelectRange(IMarkupPointer, IMarkupPointer, SELECTION_TYPE);
}
enum IID_IHTMLEditServices2 = GUID(0x3050f812, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLEditServices2 : IHTMLEditServices
{
    HRESULT MoveToSelectionAnchorEx(IDisplayPointer);
    HRESULT MoveToSelectionEndEx(IDisplayPointer);
    HRESULT FreezeVirtualCaretPos(BOOL);
    HRESULT UnFreezeVirtualCaretPos(BOOL);
}
enum IID_IHTMLComputedStyle = GUID(0x3050f6c3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLComputedStyle : IUnknown
{
    HRESULT get_bold(short*);
    HRESULT get_italic(short*);
    HRESULT get_underline(short*);
    HRESULT get_overline(short*);
    HRESULT get_strikeOut(short*);
    HRESULT get_subScript(short*);
    HRESULT get_superScript(short*);
    HRESULT get_explicitFace(short*);
    HRESULT get_fontWeight(int*);
    HRESULT get_fontSize(int*);
    HRESULT get_fontName(byte*);
    HRESULT get_hasBgColor(short*);
    HRESULT get_textColor(uint*);
    HRESULT get_backgroundColor(uint*);
    HRESULT get_preFormatted(short*);
    HRESULT get_direction(short*);
    HRESULT get_blockDirection(short*);
    HRESULT get_OL(short*);
    HRESULT IsEqual(IHTMLComputedStyle, short*);
}
enum IID_IDeveloperConsoleMessageReceiver = GUID(0x30510808, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDeveloperConsoleMessageReceiver : IUnknown
{
    HRESULT Write(const(wchar)*, DEV_CONSOLE_MESSAGE_LEVEL, int, const(wchar)*);
    HRESULT WriteWithUrl(const(wchar)*, DEV_CONSOLE_MESSAGE_LEVEL, int, const(wchar)*, const(wchar)*);
    HRESULT WriteWithUrlAndLine(const(wchar)*, DEV_CONSOLE_MESSAGE_LEVEL, int, const(wchar)*, const(wchar)*, uint);
    HRESULT WriteWithUrlLineAndColumn(const(wchar)*, DEV_CONSOLE_MESSAGE_LEVEL, int, const(wchar)*, const(wchar)*, uint, uint);
}
enum IID_IScriptEventHandler = GUID(0x3051083a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IScriptEventHandler : IUnknown
{
    HRESULT FunctionName(BSTR*);
    HRESULT DebugDocumentContext(IUnknown*);
    HRESULT EventHandlerDispatch(IDispatch*);
    HRESULT UsesCapture(BOOL*);
    HRESULT Cookie(ulong*);
}
enum IID_IDebugCallbackNotificationHandler = GUID(0x30510842, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDebugCallbackNotificationHandler : IUnknown
{
    HRESULT RequestedCallbackTypes(uint*);
    HRESULT BeforeDispatchEvent(IUnknown);
    HRESULT DispatchEventComplete(IUnknown, uint);
    HRESULT BeforeInvokeDomCallback(IUnknown, IScriptEventHandler, DOM_EVENT_PHASE, uint);
    HRESULT InvokeDomCallbackComplete(IUnknown, IScriptEventHandler, DOM_EVENT_PHASE, uint);
    HRESULT BeforeInvokeCallback(SCRIPT_TIMER_TYPE, uint, IDispatch, ulong, BSTR, uint, uint, uint, IUnknown);
    HRESULT InvokeCallbackComplete(SCRIPT_TIMER_TYPE, uint, IDispatch, ulong, BSTR, uint, uint, uint, IUnknown);
}
enum IID_IScriptEventHandlerSourceInfo = GUID(0x30510841, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IScriptEventHandlerSourceInfo : IUnknown
{
    HRESULT GetSourceInfo(BSTR*, uint*, uint*, uint*);
}
enum IID_IDOMEventRegistrationCallback = GUID(0x3051083b, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDOMEventRegistrationCallback : IUnknown
{
    HRESULT OnDOMEventListenerAdded(const(wchar)*, IScriptEventHandler);
    HRESULT OnDOMEventListenerRemoved(ulong);
}
enum IID_IEventTarget2 = GUID(0x30510839, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IEventTarget2 : IUnknown
{
    HRESULT GetRegisteredEventTypes(SAFEARRAY**);
    HRESULT GetListenersForType(const(wchar)*, SAFEARRAY**);
    HRESULT RegisterForDOMEventListeners(IDOMEventRegistrationCallback);
    HRESULT UnregisterForDOMEventListeners(IDOMEventRegistrationCallback);
}
enum IID_HTMLNamespaceEvents = GUID(0x3050f6bd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface HTMLNamespaceEvents : IDispatch
{
}
enum IID_IHTMLNamespace = GUID(0x3050f6bb, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLNamespace : IDispatch
{
    HRESULT get_name(BSTR*);
    HRESULT get_urn(BSTR*);
    HRESULT get_tagNames(IDispatch*);
    HRESULT get_readyState(VARIANT*);
    HRESULT put_onreadystatechange(VARIANT);
    HRESULT get_onreadystatechange(VARIANT*);
    HRESULT doImport(BSTR);
    HRESULT attachEvent(BSTR, IDispatch, short*);
    HRESULT detachEvent(BSTR, IDispatch);
}
enum IID_IHTMLNamespaceCollection = GUID(0x3050f6b8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLNamespaceCollection : IDispatch
{
    HRESULT get_length(int*);
    HRESULT item(VARIANT, IDispatch*);
    HRESULT add(BSTR, BSTR, VARIANT, IDispatch*);
}
enum IID_DispHTMLNamespace = GUID(0x3050f54f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLNamespace : IDispatch
{
}
enum IID_DispHTMLNamespaceCollection = GUID(0x3050f550, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLNamespaceCollection : IDispatch
{
}
enum IID_IHTMLPainter = GUID(0x3050f6a6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLPainter : IUnknown
{
    HRESULT Draw(RECT, RECT, int, HDC, void*);
    HRESULT OnResize(SIZE);
    HRESULT GetPainterInfo(HTML_PAINTER_INFO*);
    HRESULT HitTestPoint(POINT, BOOL*, int*);
}
enum IID_IHTMLPaintSite = GUID(0x3050f6a7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLPaintSite : IUnknown
{
    HRESULT InvalidatePainterInfo();
    HRESULT InvalidateRect(RECT*);
    HRESULT InvalidateRegion(HRGN);
    HRESULT GetDrawInfo(int, HTML_PAINT_DRAW_INFO*);
    HRESULT TransformGlobalToLocal(POINT, POINT*);
    HRESULT TransformLocalToGlobal(POINT, POINT*);
    HRESULT GetHitTestCookie(int*);
}
enum IID_IHTMLPainterEventInfo = GUID(0x3050f6df, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLPainterEventInfo : IUnknown
{
    HRESULT GetEventInfoFlags(int*);
    HRESULT GetEventTarget(IHTMLElement*);
    HRESULT SetCursor(int);
    HRESULT StringFromPartID(int, BSTR*);
}
enum IID_IHTMLPainterOverlay = GUID(0x3050f7e3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLPainterOverlay : IUnknown
{
    HRESULT OnMove(RECT);
}
enum IID_IHTMLIPrintCollection = GUID(0x3050f6b5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLIPrintCollection : IDispatch
{
    HRESULT get_length(int*);
    HRESULT get__newEnum(IUnknown*);
    HRESULT item(int, IUnknown*);
}
enum IID_IEnumPrivacyRecords = GUID(0x3050f844, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IEnumPrivacyRecords : IUnknown
{
    HRESULT Reset();
    HRESULT GetSize(uint*);
    HRESULT GetPrivacyImpacted(BOOL*);
    HRESULT Next(BSTR*, BSTR*, int*, uint*);
}
enum IID_IWPCBlockedUrls = GUID(0x30510413, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IWPCBlockedUrls : IUnknown
{
    HRESULT GetCount(uint*);
    HRESULT GetUrl(uint, BSTR*);
}
enum IID_IHTMLDOMConstructorCollection = GUID(0x3051049c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDOMConstructorCollection : IDispatch
{
    HRESULT get_Attr(IDispatch*);
    HRESULT get_BehaviorUrnsCollection(IDispatch*);
    HRESULT get_BookmarkCollection(IDispatch*);
    HRESULT get_CompatibleInfo(IDispatch*);
    HRESULT get_CompatibleInfoCollection(IDispatch*);
    HRESULT get_ControlRangeCollection(IDispatch*);
    HRESULT get_CSSCurrentStyleDeclaration(IDispatch*);
    HRESULT get_CSSRuleList(IDispatch*);
    HRESULT get_CSSRuleStyleDeclaration(IDispatch*);
    HRESULT get_CSSStyleDeclaration(IDispatch*);
    HRESULT get_CSSStyleRule(IDispatch*);
    HRESULT get_CSSStyleSheet(IDispatch*);
    HRESULT get_DataTransfer(IDispatch*);
    HRESULT get_DOMImplementation(IDispatch*);
    HRESULT get_Element(IDispatch*);
    HRESULT get_Event(IDispatch*);
    HRESULT get_History(IDispatch*);
    HRESULT get_HTCElementBehaviorDefaults(IDispatch*);
    HRESULT get_HTMLAnchorElement(IDispatch*);
    HRESULT get_HTMLAreaElement(IDispatch*);
    HRESULT get_HTMLAreasCollection(IDispatch*);
    HRESULT get_HTMLBaseElement(IDispatch*);
    HRESULT get_HTMLBaseFontElement(IDispatch*);
    HRESULT get_HTMLBGSoundElement(IDispatch*);
    HRESULT get_HTMLBlockElement(IDispatch*);
    HRESULT get_HTMLBodyElement(IDispatch*);
    HRESULT get_HTMLBRElement(IDispatch*);
    HRESULT get_HTMLButtonElement(IDispatch*);
    HRESULT get_HTMLCollection(IDispatch*);
    HRESULT get_HTMLCommentElement(IDispatch*);
    HRESULT get_HTMLDDElement(IDispatch*);
    HRESULT get_HTMLDivElement(IDispatch*);
    HRESULT get_HTMLDocument(IDispatch*);
    HRESULT get_HTMLDListElement(IDispatch*);
    HRESULT get_HTMLDTElement(IDispatch*);
    HRESULT get_HTMLEmbedElement(IDispatch*);
    HRESULT get_HTMLFieldSetElement(IDispatch*);
    HRESULT get_HTMLFontElement(IDispatch*);
    HRESULT get_HTMLFormElement(IDispatch*);
    HRESULT get_HTMLFrameElement(IDispatch*);
    HRESULT get_HTMLFrameSetElement(IDispatch*);
    HRESULT get_HTMLGenericElement(IDispatch*);
    HRESULT get_HTMLHeadElement(IDispatch*);
    HRESULT get_HTMLHeadingElement(IDispatch*);
    HRESULT get_HTMLHRElement(IDispatch*);
    HRESULT get_HTMLHtmlElement(IDispatch*);
    HRESULT get_HTMLIFrameElement(IDispatch*);
    HRESULT get_HTMLImageElement(IDispatch*);
    HRESULT get_HTMLInputElement(IDispatch*);
    HRESULT get_HTMLIsIndexElement(IDispatch*);
    HRESULT get_HTMLLabelElement(IDispatch*);
    HRESULT get_HTMLLegendElement(IDispatch*);
    HRESULT get_HTMLLIElement(IDispatch*);
    HRESULT get_HTMLLinkElement(IDispatch*);
    HRESULT get_HTMLMapElement(IDispatch*);
    HRESULT get_HTMLMarqueeElement(IDispatch*);
    HRESULT get_HTMLMetaElement(IDispatch*);
    HRESULT get_HTMLModelessDialog(IDispatch*);
    HRESULT get_HTMLNamespaceInfo(IDispatch*);
    HRESULT get_HTMLNamespaceInfoCollection(IDispatch*);
    HRESULT get_HTMLNextIdElement(IDispatch*);
    HRESULT get_HTMLNoShowElement(IDispatch*);
    HRESULT get_HTMLObjectElement(IDispatch*);
    HRESULT get_HTMLOListElement(IDispatch*);
    HRESULT get_HTMLOptionElement(IDispatch*);
    HRESULT get_HTMLParagraphElement(IDispatch*);
    HRESULT get_HTMLParamElement(IDispatch*);
    HRESULT get_HTMLPhraseElement(IDispatch*);
    HRESULT get_HTMLPluginsCollection(IDispatch*);
    HRESULT get_HTMLPopup(IDispatch*);
    HRESULT get_HTMLScriptElement(IDispatch*);
    HRESULT get_HTMLSelectElement(IDispatch*);
    HRESULT get_HTMLSpanElement(IDispatch*);
    HRESULT get_HTMLStyleElement(IDispatch*);
    HRESULT get_HTMLTableCaptionElement(IDispatch*);
    HRESULT get_HTMLTableCellElement(IDispatch*);
    HRESULT get_HTMLTableColElement(IDispatch*);
    HRESULT get_HTMLTableElement(IDispatch*);
    HRESULT get_HTMLTableRowElement(IDispatch*);
    HRESULT get_HTMLTableSectionElement(IDispatch*);
    HRESULT get_HTMLTextAreaElement(IDispatch*);
    HRESULT get_HTMLTextElement(IDispatch*);
    HRESULT get_HTMLTitleElement(IDispatch*);
    HRESULT get_HTMLUListElement(IDispatch*);
    HRESULT get_HTMLUnknownElement(IDispatch*);
    HRESULT get_Image(IDispatch*);
    HRESULT get_Location(IDispatch*);
    HRESULT get_NamedNodeMap(IDispatch*);
    HRESULT get_Navigator(IDispatch*);
    HRESULT get_NodeList(IDispatch*);
    HRESULT get_Option(IDispatch*);
    HRESULT get_Screen(IDispatch*);
    HRESULT get_Selection(IDispatch*);
    HRESULT get_StaticNodeList(IDispatch*);
    HRESULT get_Storage(IDispatch*);
    HRESULT get_StyleSheetList(IDispatch*);
    HRESULT get_StyleSheetPage(IDispatch*);
    HRESULT get_StyleSheetPageList(IDispatch*);
    HRESULT get_Text(IDispatch*);
    HRESULT get_TextRange(IDispatch*);
    HRESULT get_TextRangeCollection(IDispatch*);
    HRESULT get_TextRectangle(IDispatch*);
    HRESULT get_TextRectangleList(IDispatch*);
    HRESULT get_Window(IDispatch*);
    HRESULT get_XDomainRequest(IDispatch*);
    HRESULT get_XMLHttpRequest(IDispatch*);
}
enum IID_IHTMLDialog = GUID(0x3050f216, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDialog : IDispatch
{
    HRESULT put_dialogTop(VARIANT);
    HRESULT get_dialogTop(VARIANT*);
    HRESULT put_dialogLeft(VARIANT);
    HRESULT get_dialogLeft(VARIANT*);
    HRESULT put_dialogWidth(VARIANT);
    HRESULT get_dialogWidth(VARIANT*);
    HRESULT put_dialogHeight(VARIANT);
    HRESULT get_dialogHeight(VARIANT*);
    HRESULT get_dialogArguments(VARIANT*);
    HRESULT get_menuArguments(VARIANT*);
    HRESULT put_returnValue(VARIANT);
    HRESULT get_returnValue(VARIANT*);
    HRESULT close();
    HRESULT toString(BSTR*);
}
enum IID_IHTMLDialog2 = GUID(0x3050f5e0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDialog2 : IDispatch
{
    HRESULT put_status(BSTR);
    HRESULT get_status(BSTR*);
    HRESULT put_resizable(BSTR);
    HRESULT get_resizable(BSTR*);
}
enum IID_IHTMLDialog3 = GUID(0x3050f388, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLDialog3 : IDispatch
{
    HRESULT put_unadorned(BSTR);
    HRESULT get_unadorned(BSTR*);
    HRESULT put_dialogHide(BSTR);
    HRESULT get_dialogHide(BSTR*);
}
enum IID_IHTMLModelessInit = GUID(0x3050f5e4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLModelessInit : IDispatch
{
    HRESULT get_parameters(VARIANT*);
    HRESULT get_optionString(VARIANT*);
    HRESULT get_moniker(IUnknown*);
    HRESULT get_document(IUnknown*);
}
enum IID_IHTMLPopup = GUID(0x3050f666, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLPopup : IDispatch
{
    HRESULT show(int, int, int, int, VARIANT*);
    HRESULT hide();
    HRESULT get_document(IHTMLDocument*);
    HRESULT get_isOpen(short*);
}
enum IID_DispHTMLPopup = GUID(0x3050f589, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLPopup : IDispatch
{
}
enum IID_IHTMLAppBehavior = GUID(0x3050f5ca, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLAppBehavior : IDispatch
{
    HRESULT put_applicationName(BSTR);
    HRESULT get_applicationName(BSTR*);
    HRESULT put_version(BSTR);
    HRESULT get_version(BSTR*);
    HRESULT put_icon(BSTR);
    HRESULT get_icon(BSTR*);
    HRESULT put_singleInstance(BSTR);
    HRESULT get_singleInstance(BSTR*);
    HRESULT put_minimizeButton(BSTR);
    HRESULT get_minimizeButton(BSTR*);
    HRESULT put_maximizeButton(BSTR);
    HRESULT get_maximizeButton(BSTR*);
    HRESULT put_border(BSTR);
    HRESULT get_border(BSTR*);
    HRESULT put_borderStyle(BSTR);
    HRESULT get_borderStyle(BSTR*);
    HRESULT put_sysMenu(BSTR);
    HRESULT get_sysMenu(BSTR*);
    HRESULT put_caption(BSTR);
    HRESULT get_caption(BSTR*);
    HRESULT put_windowState(BSTR);
    HRESULT get_windowState(BSTR*);
    HRESULT put_showInTaskBar(BSTR);
    HRESULT get_showInTaskBar(BSTR*);
    HRESULT get_commandLine(BSTR*);
}
enum IID_IHTMLAppBehavior2 = GUID(0x3050f5c9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLAppBehavior2 : IDispatch
{
    HRESULT put_contextMenu(BSTR);
    HRESULT get_contextMenu(BSTR*);
    HRESULT put_innerBorder(BSTR);
    HRESULT get_innerBorder(BSTR*);
    HRESULT put_scroll(BSTR);
    HRESULT get_scroll(BSTR*);
    HRESULT put_scrollFlat(BSTR);
    HRESULT get_scrollFlat(BSTR*);
    HRESULT put_selection(BSTR);
    HRESULT get_selection(BSTR*);
}
enum IID_IHTMLAppBehavior3 = GUID(0x3050f5cd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLAppBehavior3 : IDispatch
{
    HRESULT put_navigable(BSTR);
    HRESULT get_navigable(BSTR*);
}
enum IID_DispHTMLAppBehavior = GUID(0x3050f57c, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispHTMLAppBehavior : IDispatch
{
}
enum IID_DispIHTMLInputButtonElement = GUID(0x3050f51e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispIHTMLInputButtonElement : IDispatch
{
}
enum IID_DispIHTMLInputTextElement = GUID(0x3050f520, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispIHTMLInputTextElement : IDispatch
{
}
enum IID_DispIHTMLInputFileElement = GUID(0x3050f542, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispIHTMLInputFileElement : IDispatch
{
}
enum IID_DispIHTMLOptionButtonElement = GUID(0x3050f509, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispIHTMLOptionButtonElement : IDispatch
{
}
enum IID_DispIHTMLInputImage = GUID(0x3050f51d, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface DispIHTMLInputImage : IDispatch
{
}
enum IID_IElementNamespace = GUID(0x3050f671, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementNamespace : IUnknown
{
    HRESULT AddTag(BSTR, int);
}
enum IID_IElementNamespaceTable = GUID(0x3050f670, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementNamespaceTable : IUnknown
{
    HRESULT AddNamespace(BSTR, BSTR, int, VARIANT*);
}
enum IID_IElementNamespaceFactory = GUID(0x3050f672, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementNamespaceFactory : IUnknown
{
    HRESULT Create(IElementNamespace);
}
enum IID_IElementNamespaceFactory2 = GUID(0x3050f805, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementNamespaceFactory2 : IElementNamespaceFactory
{
    HRESULT CreateWithImplementation(IElementNamespace, BSTR);
}
enum IID_IElementNamespaceFactoryCallback = GUID(0x3050f7fd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementNamespaceFactoryCallback : IUnknown
{
    HRESULT Resolve(BSTR, BSTR, BSTR, IElementNamespace);
}
enum IID_IElementBehaviorSiteOM2 = GUID(0x3050f659, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementBehaviorSiteOM2 : IElementBehaviorSiteOM
{
    HRESULT GetDefaults(IHTMLElementDefaults*);
}
enum IID_IElementBehaviorCategory = GUID(0x3050f4ed, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementBehaviorCategory : IUnknown
{
    HRESULT GetCategory(PWSTR*);
}
enum IID_IElementBehaviorSiteCategory = GUID(0x3050f4ee, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementBehaviorSiteCategory : IUnknown
{
    HRESULT GetRelatedBehaviors(int, PWSTR, IEnumUnknown*);
}
enum IID_IElementBehaviorSubmit = GUID(0x3050f646, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementBehaviorSubmit : IUnknown
{
    HRESULT GetSubmitInfo(IHTMLSubmitData);
    HRESULT Reset();
}
enum IID_IElementBehaviorFocus = GUID(0x3050f6b6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementBehaviorFocus : IUnknown
{
    HRESULT GetFocusRect(RECT*);
}
enum IID_IElementBehaviorLayout = GUID(0x3050f6ba, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementBehaviorLayout : IUnknown
{
    HRESULT GetSize(int, SIZE, POINT*, POINT*, SIZE*);
    HRESULT GetLayoutInfo(int*);
    HRESULT GetPosition(int, POINT*);
    HRESULT MapSize(SIZE*, RECT*);
}
enum IID_IElementBehaviorLayout2 = GUID(0x3050f846, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementBehaviorLayout2 : IUnknown
{
    HRESULT GetTextDescent(int*);
}
enum IID_IElementBehaviorSiteLayout = GUID(0x3050f6b7, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementBehaviorSiteLayout : IUnknown
{
    HRESULT InvalidateLayoutInfo();
    HRESULT InvalidateSize();
    HRESULT GetMediaResolution(SIZE*);
}
enum IID_IElementBehaviorSiteLayout2 = GUID(0x3050f847, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IElementBehaviorSiteLayout2 : IUnknown
{
    HRESULT GetFontInfo(LOGFONTW*);
}
enum IID_IHostBehaviorInit = GUID(0x3050f842, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHostBehaviorInit : IUnknown
{
    HRESULT PopulateNamespaceTable();
}
enum IID_ISurfacePresenter = GUID(0x305106e2, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISurfacePresenter : IUnknown
{
    HRESULT Present(uint, RECT*);
    HRESULT GetBuffer(uint, const(GUID)*, void**);
    HRESULT IsCurrent(BOOL*);
}
enum IID_IViewObjectPresentSite = GUID(0x305106e1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IViewObjectPresentSite : IUnknown
{
    HRESULT CreateSurfacePresenter(IUnknown, uint, uint, uint, DXGI_FORMAT, VIEW_OBJECT_ALPHA_MODE, ISurfacePresenter*);
    HRESULT IsHardwareComposition(BOOL*);
    HRESULT SetCompositionMode(VIEW_OBJECT_COMPOSITION_MODE);
}
enum IID_ICanvasPixelArrayData = GUID(0x305107f9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ICanvasPixelArrayData : IUnknown
{
    HRESULT GetBufferPointer(ubyte**, uint*);
}
enum IID_IViewObjectPrint = GUID(0x305106e3, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IViewObjectPrint : IUnknown
{
    HRESULT GetPrintBitmap(IUnknown*);
}
enum IID_IViewObjectPresentNotifySite = GUID(0x305107fa, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IViewObjectPresentNotifySite : IViewObjectPresentSite
{
    HRESULT RequestFrame();
}
enum IID_IViewObjectPresentNotify = GUID(0x305107f8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IViewObjectPresentNotify : IUnknown
{
    HRESULT OnPreRender();
}
enum IID_ITrackingProtection = GUID(0x30510803, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ITrackingProtection : IUnknown
{
    HRESULT EvaluateUrl(BSTR, BOOL*);
    HRESULT GetEnabled(BOOL*);
}
enum IID_IBFCacheable = GUID(0x30510861, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IBFCacheable : IUnknown
{
    HRESULT EnterBFCache();
    HRESULT ExitBFCache();
}
enum IID_IDocObjectService = GUID(0x3050f801, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDocObjectService : IUnknown
{
    HRESULT FireBeforeNavigate2(IDispatch, const(wchar)*, uint, const(wchar)*, ubyte*, uint, const(wchar)*, BOOL, BOOL*);
    HRESULT FireNavigateComplete2(IHTMLWindow2, uint);
    HRESULT FireDownloadBegin();
    HRESULT FireDownloadComplete();
    HRESULT FireDocumentComplete(IHTMLWindow2, uint);
    HRESULT UpdateDesktopComponent(IHTMLWindow2);
    HRESULT GetPendingUrl(BSTR*);
    HRESULT ActiveElementChanged(IHTMLElement);
    HRESULT GetUrlSearchComponent(BSTR*);
    HRESULT IsErrorUrl(const(wchar)*, BOOL*);
}
enum IID_IDownloadManager = GUID(0x988934a4, 0x64b, 0x11d3, [0xbb, 0x80, 0x0, 0x10, 0x4b, 0x35, 0xe7, 0xf9]);
interface IDownloadManager : IUnknown
{
    HRESULT Download(IMoniker, IBindCtx, uint, int, BINDINFO*, const(wchar)*, const(wchar)*, uint);
}
alias ExtensionValidationContexts = int;
enum : int
{
    ExtensionValidationContextNone    = 0x00000000,
    ExtensionValidationContextDynamic = 0x00000001,
    ExtensionValidationContextParsed  = 0x00000002,
}

alias ExtensionValidationResults = int;
enum : int
{
    ExtensionValidationResultNone             = 0x00000000,
    ExtensionValidationResultDoNotInstantiate = 0x00000001,
    ExtensionValidationResultArrestPageLoad   = 0x00000002,
}

enum IID_IExtensionValidation = GUID(0x7d33f73d, 0x8525, 0x4e0f, [0x87, 0xdb, 0x83, 0x2, 0x88, 0xba, 0xff, 0x44]);
interface IExtensionValidation : IUnknown
{
    HRESULT Validate(const(GUID)*, PWSTR, uint, uint, IHTMLDocument2, IHTMLDocument2, IHTMLElement, ExtensionValidationContexts, ExtensionValidationResults*);
    HRESULT DisplayName(PWSTR*);
}
enum CLSID_HomePageSetting = GUID(0x374cede0, 0x873a, 0x4c4f, [0xbc, 0x86, 0xbc, 0xc8, 0xcf, 0x51, 0x16, 0xa3]);
struct HomePageSetting
{
}
enum IID_IHomePageSetting = GUID(0xfdfc244f, 0x18fa, 0x4ff2, [0xb0, 0x8e, 0x1d, 0x61, 0x8f, 0x3f, 0xfb, 0xe4]);
interface IHomePageSetting : IUnknown
{
    HRESULT SetHomePage(HWND, const(wchar)*, const(wchar)*);
    HRESULT IsHomePage(const(wchar)*, BOOL*);
    HRESULT SetHomePageToBrowserDefault();
}
enum IID_ITargetNotify = GUID(0x863a99a0, 0x21bc, 0x11d0, [0x82, 0xb4, 0x0, 0xa0, 0xc9, 0xc, 0x29, 0xc5]);
interface ITargetNotify : IUnknown
{
    HRESULT OnCreate(IUnknown, uint);
    HRESULT OnReuse(IUnknown);
}
enum IID_ITargetNotify2 = GUID(0x3050f6b1, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ITargetNotify2 : ITargetNotify
{
    HRESULT GetOptionString(BSTR*);
}
alias FINDFRAME_FLAGS = int;
enum : int
{
    FINDFRAME_NONE              = 0x00000000,
    FINDFRAME_JUSTTESTEXISTENCE = 0x00000001,
    FINDFRAME_INTERNAL          = 0x80000000,
}

alias FRAMEOPTIONS_FLAGS = int;
enum : int
{
    FRAMEOPTIONS_SCROLL_YES  = 0x00000001,
    FRAMEOPTIONS_SCROLL_NO   = 0x00000002,
    FRAMEOPTIONS_SCROLL_AUTO = 0x00000004,
    FRAMEOPTIONS_NORESIZE    = 0x00000008,
    FRAMEOPTIONS_NO3DBORDER  = 0x00000010,
    FRAMEOPTIONS_DESKTOP     = 0x00000020,
    FRAMEOPTIONS_BROWSERBAND = 0x00000040,
}

enum IID_ITargetFrame2 = GUID(0x86d52e11, 0x94a8, 0x11d0, [0x82, 0xaf, 0x0, 0xc0, 0x4f, 0xd5, 0xae, 0x38]);
interface ITargetFrame2 : IUnknown
{
    HRESULT SetFrameName(const(wchar)*);
    HRESULT GetFrameName(PWSTR*);
    HRESULT GetParentFrame(IUnknown*);
    HRESULT SetFrameSrc(const(wchar)*);
    HRESULT GetFrameSrc(PWSTR*);
    HRESULT GetFramesContainer(IOleContainer*);
    HRESULT SetFrameOptions(uint);
    HRESULT GetFrameOptions(uint*);
    HRESULT SetFrameMargins(uint, uint);
    HRESULT GetFrameMargins(uint*, uint*);
    HRESULT FindFrame(const(wchar)*, uint, IUnknown*);
    HRESULT GetTargetAlias(const(wchar)*, PWSTR*);
}
enum IID_ITargetContainer = GUID(0x7847ec01, 0x2bec, 0x11d0, [0x82, 0xb4, 0x0, 0xa0, 0xc9, 0xc, 0x29, 0xc5]);
interface ITargetContainer : IUnknown
{
    HRESULT GetFrameUrl(PWSTR*);
    HRESULT GetFramesContainer(IOleContainer*);
}
alias NAVIGATEFRAME_FLAGS = int;
enum : int
{
    NAVIGATEFRAME_FL_RECORD                   = 0x00000001,
    NAVIGATEFRAME_FL_POST                     = 0x00000002,
    NAVIGATEFRAME_FL_NO_DOC_CACHE             = 0x00000004,
    NAVIGATEFRAME_FL_NO_IMAGE_CACHE           = 0x00000008,
    NAVIGATEFRAME_FL_AUTH_FAIL_CACHE_OK       = 0x00000010,
    NAVIGATEFRAME_FL_SENDING_FROM_FORM        = 0x00000020,
    NAVIGATEFRAME_FL_REALLY_SENDING_FROM_FORM = 0x00000040,
}

struct NAVIGATEDATA
{
    uint ulTarget;
    uint ulURL;
    uint ulRefURL;
    uint ulPostData;
    uint dwFlags;
}
enum IID_ITargetFrame = GUID(0xd5f78c80, 0x5252, 0x11cf, [0x90, 0xfa, 0x0, 0xaa, 0x0, 0x42, 0x10, 0x6e]);
interface ITargetFrame : IUnknown
{
    HRESULT SetFrameName(const(wchar)*);
    HRESULT GetFrameName(PWSTR*);
    HRESULT GetParentFrame(IUnknown*);
    HRESULT FindFrame(const(wchar)*, IUnknown, uint, IUnknown*);
    HRESULT SetFrameSrc(const(wchar)*);
    HRESULT GetFrameSrc(PWSTR*);
    HRESULT GetFramesContainer(IOleContainer*);
    HRESULT SetFrameOptions(uint);
    HRESULT GetFrameOptions(uint*);
    HRESULT SetFrameMargins(uint, uint);
    HRESULT GetFrameMargins(uint*, uint*);
    HRESULT RemoteNavigate(uint, uint*);
    HRESULT OnChildFrameActivate(IUnknown);
    HRESULT OnChildFrameDeactivate(IUnknown);
}
enum IID_ITargetEmbedding = GUID(0x548793c0, 0x9e74, 0x11cf, [0x96, 0x55, 0x0, 0xa0, 0xc9, 0x3, 0x49, 0x23]);
interface ITargetEmbedding : IUnknown
{
    HRESULT GetTargetFrame(ITargetFrame*);
}
enum IID_ITargetFramePriv = GUID(0x9216e421, 0x2bf5, 0x11d0, [0x82, 0xb4, 0x0, 0xa0, 0xc9, 0xc, 0x29, 0xc5]);
interface ITargetFramePriv : IUnknown
{
    HRESULT FindFrameDownwards(const(wchar)*, uint, IUnknown*);
    HRESULT FindFrameInContext(const(wchar)*, IUnknown, uint, IUnknown*);
    HRESULT OnChildFrameActivate(IUnknown);
    HRESULT OnChildFrameDeactivate(IUnknown);
    HRESULT NavigateHack(uint, IBindCtx, IBindStatusCallback, const(wchar)*, const(wchar)*, const(wchar)*);
    HRESULT FindBrowserByIndex(uint, IUnknown*);
}
enum IID_ITargetFramePriv2 = GUID(0xb2c867e6, 0x69d6, 0x46f2, [0xa6, 0x11, 0xde, 0xd9, 0xa4, 0xbd, 0x7f, 0xef]);
interface ITargetFramePriv2 : ITargetFramePriv
{
    HRESULT AggregatedNavigation2(uint, IBindCtx, IBindStatusCallback, const(wchar)*, IUri, const(wchar)*);
}
enum IID_ISurfacePresenterFlipBuffer = GUID(0xe43f4a08, 0x8bbc, 0x4665, [0xac, 0x92, 0xc5, 0x5c, 0xe6, 0x1f, 0xd7, 0xe7]);
interface ISurfacePresenterFlipBuffer : IUnknown
{
    HRESULT BeginDraw(const(GUID)*, void**);
    HRESULT EndDraw();
}
enum IID_ISurfacePresenterFlip = GUID(0x30510848, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISurfacePresenterFlip : IUnknown
{
    HRESULT Present();
    HRESULT GetBuffer(uint, const(GUID)*, void**);
}
enum IID_ISurfacePresenterFlip2 = GUID(0x30510865, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ISurfacePresenterFlip2 : IUnknown
{
    HRESULT SetRotation(DXGI_MODE_ROTATION);
}
enum IID_IViewObjectPresentFlipSite = GUID(0x30510846, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IViewObjectPresentFlipSite : IUnknown
{
    HRESULT CreateSurfacePresenterFlip(IUnknown, uint, uint, uint, DXGI_FORMAT, VIEW_OBJECT_ALPHA_MODE, ISurfacePresenterFlip*);
    HRESULT GetDeviceLuid(LUID*);
    HRESULT EnterFullScreen();
    HRESULT ExitFullScreen();
    HRESULT IsFullScreen(BOOL*);
    HRESULT GetBoundingRect(RECT*);
    HRESULT GetMetrics(POINT*, SIZE*, float*, float*);
    HRESULT GetFullScreenSize(SIZE*);
}
enum IID_IViewObjectPresentFlipSite2 = GUID(0xaad0cbf1, 0xe7fd, 0x4f12, [0x89, 0x2, 0xc7, 0x81, 0x32, 0xa8, 0xe0, 0x1d]);
interface IViewObjectPresentFlipSite2 : IUnknown
{
    HRESULT GetRotationForCurrentOutput(DXGI_MODE_ROTATION*);
}
enum IID_IViewObjectPresentFlip = GUID(0x30510847, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IViewObjectPresentFlip : IUnknown
{
    HRESULT NotifyRender(BOOL);
    HRESULT RenderObjectToBitmap(IUnknown);
    HRESULT RenderObjectToSharedBuffer(ISurfacePresenterFlipBuffer);
}
enum IID_IViewObjectPresentFlip2 = GUID(0x30510856, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IViewObjectPresentFlip2 : IUnknown
{
    HRESULT NotifyLeavingView();
}
enum IID_IActiveXUIHandlerSite2 = GUID(0x7e3707b2, 0xd087, 0x4542, [0xac, 0x1f, 0xa0, 0xd2, 0xfc, 0xd0, 0x80, 0xfd]);
interface IActiveXUIHandlerSite2 : IUnknown
{
    HRESULT AddSuspensionExemption(ulong*);
    HRESULT RemoveSuspensionExemption(ulong);
}
enum IID_ICaretPositionProvider = GUID(0x58da43a2, 0x108e, 0x4d5b, [0x9f, 0x75, 0xe5, 0xf7, 0x4f, 0x93, 0xff, 0xf5]);
interface ICaretPositionProvider : IUnknown
{
    HRESULT GetCaretPosition(POINT*, float*);
}
enum IID_ITridentTouchInput = GUID(0x30510850, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ITridentTouchInput : IUnknown
{
    HRESULT OnPointerMessage(uint, WPARAM, LPARAM, BOOL*);
}
enum IID_ITridentTouchInputSite = GUID(0x30510849, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ITridentTouchInputSite : IUnknown
{
    HRESULT SetManipulationMode(styleMsTouchAction);
    HRESULT ZoomToPoint(int, int);
}
alias MEDIA_ACTIVITY_NOTIFY_TYPE = int;
enum : int
{
    MediaPlayback  = 0x00000000,
    MediaRecording = 0x00000001,
    MediaCasting   = 0x00000002,
}

enum IID_IMediaActivityNotifySite = GUID(0x8165cfef, 0x179d, 0x46c2, [0xbc, 0x71, 0x3f, 0xa7, 0x26, 0xdc, 0x1f, 0x8d]);
interface IMediaActivityNotifySite : IUnknown
{
    HRESULT OnMediaActivityStarted(MEDIA_ACTIVITY_NOTIFY_TYPE);
    HRESULT OnMediaActivityStopped(MEDIA_ACTIVITY_NOTIFY_TYPE);
}
enum IID_IAudioSessionSite = GUID(0xd7d8b684, 0xd02d, 0x4517, [0xb6, 0xb7, 0x19, 0xe3, 0xdf, 0xe2, 0x9c, 0x45]);
interface IAudioSessionSite : IUnknown
{
    HRESULT GetAudioSessionGuid(GUID*);
    HRESULT OnAudioStreamCreated(const(wchar)*);
    HRESULT OnAudioStreamDestroyed(const(wchar)*);
}
enum IID_IPrintTaskRequestHandler = GUID(0x191cd340, 0xcf36, 0x44ff, [0xbd, 0x53, 0xd1, 0xb7, 0x1, 0x79, 0x9d, 0x9b]);
interface IPrintTaskRequestHandler : IUnknown
{
    HRESULT HandlePrintTaskRequest(IInspectable);
}
enum IID_IPrintTaskRequestFactory = GUID(0xbb516745, 0x8c34, 0x4f8b, [0x96, 0x5, 0x68, 0x4d, 0xcb, 0x14, 0x4b, 0xe5]);
interface IPrintTaskRequestFactory : IUnknown
{
    HRESULT CreatePrintTaskRequest(IPrintTaskRequestHandler);
}
enum IID_IScrollableContextMenu = GUID(0x30510854, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IScrollableContextMenu : IUnknown
{
    HRESULT AddItem(const(wchar)*, uint);
    HRESULT ShowModal(int, int, uint*);
}
alias SCROLLABLECONTEXTMENU_PLACEMENT = int;
enum : int
{
    SCMP_TOP    = 0x00000000,
    SCMP_BOTTOM = 0x00000001,
    SCMP_LEFT   = 0x00000002,
    SCMP_RIGHT  = 0x00000003,
    SCMP_FULL   = 0x00000004,
}

enum IID_IScrollableContextMenu2 = GUID(0xf77e9056, 0x8674, 0x4936, [0x92, 0x4c, 0xe, 0x4a, 0x6, 0xfa, 0x63, 0x4a]);
interface IScrollableContextMenu2 : IScrollableContextMenu
{
    HRESULT AddSeparator();
    HRESULT SetPlacement(SCROLLABLECONTEXTMENU_PLACEMENT);
}
enum IID_IActiveXUIHandlerSite = GUID(0x30510853, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IActiveXUIHandlerSite : IUnknown
{
    HRESULT CreateScrollableContextMenu(IScrollableContextMenu*);
    HRESULT PickFileAndGetResult(IUnknown, BOOL, IUnknown*);
}
enum IID_IActiveXUIHandlerSite3 = GUID(0x7904009a, 0x1238, 0x47f4, [0x90, 0x1c, 0x87, 0x13, 0x75, 0xc3, 0x46, 0x8]);
interface IActiveXUIHandlerSite3 : IUnknown
{
    HRESULT MessageBoxW(HWND, const(wchar)*, const(wchar)*, uint, int*);
}
enum CLSID_InternetExplorerManager = GUID(0xdf4fcc34, 0x67a, 0x4e0a, [0x83, 0x52, 0x4a, 0x1a, 0x50, 0x95, 0x34, 0x6e]);
struct InternetExplorerManager
{
}
alias INTERNETEXPLORERCONFIGURATION = int;
enum : int
{
    INTERNETEXPLORERCONFIGURATION_HOST            = 0x00000001,
    INTERNETEXPLORERCONFIGURATION_WEB_DRIVER      = 0x00000002,
    INTERNETEXPLORERCONFIGURATION_WEB_DRIVER_EDGE = 0x00000004,
}

enum IID_IEnumManagerFrames = GUID(0x3caa826a, 0x9b1f, 0x4a79, [0xbc, 0x81, 0xf0, 0x43, 0xd, 0xed, 0x16, 0x48]);
interface IEnumManagerFrames : IUnknown
{
    HRESULT Next(uint, HWND**, uint*);
    HRESULT Count(uint*);
    HRESULT Skip(uint);
    HRESULT Reset();
    HRESULT Clone(IEnumManagerFrames*);
}
enum IID_IInternetExplorerManager = GUID(0xacc84351, 0x4ff, 0x44f9, [0xb2, 0x3f, 0x65, 0x5e, 0xd1, 0x68, 0xc6, 0xd5]);
interface IInternetExplorerManager : IUnknown
{
    HRESULT CreateObject(uint, const(wchar)*, const(GUID)*, void**);
}
enum IID_IInternetExplorerManager2 = GUID(0xdfbb5136, 0x9259, 0x4895, [0xb4, 0xa7, 0xc1, 0x93, 0x44, 0x29, 0x91, 0x9a]);
interface IInternetExplorerManager2 : IUnknown
{
    HRESULT EnumFrameWindows(IEnumManagerFrames*);
}
alias IELAUNCHOPTION_FLAGS = int;
enum : int
{
    IELAUNCHOPTION_SCRIPTDEBUG  = 0x00000001,
    IELAUNCHOPTION_FORCE_COMPAT = 0x00000002,
    IELAUNCHOPTION_FORCE_EDGE   = 0x00000004,
    IELAUNCHOPTION_LOCK_ENGINE  = 0x00000008,
}

struct IELAUNCHURLINFO
{
    uint cbSize;
    uint dwCreationFlags;
    uint dwLaunchOptionFlags;
}
enum CLSID_IEWebDriverManager = GUID(0x90314af2, 0x5250, 0x47b3, [0x89, 0xd8, 0x62, 0x95, 0xfc, 0x23, 0xbc, 0x22]);
struct IEWebDriverManager
{
}
enum IID_IIEWebDriverSite = GUID(0xffb84444, 0x453d, 0x4fbc, [0x9f, 0x9d, 0x8d, 0xb5, 0xc4, 0x71, 0xec, 0x75]);
interface IIEWebDriverSite : IDispatch
{
    HRESULT WindowOperation(uint, uint);
    HRESULT DetachWebdriver(IUnknown);
    HRESULT GetCapabilityValue(IUnknown, PWSTR, VARIANT*);
}
enum IID_IIEWebDriverManager = GUID(0xbd1dc630, 0x6590, 0x4ca2, [0xa2, 0x93, 0x6b, 0xc7, 0x2b, 0x24, 0x38, 0xd8]);
interface IIEWebDriverManager : IDispatch
{
    HRESULT ExecuteCommand(PWSTR, PWSTR*);
}
struct HTMLPersistEvents
{
}
struct LayoutRectEvents
{
}
enum CLSID_PeerFactory = GUID(0x3050f4cf, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct PeerFactory
{
}
enum CLSID_IntelliForms = GUID(0x613ab92e, 0x16bf, 0x11d2, [0xbc, 0xa5, 0x0, 0xc0, 0x4f, 0xd9, 0x29, 0xdb]);
struct IntelliForms
{
}
enum CLSID_HomePage = GUID(0x766bf2ae, 0xd650, 0x11d1, [0x98, 0x11, 0x0, 0xc0, 0x4f, 0xc3, 0x1d, 0x2e]);
struct HomePage
{
}
enum CLSID_CPersistUserData = GUID(0x3050f48e, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct CPersistUserData
{
}
enum CLSID_CPersistDataPeer = GUID(0x3050f487, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct CPersistDataPeer
{
}
enum CLSID_CPersistShortcut = GUID(0x3050f4c6, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct CPersistShortcut
{
}
enum CLSID_CPersistHistory = GUID(0x3050f4c8, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct CPersistHistory
{
}
enum CLSID_CPersistSnapshot = GUID(0x3050f4c9, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct CPersistSnapshot
{
}
enum CLSID_CDownloadBehavior = GUID(0x3050f5be, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct CDownloadBehavior
{
}
enum CLSID_wfolders = GUID(0xbae31f9a, 0x1b81, 0x11d2, [0xa9, 0x7a, 0x0, 0xc0, 0x4f, 0x8e, 0xcb, 0x2]);
struct wfolders
{
}
enum CLSID_AnchorClick = GUID(0x13d5413c, 0x33b9, 0x11d2, [0x95, 0xa7, 0x0, 0xc0, 0x4f, 0x8e, 0xcb, 0x2]);
struct AnchorClick
{
}
enum CLSID_CLayoutRect = GUID(0x3050f664, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct CLayoutRect
{
}
enum CLSID_CDeviceRect = GUID(0x3050f6d4, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct CDeviceRect
{
}
enum CLSID_CHeaderFooter = GUID(0x3050f6cd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
struct CHeaderFooter
{
}
enum IID_IPeerFactory = GUID(0x6663f9d3, 0xb482, 0x11d1, [0x89, 0xc6, 0x0, 0xc0, 0x4f, 0xb6, 0xbf, 0xc4]);
interface IPeerFactory : IUnknown
{
}
enum IID_IHomePage = GUID(0x766bf2af, 0xd650, 0x11d1, [0x98, 0x11, 0x0, 0xc0, 0x4f, 0xc3, 0x1d, 0x2e]);
interface IHomePage : IDispatch
{
    HRESULT navigateHomePage();
    HRESULT setHomePage(BSTR);
    HRESULT isHomePage(BSTR, short*);
}
enum IID_IIntelliForms = GUID(0x9b9f68e6, 0x1aaa, 0x11d2, [0xbc, 0xa5, 0x0, 0xc0, 0x4f, 0xd9, 0x29, 0xdb]);
interface IIntelliForms : IDispatch
{
    HRESULT get_enabled(short*);
    HRESULT put_enabled(short);
}
enum IID_Iwfolders = GUID(0xbae31f98, 0x1b81, 0x11d2, [0xa9, 0x7a, 0x0, 0xc0, 0x4f, 0x8e, 0xcb, 0x2]);
interface Iwfolders : IDispatch
{
    HRESULT navigate(BSTR, BSTR*);
    HRESULT navigateFrame(BSTR, BSTR, BSTR*);
    HRESULT navigateNoSite(BSTR, BSTR, uint, IUnknown);
}
enum IID_IAnchorClick = GUID(0x13d5413b, 0x33b9, 0x11d2, [0x95, 0xa7, 0x0, 0xc0, 0x4f, 0x8e, 0xcb, 0x2]);
interface IAnchorClick : IDispatch
{
    HRESULT ProcOnClick();
}
enum IID_IHTMLUserDataOM = GUID(0x3050f48f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLUserDataOM : IDispatch
{
    HRESULT get_XMLDocument(IDispatch*);
    HRESULT save(BSTR);
    HRESULT load(BSTR);
    HRESULT getAttribute(BSTR, VARIANT*);
    HRESULT setAttribute(BSTR, VARIANT);
    HRESULT removeAttribute(BSTR);
    HRESULT put_expires(BSTR);
    HRESULT get_expires(BSTR*);
}
enum IID_IHTMLPersistDataOM = GUID(0x3050f4c0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLPersistDataOM : IDispatch
{
    HRESULT get_XMLDocument(IDispatch*);
    HRESULT getAttribute(BSTR, VARIANT*);
    HRESULT setAttribute(BSTR, VARIANT);
    HRESULT removeAttribute(BSTR);
}
enum IID_IHTMLPersistData = GUID(0x3050f4c5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLPersistData : IUnknown
{
    HRESULT save(IUnknown, int, short*);
    HRESULT load(IUnknown, int, short*);
    HRESULT queryType(int, short*);
}
enum IID_IDownloadBehavior = GUID(0x3050f5bd, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDownloadBehavior : IDispatch
{
    HRESULT startDownload(BSTR, IDispatch);
}
enum IID_ILayoutRect = GUID(0x3050f665, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ILayoutRect : IDispatch
{
    HRESULT put_nextRect(BSTR);
    HRESULT get_nextRect(BSTR*);
    HRESULT put_contentSrc(VARIANT);
    HRESULT get_contentSrc(VARIANT*);
    HRESULT put_honorPageBreaks(short);
    HRESULT get_honorPageBreaks(short*);
    HRESULT put_honorPageRules(short);
    HRESULT get_honorPageRules(short*);
    HRESULT put_nextRectElement(IDispatch);
    HRESULT get_nextRectElement(IDispatch*);
    HRESULT get_contentDocument(IDispatch*);
}
enum IID_IDeviceRect = GUID(0x3050f6d5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDeviceRect : IDispatch
{
}
enum IID_IHeaderFooter = GUID(0x3050f6ce, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHeaderFooter : IDispatch
{
    HRESULT get_htmlHead(BSTR*);
    HRESULT get_htmlFoot(BSTR*);
    HRESULT put_textHead(BSTR);
    HRESULT get_textHead(BSTR*);
    HRESULT put_textFoot(BSTR);
    HRESULT get_textFoot(BSTR*);
    HRESULT put_page(uint);
    HRESULT get_page(uint*);
    HRESULT put_pageTotal(uint);
    HRESULT get_pageTotal(uint*);
    HRESULT put_URL(BSTR);
    HRESULT get_URL(BSTR*);
    HRESULT put_title(BSTR);
    HRESULT get_title(BSTR*);
    HRESULT put_dateShort(BSTR);
    HRESULT get_dateShort(BSTR*);
    HRESULT put_dateLong(BSTR);
    HRESULT get_dateLong(BSTR*);
    HRESULT put_timeShort(BSTR);
    HRESULT get_timeShort(BSTR*);
    HRESULT put_timeLong(BSTR);
    HRESULT get_timeLong(BSTR*);
}
enum IID_IHeaderFooter2 = GUID(0x305104a5, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHeaderFooter2 : IHeaderFooter
{
    HRESULT put_font(BSTR);
    HRESULT get_font(BSTR*);
}
struct HostDialogHelper
{
}
alias SHOWHTMLDIALOGFN = HRESULT function(HWND, IMoniker, VARIANT*, PWSTR, VARIANT*);
alias SHOWHTMLDIALOGEXFN = HRESULT function(HWND, IMoniker, uint, VARIANT*, PWSTR, VARIANT*);
alias SHOWMODELESSHTMLDIALOGFN = HRESULT function(HWND, IMoniker, VARIANT*, VARIANT*, IHTMLWindow2*);
alias IEREGISTERXMLNSFN = HRESULT function(const(wchar)*, GUID, BOOL);
alias IEISXMLNSREGISTEREDFN = HRESULT function(const(wchar)*, GUID*);
enum IID_IHostDialogHelper = GUID(0x53dec138, 0xa51e, 0x11d2, [0x86, 0x1e, 0x0, 0xc0, 0x4f, 0xa3, 0x5c, 0x89]);
interface IHostDialogHelper : IUnknown
{
    HRESULT ShowHTMLDialog(HWND, IMoniker, VARIANT*, PWSTR, VARIANT*, IUnknown);
}
alias DOCHOSTUITYPE = int;
enum : int
{
    DOCHOSTUITYPE_BROWSE = 0x00000000,
    DOCHOSTUITYPE_AUTHOR = 0x00000001,
}

alias DOCHOSTUIDBLCLK = int;
enum : int
{
    DOCHOSTUIDBLCLK_DEFAULT        = 0x00000000,
    DOCHOSTUIDBLCLK_SHOWPROPERTIES = 0x00000001,
    DOCHOSTUIDBLCLK_SHOWCODE       = 0x00000002,
}

alias DOCHOSTUIFLAG = int;
enum : int
{
    DOCHOSTUIFLAG_DIALOG                         = 0x00000001,
    DOCHOSTUIFLAG_DISABLE_HELP_MENU              = 0x00000002,
    DOCHOSTUIFLAG_NO3DBORDER                     = 0x00000004,
    DOCHOSTUIFLAG_SCROLL_NO                      = 0x00000008,
    DOCHOSTUIFLAG_DISABLE_SCRIPT_INACTIVE        = 0x00000010,
    DOCHOSTUIFLAG_OPENNEWWIN                     = 0x00000020,
    DOCHOSTUIFLAG_DISABLE_OFFSCREEN              = 0x00000040,
    DOCHOSTUIFLAG_FLAT_SCROLLBAR                 = 0x00000080,
    DOCHOSTUIFLAG_DIV_BLOCKDEFAULT               = 0x00000100,
    DOCHOSTUIFLAG_ACTIVATE_CLIENTHIT_ONLY        = 0x00000200,
    DOCHOSTUIFLAG_OVERRIDEBEHAVIORFACTORY        = 0x00000400,
    DOCHOSTUIFLAG_CODEPAGELINKEDFONTS            = 0x00000800,
    DOCHOSTUIFLAG_URL_ENCODING_DISABLE_UTF8      = 0x00001000,
    DOCHOSTUIFLAG_URL_ENCODING_ENABLE_UTF8       = 0x00002000,
    DOCHOSTUIFLAG_ENABLE_FORMS_AUTOCOMPLETE      = 0x00004000,
    DOCHOSTUIFLAG_ENABLE_INPLACE_NAVIGATION      = 0x00010000,
    DOCHOSTUIFLAG_IME_ENABLE_RECONVERSION        = 0x00020000,
    DOCHOSTUIFLAG_THEME                          = 0x00040000,
    DOCHOSTUIFLAG_NOTHEME                        = 0x00080000,
    DOCHOSTUIFLAG_NOPICS                         = 0x00100000,
    DOCHOSTUIFLAG_NO3DOUTERBORDER                = 0x00200000,
    DOCHOSTUIFLAG_DISABLE_EDIT_NS_FIXUP          = 0x00400000,
    DOCHOSTUIFLAG_LOCAL_MACHINE_ACCESS_CHECK     = 0x00800000,
    DOCHOSTUIFLAG_DISABLE_UNTRUSTEDPROTOCOL      = 0x01000000,
    DOCHOSTUIFLAG_HOST_NAVIGATES                 = 0x02000000,
    DOCHOSTUIFLAG_ENABLE_REDIRECT_NOTIFICATION   = 0x04000000,
    DOCHOSTUIFLAG_USE_WINDOWLESS_SELECTCONTROL   = 0x08000000,
    DOCHOSTUIFLAG_USE_WINDOWED_SELECTCONTROL     = 0x10000000,
    DOCHOSTUIFLAG_ENABLE_ACTIVEX_INACTIVATE_MODE = 0x20000000,
    DOCHOSTUIFLAG_DPI_AWARE                      = 0x40000000,
}

struct DOCHOSTUIINFO
{
    uint cbSize;
    DOCHOSTUIFLAG dwFlags;
    DOCHOSTUIDBLCLK dwDoubleClick;
    PWSTR pchHostCss;
    PWSTR pchHostNS;
}
enum IID_IDocHostUIHandler = GUID(0xbd3f23c0, 0xd43e, 0x11cf, [0x89, 0x3b, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0x1a]);
interface IDocHostUIHandler : IUnknown
{
    HRESULT ShowContextMenu(uint, POINT*, IUnknown, IDispatch);
    HRESULT GetHostInfo(DOCHOSTUIINFO*);
    HRESULT ShowUI(uint, IOleInPlaceActiveObject, IOleCommandTarget, IOleInPlaceFrame, IOleInPlaceUIWindow);
    HRESULT HideUI();
    HRESULT UpdateUI();
    HRESULT EnableModeless(BOOL);
    HRESULT OnDocWindowActivate(BOOL);
    HRESULT OnFrameWindowActivate(BOOL);
    HRESULT ResizeBorder(RECT*, IOleInPlaceUIWindow, BOOL);
    HRESULT TranslateAccelerator(MSG*, const(GUID)*, uint);
    HRESULT GetOptionKeyPath(PWSTR*, uint);
    HRESULT GetDropTarget(IDropTarget, IDropTarget*);
    HRESULT GetExternal(IDispatch*);
    HRESULT TranslateUrl(uint, PWSTR, PWSTR*);
    HRESULT FilterDataObject(IDataObject, IDataObject*);
}
enum IID_IDocHostUIHandler2 = GUID(0x3050f6d0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDocHostUIHandler2 : IDocHostUIHandler
{
    HRESULT GetOverrideKeyPath(PWSTR*, uint);
}
enum IID_ICustomDoc = GUID(0x3050f3f0, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ICustomDoc : IUnknown
{
    HRESULT SetUIHandler(IDocHostUIHandler);
}
enum IID_IDocHostShowUI = GUID(0xc4d244b0, 0xd43e, 0x11cf, [0x89, 0x3b, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0x1a]);
interface IDocHostShowUI : IUnknown
{
    HRESULT ShowMessage(HWND, PWSTR, PWSTR, uint, PWSTR, uint, LRESULT*);
    HRESULT ShowHelp(HWND, PWSTR, uint, uint, POINT, IDispatch);
}
enum IID_IClassFactoryEx = GUID(0x342d1ea0, 0xae25, 0x11d1, [0x89, 0xc5, 0x0, 0x60, 0x8, 0xc3, 0xfb, 0xfc]);
interface IClassFactoryEx : IClassFactory
{
    HRESULT CreateInstanceWithContext(IUnknown, IUnknown, const(GUID)*, void**);
}
enum IID_IHTMLOMWindowServices = GUID(0x3050f5fc, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IHTMLOMWindowServices : IUnknown
{
    HRESULT moveTo(int, int);
    HRESULT moveBy(int, int);
    HRESULT resizeTo(int, int);
    HRESULT resizeBy(int, int);
}
enum IID_IDiagnosticsScriptEngineSite = GUID(0x30510858, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDiagnosticsScriptEngineSite : IUnknown
{
    HRESULT OnMessage(PWSTR*, uint);
    HRESULT OnScriptError(IActiveScriptError);
}
enum IID_IDiagnosticsScriptEngine = GUID(0x30510859, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDiagnosticsScriptEngine : IUnknown
{
    HRESULT EvaluateScript(const(wchar)*, const(wchar)*);
    HRESULT FireScriptMessageEvent(PWSTR*, PWSTR*, uint);
    HRESULT Detach();
}
enum IID_IDiagnosticsScriptEngineProvider = GUID(0x3051085a, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface IDiagnosticsScriptEngineProvider : IUnknown
{
    HRESULT CreateDiagnosticsScriptEngine(IDiagnosticsScriptEngineSite, BOOL, uint, IDiagnosticsScriptEngine*);
}
enum CLSID_OpenServiceManager = GUID(0x98870b6, 0x39ea, 0x480b, [0xb8, 0xb5, 0xdd, 0x1, 0x67, 0xc4, 0xdb, 0x59]);
struct OpenServiceManager
{
}
enum CLSID_OpenServiceActivityManager = GUID(0xc5efd803, 0x50f8, 0x43cd, [0x9a, 0xb8, 0xaa, 0xfc, 0x13, 0x94, 0xc9, 0xe0]);
struct OpenServiceActivityManager
{
}
alias OpenServiceErrors = int;
enum : int
{
    OS_E_NOTFOUND     = 0x80030002,
    OS_E_NOTSUPPORTED = 0x80004021,
    OS_E_CANCELLED    = 0x80002ef1,
    OS_E_GPDISABLED   = 0xc00d0bdc,
}

alias OpenServiceActivityContentType = int;
enum : int
{
    ActivityContentNone      = 0xffffffff,
    ActivityContentDocument  = 0x00000000,
    ActivityContentSelection = 0x00000001,
    ActivityContentLink      = 0x00000002,
    ActivityContentCount     = 0x00000003,
}

enum IID_IOpenServiceActivityInput = GUID(0x75cb4db9, 0x6da0, 0x4da3, [0x83, 0xce, 0x42, 0x2b, 0x6a, 0x43, 0x33, 0x46]);
interface IOpenServiceActivityInput : IUnknown
{
    HRESULT GetVariable(const(wchar)*, const(wchar)*, BSTR*);
    HRESULT HasVariable(const(wchar)*, const(wchar)*, BOOL*);
    HRESULT GetType(OpenServiceActivityContentType*);
}
enum IID_IOpenServiceActivityOutputContext = GUID(0xe289deab, 0xf709, 0x49a9, [0xb9, 0x9e, 0x28, 0x23, 0x64, 0x7, 0x45, 0x71]);
interface IOpenServiceActivityOutputContext : IUnknown
{
    HRESULT Navigate(const(wchar)*, const(wchar)*, const(wchar)*, IStream);
    HRESULT CanNavigate(const(wchar)*, const(wchar)*, const(wchar)*, IStream, BOOL*);
}
enum IID_IOpenService = GUID(0xc2952ed1, 0x6a89, 0x4606, [0x92, 0x5f, 0x1e, 0xd8, 0xb4, 0xbe, 0x6, 0x30]);
interface IOpenService : IUnknown
{
    HRESULT IsDefault(BOOL*);
    HRESULT SetDefault(BOOL, HWND);
    HRESULT GetID(BSTR*);
}
enum IID_IOpenServiceManager = GUID(0x5664125f, 0x4e10, 0x4e90, [0x98, 0xe4, 0xe4, 0x51, 0x3d, 0x95, 0x5a, 0x14]);
interface IOpenServiceManager : IUnknown
{
    HRESULT InstallService(const(wchar)*, IOpenService*);
    HRESULT UninstallService(IOpenService);
    HRESULT GetServiceByID(const(wchar)*, IOpenService*);
}
enum IID_IOpenServiceActivity = GUID(0x13645c88, 0x221a, 0x4905, [0x8e, 0xd1, 0x4f, 0x51, 0x12, 0xcf, 0xc1, 0x8]);
interface IOpenServiceActivity : IOpenService
{
    HRESULT Execute(IOpenServiceActivityInput, IOpenServiceActivityOutputContext);
    HRESULT CanExecute(IOpenServiceActivityInput, IOpenServiceActivityOutputContext, BOOL*);
    HRESULT CanExecuteType(OpenServiceActivityContentType, BOOL*);
    HRESULT Preview(IOpenServiceActivityInput, IOpenServiceActivityOutputContext);
    HRESULT CanPreview(IOpenServiceActivityInput, IOpenServiceActivityOutputContext, BOOL*);
    HRESULT CanPreviewType(OpenServiceActivityContentType, BOOL*);
    HRESULT GetStatusText(IOpenServiceActivityInput, BSTR*);
    HRESULT GetHomepageUrl(BSTR*);
    HRESULT GetDisplayName(BSTR*);
    HRESULT GetDescription(BSTR*);
    HRESULT GetCategoryName(BSTR*);
    HRESULT GetIconPath(BSTR*);
    HRESULT GetIcon(BOOL, HICON*);
    HRESULT GetDescriptionFilePath(BSTR*);
    HRESULT GetDownloadUrl(BSTR*);
    HRESULT GetInstallUrl(BSTR*);
    HRESULT IsEnabled(BOOL*);
    HRESULT SetEnabled(BOOL);
}
enum IID_IEnumOpenServiceActivity = GUID(0xa436d7d2, 0x17c3, 0x4ef4, [0xa1, 0xe8, 0x5c, 0x86, 0xfa, 0xff, 0x26, 0xc0]);
interface IEnumOpenServiceActivity : IUnknown
{
    HRESULT Next(uint, IOpenServiceActivity*, uint*);
    HRESULT Skip(uint);
    HRESULT Reset();
    HRESULT Clone(IEnumOpenServiceActivity*);
}
enum IID_IOpenServiceActivityCategory = GUID(0x850af9d6, 0x7309, 0x40b5, [0xbd, 0xb8, 0x78, 0x6c, 0x10, 0x6b, 0x21, 0x53]);
interface IOpenServiceActivityCategory : IUnknown
{
    HRESULT HasDefaultActivity(BOOL*);
    HRESULT GetDefaultActivity(IOpenServiceActivity*);
    HRESULT SetDefaultActivity(IOpenServiceActivity, HWND);
    HRESULT GetName(BSTR*);
    HRESULT GetActivityEnumerator(IOpenServiceActivityInput, IOpenServiceActivityOutputContext, IEnumOpenServiceActivity*);
}
enum IID_IEnumOpenServiceActivityCategory = GUID(0x33627a56, 0x8c9a, 0x4430, [0x8f, 0xd1, 0xb5, 0xf5, 0xc7, 0x71, 0xaf, 0xb6]);
interface IEnumOpenServiceActivityCategory : IUnknown
{
    HRESULT Next(uint, IOpenServiceActivityCategory*, uint*);
    HRESULT Skip(uint);
    HRESULT Reset();
    HRESULT Clone(IEnumOpenServiceActivityCategory*);
}
enum IID_IOpenServiceActivityManager = GUID(0x8a2d0a9d, 0xe920, 0x4bdc, [0xa2, 0x91, 0xd3, 0xf, 0x65, 0xb, 0xc4, 0xf1]);
interface IOpenServiceActivityManager : IUnknown
{
    HRESULT GetCategoryEnumerator(OpenServiceActivityContentType, IEnumOpenServiceActivityCategory*);
    HRESULT GetActivityByID(const(wchar)*, IOpenServiceActivity*);
    HRESULT GetActivityByHomepageAndCategory(const(wchar)*, const(wchar)*, IOpenServiceActivity*);
    HRESULT GetVersionCookie(uint*);
}
enum IID_IPersistHistory = GUID(0x91a565c1, 0xe38f, 0x11d0, [0x94, 0xbf, 0x0, 0xa0, 0xc9, 0x5, 0x5c, 0xbf]);
interface IPersistHistory : IPersist
{
    HRESULT LoadHistory(IStream, IBindCtx);
    HRESULT SaveHistory(IStream);
    HRESULT SetPositionCookie(uint);
    HRESULT GetPositionCookie(uint*);
}
alias ADDURL_FLAG = int;
enum : int
{
    ADDURL_FIRST                = 0x00000000,
    ADDURL_ADDTOHISTORYANDCACHE = 0x00000000,
    ADDURL_ADDTOCACHE           = 0x00000001,
    ADDURL_Max                  = 0x7fffffff,
}

struct STATURL
{
    uint cbSize;
    PWSTR pwcsUrl;
    PWSTR pwcsTitle;
    FILETIME ftLastVisited;
    FILETIME ftLastUpdated;
    FILETIME ftExpires;
    uint dwFlags;
}
enum IID_IEnumSTATURL = GUID(0x3c374a42, 0xbae4, 0x11cf, [0xbf, 0x7d, 0x0, 0xaa, 0x0, 0x69, 0x46, 0xee]);
interface IEnumSTATURL : IUnknown
{
    HRESULT Next(uint, STATURL*, uint*);
    HRESULT Skip(uint);
    HRESULT Reset();
    HRESULT Clone(IEnumSTATURL*);
    HRESULT SetFilter(const(wchar)*, uint);
}
enum IID_IUrlHistoryStg = GUID(0x3c374a41, 0xbae4, 0x11cf, [0xbf, 0x7d, 0x0, 0xaa, 0x0, 0x69, 0x46, 0xee]);
interface IUrlHistoryStg : IUnknown
{
    HRESULT AddUrl(const(wchar)*, const(wchar)*, uint);
    HRESULT DeleteUrl(const(wchar)*, uint);
    HRESULT QueryUrl(const(wchar)*, uint, STATURL*);
    HRESULT BindToObject(const(wchar)*, const(GUID)*, void**);
    HRESULT EnumUrls(IEnumSTATURL*);
}
enum IID_IUrlHistoryStg2 = GUID(0xafa0dc11, 0xc313, 0x11d0, [0x83, 0x1a, 0x0, 0xc0, 0x4f, 0xd5, 0xae, 0x38]);
interface IUrlHistoryStg2 : IUrlHistoryStg
{
    HRESULT AddUrlAndNotify(const(wchar)*, const(wchar)*, uint, BOOL, IOleCommandTarget, IUnknown);
    HRESULT ClearHistory();
}
enum IID_IUrlHistoryNotify = GUID(0xbc40bec1, 0xc493, 0x11d0, [0x83, 0x1b, 0x0, 0xc0, 0x4f, 0xd5, 0xae, 0x38]);
interface IUrlHistoryNotify : IOleCommandTarget
{
}
enum IID_IWebBrowserEventsService = GUID(0x54a8f188, 0x9ebd, 0x4795, [0xad, 0x16, 0x9b, 0x49, 0x45, 0x11, 0x96, 0x36]);
interface IWebBrowserEventsService : IUnknown
{
    HRESULT FireBeforeNavigate2Event(short*);
    HRESULT FireNavigateComplete2Event();
    HRESULT FireDownloadBeginEvent();
    HRESULT FireDownloadCompleteEvent();
    HRESULT FireDocumentCompleteEvent();
}
enum IID_IWebBrowserEventsUrlService = GUID(0x87cc5d04, 0xeafa, 0x4833, [0x98, 0x20, 0x8f, 0x98, 0x65, 0x30, 0xcc, 0x0]);
interface IWebBrowserEventsUrlService : IUnknown
{
    HRESULT GetUrlForEvents(BSTR*);
}
enum IID_ITimerService = GUID(0x3050f35f, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ITimerService : IUnknown
{
    HRESULT CreateTimer(ITimer, ITimer*);
    HRESULT GetNamedTimer(const(GUID)*, ITimer*);
    HRESULT SetNamedTimerReference(const(GUID)*, ITimer);
}
enum IID_ITimer = GUID(0x3050f360, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ITimer : IUnknown
{
    HRESULT Advise(VARIANT, VARIANT, VARIANT, uint, ITimerSink, uint*);
    HRESULT Unadvise(uint);
    HRESULT Freeze(BOOL);
    HRESULT GetTime(VARIANT*);
}
enum IID_ITimerEx = GUID(0x30510414, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ITimerEx : ITimer
{
    HRESULT SetMode(uint);
}
enum IID_ITimerSink = GUID(0x3050f361, 0x98b5, 0x11cf, [0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb]);
interface ITimerSink : IUnknown
{
    HRESULT OnTimer(VARIANT);
}
enum IID_IMapMIMEToCLSID = GUID(0xd9e89500, 0x30fa, 0x11d0, [0xb7, 0x24, 0x0, 0xaa, 0x0, 0x6c, 0x1a, 0x1]);
interface IMapMIMEToCLSID : IUnknown
{
    HRESULT EnableDefaultMappings(BOOL);
    HRESULT MapMIMEToCLSID(const(wchar)*, GUID*);
    HRESULT SetMapping(const(wchar)*, uint, const(GUID)*);
}
enum IID_IImageDecodeFilter = GUID(0xa3ccedf3, 0x2de2, 0x11d0, [0x86, 0xf4, 0x0, 0xa0, 0xc9, 0x13, 0xf7, 0x50]);
interface IImageDecodeFilter : IUnknown
{
    HRESULT Initialize(IImageDecodeEventSink);
    HRESULT Process(IStream);
    HRESULT Terminate(HRESULT);
}
enum IID_IImageDecodeEventSink = GUID(0xbaa342a0, 0x2ded, 0x11d0, [0x86, 0xf4, 0x0, 0xa0, 0xc9, 0x13, 0xf7, 0x50]);
interface IImageDecodeEventSink : IUnknown
{
    HRESULT GetSurface(int, int, const(GUID)*, uint, uint, IUnknown*);
    HRESULT OnBeginDecode(uint*, uint*, GUID**);
    HRESULT OnBitsComplete();
    HRESULT OnDecodeComplete(HRESULT);
    HRESULT OnPalette();
    HRESULT OnProgress(RECT*, BOOL);
}
enum IID_IImageDecodeEventSink2 = GUID(0x8ebd8a57, 0x8a96, 0x48c9, [0x84, 0xa6, 0x96, 0x2e, 0x2d, 0xb9, 0xc9, 0x31]);
interface IImageDecodeEventSink2 : IImageDecodeEventSink
{
    HRESULT IsAlphaPremultRequired(BOOL*);
}
enum CLSID_CoDitherToRGB8 = GUID(0xa860ce50, 0x3910, 0x11d0, [0x86, 0xfc, 0x0, 0xa0, 0xc9, 0x13, 0xf7, 0x50]);
struct CoDitherToRGB8
{
}
enum CLSID_CoSniffStream = GUID(0x6a01fda0, 0x30df, 0x11d0, [0xb7, 0x24, 0x0, 0xaa, 0x0, 0x6c, 0x1a, 0x1]);
struct CoSniffStream
{
}
enum CLSID_CoMapMIMEToCLSID = GUID(0x30c3b080, 0x30fb, 0x11d0, [0xb7, 0x24, 0x0, 0xaa, 0x0, 0x6c, 0x1a, 0x1]);
struct CoMapMIMEToCLSID
{
}
enum IID_ISniffStream = GUID(0x4ef17940, 0x30e0, 0x11d0, [0xb7, 0x24, 0x0, 0xaa, 0x0, 0x6c, 0x1a, 0x1]);
interface ISniffStream : IUnknown
{
    HRESULT Init(IStream);
    HRESULT Peek(void*, uint, uint*);
}
enum IID_IDithererImpl = GUID(0x7c48e840, 0x3910, 0x11d0, [0x86, 0xfc, 0x0, 0xa0, 0xc9, 0x13, 0xf7, 0x50]);
interface IDithererImpl : IUnknown
{
    HRESULT SetDestColorTable(uint, const(RGBQUAD)*);
    HRESULT SetEventSink(IImageDecodeEventSink);
}
