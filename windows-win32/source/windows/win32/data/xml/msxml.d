module windows.win32.data.xml.msxml;

import windows.win32.guid : GUID;
import windows.win32.foundation : BOOL, BSTR, FILETIME, HRESULT, PWSTR;
import windows.win32.system.com_ : IDispatch, ISequentialStream, IUnknown, VARIANT;

version (Windows):
extern (Windows):

enum E_XML_NOTWF = 0xffffffffc00ce223;
enum E_XML_NODTD = 0xffffffffc00ce224;
enum E_XML_INVALID = 0xffffffffc00ce225;
enum E_XML_BUFFERTOOSMALL = 0xffffffffc00ce226;
enum XHR_PROP_ONDATA_ALWAYS = 0x00000000;
enum XHR_PROP_ONDATA_NEVER = 0xffffffffffffffff;
enum DISPID_XOBJ_MIN = 0x00010000;
enum DISPID_XOBJ_MAX = 0x0001ffff;
enum DISPID_XOBJ_BASE = 0x00010000;
enum DISPID_XMLELEMENTCOLLECTION = 0x00010000;
enum DISPID_XMLELEMENTCOLLECTION_LENGTH = 0x00010001;
enum DISPID_XMLELEMENTCOLLECTION_NEWENUM = 0xfffffffffffffffc;
enum DISPID_XMLELEMENTCOLLECTION_ITEM = 0x00010003;
enum DISPID_XMLDOCUMENT = 0x00010064;
enum DISPID_XMLDOCUMENT_ROOT = 0x00010065;
enum DISPID_XMLDOCUMENT_FILESIZE = 0x00010066;
enum DISPID_XMLDOCUMENT_FILEMODIFIEDDATE = 0x00010067;
enum DISPID_XMLDOCUMENT_FILEUPDATEDDATE = 0x00010068;
enum DISPID_XMLDOCUMENT_URL = 0x00010069;
enum DISPID_XMLDOCUMENT_MIMETYPE = 0x0001006a;
enum DISPID_XMLDOCUMENT_READYSTATE = 0x0001006b;
enum DISPID_XMLDOCUMENT_CREATEELEMENT = 0x0001006c;
enum DISPID_XMLDOCUMENT_CHARSET = 0x0001006d;
enum DISPID_XMLDOCUMENT_VERSION = 0x0001006e;
enum DISPID_XMLDOCUMENT_DOCTYPE = 0x0001006f;
enum DISPID_XMLDOCUMENT_DTDURL = 0x00010070;
enum DISPID_XMLDOCUMENT_ASYNC = 0x00010071;
enum DISPID_XMLDOCUMENT_CASEINSENSITIVE = 0x00010072;
enum DISPID_XMLDOCUMENT_BASEURL = 0x00010073;
enum DISPID_XMLDOCUMENT_XML = 0x00010074;
enum DISPID_XMLDOCUMENT_LASTERROR = 0x00010075;
enum DISPID_XMLDOCUMENT_TRIMWHITESPACE = 0x00010076;
enum DISPID_XMLDOCUMENT_COMMIT = 0x00010077;
enum DISPID_XMLELEMENT = 0x000100c8;
enum DISPID_XMLELEMENT_TAGNAME = 0x000100c9;
enum DISPID_XMLELEMENT_PARENT = 0x000100ca;
enum DISPID_XMLELEMENT_SETATTRIBUTE = 0x000100cb;
enum DISPID_XMLELEMENT_GETATTRIBUTE = 0x000100cc;
enum DISPID_XMLELEMENT_REMOVEATTRIBUTE = 0x000100cd;
enum DISPID_XMLELEMENT_CHILDREN = 0x000100ce;
enum DISPID_XMLELEMENT_TYPE = 0x000100cf;
enum DISPID_XMLELEMENT_TEXT = 0x000100d0;
enum DISPID_XMLELEMENT_ADDCHILD = 0x000100d1;
enum DISPID_XMLELEMENT_REMOVECHILD = 0x000100d2;
enum DISPID_XMLELEMENT_ATTRIBUTES = 0x000100d3;
enum DISPID_XMLNOTIFSINK = 0x0001012c;
enum DISPID_XMLNOTIFSINK_CHILDADDED = 0x0001012d;
enum DISPID_XMLATTRIBUTE = 0x00010190;
enum DISPID_XMLATTRIBUTE_NAME = 0x00010191;
enum DISPID_XMLATTRIBUTE_VALUE = 0x00010192;
enum DISPID_XMLERROR = 0x00010190;
enum DISPID_XMLERROR_REASON = 0x00010191;
enum DISPID_XMLERROR_LINE = 0x00010192;
enum DISPID_XMLERROR_POS = 0x00010193;
enum DISPID_NODE = 0x000101f4;
enum DISPID_NODE_NAME = 0x000101f5;
enum DISPID_NODE_PARENT = 0x000101f6;
enum DISPID_NODE_TYPE = 0x000101f7;
enum DISPID_NODE_VALUE = 0x000101f8;
enum DISPID_NODE_SETATTRIBUTE = 0x000101f9;
enum DISPID_NODE_GETATTRIBUTE = 0x000101fa;
enum DISPID_NODE_REMOVEATTRIBUTE = 0x000101fb;
enum DISPID_NODE_ATTRIBUTES = 0x000101fc;
enum DISPID_NODE_ADD = 0x000101fd;
enum DISPID_NODE_REMOVE = 0x000101fe;
enum DISPID_NODE_CHILDREN = 0x000101ff;
enum DISPID_NODELIST = 0x00010258;
enum DISPID_NODELIST_NEWENUM = 0x00010259;
enum DISPID_NODELIST_NEXT = 0x0001025a;
enum DISPID_NODELIST_CURRENT = 0x0001025b;
enum DISPID_NODELIST_MOVE = 0x0001025c;
enum DISPID_NODELIST_MOVETONODE = 0x0001025d;
enum DISPID_NODELIST_LENGTH = 0x0001025e;
enum DISPID_NODELIST_ITEM = 0x0001025f;
enum DISPID_DOM_BASE = 0x00000001;
enum DISPID_DOM_COLLECTION_BASE = 0x000f4240;
enum DISPID_DOM_COLLECTION_MAX = 0x002dc6bf;
enum DISPID_DOM_NODE = 0x00000001;
enum DISPID_DOM_NODE_NODENAME = 0x00000002;
enum DISPID_DOM_NODE_NODEVALUE = 0x00000003;
enum DISPID_DOM_NODE_NODETYPE = 0x00000004;
enum DISPID_DOM_NODE_NODETYPEENUM = 0x00000005;
enum DISPID_DOM_NODE_PARENTNODE = 0x00000006;
enum DISPID_DOM_NODE_CHILDNODES = 0x00000007;
enum DISPID_DOM_NODE_FIRSTCHILD = 0x00000008;
enum DISPID_DOM_NODE_LASTCHILD = 0x00000009;
enum DISPID_DOM_NODE_PREVIOUSSIBLING = 0x0000000a;
enum DISPID_DOM_NODE_NEXTSIBLING = 0x0000000b;
enum DISPID_DOM_NODE_ATTRIBUTES = 0x0000000c;
enum DISPID_DOM_NODE_INSERTBEFORE = 0x0000000d;
enum DISPID_DOM_NODE_REPLACECHILD = 0x0000000e;
enum DISPID_DOM_NODE_REMOVECHILD = 0x0000000f;
enum DISPID_DOM_NODE_APPENDCHILD = 0x00000010;
enum DISPID_DOM_NODE_HASCHILDNODES = 0x00000011;
enum DISPID_DOM_NODE_OWNERDOC = 0x00000012;
enum DISPID_DOM_NODE_CLONENODE = 0x00000013;
enum DISPID_XMLDOM_NODE = 0x00000014;
enum DISPID_XMLDOM_NODE_STRINGTYPE = 0x00000015;
enum DISPID_XMLDOM_NODE_SPECIFIED = 0x00000016;
enum DISPID_XMLDOM_NODE_DEFINITION = 0x00000017;
enum DISPID_XMLDOM_NODE_TEXT = 0x00000018;
enum DISPID_XMLDOM_NODE_NODETYPEDVALUE = 0x00000019;
enum DISPID_XMLDOM_NODE_DATATYPE = 0x0000001a;
enum DISPID_XMLDOM_NODE_XML = 0x0000001b;
enum DISPID_XMLDOM_NODE_TRANSFORMNODE = 0x0000001c;
enum DISPID_XMLDOM_NODE_SELECTNODES = 0x0000001d;
enum DISPID_XMLDOM_NODE_SELECTSINGLENODE = 0x0000001e;
enum DISPID_XMLDOM_NODE_PARSED = 0x0000001f;
enum DISPID_XMLDOM_NODE_NAMESPACE = 0x00000020;
enum DISPID_XMLDOM_NODE_PREFIX = 0x00000021;
enum DISPID_XMLDOM_NODE_BASENAME = 0x00000022;
enum DISPID_XMLDOM_NODE_TRANSFORMNODETOOBJECT = 0x00000023;
enum DISPID_XMLDOM_NODE__TOP = 0x00000024;
enum DISPID_DOM_DOCUMENT = 0x00000025;
enum DISPID_DOM_DOCUMENT_DOCTYPE = 0x00000026;
enum DISPID_DOM_DOCUMENT_IMPLEMENTATION = 0x00000027;
enum DISPID_DOM_DOCUMENT_DOCUMENTELEMENT = 0x00000028;
enum DISPID_DOM_DOCUMENT_CREATEELEMENT = 0x00000029;
enum DISPID_DOM_DOCUMENT_CREATEDOCUMENTFRAGMENT = 0x0000002a;
enum DISPID_DOM_DOCUMENT_CREATETEXTNODE = 0x0000002b;
enum DISPID_DOM_DOCUMENT_CREATECOMMENT = 0x0000002c;
enum DISPID_DOM_DOCUMENT_CREATECDATASECTION = 0x0000002d;
enum DISPID_DOM_DOCUMENT_CREATEPROCESSINGINSTRUCTION = 0x0000002e;
enum DISPID_DOM_DOCUMENT_CREATEATTRIBUTE = 0x0000002f;
enum DISPID_DOM_DOCUMENT_CREATEENTITY = 0x00000030;
enum DISPID_DOM_DOCUMENT_CREATEENTITYREFERENCE = 0x00000031;
enum DISPID_DOM_DOCUMENT_GETELEMENTSBYTAGNAME = 0x00000032;
enum DISPID_DOM_DOCUMENT_TOP = 0x00000033;
enum DISPID_XMLDOM_DOCUMENT = 0x00000034;
enum DISPID_XMLDOM_DOCUMENT_DOCUMENTNODE = 0x00000035;
enum DISPID_XMLDOM_DOCUMENT_CREATENODE = 0x00000036;
enum DISPID_XMLDOM_DOCUMENT_CREATENODEEX = 0x00000037;
enum DISPID_XMLDOM_DOCUMENT_NODEFROMID = 0x00000038;
enum DISPID_XMLDOM_DOCUMENT_DOCUMENTNAMESPACES = 0x00000039;
enum DISPID_XMLDOM_DOCUMENT_LOAD = 0x0000003a;
enum DISPID_XMLDOM_DOCUMENT_PARSEERROR = 0x0000003b;
enum DISPID_XMLDOM_DOCUMENT_URL = 0x0000003c;
enum DISPID_XMLDOM_DOCUMENT_ASYNC = 0x0000003d;
enum DISPID_XMLDOM_DOCUMENT_ABORT = 0x0000003e;
enum DISPID_XMLDOM_DOCUMENT_LOADXML = 0x0000003f;
enum DISPID_XMLDOM_DOCUMENT_SAVE = 0x00000040;
enum DISPID_XMLDOM_DOCUMENT_VALIDATE = 0x00000041;
enum DISPID_XMLDOM_DOCUMENT_RESOLVENAMESPACE = 0x00000042;
enum DISPID_XMLDOM_DOCUMENT_PRESERVEWHITESPACE = 0x00000043;
enum DISPID_XMLDOM_DOCUMENT_ONREADYSTATECHANGE = 0x00000044;
enum DISPID_XMLDOM_DOCUMENT_ONDATAAVAILABLE = 0x00000045;
enum DISPID_XMLDOM_DOCUMENT_ONTRANSFORMNODE = 0x00000046;
enum DISPID_XMLDOM_DOCUMENT__TOP = 0x00000047;
enum DISPID_DOM_NODELIST = 0x00000048;
enum DISPID_DOM_NODELIST_ITEM = 0x00000049;
enum DISPID_DOM_NODELIST_LENGTH = 0x0000004a;
enum DISPID_XMLDOM_NODELIST = 0x0000004b;
enum DISPID_XMLDOM_NODELIST_NEXTNODE = 0x0000004c;
enum DISPID_XMLDOM_NODELIST_RESET = 0x0000004d;
enum DISPID_XMLDOM_NODELIST_NEWENUM = 0x0000004e;
enum DISPID_XMLDOM_NODELIST__TOP = 0x0000004f;
enum DISPID_DOM_NAMEDNODEMAP = 0x00000050;
enum DISPID_DOM_NAMEDNODEMAP_GETNAMEDITEM = 0x00000053;
enum DISPID_DOM_NAMEDNODEMAP_SETNAMEDITEM = 0x00000054;
enum DISPID_DOM_NAMEDNODEMAP_REMOVENAMEDITEM = 0x00000055;
enum DISPID_XMLDOM_NAMEDNODEMAP = 0x00000056;
enum DISPID_XMLDOM_NAMEDNODEMAP_GETQUALIFIEDITEM = 0x00000057;
enum DISPID_XMLDOM_NAMEDNODEMAP_REMOVEQUALIFIEDITEM = 0x00000058;
enum DISPID_XMLDOM_NAMEDNODEMAP_NEXTNODE = 0x00000059;
enum DISPID_XMLDOM_NAMEDNODEMAP_RESET = 0x0000005a;
enum DISPID_XMLDOM_NAMEDNODEMAP_NEWENUM = 0x0000005b;
enum DISPID_XMLDOM_NAMEDNODEMAP__TOP = 0x0000005c;
enum DISPID_DOM_W3CWRAPPERS = 0x0000005d;
enum DISPID_DOM_DOCUMENTFRAGMENT = 0x0000005e;
enum DISPID_DOM_DOCUMENTFRAGMENT__TOP = 0x0000005f;
enum DISPID_DOM_ELEMENT = 0x00000060;
enum DISPID_DOM_ELEMENT_GETTAGNAME = 0x00000061;
enum DISPID_DOM_ELEMENT_GETATTRIBUTES = 0x00000062;
enum DISPID_DOM_ELEMENT_GETATTRIBUTE = 0x00000063;
enum DISPID_DOM_ELEMENT_SETATTRIBUTE = 0x00000064;
enum DISPID_DOM_ELEMENT_REMOVEATTRIBUTE = 0x00000065;
enum DISPID_DOM_ELEMENT_GETATTRIBUTENODE = 0x00000066;
enum DISPID_DOM_ELEMENT_SETATTRIBUTENODE = 0x00000067;
enum DISPID_DOM_ELEMENT_REMOVEATTRIBUTENODE = 0x00000068;
enum DISPID_DOM_ELEMENT_GETELEMENTSBYTAGNAME = 0x00000069;
enum DISPID_DOM_ELEMENT_NORMALIZE = 0x0000006a;
enum DISPID_DOM_ELEMENT__TOP = 0x0000006b;
enum DISPID_DOM_DATA = 0x0000006c;
enum DISPID_DOM_DATA_DATA = 0x0000006d;
enum DISPID_DOM_DATA_LENGTH = 0x0000006e;
enum DISPID_DOM_DATA_SUBSTRING = 0x0000006f;
enum DISPID_DOM_DATA_APPEND = 0x00000070;
enum DISPID_DOM_DATA_INSERT = 0x00000071;
enum DISPID_DOM_DATA_DELETE = 0x00000072;
enum DISPID_DOM_DATA_REPLACE = 0x00000073;
enum DISPID_DOM_DATA__TOP = 0x00000074;
enum DISPID_DOM_ATTRIBUTE = 0x00000075;
enum DISPID_DOM_ATTRIBUTE_GETNAME = 0x00000076;
enum DISPID_DOM_ATTRIBUTE_SPECIFIED = 0x00000077;
enum DISPID_DOM_ATTRIBUTE_VALUE = 0x00000078;
enum DISPID_DOM_ATTRIBUTE__TOP = 0x00000079;
enum DISPID_DOM_TEXT = 0x0000007a;
enum DISPID_DOM_TEXT_SPLITTEXT = 0x0000007b;
enum DISPID_DOM_TEXT_JOINTEXT = 0x0000007c;
enum DISPID_DOM_TEXT__TOP = 0x0000007d;
enum DISPID_DOM_PI = 0x0000007e;
enum DISPID_DOM_PI_TARGET = 0x0000007f;
enum DISPID_DOM_PI_DATA = 0x00000080;
enum DISPID_DOM_PI__TOP = 0x00000081;
enum DISPID_DOM_DOCUMENTTYPE = 0x00000082;
enum DISPID_DOM_DOCUMENTTYPE_NAME = 0x00000083;
enum DISPID_DOM_DOCUMENTTYPE_ENTITIES = 0x00000084;
enum DISPID_DOM_DOCUMENTTYPE_NOTATIONS = 0x00000085;
enum DISPID_DOM_DOCUMENTTYPE__TOP = 0x00000086;
enum DISPID_DOM_NOTATION = 0x00000087;
enum DISPID_DOM_NOTATION_PUBLICID = 0x00000088;
enum DISPID_DOM_NOTATION_SYSTEMID = 0x00000089;
enum DISPID_DOM_NOTATION__TOP = 0x0000008a;
enum DISPID_DOM_ENTITY = 0x0000008b;
enum DISPID_DOM_ENTITY_PUBLICID = 0x0000008c;
enum DISPID_DOM_ENTITY_SYSTEMID = 0x0000008d;
enum DISPID_DOM_ENTITY_NOTATIONNAME = 0x0000008e;
enum DISPID_DOM_ENTITY__TOP = 0x0000008f;
enum DISPID_DOM_W3CWRAPPERS_TOP = 0x0000008f;
enum DISPID_DOM_IMPLEMENTATION = 0x00000090;
enum DISPID_DOM_IMPLEMENTATION_HASFEATURE = 0x00000091;
enum DISPID_DOM_IMPLEMENTATION__TOP = 0x00000092;
enum DISPID_DOM__TOP = 0x000000b0;
enum DISPID_DOM_ERROR = 0x000000b1;
enum DISPID_DOM_ERROR_ERRORCODE = 0x000000b2;
enum DISPID_DOM_ERROR_URL = 0x000000b3;
enum DISPID_DOM_ERROR_REASON = 0x000000b4;
enum DISPID_DOM_ERROR_SRCTEXT = 0x000000b5;
enum DISPID_DOM_ERROR_LINE = 0x000000b6;
enum DISPID_DOM_ERROR_LINEPOS = 0x000000b7;
enum DISPID_DOM_ERROR_FILEPOS = 0x000000b8;
enum DISPID_DOM_ERROR__TOP = 0x000000b9;
enum DISPID_DOM_ERROR2 = 0x000000ba;
enum DISPID_DOM_ERROR2_ALLERRORS = 0x000000bb;
enum DISPID_DOM_ERROR2_ERRORPARAMETERS = 0x000000bc;
enum DISPID_DOM_ERROR2_ERRORPARAMETERSCOUNT = 0x000000bd;
enum DISPID_DOM_ERROR2_ERRORXPATH = 0x000000be;
enum DISPID_DOM_ERROR2__TOP = 0x000000bf;
enum DISPID_DOM_ERRORCOLLECTION = 0x000000c0;
enum DISPID_DOM_ERRORCOLLECTION_LENGTH = 0x000000c1;
enum DISPID_DOM_ERRORCOLLECTION_NEXT = 0x000000c2;
enum DISPID_DOM_ERRORCOLLECTION_RESET = 0x000000c3;
enum DISPID_DOM_ERRORCOLLECTION__TOP = 0x000000c4;
enum DISPID_XTLRUNTIME = 0x000000ba;
enum DISPID_XTLRUNTIME_UNIQUEID = 0x000000bb;
enum DISPID_XTLRUNTIME_DEPTH = 0x000000bc;
enum DISPID_XTLRUNTIME_CHILDNUMBER = 0x000000bd;
enum DISPID_XTLRUNTIME_ANCESTORCHILDNUMBER = 0x000000be;
enum DISPID_XTLRUNTIME_ABSOLUTECHILDNUMBER = 0x000000bf;
enum DISPID_XTLRUNTIME_FORMATINDEX = 0x000000c0;
enum DISPID_XTLRUNTIME_FORMATNUMBER = 0x000000c1;
enum DISPID_XTLRUNTIME_FORMATDATE = 0x000000c2;
enum DISPID_XTLRUNTIME_FORMATTIME = 0x000000c3;
enum DISPID_XTLRUNTIME__TOP = 0x000000c4;
enum DISPID_XMLDOMEVENT = 0x000000c5;
enum DISPID_XMLDOMEVENT_ONREADYSTATECHANGE = 0xfffffffffffffd9f;
enum DISPID_XMLDOMEVENT_ONDATAAVAILABLE = 0x000000c6;
enum DISPID_XMLDOMEVENT__TOP = 0x000000c7;
enum DISPID_XMLDOM_DOCUMENT2 = 0x000000c8;
enum DISPID_XMLDOM_DOCUMENT2_NAMESPACES = 0x000000c9;
enum DISPID_XMLDOM_DOCUMENT2_SCHEMAS = 0x000000ca;
enum DISPID_XMLDOM_DOCUMENT2_VALIDATE = 0x000000cb;
enum DISPID_XMLDOM_DOCUMENT2_SETPROPERTY = 0x000000cc;
enum DISPID_XMLDOM_DOCUMENT2_GETPROPERTY = 0x000000cd;
enum DISPID_XMLDOM_DOCUMENT2__TOP = 0x000000ce;
enum DISPID_XMLDOM_DOCUMENT3 = 0x000000cf;
enum DISPID_XMLDOM_DOCUMENT3_VALIDATENODE = 0x000000d0;
enum DISPID_XMLDOM_DOCUMENT3_IMPORTNODE = 0x000000d1;
enum DISPID_XMLDOM_DOCUMENT3__TOP = 0x000000d2;
enum DISPID_XMLDOM_SCHEMACOLLECTION = 0x00000002;
enum DISPID_XMLDOM_SCHEMACOLLECTION_ADD = 0x00000003;
enum DISPID_XMLDOM_SCHEMACOLLECTION_GET = 0x00000004;
enum DISPID_XMLDOM_SCHEMACOLLECTION_REMOVE = 0x00000005;
enum DISPID_XMLDOM_SCHEMACOLLECTION_LENGTH = 0x00000006;
enum DISPID_XMLDOM_SCHEMACOLLECTION_NAMESPACEURI = 0x00000007;
enum DISPID_XMLDOM_SCHEMACOLLECTION_ADDCOLLECTION = 0x00000008;
enum DISPID_XMLDOM_SCHEMACOLLECTION__TOP = 0x00000009;
enum DISPID_XMLDOM_SELECTION = 0x00000050;
enum DISPID_XMLDOM_SELECTION_EXPR = 0x00000051;
enum DISPID_XMLDOM_SELECTION_CONTEXT = 0x00000052;
enum DISPID_XMLDOM_SELECTION_PEEKNODE = 0x00000053;
enum DISPID_XMLDOM_SELECTION_MATCHES = 0x00000054;
enum DISPID_XMLDOM_SELECTION_REMOVENEXT = 0x00000055;
enum DISPID_XMLDOM_SELECTION_REMOVEALL = 0x00000056;
enum DISPID_XMLDOM_SELECTION_CLONE = 0x00000057;
enum DISPID_XMLDOM_SELECTION_GETPROPERTY = 0x00000058;
enum DISPID_XMLDOM_SELECTION_SETPROPERTY = 0x00000059;
enum DISPID_XMLDOM_SELECTION__TOP = 0x0000005a;
enum DISPID_XMLDOM_TEMPLATE = 0x00000001;
enum DISPID_XMLDOM_TEMPLATE_STYLESHEET = 0x00000002;
enum DISPID_XMLDOM_TEMPLATE_CREATEPROCESSOR = 0x00000003;
enum DISPID_XMLDOM_TEMPLATE__TOP = 0x00000004;
enum DISPID_XMLDOM_PROCESSOR = 0x00000001;
enum DISPID_XMLDOM_PROCESSOR_INPUT = 0x00000002;
enum DISPID_XMLDOM_PROCESSOR_XSLTEMPLATE = 0x00000003;
enum DISPID_XMLDOM_PROCESSOR_SETSTARTMODE = 0x00000004;
enum DISPID_XMLDOM_PROCESSOR_STARTMODE = 0x00000005;
enum DISPID_XMLDOM_PROCESSOR_STARTMODEURI = 0x00000006;
enum DISPID_XMLDOM_PROCESSOR_OUTPUT = 0x00000007;
enum DISPID_XMLDOM_PROCESSOR_TRANSFORM = 0x00000008;
enum DISPID_XMLDOM_PROCESSOR_RESET = 0x00000009;
enum DISPID_XMLDOM_PROCESSOR_READYSTATE = 0x0000000a;
enum DISPID_XMLDOM_PROCESSOR_ADDPARAMETER = 0x0000000b;
enum DISPID_XMLDOM_PROCESSOR_ADDOBJECT = 0x0000000c;
enum DISPID_XMLDOM_PROCESSOR_STYLESHEET = 0x0000000d;
enum DISPID_XMLDOM_PROCESSOR__TOP = 0x0000000e;
enum DISPID_XMLDSO = 0x00010000;
enum DISPID_XMLDSO_DOCUMENT = 0x00010001;
enum DISPID_XMLDSO_JAVADSOCOMPATIBLE = 0x00010002;
enum DISPID_SAX_XMLREADER__MIN = 0x00000501;
enum DISPID_SAX_XMLREADER__MAX = 0x00010000;
enum DISPID_SAX_XMLREADER__BASE = 0x00000501;
enum DISPID_SAX_XMLREADER = 0x00000501;
enum DISPID_SAX_XMLREADER_GETFEATURE = 0x00000502;
enum DISPID_SAX_XMLREADER_PUTFEATURE = 0x00000503;
enum DISPID_SAX_XMLREADER_GETPROPERTY = 0x00000504;
enum DISPID_SAX_XMLREADER_PUTPROPERTY = 0x00000505;
enum DISPID_SAX_XMLREADER_ENTITYRESOLVER = 0x00000506;
enum DISPID_SAX_XMLREADER_CONTENTHANDLER = 0x00000507;
enum DISPID_SAX_XMLREADER_DTDHANDLER = 0x00000508;
enum DISPID_SAX_XMLREADER_ERRORHANDLER = 0x00000509;
enum DISPID_SAX_XMLREADER_BASEURL = 0x0000050a;
enum DISPID_SAX_XMLREADER_SECUREBASEURL = 0x0000050b;
enum DISPID_SAX_XMLREADER_PARSE = 0x0000050c;
enum DISPID_SAX_XMLREADER_PARSEURL = 0x0000050d;
enum DISPID_SAX_XMLREADER_PARENT = 0x0000050e;
enum DISPID_SAX_XMLREADER__TOP = 0x0000050f;
enum DISPID_SAX_XMLFILTER__BASE = 0x00000510;
enum DISPID_SAX_XMLFILTER = 0x00000510;
enum DISPID_SAX_XMLFILTER_GETFEATURE = 0x00000511;
enum DISPID_SAX_XMLFILTER_PUTFEATURE = 0x00000512;
enum DISPID_SAX_XMLFILTER_GETPROPERTY = 0x00000513;
enum DISPID_SAX_XMLFILTER_PUTPROPERTY = 0x00000514;
enum DISPID_SAX_XMLFILTER_ENTITYRESOLVER = 0x00000515;
enum DISPID_SAX_XMLFILTER_CONTENTHANDLER = 0x00000516;
enum DISPID_SAX_XMLFILTER_DTDHANDLER = 0x00000517;
enum DISPID_SAX_XMLFILTER_ERRORHANDLER = 0x00000518;
enum DISPID_SAX_XMLFILTER_BASEURL = 0x00000519;
enum DISPID_SAX_XMLFILTER_SECUREBASEURL = 0x0000051a;
enum DISPID_SAX_XMLFILTER_PARSE = 0x0000051b;
enum DISPID_SAX_XMLFILTER_PARSEURL = 0x0000051c;
enum DISPID_SAX_XMLFILTER_PARENT = 0x0000051d;
enum DISPID_SAX_XMLFILTER__TOP = 0x0000051f;
enum DISPID_SAX_LOCATOR__BASE = 0x00000520;
enum DISPID_SAX_LOCATOR = 0x00000520;
enum DISPID_SAX_LOCATOR_COLUMNNUMBER = 0x00000521;
enum DISPID_SAX_LOCATOR_LINENUMBER = 0x00000522;
enum DISPID_SAX_LOCATOR_PUBLICID = 0x00000523;
enum DISPID_SAX_LOCATOR_SYSTEMID = 0x00000524;
enum DISPID_SAX_LOCATOR__TOP = 0x00000525;
enum DISPID_SAX_ENTITYRESOLVER__BASE = 0x00000526;
enum DISPID_SAX_ENTITYRESOLVER = 0x00000526;
enum DISPID_SAX_ENTITYRESOLVER_RESOLVEENTITY = 0x00000527;
enum DISPID_SAX_ENTITYRESOLVER__TOP = 0x00000528;
enum DISPID_SAX_CONTENTHANDLER__BASE = 0x00000529;
enum DISPID_SAX_CONTENTHANDLER = 0x00000529;
enum DISPID_SAX_CONTENTHANDLER_DOCUMENTLOCATOR = 0x0000052a;
enum DISPID_SAX_CONTENTHANDLER_STARTDOCUMENT = 0x0000052b;
enum DISPID_SAX_CONTENTHANDLER_ENDDOCUMENT = 0x0000052c;
enum DISPID_SAX_CONTENTHANDLER_STARTPREFIXMAPPING = 0x0000052d;
enum DISPID_SAX_CONTENTHANDLER_ENDPREFIXMAPPING = 0x0000052e;
enum DISPID_SAX_CONTENTHANDLER_STARTELEMENT = 0x0000052f;
enum DISPID_SAX_CONTENTHANDLER_ENDELEMENT = 0x00000530;
enum DISPID_SAX_CONTENTHANDLER_CHARACTERS = 0x00000531;
enum DISPID_SAX_CONTENTHANDLER_IGNORABLEWHITESPACE = 0x00000532;
enum DISPID_SAX_CONTENTHANDLER_PROCESSINGINSTRUCTION = 0x00000533;
enum DISPID_SAX_CONTENTHANDLER_SKIPPEDENTITY = 0x00000534;
enum DISPID_SAX_CONTENTHANDLER__TOP = 0x00000535;
enum DISPID_SAX_DTDHANDLER__BASE = 0x00000536;
enum DISPID_SAX_DTDHANDLER = 0x00000536;
enum DISPID_SAX_DTDHANDLER_NOTATIONDECL = 0x00000537;
enum DISPID_SAX_DTDHANDLER_UNPARSEDENTITYDECL = 0x00000538;
enum DISPID_SAX_DTDHANDLER__TOP = 0x00000539;
enum DISPID_SAX_ERRORHANDLER__BASE = 0x0000053a;
enum DISPID_SAX_ERRORHANDLER = 0x0000053a;
enum DISPID_SAX_ERRORHANDLER_ERROR = 0x0000053b;
enum DISPID_SAX_ERRORHANDLER_FATALERROR = 0x0000053c;
enum DISPID_SAX_ERRORHANDLER_IGNORABLEWARNING = 0x0000053d;
enum DISPID_SAX_ERRORHANDLER__TOP = 0x0000053e;
enum DISPID_SAX_ATTRIBUTES__BASE = 0x0000053f;
enum DISPID_SAX_ATTRIBUTES = 0x0000053f;
enum DISPID_SAX_ATTRIBUTES_LENGTH = 0x00000540;
enum DISPID_SAX_ATTRIBUTES_GETURI = 0x00000541;
enum DISPID_SAX_ATTRIBUTES_GETLOCALNAME = 0x00000542;
enum DISPID_SAX_ATTRIBUTES_GETQNAME = 0x00000543;
enum DISPID_SAX_ATTRIBUTES_GETINDEXFROMNAME = 0x00000544;
enum DISPID_SAX_ATTRIBUTES_GETINDEXFROMQNAME = 0x00000545;
enum DISPID_SAX_ATTRIBUTES_GETTYPE = 0x00000546;
enum DISPID_SAX_ATTRIBUTES_GETTYPEFROMNAME = 0x00000547;
enum DISPID_SAX_ATTRIBUTES_GETTYPEFROMQNAME = 0x00000548;
enum DISPID_SAX_ATTRIBUTES_GETVALUE = 0x00000549;
enum DISPID_SAX_ATTRIBUTES_GETVALUEFROMNAME = 0x0000054a;
enum DISPID_SAX_ATTRIBUTES_GETVALUEFROMQNAME = 0x0000054b;
enum DISPID_SAX_ATTRIBUTES__TOP = 0x0000054c;
enum DISPID_SAX_LEXICALHANDLER__BASE = 0x0000054d;
enum DISPID_SAX_LEXICALHANDLER = 0x0000054d;
enum DISPID_SAX_LEXICALHANDLER_STARTDTD = 0x0000054e;
enum DISPID_SAX_LEXICALHANDLER_ENDDTD = 0x0000054f;
enum DISPID_SAX_LEXICALHANDLER_STARTENTITY = 0x00000550;
enum DISPID_SAX_LEXICALHANDLER_ENDENTITY = 0x00000551;
enum DISPID_SAX_LEXICALHANDLER_STARTCDATA = 0x00000552;
enum DISPID_SAX_LEXICALHANDLER_ENDCDATA = 0x00000553;
enum DISPID_SAX_LEXICALHANDLER_COMMENT = 0x00000554;
enum DISPID_SAX_LEXICALHANDLER__TOP = 0x00000555;
enum DISPID_SAX_DECLHANDLER__BASE = 0x00000556;
enum DISPID_SAX_DECLHANDLER = 0x00000556;
enum DISPID_SAX_DECLHANDLER_ELEMENTDECL = 0x00000557;
enum DISPID_SAX_DECLHANDLER_ATTRIBUTEDECL = 0x00000558;
enum DISPID_SAX_DECLHANDLER_INTERNALENTITYDECL = 0x00000559;
enum DISPID_SAX_DECLHANDLER_EXTERNALENTITYDECL = 0x0000055a;
enum DISPID_SAX_DECLHANDLER__TOP = 0x0000055b;
enum DISPID_MX_ATTRIBUTES__BASE = 0x0000055c;
enum DISPID_MX_ATTRIBUTES = 0x0000055c;
enum DISPID_MX_ATTRIBUTES_ADDATTRIBUTE = 0x0000055d;
enum DISPID_MX_ATTRIBUTES_CLEAR = 0x0000055e;
enum DISPID_MX_ATTRIBUTES_REMOVEATTRIBUTE = 0x0000055f;
enum DISPID_MX_ATTRIBUTES_SETATTRIBUTE = 0x00000560;
enum DISPID_MX_ATTRIBUTES_SETATTRIBUTES = 0x00000561;
enum DISPID_MX_ATTRIBUTES_SETLOCALNAME = 0x00000562;
enum DISPID_MX_ATTRIBUTES_SETQNAME = 0x00000563;
enum DISPID_MX_ATTRIBUTES_SETTYPE = 0x00000564;
enum DISPID_MX_ATTRIBUTES_SETURI = 0x00000565;
enum DISPID_MX_ATTRIBUTES_SETVALUE = 0x00000566;
enum DISPID_MX_ATTRIBUTES_ADDATTRIBUTEFROMINDEX = 0x00000567;
enum DISPID_MX_ATTRIBUTES__TOP = 0x00000567;
enum DISPID_MX_WRITER__BASE = 0x00000568;
enum DISPID_MX_WRITER = 0x00000568;
enum DISPID_MX_WRITER_OUTPUT = 0x00000569;
enum DISPID_MX_WRITER_DESTINATION = 0x0000056a;
enum DISPID_MX_WRITER_ENCODING = 0x0000056b;
enum DISPID_MX_WRITER_BYTEORDERMARK = 0x0000056c;
enum DISPID_MX_WRITER_INDENT = 0x0000056d;
enum DISPID_MX_WRITER_STANDALONE = 0x0000056e;
enum DISPID_MX_WRITER_OMITXMLDECLARATION = 0x0000056f;
enum DISPID_MX_WRITER_VERSION = 0x00000570;
enum DISPID_MX_WRITER_DISABLEOUTPUTESCAPING = 0x00000571;
enum DISPID_MX_WRITER_FLUSH = 0x00000572;
enum DISPID_MX_WRITER_RESET = 0x00000573;
enum DISPID_MX_WRITER__TOP = 0x00000574;
enum DISPID_MX_READER_CONTROL__BASE = 0x00000575;
enum DISPID_MX_READER_CONTROL = 0x00000575;
enum DISPID_MX_READER_CONTROL_ABORT = 0x00000576;
enum DISPID_MX_READER_CONTROL_RESUME = 0x00000577;
enum DISPID_MX_READER_CONTROL_SUSPEND = 0x00000578;
enum DISPID_MX_READER_CONTROL__TOP = 0x00000579;
enum DISPID_MX_SCHEMADECLHANDLER__BASE = 0x0000057a;
enum DISPID_MX_SCHEMADECLHANDLER = 0x0000057a;
enum DISPID_MX_SCHEMADECLHANDLER_SCHEMAELEMENTDECL = 0x0000057b;
enum DISPID_MX_SCHEMADECLHANDLER__TOP = 0x0000057c;
enum DISPID_MX_NSMGR__BASE = 0x0000057d;
enum DISPID_MX_NSMGR = 0x0000057d;
enum DISPID_MX_NSMGR_ALLOWOVERRIDE = 0x0000057e;
enum DISPID_MX_NSMGR_RESET = 0x0000057f;
enum DISPID_MX_NSMGR_PUSHCONTEXT = 0x00000580;
enum DISPID_MX_NSMGR_PUSHNODECONTEXT = 0x00000581;
enum DISPID_MX_NSMGR_POPCONTEXT = 0x00000582;
enum DISPID_MX_NSMGR_DECLAREPREFIX = 0x00000583;
enum DISPID_MX_NSMGR_GETDECLAREDPREFIXES = 0x00000584;
enum DISPID_MX_NSMGR_GETPREFIXES = 0x00000585;
enum DISPID_MX_NSMGR_GETURI = 0x00000586;
enum DISPID_MX_NSMGR_GETURIFROMNODE = 0x00000587;
enum DISPID_MX_NSMGR_LENGTH = 0x00000588;
enum DISPID_MX_NSMGR__TOP = 0x00000589;
enum DISPID_MXXML_FILTER__BASE = 0x0000058a;
enum DISPID_MXXML_FILTER = 0x0000058a;
enum DISPID_MXXML_FILTER_CONTENTHANDLER = 0x0000058b;
enum DISPID_MXXML_FILTER_DTDHANDLER = 0x0000058c;
enum DISPID_MXXML_FILTER_ENTITYRESOLVER = 0x0000058d;
enum DISPID_MXXML_FILTER_ERRORHANDLER = 0x0000058e;
enum DISPID_MXXML_FILTER_GETFEATURE = 0x0000058f;
enum DISPID_MXXML_FILTER_GETPROPERTY = 0x00000590;
enum DISPID_MXXML_FILTER_PUTFEATURE = 0x00000591;
enum DISPID_MXXML_FILTER_PUTPROPERTY = 0x00000592;
enum DISPID_MXXML_FILTER__TOP = 0x00000593;
enum DISPID_SOM = 0x0000058a;
enum DISPID_SOM_VALIDATE = 0x0000058b;
enum DISPID_SOM_VALIDATEONLOAD = 0x0000058c;
enum DISPID_SOM_GETSCHEMA = 0x0000058d;
enum DISPID_SOM_GETDECLARATION = 0x0000058e;
enum DISPID_SOM_ITEMBYNAME = 0x0000058f;
enum DISPID_SOM_ITEMBYQNAME = 0x00000590;
enum DISPID_SOM_ANYATTRIBUTE = 0x00000591;
enum DISPID_SOM_ATTRIBUTEGROUPS = 0x00000592;
enum DISPID_SOM_ATTRIBUTES = 0x00000593;
enum DISPID_SOM_BASETYPES = 0x00000594;
enum DISPID_SOM_CONTENTMODEL = 0x00000595;
enum DISPID_SOM_CONTENTTYPE = 0x00000596;
enum DISPID_SOM_DEFAULTVALUE = 0x00000597;
enum DISPID_SOM_DERIVEDBY = 0x00000598;
enum DISPID_SOM_DISALLOWED = 0x00000599;
enum DISPID_SOM_ELEMENTS = 0x0000059a;
enum DISPID_SOM_ENUMERATION = 0x0000059b;
enum DISPID_SOM_FIELDS = 0x0000059c;
enum DISPID_SOM_FINAL = 0x0000059d;
enum DISPID_SOM_FIXEDVALUE = 0x0000059e;
enum DISPID_SOM_FRACTIONDIGITS = 0x0000059f;
enum DISPID_SOM_ID = 0x000005a0;
enum DISPID_SOM_IDCONSTRAINTS = 0x000005a1;
enum DISPID_SOM_ISABSTRACT = 0x000005a2;
enum DISPID_SOM_ISNILLABLE = 0x000005a3;
enum DISPID_SOM_ISREFERENCE = 0x000005a4;
enum DISPID_SOM_ISVALID = 0x000005a5;
enum DISPID_SOM_ITEMTYPE = 0x000005a6;
enum DISPID_SOM_LENGTH = 0x000005a7;
enum DISPID_SOM_MAXEXCLUSIVE = 0x000005a8;
enum DISPID_SOM_MAXINCLUSIVE = 0x000005a9;
enum DISPID_SOM_MAXLENGTH = 0x000005aa;
enum DISPID_SOM_MAXOCCURS = 0x000005ab;
enum DISPID_SOM_MINEXCLUSIVE = 0x000005ac;
enum DISPID_SOM_MININCLUSIVE = 0x000005ad;
enum DISPID_SOM_MINLENGTH = 0x000005ae;
enum DISPID_SOM_MINOCCURS = 0x000005af;
enum DISPID_SOM_MODELGROUPS = 0x000005b0;
enum DISPID_SOM_NAME = 0x000005b1;
enum DISPID_SOM_NAMESPACES = 0x000005b2;
enum DISPID_SOM_NAMESPACEURI = 0x000005b3;
enum DISPID_SOM_NOTATIONS = 0x000005b4;
enum DISPID_SOM_PARTICLES = 0x000005b5;
enum DISPID_SOM_PATTERNS = 0x000005b6;
enum DISPID_SOM_PROCESSCONTENTS = 0x000005b7;
enum DISPID_SOM_PROHIBITED = 0x000005b8;
enum DISPID_SOM_PUBLICIDENTIFIER = 0x000005b9;
enum DISPID_SOM_REFERENCEDKEY = 0x000005ba;
enum DISPID_SOM_SCHEMA = 0x000005bb;
enum DISPID_SOM_SCHEMALOCATIONS = 0x000005bc;
enum DISPID_SOM_SCOPE = 0x000005bd;
enum DISPID_SOM_SELECTOR = 0x000005be;
enum DISPID_SOM_SUBSTITUTIONGROUP = 0x000005bf;
enum DISPID_SOM_EXCLUSIONS = 0x000005c0;
enum DISPID_SOM_SYSTEMIDENTIFIER = 0x000005c1;
enum DISPID_SOM_TARGETNAMESPACE = 0x000005c2;
enum DISPID_SOM_TOTALDIGITS = 0x000005c3;
enum DISPID_SOM_TYPE = 0x000005c4;
enum DISPID_SOM_TYPES = 0x000005c5;
enum DISPID_SOM_UNHANDLEDATTRS = 0x000005c6;
enum DISPID_SOM_USE = 0x000005c7;
enum DISPID_SOM_VARIETY = 0x000005c8;
enum DISPID_SOM_VERSION = 0x000005c9;
enum DISPID_SOM_WHITESPACE = 0x000005ca;
enum DISPID_SOM_WRITEANNOTATION = 0x000005cb;
enum DISPID_SOM_TOP = 0x000005cc;
enum DISPID_XMLDSIG = 0x00000001;
enum DISPID_XMLDSIG_CREATEKEYFROMCSP = 0x00000001;
enum DISPID_XMLDSIG_CREATEKEYFROMHMACSECRET = 0x00000002;
enum DISPID_XMLDSIG_CREATEKEYFROMNODE = 0x00000003;
enum DISPID_XMLDSIG_CREATESAXPROXY = 0x00000004;
enum DISPID_XMLDSIG_GETVERIFYINGCERTIFICATE = 0x00000005;
enum DISPID_XMLDSIG_SETREFERENCEDATA = 0x00000006;
enum DISPID_XMLDSIG_SIGN = 0x00000007;
enum DISPID_XMLDSIG_SIGNATURE = 0x00000008;
enum DISPID_XMLDSIG_STORE = 0x00000009;
enum DISPID_XMLDSIG_VERIFY = 0x0000000a;
enum CLSID_DOMDocument = GUID(0x2933bf90, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
struct DOMDocument
{
}
enum CLSID_DOMFreeThreadedDocument = GUID(0x2933bf91, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
struct DOMFreeThreadedDocument
{
}
enum CLSID_XMLHTTPRequest = GUID(0xed8c108e, 0x4349, 0x11d2, [0x91, 0xa4, 0x0, 0xc0, 0x4f, 0x79, 0x69, 0xe8]);
struct XMLHTTPRequest
{
}
enum CLSID_XMLDSOControl = GUID(0x550dda30, 0x541, 0x11d2, [0x9c, 0xa9, 0x0, 0x60, 0xb0, 0xec, 0x3d, 0x39]);
struct XMLDSOControl
{
}
enum CLSID_XMLDocument = GUID(0xcfc399af, 0xd876, 0x11d0, [0x9c, 0x10, 0x0, 0xc0, 0x4f, 0xc9, 0x9c, 0x8e]);
struct XMLDocument
{
}
struct XML_ERROR
{
    uint _nLine;
    BSTR _pchBuf;
    uint _cchBuf;
    uint _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    uint _reserved1;
    uint _reserved2;
}
alias DOMNodeType = int;
enum : int
{
    NODE_INVALID                = 0x00000000,
    NODE_ELEMENT                = 0x00000001,
    NODE_ATTRIBUTE              = 0x00000002,
    NODE_TEXT                   = 0x00000003,
    NODE_CDATA_SECTION          = 0x00000004,
    NODE_ENTITY_REFERENCE       = 0x00000005,
    NODE_ENTITY                 = 0x00000006,
    NODE_PROCESSING_INSTRUCTION = 0x00000007,
    NODE_COMMENT                = 0x00000008,
    NODE_DOCUMENT               = 0x00000009,
    NODE_DOCUMENT_TYPE          = 0x0000000a,
    NODE_DOCUMENT_FRAGMENT      = 0x0000000b,
    NODE_NOTATION               = 0x0000000c,
}

alias XMLELEM_TYPE = int;
enum : int
{
    XMLELEMTYPE_ELEMENT  = 0x00000000,
    XMLELEMTYPE_TEXT     = 0x00000001,
    XMLELEMTYPE_COMMENT  = 0x00000002,
    XMLELEMTYPE_DOCUMENT = 0x00000003,
    XMLELEMTYPE_DTD      = 0x00000004,
    XMLELEMTYPE_PI       = 0x00000005,
    XMLELEMTYPE_OTHER    = 0x00000006,
}

enum IID_IXMLDOMImplementation = GUID(0x2933bf8f, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXMLDOMImplementation : IDispatch
{
    HRESULT hasFeature(BSTR, BSTR, short*);
}
enum IID_IXMLDOMNode = GUID(0x2933bf80, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXMLDOMNode : IDispatch
{
    HRESULT get_nodeName(BSTR*);
    HRESULT get_nodeValue(VARIANT*);
    HRESULT put_nodeValue(VARIANT);
    HRESULT get_nodeType(DOMNodeType*);
    HRESULT get_parentNode(IXMLDOMNode*);
    HRESULT get_childNodes(IXMLDOMNodeList*);
    HRESULT get_firstChild(IXMLDOMNode*);
    HRESULT get_lastChild(IXMLDOMNode*);
    HRESULT get_previousSibling(IXMLDOMNode*);
    HRESULT get_nextSibling(IXMLDOMNode*);
    HRESULT get_attributes(IXMLDOMNamedNodeMap*);
    HRESULT insertBefore(IXMLDOMNode, VARIANT, IXMLDOMNode*);
    HRESULT replaceChild(IXMLDOMNode, IXMLDOMNode, IXMLDOMNode*);
    HRESULT removeChild(IXMLDOMNode, IXMLDOMNode*);
    HRESULT appendChild(IXMLDOMNode, IXMLDOMNode*);
    HRESULT hasChildNodes(short*);
    HRESULT get_ownerDocument(IXMLDOMDocument*);
    HRESULT cloneNode(short, IXMLDOMNode*);
    HRESULT get_nodeTypeString(BSTR*);
    HRESULT get_text(BSTR*);
    HRESULT put_text(BSTR);
    HRESULT get_specified(short*);
    HRESULT get_definition(IXMLDOMNode*);
    HRESULT get_nodeTypedValue(VARIANT*);
    HRESULT put_nodeTypedValue(VARIANT);
    HRESULT get_dataType(VARIANT*);
    HRESULT put_dataType(BSTR);
    HRESULT get_xml(BSTR*);
    HRESULT transformNode(IXMLDOMNode, BSTR*);
    HRESULT selectNodes(BSTR, IXMLDOMNodeList*);
    HRESULT selectSingleNode(BSTR, IXMLDOMNode*);
    HRESULT get_parsed(short*);
    HRESULT get_namespaceURI(BSTR*);
    HRESULT get_prefix(BSTR*);
    HRESULT get_baseName(BSTR*);
    HRESULT transformNodeToObject(IXMLDOMNode, VARIANT);
}
enum IID_IXMLDOMDocumentFragment = GUID(0x3efaa413, 0x272f, 0x11d2, [0x83, 0x6f, 0x0, 0x0, 0xf8, 0x7a, 0x77, 0x82]);
interface IXMLDOMDocumentFragment : IXMLDOMNode
{
}
enum IID_IXMLDOMDocument = GUID(0x2933bf81, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXMLDOMDocument : IXMLDOMNode
{
    HRESULT get_doctype(IXMLDOMDocumentType*);
    HRESULT get_implementation(IXMLDOMImplementation*);
    HRESULT get_documentElement(IXMLDOMElement*);
    HRESULT putref_documentElement(IXMLDOMElement);
    HRESULT createElement(BSTR, IXMLDOMElement*);
    HRESULT createDocumentFragment(IXMLDOMDocumentFragment*);
    HRESULT createTextNode(BSTR, IXMLDOMText*);
    HRESULT createComment(BSTR, IXMLDOMComment*);
    HRESULT createCDATASection(BSTR, IXMLDOMCDATASection*);
    HRESULT createProcessingInstruction(BSTR, BSTR, IXMLDOMProcessingInstruction*);
    HRESULT createAttribute(BSTR, IXMLDOMAttribute*);
    HRESULT createEntityReference(BSTR, IXMLDOMEntityReference*);
    HRESULT getElementsByTagName(BSTR, IXMLDOMNodeList*);
    HRESULT createNode(VARIANT, BSTR, BSTR, IXMLDOMNode*);
    HRESULT nodeFromID(BSTR, IXMLDOMNode*);
    HRESULT load(VARIANT, short*);
    HRESULT get_readyState(int*);
    HRESULT get_parseError(IXMLDOMParseError*);
    HRESULT get_url(BSTR*);
    HRESULT get_async(short*);
    HRESULT put_async(short);
    HRESULT abort();
    HRESULT loadXML(BSTR, short*);
    HRESULT save(VARIANT);
    HRESULT get_validateOnParse(short*);
    HRESULT put_validateOnParse(short);
    HRESULT get_resolveExternals(short*);
    HRESULT put_resolveExternals(short);
    HRESULT get_preserveWhiteSpace(short*);
    HRESULT put_preserveWhiteSpace(short);
    HRESULT put_onreadystatechange(VARIANT);
    HRESULT put_ondataavailable(VARIANT);
    HRESULT put_ontransformnode(VARIANT);
}
enum IID_IXMLDOMNodeList = GUID(0x2933bf82, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXMLDOMNodeList : IDispatch
{
    HRESULT get_item(int, IXMLDOMNode*);
    HRESULT get_length(int*);
    HRESULT nextNode(IXMLDOMNode*);
    HRESULT reset();
    HRESULT get__newEnum(IUnknown*);
}
enum IID_IXMLDOMNamedNodeMap = GUID(0x2933bf83, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXMLDOMNamedNodeMap : IDispatch
{
    HRESULT getNamedItem(BSTR, IXMLDOMNode*);
    HRESULT setNamedItem(IXMLDOMNode, IXMLDOMNode*);
    HRESULT removeNamedItem(BSTR, IXMLDOMNode*);
    HRESULT get_item(int, IXMLDOMNode*);
    HRESULT get_length(int*);
    HRESULT getQualifiedItem(BSTR, BSTR, IXMLDOMNode*);
    HRESULT removeQualifiedItem(BSTR, BSTR, IXMLDOMNode*);
    HRESULT nextNode(IXMLDOMNode*);
    HRESULT reset();
    HRESULT get__newEnum(IUnknown*);
}
enum IID_IXMLDOMCharacterData = GUID(0x2933bf84, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXMLDOMCharacterData : IXMLDOMNode
{
    HRESULT get_data(BSTR*);
    HRESULT put_data(BSTR);
    HRESULT get_length(int*);
    HRESULT substringData(int, int, BSTR*);
    HRESULT appendData(BSTR);
    HRESULT insertData(int, BSTR);
    HRESULT deleteData(int, int);
    HRESULT replaceData(int, int, BSTR);
}
enum IID_IXMLDOMAttribute = GUID(0x2933bf85, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXMLDOMAttribute : IXMLDOMNode
{
    HRESULT get_name(BSTR*);
    HRESULT get_value(VARIANT*);
    HRESULT put_value(VARIANT);
}
enum IID_IXMLDOMElement = GUID(0x2933bf86, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXMLDOMElement : IXMLDOMNode
{
    HRESULT get_tagName(BSTR*);
    HRESULT getAttribute(BSTR, VARIANT*);
    HRESULT setAttribute(BSTR, VARIANT);
    HRESULT removeAttribute(BSTR);
    HRESULT getAttributeNode(BSTR, IXMLDOMAttribute*);
    HRESULT setAttributeNode(IXMLDOMAttribute, IXMLDOMAttribute*);
    HRESULT removeAttributeNode(IXMLDOMAttribute, IXMLDOMAttribute*);
    HRESULT getElementsByTagName(BSTR, IXMLDOMNodeList*);
    HRESULT normalize();
}
enum IID_IXMLDOMText = GUID(0x2933bf87, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXMLDOMText : IXMLDOMCharacterData
{
    HRESULT splitText(int, IXMLDOMText*);
}
enum IID_IXMLDOMComment = GUID(0x2933bf88, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXMLDOMComment : IXMLDOMCharacterData
{
}
enum IID_IXMLDOMProcessingInstruction = GUID(0x2933bf89, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXMLDOMProcessingInstruction : IXMLDOMNode
{
    HRESULT get_target(BSTR*);
    HRESULT get_data(BSTR*);
    HRESULT put_data(BSTR);
}
enum IID_IXMLDOMCDATASection = GUID(0x2933bf8a, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXMLDOMCDATASection : IXMLDOMText
{
}
enum IID_IXMLDOMDocumentType = GUID(0x2933bf8b, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXMLDOMDocumentType : IXMLDOMNode
{
    HRESULT get_name(BSTR*);
    HRESULT get_entities(IXMLDOMNamedNodeMap*);
    HRESULT get_notations(IXMLDOMNamedNodeMap*);
}
enum IID_IXMLDOMNotation = GUID(0x2933bf8c, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXMLDOMNotation : IXMLDOMNode
{
    HRESULT get_publicId(VARIANT*);
    HRESULT get_systemId(VARIANT*);
}
enum IID_IXMLDOMEntity = GUID(0x2933bf8d, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXMLDOMEntity : IXMLDOMNode
{
    HRESULT get_publicId(VARIANT*);
    HRESULT get_systemId(VARIANT*);
    HRESULT get_notationName(BSTR*);
}
enum IID_IXMLDOMEntityReference = GUID(0x2933bf8e, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXMLDOMEntityReference : IXMLDOMNode
{
}
enum IID_IXMLDOMParseError = GUID(0x3efaa426, 0x272f, 0x11d2, [0x83, 0x6f, 0x0, 0x0, 0xf8, 0x7a, 0x77, 0x82]);
interface IXMLDOMParseError : IDispatch
{
    HRESULT get_errorCode(int*);
    HRESULT get_url(BSTR*);
    HRESULT get_reason(BSTR*);
    HRESULT get_srcText(BSTR*);
    HRESULT get_line(int*);
    HRESULT get_linepos(int*);
    HRESULT get_filepos(int*);
}
enum IID_IXTLRuntime = GUID(0x3efaa425, 0x272f, 0x11d2, [0x83, 0x6f, 0x0, 0x0, 0xf8, 0x7a, 0x77, 0x82]);
interface IXTLRuntime : IXMLDOMNode
{
    HRESULT uniqueID(IXMLDOMNode, int*);
    HRESULT depth(IXMLDOMNode, int*);
    HRESULT childNumber(IXMLDOMNode, int*);
    HRESULT ancestorChildNumber(BSTR, IXMLDOMNode, int*);
    HRESULT absoluteChildNumber(IXMLDOMNode, int*);
    HRESULT formatIndex(int, BSTR, BSTR*);
    HRESULT formatNumber(double, BSTR, BSTR*);
    HRESULT formatDate(VARIANT, BSTR, VARIANT, BSTR*);
    HRESULT formatTime(VARIANT, BSTR, VARIANT, BSTR*);
}
enum IID_XMLDOMDocumentEvents = GUID(0x3efaa427, 0x272f, 0x11d2, [0x83, 0x6f, 0x0, 0x0, 0xf8, 0x7a, 0x77, 0x82]);
interface XMLDOMDocumentEvents : IDispatch
{
}
enum IID_IXMLHttpRequest = GUID(0xed8c108d, 0x4349, 0x11d2, [0x91, 0xa4, 0x0, 0xc0, 0x4f, 0x79, 0x69, 0xe8]);
interface IXMLHttpRequest : IDispatch
{
    HRESULT open(BSTR, BSTR, VARIANT, VARIANT, VARIANT);
    HRESULT setRequestHeader(BSTR, BSTR);
    HRESULT getResponseHeader(BSTR, BSTR*);
    HRESULT getAllResponseHeaders(BSTR*);
    HRESULT send(VARIANT);
    HRESULT abort();
    HRESULT get_status(int*);
    HRESULT get_statusText(BSTR*);
    HRESULT get_responseXML(IDispatch*);
    HRESULT get_responseText(BSTR*);
    HRESULT get_responseBody(VARIANT*);
    HRESULT get_responseStream(VARIANT*);
    HRESULT get_readyState(int*);
    HRESULT put_onreadystatechange(IDispatch);
}
enum IID_IXMLDSOControl = GUID(0x310afa62, 0x575, 0x11d2, [0x9c, 0xa9, 0x0, 0x60, 0xb0, 0xec, 0x3d, 0x39]);
interface IXMLDSOControl : IDispatch
{
    HRESULT get_XMLDocument(IXMLDOMDocument*);
    HRESULT put_XMLDocument(IXMLDOMDocument);
    HRESULT get_JavaDSOCompatible(BOOL*);
    HRESULT put_JavaDSOCompatible(BOOL);
    HRESULT get_readyState(int*);
}
enum IID_IXMLElementCollection = GUID(0x65725580, 0x9b5d, 0x11d0, [0x9b, 0xfe, 0x0, 0xc0, 0x4f, 0xc9, 0x9c, 0x8e]);
interface IXMLElementCollection : IDispatch
{
    HRESULT put_length(int);
    HRESULT get_length(int*);
    HRESULT get__newEnum(IUnknown*);
    HRESULT item(VARIANT, VARIANT, IDispatch*);
}
enum IID_IXMLDocument = GUID(0xf52e2b61, 0x18a1, 0x11d1, [0xb1, 0x5, 0x0, 0x80, 0x5f, 0x49, 0x91, 0x6b]);
interface IXMLDocument : IDispatch
{
    HRESULT get_root(IXMLElement*);
    HRESULT get_fileSize(BSTR*);
    HRESULT get_fileModifiedDate(BSTR*);
    HRESULT get_fileUpdatedDate(BSTR*);
    HRESULT get_URL(BSTR*);
    HRESULT put_URL(BSTR);
    HRESULT get_mimeType(BSTR*);
    HRESULT get_readyState(int*);
    HRESULT get_charset(BSTR*);
    HRESULT put_charset(BSTR);
    HRESULT get_version(BSTR*);
    HRESULT get_doctype(BSTR*);
    HRESULT get_dtdURL(BSTR*);
    HRESULT createElement(VARIANT, VARIANT, IXMLElement*);
}
enum IID_IXMLDocument2 = GUID(0x2b8de2fe, 0x8d2d, 0x11d1, [0xb2, 0xfc, 0x0, 0xc0, 0x4f, 0xd9, 0x15, 0xa9]);
interface IXMLDocument2 : IDispatch
{
    HRESULT get_root(IXMLElement2*);
    HRESULT get_fileSize(BSTR*);
    HRESULT get_fileModifiedDate(BSTR*);
    HRESULT get_fileUpdatedDate(BSTR*);
    HRESULT get_URL(BSTR*);
    HRESULT put_URL(BSTR);
    HRESULT get_mimeType(BSTR*);
    HRESULT get_readyState(int*);
    HRESULT get_charset(BSTR*);
    HRESULT put_charset(BSTR);
    HRESULT get_version(BSTR*);
    HRESULT get_doctype(BSTR*);
    HRESULT get_dtdURL(BSTR*);
    HRESULT createElement(VARIANT, VARIANT, IXMLElement2*);
    HRESULT get_async(short*);
    HRESULT put_async(short);
}
enum IID_IXMLElement = GUID(0x3f7f31ac, 0xe15f, 0x11d0, [0x9c, 0x25, 0x0, 0xc0, 0x4f, 0xc9, 0x9c, 0x8e]);
interface IXMLElement : IDispatch
{
    HRESULT get_tagName(BSTR*);
    HRESULT put_tagName(BSTR);
    HRESULT get_parent(IXMLElement*);
    HRESULT setAttribute(BSTR, VARIANT);
    HRESULT getAttribute(BSTR, VARIANT*);
    HRESULT removeAttribute(BSTR);
    HRESULT get_children(IXMLElementCollection*);
    HRESULT get_type(int*);
    HRESULT get_text(BSTR*);
    HRESULT put_text(BSTR);
    HRESULT addChild(IXMLElement, int, int);
    HRESULT removeChild(IXMLElement);
}
enum IID_IXMLElement2 = GUID(0x2b8de2ff, 0x8d2d, 0x11d1, [0xb2, 0xfc, 0x0, 0xc0, 0x4f, 0xd9, 0x15, 0xa9]);
interface IXMLElement2 : IDispatch
{
    HRESULT get_tagName(BSTR*);
    HRESULT put_tagName(BSTR);
    HRESULT get_parent(IXMLElement2*);
    HRESULT setAttribute(BSTR, VARIANT);
    HRESULT getAttribute(BSTR, VARIANT*);
    HRESULT removeAttribute(BSTR);
    HRESULT get_children(IXMLElementCollection*);
    HRESULT get_type(int*);
    HRESULT get_text(BSTR*);
    HRESULT put_text(BSTR);
    HRESULT addChild(IXMLElement2, int, int);
    HRESULT removeChild(IXMLElement2);
    HRESULT get_attributes(IXMLElementCollection*);
}
enum IID_IXMLAttribute = GUID(0xd4d4a0fc, 0x3b73, 0x11d1, [0xb2, 0xb4, 0x0, 0xc0, 0x4f, 0xb9, 0x25, 0x96]);
interface IXMLAttribute : IDispatch
{
    HRESULT get_name(BSTR*);
    HRESULT get_value(BSTR*);
}
enum IID_IXMLError = GUID(0x948c5ad3, 0xc58d, 0x11d0, [0x9c, 0xb, 0x0, 0xc0, 0x4f, 0xc9, 0x9c, 0x8e]);
interface IXMLError : IUnknown
{
    HRESULT GetErrorInfo(XML_ERROR*);
}
enum CLSID_DOMDocument60 = GUID(0x88d96a05, 0xf192, 0x11d4, [0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5]);
struct DOMDocument60
{
}
enum CLSID_FreeThreadedDOMDocument60 = GUID(0x88d96a06, 0xf192, 0x11d4, [0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5]);
struct FreeThreadedDOMDocument60
{
}
enum CLSID_XMLSchemaCache60 = GUID(0x88d96a07, 0xf192, 0x11d4, [0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5]);
struct XMLSchemaCache60
{
}
enum CLSID_XSLTemplate60 = GUID(0x88d96a08, 0xf192, 0x11d4, [0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5]);
struct XSLTemplate60
{
}
enum CLSID_XMLHTTP60 = GUID(0x88d96a0a, 0xf192, 0x11d4, [0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5]);
struct XMLHTTP60
{
}
enum CLSID_FreeThreadedXMLHTTP60 = GUID(0x88d96a09, 0xf192, 0x11d4, [0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5]);
struct FreeThreadedXMLHTTP60
{
}
enum CLSID_ServerXMLHTTP60 = GUID(0x88d96a0b, 0xf192, 0x11d4, [0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5]);
struct ServerXMLHTTP60
{
}
enum CLSID_SAXXMLReader60 = GUID(0x88d96a0c, 0xf192, 0x11d4, [0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5]);
struct SAXXMLReader60
{
}
enum CLSID_MXXMLWriter60 = GUID(0x88d96a0f, 0xf192, 0x11d4, [0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5]);
struct MXXMLWriter60
{
}
enum CLSID_MXHTMLWriter60 = GUID(0x88d96a10, 0xf192, 0x11d4, [0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5]);
struct MXHTMLWriter60
{
}
enum CLSID_SAXAttributes60 = GUID(0x88d96a0e, 0xf192, 0x11d4, [0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5]);
struct SAXAttributes60
{
}
enum CLSID_MXNamespaceManager60 = GUID(0x88d96a11, 0xf192, 0x11d4, [0xa6, 0x5f, 0x0, 0x40, 0x96, 0x32, 0x51, 0xe5]);
struct MXNamespaceManager60
{
}
enum IID_IXMLDOMDocument2 = GUID(0x2933bf95, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXMLDOMDocument2 : IXMLDOMDocument
{
    HRESULT get_namespaces(IXMLDOMSchemaCollection*);
    HRESULT get_schemas(VARIANT*);
    HRESULT putref_schemas(VARIANT);
    HRESULT validate(IXMLDOMParseError*);
    HRESULT setProperty(BSTR, VARIANT);
    HRESULT getProperty(BSTR, VARIANT*);
}
enum IID_IXMLDOMDocument3 = GUID(0x2933bf96, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXMLDOMDocument3 : IXMLDOMDocument2
{
    HRESULT validateNode(IXMLDOMNode, IXMLDOMParseError*);
    HRESULT importNode(IXMLDOMNode, short, IXMLDOMNode*);
}
enum IID_IXMLDOMSchemaCollection = GUID(0x373984c8, 0xb845, 0x449b, [0x91, 0xe7, 0x45, 0xac, 0x83, 0x3, 0x6a, 0xde]);
interface IXMLDOMSchemaCollection : IDispatch
{
    HRESULT add(BSTR, VARIANT);
    HRESULT get(BSTR, IXMLDOMNode*);
    HRESULT remove(BSTR);
    HRESULT get_length(int*);
    HRESULT get_namespaceURI(int, BSTR*);
    HRESULT addCollection(IXMLDOMSchemaCollection);
    HRESULT get__newEnum(IUnknown*);
}
enum IID_IXMLDOMSelection = GUID(0xaa634fc7, 0x5888, 0x44a7, [0xa2, 0x57, 0x3a, 0x47, 0x15, 0xd, 0x3a, 0xe]);
interface IXMLDOMSelection : IXMLDOMNodeList
{
    HRESULT get_expr(BSTR*);
    HRESULT put_expr(BSTR);
    HRESULT get_context(IXMLDOMNode*);
    HRESULT putref_context(IXMLDOMNode);
    HRESULT peekNode(IXMLDOMNode*);
    HRESULT matches(IXMLDOMNode, IXMLDOMNode*);
    HRESULT removeNext(IXMLDOMNode*);
    HRESULT removeAll();
    HRESULT clone(IXMLDOMSelection*);
    HRESULT getProperty(BSTR, VARIANT*);
    HRESULT setProperty(BSTR, VARIANT);
}
enum IID_IXMLDOMParseError2 = GUID(0x3efaa428, 0x272f, 0x11d2, [0x83, 0x6f, 0x0, 0x0, 0xf8, 0x7a, 0x77, 0x82]);
interface IXMLDOMParseError2 : IXMLDOMParseError
{
    HRESULT get_errorXPath(BSTR*);
    HRESULT get_allErrors(IXMLDOMParseErrorCollection*);
    HRESULT errorParameters(int, BSTR*);
    HRESULT get_errorParametersCount(int*);
}
enum IID_IXMLDOMParseErrorCollection = GUID(0x3efaa429, 0x272f, 0x11d2, [0x83, 0x6f, 0x0, 0x0, 0xf8, 0x7a, 0x77, 0x82]);
interface IXMLDOMParseErrorCollection : IDispatch
{
    HRESULT get_item(int, IXMLDOMParseError2*);
    HRESULT get_length(int*);
    HRESULT get_next(IXMLDOMParseError2*);
    HRESULT reset();
    HRESULT get__newEnum(IUnknown*);
}
enum IID_IXSLProcessor = GUID(0x2933bf92, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXSLProcessor : IDispatch
{
    HRESULT put_input(VARIANT);
    HRESULT get_input(VARIANT*);
    HRESULT get_ownerTemplate(IXSLTemplate*);
    HRESULT setStartMode(BSTR, BSTR);
    HRESULT get_startMode(BSTR*);
    HRESULT get_startModeURI(BSTR*);
    HRESULT put_output(VARIANT);
    HRESULT get_output(VARIANT*);
    HRESULT transform(short*);
    HRESULT reset();
    HRESULT get_readyState(int*);
    HRESULT addParameter(BSTR, VARIANT, BSTR);
    HRESULT addObject(IDispatch, BSTR);
    HRESULT get_stylesheet(IXMLDOMNode*);
}
enum IID_IXSLTemplate = GUID(0x2933bf93, 0x7b36, 0x11d2, [0xb2, 0xe, 0x0, 0xc0, 0x4f, 0x98, 0x3e, 0x60]);
interface IXSLTemplate : IDispatch
{
    HRESULT putref_stylesheet(IXMLDOMNode);
    HRESULT get_stylesheet(IXMLDOMNode*);
    HRESULT createProcessor(IXSLProcessor*);
}
enum IID_IXMLHTTPRequest = GUID(0xed8c108d, 0x4349, 0x11d2, [0x91, 0xa4, 0x0, 0xc0, 0x4f, 0x79, 0x69, 0xe8]);
interface IXMLHTTPRequest : IDispatch
{
    HRESULT open(BSTR, BSTR, VARIANT, VARIANT, VARIANT);
    HRESULT setRequestHeader(BSTR, BSTR);
    HRESULT getResponseHeader(BSTR, BSTR*);
    HRESULT getAllResponseHeaders(BSTR*);
    HRESULT send(VARIANT);
    HRESULT abort();
    HRESULT get_status(int*);
    HRESULT get_statusText(BSTR*);
    HRESULT get_responseXML(IDispatch*);
    HRESULT get_responseText(BSTR*);
    HRESULT get_responseBody(VARIANT*);
    HRESULT get_responseStream(VARIANT*);
    HRESULT get_readyState(int*);
    HRESULT put_onreadystatechange(IDispatch);
}
alias SERVERXMLHTTP_OPTION = int;
enum : int
{
    SXH_OPTION_URL                                = 0xffffffff,
    SXH_OPTION_URL_CODEPAGE                       = 0x00000000,
    SXH_OPTION_ESCAPE_PERCENT_IN_URL              = 0x00000001,
    SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS = 0x00000002,
    SXH_OPTION_SELECT_CLIENT_SSL_CERT             = 0x00000003,
}

alias SXH_SERVER_CERT_OPTION = int;
enum : int
{
    SXH_SERVER_CERT_IGNORE_UNKNOWN_CA        = 0x00000100,
    SXH_SERVER_CERT_IGNORE_WRONG_USAGE       = 0x00000200,
    SXH_SERVER_CERT_IGNORE_CERT_CN_INVALID   = 0x00001000,
    SXH_SERVER_CERT_IGNORE_CERT_DATE_INVALID = 0x00002000,
    SXH_SERVER_CERT_IGNORE_ALL_SERVER_ERRORS = 0x00003300,
}

alias SXH_PROXY_SETTING = int;
enum : int
{
    SXH_PROXY_SET_DEFAULT   = 0x00000000,
    SXH_PROXY_SET_PRECONFIG = 0x00000000,
    SXH_PROXY_SET_DIRECT    = 0x00000001,
    SXH_PROXY_SET_PROXY     = 0x00000002,
}

enum IID_IServerXMLHTTPRequest = GUID(0x2e9196bf, 0x13ba, 0x4dd4, [0x91, 0xca, 0x6c, 0x57, 0x1f, 0x28, 0x14, 0x95]);
interface IServerXMLHTTPRequest : IXMLHTTPRequest
{
    HRESULT setTimeouts(int, int, int, int);
    HRESULT waitForResponse(VARIANT, short*);
    HRESULT getOption(SERVERXMLHTTP_OPTION, VARIANT*);
    HRESULT setOption(SERVERXMLHTTP_OPTION, VARIANT);
}
enum IID_IServerXMLHTTPRequest2 = GUID(0x2e01311b, 0xc322, 0x4b0a, [0xbd, 0x77, 0xb9, 0xc, 0xfd, 0xc8, 0xdc, 0xe7]);
interface IServerXMLHTTPRequest2 : IServerXMLHTTPRequest
{
    HRESULT setProxy(SXH_PROXY_SETTING, VARIANT, VARIANT);
    HRESULT setProxyCredentials(BSTR, BSTR);
}
enum IID_ISAXXMLReader = GUID(0xa4f96ed0, 0xf829, 0x476e, [0x81, 0xc0, 0xcd, 0xc7, 0xbd, 0x2a, 0x8, 0x2]);
interface ISAXXMLReader : IUnknown
{
    HRESULT getFeature(const(wchar)*, short*);
    HRESULT putFeature(const(wchar)*, short);
    HRESULT getProperty(const(wchar)*, VARIANT*);
    HRESULT putProperty(const(wchar)*, VARIANT);
    HRESULT getEntityResolver(ISAXEntityResolver*);
    HRESULT putEntityResolver(ISAXEntityResolver);
    HRESULT getContentHandler(ISAXContentHandler*);
    HRESULT putContentHandler(ISAXContentHandler);
    HRESULT getDTDHandler(ISAXDTDHandler*);
    HRESULT putDTDHandler(ISAXDTDHandler);
    HRESULT getErrorHandler(ISAXErrorHandler*);
    HRESULT putErrorHandler(ISAXErrorHandler);
    HRESULT getBaseURL(const(ushort)**);
    HRESULT putBaseURL(const(wchar)*);
    HRESULT getSecureBaseURL(const(ushort)**);
    HRESULT putSecureBaseURL(const(wchar)*);
    HRESULT parse(VARIANT);
    HRESULT parseURL(const(wchar)*);
}
enum IID_ISAXXMLFilter = GUID(0x70409222, 0xca09, 0x4475, [0xac, 0xb8, 0x40, 0x31, 0x2f, 0xe8, 0xd1, 0x45]);
interface ISAXXMLFilter : ISAXXMLReader
{
    HRESULT getParent(ISAXXMLReader*);
    HRESULT putParent(ISAXXMLReader);
}
enum IID_ISAXLocator = GUID(0x9b7e472a, 0xde4, 0x4640, [0xbf, 0xf3, 0x84, 0xd3, 0x8a, 0x5, 0x1c, 0x31]);
interface ISAXLocator : IUnknown
{
    HRESULT getColumnNumber(int*);
    HRESULT getLineNumber(int*);
    HRESULT getPublicId(const(ushort)**);
    HRESULT getSystemId(const(ushort)**);
}
enum IID_ISAXEntityResolver = GUID(0x99bca7bd, 0xe8c4, 0x4d5f, [0xa0, 0xcf, 0x6d, 0x90, 0x79, 0x1, 0xff, 0x7]);
interface ISAXEntityResolver : IUnknown
{
    HRESULT resolveEntity(const(wchar)*, const(wchar)*, VARIANT*);
}
enum IID_ISAXContentHandler = GUID(0x1545cdfa, 0x9e4e, 0x4497, [0xa8, 0xa4, 0x2b, 0xf7, 0xd0, 0x11, 0x2c, 0x44]);
interface ISAXContentHandler : IUnknown
{
    HRESULT putDocumentLocator(ISAXLocator);
    HRESULT startDocument();
    HRESULT endDocument();
    HRESULT startPrefixMapping(const(wchar)*, int, const(wchar)*, int);
    HRESULT endPrefixMapping(const(wchar)*, int);
    HRESULT startElement(const(wchar)*, int, const(wchar)*, int, const(wchar)*, int, ISAXAttributes);
    HRESULT endElement(const(wchar)*, int, const(wchar)*, int, const(wchar)*, int);
    HRESULT characters(const(wchar)*, int);
    HRESULT ignorableWhitespace(const(wchar)*, int);
    HRESULT processingInstruction(const(wchar)*, int, const(wchar)*, int);
    HRESULT skippedEntity(const(wchar)*, int);
}
enum IID_ISAXDTDHandler = GUID(0xe15c1baf, 0xafb3, 0x4d60, [0x8c, 0x36, 0x19, 0xa8, 0xc4, 0x5d, 0xef, 0xed]);
interface ISAXDTDHandler : IUnknown
{
    HRESULT notationDecl(const(wchar)*, int, const(wchar)*, int, const(wchar)*, int);
    HRESULT unparsedEntityDecl(const(wchar)*, int, const(wchar)*, int, const(wchar)*, int, const(wchar)*, int);
}
enum IID_ISAXErrorHandler = GUID(0xa60511c4, 0xccf5, 0x479e, [0x98, 0xa3, 0xdc, 0x8d, 0xc5, 0x45, 0xb7, 0xd0]);
interface ISAXErrorHandler : IUnknown
{
    HRESULT error(ISAXLocator, const(wchar)*, HRESULT);
    HRESULT fatalError(ISAXLocator, const(wchar)*, HRESULT);
    HRESULT ignorableWarning(ISAXLocator, const(wchar)*, HRESULT);
}
enum IID_ISAXLexicalHandler = GUID(0x7f85d5f5, 0x47a8, 0x4497, [0xbd, 0xa5, 0x84, 0xba, 0x4, 0x81, 0x9e, 0xa6]);
interface ISAXLexicalHandler : IUnknown
{
    HRESULT startDTD(const(wchar)*, int, const(wchar)*, int, const(wchar)*, int);
    HRESULT endDTD();
    HRESULT startEntity(const(wchar)*, int);
    HRESULT endEntity(const(wchar)*, int);
    HRESULT startCDATA();
    HRESULT endCDATA();
    HRESULT comment(const(wchar)*, int);
}
enum IID_ISAXDeclHandler = GUID(0x862629ac, 0x771a, 0x47b2, [0x83, 0x37, 0x4e, 0x68, 0x43, 0xc1, 0xbe, 0x90]);
interface ISAXDeclHandler : IUnknown
{
    HRESULT elementDecl(const(wchar)*, int, const(wchar)*, int);
    HRESULT attributeDecl(const(wchar)*, int, const(wchar)*, int, const(wchar)*, int, const(wchar)*, int, const(wchar)*, int);
    HRESULT internalEntityDecl(const(wchar)*, int, const(wchar)*, int);
    HRESULT externalEntityDecl(const(wchar)*, int, const(wchar)*, int, const(wchar)*, int);
}
enum IID_ISAXAttributes = GUID(0xf078abe1, 0x45d2, 0x4832, [0x91, 0xea, 0x44, 0x66, 0xce, 0x2f, 0x25, 0xc9]);
interface ISAXAttributes : IUnknown
{
    HRESULT getLength(int*);
    HRESULT getURI(int, const(ushort)**, int*);
    HRESULT getLocalName(int, const(ushort)**, int*);
    HRESULT getQName(int, const(ushort)**, int*);
    HRESULT getName(int, const(ushort)**, int*, const(ushort)**, int*, const(ushort)**, int*);
    HRESULT getIndexFromName(const(wchar)*, int, const(wchar)*, int, int*);
    HRESULT getIndexFromQName(const(wchar)*, int, int*);
    HRESULT getType(int, const(ushort)**, int*);
    HRESULT getTypeFromName(const(wchar)*, int, const(wchar)*, int, const(ushort)**, int*);
    HRESULT getTypeFromQName(const(wchar)*, int, const(ushort)**, int*);
    HRESULT getValue(int, const(ushort)**, int*);
    HRESULT getValueFromName(const(wchar)*, int, const(wchar)*, int, const(ushort)**, int*);
    HRESULT getValueFromQName(const(wchar)*, int, const(ushort)**, int*);
}
enum IID_IVBSAXXMLReader = GUID(0x8c033caa, 0x6cd6, 0x4f73, [0xb7, 0x28, 0x45, 0x31, 0xaf, 0x74, 0x94, 0x5f]);
interface IVBSAXXMLReader : IDispatch
{
    HRESULT getFeature(BSTR, short*);
    HRESULT putFeature(BSTR, short);
    HRESULT getProperty(BSTR, VARIANT*);
    HRESULT putProperty(BSTR, VARIANT);
    HRESULT get_entityResolver(IVBSAXEntityResolver*);
    HRESULT putref_entityResolver(IVBSAXEntityResolver);
    HRESULT get_contentHandler(IVBSAXContentHandler*);
    HRESULT putref_contentHandler(IVBSAXContentHandler);
    HRESULT get_dtdHandler(IVBSAXDTDHandler*);
    HRESULT putref_dtdHandler(IVBSAXDTDHandler);
    HRESULT get_errorHandler(IVBSAXErrorHandler*);
    HRESULT putref_errorHandler(IVBSAXErrorHandler);
    HRESULT get_baseURL(BSTR*);
    HRESULT put_baseURL(BSTR);
    HRESULT get_secureBaseURL(BSTR*);
    HRESULT put_secureBaseURL(BSTR);
    HRESULT parse(VARIANT);
    HRESULT parseURL(BSTR);
}
enum IID_IVBSAXXMLFilter = GUID(0x1299eb1b, 0x5b88, 0x433e, [0x82, 0xde, 0x82, 0xca, 0x75, 0xad, 0x4e, 0x4]);
interface IVBSAXXMLFilter : IDispatch
{
    HRESULT get_parent(IVBSAXXMLReader*);
    HRESULT putref_parent(IVBSAXXMLReader);
}
enum IID_IVBSAXLocator = GUID(0x796e7ac5, 0x5aa2, 0x4eff, [0xac, 0xad, 0x3f, 0xaa, 0xf0, 0x1a, 0x32, 0x88]);
interface IVBSAXLocator : IDispatch
{
    HRESULT get_columnNumber(int*);
    HRESULT get_lineNumber(int*);
    HRESULT get_publicId(BSTR*);
    HRESULT get_systemId(BSTR*);
}
enum IID_IVBSAXEntityResolver = GUID(0xc05d096, 0xf45b, 0x4aca, [0xad, 0x1a, 0xaa, 0xb, 0xc2, 0x55, 0x18, 0xdc]);
interface IVBSAXEntityResolver : IDispatch
{
    HRESULT resolveEntity(BSTR*, BSTR*, VARIANT*);
}
enum IID_IVBSAXContentHandler = GUID(0x2ed7290a, 0x4dd5, 0x4b46, [0xbb, 0x26, 0x4e, 0x41, 0x55, 0xe7, 0x7f, 0xaa]);
interface IVBSAXContentHandler : IDispatch
{
    HRESULT putref_documentLocator(IVBSAXLocator);
    HRESULT startDocument();
    HRESULT endDocument();
    HRESULT startPrefixMapping(BSTR*, BSTR*);
    HRESULT endPrefixMapping(BSTR*);
    HRESULT startElement(BSTR*, BSTR*, BSTR*, IVBSAXAttributes);
    HRESULT endElement(BSTR*, BSTR*, BSTR*);
    HRESULT characters(BSTR*);
    HRESULT ignorableWhitespace(BSTR*);
    HRESULT processingInstruction(BSTR*, BSTR*);
    HRESULT skippedEntity(BSTR*);
}
enum IID_IVBSAXDTDHandler = GUID(0x24fb3297, 0x302d, 0x4620, [0xba, 0x39, 0x3a, 0x73, 0x2d, 0x85, 0x5, 0x58]);
interface IVBSAXDTDHandler : IDispatch
{
    HRESULT notationDecl(BSTR*, BSTR*, BSTR*);
    HRESULT unparsedEntityDecl(BSTR*, BSTR*, BSTR*, BSTR*);
}
enum IID_IVBSAXErrorHandler = GUID(0xd963d3fe, 0x173c, 0x4862, [0x90, 0x95, 0xb9, 0x2f, 0x66, 0x99, 0x5f, 0x52]);
interface IVBSAXErrorHandler : IDispatch
{
    HRESULT error(IVBSAXLocator, BSTR*, int);
    HRESULT fatalError(IVBSAXLocator, BSTR*, int);
    HRESULT ignorableWarning(IVBSAXLocator, BSTR*, int);
}
enum IID_IVBSAXLexicalHandler = GUID(0x32aac35, 0x8c0e, 0x4d9d, [0x97, 0x9f, 0xe3, 0xb7, 0x2, 0x93, 0x55, 0x76]);
interface IVBSAXLexicalHandler : IDispatch
{
    HRESULT startDTD(BSTR*, BSTR*, BSTR*);
    HRESULT endDTD();
    HRESULT startEntity(BSTR*);
    HRESULT endEntity(BSTR*);
    HRESULT startCDATA();
    HRESULT endCDATA();
    HRESULT comment(BSTR*);
}
enum IID_IVBSAXDeclHandler = GUID(0xe8917260, 0x7579, 0x4be1, [0xb5, 0xdd, 0x7a, 0xfb, 0xfa, 0x6f, 0x7, 0x7b]);
interface IVBSAXDeclHandler : IDispatch
{
    HRESULT elementDecl(BSTR*, BSTR*);
    HRESULT attributeDecl(BSTR*, BSTR*, BSTR*, BSTR*, BSTR*);
    HRESULT internalEntityDecl(BSTR*, BSTR*);
    HRESULT externalEntityDecl(BSTR*, BSTR*, BSTR*);
}
enum IID_IVBSAXAttributes = GUID(0x10dc0586, 0x132b, 0x4cac, [0x8b, 0xb3, 0xdb, 0x0, 0xac, 0x8b, 0x7e, 0xe0]);
interface IVBSAXAttributes : IDispatch
{
    HRESULT get_length(int*);
    HRESULT getURI(int, BSTR*);
    HRESULT getLocalName(int, BSTR*);
    HRESULT getQName(int, BSTR*);
    HRESULT getIndexFromName(BSTR, BSTR, int*);
    HRESULT getIndexFromQName(BSTR, int*);
    HRESULT getType(int, BSTR*);
    HRESULT getTypeFromName(BSTR, BSTR, BSTR*);
    HRESULT getTypeFromQName(BSTR, BSTR*);
    HRESULT getValue(int, BSTR*);
    HRESULT getValueFromName(BSTR, BSTR, BSTR*);
    HRESULT getValueFromQName(BSTR, BSTR*);
}
enum IID_IMXWriter = GUID(0x4d7ff4ba, 0x1565, 0x4ea8, [0x94, 0xe1, 0x6e, 0x72, 0x4a, 0x46, 0xf9, 0x8d]);
interface IMXWriter : IDispatch
{
    HRESULT put_output(VARIANT);
    HRESULT get_output(VARIANT*);
    HRESULT put_encoding(BSTR);
    HRESULT get_encoding(BSTR*);
    HRESULT put_byteOrderMark(short);
    HRESULT get_byteOrderMark(short*);
    HRESULT put_indent(short);
    HRESULT get_indent(short*);
    HRESULT put_standalone(short);
    HRESULT get_standalone(short*);
    HRESULT put_omitXMLDeclaration(short);
    HRESULT get_omitXMLDeclaration(short*);
    HRESULT put_version(BSTR);
    HRESULT get_version(BSTR*);
    HRESULT put_disableOutputEscaping(short);
    HRESULT get_disableOutputEscaping(short*);
    HRESULT flush();
}
enum IID_IMXAttributes = GUID(0xf10d27cc, 0x3ec0, 0x415c, [0x8e, 0xd8, 0x77, 0xab, 0x1c, 0x5e, 0x72, 0x62]);
interface IMXAttributes : IDispatch
{
    HRESULT addAttribute(BSTR, BSTR, BSTR, BSTR, BSTR);
    HRESULT addAttributeFromIndex(VARIANT, int);
    HRESULT clear();
    HRESULT removeAttribute(int);
    HRESULT setAttribute(int, BSTR, BSTR, BSTR, BSTR, BSTR);
    HRESULT setAttributes(VARIANT);
    HRESULT setLocalName(int, BSTR);
    HRESULT setQName(int, BSTR);
    HRESULT setType(int, BSTR);
    HRESULT setURI(int, BSTR);
    HRESULT setValue(int, BSTR);
}
enum IID_IMXReaderControl = GUID(0x808f4e35, 0x8d5a, 0x4fbe, [0x84, 0x66, 0x33, 0xa4, 0x12, 0x79, 0xed, 0x30]);
interface IMXReaderControl : IDispatch
{
    HRESULT abort();
    HRESULT resume();
    HRESULT suspend();
}
enum IID_IMXSchemaDeclHandler = GUID(0xfa4bb38c, 0xfaf9, 0x4cca, [0x93, 0x2, 0xd1, 0xdd, 0xf, 0xe5, 0x20, 0xdb]);
interface IMXSchemaDeclHandler : IDispatch
{
    HRESULT schemaElementDecl(ISchemaElement);
}
enum IID_IMXNamespacePrefixes = GUID(0xc90352f4, 0x643c, 0x4fbc, [0xbb, 0x23, 0xe9, 0x96, 0xeb, 0x2d, 0x51, 0xfd]);
interface IMXNamespacePrefixes : IDispatch
{
    HRESULT get_item(int, BSTR*);
    HRESULT get_length(int*);
    HRESULT get__newEnum(IUnknown*);
}
enum IID_IVBMXNamespaceManager = GUID(0xc90352f5, 0x643c, 0x4fbc, [0xbb, 0x23, 0xe9, 0x96, 0xeb, 0x2d, 0x51, 0xfd]);
interface IVBMXNamespaceManager : IDispatch
{
    HRESULT put_allowOverride(short);
    HRESULT get_allowOverride(short*);
    HRESULT reset();
    HRESULT pushContext();
    HRESULT pushNodeContext(IXMLDOMNode, short);
    HRESULT popContext();
    HRESULT declarePrefix(BSTR, BSTR);
    HRESULT getDeclaredPrefixes(IMXNamespacePrefixes*);
    HRESULT getPrefixes(BSTR, IMXNamespacePrefixes*);
    HRESULT getURI(BSTR, VARIANT*);
    HRESULT getURIFromNode(BSTR, IXMLDOMNode, VARIANT*);
}
enum IID_IMXNamespaceManager = GUID(0xc90352f6, 0x643c, 0x4fbc, [0xbb, 0x23, 0xe9, 0x96, 0xeb, 0x2d, 0x51, 0xfd]);
interface IMXNamespaceManager : IUnknown
{
    HRESULT putAllowOverride(short);
    HRESULT getAllowOverride(short*);
    HRESULT reset();
    HRESULT pushContext();
    HRESULT pushNodeContext(IXMLDOMNode, short);
    HRESULT popContext();
    HRESULT declarePrefix(const(wchar)*, const(wchar)*);
    HRESULT getDeclaredPrefix(int, PWSTR, int*);
    HRESULT getPrefix(const(wchar)*, int, PWSTR, int*);
    HRESULT getURI(const(wchar)*, IXMLDOMNode, PWSTR, int*);
}
enum IID_IMXXMLFilter = GUID(0xc90352f7, 0x643c, 0x4fbc, [0xbb, 0x23, 0xe9, 0x96, 0xeb, 0x2d, 0x51, 0xfd]);
interface IMXXMLFilter : IDispatch
{
    HRESULT getFeature(BSTR, short*);
    HRESULT putFeature(BSTR, short);
    HRESULT getProperty(BSTR, VARIANT*);
    HRESULT putProperty(BSTR, VARIANT);
    HRESULT get_entityResolver(IUnknown*);
    HRESULT putref_entityResolver(IUnknown);
    HRESULT get_contentHandler(IUnknown*);
    HRESULT putref_contentHandler(IUnknown);
    HRESULT get_dtdHandler(IUnknown*);
    HRESULT putref_dtdHandler(IUnknown);
    HRESULT get_errorHandler(IUnknown*);
    HRESULT putref_errorHandler(IUnknown);
}
alias SOMITEMTYPE = int;
enum : int
{
    SOMITEM_SCHEMA                      = 0x00001000,
    SOMITEM_ATTRIBUTE                   = 0x00001001,
    SOMITEM_ATTRIBUTEGROUP              = 0x00001002,
    SOMITEM_NOTATION                    = 0x00001003,
    SOMITEM_ANNOTATION                  = 0x00001004,
    SOMITEM_IDENTITYCONSTRAINT          = 0x00001100,
    SOMITEM_KEY                         = 0x00001101,
    SOMITEM_KEYREF                      = 0x00001102,
    SOMITEM_UNIQUE                      = 0x00001103,
    SOMITEM_ANYTYPE                     = 0x00002000,
    SOMITEM_DATATYPE                    = 0x00002100,
    SOMITEM_DATATYPE_ANYTYPE            = 0x00002101,
    SOMITEM_DATATYPE_ANYURI             = 0x00002102,
    SOMITEM_DATATYPE_BASE64BINARY       = 0x00002103,
    SOMITEM_DATATYPE_BOOLEAN            = 0x00002104,
    SOMITEM_DATATYPE_BYTE               = 0x00002105,
    SOMITEM_DATATYPE_DATE               = 0x00002106,
    SOMITEM_DATATYPE_DATETIME           = 0x00002107,
    SOMITEM_DATATYPE_DAY                = 0x00002108,
    SOMITEM_DATATYPE_DECIMAL            = 0x00002109,
    SOMITEM_DATATYPE_DOUBLE             = 0x0000210a,
    SOMITEM_DATATYPE_DURATION           = 0x0000210b,
    SOMITEM_DATATYPE_ENTITIES           = 0x0000210c,
    SOMITEM_DATATYPE_ENTITY             = 0x0000210d,
    SOMITEM_DATATYPE_FLOAT              = 0x0000210e,
    SOMITEM_DATATYPE_HEXBINARY          = 0x0000210f,
    SOMITEM_DATATYPE_ID                 = 0x00002110,
    SOMITEM_DATATYPE_IDREF              = 0x00002111,
    SOMITEM_DATATYPE_IDREFS             = 0x00002112,
    SOMITEM_DATATYPE_INT                = 0x00002113,
    SOMITEM_DATATYPE_INTEGER            = 0x00002114,
    SOMITEM_DATATYPE_LANGUAGE           = 0x00002115,
    SOMITEM_DATATYPE_LONG               = 0x00002116,
    SOMITEM_DATATYPE_MONTH              = 0x00002117,
    SOMITEM_DATATYPE_MONTHDAY           = 0x00002118,
    SOMITEM_DATATYPE_NAME               = 0x00002119,
    SOMITEM_DATATYPE_NCNAME             = 0x0000211a,
    SOMITEM_DATATYPE_NEGATIVEINTEGER    = 0x0000211b,
    SOMITEM_DATATYPE_NMTOKEN            = 0x0000211c,
    SOMITEM_DATATYPE_NMTOKENS           = 0x0000211d,
    SOMITEM_DATATYPE_NONNEGATIVEINTEGER = 0x0000211e,
    SOMITEM_DATATYPE_NONPOSITIVEINTEGER = 0x0000211f,
    SOMITEM_DATATYPE_NORMALIZEDSTRING   = 0x00002120,
    SOMITEM_DATATYPE_NOTATION           = 0x00002121,
    SOMITEM_DATATYPE_POSITIVEINTEGER    = 0x00002122,
    SOMITEM_DATATYPE_QNAME              = 0x00002123,
    SOMITEM_DATATYPE_SHORT              = 0x00002124,
    SOMITEM_DATATYPE_STRING             = 0x00002125,
    SOMITEM_DATATYPE_TIME               = 0x00002126,
    SOMITEM_DATATYPE_TOKEN              = 0x00002127,
    SOMITEM_DATATYPE_UNSIGNEDBYTE       = 0x00002128,
    SOMITEM_DATATYPE_UNSIGNEDINT        = 0x00002129,
    SOMITEM_DATATYPE_UNSIGNEDLONG       = 0x0000212a,
    SOMITEM_DATATYPE_UNSIGNEDSHORT      = 0x0000212b,
    SOMITEM_DATATYPE_YEAR               = 0x0000212c,
    SOMITEM_DATATYPE_YEARMONTH          = 0x0000212d,
    SOMITEM_DATATYPE_ANYSIMPLETYPE      = 0x000021ff,
    SOMITEM_SIMPLETYPE                  = 0x00002200,
    SOMITEM_COMPLEXTYPE                 = 0x00002400,
    SOMITEM_PARTICLE                    = 0x00004000,
    SOMITEM_ANY                         = 0x00004001,
    SOMITEM_ANYATTRIBUTE                = 0x00004002,
    SOMITEM_ELEMENT                     = 0x00004003,
    SOMITEM_GROUP                       = 0x00004100,
    SOMITEM_ALL                         = 0x00004101,
    SOMITEM_CHOICE                      = 0x00004102,
    SOMITEM_SEQUENCE                    = 0x00004103,
    SOMITEM_EMPTYPARTICLE               = 0x00004104,
    SOMITEM_NULL                        = 0x00000800,
    SOMITEM_NULL_TYPE                   = 0x00002800,
    SOMITEM_NULL_ANY                    = 0x00004801,
    SOMITEM_NULL_ANYATTRIBUTE           = 0x00004802,
    SOMITEM_NULL_ELEMENT                = 0x00004803,
}

alias SCHEMAUSE = int;
enum : int
{
    SCHEMAUSE_OPTIONAL   = 0x00000000,
    SCHEMAUSE_PROHIBITED = 0x00000001,
    SCHEMAUSE_REQUIRED   = 0x00000002,
}

alias SCHEMADERIVATIONMETHOD = int;
enum : int
{
    SCHEMADERIVATIONMETHOD_EMPTY        = 0x00000000,
    SCHEMADERIVATIONMETHOD_SUBSTITUTION = 0x00000001,
    SCHEMADERIVATIONMETHOD_EXTENSION    = 0x00000002,
    SCHEMADERIVATIONMETHOD_RESTRICTION  = 0x00000004,
    SCHEMADERIVATIONMETHOD_LIST         = 0x00000008,
    SCHEMADERIVATIONMETHOD_UNION        = 0x00000010,
    SCHEMADERIVATIONMETHOD_ALL          = 0x000000ff,
    SCHEMADERIVATIONMETHOD_NONE         = 0x00000100,
}

alias SCHEMACONTENTTYPE = int;
enum : int
{
    SCHEMACONTENTTYPE_EMPTY       = 0x00000000,
    SCHEMACONTENTTYPE_TEXTONLY    = 0x00000001,
    SCHEMACONTENTTYPE_ELEMENTONLY = 0x00000002,
    SCHEMACONTENTTYPE_MIXED       = 0x00000003,
}

alias SCHEMAPROCESSCONTENTS = int;
enum : int
{
    SCHEMAPROCESSCONTENTS_NONE   = 0x00000000,
    SCHEMAPROCESSCONTENTS_SKIP   = 0x00000001,
    SCHEMAPROCESSCONTENTS_LAX    = 0x00000002,
    SCHEMAPROCESSCONTENTS_STRICT = 0x00000003,
}

alias SCHEMAWHITESPACE = int;
enum : int
{
    SCHEMAWHITESPACE_NONE     = 0xffffffff,
    SCHEMAWHITESPACE_PRESERVE = 0x00000000,
    SCHEMAWHITESPACE_REPLACE  = 0x00000001,
    SCHEMAWHITESPACE_COLLAPSE = 0x00000002,
}

alias SCHEMATYPEVARIETY = int;
enum : int
{
    SCHEMATYPEVARIETY_NONE   = 0xffffffff,
    SCHEMATYPEVARIETY_ATOMIC = 0x00000000,
    SCHEMATYPEVARIETY_LIST   = 0x00000001,
    SCHEMATYPEVARIETY_UNION  = 0x00000002,
}

enum IID_IXMLDOMSchemaCollection2 = GUID(0x50ea08b0, 0xdd1b, 0x4664, [0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a]);
interface IXMLDOMSchemaCollection2 : IXMLDOMSchemaCollection
{
    HRESULT validate();
    HRESULT put_validateOnLoad(short);
    HRESULT get_validateOnLoad(short*);
    HRESULT getSchema(BSTR, ISchema*);
    HRESULT getDeclaration(IXMLDOMNode, ISchemaItem*);
}
enum IID_ISchemaStringCollection = GUID(0x50ea08b1, 0xdd1b, 0x4664, [0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a]);
interface ISchemaStringCollection : IDispatch
{
    HRESULT get_item(int, BSTR*);
    HRESULT get_length(int*);
    HRESULT get__newEnum(IUnknown*);
}
enum IID_ISchemaItemCollection = GUID(0x50ea08b2, 0xdd1b, 0x4664, [0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a]);
interface ISchemaItemCollection : IDispatch
{
    HRESULT get_item(int, ISchemaItem*);
    HRESULT itemByName(BSTR, ISchemaItem*);
    HRESULT itemByQName(BSTR, BSTR, ISchemaItem*);
    HRESULT get_length(int*);
    HRESULT get__newEnum(IUnknown*);
}
enum IID_ISchemaItem = GUID(0x50ea08b3, 0xdd1b, 0x4664, [0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a]);
interface ISchemaItem : IDispatch
{
    HRESULT get_name(BSTR*);
    HRESULT get_namespaceURI(BSTR*);
    HRESULT get_schema(ISchema*);
    HRESULT get_id(BSTR*);
    HRESULT get_itemType(SOMITEMTYPE*);
    HRESULT get_unhandledAttributes(IVBSAXAttributes*);
    HRESULT writeAnnotation(IUnknown, short*);
}
enum IID_ISchema = GUID(0x50ea08b4, 0xdd1b, 0x4664, [0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a]);
interface ISchema : ISchemaItem
{
    HRESULT get_targetNamespace(BSTR*);
    HRESULT get_version(BSTR*);
    HRESULT get_types(ISchemaItemCollection*);
    HRESULT get_elements(ISchemaItemCollection*);
    HRESULT get_attributes(ISchemaItemCollection*);
    HRESULT get_attributeGroups(ISchemaItemCollection*);
    HRESULT get_modelGroups(ISchemaItemCollection*);
    HRESULT get_notations(ISchemaItemCollection*);
    HRESULT get_schemaLocations(ISchemaStringCollection*);
}
enum IID_ISchemaParticle = GUID(0x50ea08b5, 0xdd1b, 0x4664, [0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a]);
interface ISchemaParticle : ISchemaItem
{
    HRESULT get_minOccurs(VARIANT*);
    HRESULT get_maxOccurs(VARIANT*);
}
enum IID_ISchemaAttribute = GUID(0x50ea08b6, 0xdd1b, 0x4664, [0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a]);
interface ISchemaAttribute : ISchemaItem
{
    HRESULT get_type(ISchemaType*);
    HRESULT get_scope(ISchemaComplexType*);
    HRESULT get_defaultValue(BSTR*);
    HRESULT get_fixedValue(BSTR*);
    HRESULT get_use(SCHEMAUSE*);
    HRESULT get_isReference(short*);
}
enum IID_ISchemaElement = GUID(0x50ea08b7, 0xdd1b, 0x4664, [0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a]);
interface ISchemaElement : ISchemaParticle
{
    HRESULT get_type(ISchemaType*);
    HRESULT get_scope(ISchemaComplexType*);
    HRESULT get_defaultValue(BSTR*);
    HRESULT get_fixedValue(BSTR*);
    HRESULT get_isNillable(short*);
    HRESULT get_identityConstraints(ISchemaItemCollection*);
    HRESULT get_substitutionGroup(ISchemaElement*);
    HRESULT get_substitutionGroupExclusions(SCHEMADERIVATIONMETHOD*);
    HRESULT get_disallowedSubstitutions(SCHEMADERIVATIONMETHOD*);
    HRESULT get_isAbstract(short*);
    HRESULT get_isReference(short*);
}
enum IID_ISchemaType = GUID(0x50ea08b8, 0xdd1b, 0x4664, [0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a]);
interface ISchemaType : ISchemaItem
{
    HRESULT get_baseTypes(ISchemaItemCollection*);
    HRESULT get_final(SCHEMADERIVATIONMETHOD*);
    HRESULT get_variety(SCHEMATYPEVARIETY*);
    HRESULT get_derivedBy(SCHEMADERIVATIONMETHOD*);
    HRESULT isValid(BSTR, short*);
    HRESULT get_minExclusive(BSTR*);
    HRESULT get_minInclusive(BSTR*);
    HRESULT get_maxExclusive(BSTR*);
    HRESULT get_maxInclusive(BSTR*);
    HRESULT get_totalDigits(VARIANT*);
    HRESULT get_fractionDigits(VARIANT*);
    HRESULT get_length(VARIANT*);
    HRESULT get_minLength(VARIANT*);
    HRESULT get_maxLength(VARIANT*);
    HRESULT get_enumeration(ISchemaStringCollection*);
    HRESULT get_whitespace(SCHEMAWHITESPACE*);
    HRESULT get_patterns(ISchemaStringCollection*);
}
enum IID_ISchemaComplexType = GUID(0x50ea08b9, 0xdd1b, 0x4664, [0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a]);
interface ISchemaComplexType : ISchemaType
{
    HRESULT get_isAbstract(short*);
    HRESULT get_anyAttribute(ISchemaAny*);
    HRESULT get_attributes(ISchemaItemCollection*);
    HRESULT get_contentType(SCHEMACONTENTTYPE*);
    HRESULT get_contentModel(ISchemaModelGroup*);
    HRESULT get_prohibitedSubstitutions(SCHEMADERIVATIONMETHOD*);
}
enum IID_ISchemaAttributeGroup = GUID(0x50ea08ba, 0xdd1b, 0x4664, [0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a]);
interface ISchemaAttributeGroup : ISchemaItem
{
    HRESULT get_anyAttribute(ISchemaAny*);
    HRESULT get_attributes(ISchemaItemCollection*);
}
enum IID_ISchemaModelGroup = GUID(0x50ea08bb, 0xdd1b, 0x4664, [0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a]);
interface ISchemaModelGroup : ISchemaParticle
{
    HRESULT get_particles(ISchemaItemCollection*);
}
enum IID_ISchemaAny = GUID(0x50ea08bc, 0xdd1b, 0x4664, [0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a]);
interface ISchemaAny : ISchemaParticle
{
    HRESULT get_namespaces(ISchemaStringCollection*);
    HRESULT get_processContents(SCHEMAPROCESSCONTENTS*);
}
enum IID_ISchemaIdentityConstraint = GUID(0x50ea08bd, 0xdd1b, 0x4664, [0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a]);
interface ISchemaIdentityConstraint : ISchemaItem
{
    HRESULT get_selector(BSTR*);
    HRESULT get_fields(ISchemaStringCollection*);
    HRESULT get_referencedKey(ISchemaIdentityConstraint*);
}
enum IID_ISchemaNotation = GUID(0x50ea08be, 0xdd1b, 0x4664, [0x9a, 0x50, 0xc2, 0xf4, 0xf, 0x4b, 0xd7, 0x9a]);
interface ISchemaNotation : ISchemaItem
{
    HRESULT get_systemIdentifier(BSTR*);
    HRESULT get_publicIdentifier(BSTR*);
}
struct __msxml6_ReferenceRemainingTypes__
{
    DOMNodeType __tagDomNodeType__;
    DOMNodeType __domNodeType__;
    SERVERXMLHTTP_OPTION __serverXmlHttpOptionEnum__;
    SERVERXMLHTTP_OPTION __serverXmlHttpOption__;
    SXH_SERVER_CERT_OPTION __serverCertOptionEnum__;
    SXH_SERVER_CERT_OPTION __serverCertOption__;
    SXH_PROXY_SETTING __proxySettingEnum__;
    SXH_PROXY_SETTING __proxySetting__;
    SOMITEMTYPE __somItemTypeEnum__;
    SOMITEMTYPE __somItemType__;
    SCHEMAUSE __schemaUseEnum__;
    SCHEMAUSE __schemaUse__;
    SCHEMADERIVATIONMETHOD __schemaDerivationMethodEnum__;
    SCHEMADERIVATIONMETHOD __schemaDerivationMethod__;
    SCHEMACONTENTTYPE __schemaContentTypeEnum__;
    SCHEMACONTENTTYPE __schemaContentType__;
    SCHEMAPROCESSCONTENTS __schemaProcessContentsEnum__;
    SCHEMAPROCESSCONTENTS __schemaProcessContents__;
    SCHEMAWHITESPACE __schemaWhitespaceEnum__;
    SCHEMAWHITESPACE __schemaWhitespace__;
    SCHEMATYPEVARIETY __schemaTypeVarietyEnum__;
    SCHEMATYPEVARIETY __schemaTypeVariety__;
}
alias XHR_COOKIE_STATE = int;
enum : int
{
    XHR_COOKIE_STATE_UNKNOWN   = 0x00000000,
    XHR_COOKIE_STATE_ACCEPT    = 0x00000001,
    XHR_COOKIE_STATE_PROMPT    = 0x00000002,
    XHR_COOKIE_STATE_LEASH     = 0x00000003,
    XHR_COOKIE_STATE_DOWNGRADE = 0x00000004,
    XHR_COOKIE_STATE_REJECT    = 0x00000005,
}

alias XHR_COOKIE_FLAG = int;
enum : int
{
    XHR_COOKIE_IS_SECURE       = 0x00000001,
    XHR_COOKIE_IS_SESSION      = 0x00000002,
    XHR_COOKIE_THIRD_PARTY     = 0x00000010,
    XHR_COOKIE_PROMPT_REQUIRED = 0x00000020,
    XHR_COOKIE_EVALUATE_P3P    = 0x00000040,
    XHR_COOKIE_APPLY_P3P       = 0x00000080,
    XHR_COOKIE_P3P_ENABLED     = 0x00000100,
    XHR_COOKIE_IS_RESTRICTED   = 0x00000200,
    XHR_COOKIE_IE6             = 0x00000400,
    XHR_COOKIE_IS_LEGACY       = 0x00000800,
    XHR_COOKIE_NON_SCRIPT      = 0x00001000,
    XHR_COOKIE_HTTPONLY        = 0x00002000,
}

alias XHR_CRED_PROMPT = int;
enum : int
{
    XHR_CRED_PROMPT_ALL   = 0x00000000,
    XHR_CRED_PROMPT_NONE  = 0x00000001,
    XHR_CRED_PROMPT_PROXY = 0x00000002,
}

alias XHR_AUTH = int;
enum : int
{
    XHR_AUTH_ALL   = 0x00000000,
    XHR_AUTH_NONE  = 0x00000001,
    XHR_AUTH_PROXY = 0x00000002,
}

alias XHR_PROPERTY = int;
enum : int
{
    XHR_PROP_NO_CRED_PROMPT         = 0x00000000,
    XHR_PROP_NO_AUTH                = 0x00000001,
    XHR_PROP_TIMEOUT                = 0x00000002,
    XHR_PROP_NO_DEFAULT_HEADERS     = 0x00000003,
    XHR_PROP_REPORT_REDIRECT_STATUS = 0x00000004,
    XHR_PROP_NO_CACHE               = 0x00000005,
    XHR_PROP_EXTENDED_ERROR         = 0x00000006,
    XHR_PROP_QUERY_STRING_UTF8      = 0x00000007,
    XHR_PROP_IGNORE_CERT_ERRORS     = 0x00000008,
    XHR_PROP_ONDATA_THRESHOLD       = 0x00000009,
    XHR_PROP_SET_ENTERPRISEID       = 0x0000000a,
    XHR_PROP_MAX_CONNECTIONS        = 0x0000000b,
}

alias XHR_CERT_IGNORE_FLAG = uint;
enum : uint
{
    XHR_CERT_IGNORE_REVOCATION_FAILED = 0x00000080,
    XHR_CERT_IGNORE_UNKNOWN_CA        = 0x00000100,
    XHR_CERT_IGNORE_CERT_CN_INVALID   = 0x00001000,
    XHR_CERT_IGNORE_CERT_DATE_INVALID = 0x00002000,
    XHR_CERT_IGNORE_ALL_SERVER_ERRORS = 0x00003180,
}

alias XHR_CERT_ERROR_FLAG = uint;
enum : uint
{
    XHR_CERT_ERROR_REVOCATION_FAILED = 0x00800000,
    XHR_CERT_ERROR_UNKNOWN_CA        = 0x01000000,
    XHR_CERT_ERROR_CERT_CN_INVALID   = 0x02000000,
    XHR_CERT_ERROR_CERT_DATE_INVALID = 0x04000000,
    XHR_CERT_ERROR_ALL_SERVER_ERRORS = 0x07800000,
}

struct XHR_COOKIE
{
    PWSTR pwszUrl;
    PWSTR pwszName;
    PWSTR pwszValue;
    PWSTR pwszP3PPolicy;
    FILETIME ftExpires;
    uint dwFlags;
}
enum IID_IXMLHTTPRequest2Callback = GUID(0xa44a9299, 0xe321, 0x40de, [0x88, 0x66, 0x34, 0x1b, 0x41, 0x66, 0x91, 0x62]);
interface IXMLHTTPRequest2Callback : IUnknown
{
    HRESULT OnRedirect(IXMLHTTPRequest2, const(wchar)*);
    HRESULT OnHeadersAvailable(IXMLHTTPRequest2, uint, const(wchar)*);
    HRESULT OnDataAvailable(IXMLHTTPRequest2, ISequentialStream);
    HRESULT OnResponseReceived(IXMLHTTPRequest2, ISequentialStream);
    HRESULT OnError(IXMLHTTPRequest2, HRESULT);
}
enum IID_IXMLHTTPRequest2 = GUID(0xe5d37dc0, 0x552a, 0x4d52, [0x9c, 0xc0, 0xa1, 0x4d, 0x54, 0x6f, 0xbd, 0x4]);
interface IXMLHTTPRequest2 : IUnknown
{
    HRESULT Open(const(wchar)*, const(wchar)*, IXMLHTTPRequest2Callback, const(wchar)*, const(wchar)*, const(wchar)*, const(wchar)*);
    HRESULT Send(ISequentialStream, ulong);
    HRESULT Abort();
    HRESULT SetCookie(const(XHR_COOKIE)*, uint*);
    HRESULT SetCustomResponseStream(ISequentialStream);
    HRESULT SetProperty(XHR_PROPERTY, ulong);
    HRESULT SetRequestHeader(const(wchar)*, const(wchar)*);
    HRESULT GetAllResponseHeaders(ushort**);
    HRESULT GetCookie(const(wchar)*, const(wchar)*, uint, uint*, XHR_COOKIE**);
    HRESULT GetResponseHeader(const(wchar)*, ushort**);
}
struct XHR_CERT
{
    uint cbCert;
    ubyte* pbCert;
}
enum IID_IXMLHTTPRequest3Callback = GUID(0xb9e57830, 0x8c6c, 0x4a6f, [0x9c, 0x13, 0x47, 0x77, 0x2b, 0xb0, 0x47, 0xbb]);
interface IXMLHTTPRequest3Callback : IXMLHTTPRequest2Callback
{
    HRESULT OnServerCertificateReceived(IXMLHTTPRequest3, uint, uint, const(XHR_CERT)*);
    HRESULT OnClientCertificateRequested(IXMLHTTPRequest3, uint, const(ushort)**);
}
enum IID_IXMLHTTPRequest3 = GUID(0xa1c9feee, 0x617, 0x4f23, [0x9d, 0x58, 0x89, 0x61, 0xea, 0x43, 0x56, 0x7c]);
interface IXMLHTTPRequest3 : IXMLHTTPRequest2
{
    HRESULT SetClientCertificate(uint, const(ubyte)*, const(wchar)*);
}
